[
  {
    "body": "* Menu * Contact us AI Development Tools Compared – The Differences You’ll Need to Know * ** AI There are many different types of AI development tools available, but not all of them are created equal. Some tools are more suited for certain tasks than others, and it’s important to select the right tool for the job. Choosing the wrong tool can lead to frustration and wasted time, so it’s important to do your research before you start coding. There are many different types of AI development tools available, so there’s sure to be one that fits your needs. Common types of AI development tools include cloud-based platforms, open source software, and low code development tools. Cloud-based platforms are typically the most user friendly and allow you to build sophisticated models quickly. They offer a wide variety of features, such as data analysis tools, natural language processing capabilities, automatic machine learning models creation and pre-trained models that can be used for various tasks. Open-source software offers a great deal of flexibility and the ability to customize your AI model for specific tasks. However, using open source software requires coding knowledge and experience and is best suited for more experienced developers. Low code development tools allow you to create AI applications without having to write code. These tools allow developers of any skill level to quickly and easily create AI applications, eliminating the need for coding knowledge or experience. Of course, there are occasional overlaps, like cloud platforms using open-source technologies – but to find out all the similarities and differences, we’ll need to examine them. Let’s explore each one in further detail: Detectron 2 Detectron 2 is Facebook’s state-of-the-art object detection and segmentation library. It features a number of pre-trained models and baselines that can be used for a variety of tasks, and it also has cuda bindings that allow it to run on gpu for even faster training. Compared to its predecessor, Detectron 2 is much faster to train and can achieve better performance on a variety of benchmarks. It is also open source and written in python, making it easy to use and extend. Overall, Detectron 2 is an excellent choice for any object detection or segmentation task. The fact that it is built on PyTorch makes it very easy to share models between different use cases. For example, a model that is developed for research purposes can be quickly transferred to a production environment. This makes Detectron2 ideal for organizations that need to move quickly and efficiently between different use cases. In addition, the library’s ability to handle large-scale datasets makes it perfect for organizations that need to process large amounts of data. Overall, Detectron2 is an extremely versatile tool that can be used in a variety of different settings. Caffe Caffe is a deep learning framework for model building and optimisation. It was originally focused on vision applications, but it is now branching out into other areas such as sequences, reinforcement learning, speech, and text. Caffe is written in C++ and CUDA, with interfaces for python and mathlab. The community has built a number of models which are available at https://github.com/BVLC/caffe/wiki/Model-Zoo. Caffe is a powerful tool for anyone interested in deep learning. It features fast, well-tested code and a seamless switch between CPU and GPU – meaning that if you don’t have a GPU that supports CUDA, it automatically defaults to the CPU. This makes it a versatile tool for deep learning researchers and practitioners. The Caffe framework is also open source, so anyone can contribute to its development. Caffe offers the model definitions, optimization settings, and pre-trained weights so you can start right away. The BVLC models are licensed for unrestricted use, so you can use them in your own projects without any restrictions. Keras Keras is a deep learning framework that enables fast experimentation. It is based on Python and supports multiple backends, including TensorFlow, CNTK, and Theano. Keras includes specific tools for computer vision (KerasCV) and natural language processing (KerasNLP). Keras is open source and released under the MIT license. The idea behind Keras is to provide a consistent interface to a range of different neural network architectures, allowing for easy and rapid prototyping. It is also possible to run Keras models on top of other lower-level frameworks such as MXNet, Deeplearning4j, TensorFlow or Theano. Keras, like other similar tools, has the advantage of being able to run on both CPU and GPU devices with very little modification to the code. In addition, Keras includes a number of key features such as support for weight sharing and layer reuse, which can help to improve model performance and reduce training time. CUDA The CUDA toolkit is a powerful set of tools from NVIDIA for running code on GPUs. It includes compilers, libraries, and other necessary components for developing GPU-accelerated applications. The toolkit supports programming in Python, C, and C++, and it makes it easy to take advantage of the massive parallel computing power of GPUs. With the CUDA toolkit, you can accelerate your code to run orders of magnitude faster than on a CPU alone. Whether you’re looking to speed up machine learning algorithms or render complex 3D graphics, the CUDA toolkit can help you get the most out of your NVIDIA GPUs. In the context of fraud detection, the CUDA toolkit can be used to train graph neural networks (GNNs) on large datasets in an efficient manner. This allows GNNs to learn from more data, which can lead to improved performance. In addition, the CUDA toolkit can be used to optimize the inference process, which is important for real-time applications such as fraud detection, which is a critical application for machine learning. Many techniques struggle with fraud detection because they cannot easily identify patterns that span multiple transactions. However, GNNs are well-suited to this task due to their ability to aggregate information from the local neighborhood of a transaction. This enables them to identify larger patterns that may be missed by traditional methods. TensorFlow TensorFlow is an open-source platform for machine learning that offers a full pipeline from model building to deployment. It has a large collection of pre-trained models and supports a broad range of programming languages including Javascript, Python, Android, Swift, C++, and Objective C. TensorFlow uses the Keras API and also supports CUDA for accelerated training on NVIDIA GPUs. In addition to providing tools for developers to build and train their own models, TensorFlow also offers a wide range of resources such as tutorials and guides. TensorFlow.js is a powerful tool that can be used to solve a variety of problems. In the consumer packaged goods (CPG) industry, one of the most common problems is real-time and offline SKU detection. This problem is often caused by errors in manually inputting data, such as when a product is scanned at a store or when an order is placed online. TensorFlow.js can be used to create a solution that would automatically detect and correct these errors in real time, as well as provide offline support for cases where a connection is not available. This can greatly improve the efficiency of the CPG industry and reduce the amount of waste caused by incorrect data input. PyTorch PyTorch is a powerful machine learning framework that allows developers to create sophisticated applications for computer vision, audio processing, and time series analysis. The framework is based on the popular Python programming language, and comes with a large number of libraries and frameworks for easily creating complex models and algorithms. PyTorch also supports bindings for c++ and java, making it a great option for cross-platform development. In addition, the framework includes CUDA support for accelerated computing on NVIDIA GPUs. And finally, PyTorch comes with a huge collection of pre-trained models that can be used for quickly building sophisticated applications. PyTorch’s ease of use and flexibility make it a popular choice for researchers and developers alike. The PyTorch framework is known to be convenient and flexible, with examples covering reinforcement learning, image classification, and natural language processing as the more common use cases. As a result, it is no surprise that the framework has been gaining popularity in recent years. Thanks to its many features and benefits, PyTorch looks poised to become the go-to framework for deep learning in the years to come. Apache MXNet MXNet is an open-source deep learning framework that allows you to define, train, and deploy deep neural networks on a wide array of devices, from cloud infrastructure to mobile devices. It’s scalable, allowing for fast model training, and supports a flexible programming model and multiple languages. It’s built on a dynamic dependency scheduler that automatically parallelizes both symbolic and imperative operations on the fly. A graph optimization layer makes symbolic execution fast and memory efficient. The MXNet library is portable and lightweight. It’s accelerated with the NVIDIA Pascal™ GPUs and scales across multiple GPUs and multiple nodes, allowing you to train models faster. Whether you’re looking to build state-of-the-art models for image classification, object detection, or machine translation, MXNet is the tool for you. Horovod Horovod is a distributed training framework for deep learning that supports TensorFlow, Keras, PyTorch, and Apache MXNet. It is designed to make distributed training easy to use and efficient. Horovod uses a message passing interface to communicate between nodes, and each node runs a copy of the training script. The framework handles the details of communication and synchronization between nodes so that users can focus on their model. Horovod also includes a number of optimizations to improve performance, such as automatically fusing small tensors together and using hierarchical allreduce to reduce network traffic. For Uber’s data scientists, the process of installing TensorFlow was made even more challenging by the fact that different teams were using different releases of the software. The team wanted to find a way to make it easier for all teams to use the ring-allreduce algorithm, without requiring them to upgrade to the latest version of TensorFlow or apply patches to their existing versions. The solution was to create a stand-alone package called Horovod. This package allowed the team to cut the time required to install TensorFlow from about an hour to a few minutes, depending on the hardware. As a result, Horovod has made it possible for Uber’s data scientists to spend less time installing software and more time doing what they do best. Oracle AI Oracle AI is a suite of artificial intelligence services that can be used to build, train and deploy models. The services include natural language processing, chat bots / customer support, text-to-speech, speech-to-text, object detection for images and data mining. Oracle AI offers pre-configured vms with access to GPUs. The service can be used to build models for anomaly detection, analytics and data mining. Oracle AI is a powerful tool that can be used to improve your business. Children’s Medical Research Institute (CMRI) is a not-for-profit organisation dedicated to improving the health of children through medical research. CMRI moved to Oracle Cloud Infrastructure (OCI) as its preferred cloud platform. This move has helped the institute take advantage of big data and machine learning capabilities to automate routine database tasks, database consolidation, operational reporting, and batch data processing. Overall, the switch to OCI has been a positive move for CMRI, and one that is sure to help the institute continue its important work. H2O H2O is a powerful open source AI platform that is used by companies all over the world to improve their customer support, marketing, and data mining efforts. The software provides a wide range of features that make it easy to collect and analyze customer data, identify anomalies, and create chat bots that can provide an engaging customer experience. H2O is constantly evolving, and the company behind it is always introducing new features and improvements. For example, it can be used to create an intelligent cash management system that predicts cash demand and helps to optimize ATM operations. It can also help information security teams reduce risk by identifying potential threats and vulnerabilities in real time. In addition, H2O.AI can be used to transform auditing from quarterly to real-time, driving audit quality, accuracy and reliability. Alibaba Cloud Alibaba Cloud is a leading provider of cloud computing services. Its products include machine learning, natural language processing, data mining, and analytics. Alibaba Cloud’s machine learning platform offers a variety of pre-created algorithms that can be used for tasks such as data mining, anomaly detection, and predictive maintenance. The platform also provides tools for training and deploying machine learning models. Alibaba Cloud’s natural language processing products offer APIs for text analysis, voice recognition, and machine translation. The company’s data mining and analytics products provide tools for exploring and analyzing data. Alibaba Cloud also offers products for security, storage, and networking. Alibaba, the world’s largest online and mobile commerce company, uses intelligent recommendation algorithms to drive sales using personalized customer search suggestions on its Tmall homepage and mobile app. The system takes into account a customer’s purchase history, browsing behavior, and social interactions when making recommendations. Alibaba has found that this approach leads to increased sales and higher customer satisfaction. In addition to search suggestions, the system also provides personalized product recommendations to customers based on their past behavior. This has resulted in increased sales and engagement on the platform. Alibaba is constantly tweaking and improving its algorithms to ensure that it is providing the most relevant and useful data to its users. IBM Watson IBM Watson is a powerful artificial intelligence system that has a range of applications in business and industry. One of the most important functions of Watson is its ability to process natural language. This enables it to understand human conversation and respond in a way that sounds natural. This capability has been used to develop chatbots and customer support systems that can replicate human conversation. In addition, Watson’s natural language processing capabilities have been used to create marketing campaigns that can target specific demographics. Another key application of Watson is its ability to detect anomalies. This makes it an essential tool for monitoring systems and identifying potential problems. As a result, IBM Watson is a versatile and valuable artificial intelligence system with a wide range of applications. IBM Watson is employed in nearly every industry vertical, as well as in specialized application areas such as cybersecurity. This technology is often used by a company’s data analytics team, but Watson has become so user friendly that it is also easily used by end users such as physicians or marketers. Azure AI Azure AI is a suite of services from Microsoft that helps you build, optimize, train, and deploy models. You can use it for object detection in images and video, natural language processing, chatbots and customer support, text-to-speech, speech-to-text, data mining and analytics, and anomaly detection. Azure AI also provides pre-configured virtual machines so you can get started quickly and easily. Whether you’re an experienced data scientist or just getting started with machine learning, Azure AI can help you achieve your goals. With the rapid pace of technological advancement, it is no surprise that the aviation industry is constantly evolving. One of the leading companies at the forefront of this change is Airbus. The company has unveiled two new innovations that utilize Azure AI solutions to revolutionize pilot training and predict aircraft maintenance issues. Google AI Google AI is a broad set of tools and services that helps you build, deploy, and train models, as well as to take advantage of pre-trained models. You can use it to detect objects in images and video, to perform natural language processing tasks such as chat bots or customer support, to translate text, and to convert text-to-speech or speech-to-text. Additionally, Google AI can be used for data mining and analytics, as well as for anomaly detection. All of these services are hosted on Google Cloud Platform, which offers a variety of options for GPU-accelerated computing, pre-configured virtual machines, and TensorFlow hosting. UPS and Google Cloud Platform were able to develop routing software that has had a major impact on the company’s bottom line. The software takes into account traffic patterns, weather conditions, and the location of UPS facilities, in order to calculate the most efficient route for each driver. As a result, UPS has saved up to $400 million a year, and reduced its fuel consumption by 10 million gallons. In addition, the software has helped to improve customer satisfaction by ensuring that packages are delivered on time. AWS AI Amazon Web Services offers a variety of AI services to help developers create intelligent applications. With pre-trained models for common use cases, AWS AI makes it easy to get started with machine learning. For images and video, the object detection service provides accurate labels and coordinates. Natural language processing can be used for chat bots and customer support, as well as translation. Text-to-speech and speech-to-text are also available. AI powered search provides relevant results from your data. Pattern recognition can be used for code review and monitoring. And data mining and analytics can be used for anomaly detection. AWS AI also offers hosted GPUs and pre-configured vms. With so many powerful features, Amazon Web Services is the perfect platform for developing AI applications. Formula 1 is the world’s most popular motorsport, with hundreds of millions of fans worldwide. The sport has been at the forefront of technological innovation for decades, and its use of data and analytics has been central to its success. Teams have long used on-premises data centers to store and process large amounts of data, but the sport is now accelerating its transformation to the cloud. Formula 1 is moving the vast majority of its infrastructure to Amazon Web Services (AWS), and standardizing on AWS’s machine-learning and data-analytics services. This will enable Formula 1 to enhance its race strategies, data tracking systems, and digital broadcasts through a wide variety of AWS services—including Amazon SageMaker, AWS Lambda, and AWS’s event-driven serverless computing service. By using these services, Formula 1 will be able to deliver new race metrics that will change the way fans and teams experience racing. Conclusion Choosing the right AI development tool can be difficult. This article has provided a comparison of some of the most popular tools on the market. Each tool has its own strengths and weaknesses, so it is important to decide which one will best suit your needs. * Practical Tutorial to * on Google Colab Janos Kubisch We will take a look at how to set up a RAG – * – demo with the Anthropic Claude 3 Sonet model, using google’s CoLab platform. CoLab offers free instances with T4 GPUs sometimes, but we’ll only Read More » Where to Host Your AI: Comparing ML Model Deployment Services Janos Kubisch When it comes to hosting machine learning models, whether it is for private or public use, it’s not a simple task to find the right services for the job. Many articles online and responses from AI tools tend to include Read More » ChatGPT use case examples for programming Ferenc Hámori Learn how we use GPT-based products as tools in a professional webdev setting. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/ai-development-tools-compared/"
  },
  {
    "body": "* Menu * Contact us Argo CD Kubernetes Tutorial * *ngstack.com In this article: Janos Kubisch Kubernetes Usually, when devs set up a CI/CD pipeline for an application hosted on KubernetesKubernetes (often abbreviated as K8s) offers a framework to run distributed systems efficiently. It's a platform that helps managing containerized workloads and services, and even takes care of scaling. Google open-sourced it in 2014., they handle both the CI and CD parts in one task runner, such as CircleCI or Travis CI. These services offer push-based updates to your deployments, which means that credentials for the code repo and the deployment target must be stored with these services. This method can be problematic if the service gets compromised, e.g. as it happened to CodeShip. Even using services such as GitLab CI and GitHub Actions requires that credentials for accessing your cluster be stored with them. If you’re employing GitOps, to take advantage of using the usual Push to repo -> Review Code -> Merge Code sequence for managing your infrastructure configuration as well, this would also mean access to your whole infrastructure. Learn When to Use Kubernetes: Get Our Case Study! Enter your email to subscribe to our newsletter and we’ll send you a link to download the case study. DOWNLOAD NOW Luckily there are tools to help us with these issues. Two of the most known are Argo CD and Flux. They allow credentials to be stored within your Kubernetes cluster, where you have more control over their security. They also offer pull-based deployment with drift detection. Both of these tools solve the same issues, but tackle them from different angles. Here, we’ll take a deeper look at Argo CD out of the two. What is Argo CD Argo CD is a continuous deployment tool that you can install into your Kubernetes cluster. It can pull the latest code from a git repository and deploy it into the cluster – as opposed to external CD services, deployments are pull-based. You can manage updates for both your application and infrastructure configuration with Argo CD. Advantages of such a setup include being able to use credentials from the cluster itself for deployments, which can be stored in secrets or a vault. Preparation To try out Argo CD, we’ve also prepared a test project that we’ll deploy to Kubernetes hosted on DigitalOcean. You can grab the example project from our GitLab repository here: https://gitlab.com/risingstack-org/argocd-demo/ Forking the repo will allow you to make changes for yourself, and it can be set up later in Argo CD as the deployment source. Get doctl from here: https://docs.digitalocean.com/reference/doctl/how-to/install/ Or, if you’re using a mac, from Homebrew: brew install doctl You can use any Kubernetes provider for this tutorial. The two requirements are having a Docker repository and a Kubernetes cluster with access to it. For this tutorial, we chose to go with DigitalOcean for the simplicity of its setup, but most other platforms should work just fine. We’ll focus on using the web UI for the majority of the process, but you can also opt to use the `doctl` cli tool if you wish. `doctl` can mostly replace `kubectl` as well. `doctl` will only be needed to push our built docker image to the repo that our deployment will have access to. Helm is a templating engine for Kubernetes. It allows us to define values separately from the structure of the yaml files, which can help with access control and managing multiple environments using the same template. You can grab Helm here: https://github.com/helm/helm/releases Or via Homebrew for mac users: brew install helm Download the latest Argo CD version from https://github.com/argoproj/argo-cd/releases/latest If you’re using a mac, you can grab the cli tools from Homebrew: brew install argocd DigitalOcean Setup After logging in, first, create a cluster using the “Create” button on the top right, and selecting Kubernetes. For the purposes of this demo, we can just go with the smallest cluster with no additional nodes. Be sure to choose a data center close to you. Preparing the demo app You can find the demo app in the node-app folder in the repo you forked. Use this folder for the following steps to build and push the docker image to the GitLab registry: docker login registry.gitlab.com docker build . -t registry.gitlab.com/<substiture repo name here>/demo-app-1 docker push registry.gitlab.com/<substiture repo name here>/demo-app-1 GitLab offers a free image registry with every git repo – even free tier ones. You can use these to store your built image, but be aware that the registry inherits the privacy setting of the git repo, you can’t change them separately. Once the image is ready, be sure to update the values.yaml file with the correct image url and use helm to generate the resources.yaml file. You can then deploy everything using kubectl: helm template -f \"./helm/demo-app/values.yaml\" \"./helm/demo-app\" > \"./helm/demo-app/resources/resources.yaml\" kubectl apply -f helm/demo-app/resources/resources.yaml The only purpose of these demo-app resources’ is to showcase the ArgoCD UI capabilities, that’s why it also contains an Ingress resource as a plus. Install Argo CD into the cluster Argo CD provides a yaml file that installs everything you’ll need and it’s available online. The most important thing here is to make sure that you install it into the `argocd` namespace, otherwise, you’ll run into some errors later and Argo CD will not be usable. kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml From here, you can use Kubernetes port-forwarding to access the UI of Argo CD: kubectl -n argocd port-forward svc/argocd-server 8080:443 This will expose the service on localhost:8080 – we will use the UI to set up the connection to GitLab, but it could also be done via the command line tool. Argo CD setup To log in on the UI, use `admin` as username, and the password retrieved by this command: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d Once you’re logged in, connect your fork of the demo app repo from the Repositories inside the Settings menu on the left side. Here, we can choose between ssh and https authentication – for this demo, we’ll use https, but for ssh, you’d only need to set up a key pair for use. Create an API key on GitLab and use it in place of a password alongside your username to connect the repo. An API key allows for some measure of access control as opposed to using your account password. After successfully connecting the repository, the only thing left is to set up an Application, which will take care of synchronizing the state of our deployment with that described in the GitLab repo. You’ll need to choose a branch or a tag to use to monitor. Let’s choose the master branch for now – it should contain the latest stable code anyway. Setting the sync policy to automatic allows for automatic deployments when the git repo is updated, and also provides automatic pruning and self-healing capabilities. Be sure to set the destination cluster to the one available in the dropdown and use the `demo` namespace. If everything is set correctly, Argo CD should now start syncing the deployment state. Features of Argo CD From the application view, you can now see the different parts that comprise our demo application. Clicking on any of these parts allows for checking the diff of the deployed config, and the one checked into git, as well as the yaml files themselves separately. The diff should be empty for now, but we’ll see it in action once we make some changes or if you disable automatic syncing. You also have access to the logs from the pods here, which can be quite useful – logs are not retained between different pod instances, which means that they are lost on the deletion of a pod, however. It is also possible to handle rollbacks from here, clicking on the “History and Rollback” button. Here, you can see all the different versions that have been deployed to our cluster by commit. You can re-deploy any of them using the … menu on the top right, and selecting “Redeploy” – this feature needs automatic deployment to be turned off. However, you’ll be prompted to do so here. These should cover the most important parts of the UI and what is available in Argo CD. Next up, we’ll take a look at how the deployment update happens when code changes on GitLab. Updating the deployment With the setup done, any changes you make to the configuration that you push to the master branch should be reflected on the deployment shortly after. A very simple way to check out the updating process is to bump up the `replicaCount` in values.yaml to 2 (or more), and run the helm command again to generate the resources.yaml. Then, commit and push to master and monitor the update process on the Argo CD UI. You should see a new event in the demo-app events, with the reason `ScalingReplicaSet`. You can double-check the result using kubectl, where you should now see two instances of the demo-app running: kubectl -n demo get pod There is another branch prepared in the repo, called second-app, which has another app that you can deploy, so you can see some more of the update process and diffs. It is quite similar to how the previous deployment works. First, you’ll need to merge the second-app branch into master – this will allow the changes to be automatically deployed, as we set it up already. Then, from the node-app-2 folder, build and push the docker image. Make sure to have a different version tag for it, so we can use the same repo! docker build . -t registry.gitlab.com/<substitute repo name here>/demo-app-2 docker push registry.gitlab.com/<substitute repo name here>/demo-app-2 You can set deployments to manual for this step, to be able to take a better look at the diff before the actual update happens. You can do this from the sync settings part of `App details`. Generate the updated resources file afterwards, then commit and push it to git to trigger the update in Argo CD: helm template -f \"./helm/demo-app/values.yaml\" \"./helm/demo-app\" > \"./helm/demo-app/resources/resources.yaml\" This should result in a diff appearing `App details` -> `Diff` for you to check out. You can either deploy it manually or just turn auto-deploy back. ArgoCD safeguards you from those resource changes that are drifting from the latest source-controlled version of your code. Let’s try to manually scale up the deployment to 5 instances: Get the name of the replica set: kubectl -n demo get rs Scale it to 5 instances: kubectl -n demo scale --replicas=5 rs/demo-app-<number> If you are quick enough, you can catch the changes applied on the ArgoCD Application Visualization as it tries to add those instances. However, ArgoCD will prevent this change, because it would drift from the source controlled version of the deployment. It also scales the deployment down to the defined value in the latest commit (in my example it was set to 3). The downscale event can be found under the `demo-app` deployment events, as shown below: From here, you can experiment with whatever changes you’d like! Finishing our ArgoCD Kubernetes Tutorial This was our quick introduction to using ArgoCD, which can make your GitOps workflow safer and more convenient. Stay tuned, as we’re planning to take a look at the other heavy-hitter next time: Flux. This article was written by Janos Kubisch, senior engineer at RisingStack. * Kubernetes * You’ll Need the Most RisingStack Engineering Are you currently preparing for a Kubernetes interview? If so, you’ll want to make sure you’re familiar with the questions and answers below at least. This article will help you demonstrate your understanding of Kubernetes concepts and how they can Read More » Sometimes you do need Kubernetes! But how should you decide? Tamas Kadlecsik A case study where the adoption of Kubernetes has been heavily contested. Learn about our decision making process, and how we overcame k8s’s limitations! Read More » RisingStack Joins the Cloud Native Node.js Project Tamas Kadlecsik The CNJS project provides best practices and tools to build and integrate enterprise-grade Cloud Native Node.js applications. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/argo-cd-kubernetes-tutorial/"
  },
  {
    "body": "* Menu * Contact us The Best JavaScript Frameworks: Pros and Cons Explained * ** Node.js There are a lot of different JavaScript frameworks out there, and it can be tough to keep track of them all. In this article, we’ll focus on the most popular ones, and explore why they’re either loved or disliked by developers. React React is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications. However, React is only concerned with rendering data to the DOM, and so creating React apps usually requires the use of additional libraries for state management, routing, and interaction with an API. React is also used for building reusable UI components. In that sense, it works much like a JavaScript framework such as Angular or Vue. However, React components are typically written in a declarative manner rather than using imperative code, making them easier to read and debug. Because of this, many developers prefer to use React for building UI components even if they are not using it as their entire front-end framework. Advantages: React is fast and efficient because it uses a virtual DOM rather than manipulating the real DOM. React is easy to learn because of its declarative syntax and clear documentation. React components are reusable, making code maintenance easier. Disadvantages: React has a large learning curve because it is a complex JavaScript library. React is not a full-fledged framework, and so it requires the use of additional libraries for many tasks. Next.js Next.js is a javascript library that enables server-side rendering for React applications. This means that next.js can render your React application on the server before sending it to the client. This has several benefits. First, it allows you to pre-render components so that they are already available on the client when the user requests them. Second, it enables better SEO for your React application by allowing crawlers to index your content more easily. Finally, it can improve performance by reducing the amount of work that the client has to do in order to render the page. Here’s why developers like Next.js: Next.js makes it easy to get started with server-side rendering without having to do any configuration. Next.js automatically code splits your application so that each page is only loaded when it is requested, which can improve performance. Disadvantages: If you’re not careful, next.js can make your application codebase more complex and harder to maintain. Some developers find the built-in features of next.js to be opinionated and inflexible. Vue.js Vue.js is an open-source JavaScript framework for building user interfaces and single-page applications. Unlike other frameworks such as React and Angular, Vue.js is designed to be lightweight and easy to use. The Vue.js library can be used in conjunction with other libraries and frameworks, or can be used as a standalone tool for creating front-end web applications. One of the key features of Vue.js is its two-way data binding, which automatically updates the view when the model changes, and vice versa. This makes it an ideal choice for building dynamic user interfaces. In addition, Vue.js comes with a number of built-in features such as a templating system, a reactivity system, and an event bus. These features make it possible to create sophisticated applications without having to rely on third-party libraries. As a result, Vue.js has become one of the most popular JavaScript frameworks in recent years. Advantages: Vue.js is easy to learn due to its small size and clear documentation. Vue.js components are reusable, which makes code maintenance easier. Vue.js applications are very fast due to the virtual DOM and async component loading. Disadvantages: While Vue.js is easy to learn, it has a large learning curve if you want to master all its features. Vue.js does not have as many libraries and tools available as some of the other frameworks. Angular Angular is a JavaScript framework for building web applications and apps in JavaScript, html, and Typescript. Angular is created and maintained by Google. Angular provides two-way data binding, so that changes to the model are automatically propagated to the view. It also provides a declarative syntax that makes it easy to build dynamic UIs. Finally, Angular provides a number of useful built-in services, such as HTTP request handling, and support for routing and templates. Advantages: Angular has a large community and many libraries and tools available. Angular is easy to learn due to its well-organized documentation and clear syntax. Disadvantages: While Angular is easy to learn, it has a large learning curve if you want to master all its features. Angular is not as lightweight as some of the other frameworks. Svelte In a nutshell, Svelte is a JavaScript framework similar to React, Vue, or Angular. However, where those frameworks use virtual DOM (Document Object Model) diffing to figure out what changed between views, Svelte uses a technique called DOM diffing. This means that it only updates the parts of the DOM that have changed, making for a more efficient rendering process. In addition, Svelte also includes some built-in optimizations that other frameworks do not, such as automatically batching DOM updates and code-splitting. These features make Svelte a good choice for high-performance applications. Advantages: Svelte has built-in optimizations that other frameworks do not, such as code-splitting. Svelte is easy to learn due to its clear syntax and well-organized documentation. Disadvantages: While Svelte is easy to learn, it has a large learning curve if you want to master all its features. Svelte does not have as many libraries and tools available as some of the other frameworks. Gatsby Gatsby is a free and open-source framework based on React that helps developers build blazing fast websites and apps. It uses cutting edge technologies to make the process of building websites and applications more efficient. One of its key features is its ability to prefetch resources so that they are available instantaneously when needed. This makes Gatsby websites extremely fast and responsive. Another benefit of using Gatsby is that it allows developers to use GraphQL to query data from any source, making it easy to build complex data-driven applications. In addition, Gatsby comes with a number of plugins that make it even easier to use, including ones for SEO, analytics, and image optimization. All of these factors make Gatsby an extremely popular choice for building modern websites and applications. Advantages: Gatsby websites are extremely fast and responsive due to its use of prefetching. Gatsby makes it easy to build complex data-driven applications due to its support for GraphQL. Gatsby comes with a number of plugins that make it even easier to use. Disadvantages: While Gatsby is easy to use, it has a large learning curve if you want to master all its features. Gatsby does not have as many libraries and tools available as some of the other frameworks. Nuxt.js Nuxt.js is a progressive framework for building JavaScript applications. It is based on Vue.js and comes with a set of tools and libraries that make it easy to create universal applications that can be rendered on server-side and client-side. Nuxt.js also provides a way to handle asynchronous data and routing, which makes it perfect for building highly interactive applications. In addition, Nuxt.js comes with a CLI tool that makes it easy to scaffold new projects and build, run, and test them. With Nuxt.js, you can create impressive JavaScript applications that are fast, reliable, and scalable. Advantages: Nuxt.js is easy to use and extend. Nuxt.js applications are fast and responsive due to server-side rendering. Disadvantages: While Nuxt.js is easy to use, it has a large learning curve if you want to master all its features. Nuxt.js does not have as many libraries and tools available as some of the other frameworks. Ember.js Ember.js is known for its conventions over configuration approach which makes it easier for developers to get started with the framework. It also features built-in libraries for common tasks such as data persistence and routing which makes development faster. Although Ember.js has a steep learning curve, it provides developers with a lot of flexibility and power to create rich web applications. If you’re looking for a front-end JavaScript framework to build SPAs, Ember.js is definitely worth considering. Advantages: Ember.js uses conventions over configuration which makes it easier to get started with the framework. Ember.js has built-in libraries for common tasks such as data persistence and routing. Ember.js provides developers with a lot of flexibility and power to create rich web applications. Disadvantages: Ember.js has a steep learning curve. Ember.js does not have as many libraries and tools available as some of the other frameworks. Backbone.js Backbone.js is a lightweight JavaScript library that allows developers to create single-page applications. It is based on the Model-View-Controller (MVC) architecture, which means that it separates data and logic from the user interface. This makes code more maintainable and scalable, as well as making it easier to create complex applications. Backbone.js also includes a number of features that make it ideal for developing mobile applications, such as its ability to bind data to HTML elements and its support for touch events. As a result, Backbone.js is a popular choice for developers who want to create fast and responsive applications. Advantages: Backbone.js is lightweight and only a library, not a complete framework. Backbone.js is easy to learn and use. Backbone.js is very extensible with many third-party libraries available. Disadvantages: Backbone.js does not offer as much built-in functionality as some of the other frameworks. Backbone.js has a smaller community than some of the other frameworks. Conclusion In conclusion, while there are many different JavaScript frameworks to choose from, the most popular ones remain relatively stable. Each has its own benefits and drawbacks that developers must weigh when making a decision about which one to use for their project. While no framework is perfect, each has something to offer that can make development easier or faster. Everyone should consider the specific needs of their project when choosing a framework, as well as the skills of their team and the amount of time they have to devote to learning a new framework. By taking all of these factors into account, you can choose the best JavaScript framework for your project! * Node.js 23: Major Updates, Experimental Features, and Improved Performance * 23 is here, and it’s bringing some exciting changes and improvements to the runtime. With this release, Node.js 23 takes over as the ‘Current’ version, replacing Node.js 22, which is moving into Long-Term Support (LTS) later this month. What’s Read More » Node.js 22 and 22.1: Stable WebSocket and On-Disk Code Caching RisingStack Engineering Let’s explore the updates brought by Node.js 22, which promises enhancements in performance and development flexibility. Direct download links are available here. * in the latest release. Stable WebSocket Support: Node.js 22 Read More » * RisingStack Engineering * *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/best-javascript-frameworks/"
  },
  {
    "body": "* Menu * Contact us How to Deploy a Ceph Storage to Bare Virtual Machines Last updated: July 4, 2024 Search Search Popular ** DevOps Ceph is a freely available storage platform that implements object storage on a single distributed computer cluster and provides interfaces for object-, block- and file-level storage. Ceph aims primarily for completely distributed operation without a single point of failure. Ceph storage manages data replication and is generally quite fault-tolerant. As a result of its design, the system is both self-healing and self-managing. Ceph has loads of benefits and great features, but the main drawback is that you have to host and manage it yourself. In this post, we’ll check two different approaches of virtual machine deployment with Ceph. Anatomy of a Ceph cluster Before we dive into the actual deployment process, let’s see what we’ll need to fire up for our own Ceph cluster. There are three services that form the backbone of the cluster ceph monitors (ceph-mon) maintain maps of the cluster state and are also responsible for managing authentication between daemons and clients managers (ceph-mgr) are responsible for keeping track of runtime metrics and the current state of the Ceph cluster object storage daemons (ceph-osd) store data, handle data replication, recovery, rebalancing, and provide some ceph monitoring information. Additionally, we can add further parts to the cluster to support different storage solutions metadata servers (ceph-mds) store metadata on behalf of the Ceph Filesystem rados gateway (ceph-rgw) is an HTTP server for interacting with a Ceph Storage Cluster that provides interfaces compatible with OpenStack Swift and Amazon S3. There are multiple ways of deploying these services. We’ll check two of them: first, using the ceph/deploy tool, then a docker-swarm based vm deployment. Let’s kick it off! Ceph Setup Okay, a disclaimer first. As this is not a production infrastructure, we’ll cut a couple of corners. You should not run multiple different Ceph demons on the same host, but for the sake of simplicity, we’ll only use 3 virtual machines for the whole cluster. In the case of OSDs, you can run multiple of them on the same host, but using the same storage drive for multiple instances is a bad idea as the disk’s I/O speed might limit the OSD daemons’ performance. For this tutorial, I’ve created 4 EC2 machines in AWS: 3 for Ceph itself and 1 admin node. For ceph-deploy to work, the admin node requires passwordless SSH access to the nodes and that SSH user has to have passwordless sudo privileges. In my case, as all machines are in the same subnet on AWS, connectivity between them is not an issue. However, in other cases editing the hosts file might be necessary to ensure proper connection. Depending on where you deploy Ceph security groups, firewall settings or other resources have to be adjusted to open these ports 22 for SSH 6789 for monitors 6800:7300 for OSDs, managers and metadata servers 8080 for dashboard 7480 for rados gateway Without further ado, let’s start deployment. Ceph Storage Deployment Install prerequisites on all machines $ sudo apt update $ sudo apt -y install ntp python For Ceph to work seamlessly, we have to make sure the system clocks are not skewed. The suggested solution is to install ntp on all machines and it will take care of the problem. While we’re at it, let’s install python on all hosts as ceph-deploy depends on it being available on the target machines. Prepare the admin node $ ssh -i ~/.ssh/id_rsa -A ubuntu@13.53.36.123 As all the machines have my public key added to known_hosts thanks to AWS, I can use ssh agent forwarding to access the Ceph machines from the admin node. The first line ensures that my local ssh agent has the proper key in use and the -A flag takes care of forwarding my key. $ wget -q -O- 'https://download.ceph.com/keys/release.asc' | sudo apt-key add - echo deb https://download.ceph.com/debian-nautilus/ $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/ceph.list $ sudo apt update $ sudo apt -y install ceph-deploy We’ll use the latest nautilus release in this example. If you want to deploy a different version, just change the debian-nautilus part to your desired release (luminous, mimic, etc.). $ echo \"StrictHostKeyChecking no\" | sudo tee -a /etc/ssh/ssh_config > /dev/null OR $ ssh-keyscan -H 10.0.0.124,10.0.0.216,10.0.0.104 >> ~/.ssh/known_hosts Ceph-deploy uses SSH connections to manage the nodes we provide. Each time you SSH to a machine that is not in the list of known_hosts (~/.ssh/known_hosts), you’ll get prompted whether you want to continue connecting or not. This interruption does not mesh well with the deployment process, so we either have to use ssh-keyscan to grab the fingerprint of all the target machines or disable the strict host key checking outright. 10.0.0.124 ip-10-0-0-124.eu-north-1.compute.internal ip-10-0-0-124 10.0.0.216 ip-10-0-0-216.eu-north-1.compute.internal ip-10-0-0-216 10.0.0.104 ip-10-0-0-104.eu-north-1.compute.internal ip-10-0-0-104 Even though the target machines are in the same subnet as our admin and they can access each other, we have to add them to the hosts file (/etc/hosts) for ceph-deploy to work properly. Ceph-deploy creates monitors by the provided hostname, so make sure it matches the actual hostname of the machines otherwise the monitors won’t be able to join the quorum and the deployment fails. Don’t forget to reboot the admin node for the changes to take effect. $ mkdir ceph-deploy $ cd ceph-deploy As a final step of the preparation, let’s create a dedicated folder as ceph-deploy will create multiple config and key files during the process. Deploy resources $ ceph-deploy new ip-10-0-0-124 ip-10-0-0-216 ip-10-0-0-104 The command ceph-deploy new creates the necessary files for the deployment. Pass it the hostnames of the monitor nodes, and it will create cepf.conf and ceph.mon.keyring along with a log file. The ceph-conf should look something like this [global] fsid = 0572e283-306a-49df-a134-4409ac3f11da mon_initial_members = ip-10-0-0-124, ip-10-0-0-216, ip-10-0-0-104 mon_host = 10.0.0.124,10.0.0.216,10.0.0.104 auth_cluster_required = cephx auth_service_required = cephx auth_client_required = cephx It has a unique ID called fsid, the monitor hostnames and addresses and the authentication modes. Ceph provides two authentication modes: none (anyone can access data without authentication) or cephx (key based authentication). The other file, the monitor keyring is another important piece of the puzzle, as all monitors must have identical keyrings in a cluster with multiple monitors. Luckily ceph-deploy takes care of the propagation of the key file during virtual deployments. $ ceph-deploy install --release nautilus ip-10-0-0-124 ip-10-0-0-216 ip-10-0-0-104 As you might have noticed so far, we haven’t installed ceph on the target nodes yet. We could do that one-by-one, but a more convenient way is to let ceph-deploy take care of the task. Don’t forget to specify the release of your choice, otherwise you might run into a mismatch between your admin and targets. $ ceph-deploy mon create-initial Finally, the first piece of the cluster is up and running! create-initial will deploy the monitors specified in ceph.conf we generated previously and also gather various key files. The command will only complete successfully if all the monitors are up and in the quorum. $ ceph-deploy admin ip-10-0-0-124 ip-10-0-0-216 ip-10-0-0-104 Executing ceph-deploy admin will push a Ceph configuration file and the ceph.client.admin.keyring to the /etc/ceph directory of the nodes, so we can use the ceph CLI without having to provide the ceph.client.admin.keyring each time to execute a command. At this point, we can take a peek at our cluster. Let’s SSH into a target machine (we can do it directly from the admin node thanks to agent forwarding) and run sudo ceph status. $ sudo ceph status cluster: id: 0572e283-306a-49df-a134-4409ac3f11da health: HEALTH_OK services: mon: 3 daemons, quorum ip-10-0-0-104,ip-10-0-0-124,ip-10-0-0-216 (age 110m) mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0 B usage: 0 B used, 0 B / 0 B avail pgs: Here we get a quick overview of what we have so far. Our cluster seems to be healthy and all three monitors are listed under services. Let’s go back to the admin and continue adding pieces. $ ceph-deploy mgr create ip-10-0-0-124 For luminous+ builds a manager daemon is required. It’s responsible for monitoring the state of the Cluster and also manages modules/plugins. Okay, now we have all the management in place, let’s add some storage to the cluster to make it actually useful, shall we? First, we have to find out (on each target machine) the label of the drive we want to use. To fetch the list of available disks on a specific node, run $ ceph-deploy disk list ip-10-0-0-104 Here’s a sample output: $ ceph-deploy osd create --data /dev/nvme1n1 ip-10-0-0-124 $ ceph-deploy osd create --data /dev/nvme1n1 ip-10-0-0-216 $ ceph-deploy osd create --data /dev/nvme1n1 ip-10-0-0-104 In my case the label was nvme1n1 on all 3 machines (courtesy of AWS), so to add OSDs to the cluster I just ran these 3 commands. At this point, our cluster is basically ready. We can run ceph status to see that our monitors, managers and OSDs are up and running. But nobody wants to SSH into a machine every time to check the status of the cluster. Luckily there’s a pretty neat dashboard that comes with Ceph, we just have to enable it. …Or at least that’s what I thought. The dashboard was introduced in luminous release and was further improved in mimic. However, currently we’re deploying nautilus, the latest version of Ceph. After trying the usual way of enabling the dashboard via a manager $ sudo ceph mgr module enable dashboard we get an error message saying Error ENOENT: all mgr daemons do not support module 'dashboard', pass --force to force enablement. Turns out, in nautilus the dashboard package is no longer installed by default. We can check the available modules by running $ sudo ceph mgr module ls and as expected, dashboard is not there, it comes in a form a separate package. So we have to install it first, luckily it’s pretty easy. $ sudo apt install -y ceph-mgr-dashboard Now we can enable it, right? Not so fast. There’s a dependency that has to be installed on all manager hosts, otherwise we get a slightly cryptic error message saying Error EIO: Module 'dashboard' has experienced an error and cannot handle commands: No module named routes. $ sudo apt install -y python-routes We’re all set to enable the dashboard module now. As it’s a public-facing page that requires login, we should set up a cert for SSL. For the sake of simplicity, I’ve just disabled the SSL feature. You should never do this in production, check out the official docs to see how to set up a cert properly. Also, we’ll need to create an admin user so we can log in to our dashboard. $ sudo ceph mgr module enable dashboard $ sudo ceph config set mgr mgr/dashboard/ssl false $ sudo ceph dashboard ac-user-create admin secret administrator By default, the dashboard is available on the host running the manager on port 8080. After logging in, we get an overview of the cluster status, and under the cluster menu, we get really detailed overviews of each running daemon. If we try to navigate to the Filesystems or Object Gateway tabs, we get a notification that we haven’t configured the required resources to access these features. Our cluster can only be used as a block storage right now. We have to deploy a couple of extra things to extend its usability. Quick detour: In case you’re looking for a company that can help you with Ceph, or DevOps in general, feel free to reach out to us at RisingStack! Using the Ceph filesystem Going back to our admin node, running $ ceph-deploy mds create ip-10-0-0-124 ip-10-0-0-216 ip-10-0-0-104 will create metadata servers, that will be inactive for now, as we haven’t enabled the feature yet. First, we need to create two RADOS pools, one for the actual data and one for the metadata. $ sudo ceph osd pool create cephfs_data 8 $ sudo ceph osd pool create cephfs_metadata 8 There are a couple of things to consider when creating pools that we won’t cover here. Please consult the documentation for further details. After creating the required pools, we’re ready to enable the filesystem feature $ sudo ceph fs new cephfs cephfs_metadata cephfs_data The MDS daemons will now be able to enter an active state, and we are ready to mount the filesystem. We have two options to do that, via the kernel driver or as FUSE with ceph-fuse. Before we continue with the mounting, let’s create a user keyring that we can use in both solutions for authorization and authentication as we have cephx enabled. There are multiple restrictions that can be set up when creating a new key specified in the docs. For example: $ sudo ceph auth get-or-create client.user mon 'allow r' mds 'allow r, allow rw path=/home/cephfs' osd 'allow rw pool=cephfs_data' -o /etc/ceph/ceph.client.user.keyring will create a new client key with the name user and output it into ceph.client.user.keyring. It will provide write access for the MDS only to the /home/cephfs directory, and the client will only have write access within the cephfs_data pool. Mounting with the kernel Now let’s create a dedicated directory and then use the key from the previously generated keyring to mount the filesystem with the kernel. $ sudo mkdir /mnt/mycephfs $ sudo mount -t ceph 13.53.114.94:6789:/ /mnt/mycephfs -o name=user,secret=AQBxnDFdS5atIxAAV0rL9klnSxwy6EFpR/EFbg== Attaching with FUSE Mounting the filesystem with FUSE is not much different either. It requires installing the ceph-fuse package. $ sudo apt install -y ceph-fuse Before we run the command we have to retrieve the ceph.conf and ceph.client.user.keyring files from the Ceph host and put the in /etc/ceph. The easiest solution is to use scp. $ sudo scp ubuntu@13.53.114.94:/etc/ceph/ceph.conf /etc/ceph/ceph.conf $ sudo scp ubuntu@13.53.114.94:/etc/ceph/ceph.client.user.keyring /etc/ceph/ceph.keyring Now we are ready to mount the filesystem. $ sudo mkdir cephfs $ sudo ceph-fuse -m 13.53.114.94:6789 cephfs Using the RADOS gateway To enable the S3 management feature of the cluster, we have to add one final piece, the rados gateway. $ ceph-deploy rgw create ip-10-0-0-124 For the dashboard, it’s required to create a radosgw-admin user with the system flag to enable the Object Storage management interface. We also have to provide the user’s access_key and secret_key to the dashboard before we can start using it. $ sudo radosgw-admin user create --uid=rg_wadmin --display-name=rgw_admin --system $ sudo ceph dashboard set-rgw-api-access-key <access_key> $ sudo ceph dashboard set-rgw-api-secret-key <secret_key> Using the Ceph Object Storage is really easy as RGW provides an interface identical to S3. You can use your existing S3 requests and code without any modifications, just have to change the connection string, access, and secret keys. Ceph Storage Monitoring The dashboard we’ve deployed shows a lot of useful information about our cluster, but monitoring is not its strongest suit. Luckily Ceph comes with a Prometheus module. After enabling it by running: $ sudo ceph mgr module enable prometheus A wide variety of metrics will be available on the given host on port 9283 by default. To make use of these exposed data, we’ll have to set up a prometheus instance. I strongly suggest running the following containers on a separate machine from your Ceph cluster. In case you are just experimenting (like me) and don’t want to use a lot of VMs, make sure you have enough memory and CPU left on your virtual machine before firing up docker, as it can lead to strange behaviour and crashes if it runs out of resources. There are multiple ways of firing up Prometheus, probably the most convenient is with docker. After installing docker on your machine, create a prometheus.yml file to provide the endpoint where it can access our Ceph metrics. # /etc/prometheus.yml scrape_configs: - job_name: 'ceph' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['13.53.114.94:9283] Then launch the container itself by running: $ sudo docker run -p 9090:9090 -v /etc/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus Prometheus will start scraping our data, and it will show up on its dashboard. We can access it on port 9090 on its host machine. Prometheus dashboard is great but does not provide a very eye-pleasing dashboard. That’s the main reason why it’s usually used in pair with Graphana, which provides awesome visualizations for the data provided by Prometheus. It can be launched with docker as well. $ sudo docker run -d -p 3000:3000 grafana/grafana Grafana is fantastic when it comes to visualizations, but setting up dashboards can be a daunting task. To make our lives easier, we can load one of the pre-prepared dashboards, for example this one. Ceph Deployment: Lessons Learned & Next Up CEPH can be a great alternative to AWS S3 or other object storages when running in the public operating your service in the private cloud is simply not an option. The fact that it provides an S3 compatible interface makes it a lot easier to port other tools that were written with a “cloud first” mentality. It also plays nicely with Prometheus, thus you don’t need to worry about setting up proper monitoring for it, or you can swap it a more simple, more battle-hardened solution such as Nagios. In this article, we deployed CEPH to bare virtual machines, but you might need to integrate it into your KubernetesKubernetes (often abbreviated as K8s) offers a framework to run distributed systems efficiently. It's a platform that helps managing containerized workloads and services, and even takes care of scaling. Google open-sourced it in 2014. or Docker Swarm cluster. While it is perfectly fine to install it on VMs next to your container orchestration tool, you might want to leverage the services they provide when you deploy your CEPH cluster. If that is your use case, stay tuned for our next post covering CEPH where we’ll take a look at the black magic required to use CEPH on Docker Swarm and Kubernetes. In the next CEPH tutorial which we’ll release next week, we’re going to take a look at valid ceph storage alternatives with Docker or with Kubernetes. PS: Feel free to reach out to us at RisingStack in case you need help with Ceph or Ops in general! * Do your engineers do what you think they do? Tamas Kadlecsik This case study shows how we reformed a scale-up’s dev processes after uncovering severe discrepancies between the official and real way of getting things done. Read More » Getting Started with Ansible Tutorial – Automate your Infrastructure RisingStack Engineering This Ansible tutorial teaches the basics of this open-source software provisioning, configuration management, and application-deployment tool. Read More » Handling runtime environment variables in create-react-apps RisingStack Engineering A new package called runtime-env-cra allows you to handle environment variables in quick and easy way with create-react-apps. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/ceph-storage-deployment-vm/"
  },
  {
    "body": "* Menu * Contact us ChatGPT use case examples for programming * *ngstack.com In this article: Ferenc Hámori AI If you’re reading this post, you probably already know enough about large language models and other “AI” tools, so we can skip the intro. Despite the fact that the “AI is going to take our jobs” discourse proved to be an effective tool in the clickbait content creators toolbelt, I will not take this road. Instead of contributing to the moral panic about the supposedly inevitable replacement of white collar jobs, or pretending to be offended by a chatbot, I’ll help our readers to consider GPT-based products as tools that could be useful in a professional webdev setting. To do so, I asked some of my colleagues about their experiences of using GPT and various mutations of it – to help you get a more grounded understanding of their utility. In case you have an experience that you consider useful sharing with the RisingStack community, please share it though this form. I’ll drop the results / best ones in the article later on! Daniel’s ‘Code GPT’ vscode plugin review I’ve been pretty satisfied with GitHub Copilot. It does the job well, and it is priced reasonably. Still, after depleting the free tier, I decided to look for an open source alternative. TabNine is an honorable mention here, and a well established player, but based on my previous experience (about two years ago, mind you), it is clunky. Nowhere near the breeze of a dev experience you get from Copilot. But take heart, there is a staggering amount of plugins out there for VS Code, if you look for AI-based coding assistants. At the time of writing this, Code GPT is the winner by number of downloads, and number of (positive) votes, so I decided to give it a go. You can choose from a range of OpenAPI and Cohere models, with GPT-3 being the default. Features: 1, Code Generation from comment prompts The suggestions are relevant, and of quality. The plugin doesn’t offer code completion on the fly, unlike Copilot, but communicates with you in a new IDE pane it opens automatically instead. I like this feature, since I can pick the parts from the suggestion I liked, without bloating the code I’m working on, and having to delete the irrelevant lines. This behavior comes in handy with the other features as well. Let’s see those. 2, Unit Test generation While the results are often far from being complete, it saves me a lot of boilerplate code. It is also handy in reminding me of cases that I otherwise might have forgotten. For this feature to work well, adjust your max token length to a 1000 at least in the Settings, since a comprehensive test suite usually ends up quite verbose, and you’ll only get part of it with a tight quota. 3, Find Problems Your code review buddy. Once I feel I’m done with my work, a quick scan doesn’t take long before committing. While it often is straight out wrong about the ‘issues’ it points out, it doesn’t take long to scan through the suggestions, and catch mistakes before your real life reviewer does. 4, Refactor Save some time for your team lead for extra credits, and run Refactor against your code. Don’t expect miracles to happen, but often times it catches stuff that managed to sneak under your radar. Note: the default max token length won’t cut it here either. 5, Document and Explain Listed as two separate functionality in the documentation, it achieves essentially the same thing; provides a high level natural language description on what the highlighted peace of code does. I tend to use it less often, but it is a nice to have. 6, Ask CodeGPT I left it the last, but this is the most flexible feature of this plugin. It can achieve all previously mentioned functionalities with the right prompt, and more. Convert your .js to .ts, generate a README.md file from code, as suggested in the documentation, or just go ahead and ask for a recipe for a delicious apple pie, like you would from ChatGPT 🥧 My Conclusion: Code GPT offers many functionality that Copilot doesn’t, but lacks the thing Copilot is best at: inline code completion. So if you want to take the most out of AI, just use both, as these two tools complement each other really nice. Code GPT Might come handy if you’re just getting started with a new language or framework. The Explain feature helps double-check your gut feeling, or gives you the missing hint in the right direction. Bump up your max token length to at least a 1000, c’mon, it’s only ¢2 😉 An interesting alternative I might be trying in the future is ‘ChatGPT’ plugin (from either Tim Kmecl or Ali Gencay) that claims to be using the unofficial Chat GPT API, with all its superpowers. Further reading: – official site: https://www.codegpt.co/ – GitHub CoPilot vs ChatGPT: https://dev.to/ruppysuppy/battle-of-the-giants-github-copilot-vs-chatgpt-4oac – List of GitHub CoPilot alternatives: https://www.tabnine.com/blog/github-copilot-alternatives/ Olga on writing Mongo queries with ChatGPT I have used ChatGPT for more effective coding. It was really helpful for example with enhancing Mongo queries for more complex use cases as it suggested specific stages that worked for a use case, which would have definitely taken me more time to research and realize which stage and/or operator is ideal for this query. However all the answers it produces should be checked and not used blindly. I have not yet come across a case when the answer it provided didn’t need modification (though maybe it is due to the fact that I didn’t use it for easy things). I have also noticed that, if a question posted to ChatGPT includes many different parameters, in a lot of cases it will not take them all to consideration so one has to continue conversation and ensure all parameters are considered in the solution. Akos on using ChatGPT instead of StackOverflow I have been using ChatGPT since its inception and have found it to be a valuable tool in my daily work. With ChatGPT, I no longer have to spend hours searching and Googling for regex patterns on Stack Overflow. Instead, I simply write down what I want with the regex, and the tool returns the result, saving me a significant amount of time and effort. In addition to regex, I have also found ChatGPT to be a valuable tool when working on scrapers. Dealing with deeply nested selectors can be a challenge, and understanding how they work with scraping tools can take hours of research. But with ChatGPT, I can simply paste an example HTML and ask the tool to select what I want, saving me even more time and effort. However, it is important to use ChatGPT in moderation. Overusing the tool could lead to a decline in my problem-solving skills and make me too dependent on it. By setting limits, I can still benefit from ChatGPT’s time-saving features while maintaining my critical thinking skills. In conclusion, ChatGPT has been a powerful tool in my work, saving me time and effort in regex and scraping tasks. However, it is important to use it in moderation and not let it compromise my problem-solving skills. Me, Navigating the hallucinations of chatGPT I work with a lot of text: business documents, project proposals, contracts, articles, marketing materials, you name it. I’ve been fascinated by the emergence of “AI” tools in 2022 and both the entertainment factor and the usefulness they can provide. All big areas – text, voice, image – had huge releases that made the internet a very interesting place again after the boring years of the web3 / crypto / nft / metaverse nonsense. Suddenly I felt the rush of discovering the internet in the early 2000’s. “Wow, I can do that?!” was a sentence that got repeated a lot this year. The Dall-E2 / Stable Diffusion / Whisper releases were more than enough to shake up the web, but ChatGPT was the one that really disrupted the web. The first good conversational “AI” that everyone could use, and for free (for now). At times it can be so convincing that people forget that it is just a very good bullshitter. For example when I ask it about RisingStack, I get the following answer: “RisingStack is a software development and consulting company that specializes in building scalable, high-performance systems using Node.js, Kubernetes, and other modern web technologies. The company was founded in 2013 and is headquartered in Budapest, Hungary, with additional offices in London, United Kingdom, and New York, United States. RisingStack offers a range of services, including software development, architecture design, cloud infrastructure management, performance optimization, and training. They also develop open-source tools such as Trace, a Node.js performance monitoring and debugging tool, and Pino, a Node.js logging library. RisingStack has worked with a variety of clients, ranging from small startups to large enterprises, across a range of industries, including fintech, healthcare, e-commerce, and media. They are known for their expertise in Node.js and their commitment to delivering high-quality software solutions.” Most of this text is usable, but it contains a lot of outright lies. It is important to keep in mind that GPT hallucinates. It has no idea about what is true and what is not. It pretends to know things, but it’s just making things up word by word. In this case: RisingStack was founded in 2014, and we never had a London office. Trace was sunset like 6 years ago, and Pino has nothing to do with us. Anyways, I find it really useful when I need to generate / rephrase / improve text. It is only valid as a Google replacement if you can confidently tell if it’s right or wrong, so “geepeetee-ing” something is not really that helpful right now. I already used it to write contracts, blog posts (not this one though), business proposals. It also brought in new clients, as just in the past couple of weeks we used it to.. Automatically generate product names and descriptions for webshops Create easy-read text for children with disabilities Perform sentiment analysis and write answers automatically to customer reviews Currently chatGPT has a lame writing style by default. It’s very formulaic. I’ve seen so much of it that I believe I can spot it 8 out of 10 times right away. It lies a lot, and I wasn’t able to get anything guitar-related useful out of it, despite the fact that the training material probably has a couple million tabs in it. Anyways, here are my not-so-hot takes to about it: You really need to carefully double check everything you generate. On the surface most of it might look good enough, but that’s just making it easier for everyone to get lazy with it. “AI” won’t replace jobs, instead, it will just improve productivity. As Photoshop is a better brush, GPT should be thought of as a better text/code editor. Most of the office jobs are about collaboration anyways, not typing on a keyboard. Artists won’t get replaced en masse. You won’t be able to prompt an engine to generate artwork in de Goya’s style, if cave paintings are the apex of your visual art knowledge. Taste will be very important to stand out when the web gets flooded with endless mediocre “art”. Also.. It will be interesting to see how the “poisoning the well” problem will affect these models. The continuous retraining of the “AI” on already “AI generated” content will cause a big decline in the quality of these services, in case they won’t be able to filter them out… While they are working on making the generated content so good that it gets mistaken for genuine human creation. It’s a bit scary to think about how Microsoft will dominate this space through its OpenAI investment. Despite the genius branding, it is not open at all, and will cost a lot of money without serious competitors or general access to free-to-use alternatives (like Stable Diffusion for images). Most of the coverage GPT gets nowadays is about people gaming the engine to finally say something “bad”, then pretending to be offended, even more so, scared of it! This kind of AI ethics/alignment discourse is incredibly dull and boring, imho.. Although the adversarial aspect is very interesting. Poisoning generally available chatbots training data will be a prime trolling activity, while convincing chatbots to spill their carefully crafted secret sauce prompts is something that needs to be continuously prevented. I was first skeptical about prompt engineering as an emerging “profession”, but seeing how building products on top of GPT3 requires proper prompting and safeguards to make the end result consistently useful for end users, I can see it happening. Also, when you build something LLM driven, you need to be aware that hostile users, trolls, competitors, etc.. will try to game your product to ramp up your cloud costs or cause reputational harm. This tweet really gets it. This is already happening. Most of the “AI-driven” products are just purpose-repacked custom prompters calling GPT3 through an API, with a fancy UI. Anyways, I’m looking forward to seeing what kind of GPT driven products we’ll make for our clients, and how the internet will change in general. I’m curious about your experience with chatGPT, so please share it with me through this short form! Cheers, Ferenc * Practical Tutorial to * on Google Colab Janos Kubisch We will take a look at how to set up a RAG – * – demo with the Anthropic Claude 3 Sonet model, using google’s CoLab platform. CoLab offers free instances with T4 GPUs sometimes, but we’ll only Read More » Where to Host Your AI: Comparing ML Model Deployment Services Janos Kubisch When it comes to hosting machine learning models, whether it is for private or public use, it’s not a simple task to find the right services for the job. Many articles online and responses from AI tools tend to include Read More » Mammogram Analysis with AI and User-Friendly Interfaces Janos Kubisch See how RisingStack and Semmelweis University created an image recognition system using deep convolutional neural networks and a user-friendly interface for healthcare workers fighting against breast cancer. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/chatgpt-use-case-examples-for-programming/"
  },
  {
    "body": "* Menu * Contact us Distributed Load Testing with Jmeter Last updated: July 4, 2024 Search Search Popular *ngstack.com In this article: Janos Kubisch DevOps Many of you have probably used apache Jmeter for load testing before. Still, it is easy to run into the limits imposed by running it on just one machine when trying to make sure that our API will be able to serve hundreds of thousands or even millions of users. We can get around this issue by deploying and running our tests to multiple machines in the cloud. In this article, we will take a look at one way to distribute and run Jmeter tests along multiple droplets on DigitalOcean using Terraform, AnsibleAnsible is an open-source software provisioning, configuration management, and application-deployment tool. It enables Infrastructure-as-Code (IaC), meaning that it can handle the state of infrastructure through idempotent changes, defined with an easily readable, domain-specific language instead of relying on Bash scripts., and a little bit of bash scripting to automate the process as much as possible. Background: During the COVID19 outbreak induced lockdowns, we’ve been tasked by a company (who builds an e-learning platform primarily for schools) to build out an infrastructure that is: geo redundant, supports both single and multi tenant deployments , can be easily scaled to serve at least 1.5 million users in huge bursts, and runs on-premises. To make sure the application is able to handle these requirements, we needed to set up the infrastructure, and model a reasonably high burst in requests to get an idea about the load the application and its underlying infrastructure is able to serve. In this article, we’ll share practical advice and some of the scripts we used to automate the load-testing process using Jmeter, Terraform and Ansible. Let’s Start! Have these tools installed before you begin! brew install ansible brew install terraform brew install jmeter You can just run them from your own machine. The full codebase is available on Github at RisingStack/distributed-loadtests-jmeter for your convenience. Why do we use Jmeter for distributed load testing? Jmeter is not my favorite tool for load testing owing mostly to the fact that scripting it is just awkward. But looking at the other tools that support distribution, it seems to be the best free one for now. K6 looks good, but right now it does not support distribution outside the paid, hosted version. Locust is another interesting one, but it’s focusing too much on random test picking, and if that’s not what I’m looking for, it is quite awkward to use as well – just not flexible enough right now. So, back to Jmeter! Terraform is infrastructure as code, which allows us to describe the resources we want to use in our deployment and configure the droplets so we have them ready for running some tests. This will, in turn, be deployed by Ansible to our cloud service provider of choice, DigitalOcean – though with some changes, you can make this work with any other provider, as well as your on-premise machines if you wish so. Deploying the infrastructure There will be two kinds of instances we’ll use: primary, of which we’ll have one coordinating the testing, and runners, that we can have any number of. In the example, we’re going to go with two, but we’ll see that it is easy to change this when needed. You can check the variables.tf file to see what we’ll use. You can use these to customise most aspects of the deployment to fit your needs. This file holds the vars that will be plugged into the other template files – main.tf and provider.tf. The one variable you’ll need to provide to Terraform for the example setup to work is your DigitalOcean api token, that you can export like this from the terminal: export TF_VAR_do_token=DO_TOKEN Should you wish to change the number of test runner instances, you can do so by exporting this other environment variable: export TF_VAR_instance_count=2 You will need to generate two ssh key pairs, one for the root user, and one for a non-privileged user. These will be used by Ansible, which uses ssh to deploy the testing infrastructure as it is agent-less. We will also use the non-privileged user when starting the tests for copying over files and executing commands on the primary node. The keys should be set up with correct permissions, otherwise, you’ll just get an error. Set the permissions to 600 or 700 like this: chmod 600 /path/to/folder/with/keys/* To begin, we should open a terminal in the terraform folder, and call terraform init which will prepare the working directory. Thisl needs to be called again if the configuration changes. You can use terraform plan that will output a summary of what the current changes will look like to the console to double-check if everything is right. At the first run, it will be what the deployment will look like. Next, we call terraform apply which will actually apply the changes according to our configuration, meaning we’ll have our deployment ready when it finishes! It also generates a .tfstate file with all the information about said deployment. If you wish to dismantle the deployment after the tests are done, you can use terraform destroy. You’ll need the .tfstate file for this to work though! Without the state file, you need to delete the created droplets by hand, and also remove the ssh key that has been added to DigitalOcean. Running the Jmeter tests The shell script we are going to use for running the tests is for convenience – it consists of copying the test file to our primary node, cleaning up files from previous runs, running the tests, and then fetching the results. #!/bin/bash set -e # Argument parsing, with options for long and short names for i in \"$@\" do case $i in -o=*|--out-file=*) # i#*= This removes the shortest substring ending with # '=' from the value of variable i - leaving us with just the # value of the argument (i is argument=value) OUTDIR=\"${i#*=}\" shift ;; -f=*|--test-file=*) TESTFILE=\"${i#*=}\" shift ;; -i=*|--identity-file=*) IDENTITYFILE=\"${i#*=}\" shift ;; -p=*|--primary-ip=*) PRIMARY=\"${i#*=}\" shift ;; esac done # Check if we got all the arguments we'll need if [ -z \"$TESTFILE\" ] || [ ! -f \"$TESTFILE\" ]; then echo \"Please provide a test file\" exit 1 fi if [ -z \"$OUTDIR\" ]; then echo \"Please provide a result destination directory\" exit 1 fi if [ -z \"$IDENTITYFILE\" ]; then echo \"Please provide an identity file for ssh access\" exit 1 fi if [ -z \"$PRIMARY\" ]; then PRIMARY=$(terraform output primary_address) fi # Copy the test file to the primary node scp -i \"$IDENTITYFILE\" -o IdentitiesOnly=yes -oStrictHostKeyChecking=no \"$TESTFILE\" \"runner@$PRIMARY:/home/runner/jmeter/test.jmx\" # Remove files from previous runs if any, then run the current test ssh -i \"$IDENTITYFILE\" -o IdentitiesOnly=yes -oStrictHostKeyChecking=no \"runner@$PRIMARY\" << \"EOF\" rm -rf /home/runner/jmeter/result rm -f /home/runner/jmeter/result.log cd jmeter/bin ; ./jmeter -n -r -t ../test.jmx -l ../result.log -e -o ../result -Djava.rmi.server.hostname=$(hostname -I | awk ' {print $1}') EOF # Get the results scp -r -i \"$IDENTITYFILE\" -o IdentitiesOnly=yes -oStrictHostKeyChecking=no \"runner@$PRIMARY\":/home/runner/jmeter/result \"$OUTDIR\" Running the script will require the path to the non-root ssh key. The call will look something like this: bash run.sh -i=/path/to/non-root/ssh/key -f=/path/to/test/file -o=/path/to/results/dir You can also supply the IP of the primary node using -p= or --primary-ip= in case you don’t have access to the .tfstate file. Otherwise, the script will ask terraform for the IP. Jmeter will then take care of distributing the tests across the runner nodes, and it will aggregate the data when they finish. The only thing we need to keep in mind is that the number of users we set for our test to use will not be split but will be multiplied. As an example, if you set the user count to 100, each runner node will then run the tests with 100 users. And that’s how you can use Terraform and Ansible to run your distributed Jmeter tests on DigitalOcean! Check this page for more on string manipulation in bash. Looking for DevOps & Infra Experts? In case you’re looking for expertise in infrastructure related matters, I’d recommend to read our articles and ebooks on the topic, and to check out our various service pages: * Services Infrastructure Assessment and Code Review Services Kubernetes Consulting & Training Services An early draft of this article was written by Mate Boer, and then subsequently rewritten by Janos Kubisch – both engineers at RisingStack. * Do your engineers do what you think they do? Tamas Kadlecsik This case study shows how we reformed a scale-up’s dev processes after uncovering severe discrepancies between the official and real way of getting things done. Read More » How to Deploy a Ceph Storage to Bare Virtual Machines RisingStack Engineering The main drawback of a Ceph storage is that you have to host and manage it yourself. In this post, we’ll check two different approaches of deploying Ceph. Read More » Getting Started with Ansible Tutorial – Automate your Infrastructure RisingStack Engineering This Ansible tutorial teaches the basics of this open-source software provisioning, configuration management, and application-deployment tool. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/distributed-load-testing-with-jmeter/"
  },
  {
    "body": "* Menu * Contact us Ecto for Beginners Last updated: July 10, 2024 Search Search Popular ** Elixir Ecto is a database wrapper and query generator for Elixir, so you can interact with databases in a functional and efficient way. In this guide we’ll cover the basics of Ecto, including setting up a project, defining schemas, running migrations and basic queries. What is Ecto Ecto is designed to work with Elixir, so it’s a flexible and robust toolset to work with databases. It supports PostgreSQL, MySQL and SQLite so it’s a good choice for any project. Setting Up Your Ecto Project To use Ecto you need to set up a new Elixir project and add the necessary dependencies. Here’s how: Create a New Elixir Project: mix new my_app --module MyApp cd my_app Add Ecto and PostgreSQL Dependencies: In your mix.exs file add the following dependencies: defp deps do [ {:ecto_sql, \"~> 3.6\"}, {:postgrex, \">= 0.0.0\"} ] end Get the Dependencies: mix deps.get Generate the Repo: mix ecto.gen.repo -r MyApp.Repo 5. Configure the Repo: Update your config/config.exs with the database configuration: ```elixir config :my_app, MyApp.Repo, username: \"postgres\", password: \"postgres\", database: \"my_app_dev\", hostname: \"localhost\", show_sensitive_data_on_connection_error: true, pool_size: 10 config :my_app, ecto_repos: [MyApp.Repo] Create the Database: mix ecto.create Schemas Schemas in Ecto are used to map database tables to Elixir structs. Here’s how you define a simple schema: Generate a Schema: mix ecto.gen.schema User users name:string email:string Modify the Generated Schema: The generated schema file will be located in lib/my_app/user.ex. It should look like this: defmodule MyApp.User do use Ecto.Schema import Ecto.Changeset schema \"users\" do field :name, :string field :email, :string timestamps() end @doc false def changeset(user, attrs) do user |> cast(attrs, [:name, :email]) |> validate_required([:name, :email]) end end Migrations Migrations are used to create and modify database tables. Here’s how to create and run migrations: Generate a Migration: mix ecto.gen.migration create_users Edit the Migration File: The generated migration file will be located in priv/repo/migrations/. Open it and define the changes: defmodule MyApp.Repo.Migrations.CreateUsers do use Ecto.Migration def change do create table(:users) do add :name, :string add :email, :string timestamps() end end end Run the Migration: mix ecto.migrate Ecto Queries Ecto provides a powerful and flexible querying syntax. Here’s how to do basic queries: Inserting Records: alias MyApp.{Repo, User} user = %User{name: \"John Doe\", email: \"john@example.com\"} Repo.insert!(user) Fetching Records: users = Repo.all(User) Updating Records: user = Repo.get!(User, 1) changeset = User.changeset(user, %{name: \"Jane Doe\"}) Repo.update!(changeset) Deleting Records: user = Repo.get!(User, 1) Repo.delete!(user) Querying with Filters: users = Repo.all(from u in User, where: u.email == \"john@example.com\") Done Ecto is a must have tool for any Elixir developer working with databases. Its powerful querying capabilities, combined with Elixir’s functional nature, makes it a lot of fun to use. Now you should have a good starting point to build applications with Ecto. For more advanced features and usage, check the official Ecto documentation. * Elixir Protocols & Behaviours for JavaScript/TypeScript Developers RisingStack Engineering Coming from TypeScript, the difference between behaviours and protocols in elixir might not be immediately obvious. Both of them look pretty much like an interface from two different angles. We’ll go into detail to try and clear up how they Read More » Elixir in Production: What Is It Used For? RisingStack Engineering We’ve already written a series of articles about why we think Elixir is a great choice, but don’t take our word for it – there are many success stories out there about using Elixir in production that not only prove Read More » Elixir Cheatsheet: A Node.js Developer’s Transition Guide RisingStack Engineering We’ve previously written about the reasons for trying Elixir out, as well as a how-to-get-started guide. However, there is still a long way ahead of you after firing up your thrusters. While the tutorial and documentation of both Elixir and *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/ecto-for-beginners/"
  },
  {
    "body": "* Menu * Contact us Elixir Cheatsheet: A Node.js Developer’s Transition Guide * ** Elixir We’ve previously written about the reasons for trying Elixir out, as well as a how-to-get-started guide. However, there is still a long way ahead of you after firing up your thrusters. While the tutorial and documentation of both Elixir and Phoenix are the best I’ve ever seen by a great margin, the world of BEAM and OTP will be quite alien to what you are used to as a JS/TS developer. To make the embracing of unfamiliar concepts easier, we’ve created a cheatsheet to serve as an anchor during your journey. Check out the cheatsheet The basics: Variables, Data Types, and Immutability and More We start with the basics: primitive types, lists, and maps. The basic building blocks of applications in any language. This section acts as a quick reference for those familiar with JavaScript but new to Elixir’s strange and exciting ways. One of the first things you’ll notice is the difference in variable handling. Unlike JavaScript, variables in Elixir are immutable, meaning their values cannot be changed after assignment. This enforces a safer programming style and eliminates the risk of unintended side effects. Elixir also uses atoms instead of symbols, and thanks to pattern matching, they often also replace booleans. These atoms are lightweight, immutable entities that are perfect for representing simple data like true/false or unique identifiers. String manipulation should feel familiar, with interpolation supported using double quotes and character escapes similar to JavaScript. However, Elixir offers sigils for string creation, providing flexibility depending on your needs. For data structures, Elixir provides lists and tuples, similar to arrays in JavaScript. Lists are implemented as linked lists, so they are great for storing variable length data when you might need to append (and not push!) new elements to the collection, while tuples have defined size and thus are used for fixed data. Maps, on the other hand, resemble JavaScript objects but allow any data type, not just strings, as keys. This flexibility makes them powerful tools for storing and organizing diverse data. Beyond these fundamentals, Elixir offers keyword lists and the enumerable protocol. Keyword lists provide a concise way to associate data with keywords, while the Enum module offers powerful functions for common operations on enumerable data structures. Control Flow Elixir offers a familiar-looking if-else and case and with blocks for controlling the flow of your app. But following in the footsteps of Ruby, we also have, unless, if we’d prefer not writing not or !. We also have an old friend you might recognize. Don’t be fooled though, as they are not what they seem! When comparing these keywords with JavaScript, mostly everything is a false friend due to Elixir’s expression-oriented nature, so you’ll need to come back to this section often in your first weeks. Functions Elixir’s functions come in various flavors and attached goodies, offering flexibility and expressiveness in your code. In the cheatsheet, you can find examples for: Anonymous Functions: Defined with fn and end keywords. Used for short, one-time operations. Can be assigned to variables for later use. Module Functions: Defined within modules using def or defp (private) keyword. Public by default, requiring explicit marking as private if needed. Offer clear organization and separation of concerns. Function Signatures: Described using Module.function_name/arity, where arity is the number of arguments. Can be overloaded based on argument number or type using pattern matching. Overloading Functions: Achieved through pattern matching, guards, or default arguments. Allows defining multiple functions with the same name but different argument combinations. Pipe Operator (|>) Chains function calls together, automatically passing the previous output as the first argument to the next function. Offers concise and readable function chaining. Capture Operator (&) Captures functions into anonymous functions. Useful for creating anonymous functions from existing named functions or passing functions as arguments. Remember, these are just some of the fundamentals of functions in Elixir. The language offers further features like recursion and higher-order functions for building complex and elegant solutions, which would be too much to capture in a cheatsheet. Pattern matching Pattern matching is probably the most powerful and convenient property of functional languages. A cheatsheet cannot do justice to it, but at least you can come back and see the related language constructs: Match operator (=): Its usage for variable assignment, value comparison, and data deconstruction (maps, lists, structs, etc.). Function invocation: How pattern matching is used to identify the correct function based on factors like module name, function name, arity, argument types, default arguments, and function guards. case expressions: Utilizing pattern matching for conditional branching. Pin operator (^): Preventing variable reassignment during pattern matching within functions. Modules and Structs ES Modules and Elixir modules are similar only in name, so we included a lengthy explanation of them in the cheatsheet. We tried to make order regarding alias, require, import and use, because those can be confusing at first. Hint: require has nothing to do with it’s JS counterpart. But you probably guessed it by now. You can also find examples for Structs. While Elixir is not a statically typed language like TypeScript, Structs can provide the necessary type definitions when needed. Used in tandem with pattern matching, you’ll soon realize that type safety is overrated, especially when you feel how efficient you can be when you can forgo type wrangling and gymnastics, that is so common when writing TS. Ready to Dive In? We stand by what we said earlier: learning Elixir start paying dividends quickly. However, the first steps can be daunting, as there are new concepts you need to get familar with, and the syntax can feel alien at first. But whether you’re exploring Elixir for a specific project or keen on expanding your programming repertoire, we hope this cheatsheet will prove useful when you make the leap from Node.js to Elixir. * Ecto for Beginners RisingStack Engineering Ecto is a database wrapper and query generator for Elixir, so you can interact with databases in a functional and efficient way. In this guide we’ll cover the basics of Ecto, including setting up a project, defining schemas, running migrations Read More » Elixir Protocols & Behaviours for JavaScript/TypeScript Developers RisingStack Engineering Coming from TypeScript, the difference between behaviours and protocols in elixir might not be immediately obvious. Both of them look pretty much like an interface from two different angles. We’ll go into detail to try and clear up how they Read More » Elixir in Production: What Is It Used For? RisingStack Engineering We’ve already written a series of articles about why we think Elixir is a great choice, but don’t take our word for it – there are many success stories out there about using Elixir in production that not only prove *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/elixir-cheatsheet-transition-guide/"
  },
  {
    "body": "* Menu * Contact us Getting Started With Elixir in 2024 * *ngstack.com In this article: Arpad Tarics Elixir We’ve already covered why Elixir and Phoenix are worth a try, but making the switch can be tricky. Elixir is a world apart from the JavaScript ecosystem, but we’re here to offer you a familiar reference point as you dive in. To do this, we’re crafting a series of articles that explain Elixir using JavaScript lingo. So, without further ado, let’s kick things off by diving into what Elixir is, how to get it up and running, and to wrap things up, we’ll show you how to create a “Hello, world!” application in a few different ways. What is Elixir? Elixir is a dynamic, functional programming language. This should not be so strange, as JavaScript is also dynamic and provides some functional aspects, like Array.prototype.map / filter / reduce and friends. In recent years, JavaScript has also moved away from APIs that mutate data and started to embrace a more immutable paradigm, where methods return new updated values, instead of overwriting the object they were called on. Elixir runs on the Erlang Virtual Machine (called BEAM), which is somewhat analogous to how V8 works for Node.js. You might know that Erlang is also a language in its own right, so what’s the deal? Just as with V8, which supports different languages like TypeScript, ClojureScript, Scala.js, and CoffeeScript (RIP), BEAM has its unique ecosystem. However, while TypeScript and others compile to JavaScript, both Elixir and Erlang compile into BEAM bytecode. This setup is more similar to JVM languages like Java, Scala, Clojure, and Kotlin. If you’re not familar with these, think of it as when JavaScript is parsed, it would be compiled into wasm instrucutions. In that case, JS would also be a wasm target like all other languages that have a wasm compiler: C++, Rust, Go etc. However, the BEAM is not like any other VM. It would be beyond the scope of this post to delve into the fault tolerance provided by this technology, but as you write your code in Elixir, you’ll notice that when something breaks, the effect is similar to that in JavaScript: only the part of the application where you had the error breaks, and the rest continues to function. But you’ll probably find it much more difficult to crash an entire Elixir application than a Node.js backend. The reason behind this is Elixir’s concurrency model, which is based on lightweight BEAM processes functioning as actors, in line with the actor model. This makes reasoning about your code in Elixir a lot easier than in Node.js. Most tasks run in separate processes, so many operations can be synchronous. It’s akin to using worker threads for every request your server handles, but much more lightweight and easier to manage. However, unlike worker threads, or threads in general, BEAM processes don’t share memory, making it very difficult – if not virtually impossible – to encounter race conditions. That’s one of the reasons why Elixir has gained popularity, particularly for developing robust and scalable web applications using the Phoenix framework. While we’re on the topic, let’s touch on OTP. When installing Elixir, you’ll also need to install Erlang, ensuring that their versions are compatible. Most of the time, however, the Erlang version will be referred to as the Erlang/OTP version or simply the OTP version. OTP comprises a set of libraries usable in both Erlang and Elixir. But it’s not your typical lodash or express. It includes abstractions over BEAM processes, an Application concept, a method for communication between BEAM nodes, a Redis-like distributed term storage called ETS, and Mnesia, which is AN ACTUAL BUILT-IN DATABASE similar to MongoDB. And let’s pause for a moment to talk about communicating between BEAM nodes. Essentially, you can start Elixir apps on different machines, link them together, and then call functions from one node on another. There’s no need for HTTP, messaging queues, or REST APIs. You simply call the function on one machine and receive the result from another. This is why it was so straightforward for Chris McCord to implement Fly.io’s FLAME serverless/lambda-like service for Elixir. FLAME’s spiritual predecessor, Modal was developed for machine learning in Python, but it took an entire company and years to complete. How to install Elixir? Just like with Node.js, you there are multiple ways to install Elixir. You can use your OS’s package manager, run it with Docker, or download prebuilt binaries. However, you’ll probably want to be able to control which version of Elixir you’re using, so the best is to use a version manager. In our experience, it’s also the easiest way. What’s up with Elixir and Erlang compatibility? When working with Elixir and Erlang, it’s generally recommended to use compatible versions of both to avoid potential issues. The compatibility between Elixir and Erlang versions is crucial, as certain features or enhancements in Elixir may rely on specific Erlang/OTP releases, given their shared execution environment on the BEAM virtual machine. If you install incompatible versions, you might encounter issues such as: Functionality Breakage: Certain Elixir features may depend on Erlang/OTP features introduced in specific versions. Performance Issues: Newer versions of Erlang/OTP often come with performance improvements and bug fixes. Potential Bugs: Running Elixir on an incompatible Erlang version may lead to unexpected behavior, errors, or even crashes due to mismatches in the underlying runtime. Checking the compatibility matrix in the Elixir documentation is a recommended approach. For optimal performance, use the Erlang version against which Elixir was compiled. Which version manager to use? You might be tempted to go the Node.js way and look for a language specific version manager. They exist, namely kiex for Elixir and kerl for Erlnag. However, we found the easiest is to use asdf instead, which is a multi-language version manager that supports multiple languages, including Elixir, Erlang, Node.js, Ruby, Python, and more. The added benefit of asdf comes out when you work on projects that involve multiple languages – in contrast, nvm, kiex, and kerl are specifically designed for their respective languages. To install asdf, follow the instructions here. Aftrer you install asdf, however, you’re not ready to start downloading runtimes yet. Actually, asdf is more like a backend for multiple version managers that are called plugins in asdf parlance. In the following, we’ll look at how to add language plugins, install Erlang and Elixir, then set the versions to be used. Install Erlang and Elixir with asdf Let’s add Erlang first: asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git Then Elixir: asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git Now we need to check the available Elixir versions first with asdf list-all elixir. Notice the otp-XX suffix at the end of version names. That’s how we know against which Erlang version was the specific runtime compiled. Pick one you like, in our case, let’s go with the current latest, OTP 26 in our case. Let’s take a look at the available Erlang versions too. At the time of writing, 26.2.1 is the latest, so we’re going to install that. asdf install erlang 26.2.1 And now, we’re ready to install the latest Elixir version. asdf install elixir 1.16.0-otp-26 To verify the install, we just need to start the Erlang REPL erl Let’s verify this install too. elixir -v Local and Global versions Unlike nvm, asdf makes it seamless to use project local versions. With nvm you create a .nvmrc file and whenever you enter the project root directory you need to run nvm use to switch to the proper Node version or alias the default version as… well… default. On the other hand, with asdf you can set project local and system-wide global versions. Global asdf global erlang 26.2.1 asdf global elixir 1.16.0-otp-26 Local In you projects root directory run the following command. asdf local elixir 1.16.0-otp-26 asdf local erlang 26.2.1 This will create a .tool-versions file with the defined versions. Now every time you cd into that directory, asdf will automatically set the runtime versions to the one you need for the given project. You can verify the version in use by starting the Erlang REPL and running elixir -v erl Erlang/OTP 26 [erts-14.2.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns] Eshell V14.2.1 (press Ctrl+G to abort, type help(). for help) 1> halt(). elixir -v Erlang/OTP 26 [erts-14.2.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns] Elixir 1.16.0 (compiled with Erlang/OTP 26) Notice the . at the end of the halt(). call in the Erlang REPL. You can exit with a double Ctrl+C too, but it’s just more elegant. Hello World in Elixir First, launch a the IEx (Interactive Elixir) REPL in the terminal: iex iex(1)> IO.puts \"Hello, world!\" Hello, world! :ok iex(2)> When calling a function, wrapping the arguments in () is optional. This can be very convenient when you’re just playing around in the REPL. So far so good. But when you started out with Node, you probably wrote and index.js file with console.log in it and ran it with node. For me it was definitely needed to feel like a big boy. Let’s do so by creating a file called hello_world.exs. Once it’s saved, we’re ready to execute it. elixir hello_world.exs Wait, what did just happen? I told you that Elixir is a compiled language, yet we ran our Hello, world! just like you do with a script. Well, you don’t necessarily need to save the binaries to a file, do you? When you run some Elixir code with the elixir command, it get’s compiled, but only held in memory, which can be useful for setup scripts, mix tasks and the likes. By convention, .exs files are used this sript-like way and ex files are compiled and serialized into files. All right then, how do we compile Elixir programs properly? Now that’s a bit more complex, as most of the time, you will use releases. But for now let’s do it the way you’d create CLI programs, even though you’ll most likley never do so. It’s only to get a some sort of fulfillment. Our first – very simple – project Let’s create or first Elixir project with the help of mix, which is somewhat similar to npm: you use it to download packages, build your projects or run them in development mode. Let us know if you’d like a post on comparing npm and package.json with mix and mix.exs. Time to get back to your terminal of choice and run: mix new elixir_hello_world It creates a simple project library structure like. elixir_hello_world ├── README.md ├── lib │ └── elixir_hello_world.ex ├── mix.exs └── test ├── elixir_hello_world_test.exs └── test_helper.exs Let’s open lib/elixir_hello_world.ex it should look something like this: defmodule ElixirHelloWorld do @moduledoc \"\"\" Documentation for `ElixirHelloWorld`. \"\"\" @doc \"\"\" Hello world. ## Examples iex> ElixirHelloWorld.hello() :world \"\"\" def hello do :world end end In it’s current from it simply returns the atom :world. However, that’s not useful for us now, as we don’t care about the return value, just want to print something to stdout. Let’s replace the return value with our previous IO.puts call. def hello doc IO.puts(\"Hello, world!\") end Now we can call our hello function using mix by specifying the app name, module name and function, still without prior compilation. mix run -e ElixirHelloWorld.hello Compiling 1 file (.ex) Hello, world! We can also load our project in the REPL: iex -S mix Erlang/OTP 26 [erts-14.2.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns] Interactive Elixir (1.16.0) - press Ctrl+C to exit (type h() ENTER for help) iex(1)> ElixirHelloWorld.hello Hello, world! :ok iex(2)> Now let’s tell mix that this is our main module. Time to open our mix.exs file. Find the part that says def project do, and add escript: [main_module: ElixirHelloWorld], the following to the list within the do ... end block. It should look like this: def project do [ app: :elixir_hello_world, version: \"0.1.0\", elixir: \"~> 1.16\", start_permanent: Mix.env() == :prod, deps: deps(), escript: [main_module: ElixirHelloWorld], ] end We also need to rename our hello function. def main(_arg) do IO.puts(\"Hello, world!\") end Prepending our argument name with an underscore tells the compiler that we don’t care about it’s value, in turn we don’t get unused variable warnings. Finally, we’re ready to compile our first Elixir project! mix escript.buildCompiling 1 file (.ex) Generated escript elixir_hello_world with MIX_ENV=dev ./elixir_hello_worldHello, world! Where to go from here? That’s the end of our intro to Elixir. We’re planning to write more posts like this, where we try to explain the language we grew to love in JavaScript terms. In the meantime, we recommend exploring the official documentation of Elixir. And we do mean it, as it is probably the best official documentation and tutorial of a language we’ve ever seen, so it should definitely be your starting point. If you find the docs from Google though, make sure you switch to 1.16.0, using the dropdown menu in the upper left corner, as it points to the documentation of older versions. * Ecto for Beginners RisingStack Engineering Ecto is a database wrapper and query generator for Elixir, so you can interact with databases in a functional and efficient way. In this guide we’ll cover the basics of Ecto, including setting up a project, defining schemas, running migrations Read More » Elixir Protocols & Behaviours for JavaScript/TypeScript Developers RisingStack Engineering Coming from TypeScript, the difference between behaviours and protocols in elixir might not be immediately obvious. Both of them look pretty much like an interface from two different angles. We’ll go into detail to try and clear up how they Read More » Elixir in Production: What Is It Used For? RisingStack Engineering We’ve already written a series of articles about why we think Elixir is a great choice, but don’t take our word for it – there are many success stories out there about using Elixir in production that not only prove *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/elixir-getting-started/"
  },
  {
    "body": "* Menu * Contact us Elixir Protocols & Behaviours for JavaScript/TypeScript Developers * ** Elixir Coming from TypeScript, the difference between behaviours and protocols in elixir might not be immediately obvious. Both of them look pretty much like an interface from two different angles. We’ll go into detail to try and clear up how they are different in this post, and also how they are similar. Key Points Behaviours: Behaviours are a way to define a set of functions that a module must implement. Behaviours are defined with a list of functions and their return types, without providing implementations for them. Other modules can then declare that they implement this behaviour by providing implementations for all the functions specified. They are more of a concept and the language constructs around it merely facilitate its documentation, and provide hints for the implementation. Protocols: Protocols provide a way to implement the same functionality for different types of data. They allow you to define a set of functions for a certain data type, together with different implementations for given structs of your choosing. You can extend on them later to support new types without modifying already existing implementations. If you prefer a more allegoric explanation, I think LostKobrakai summarized it the best on Elixirforum While most of you reading this will probably never define any Behaviours or Protocols, it’s still worth understanding these concepts and the differences between them for two reasons: It’s easier to understand the documentation of libraries you meet. When you design software with technologies you don’t understand deeply and you meet a complex problem, the feeling creeps in that there is something you read about that might make it more simple, but you just don’t have the time to fully understand and utilize it. Most of the time, that turns out to be wishful thinking. With a deeper understanding of the nuts and bolts of said technology, you can free yourself from these unhelpful thoughts. But that’s too many talking already, let’s dive in. Behaviours Behaviours are defined by modules that expect another module as a parameter, most of the time passed in as an argument to the start_link function, or as a config field. This is to provide a form of inversion of control. They define what functions the input module should implement in order to be able to work using the @callback and @macrocallback attributes. They mostly serve documentation and linting purposes. You can annotate your module with any number of callbacks that specify the functions your module will be using, and indicate the expected return type for them. Let’s take an example: we have a software that can calculate the price of real estate based on the shape of its floor area. It calculates the area first, than multiples it with the price per square meter. The library only provides the logic, and wants to let us – the user – decide where we pull the prices from. So in the example below the RealEstate module expects a get_price_per_square_meter function that returns an integer defined on the module passed as the parameter for its get_price function: defmodule RealEstate do @callback get_price_per_square_meter() :: integer() @spec get_price(TwoDShape, module()) :: float() def get_price(shape, module) do TwoDShape.area(shape) * module.get_price_per_square_meter() end end So we define a module that handles just that: defmodule PricePerSquareMeter do @behaviour RealEstate @impl RealEstate def get_price_per_square_meter() do RealEstateAPIProvider.get_prices() end end Note that we state which behaviour we’re implementing using the @behaviour model attribute, then annotate each function that implements it using @impl. This way the compiler can warn us if we don’t implement the interface properly. However, it’s up to us if we want to actually annotate our functions, as the code will compile without annotations as well, we just lose the helpful warning. That’s why you’ll find a lot of examples that omit these explicit markings. With that done, you can call get_price, passing it the PricePerSquareMeter module as such: defmodule BehaviourExample do @spec real_estate_price() :: :ok def real_estate_price() do land_price = RealEstate.get_price(%Circle{radius: 60}, PricePerSquareMeter) IO.puts(\"Land price #{land_price}\") house_price = RealEstate.get_price(%Rectangle{width: 60, height: 40}, PricePerSquareMeter) IO.puts(\"House price #{house_price}\") pyramid_price = RealEstate.get_price(%Triangle{base: 23, height: 55}, PricePerSquareMeter) IO.puts(\"Pyramid price #{pyramid_price}\") end end (Of course, calculating real estate prices is a lot more complex, but hopefully this gives an idea how one can go about creating behaviours.) An example of a simple behaviour that everyone encounters sooner or later is the Swoosh Adapter for email delivery, letting you use Swoosh to send emails using whatever custom delivery method your setup needs. Swoosh comes with a lot of the common email services already available, while you can also implement the adapter behaviour it defines to conform to your custom setup. The only thing you need to do is provide a module that defines the deliver, deliver_many, validate_config and validate_dependency functions. In a real life scenario, you’d invoke the use Swoosh.Adapter macro, that inserts the necessary code for you, but for the sake of the example, we’ll implement the behaviour explicitly. # my_adapter.ex defmodule MyApp.MyAdapter do @behaviour Swoosh.Adapter @impl Swoosh.Adapter def validate_config(config) do required_config = [:api_key] Swoosh.Adapter.validate_config(required_config, config) end @impl Swoosh.Adapter def validate_dependency do Swoosh.Adapter.validate_dependency([MyApp.MailApiClient]) end @impl Swoosh.Adapter def deliver(email, config) do MyApp.MailApiClient.post!(\"https://my-service.org/deliver\", Jason.encode!(email), config) end @impl Swoosh.Adapter def deliver_many(emails, config) do MyApp.MailApiClient.post!(\"https://my-service.org/deliver_many\", Jason.encode!(emails), config) end end And then, in either your config.exs or runtime.exs, you tell Swoosh to use your implementation of its adapter behaviour. # config.exs || runtime.exs config :my_app, MyApp.Mailer, adapter: MyApp.MyAdapter, api_key: api_key Behaviours in Elixir can be thought of as a blueprint for the functions a model needs to operate effectively. These functions are also annotated, enhancing the documentation you can generate. This approach contrasts with JavaScript’s inversion of control, where libraries usually require a single callback as a parameter. Before you flip out, I’m not talking about the dreaded callback hell from before the time of async-await, rather the app.get(callback) or socket.on('message', callback) pattern. However, we can find similar examples in JavaScript land too, as Vue implements pretty much the same concept for component data and lifecycle methods: export default { setup () { const data = ref(initialData) return { dataStore } }, mounted () { this.loadDataFromApi() }, beforeUnmount () { this.cleanup() } } Here, we provide an object for those that import the module. While in elixir the logic is reversed, and non-exported functions are marked as private, but the idea is the same: a collection of functions is passed to the library that provide instrocuctions to the library on what to do when certain events occur. Which is also what Phoenix LiveView uses to implement its functionality. You could implement a countdown similar to the above setup like this: defmodule AppWeb.PageLive do use Phoenix.LiveView @impl Phoenix.LiveView def mount(_session, socket) do {:ok, assign(data: loadDataFromDB())} end @impl Phoenix.LiveView def handle_event(\"event\", params, socket) do {:noreply, handleEvent(params)} end end You can see it’s mostly the same idea, except LiveView expects you to provide the various handlers when implementing the behaviour. Closing the discussion on Behaviours, there is one thing to note: when you browse the elixir documentation looking for Behaviour, you’ll find a module with the same name that’s deprecated. Don’t be fooled though, it’s simply there because there used to be a module with certain macros to be used when defining Behaviours that was deprecated in favour of the @callback and @macrocallback module attributes. This is noted in the documentation, however it might cause some avoidable fright. You might also run into some of the remnants of the deprecated module in code written with previous versions. Protocols Protocols are all about data manipulation and while they describe an interface, they achieve a lot more than the interface keyword in TypeScript. While in defprotocol ... do ... end block you define the functions one must implement for the protocol to be applicable to a given struct, just like interfaces do with classes, protocols also are responsible for dispatching function calls to their respective implementations. Let’s take an example from our first example, where we wanted to calculate the area of a 2D shape. In TypeScript, we can create an interface called TwoDShape that will declare what methods a class must implement for it to be considered a TwoDShape. In our case we’ll define a circle, a rectangle and a triangle. interface TwoDShape { area(): number; } class Circle implements TwoDShape { constructor(public radius: number) {} area() { return Math.PI * Math.pow(this.radius, 2); } } class Rectangle implements TwoDShape { constructor(public width: number, public height: number) {} area() { return this.width * this.height; } } class Triangle implements TwoDShape { constructor(public base: number, public height: number) {} area() { return (1 / 2) * this.base * this.height; } } As we know an interface merely provides type safety: we can declare that a given function expects a TwoDShape, which is any object that is marked as an implementation of the interface. So our RealEstate.getPrice method does not need to bother what kind of shape it’s working with, as long as it’s a 2D shape. class RealEstate { getPrice(shape: TwoDShape, pricePerSquareMeter: number) { return shape.area() * pricePerSquareMeter; } } Elixir’s protocol looks similar to the interface definition. #two_d_shape.ex defprotocol TwoDShape do @spec area(t) :: float() | integer() def area(shape) end defimpl TwoDShape, for: Triangle do def area(%Triangle{base: base, height: height}) do 1 / 2 * base * height end end # triangle.ex defmodule Triangle do @enforce_keys [:base, :height] defstruct [:base, :height] # the type definition is not mandatory, it only helps generating the documentation @type t() :: %__MODULE__{ base: integer(), height: integer() } end # circle.ex defmodule Circle do @enforce_keys [:radius] defstruct [:radius] # the type definition is not mandatory, it only helps generating the documentation @type t() :: %__MODULE__{ radius: integer() } defimpl TwoDShape do def area(%Circle{radius: radius}) do :math.pi() * :math.pow(radius, 2) end end end # rectangle.ex defmodule Rectangle do @enforce_keys [:width, :height] defstruct [:width, :height] # the type definition is not mandatory, it only helps generating the documentation @type t() :: %__MODULE__{ width: integer(), height: integer() } defimpl TwoDShape do def area(%Rectangle{width: width, height: height}) do width * height end end end There two things to note here. One is that, while in TS only the data type (class) can define the implementation of a given interface, in elixir both the data type (struct) and the protocol itself can handle this task. This can be extremely useful if you want to create a Protocol that needs to be implemented for built-in types, but you want to give the freedom to implement it to your users. The other thing to note is that while we provided type specs, elixir is not a statically typed language, so they are not mandatory and won’t break the compilation, but merely provide warnings. So in essence we only get an error at runtime if a Protocol is not implemented for a given struct. Now let’s see how the Protocol is used in action! defmodule Protocol.RealEstate do @spec get_price(TwoDShape, integer()) :: float() def get_price(shape, price_per_square_meter) do TwoDShape.area(shape) * price_per_square_meter end end Let’s see the interesting part from the TS and Elixir implementations side-by-side: return shape.area() * pricePerSquareMeter; In TypeScript, we call the area method that’s attached to the object. TwoDShape.area(shape) * price_per_square_meter While in elixir we call the area function of the TwoDShape module by passing it an arbitrary struct. The runtime then determines which specific area function to call based on the struct instance provided. In Elixir, structs do not have methods of their own. While functions related to a struct might be grouped in the same module, they are essentially standalone functions that operate on specific data types. This is where Protocols come into play, forming a system that associates certain structs with specific functions for effective dispatch when needed. Probably the most commonly used Protocol in elixir is the Enumerable, that we use when we call functions from the Enum and the Stream modules. The Enumerable has four required functions: count, reduce, slice and member, and allows iterating over values of the data types the protocol is implemented for. defprotocol Enumerable do def reduce(enumerable, acc, fun) def count(enumerable) def member?(enumerable, element) def slice(enumerable) end We can take a look at the Enumerable implementation for Maps: def reduce(map, acc, fun) do Enumerable.List.reduce(:maps.to_list(map), acc, fun) end Reduce uses the implementation for lists, by first converting the map to a list, and forwarding the accumulator and the supplied function to Enumerable.List.reduce. Let’s take a look at it in turn. defimpl Enumerable, for: List do [...] def reduce(_list, {:halt, acc}, _fun), do: {:halted, acc} def reduce(list, {:suspend, acc}, fun), do: {:suspended, acc, &reduce(list, &1, fun)} def reduce([], {:cont, acc}, _fun), do: {:done, acc} def reduce([head | tail], {:cont, acc}, fun), do: reduce(tail, fun.(head, acc), fun) end Let’s start from the bottom. In case it’s called with a non-empty list ([head | tail] pattern) then it simply calls itself again with the tail of the list, applying the provided fun to the head and the accumulator. This continues until the list is empty, and the function returns {:done, acc}. The next two functions above simply handle the case if the reduce function is called with either {:suspend, acc} or {:halt, acc} instead of {:cont, acc}. Makes sense, if we think about how Enum.reduce or Array.prototype.reduce works, but what’s with these extra tuples everywhere? They provide a way for finer control over the iterations end. Let’s take for example the Enum.any? function. def any?(enumerable, fun) do Enumerable.reduce(enumerable, {:cont, false}, fn entry, _ -> if fun.(entry), do: {:halt, true}, else: {:cont, false} end) |> elem(1) end The provided enumerable is reduced, until the provided handler function returns a truthy value, at which point a {:halt, true} tuple is returned, and then the second element of the tagged tuple is extracted with |> elem(1). Based on that, we can make sense of the other implementations as well. defimpl Enumerable, for: Map do def count(map) do {:ok, map_size(map)} end For getting the count, the implementation simply calls the map_size kernel function. def member?(map, {key, value}) do {:ok, match?(%{^key => ^value}, map)} end def member?(_map, _other) do {:ok, false} end The member function uses pattern matching to decide if the key and value pair is present in the Map or not. def slice(map) do size = map_size(map) {:ok, size, &:maps.to_list/1} end As for slice, in the end it will convert the Map to a List and slice it using the implementation for Lists. Regarding protocols, general implementations, deriving and fallback to any still remain, but I think the documentation is satisfying on these topics, and I don’t want to pointlessly rephrase it here just for the sake of spilling characters on a screen. The only thing that needs to be added, is that you’ll probably want to take a look at Jason.Encoder, as most of the time you’ll derive it for your specific structs when you want to send them over the wire using Phoenix. Behaviours & Protocols In summary, behaviours and protocols are pretty similar, with the main differences are behaviours being more of a documentation aid, and being more about modules while protocols are about data. Both of them are mostly useful for library creators who wish to share their code with a wider audience, while users would most likely find themselves on the other side, creating modules to satisfy behaviours, and calling functions that use protocols, and sometimes even implementing protocols for their own data. * Ecto for Beginners RisingStack Engineering Ecto is a database wrapper and query generator for Elixir, so you can interact with databases in a functional and efficient way. In this guide we’ll cover the basics of Ecto, including setting up a project, defining schemas, running migrations Read More » Elixir in Production: What Is It Used For? RisingStack Engineering We’ve already written a series of articles about why we think Elixir is a great choice, but don’t take our word for it – there are many success stories out there about using Elixir in production that not only prove Read More » Elixir Cheatsheet: A Node.js Developer’s Transition Guide RisingStack Engineering We’ve previously written about the reasons for trying Elixir out, as well as a how-to-get-started guide. However, there is still a long way ahead of you after firing up your thrusters. While the tutorial and documentation of both Elixir and *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/elixir-protocols-behaviours/"
  },
  {
    "body": "* Menu * Contact us Sometimes you do need Kubernetes! But how should you decide? * *ngstack.com In this article: Tamas Kadlecsik Kubernetes At RisingStack, we help companies to adopt cloud-native technologies, or if they have already done so, to get the most mileage out of them. Recently, I’ve been invited to Google DevFest to deliver a presentation on our experiences working with KubernetesKubernetes (often abbreviated as K8s) offers a framework to run distributed systems efficiently. It's a platform that helps managing containerized workloads and services, and even takes care of scaling. Google open-sourced it in 2014.. Below I talk about an online learning and streaming platform where the decision to use Kubernetes has been contested both internally and externally since the beginning of its development. The application and its underlying infrastructure were designed to meet the needs of the regulations of several countries: The app should be able to run on-premises, so students’ data could never leave a given country. Also, the app had to be available as a SaaS product as well. It can be deployed as a single-tenant system where a business customer only hosts one instance serving a handful of users, but some schools could have hundreds of users. Or it can be deployed as a multi-tenant system where the client is e.g. a government and needs to serve thousands of schools and millions of users. Learn When to Use Kubernetes: Get Our Case Study! Enter your email to subscribe to our newsletter and we’ll send you a link to download the case study. DOWNLOAD NOW The application itself was developed by multiple, geographically scattered teams, thus a MicroservicesMicroservices are not a tool, rather a way of thinking when building software applications. Let's begin the explanation with the opposite: if you develop a single, self-contained application and keep improving it as a whole, it's usually called a monolith. Over time, it's more and more difficult to maintain and update it without breaking anything, so the development cycle may... architecture was justified, but both the distributed system and the underlying infrastructure seemed to be an overkill when we considered the fact that during the product’s initial entry, most of its customers needed small instances. Was Kubernetes suited for the job, or was it an overkill? Did our client really need Kubernetes? Let’s figure it out. (Feel free to check out the video presentation, or the extended article version below!) Let’s talk a bit about Kubernetes itself! Kubernetes is an open-source container orchestration engine that has a vast ecosystem. If you run into any kind of problem, there’s probably a library somewhere on the internet that already solves it. But Kubernetes also has a daunting learning curve, and initially, it’s pretty complex to manage. Cloud ops / infrastructure engineering is a complex and big topic in and of itself. Kubernetes does not really mask away the complexity from you, but plunges you into deep water as it merely gives you a unified control plane to handle all those moving parts that you need to care about in the cloud. So, if you’re just starting out right now, then it’s better to start with small things and not with the whole package straight away! First, deploy a VM in the cloud. Use some PaaS or FaaS solutions to play around with one of your apps. It will help you gradually build up the knowledge you need on the journey. So you want to decide if Kubernetes is for you. First and foremost, Kubernetes is for you if you work with containers! (It kinda speaks for itself for a container orchestration system). But you should also have more than one service or instance. Kubernetes makes sense when you have a huge microservice architecture, or you have dedicated instances per tenant having a lot of tenants as well. Also, your services should be stateless, and your state should be stored in databases outside of the cluster. Another selling point of Kubernetes is the fine gradient control over the network. And, maybe the most common argument for using Kubernetes is that it provides easy scalability. Okay, and now let’s take a look at the flip side of it. Kubernetes is not for you if you don’t need scalability! If your services rely heavily on disks, then you should think twice if you want to move to Kubernetes or not. Basically, one disk can only be attached to a single node, so all the services need to reside on that one node. Therefore you lose node auto-scaling, which is one of the biggest selling points of Kubernetes. For similar reasons, you probably shouldn’t use k8s if you don’t host your infrastructure in the public cloud. When you run your app on-premises, you need to buy the hardware beforehand and you cannot just conjure machines out of thin air. So basically, you also lose node auto-scaling, unless you’re willing to go hybrid cloud and bleed over some of your excess load by spinning up some machines in the public cloud. If you have a monolithic application that serves all your customers and you need some scaling here and there, then cloud service providers can handle it for you with autoscaling groups. There is really no need to bring in Kubernetes for that. Let’s see our Kubernetes case-study! Maybe it’s a little bit more tangible if we talk about an actual use case, where we had to go through the decision making process. Online Learning Platform is an application that you could imagine as if you took your classroom and moved it to the internet. You can have conference calls. You can share files as handouts, you can have a whiteboard, and you can track the progress of your students. This project started during the first wave of the lockdowns around March, so one thing that we needed to keep in mind is that time to market was essential. In other words: we had to do everything very, very quickly! This product targets mostly schools around Europe, but it is now used by corporations as well. So, we’re talking about millions of users from the point we go to the market. The product needed to run on-premise, because one of the main targets were governments. Initially, we were provided with a proposed infrastructure where each school would have its own VM, and all the services and all the databases would reside in those VMs. Handling that many virtual machines, properly handling rollouts to those, and monitoring all of them sounded like a nightmare to begin with. Especially if we consider the fact that we only had a couple of weeks to go live. After studying the requirements and the proposal, it was time to call the client to.. Discuss the proposed infrastructure. So the conversation was something like this: “Hi guys, we would prefer to go with Kubernetes because to handle stuff at that scale, we would need a unified control plane that Kubernetes gives us.” \"Yeah, sure, go for it.\" And we were happy, but we still had a couple of questions: “Could we, by any chance, host it on the public cloud?” \"Well, no, unfortunately. We are negotiating with European local governments and they tend to be squeamish about sending their data to the US. \" Okay, anyways, we can figure something out… “But do the services need filesystem access?” \"Yes, they do.\" Okay, crap! But we still needed to talk to the developers so all was not lost. Let’s call the developers! It turned out that what we were dealing with was an usual microservice-based architecture, which consisted of a lot of services talking over HTTP and messaging queues. Each service had its own database, and most of them stored some files in Minio. In case you don’t know it, Minio is an object storage system that implements the S3 API. Now that we knew the fine-grained architectural layout, we gathered a few more questions: “Okay guys, can we move all the files to Minio?” \"Yeah, sure, easy peasy.\" So, we were happy again, but there was still another problem, so we had to call the hosting providers: “Hi guys, do you provide hosted Kubernetes?” \"Oh well, at this scale, we can manage to do that!\" So, we were happy again, but.. Just to make sure, we wanted to run the numbers! Our target was to be able to run 60 000 schools on the platform in the beginning, so we had to see if our plans lined up with our limitations! We shouldn’t have more than 150 000 total pods! 10 (pod/tenant) times 6000 tenants is 60 000 Pods. We’re good! We shouldn’t have more than 300 000 total containers! It’s one container per pod, so we’re still good. We shouldn’t have more than 100 pods per node and no more than 5 000 nodes. Well, what we have is 60 000 pods over 100 pod per node. That’s already 6 000 nodes, and that’s just the initial rollout, so we’re already over our 5 000 nodes limit. Okay, well… Crap! But, is there a solution to this? Sure, it’s federation! We could federate our Kubernetes clusters.. ..and overcome these limitations. We have worked with federated systems before, so Kubernetes surely provides something for that, riiight? Well yeah, it does… kind of. It’s the stable Federation v1 API, which is sadly deprecated. Then we saw that Kubernetes Federation v2 is on the way! It was still in alpha at the time when we were dealing with this issue, but the GitHub page said it was rapidly moving towards beta release. By taking a look at the releases page we realized that it had been overdue by half a year by then. Since we only had a short period of time to pull this off, we really didn’t want to live that much on the edge. So what could we do? We could federate by hand! But what does that mean? In other words: what could have been gained by using KubeFed? Having a lot of services would have meant that we needed a federated Prometheus and Logging (be it Graylog or ELK) anyway. So the two remaining aspects of the system were rollout / tenant generation, and manual intervention. Manual intervention is tricky. To make it easy, you need a unified control plane where you can eyeball and modify anything. We could have built a custom one that gathers all information from the clusters and proxies all requests to each of them. However, that would have meant a lot of work, which we just did not have the time for. And even if we had the time to do it, we would have needed to conduct a cost/benefit analysis on it. The main factor in the decision if you need a unified control plane for everything is scale, or in other words, the number of different control planes to handle. The original approach would have meant 6000 different planes. That’s just way too much to handle for a small team. But if we could bring it down to 20 or so, that could be bearable. In that case, all we need is an easy mind map that leads from services to their underlying clusters. The actual route would be something like: Service -> Tenant (K8s Namespace) -> Cluster. The Service -> Namespace mapping is provided by Kubernetes, so we needed to figure out the Namespace -> Cluster mapping. This mapping is also necessary to reduce the cognitive overhead and time of digging around when an outage may happen, so it needs to be easy to remember, while having to provide a more or less uniform distribution of tenants across Clusters. The most straightforward way seemed to be to base it on Geography. I’m the most familiar with Poland’s and Hungary’s Geography, so let’s take them as an example. Poland comprises 16 voivodeships, while Hungary comprises 19 counties as main administrative divisions. Each country’s capital stands out in population, so they have enough schools to get a cluster on their own. Thus it only makes sense to create clusters for each division plus the capital. That gives us 17 or 20 clusters. So if we get back to our original 60 000 pods, and 100 pod / tenant limitation, we can see that 2 clusters are enough to host them all, but that leaves us no room for either scaling or later expansions. If we spread them across 17 clusters – in the case of Poland for example – that means we have around 3.500 pods / cluster and 350 nodes, which is still manageable. This could be done in a similar fashion for any European country, but still needs some architecting when setting up the actual infrastructure. And when KubeFed becomes available (and somewhat battle tested) we can easily join these clusters into one single federated cluster. Great, we have solved the problem of control planes for manual intervention. The only thing left was handling rollouts.. As I mentioned before, several developer teams had been working on the services themselves, and each of them already had their own Gitlab repos and CIs. They already built their own Docker images, so we simply needed a place to gather them all, and roll them out to Kubernetes. So we created a GitOps repo where we stored the helm charts and set up a GitLab CI to build the actual releases, then deploy them. From here on, it takes a simple loop over the clusters to update the services when necessary. The other thing we needed to solve was tenant generation. It was easy as well, because we just needed to create a CLI tool which could be set up by providing the school’s name, and its county or state. That’s going to designate its target cluster, and then push it to our Gitops repo, and that basically triggers the same rollout as new versions. We were almost good to go, but there was still one problem: on-premises. Although our hosting providers turned into some kind of public cloud (or something we can think of as public clouds), we were also targeting companies who want to educate their employees. Huge corporations – like a Bank – are just as squeamish about sending their data out to the public internet as governments, if not more.. So we needed to figure out a way to host this on servers within vaults completely separated from the public internet. In this case, we had two main modes of operation. One is when a company just wanted a boxed product and they didn’t really care about scaling it. And the other one was where they expected it to be scaled, but they were prepared to handle this. In the second case, it was kind of a bring your own database scenario, so you could set up the system in a way that we were going to connect to your database. And in the other case, what we could do is to package everything — including databases — in one VM, in one Kubernetes cluster. But! I just wrote above that you probably shouldn’t use disks and shouldn’t have databases within your cluster, right? However, in that case, we already had a working infrastructure. Kubernetes provided us with infrastructure as code already, so it only made sense to use that as a packaging tool as well, and use Kubespray to just spray it to our target servers. It wasn’t a problem to have disks and DBs within our cluster because the target were companies that didn’t want to scale it anyway. So it’s not about scaling. It is mostly about packaging! Previously I told you, that you probably don’t want to do this on-premises, and this is still right! If that’s your main target, then you probably shouldn’t go with Kubernetes. However, as our main target was somewhat of a public cloud, it wouldn’t have made sense to just recreate the whole thing – basically create a new product in a sense – for these kinds of servers. So as it is kind of a spin-off, it made sense here as well as a packaging solution. Basically, I’ve just given you a bullet point list to help you determine whether Kubernetes is for you or not, and then I just tore it apart and threw it into a basket. And the reason for this is – as I also mentioned: Cloud ops is difficult! There aren’t really one-size-fits-all solutions, so basing your decision on checklists you see on the internet is definitely not a good idea. We’ve seen that a lot of times where companies adopt Kubernetes because it seems to fit, but when they actually start working with it, it turns out to be an overkill. If you want to save yourself about a year or two of headache, it’s a lot better to first ask an expert, and just spend a couple of hours or days going through your use cases, discussing those and save yourself that year of headache. In case you’re thinking about adopting Kubernetes, or getting the most out of it, don’t hesitate to reach out to us at info@risingstack.com, or by using the contact form below! * Kubernetes * You’ll Need the Most RisingStack Engineering Are you currently preparing for a Kubernetes interview? If so, you’ll want to make sure you’re familiar with the questions and answers below at least. This article will help you demonstrate your understanding of Kubernetes concepts and how they can Read More » Argo CD Kubernetes Tutorial Janos Kubisch With this Argo CD Kubernetes tutorial you’ll learn to store credentials safely within your k8s cluster using a pull-based continous deployment tool. Read More » RisingStack Joins the Cloud Native Node.js Project Tamas Kadlecsik The CNJS project provides best practices and tools to build and integrate enterprise-grade Cloud Native Node.js applications. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/kubernetes-case-study-learning-platform/"
  },
  {
    "body": "* Menu * Contact us Kubernetes * You’ll Need the Most * ** Kubernetes Are you currently preparing for a Kubernetes interview? If so, you’ll want to make sure you’re familiar with the questions and answers below at least. This article will help you demonstrate your understanding of Kubernetes concepts and how they can be applied in practice. With enough preparation, you’ll be able to confidently nail your next interview and showcase your Kubernetes skills. Let’s get started! What is Kubernetes? Kubernetes is a platform for managing containerized stateless or stateful applications across a cluster of nodes. Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications. It groups containers that make up an application into logical units for easy management and discovery. Kubernetes also automates the replication of the containers across multiple nodes in a cluster, as well as healing of failed containers. Kubernetes was originally designed by Google, and is now maintained by the Cloud Native Computing Foundation. Some of the key features of Kubernetes include: – Provisioning and managing containers across multiple hosts – Scheduling and deploying containers – Orchestrating containers as part of a larger application – Automated rollouts and rollbacks – Handling container health and failure – Scaling containers up and down as needed – It has a large and active community that develops new features and supports users. – It has a variety of tools for managing storage and networking for containers. What are the main differences between Docker Swarm and Kubernetes? Docker Swarm and Kubernetes are both container orchestration platforms. They are both designed for deploying and managing containers at scale. However, there are some key differences between the two platforms. Docker Swarm is a native clustering solution for Docker. It is simpler to install and configure than Kubernetes. Docker Swarm also uses the same CLI and API as Docker, so it is easy to learn for users who are already familiar with Docker. However, Docker Swarm lacks some of the advanced features that Kubernetes has, such as automatic rollouts and rollbacks, health checks, and secrets management. Kubernetes is a more complex system than Docker Swarm, but it offers a richer feature set. Kubernetes is also portable across different environments, so it can be used in on-premise deployments, as well as cloud-based deployments. In addition, Kubernetes is backed by a large community of users and developers, so there is a wealth of support and documentation available. To sum up: -Kubernetes is more complicated to set up but the benefits are a robust cluster and auto-scaling -Docker Swarm is easy to set up but does not have a robust cluster or autoscaling What is a headless service? ​​A headless service is a special type of Kubernetes service that does not expose a cluster IP address. This means that the service will not provide load balancing to the associated pods. Headless services are useful for applications that require a unique IP per instance or for applications that do not require load balancing. For example, stateful applications such as databases often require a unique IP address per instance. By using a headless service, each instance can be given its own IP address without the need for a load balancer. Headless services can also be used to expose individual instances of an application outside of the Kubernetes cluster. This is often done by using a tool like kubectl to expose individual pods. What are the main components of Kubernetes architecture? Pods and containers are two components of a Kubernetes architecture. Pods are composed of one or more containers that share an IP address and port space. This means that containers within a pod can communicate with each other without going through a network. Pods also provide a way to deploy applications on a cluster in a replicable and scalable way. Containers, on the other hand, are isolated from each other and do not share an IP address. This isolation provides a higher level of security as each container can only be accessed by its own process. In addition, containers have their own file system, which means that they can be used to package up an application so that it can be run in different environments. What are the different management and orchestrator features in Kubernetes? The available management and orchestrator features in Kubernetes are: 1. Cluster management components: These components manage the Kubernetes cluster. 2. Container orchestration components: These components orchestrate the deployment and operation of containers. 3. Scheduling components: These components schedule and manage the deployment of containers on nodes in the cluster. 4. Networking components: These components provide networking capabilities for containers in the cluster. 5. Storage components: These components provide storage for containers in the cluster. 6. Security components: These components provide security for the containers in the cluster. What is the load balancer in Kubernetes? A load balancer is a software program that evenly distributes network traffic across a group of servers. It is used to improve the performance and availability of applications that run on multiple servers. Specifically, the load balancer in Kubernetes is a component that distributes traffic across nodes in a Kubernetes cluster. It can be used to provide high availability and to optimize resource utilization. Also, the load balancer can help to prevent overloads on individual nodes. What is Container resource monitoring? Container resource monitoring means that you can keep track of CPU, Memory, and Disk space utilization for each container in your Kubernetes cluster. There are a two main ways to monitor the Kubernetes cluster. One way is to use the built-in kubectl command-line interface: this is able to monitor CPU utilization, memory usage and disk space. If you need to keep track of more data, then there’s another way: to use a third-party monitoring tool such as Datadog, New Relic, or Prometheus. * a ReplicaSet and replication controller? In Kubernetes, a ReplicaSet is a collection of pods that are always up and running. The replication controller’s objectives are to ensure that a desired number of pod replicas are running at all times, and to maintain the desired state of the pods in the system. A ReplicaSet is a newer, more advanced concept that replaces replication controllers. A ReplicaSet allows you to define a minimum number of pods that must be up and running at all times, and provides a richer set of features than replication controllers. ReplicaSets are the basic building blocks of Kubernetes clusters. They provide the ability to have multiple copies of an application running in parallel, and to scale out (add more nodes) or scale in (remove nodes) the number of copies as needed. Replication controllers provide the ability to maintain a desired number of pod replicas for a particular application. A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to Pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all. What are the recommended security measures for Kubernetes? There are a number of recommended security measures for Kubernetes, including implementing third-party authentication and authorization tools, using network segmentation to restrict access to sensitive data, and maintaining regular monitoring and auditing of the cluster. Another key recommendation is to use role-based access control (RBAC) to limit access to the Kubernetes API. This ensures that only authorized users can make changes to the system and introduces an additional layer of protection against potential vulnerabilities or attacks. Node isolation is also worth mentioning. It is a process of isolating individual nodes in a Kubernetes cluster so that each node only has access to its own resources. This process is used to improve the security and performance of Kubernetes clusters by preventing malicious activity on one node from affecting other nodes. Node isolation can be achieved through a variety of means, such as using a firewall to block network traffic between nodes, or using software-defined networking to segment node traffic. By isolating nodes, Kubernetes administrators can ensure that each node in a cluster is used only for its intended purpose and that unauthorized access to resources is prevented. Other best practices for securing Kubernetes include: – Restricting access to the Kubernetes API to authorized users only – Using network firewalls to restrict access to the Kubernetes nodes from unauthorized users – Using intrusion detection/prevention systems to detect and prevent unauthorized access to the Kubernetes nodes – Using encryption for communications between the nodes and pods in the cluster – Limiting which IP addresses have access to cluster resources – Implementing regular vulnerability assessments. Ultimately, incorporating these types of security measures into your Kubernetes deployment will help ensure the safety and integrity of your system. What is Container Orchestration and how does it work in Kubernetes? Container orchestration is the process of managing a group of containers as a single entity. Container orchestration systems, like Kubernetes, allow you to deploy and manage containers across a cluster of nodes. This provides a higher-level of abstraction and makes it easier to manage and scale your applications. Kubernetes supports features for container orchestration, including: – Creating and managing containers – Configuring and managing networking – Configuring and managing storage – Booting and managing VMs – Deploying applications – Managing workloads – Accessing logs and monitoring resources – Configuring security and authentication What are the features of Kubernetes? Kubernetes is a platform that enables users to deploy, manage and scale containerized applications. Some of its key features include: -Declarative syntax: Kubernetes uses a declarative syntax that makes it easy to describe the desired state of an application. -Self-healing: Kubernetes is able to automatically heal applications and nodes in the event of failures. -Horizontal scalability: Kubernetes enables users to scale their applications horizontally, by adding or removing nodes as needed. -Fault tolerance: Kubernetes is able to tolerate failures of individual nodes or pods, ensuring that applications are always available. What is Kube-apiserver and what’s the role of it? The Kubernetes apiserver is a critical part of a Kubernetes deployment. The apiserver provides a REST API for managing Kubernetes resources. It also provides authentication and authorization for accessing those resources. The apiserver must be secured to prevent unauthorized access to Kubernetes resources. Use role-based access control to restrict access to specific resources. What is a node in Kubernetes? A node is a master or worker machine in Kubernetes. It can be a physical machine or a virtual machine. A node is a member of a Kubernetes cluster. Each node in a Kubernetes cluster is assigned a unique ID, which is used to identify the node when communicating with the Kubernetes API. When a new node is added to a Kubernetes cluster, the Kubernetes API is contacted to register the node with the cluster. The Kubernetes API stores information about the node, including its assigned ID, the addresses of the node’s Kubernetes masters, and the labels assigned to the node. When a node is removed from a Kubernetes cluster, the Kubernetes API is contacted to unregister the node from the cluster. The Kubernetes API removes information about the node from its database, including the node’s assigned ID, the addresses of the node’s Kubernetes masters, and the labels assigned to the node. What is kube-scheduler and what’s the role of it? Kube-scheduler is responsible for keeping track of the state of the cluster and ensuring that all desired pods are scheduled. In a Kubernetes cluster, the scheduler is responsible for assigning Pods to Nodes. When a new Pod is created, the scheduler watches for it and becomes responsible for finding the best Node for that Pod to run on. To do this, the scheduler looks at the requirements of the Pod and compares them with the capabilities of the Nodes in the cluster. The scheduler also takes into account factors such as Node utilization and available resources. By finding the best match between Pods and Nodes, the scheduler helps to ensure that Pods are running on an optimal Node. This, in turn, helps to improve the performance of the overall cluster. To get the most out of the Kubernetes scheduler, you should configure it to schedule your pods as efficiently as possible. You can do this by configuring the scheduler’s resource constraints and pod priorities. What is Minikube? Minikube is important because it allows you to have a local Kubernetes environment. Minikube is a single node Kubernetes environment that you can install on your laptop. This is important because it allows you to develop and test Kubernetes applications without having to deploy them to a cluster. What is a Namespace in Kubernetes? Namespaces are a way to logically group objects in Kubernetes. By default, Kubernetes has a single namespace. Objects in different namespaces can have different security contexts and can be managed independently. How can you handle incoming data from external sources (ingress traffic)? Ingress is a Kubernetes resource that allows an organization to control how external traffic is routed to and from its services. Ingress resources are defined in a YAML file. An Ingress controller is then deployed to manage the ingress resource. Ingress controllers use the Ingress Resource Definition to determine how to route traffic to services. Ingress controllers can use a variety of methods to route traffic, including: -Using a load balancer -Using a DNS server -Using a path-based routing algorithm What are federated clusters? Federated clusters in Kubernetes allow multiple Kubernetes clusters to be interconnected, forming a larger mesh of clusters. This allows for greater scale and redundancy, as well as simplified management of multiple clusters. Federated clusters are configured by setting up a federated control plane, and then adding other Kubernetes clusters to the federated control plane. The federated control plane can be used to manage the other Kubernetes clusters in a number of ways, including: The nodes in the other clusters The Pods in the other clusters The Services in the other clusters The Secrets in the other clusters The ConfigMaps in the other clusters The Deployments in the other clusters The ReplicationControllers in the other clusters The Ingresses in the other clusters The LoadBalancers in the other clusters What is a Kubelet? Kubelet is a daemon on each node that runs on each Kubernetes node. Kubelet is responsible for communicating with the API server to get information about the state of the nodes and pods in the cluster, and for pulling and pushing images to and from the nodes. What is Kubectl? Kubectl is a command-line interface for Kubernetes. With Kubectl, you can manage your Kubernetes clusters and applications. Kubectl can be used on your local machine, or you can use it with a Kubernetes cluster. kubectl can be used to create, delete, and manage Kubernetes objects. What is Kube-proxy? Kube-proxy is a daemon that runs on each Kubernetes node. It is responsible for proxying pod IPs and service IPs to the correct pods and services. Kube-proxy is started automatically by Kubernetes. Kubernetes also uses kube-proxy to load balance services. What are “K8s”? k8s is an abbreviation for Kubernetes. How are Kubernetes and Docker related? Kubernetes is a platform for managing containers at scale, while Docker itself is a container technology that can be used by Kubernetes. A container infrastructure, such as Docker, allows apps to be packaged into lightweight, portable, and self-sufficient units. Kubernetes is a platform for managing and orchestrating containers at scale. Along with Kubernetes, Docker gives you the ability to deploy and manage applications at large scales. Conclusion The interview process can be daunting, but by preparing for the most commonly asked questions and understanding the basics of what Kubernetes is and does, you’ll be well on your way to acing your interview. We wish you the best of luck in your upcoming interview! * Argo CD Kubernetes Tutorial Janos Kubisch With this Argo CD Kubernetes tutorial you’ll learn to store credentials safely within your k8s cluster using a pull-based continous deployment tool. Read More » Sometimes you do need Kubernetes! But how should you decide? Tamas Kadlecsik A case study where the adoption of Kubernetes has been heavily contested. Learn about our decision making process, and how we overcame k8s’s limitations! Read More » RisingStack Joins the Cloud Native Node.js Project Tamas Kadlecsik The CNJS project provides best practices and tools to build and integrate enterprise-grade Cloud Native Node.js applications. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/kubernetes-interview-questions-and-answers/"
  },
  {
    "body": "* Menu * Contact us Async Await in Node.js – How to Master it? * *ngstack.com In this article: Tamas Kadlecsik Node.js In this article, you will learn how you can simplify your callback or Promise based Node.jsNode.js is an asynchronous event-driven JavaScript runtime and is the most effective when building scalable network applications. Node.js is free of locks, so there's no chance to dead-lock any process. application with asyncAsynchrony, in software programming, refers to events that occur outside of the primary program flow and methods for dealing with them. External events such as signals or activities prompted by a program that occur at the same time as program execution without causing the program to block and wait for results are examples of this category. Asynchronous input/output is an... functions (async awaitIn an async function, you can await any Promise or catch its rejection cause. In ECMAScript 2017, the async and await keywords were introduced. These features make writing asynchronous code easier and more readable in the long run. They aid in the transition from asynchronicity to synchronism by making it appear more like classic synchronous code, so they're well worth learning.). Whether you’ve looked at async/await and promises in JavaScript before, but haven’t quite mastered them yet, or just need a refresher, this article aims to help you. What are async functions in Node.js? Async functions are available natively in Node and are denoted by the async keyword in their declaration. They always return a promise, even if you don’t explicitly write them to do so. Also, the await keyword is only available inside async functions at the moment – it cannot be used in the global scope. In an async function, you can await any Promise or catch its rejection cause. So if you had some logic implemented with promises: function handler (req, res) { return request('https://user-handler-service') .catch((err) => { logger.error('Http error', err); error.logged = true; throw err; }) .then((response) => Mongo.findOne({ user: response.body.user })) .catch((err) => { !error.logged && logger.error('Mongo error', err); error.logged = true; throw err; }) .then((document) => executeLogic(req, res, document)) .catch((err) => { !error.logged && console.error(err); res.status(500).send(); }); } You can make it look like synchronous code using async/await: async function handler (req, res) { let response; try { response = await request('https://user-handler-service') ; } catch (err) { logger.error('Http error', err); return res.status(500).send(); } let document; try { document = await Mongo.findOne({ user: response.body.user }); } catch (err) { logger.error('Mongo error', err); return res.status(500).send(); } executeLogic(document, req, res); } Currently in Node you get a warning about unhandled promise rejections, so you don’t necessarily need to bother with creating a listener. However, it is recommended to crash your app in this case as when you don’t handle an error, your app is in an unknown state. This can be done either by using the --unhandled-rejections=strict CLI flag, or by implementing something like this: process.on('unhandledRejection', (err) => { console.error(err); process.exit(1); }) Automatic process exit will be added in a future Node release – preparing your code ahead of time for this is not a lot of effort, but will mean that you don’t have to worry about it when you next wish to update versions. Patterns with async functions in JavaScript There are quite a couple of use cases when the ability to handle asynchronous operations as if they were synchronous comes very handy, as solving them with Promises or callbacks requires the use of complex patterns. Since node@10.0.0, there is support for async iterators and the related for-await-of loop. These come in handy when the actual values we iterate over, and the end state of the iteration, are not known by the time the iterator method returns – mostly when working with streams. Aside from streams, there are not a lot of constructs that have the async iterator implemented natively, so we’ll cover them in another post. Retry with exponential backoff Implementing retry logic was pretty clumsy with Promises: function request(url) { return new Promise((resolve, reject) => { setTimeout(() => { reject(`Network error when trying to reach ${url}`); }, 500); }); } function requestWithRetry(url, retryCount, currentTries = 1) { return new Promise((resolve, reject) => { if (currentTries <= retryCount) { const timeout = (Math.pow(2, currentTries) - 1) * 100; request(url) .then(resolve) .catch((error) => { setTimeout(() => { console.log('Error: ', error); console.log(`Waiting ${timeout} ms`); requestWithRetry(url, retryCount, currentTries + 1); }, timeout); }); } else { console.log('No retries left, giving up.'); reject('No retries left, giving up.'); } }); } requestWithRetry('http://localhost:3000') .then((res) => { console.log(res) }) .catch(err => { console.error(err) }); This would get the job done, but we can rewrite it with async/await and make it a lot more simple. function wait (timeout) { return new Promise((resolve) => { setTimeout(() => { resolve() }, timeout); }); } async function requestWithRetry (url) { const MAX_RETRIES = 10; for (let i = 0; i <= MAX_RETRIES; i++) { try { return await request(url); } catch (err) { const timeout = Math.pow(2, i); console.log('Waiting', timeout, 'ms'); await wait(timeout); console.log('Retrying', err.message, i); } } } A lot more pleasing to the eye isn’t it? Intermediate values Not as hideous as the previous example, but if you have a case where 3 asynchronous functions depend on each other the following way, then you have to choose from several ugly solutions. functionA returns a Promise, then functionB needs that value and functionC needs the resolved value of both functionA‘s and functionB‘s Promise. Solution 1: The .then Christmas tree function executeAsyncTask () { return functionA() .then((valueA) => { return functionB(valueA) .then((valueB) => { return functionC(valueA, valueB) }) }) } With this solution, we get valueA from the surrounding closure of the 3rd then and valueB as the value the previous Promise resolves to. We cannot flatten out the Christmas tree as we would lose the closure and valueA would be unavailable for functionC. Solution 2: Moving to a higher scope function executeAsyncTask () { let valueA return functionA() .then((v) => { valueA = v return functionB(valueA) }) .then((valueB) => { return functionC(valueA, valueB) }) } In the Christmas tree, we used a higher scope to make valueA available as well. This case works similarly, but now we created the variable valueA outside the scope of the .then-s, so we can assign the value of the first resolved Promise to it. This one definitely works, flattens the .then chain and is semantically correct. However, it also opens up ways for new bugs in case the variable name valueA is used elsewhere in the function. We also need to use two names — valueA and v — for the same value. Are you looking for help with enterprise-grade Node.js Development? Hire the Node developers of RisingStack! Solution 3: The unnecessary array function executeAsyncTask () { return functionA() .then(valueA => { return Promise.all([valueA, functionB(valueA)]) }) .then(([valueA, valueB]) => { return functionC(valueA, valueB) }) } There is no other reason for valueA to be passed on in an array together with the Promise functionB then to be able to flatten the tree. They might be of completely different types, so there is a high probability of them not belonging to an array at all. Solution 4: Write a helper function const converge = (...promises) => (...args) => { let [head, ...tail] = promises if (tail.length) { return head(...args) .then((value) => converge(...tail)(...args.concat([value]))) } else { return head(...args) } } functionA(2) .then((valueA) => converge(functionB, functionC)(valueA)) You can, of course, write a helper function to hide away the context juggling, but it is quite difficult to read, and may not be straightforward to understand for those who are not well versed in functional magic. By using async/await our problems are magically gone: async function executeAsyncTask () { const valueA = await functionA(); const valueB = await functionB(valueA); return function3(valueA, valueB); } Multiple parallel requests with async/await This is similar to the previous one. In case you want to execute several asynchronous tasks at once and then use their values at different places, you can do it easily with async/await: async function executeParallelAsyncTasks () { const [ valueA, valueB, valueC ] = await Promise.all([ functionA(), functionB(), functionC() ]); doSomethingWith(valueA); doSomethingElseWith(valueB); doAnotherThingWith(valueC); } As we’ve seen in the previous example, we would either need to move these values into a higher scope or create a non-semantic array to pass these values on. Array iteration methods You can use map, filter and reduce with async functions, although they behave pretty unintuitively. Try guessing what the following scripts will print to the console: map function asyncThing (value) { return new Promise((resolve) => { setTimeout(() => resolve(value), 100); }); } async function main () { return [1,2,3,4].map(async (value) => { const v = await asyncThing(value); return v * 2; }); } main() .then(v => console.log(v)) .catch(err => console.error(err)); filter function asyncThing (value) { return new Promise((resolve) => { setTimeout(() => resolve(value), 100); }); } async function main () { return [1,2,3,4].filter(async (value) => { const v = await asyncThing(value); return v % 2 === 0; }); } main() .then(v => console.log(v)) .catch(err => console.error(err)); reduce function asyncThing (value) { return new Promise((resolve) => { setTimeout(() => resolve(value), 100); }); } async function main () { return [1,2,3,4].reduce(async (acc, value) => { return await acc + await asyncThing(value); }, Promise.resolve(0)); } main() .then(v => console.log(v)) .catch(err => console.error(err)); Solutions: [ Promise { <pending> }, Promise { <pending> }, Promise { <pending> }, Promise { <pending> } ] [ 1, 2, 3, 4 ] 10 If you log the returned values of the iteratee with map you will see the array we expect: [ 2, 4, 6, 8 ]. The only problem is that each value is wrapped in a Promise by the AsyncFunction. So if you want to get your values, you’ll need to unwrap them by passing the returned array to a Promise.all: main() .then(v => Promise.all(v)) .then(v => console.log(v)) .catch(err => console.error(err)); Originally, you would first wait for all your promises to resolve and then map over the values: function main () { return Promise.all([1,2,3,4].map((value) => asyncThing(value))); } main() .then(values => values.map((value) => value * 2)) .then(v => console.log(v)) .catch(err => console.error(err)); This seems a bit more simple, doesn’t it? The async/await version can still be useful if you have some long running synchronous logic in your iteratee and another long-running async task. This way you can start calculating as soon as you have the first value – you don’t have to wait for all the Promises to be resolved to run your computations. Even though the results will still be wrapped in Promises, those are resolved a lot faster then if you did it the sequential way. What about filter? Something is clearly wrong… Well, you guessed it: even though the returned values are [ false, true, false, true ], they will be wrapped in promises, which are truthy, so you’ll get back all the values from the original array. Unfortunately, all you can do to fix this is to resolve all the values and then filter them. Reducing is pretty straightforward. Bear in mind though that you need to wrap the initial value into Promise.resolve, as the returned accumulator will be wrapped as well and has to be await-ed. .. As it is pretty clearly intended to be used for imperative code styles. To make your .then chains more “pure” looking, you can use Ramda’s pipeP and composeP functions. Rewriting callback-based Node.js applications Async functions return a Promise by default, so you can rewrite any callback based function to use Promises, then await their resolution. You can use the util.promisify function in Node.js to turn callback-based functions to return a Promise-based ones. Rewriting Promise-based applications Simple .then chains can be upgraded in a pretty straightforward way, so you can move to using async/await right away. function asyncTask () { return functionA() .then((valueA) => functionB(valueA)) .then((valueB) => functionC(valueB)) .then((valueC) => functionD(valueC)) .catch((err) => logger.error(err)) } will turn into async function asyncTask () { try { const valueA = await functionA(); const valueB = await functionB(valueA); const valueC = await functionC(valueB); return await functionD(valueC); } catch (err) { logger.error(err); } } Rewriting Node.js apps with async await If you liked the good old concepts of if-else conditionals and for/while loops, if you believe that a try-catch block is the way errors are meant to be handled, you will have a great time rewriting your services using async/await. As we have seen, it can make several patterns a lot easier to code and read, so it is definitely more suitable in several cases than Promise.then() chains. However, if you are caught up in the functional programming craze of the past years, you might wanna pass on this language feature. Are you already using async/await in production, or you plan on never touching it? Let’s discuss it in the comments below. Are you looking for help with enterprise-grade Node.js Development? Hire the Node developers of RisingStack! * Node.js 23: Major Updates, Experimental Features, and Improved Performance * 23 is here, and it’s bringing some exciting changes and improvements to the runtime. With this release, Node.js 23 takes over as the ‘Current’ version, replacing Node.js 22, which is moving into Long-Term Support (LTS) later this month. What’s Read More » Node.js 22 and 22.1: Stable WebSocket and On-Disk Code Caching RisingStack Engineering Let’s explore the updates brought by Node.js 22, which promises enhancements in performance and development flexibility. Direct download links are available here. * in the latest release. Stable WebSocket Support: Node.js 22 Read More » * RisingStack Engineering * *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/mastering-async-await-in-nodejs/"
  },
  {
    "body": "* Menu * Contact us Where to Host Your AI: Comparing ML Model Deployment Services * *ngstack.com In this article: Janos Kubisch AI When it comes to hosting machine learning models, whether it is for private or public use, it’s not a simple task to find the right services for the job. Many articles online and responses from AI tools tend to include a wide range of tools, platforms and providers that have only one thing in common, being related to machine learning. In this post, we aim to help by providing a list of services that actually make hosting ML models possible, curated by hand. Modal Modal is an ML model hosting and training platform, that has direct code integration for runtime configuration, as well as a CLI tool for initiating deployments. The main features offered include cron jobs for task scheduling, log collection and retention, monitoring, webhook endpoints, secret management and support for custom built images and custom domains. Modal’s infrastructure also supports distributed queues, distributed dictionary learning, and CPU and GPU concurrency. Everything related to the runtime environment is configured in python, no separate containerisation technology necessary, although working knowledge of docker can be useful seeing how similar the actual configuration is to the structure of a Dockerfile. Having the environment configuration as part of the code can have downsides as well however, as it will have to be built at runtime resulting in potentially longer and more expensive runs. The image, once built is then stored by Modal, so it can be re-used without the need to rebuild. Modal offers three pricing tiers, from a free tier to team and enterprise subscriptions. The free and the team tiers include 30$ of compute credit a month. The team subscription is 100$ per month, and comes with 10 seats, with the possibility to pay for additional seats at 10$ per. Enterprise subscription details are individually determined, but all of them appear to have no limitation on seats. You can find the currently listed compute costs in the following table: Hardware type Cost CPU $0.192 / core / h Nvidia A100, 40 GB VRAM $3.73 / h Nvidia A100, 80 GB VRAM $5.59 / h Nvidia A10G $1.10 / h Nvidia L4 $1.05 / h Nvidia T4 $0.59 / h Memory $0.024 / GiB / h Paperspace Paperspace offers access to many GPU types and deployments configurable from their web UI requiring minimal setup. While it uses docker images, it can pull any public image by providing a url, and can also be set up to use custom images from private registries. Models can be pulled from S3 buckets or from Huggingface. When it comes to high availability, it is possible to create multiple replicas when setting up a deployment and further autoscaling can also be configured here. Aside from model deployments, it is also possible to create Jupyter notebooks, set up model training workflows and manage secrets on the web UI, but Paperspace has an open source CLI tool with full access to its features if you’d rather. As far as subscription goes, Paperspace offers four tiers of subscriptions with more powerful instance types becoming available as prices get higher, as well as private projects for all paid tiers. A free tier suitable for trying out the platform is available, with a project limit of 5, 5GB of free storage space and no concurrent job runs. Paid tiers start at 8$ for a single seat pro tier and 12$ for a team of 2, including a cap of 10 projects, 15GB of free storage and 3 concurrent jobs. At 39$ per seat, the growth tier has a cap of 5 seats, a project limit of 25, free storage of 50GB and 10 concurrent jobs. An enterprise tier is also available, with costs and limits up to an individual contract. While it is possible to go over the free storage limit, overages are billed at $0.29/GB. We summarised the current prices of compute instances available in the following table: Instance type Hardware Cost Available in free tier C4 CPU 2 CPU 4GB RAM $0.04 / h yes C5 CPU 4 CPU 8GB RAM $0.08 / h yes C7 CPU 12 CPU 30GB RAM $0.30 / h yes P4000 GPU 8 CPU 30GB RAM 8GB VRAM $0.51 / h yes RTX4000 GPU 8 CPU 30GB RAM 8GB VRAM $0.56 / h yes A4000 GPU 8 CPU 45GB RAM 16GB VRAM $0.76 / h yes P5000 GPU 8 CPU 30GB RAM 16GB VRAM $0.78 / h yes P6000 GPU 8 CPU 30GB RAM 24GB VRAM $1.10 / h yes A5000 GPU 8 CPU 45GB RAM 24GB VRAM $1.38 / h no A4000 GPU x2 16 CPU 90GB RAM 16GB VRAM $1.52 / h yes A6000 GPU 8 CPU 45GB RAM 48GB VRAM $1.89 / h yes v100 GPU 8 CPU 30GB RAM 16GB VRAM $2.30 / h no V100-32G GPU 8 CPU 30GB RAM 32GB VRAM $2.30 / h yes A5000 GPU x2 16 CPU 90GB RAM 24GB VRAM $2.76 / h yes A100 GPU 12 CPU 90GB RAM 40GB VRAM $3.09 / h no A100-80G GPU 12 CPU 90GB RAM 80GB VRAM $3.18 / h yes A6000 GPU x2 16 CPU 90GB RAM 48GB VRAM $3.78 / h yes V100-32G GPU x2 16 CPU 60GB RAM 32GB VRAM $4.60 / h no A100 GPU x2 24 CPU 180GB RAM 40GB VRAM $6.18 / h no A6000 GPU x4 32 CPU 180GB RAM 48GB VRAM $7.56 / h no V100-32G GPU x4 32 CPU 120GB RAM 32GB VRAM $9.20 / h no These prices are in addition to the monthly subscription, with free credit offered on a case-by-case basis. Self-managed Ray Ray is an open source framework encompassing many tools ranging from libraries to help with common machine learning tasks to distributed computing and parallelisation, from the deployment of ML models to training them and running workloads on them. Ray supports python when it comes to its developer tools, but the deployment and running of models should be usable pretty much anywhere, even locally on a laptop computer – although the computer used should still have a GPU if the model requires it. It is possible to host Ray on many cloud platforms, being an open source project, with official Ray cluster integrations available for AWS and GCP, and community maintained integrations for Azure, Aliyun and vSphere. Ray also offers configuration files for running it inside a kubernetes cluster via kuberay, enabling it to be hosted with any cloud provider that supports kubernetes. The cost of a self-managed Ray cluster mainly comes down to the pricing of the chosen cloud platform and the work required to set up and maintain the cluster and related infrastructure, but this option affords the most flexibility and customisability. Anyscale – managed Ray Anyscale offers a managed Ray solution on top of the biggest cloud providers, and is operated by the core team behind the development of Ray itself. Even though Ray supports Kubernetes and using Docker images, Anyscale uses plain vms but still provides logs and grafana for monitoring from their own UI. The UI also allows for the launch of workloads and configuration of additional environments through workspaces. Integrations are available for vscode and jupyter notebook to allow developers to launch workloads right from their development tools. Unfortunately, Anyscale has not published any pricing information for their managed Ray offering, you’d need to contact sales to get a quote. Additional costs with the chosen cloud platform provider should also be considered – AWS and GCP are supported while Azure at the moment is not. Amazon SageMaker SageMaker allows for building, training, and deployment of machine learning models using Amazon’s existing infrastructure and some new ML tools. Among many others, it features an IDE, SageMaker Studio for development and deployment and a model management tool called SageMaker MLOps. SageMaker Serverless Inference is a serverless option for serving models that doesn’t require choosing an instance type. Amazon claims that “SageMaker offers at least 54% lower total cost of ownership (TCO) over a three-year period compared to other cloud-based self-managed solutions”. To help with figuring out costs, there is table detailing the prices of available instance types included on the official page here. SageMaker Serverless Inference prices are based on the duration of the inference and the amount of data that has been processed. HuggingFace Inference Endpoints HuggingFace is the biggest ml model and dataset repository out there, and they also offer their own production ready hosting solution in the form of serverless endpoints. Although it does not seem to affect pricing, you can choose which cloud provider to use for your endpoint, AWS, GCP or Azure, each with multiple possible regions. Further configuration allows for defining minimum and maximum replicas to control autoscaling, with the possible minimum value of 0 meaning that the endpoint will be able to scale down completely when not in use. This has the potential to save quite an amount of money, at the cost of increased waiting time when calling the scaled down endpoint, as it has to spin up an instance before beginning to process the request. It is also possible to configure ssl for your endpoint, or make it entirely private if you choose to. Before you deploy your model, HuggingFace gives you an estimated monthly cost based on chosen hardware, assuming that the endpoint will be up for the whole month, but excluding any scaling. This can be quite handy to have an idea about just the baseline cost of having a model deployed. Once finished with the configuration, you get a url where yoy can access the model, as well as an inference widget that allows you to test the endpoint. Pricing is tied to instance types, and while there are different paid services offered by HuggingFace, Inference Endpoints is the one to look out for when considering model hosting. Available GPU instances on aws: GPU Memory Price NVIDIA T4 14GB $0.60 / h NVIDIA A10G 24GB $1.30 / h NVIDIA T4 x4 56GB $4.50 / h NVIDIA A100 80GB $6.50 / h NVIDIA A10G x4 96GB $7.00 / h NVIDIA A100 x2 160GB $13.00 / h NVIDIA A100 x4 320GB $26.00 / h NVIDIA A100 x8 640GB $45.00 / h CPU instances are available both on aws and azure, with the same hourly rates: vCPU Memory Price 1 Intel Xeon core 2GB $0.06 / h 2 Intel Xeon cores 4GB $0.12 / h 4 Intel Xeon cores 8GB $0.24 / h 8 Intel Xeon cores 16GB $0.48 / h Compared Modal Ray Anyscale SageMaker Paperspace HuggingFace Open-source no yes no no no no Can be used locally no yes no no no no Vendor lock-in Modal no AWS or GCP AWS Paperspace / DigitalOcean AWS, GCP or Azure Containers from Python yes yes yes / from UI yes / from UI yes / from UI Zero-ops from Python no mostly UI mostly UI mostly UI mostly UI Pricing transparent cloud provider dependent not disclosed transparent but complicated transparent transparent Easy to start if you know Docker yes no no yes yes Free tier available with 30$ credit hosting dependent, can also be run locally possible, contact sales possible, contact sales available, free credit offered in confirmation email only hub is free All in all, Modal could be a pretty good place to start, with a little image building to get comfortable with, but all of that is done in python, and it has clear pricing that is easy to calculate. Ray is open source and is the most flexible choice, but will likely require dedicated engineers to set up and maintain. Anyscale could be a great and simple managed solution for Ray, but with no public pricing, it really depends on what kind of deal you get. As for SageMaker, while it has pricing information, it is as complicated as it gets with AWS to actually figure out how much you’ll end up paying for it. It has a whole ecosystem of tools for everything you might need in one place accessible from a web UI, with the possibility to connect any other AWS service on top – knowing AWS you’ll probably have to use a bunch of their other services eventually. Paperspace’s 2023 acquisition sounds like a good opportunity for DigitalOcean to expand into the AI platform market, with an easy to start but still fairly customisable offering. The current prices on their instances seem better than the competitors, with the subscription fees generally being higher. Then, there is also HuggingFace, the de-facto model repository, offering the most commonly used GPUs for model hosting at competitive prices and simple configuration that can be done from their UI as well. * Practical Tutorial to * on Google Colab Janos Kubisch We will take a look at how to set up a RAG – * – demo with the Anthropic Claude 3 Sonet model, using google’s CoLab platform. CoLab offers free instances with T4 GPUs sometimes, but we’ll only Read More » ChatGPT use case examples for programming Ferenc Hámori Learn how we use GPT-based products as tools in a professional webdev setting. Read More » Mammogram Analysis with AI and User-Friendly Interfaces Janos Kubisch See how RisingStack and Semmelweis University created an image recognition system using deep convolutional neural networks and a user-friendly interface for healthcare workers fighting against breast cancer. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/ml-model-deployment-services-compared/"
  },
  {
    "body": "* Menu * Contact us Node.js Async Best Practices & Avoiding the Callback Hell * *ngstack.com In this article: tamas-hodi Node.js In this post, we cover what tools and techniques you have at your disposal when handling Node.jsNode.js is an asynchronous event-driven JavaScript runtime and is the most effective when building scalable network applications. Node.js is free of locks, so there's no chance to dead-lock any process. asynchronous operations: asyncAsynchrony, in software programming, refers to events that occur outside of the primary program flow and methods for dealing with them. External events such as signals or activities prompted by a program that occur at the same time as program execution without causing the program to block and wait for results are examples of this category. Asynchronous input/output is an....js, promises, and async functions. After reading this article, you’ll know how to use the latest async tools at your disposal provided by Node.js! Node.js at Scale is a collection of articles focusing on the needs of companies with bigger Node.js installations and advanced Node developers. Chapters: See all chapters of Node.js at Scale: Using npmnpm is a software registry that serves over 1.3 million packages. npm is used by open source developers from all around the world to share and borrow code, as well as many businesses. There are three components to npm: the website the Command Line Interface (CLI) the registry Use the website to discover and download packages, create user profiles, and... npm Tricks and Best Practices SemVer and Module Publishing Understanding the Module System, CommonJS and require Node.js Internals Deep Dive The Node.js Event Loop Node.js Garbage Collection Explained Writing Native Node.js Modules Building with Node.js Advanced Node.js Project Structuring JavaScript Clean Coding Best Practices Node.js Async Best Practices [ this article ] Event sourcing with Examples CQRS (Command Query Responsibility Segregation) Explained Testing + Node Node.js Testing and Getting TDD Right Node.js End-to-End Testing with Nightwatch.js Node.js in Production The Definitive Guide for Monitoring Node.js Applications How to Debug Node.js with the Best Tools Available Node.js Post-Mortem Diagnostics & Debugging Node.js + MicroservicesMicroservices are not a tool, rather a way of thinking when building software applications. Let's begin the explanation with the opposite: if you develop a single, self-contained application and keep improving it as a whole, it's usually called a monolith. Over time, it's more and more difficult to maintain and update it without breaking anything, so the development cycle may... Distributed Tracing API Gateways Asynchronous programming in Node.js Previously we have gathered a strong knowledge about asynchronous programming in JavaScript and understood how the Node.js event loop works. If you have not read these articles, I highly recommend them as introductions! The Problem with Node.js Async Node.js itself is single-threaded, but some tasks can run in parallel thanks to its asynchronous nature. But what does running in parallel mean in practice? Since we program a single-threaded VM, it is essential that we do not block execution by waiting for I/O, but handle operations concurrently with the help of Node.js’s event-driven APIs. Let’s take a look at some fundamental patterns, and learn how we can write resource-efficient, non-blocking code, with the built-in solutions of Node.js. The Classical Approach – Callbacks Let’s take a look at these simple async operations. They do nothing special, just fire a timer and call a function once the timer finished. function fastFunction (done) { setTimeout(function () { done() }, 100) } function slowFunction (done) { setTimeout(function () { done() }, 300) } Seems easy, right? Our higher-order functions can be executed sequentially or in parallel with the basic “pattern” by nesting callbacks – but using this method can lead to an untameable callback-hell. function runSequentially (callback) { fastFunction((err, data) => { if (err) return callback(err) console.log(data) // results of a slowFunction((err, data) => { if (err) return callback(err) console.log(data) // results of b // here you can continue running more tasks }) }) } Never use the nested callback approach for handling asynchronous Node,js operations! Avoiding Callback Hell with Control Flow Managers To become an efficient Node.js developer, you have to avoid the constantly growing indentation level, produce clean and readable code and be able to handle complex flows. Let me show you some of the tools we can use to organize our code in a nice and maintainable way! #1: Using Promises There have been native promises in javascript since 2014, receiving an important boost in performance in Node.js 8. We will make use of them in our functions to make them non-blocking – without the traditional callbacks. The following example will call the modified version of both our previous functions in such a manner: function fastFunction () { return new Promise((resolve, reject) => { setTimeout(function () { console.log('Fast function done') resolve() }, 100) }) } function slowFunction () { return new Promise((resolve, reject) => { setTimeout(function () { console.log('Slow function done') resolve() }, 300) }) } function asyncRunner () { return Promise.all([slowFunction(), fastFunction()]) } Please note that Promise.all will fail as soon as any of the promises inside it fails. The previous functions have been modified slightly to return promises. Our new function, asyncRunner, will also return a promise, that will resolve when all the contained functions resolve, and this also means that wherever we call our asyncRunner, we’ll be able to use the .then and .catch methods to deal with the possible outcomes: asyncRunner() .then(([ slowResult, fastResult ]) => { console.log('All operations resolved successfully') }) .catch((error) => { console.error('There has been an error:', error) }) Since node@12.9.0, there is a method called promise.allSettled, that we can use to get the result of all the passed in promises regardless of rejections. Much like Promise.all, this function expects an array of promises, and returns an array of objects that has a status of “fulfilled” or “rejected”, and either the resolved value or the error that occurred. function failingFunction() { return new Promise((resolve, reject) => { reject(new Error('This operation will surely fail!')) }) } function asyncMixedRunner () { return Promise.allSettled([slowFunction(), failingFunction()]) } asyncMixedRunner() .then(([slowResult, failedResult]) => { console.log(slowResult, failedResult) }) In previous node versions, where .allSettled is not available, we can implement our own version in just a few lines: function homebrewAllSettled(promises) { return Promise.all(promises.map((promise) => { return promise .then((value) => { return { status: 'fulfilled', value } }) .catch((error) => { return { status: 'rejected', error } }) })) } Serial task execution To make sure your tasks run in a specific order – maybe successive functions need the return value of previous ones, or depend on the run of previous functions less directly – which is basically the same as _.flow for functions that return a Promise. As long as it’s missing from everyone’s favorite utility library, you can easily create a chain from an array of your async functions: function serial(asyncFunctions) { return asyncFunctions.reduce(function(functionChain, nextFunction) { return functionChain.then( (previousResult) => nextFunction(previousResult) ); }, Promise.resolve()); } serial([parameterValidation, dbQuery, serviceCall ]) .then((result) => console.log(`Operation result: ${result}`)) .catch((error) => console.log(`There has been an error: ${error}`)) In case of a failure, this will skip all the remaining promises, and go straight to the error handling branch. You can tweak it some more in case you need the result of all of the promises regardless if they resolved or rejected. function serial(asyncFunctions) { return asyncFunctions.map(function(functionChain, nextFunction) { return functionChain .then((previousResult) => nextFunction(previousResult)) .then(result => ({ status: 'fulfilled', result })) .catch(error => ({ status: 'rejected', error })); }, Promise.resolve()); } Converting callback functions to promises Node also provides a handy utility function called “promisify”, that you can use to convert any old function expecting a callback that you just have to use into one that returns a promise. All you need to do is import it in your project: const promisify = require('util').promisify; function slowCallbackFunction (done) { setTimeout(function () { done() }, 300) } const slowPromise = promisify(slowCallbackFunction); slowPromise() .then(() => { console.log('Slow function resolved') }) .catch((error) => { console.error('There has been an error:', error) }) It’s actually not that hard to implement a promisify function of our own, to learn more about how it works. We can even handle additional arguments that our wrapped functions might need! function homebrewPromisify(originalFunction, originalArgs = []) { return new Promise((resolve, reject) => { originalFunction(...originalArgs, (error, result) => { if (error) return reject(error) return resolve(result) }) }) } We just wrap the original callback-based function in a promise, and then reject or resolve based on the result of the operation. Easy as that! For better support of callback based code – legacy code, ~50% of the npm modules – Node also includes a callbackify function, essentially the opposite of promisify, which takes an async function that returns a promise, and returns a function that expects a callback as its single argument. const callbackify = require('util').callbackify const callbackSlow = callbackify(slowFunction) callbackSlow((error, result) => { if (error) return console.log('Callback function received an error') return console.log('Callback resolved without errors') }) #2: Meet Async – aka how to write async code in 2020 We can use another javascript feature since node@7.6 to achieve the same thing: the async and awaitIn an async function, you can await any Promise or catch its rejection cause. In ECMAScript 2017, the async and await keywords were introduced. These features make writing asynchronous code easier and more readable in the long run. They aid in the transition from asynchronicity to synchronism by making it appear more like classic synchronous code, so they're well worth learning. keywords. They allow you to structure your code in a way that is almost synchronous looking, saving us the .then chaining as well as callbacks: const promisify = require('util').promisify; async function asyncRunner () { try { const slowResult = await promisify(slowFunction)() const fastResult = await promisify(fastFunction)() console.log('all done') return [ slowResult, fastResult ] } catch (error) { console.error(error) } } This is the same async runner we’ve created before, but it does not require us to wrap our code in .then calls to gain access to the results. For handling errors, we have the option to use try & catch blocks, as presented above, or use the same .catch calls that we’ve seen previously with promises. This is possible because async-await is an abstraction on top of promises – async functions always return a promise, even if you don’t explicitly declare them to do so. The await keyword can only be used inside functions that have the async tag. This also means that we cannot currently utilize it in the global scope. Since Node 10, we also have access to the promise.finally method, which allows us to run code regardless of whether the promise resolve or rejected. It can be used to run tasks that we had to call in both the .then and .catch paths previously, saving us some code duplication. Using all of this in Practice As we have just learned several tools and tricks to handle async, it is time to do some practice with fundamental control flows to make our code more efficient and clean. Let’s take an example and write a route handler for our web app, where the request can be resolved after 3 steps: validateParams, dbQuery and serviceCall. If you’d like to write them without any helper, you’d most probably end up with something like this. Not so nice, right? // validateParams, dbQuery, serviceCall are higher-order functions // DONT function handler (done) { validateParams((err) => { if (err) return done(err) dbQuery((err, dbResults) => { if (err) return done(err) serviceCall((err, serviceResults) => { done(err, { dbResults, serviceResults }) }) }) }) } Instead of the callback-hell, we can use promises to refactor our code, as we have already learned: // validateParams, dbQuery, serviceCall are higher-order functions function handler () { return validateParams() .then(dbQuery) .then(serviceCall) .then((result) => { console.log(result) return result }) .catch(console.log.bind(console)) } Let’s take it a step further! Rewrite it to use the async and await keywords: // validateParams, dbQuery, serviceCall are thunks async function handler () { try { await validateParams() const dbResults = await dbQuery() const serviceResults = await serviceCall() return { dbResults, serviceResults } } catch (error) { console.log(error) } } It feels like a “synchronous” code but still doing async operations one after each other. Essentially, a new callback is injected into the functions, and this is how async knows when a function is finished. Takeaway rules for Node.js & Async Fortunately, Node.js eliminates the complexities of writing thread-safe code. You just have to stick to these rules to keep things smooth: As a rule of thumb, prefer async, because using a non-blocking approach gives superior performance over the synchronous scenario, and the async – await keywords gives you more flexibility in structuring your code. Luckily, most libraries now have promise based APIs, so compatibility is rarely an issue, and can be solved with util.promisify should the need arise. If you have any questions or suggestions for the article, please let me know in the comments! In case you’re looking for help with Node.js consulting or development, feel free to reach out to us! Our team of experienced engineers is ready to speed up your development process, or educate your team on JavaScript, Node, React, Microservices and Kubernetes. In the next part of the Node.js at Scale series, we take a look at Event Sourcing with Examples. This article was originally written by Tamas Hodi, and was released on 2017, January 17. The revised second edition was authored by Janos Kubisch and Tamas Hodi and it was released on 2020 February 10. * Node.js 23: Major Updates, Experimental Features, and Improved Performance * 23 is here, and it’s bringing some exciting changes and improvements to the runtime. With this release, Node.js 23 takes over as the ‘Current’ version, replacing Node.js 22, which is moving into Long-Term Support (LTS) later this month. What’s Read More » Node.js 22 and 22.1: Stable WebSocket and On-Disk Code Caching RisingStack Engineering Let’s explore the updates brought by Node.js 22, which promises enhancements in performance and development flexibility. Direct download links are available here. * in the latest release. Stable WebSocket Support: Node.js 22 Read More » * RisingStack Engineering * *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/node-js-async-best-practices-avoiding-callback-hell-node-js-at-scale/"
  },
  {
    "body": "* Menu * Contact us Node.js 21 is here with Websocket * ** Node.js The latest major version of Node.js has just released with a few new interesting experimental features and a lot of fixes and optimization. You can find our highlights from the release notes. Built-in WebSocket client A browser-compatible WebSocket implementation has been added to Node.js with this new release as an experimental feature. You can give it a go using the --experimental-websocket flag. The current implementation allows for opening and closing of websocket connections and sending data. There are four events available for use: open, close, message and error – so the basics are covered. It’s pretty exciting to see an out-of-the-box websocket implementation coming to Node, it could spare us the inclusion of yet another library in projects that need bidirectional communication. Be sure to give it a go and give your feedback to the developers! A flush option for the writeFile type filesystem functions Up until now, it was possible for data to not be flushed immediately to permanent storage when a write operation completed successfully, allowing read operations to get stale data. In response, a flush option has been added to the fs module file writing functions that, when enabled, forces data to be flushed at the end of a successful write operation using sync. This feature is not enabled by default, so make sure to include { flush: true } in the options if you’d like to use it. Here is the list of functions the flush option has been added to: filehandle.createWriteStream fsPromises.writeFile fs.createWriteStream fs.writeFile fs.writeFileSync Addition of a global navigator Object This new release also introduces a global navigator object to take steps towards enhancing web interoperability. We can now access hardware concurrency information through navigator.hardwareConcurrency, the only currently implemented method on the object. While this might not seem like a huge change for now, we can assume more and more functionality will be implemented with time, until we have the whole suit of information window.navigator provides in browser environments. This would spare us having to decide between using process and navigator in our code that is to be ran in both a browser and in Node.js. Array grouping There is a new static method added to Object and Map, groupBy(), that groups the items of a given iterable according to a provided callback function. The object returned contains a property for each group, whose value is an array with the items that belong to the group. In case of Object, the keys of the returned object will be strings, while the version on Map can have any kind of key. Additional changes Both the fetch and the webstreams modules are now marked as stable after receiving a few changes with this version. A host of performance improvements as usual with any new release. WebAssembly gets extended const expressions Another new experimental flag, --experimental-default-type, has been added that allows setting the default module type to ESM The globalPreload hook has been removed, it’s functionality replaced by register and initialize Glob patterns are now supported in the test runner Don’t forget that Node.js 16 is at its end of life, so if you’re still using this version, you should plan to upgrade soon to one of the newer LTS versions as soon as possible! The currently active LTS releases are 18 and 20, with version 22 – that is also an LTS version – scheduled to release in April 2024. You can find more information about the release schedule here. * Node.js 23: Major Updates, Experimental Features, and Improved Performance * 23 is here, and it’s bringing some exciting changes and improvements to the runtime. With this release, Node.js 23 takes over as the ‘Current’ version, replacing Node.js 22, which is moving into Long-Term Support (LTS) later this month. What’s Read More » Node.js 22 and 22.1: Stable WebSocket and On-Disk Code Caching RisingStack Engineering Let’s explore the updates brought by Node.js 22, which promises enhancements in performance and development flexibility. Direct download links are available here. * in the latest release. Stable WebSocket Support: Node.js 22 Read More » * RisingStack Engineering * *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/nodejs-21/"
  },
  {
    "body": "* Menu * Contact us Node.js 22 and 22.1: Stable WebSocket and On-Disk Code Caching * ** Node.js Let’s explore the updates brought by Node.js 22, which promises enhancements in performance and development flexibility. Direct download links are available here. * in the latest release. Stable WebSocket Support: Node.js 22 now offers stable WebSocket support, which was previously experimental. This means we can use the built-in WebSocket client without depending on external libraries. This upgrade is significant for developers looking to establish real-time, bidirectional communication between clients and servers without incorporating third-party dependencies. Improved File Management with glob Functions: Node.js 22 introduces new glob and globSync functions in the node:fs module, enhancing file management capabilities. These functions allow us to perform pattern matching for file paths, making it easier to locate and manipulate files based on specific criteria. By supporting pattern matching, we can efficiently handle file operations such as reading, writing, and deleting files that meet specific patterns or criteria. This improvement simplifies file management tasks and boosts the overall efficiency of Node.js applications. V8 Engine Update to 12.4 Node.js 22 integrates V8 version 12.4, which introduces several cutting-edge features, including WebAssembly Garbage Collection and `Array.fromAsync`. This update also brings new Set methods and iterator helpers, expanding the toolkit for developers working with advanced data structures and asynchronous processes. Maglev Compiler A significant performance booster, the V8 Maglev Compiler, is now enabled by default on supported architectures. This is beneficial for short-lived CLI programs, making them run faster and more efficiently, demonstrating Node.js’s commitment to improving runtime performance. Enhanced Module Support This version marks a step towards seamless ECMAScript module (ESM) integration. With the `–experimental-require-module` flag, Node.js 22 allows the `require()` function to load ESM graphs synchronously. This means modules marked explicitly as ES with a `”type”: “module”` designation or `.mjs` extension not containing top-level await can now be loaded synchronously, bridging the gap between CommonJS and ESM formats. Script Execution from `package.json` Expanding its utility, Node.js 22 includes a new experimental feature that allows for the direct execution of scripts specified in `package.json` using the command line flag `node –run <script-in-package-json>`. This addition streamlines workflows by enabling script execution directly from the command line. Stream Performance Improvements To boost overall performance, the default High Water Mark for streams has been increased from 16KiB to 64KiB. This adjustment means a faster data handling capability at the cost of a slight increase in memory usage, but it can be customized for memory-sensitive environments. What’s New in Node.js 22.1.0? Node.js 22.1 introduces the `NODE_COMPILE_CACHE` feature, an enhancement to performance through on-disk code caching. By setting the `NODE_COMPILE_CACHE` environment variable to a directory path, Node.js automatically caches the compiled CommonJS and ECMAScript Module code on disk. The use of this feature can result in a slightly slower initial module loading but significantly speeds up subsequent loads if module content remains unchanged, exemplified by reducing the loading time of specific test fixtures from approximately 130ms to 80ms. We can easily manage this cache by deleting the designated directory, which will be recreated upon future cache use. This functionality ensures compatibility across different Node.js versions by segregating caches by version in the same directory. However, it’s worth noting that using the code cache may impact the precision of JavaScript code coverage collected by V8, especially in functions deserialized from the cache. Disabling this feature during precise coverage testing is advised. This update builds upon the performance and functional advancements introduced in Node.js 22, further solidifying its utility in development environments. Node.js continues to evolve, and with Node.js 22, it takes another leap forward in performance and functionality. As always, testing your applications with the new release is crucial for ensuring compatibility and taking full advantage of the new features. Remember, Node.js 18 will reach its End-of-Life in April 2025, so we advise you to plan your upgrade to Node.js 20 or the upcoming LTS version of Node.js 22. * Node.js 23: Major Updates, Experimental Features, and Improved Performance * 23 is here, and it’s bringing some exciting changes and improvements to the runtime. With this release, Node.js 23 takes over as the ‘Current’ version, replacing Node.js 22, which is moving into Long-Term Support (LTS) later this month. What’s Read More » * RisingStack Engineering * Read More » Node.js 21 is here with Websocket RisingStack Engineering The latest major version of Node.js has just released with a few new interesting experimental features and a lot of fixes and optimization. You can find our highlights from the release notes. Built-in WebSocket client A browser-compatible WebSocket implementation has *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/nodejs-22/"
  },
  {
    "body": "* Menu * Contact us Node.js 23: Major Updates, Experimental Features, and Improved Performance Last updated: October 22, 2024 Search Search Popular ** Node.js Node.js 23 is here, and it’s bringing some exciting changes and improvements to the runtime. With this release, Node.js 23 takes over as the ‘Current’ version, replacing Node.js 22, which is moving into Long-Term Support (LTS) later this month. What’s New in Node.js 23 Default ESM in require() One of the biggest updates in Node.js 23 is the ability to use require() for native ES modules by default. In the past, you’d need to use the --experimental-require-module flag, but now it’s baked right in. This makes working with ES modules more straightforward, eliminating extra steps. Keep in mind that this feature is still experimental. If you run into trouble, you can always disable it with the --no-experimental-require-module flag. Want to check if require(esm) is enabled? Just use process.features.require_module. This change is meant to help bridge the gap between CommonJS and ES modules, so you can work across both seamlessly. Package authors can also use the “module-sync” exports condition to ensure compatibility between require() and import. Dropping Windows 32-bit Support With Node.js 23, support for 32-bit Windows systems is officially gone. This change helps the team focus on modern, widely-used platforms and simplify ongoing development. If you’re still using a 32-bit system, you’ll need to stay on an older version of Node.js or upgrade your environment to continue receiving updates. Stable node --run Command The node --run command is now stable, allowing you to run JavaScript directly from the command line. This is great for quick scripts or testing out small bits of code. For example, you can quickly try something like node --run 'console.log(\"Hello, Node.js 23!\")'. Making this feature stable adds more flexibility for everyday tasks and developer experiments. Enhanced Test Runner The built-in test runner got some nice updates in Node.js 23. You can now use glob patterns when specifying coverage files, making it easier to include or exclude specific files. This is especially helpful if you’re working on larger projects with multiple test suites—no more manual listing of every file. Experimental TypeScript Support If you’re a TypeScript developer, Node.js 23 has something new for you: the --experimental-strip-types and --experimental-transform-types options. These experimental flags let you run TypeScript directly in Node.js, cutting down the steps needed to work with your TypeScript code. It’s still early, but if you’re experimenting with TypeScript, these options could make your life a lot easier. Experimental Web Storage API Another cool addition is the experimental implementation of localStorage and sessionStorage APIs. These are familiar tools for web developers, and now they’re available in Node.js too. This makes it easier to use the same storage approach across your client and server environments, bringing more consistency to your projects. Experimental SQLite Integration Node.js 23 also introduces an experimental API for working with SQLite. This is perfect for developers who need a simple, lightweight database solution without the overhead of a full-scale database. It’s especially handy for small projects, prototyping, or applications where SQLite just makes sense. Performance Boosts Performance-wise, Node.js 23 has some great improvements. On-disk code caching is now available, which helps reduce startup times. You’ll also notice improvements in buffer and file system performance, which makes many common operations a bit faster and the runtime overall more efficient. Summary Node.js 23 is full of updates that make the developer experience better, including default support for ES modules with require(), new experimental tools like TypeScript support, Web Storage API, and SQLite integration, along with stability improvements like the node --run command. These changes simplify workflows and make Node.js more powerful and versatile. The Node.js team encourages everyone to test these new capabilities and provide feedback, especially for experimental features, so they can keep refining them. * Node.js 22 and 22.1: Stable WebSocket and On-Disk Code Caching RisingStack Engineering Let’s explore the updates brought by Node.js 22, which promises enhancements in performance and development flexibility. Direct download links are available here. * in the latest release. Stable WebSocket Support: Node.js 22 Read More » * RisingStack Engineering * Read More » Node.js 21 is here with Websocket RisingStack Engineering The latest major version of Node.js has just released with a few new interesting experimental features and a lot of fixes and optimization. You can find our highlights from the release notes. Built-in WebSocket client A browser-compatible WebSocket implementation has *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/nodejs-23/"
  },
  {
    "body": "* Menu * Contact us Nuxt 3 Caching with Authentication * *ngstack.com In this article: Olga Troyan JavaScript We had a project where we aimed to optimize page load times while preserving SEO benefits. One of the techniques we employed was enabling ISR (Incremental Static Regeneration), which caches the page’s HTML response on the CDN network until the TTL (Time to Live) expires. However, we also encountered challenges with parts of the pages that were user-specific, such as profile data and the number of items. These components couldn’t be cached, as doing so might result in one user seeing another user’s items. Addressing this issue is the focus of our article. Project setup Pages The project has 5 pages with different rendering modes enabled: SSR ISR without TTL ISR with TTL SWR without TTL SWR with TTL To learn more about rendering modes in Nuxt 3, check out our blogpost here. Example page code: <template> <div> <p>{{ pageType }} page</p> <pre>Time after hydration: {{ new Date().toUTCString() }} </pre> <pre>Time in server rendered HTML: {{ data }}</pre> <NuxtLink to=\"/\">Home</NuxtLink> </div> </template> <script setup lang=\"ts\"> const pageType = \"SSR\"; // value differs based on route const { data } = await useFetch('/api/hello') </script> Rendering modes Rendering modes are set up in nuxt.config: *({ ssr: true, routeRules: { \"/isr_ttl\": { isr: 60 }, \"/isr_no_ttl\": { isr: true }, \"/swr_ttl\": { swr: 60 }, \"/swr_no_ttl\": { swr: true }, }, }); Database For the purpose of this showcase we use Vercel KV for a simple db-like functionality. Note Originally, we intended to use a simple object to mimic database functionality as shown in the following code snippet: dbFake.ts: export const users = [ { id: 1, loggedIn: false, }, ]; However, this approach only works in local development and is not suitable for deployment on platforms like Vercel or Netlify, where serverless/edge functions are employed. In such environments, the server does not run continuously. Instead, a lambda function is started and then stopped whenever there is an API request. Consequently, an object on the server side cannot preserve its state. Server routes The server has 4 routes: api/hello Route simply returns a current date: export default defineEventHandler((event) => { return new Date().toUTCString(); }); api/auth This route returns the loggedIn status of the first user: import { kv } from '@vercel/kv'; export default defineEventHandler(async (event) => { const loggedIn = await kv.hget(\"user1\", \"loggedIn\"); return { loggedIn }; }); api/login This route updates the loggedIn status to true and returns this value: import { kv } from \"@vercel/kv\"; export default defineEventHandler(async (event) => { await kv.hset(\"user1\", { loggedIn: true }); const loggedIn = await kv.hget(\"user1\", \"loggedIn\"); return { loggedIn }; }); api/logout Route updates the loggedIn status to false and returns this value: import { kv } from \"@vercel/kv\"; export default defineEventHandler(async (event) => { await kv.hset(\"user1\", { loggedIn: false }); const loggedIn = await kv.hget(\"user1\", \"loggedIn\"); return { loggedIn }; }); Layout We have a single layout that uses one header component: header.vue: <template> <button v-if=\"loggedIn\" @click=\"logout\">Logout</button> <button v-else @click=\"login\">Login</button> </template> <script setup lang=\"ts\"> const loggedIn: Ref<boolean | undefined> = ref(false); const { data } = await useFetch('/api/auth'); loggedIn.value = data?.value?.loggedIn; const login = async () => { const response = await useFetch( \"/api/login\", { method: \"PUT\", } ); loggedIn.value = response.data?.value?.loggedIn; } const logout = async () => { const response = await useFetch( \"/api/logout\", { method: \"PUT\", } ); loggedIn.value = response.data?.value?.loggedIn; } </script> This component simply renders a ‘Login’ button if the user isn’t logged in and a ‘Logout’ button if the user is logged in. It includes click event handlers for each button, which call their respective API routes. Layout: <template> <Header /> <main class=\"main\"> <slot /> </main> </template> Startup Start the example project with: git clone git@github.com:RisingStack/nuxt3-caching-with-auth.git cd nuxt3-caching-with-auth pnpm install Create env file based on .env.example and start the app: pnpm dev User-specific data caching If we examine our pages that should be cached with the current setup, we can observe that after logging in, upon page reload, the ‘Login’ button is still visible. SWR without TTL The button label only updates when the response changes. SWR with TTL The button label only updates when the TTL expires. ISR without TTL The button label isn’t updated as ISR without TTL means the page is cached permanently. ISR with TTL The button label only updates when the TTL expires. SSR When examining the SSR page, it functions as expected: upon the initial page load, the ‘Login’ button is visible. After logging in and reloading the page, the ‘Logout’ button is displayed. What is causing this? The issue stems from both the SWR and ISR rendering modes caching the server-generated HTML response for the page. This implies that despite changes in the value provided by the API response, stale data persists in the browser until the TTL expires or the response changes, depending on the rendering mode. Solution To prevent caching of specific parts of the layout, page, or component, we can wrap them in the ClientOnly component provided by Nuxt. This ensures that the particular slot is rendered only on the client side. Let’s modify the default layout: <template> <Client-Only> <Header /> </Client-Only> <main class=\"main\"> <slot /> </main> </template> In addition, we need to modify the header component as useFetch used client-side does not fetch the data until hydration completes (docs): header.vue: [...] <script setup lang=\"ts\"> const loggedIn: Ref<boolean | undefined> = ref(false); const { data } = await useFetch('/api/auth'); watch(() => data?.value?.loggedIn, () => { if (data.value) { loggedIn.value = data.value?.loggedIn } }) [...] </script> This way, we are watching for changes in the response and are updating values of the loggedIn variable when they become available. Upon checking the behavior now, it works as expected: any page reload after updating the user’s logged-in status will render the correct values. SWR without TTL The button label is up to date after a reload. The ‘Time in server-rendered HTML’ only updates when the response changes. SWR with TTL The button label is up to date after a reload. The ‘Time in server-rendered HTML’ only updates when the TTL expires. ISR without TTL The button label is up to date after a reload. However, the ‘Time in server-rendered HTML’ isn’t updated, as ISR without TTL means the page is cached permanently. ISR with TTL The button label is up to date after a reload. However, the ‘Time in server-rendered HTML’ only updates when TTL expires. Deploying the App to Vercel After importing the project to Vercel and configuring the Vercel KV storage, deployment becomes a matter of a single click (refer to the deployment information for more details). It’s crucial to note that the SWR rendering mode only works with edge functions, while ISR functions exclusively with serverless functions. This distinction is not clearly documented — Vercel’s documentation typically encourages the use of ISR only, without acknowledging that it doesn’t support revalidation based on response changes. Consequently, we’ve raised a service ticket for this issue and are in communication with the Vercel team. To enable edge functions, set the environment variable NITRO_PRESET=vercel-edge. Serverless functions are the default for deploying Nuxt projects to Vercel, so no additional configuration is required. Deploying the App to Netlify Initially, we also planned to use Netlify for this app. However, we soon discovered that the rendering modes in Nuxt 3, which provide caching, weren’t functioning correctly on Netlify. Regardless of the configuration we employed, some rendering modes didn’t work as expected (for more details, refer to the forum topic we opened on this issue). Following discussions with the Netlify team, they redirected us back to Nuxt for resolution. As a result, we’ve opened an issue on the Nuxt GitHub repository to address this matter. Conclusion Opting for a rendering mode that facilitates caching is a great strategy to achieve faster load times and reduce server costs. This approach remains effective even when dealing with data on the page that requires regular updates or is user-specific. To address such scenarios, consider encapsulating the relevant components within the <ClientOnly> component provided by Nuxt. For seamless one-click deployments, Vercel is a preferable choice, especially at the moment. This is due to the current issue where rendering modes supporting caching do not function correctly on Netlify. As the landscape evolves, it’s advisable to stay updated on platform-specific capabilities and limitations for the optimal deployment of your Nuxt app. * Comparing Nuxt 3 Rendering Modes: SWR, ISR, SSR, SSG, SPA Olga Troyan Update: to enhance the clarity of the Nuxt 3 documentation, we have opened a pull request (PR) that has already been merged. Now, the functionality of ISR/SWR rendering modes is better explained. The backstory We were developing a listing site using Nuxt Read More » RedwoodJS vs. BlitzJS: The Future of Fullstack JavaScript Meta-Frameworks Tamas Kadlecsik RedwoodJS & BlitzJS are meta-frameworks that provide tooling for creating SPAs, server-side rendered pages & statically generated content, providing a CLI to generate e2e scaffolds. Read More » JavaScript Interview Questions & Answers RisingStack Engineering In this article, we have compiled a list of some of the most vital JavaScript interview questions and answers you should definitely know the answers for. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/nuxt-3-caching-with-authentication/"
  },
  {
    "body": "* Menu * Contact us Comparing Nuxt 3 Rendering Modes: SWR, ISR, SSR, SSG, SPA * *ngstack.com In this article: Olga Troyan JavaScript Update: to enhance the clarity of the Nuxt 3 documentation, we have opened a pull request (PR) that has already been merged. Now, the functionality of ISR/SWR rendering modes is better explained. The backstory We were developing a listing site using Nuxt 3 and aimed to optimize page load times while maintaining SEO benefits by choosing the right rendering mode for each page. Upon investigating this, we found that documentation was limited, particularly for newer and more complex rendering modes like ISR. This scarcity was evident in the lack of specific technical details for functionality and testing. Moreover, various rendering modes are referred to differently across knowledge resources, and there are notable differences in implementation among providers such as Vercel or Netlify. This led us to compile the information into the following article, which offers a clear, conceptual explanation and technical insights on setting up different rendering modes in Nuxt 3. Knowledge prerequisites: Basic understanding of Nuxt. Rendering modes Project setup The project consists of 7 pages, each displaying the current time and an HTML response from the same route. Specifically, the route /api/hello returns a JSON response with the current time, and each page features a different available rendering mode enabled. The pages differ only in their title that refers to the rendering mode used for generating them. In the case of the simple SPA for example: <template> <div> <p>{{ pageType }} page</p> <pre>Time after hydration: {{ new Date().toUTCString() }} </pre> <pre>Time in server rendered HTML: {{ data }}</pre> <NuxtLink to=\"/\">Home</NuxtLink> </div> </template> <script setup lang=\"ts\"> const pageType = \"SPA\"; // value differs for each route const { data } = await useFetch('/api/hello') </script> To make it visible when the page was rendered, we showcase 2 timestamps on the site: One we get from the API response, to see when was the page rendered by the server: <template> [...] <pre>Time in server rendered HTML: {{ data }}</pre> [...] </template> <script setup lang=\"ts\"> const { data } = await useFetch('/api/hello') </script> And one in the browser: <pre>Time after hydration: {{ new Date().toUTCString() }} </pre> We utilize these two timestamps to demonstrate the functionality of each rendering mode, focusing on the hydration process. In case you’re new to SSR frameworks: First, we send the browser a full-fledged HTML version of the initial state of our site. Then it get’s hydrated, meaning Vue takes over, builds whatever it needs, runs client-side JavaScript if necessary and attaches itself to the existing DOM elements. From here on, everything works the same as with any other SPA. In our scenario, this implies that the current first <pre> element will always display the timestamp of the time the page got rendered by the browser, while the second <pre> element showcases the time Vue got the response from the API, thus when the HTML got rendered on the server. Our API route is as simple as this: export default defineEventHandler((event) => { return new Date().toUTCString(); }); Rendering modes are set up in nuxt.config: *({ devtools: { enabled: true }, ssr: true, routeRules: { \"/isr_ttl\": { isr: 60 }, \"/isr_no_ttl\": { isr: true }, \"/swr_ttl\": { swr: 60 }, \"/swr_no_ttl\": { swr: true }, \"/ssg\": { prerender: true }, \"/spa\": { ssr: false }, }, }); Startup Start the example project with: git clone git@github.com:RisingStack/nuxt3-rendering-modes.git cd nuxt3-rendering-modes pnpm install pnpm dev SPA Single Page Application (also called Client Side Rendering). HTML elements are generated after the browser downloads and parses all the JavaScript code containing the instructions to create the current interface. We use the route /spa to illustrate how this rendering mode works: Data Value Time in server rendered HTML HTML response is blank Time in API response Tue, 16 Jan 2024 09:47:10 GMT Time after hydration Tue, 16 Jan 2024 09:47:10 GMT As we can see in the table, the HTML response is blank, and the “Time after hydration” matches the “Time in API response”. This occurs because the API request is made client-side. On subsequent requests or page reloads, the HTML response will always be blank, and the time will change with each request. However, the browser-rendered value and the API response value will consistently be the same. To enable this mode, set up a route rule in nuxt.config as follows: *({ routeRules: { \"/spa\": { ssr: false }, }, }); SSR Server Side Rendering (also called Universal Rendering). The Nuxt server generates HTML on demand and delivers a fully rendered HTML page to the browser. We use the route /ssr to illustrate the behaviour of this rendering mode: Data Value Time in server rendered HTML Tue, 16 Jan 2024 09:47:45 GMT Time in API response Tue, 16 Jan 2024 09:47:45 GMT Time after hydration Tue, 16 Jan 2024 09:47:48 GMT In this case, the “Time after hydration” might slightly differ from the “Time in API response” since the API response is generated beforehand. However, the timestamps will be very close to each other because the HTML generation occurs on demand and is not cached. This behavior will remain consistent across subsequent requests or page reloads. To enable this mode, enable SSR in nuxt.config as follows: *({ ssr: true }); SSG Static Site Generation The page is generated at build time, served to the browser, and will not be regenerated again until the next build. The route /ssg demonstrates SSG behavior: Data Value Time in server rendered HTML Tue, 16 Jan 2024 10:00:41 GMT Time in API response Tue, 16 Jan 2024 10:00:41 GMT Time after hydration Tue, 16 Jan 2024 10:09:09 GMT In the table mentioned above, there is a noticeable time difference between the time after hydration and other timestamps. This is because, in SSG mode, HTML is generated during build time and remains unchanged afterward. This behavior will persist across subsequent requests or page reloads. To enable this mode, set up a route rule in nuxt.config as follows: *({ routeRules: { \"/ssg\": { prerender: true }, }, }); SWR Stale While Revalidate This mode employs a technique called stale-while-revalidate, which enables the server to provide stale data while simultaneously revalidating it in the background. The server generates an HTML response on demand, which is then cached. When deployed, the caching specifics can vary depending on the provider (eg. Vercel, Netlify, etc.), and information about where the cache is stored is usually not disclosed. There are two primary settings for caching: No TTL (Time To Live): This means the response is cached until there is a change in the content. TTL Set: This implies that the response is cached until the set TTL expires. Nuxt saves the API response that was used for generating the first version of the page. Then upon all subsequent requests, only the API gets called, until the response changes. When a change is detected during a request – with no TTL set – or when the TTL expires, the server returns the stale response and generates new HTML in the background, which will be served for the next request. SWR without TTL To observe the behavior of the SWR mode without a TTL set, you can take a look at the /swr_no_ttl route: Data Value – first request Value – second request Value – third request Time in server rendered HTML Tue, 16 Jan 2024 09:48:55 GMT Tue, 16 Jan 2024 09:48:55 GMT Tue, 16 Jan 2024 09:49:02 GMT Time in API response Tue, 16 Jan 2024 09:48:55 GMT Tue, 16 Jan 2024 09:48:55 GMT Tue, 16 Jan 2024 09:49:02 GMT Time after hydration Tue, 16 Jan 2024 09:48:58 GMT Tue, 16 Jan 2024 09:49:03 GMT Tue, 16 Jan 2024 09:49:10 GMT Let’s dissect the above table a bit. In the first column, the behavior is similar to that observed with SSR, as the “Time after hydration” slightly differs from the “Time provided in API response”. In the second column, it appears the user waited around 5 seconds before reloading the page. The content is served from the cache, with only the time after hydration changing. However, this action triggers the regeneration of the page in the background due to the change in the API response since the first page load. As a result, a new version of the page is obtained upon the third request. To understand this, compare the “Time after hydration” in the second column with the “Time in server rendered HTML” in the third column. The difference is only about 1 second, indicating that the server’s rendering of the third request occurred almost concurrently with the serving of the second request. To enable this mode, set up a route rule in nuxt.config as follows: *({ routeRules: { \"/swr_no_ttl\": { swr: true }, }, }) SWR with TTL This rendering mode is set up on /swr_ttl route: Data Value – first request Value – second request Value – first request after TTL of 60 seconds passed Value – second request after TTL of 60 seconds passed Time in server rendered HTML Tue, 16 Jan 2024 09:49:52 GMT Tue, 16 Jan 2024 09:49:52 GMT Tue, 16 Jan 2024 09:49:52 GMT Tue, 16 Jan 2024 09:50:58 GMT Time in API response Tue, 16 Jan 2024 09:49:52 GMT Tue, 16 Jan 2024 09:49:52 GMT Tue, 16 Jan 2024 09:49:52 GMT Tue, 16 Jan 2024 09:50:58 GMT Time after hydration Tue, 16 Jan 2024 09:49:55 GMT Tue, 16 Jan 2024 09:50:00 GMT Tue, 16 Jan 2024 09:51:00 GMT Tue, 16 Jan 2024 09:51:06 GMT In this scenario, the values of the first request in the /swr_ttl route are again similar to those observed in SSR mode, with only the time after hydration differing slightly from the other values. For the second and subsequent requests, until the TTL of 60 seconds expires, the “Time in API response” row retains the same timestamp as the first request. After the TTL expires (as shown in the third column), the time in the API response is still stale. However, in the fourth column, a new timestamp appears in the “Time in API response” row, indicating that the content has been updated post-TTL expiry. To enable this mode, set up a route rule in nuxt.config as following: *({ routeRules: { \"/swr_ttl\": { swr: 60 }, }, }) ISR Incremental Static Regeneration (also called Hybrid Mode) This rendering mode operates similarly to SWR (Stale-While-Revalidate), with the primary distinction being that the response is cached on a CDN (Content Delivery Network). There are two potential settings for caching: No TTL (Time To Live): This implies that the response is cached permanently. TTL Set: In this case, the response is cached until the TTL expires. Note: ISR in Nuxt 3 differs significantly from ISR in Next.js in terms of HTML generation. In Nuxt 3, ISR generates HTML on demand, while in Next.js, ISR typically generates HTML during the build time by default. ISR without TTL This mode is available on the /isr_no_ttl route: Data Value – first request Value – second request Value – third request Time in server rendered HTML Tue, 16 Jan 2024 09:52:54 GMT Tue, 16 Jan 2024 09:52:54 GMT Tue, 16 Jan 2024 09:52:54 GMT Time in API response Tue, 16 Jan 2024 09:52:54 GMT Tue, 16 Jan 2024 09:52:54 GMT Tue, 16 Jan 2024 09:52:54 GMT Time after hydration Tue, 16 Jan 2024 09:52:56 GMT Tue, 16 Jan 2024 09:53:03 GMT Tue, 16 Jan 2024 09:53:11 GMT In the table and screencast provided, it’s evident that the value in the “Time in API response” row remains unchanged, even after 60 seconds have elapsed, which is typically the default TTL for Vercel. This observation aligns with the behavior of ISR without TTL in Nuxt 3, where the content is cached permanently. To enable this mode, set up a route rule in nuxt.config as follows: *({ routeRules: { \"/isr_no_ttl\": { isr: true }, }, }) ISR with TTL The route /isr_ttl demonstrates ISR behaviour without TTL: Data Value – first request Value – second request Value – first request after TTL of 60 seconds passed Value – second request after TTL of 60 seconds passed Time in server rendered HTML Tue, 16 Jan 2024 10:01:21 GMT Tue, 16 Jan 2024 10:01:21 GMT Tue, 16 Jan 2024 10:01:21 GMT Tue, 16 Jan 2024 10:02:24 GMT Time in API response Tue, 16 Jan 2024 10:01:21 GMT Tue, 16 Jan 2024 10:01:21 GMT Tue, 16 Jan 2024 10:01:21 GMT Tue, 16 Jan 2024 10:02:24 GMT Time after hydration Tue, 16 Jan 2024 10:01:24 GMT Tue, 16 Jan 2024 10:01:28 GMT Tue, 16 Jan 2024 10:02:25 GMT Tue, 16 Jan 2024 10:02:32 GMT For the first request on the /isr_ttl route, the observed values are similar to the SSR behavior behavior, with only the time after hydration showing a slight difference. During the second and subsequent requests, until the TTL of 60 seconds passes, the “Time in API response” row retains the same timestamp as in the first request. After the TTL expires (as shown in the third column), the time in the API response remains stale. It’s only in the fourth column that a new timestamp appears in the “Time in API response” row, indicating an update post-TTL expiry. To enable this mode, set up a route rule in nuxt.config as follows: *({ routeRules: { \"/isr_ttl\": { isr: 60 }, }, }) Note that all the above mentioned rendering modes, except for ISR, can be easily tested in a local environment by building and previewing the app. ISR, however, relies on a CDN network for its functionality, which means it requires a CDN for proper testing. For example, deploying to Vercel would be necessary to test ISR effectively. Conclusion Now that we’ve explored how different rendering modes work technically, let’s discuss their pros and cons. Here’s our take: If you’re not concerned about SEO, social media, or the initial load time, opt for Single Page Application (SPA). But if the above three matter, you should consider one of the server-generated modes. Static Site Generation (SSG) is the easiest if your content doesn’t change frequently. Server-Side Rendering (SSR) is better for real-time updates, even though it takes a bit longer to load compared to modes with caching like Incremental Static Regeneration (ISR) or Stale-While-Revalidate (SWR). Serving outdated data might sound scary at first, but in a lot of use cases you’ll find that it does not really matter – in those cases, ISR or SWR is the way to go. They provide caching, reducing server costs and load times. ISR loads faster than SWR, thanks to the CDN, although it doesn’t support HTML regeneration based on response updates. * Nuxt 3 Caching with Authentication Olga Troyan We had a project where we aimed to optimize page load times while preserving SEO benefits. One of the techniques we employed was enabling ISR (Incremental Static Regeneration), which caches the page’s HTML response on the CDN network until the Read More » RedwoodJS vs. BlitzJS: The Future of Fullstack JavaScript Meta-Frameworks Tamas Kadlecsik RedwoodJS & BlitzJS are meta-frameworks that provide tooling for creating SPAs, server-side rendered pages & statically generated content, providing a CLI to generate e2e scaffolds. Read More » JavaScript Interview Questions & Answers RisingStack Engineering In this article, we have compiled a list of some of the most vital JavaScript interview questions and answers you should definitely know the answers for. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/nuxt-3-rendering-modes/"
  },
  {
    "body": "* Menu * Contact us RisingStack Blog We’re a full-stack software development agency focusing on JavaScript, DevOps, Microservices & Kubernetes. For more info visit risingstack.com, or feel free to contact us! * Search Search Tags edited reviewed Update Elixir & Phoenix & LiveView to the Latest Version RisingStack Engineering This article serves as your one-stop resource for all the necessary information on updating these key components of the Elixir ecosystem. You’ll also find the Comparing Nuxt 3 Rendering Modes: SWR, ISR, SSR, SSG, SPA Olga Troyan Update: to enhance the clarity of the Nuxt 3 documentation, we have opened a pull request (PR) that has already been merged. Now, the functionality of ISR/SWR Why Elixir? Phoenix & LiveView are unmatched for Modern Web Apps Tamas Kadlecsik Let’s face it: In the JavaScript world, we still don’t have a killer app. We’ve previously written about Redwood and Blitz, two technologies that seemed * RisingStack Engineering * Node.js 21 is here with Websocket RisingStack Engineering The latest major version of Node.js has just released with a few new interesting experimental features and a lot of fixes and optimization. You can The Best JavaScript Frameworks: Pros and Cons Explained RisingStack Engineering In this article, we’ll focus on the most popular JavaScript frameworks, and explore why they’re either loved or disliked by developers. ChatGPT use case examples for programming Ferenc Hámori Learn how we use GPT-based products as tools in a professional webdev setting. Mammogram Analysis with AI and User-Friendly Interfaces Janos Kubisch See how RisingStack and Semmelweis University created an image recognition system using deep convolutional neural networks and a user-friendly interface for healthcare workers fighting against breast cancer. AI Development Tools Compared – The Differences You’ll Need to Know RisingStack Engineering There are many different types of AI development tools available, but not all of them are created equal. Some tools are more suited for certain Kubernetes * You’ll Need the Most RisingStack Engineering Are you currently preparing for a Kubernetes interview? If so, you’ll want to make sure you’re familiar with the questions and answers below at least. « Previous Page1 Page2 Page3 Page4 … Page23 Next » **.",
    "url": "https://blog.risingstack.com/page/2/"
  },
  {
    "body": "* Menu * Contact us RisingStack Blog We’re a full-stack software development agency focusing on JavaScript, DevOps, Microservices & Kubernetes. For more info visit risingstack.com, or feel free to contact us! * Search Search Tags edited reviewed Running Node Modules in your iOS Project RisingStack Engineering Unleash the full power of NPM and JavaScript in your iOS projects using Browserify. Continuous Deployment of Node.js Applications RisingStack Engineering How to set up a Continuous Deployment pipeline for Node.js applications using Travis/Strider/Jenkins or Codeship? Brewfactory: Full-Stack Homebrew with IoT and Node.js RisingStack Engineering The story of building a homebrew system using Internet of Things principles, with the help of Node.js and AngularJS. Node.js Best Practices * best practices: callback convention, async code patterns, error handling and workflow tips. From AngularJS to React: The Isomorphic Way RisingStack Engineering The story and whys behind the rewrite of our landing page from AngularJS to React. Setting Up NPM Registries RisingStack Engineering How to set up your public or private NPM registry? This post will teach you more ways to do it with nginx, sinopia, cnpmjs or CouchDB « Previous Page1 … Page21 Page22 Page23 Next » **.",
    "url": "https://blog.risingstack.com/page/23/"
  },
  {
    "body": "* Menu * Contact us RisingStack Blog We’re a full-stack software development agency focusing on JavaScript, DevOps, Microservices & Kubernetes. For more info visit risingstack.com, or feel free to contact us! * Search Search Tags edited reviewed RisingStack News (formerly Microservice Weekly) – a hand-curated newsletter RisingStack Engineering Microservice Weekly, our newsletter about microservices had a great run – we’ve carefully curated the best sources we could find and sent out more than Do your engineers do what you think they do? Tamas Kadlecsik This case study shows how we reformed a scale-up’s dev processes after uncovering severe discrepancies between the official and real way of getting things done. History of JavaScript on a Timeline RisingStack Engineering In the early 1990s, Brendan Eich needed a scripting language for web pages that would be easy to use, so he created one himself. RedwoodJS vs. BlitzJS: The Future of Fullstack JavaScript Meta-Frameworks Tamas Kadlecsik RedwoodJS & BlitzJS are meta-frameworks that provide tooling for creating SPAs, server-side rendered pages & statically generated content, providing a CLI to generate e2e scaffolds. JavaScript Interview Questions & Answers RisingStack Engineering In this article, we have compiled a list of some of the most vital JavaScript interview questions and answers you should definitely know the answers for. The fs Module in Node.js: A Short Guide to File System Interaction Ferenc Hámori A brief overview of what the fs module does in Node.js and how you can use it to interact with your files. How to check Node version Ferenc Hámori In this article below, we list ways for you to check your Node version with different methods, on different operating systems. Argo CD Kubernetes Tutorial Janos Kubisch With this Argo CD Kubernetes tutorial you’ll learn to store credentials safely within your k8s cluster using a pull-based continous deployment tool. React-Native Sound & Animation Tutorial RisingStack Engineering In this React-Native sound and animation tutorial, you’ll learn tips on how you can add animation and sound effects to your mobile application. Stripe & JS: Payments Integration Tutorial roland In this Stripe & JS tutorial, I’ll show how you can create a simple webshop using Stripe Payments integration, React and Express. « Previous Page1 Page2 Page3 Page4 Page5 … Page23 Next » **.",
    "url": "https://blog.risingstack.com/page/3/"
  },
  {
    "body": "* Menu * Contact us RedwoodJS vs. BlitzJS: The Future of Fullstack JavaScript Meta-Frameworks * *ngstack.com In this article: Tamas Kadlecsik JavaScript Redwood and Blitz are two up-and-coming full-stack meta-frameworks that provide tooling for creating SPAs, server-side rendered pages, and statically generated content, providing a CLI to generate end-to-end scaffolds. I’ve been waiting for a worthy Rails replacement in JavaScript since who-knows-when. This article is an overview of the two, and while I’ve given more breadth to Redwood (as it differs from Rails a great deal), I personally prefer Blitz. As the post ended up being quite lengthy, below, we provide a comparison table for the hasty ones. A bit of history first If you started working as a web developer in the 2010s, you might not have even heard of Ruby on Rails, even though it gave us apps like Twitter, GitHub, Urban Dictionary, Airbnb, and Shopify. Compared to the web frameworks of its time, it was a breeze to work with. Rails broke the mold of web technologies by being a highly opinionated MVC tool, emphasizing the use of well-known patterns such as convention over configuration and DRY, with the addition of a powerful CLI that created end-to-end scaffolds from model to the template to be rendered. Many other frameworks have built on its ideas, such as Django for Python, Laravel for PHP, or Sails for Node.js. Thus, arguably, it is a piece of technology just as influential as the LAMP stack before its time. However, the fame of Ruby on Rails has faded quite a bit since its creation in 2004. By the time I started working with Node.js in 2012, the glory days of Rails were over. Twitter — built on Rails — was infamous for frequently showcasing its fail whale between 2007 and 2009. Much of it was attributed to the lack of Rails’ scalability, at least according to word of mouth in my filter bubble. This Rails bashing was further reinforced when Twitter switched to Scala, even though they did not completely ditch Ruby then. The scalability issues of Rails (and Django, for that matter) getting louder press coverage coincided with the transformation of the Web too. More and more JavaScript ran in the browser. Webpages became highly interactive WebApps, then SPAs. Angular.js revolutionized that too when it came out in 2010. Instead of the server rendering the whole webpage by combining the template and the data, we wanted to consume APIs and handle the state changes by client-side DOM updates. Thus, full-stack frameworks fell out of favor. Development got separated between writing back-end APIs and front-end apps. And these apps could have meant Android and iOS apps too by that time, so it all made sense to ditch the server-side rendered HTML strings and send over the data in a way that all our clients could work with. UX patterns developed as well. It wasn’t enough anymore to validate the data on the back-end, as users need quick feedback while they’re filling out bigger and bigger forms. Thus, our life got more and more complicated: we needed to duplicate the input validations and type definitions, even if we wrote JavaScript on both sides. The latter got simpler with the more widespread (re-)adoption of monorepos, as it got somewhat easier to share code across the whole system, even if it was built as a collection of microservices. But monorepos brought their own complications, not to mention distributed systems. And ever since 2012, I have had a feeling that whatever problem we solve generates 20 new ones. You could argue that this is called “progress”, but maybe merely out of romanticism, or longing for times past when things used to be simpler, I’ve been waiting for a “Node.js on Rails” for a while now. Meteor seemed like it could be the one, but it quickly fell out of favor, as the community mostly viewed it as something that is good for MVPs but does not scale… The Rails problem all over again, but breaking down at an earlier stage of the product lifecycle. I must admit, I never even got around to try it. However, it seemed like we were getting there slowly but steadily. Angular 2+ embraced the code generators á la Rails, alongside with Next.js, so it seemed like it could be something similar. Next.js got API Routes, making it possible to handle the front-end with SSR and write back-end APIs too. But it still lacks a powerful CLI generator and has nothing to do with the data layer either. And in general, a good ORM was still missing from the equation to reach the power level of Rails. At least this last point seems to be solved with Prisma being around now. Wait a minute. We have code generators, mature back-end and front-end frameworks, and finally, a good ORM. Maybe we have all pieces of the puzzle in place? Maybe. But first, let’s venture a bit further from JavaScript and see if another ecosystem has managed to further the legacy of Rails, and whether we can learn from it. Enter Elixir and Phoenix Elixir is a language built on Erlang’s BEAM and OTP, providing a nice concurrency model based on the actor model and processes, which also results in easy error handling due to the “let it crash” philosophy in contrast to defensive programming. It also has a nice, Ruby-inspired syntax, yet remains to be an elegant, functional language. Phoenix is built on top of Elixir’s capabilities, first as a simple reimplementation of Rails, with a powerful code generator, an data mapping toolkit (think ORM), good conventions, and generally good dev experience, with the inbuilt scalability of the OTP. Yeah.. So far, I wouldn’t have even raised an eyebrow. Rails got more scalable over time, and I can get most of the things I need from a framework writing JavaScript these days, even if wiring it all up is still pretty much DIY. Anyhow, if I need an interactive browser app, I’ll need to use something like React (or at least Alpine.js) to do it anyway. Boy, you can’t even start to imagine how wrong the previous statement is. While Phoenix is a full-fledged Rails reimplementation in Elixir, it has a cherry on top: your pages can be entirely server-side rendered and interactive at the same time, using its superpower called LiveView. When you request a LiveView page, the initial state gets prerendered on the server side, and then a WebSocket connection is built. The state is stored in memory on the server, and the client sends over events. The backend updates the state, calculates the diff, and sends over a highly compressed changeset to the UI, where a client-side JS library updates the DOM accordingly. I heavily oversimplified what Phoenix is capable of, but this section is already getting too long, so make sure to check it out yourself! We’ve taken a detour to look at one of the best, if not the best full-stack frameworks out there. So when it comes to full-stack JavaScript frameworks, it only makes sense to achieve at least what Phoenix has achieved. Thus, what I would want to see: A CLI that can generate data models or schemas, along with their controllers/services and their corresponding pages A powerful ORM like Prisma Server-side rendered but interactive pages, made simple Cross-platform usability: make it easy for me to create pages for the browser, but I want to be able to create an API endpoint responding with JSON by just adding a single line of code. Bundle this whole thing together With that said, let’s see whether Redwood or Blitz is the framework we have been waiting for. BlitzJS vs. RedwoodJS comparison What is RedwoodJS? Redwood markets itself as THE full-stack framework for startups. It is THE framework everyone has been waiting for, if not the best thing since the invention of sliced bread. End of story, this blog post is over. At least according to their tutorial. I felt a sort of boastful overconfidence while reading the docs, which I personally find difficult to read. The fact that it takes a lighter tone compared to the usual, dry, technical texts is a welcome change. Still, as a text moves away from the safe, objective description of things, it also wanders into the territory of matching or clashing with the reader’s taste. In my case, I admire the choice but could not enjoy the result. Still, the tutorial is worth reading through. It is very thorough and helpful. The result is also worth the… well, whatever you feel while reading it, as Redwood is also nice to work with. Its code generator does what I would expect it to do. Actually, it does even more than I expected, as it is very handy not just for setting up the app skeleton, models, pages, and other scaffolds. It even sets your app up to be deployed to different deployment targets like AWS Lambdas, Render, Netlify, Vercel. Speaking of the listed deployment targets, I have a feeling that Redwood pushes me a bit strongly towards serverless solutions, Render being the only one in the list where you have a constantly running service. And I like that idea too: if I have an opinionated framework, it sure can have its own opinions about how and where it wants to be deployed. As long as I’m free to disagree, of course. But Redwood has STRONG opinions not just about the deployment, but overall on how web apps should be developed, and if you don’t agree with those, well… I want you to use GraphQL Let’s take a look at a freshly generated Redwood app. Redwood has its own starter kit, so we don’t need to install anything, and we can get straight to creating a skeleton. $ yarn create redwood-app --ts ./my-redwood-app You can omit the --ts flag if you want to use plain JavaScript instead. Of course, you can immediately start up the development server and see that you got a nice UI already with yarn redwood dev. One thing to notice, which is quite commendable in my opinion, is that you don’t need to globally install a redwood CLI. Instead, it always remains project local, making collaboration easier. Now, let’s see the directory structure. my-redwood-app ├── api/ ├── scripts/ ├── web/ ├── graphql.config.js ├── jest.config.js ├── node_modules ├── package.json ├── prettier.config.js ├── README.md ├── redwood.toml ├── test.js └── yarn.lock We can see the regular prettier.config.js, jest.config.js, and there’s also a redwood.toml for configuring the port of the dev-server. We have an api and web directory for separating the front-end and the back-end into their own paths using yarn workspaces. But wait, we have a graphql.config.js too! That’s right, with Redwood, you’ll write a GraphQL API. Under the hood, Redwood uses Apollo on the front-end and Yoga on the back-end, but most of it is made pretty easy using the CLI. However, GraphQL has its downsides, and if you’re not OK with the tradeoff, well, you’re shit out of luck with Redwood. Let’s dive a bit deeper into the API. my-redwood-app ├── api │ ├── db │ │ └── schema.prisma │ ├── jest.config.js │ ├── package.json │ ├── server.config.js │ ├── src │ │ ├── directives │ │ │ ├── requireAuth │ │ │ │ ├── requireAuth.test.ts │ │ │ │ └── requireAuth.ts │ │ │ └── skipAuth │ │ │ ├── skipAuth.test.ts │ │ │ └── skipAuth.ts │ │ ├── functions │ │ │ └── graphql.ts │ │ ├── graphql │ │ ├── lib │ │ │ ├── auth.ts │ │ │ ├── db.ts │ │ │ └── logger.ts │ │ └── services │ ├── tsconfig.json │ └── types │ └── graphql.d.ts ... Here, we can see some more, backend related config files, and the debut of tsconfig.json. api/db/: Here resides our schema.prisma, which tells us the Redwood, of course, uses Prisma. The src/ dir stores the bulk of our logic. directives/: Stores our graphql schema directives. functions/: Here are the necessary lambda functions so we can deploy our app to a serverless cloud solution (remember STRONG opinions?). graphql/: Here reside our gql schemas, which can be generated automatically from our db schema. lib/: We can keep our more generic helper modules here. services/: If we generate a page, we’ll have a services/ directory, which will hold our actual business logic. This nicely maps to a layered architecture, where the GraphQL resolvers function as our controller layer. We have our services, and we can either create a repository or dal layer on top of Prisma, or if we can keep it simple, then use it as our data access tool straight away. So far so good. Let’s move to the front-end. my-redwood-app ├── web │ ├── jest.config.js │ ├── package.json │ ├── public │ │ ├── favicon.png │ │ ├── README.md │ │ └── robots.txt │ ├── src │ │ ├── App.tsx │ │ ├── components │ │ ├── index.css │ │ ├── index.html │ │ ├── layouts │ │ ├── pages │ │ │ ├── FatalErrorPage │ │ │ │ └── FatalErrorPage.tsx │ │ │ └── NotFoundPage │ │ │ └── NotFoundPage.tsx │ │ └── Routes.tsx │ └── tsconfig.json ... From the config file and the package.json, we can deduce we’re in a different workspace. The directory layout and file names also show us that this is not merely a repackaged Next.js app but something completely Redwood specific. Redwood comes with its router, which is heavily inspired by React Router. I found this a bit annoying as the dir structure-based one in Next.js feels a lot more convenient, in my opinion. However, a downside of Redwood is that it does not support server-side rendering, only static site generation. Right, SSR is its own can of worms, and while currently you probably want to avoid it even when using Next, with the introduction of Server Components this might soon change, and it will be interesting to see how Redwood will react (pun not intended). On the other hand, Next.js is notorious for the hacky way you need to use layouts with it (which will soon change though), while Redwood handles them as you’d expect it. In Routes.tsx, you simply need to wrap your Routes in a Set block to tell Redwood what layout you want to use for a given route, and never think about it again. import { Router, Route, Set } from \"@redwoodjs/router\"; import BlogLayout from \"src/layouts/BlogLayout/\"; const Routes = () => { return ( <Router> <Route path=\"/login\" page={LoginPage} name=\"login\" /> <Set wrap={BlogLayout}> <Route path=\"/article/{id:Int}\" page={ArticlePage} name=\"article\" /> <Route path=\"/\" page={HomePage} name=\"home\" /> </Set> <Route notfound page={NotFoundPage} /> </Router> ); }; export default Routes; Notice that you don’t need to import the page components, as it is handled automatically. Why can’t we also auto-import the layouts though, as for example Nuxt 3 would? Beats me. Another thing to note is the /article/{id:Int} part. Gone are the days when you always need to make sure to convert your integer ids if you get them from a path variable, as Redwood can convert them automatically for you, given you provide the necessary type hint. Now’s a good time to take a look at SSG. The NotFoundPage probably doesn’t have any dynamic content, so we can generate it statically. Just add prerender, and you’re good. const Routes = () => { return ( <Router> ... <Route notfound page={NotFoundPage} prerender /> </Router> ); }; export default Routes; You can also tell Redwood that some of your pages require authentication. Unauthenticated users should be redirected if they try to request it. import { Private, Router, Route, Set } from \"@redwoodjs/router\"; import BlogLayout from \"src/layouts/BlogLayout/\"; const Routes = () => { return ( <Router> <Route path=\"/login\" page={LoginPage} name=\"login\" /> <Private unauthenticated=\"login\"> <Set wrap={PostsLayout}> <Route path=\"/admin/posts/new\" page={PostNewPostPage} name=\"newPost\" /> <Route path=\"/admin/posts/{id:Int}/edit\" page={PostEditPostPage} name=\"editPost\" /> </Set> </Private> <Set wrap={BlogLayout}> <Route path=\"/article/{id:Int}\" page={ArticlePage} name=\"article\" /> <Route path=\"/\" page={HomePage} name=\"home\" /> </Set> <Route notfound page={NotFoundPage} /> </Router> ); }; export default Routes; Of course, you need to protect your mutations and queries, too. So make sure to append them with the pre-generated @requireAuth. Another nice thing in Redwood is that you might not want to use a local auth strategy but rather outsource the problem of user management to an authentication provider, like Auth0 or Netlify-Identity. Redwood’s CLI can install the necessary packages and generate the required boilerplate automatically. What looks strange, however, at least with local auth, is that the client makes several roundtrips to the server to get the token. More specifically, the server will be hit for each currentUser or isAuthenticated call. Frontend goodies in Redwood There are two things that I really loved about working with Redwood: Cells and Forms. A cell is a component that fetches and manages its own data and state. You define the queries and mutations it will use, and then export a function for rendering the Loading, Empty, Failure, and Success states of the component. Of course, you can use the generator to create the necessary boilerplate for you. A generated cell looks like this: import type { ArticlesQuery } from \"types/graphql\"; import type { CellSuccessProps, CellFailureProps } from \"@redwoodjs/web\"; export const QUERY = gql` query ArticlesQuery { articles { id } } `; export const Loading = () => <div>Loading...</div>; export const Empty = () => <div>Empty</div>; export const Failure = ({ error }: CellFailureProps) => ( <div style={{ color: \"red\" }}>Error: {error.message}</div> ); export const Success = ({ articles }: CellSuccessProps<ArticlesQuery>) => { return ( <ul> {articles.map((item) => { return <li key={item.id}>{JSON.stringify(item)}</li>; })} </ul> ); }; Then you just import and use it as you would any other component, for example, on a page. import ArticlesCell from \"src/components/ArticlesCell\"; const HomePage = () => { return ( <> <MetaTags title=\"Home\" description=\"Home page\" /> <ArticlesCell /> </> ); }; export default HomePage; However! If you use SSG on pages with cells — or any dynamic content really —only their loading state will get pre-rendered, which is not much of a help. That’s right, no getStaticProps for you if you go with Redwood. The other somewhat nice thing about Redwood is the way it eases form handling, though the way they frame it leaves a bit of a bad taste in my mouth. But first, the pretty part. import { Form, FieldError, Label, TextField } from \"@redwoodjs/forms\"; const ContactPage = () => { return ( <> <Form config={{ mode: \"onBlur\" }}> <Label name=\"email\" errorClassName=\"error\"> Email </Label> <TextField name=\"email\" validation={{ required: true, pattern: { value: /^[^@]+@[^.]+\\..+$/, message: \"Please enter a valid email address\", }, }} errorClassName=\"error\" /> <FieldError name=\"email\" className=\"error\" /> </Form> </> ); }; The TextField components validation attribute expects an object to be passed, with a pattern against which the provided input value can be validated. The errorClassName makes it easy to set the style of the text field and its label in case the validation fails, e.g. turning it red. The validations message will be printed in the FieldError component. Finally, the config={{ mode: 'onBlur' }} tells the form to validate each field when the user leaves them. The only thing that spoils the joy is the fact that this pattern is eerily similar to the one provided by Phoenix. Don’t get me wrong. It is perfectly fine, even virtuous, to copy what’s good in other frameworks. But I got used to paying homage when it’s due. Of course, it’s totally possible that the author of the tutorial did not know about the source of inspiration for this pattern. If that’s the case, let me know, and I’m happy to open a pull request to the docs, adding that short little sentence of courtesy. But let’s continue and take a look at the whole working form. import { MetaTags, useMutation } from \"@redwoodjs/web\"; import { toast, Toaster } from \"@redwoodjs/web/toast\"; import { FieldError, Form, FormError, Label, Submit, SubmitHandler, TextAreaField, TextField, useForm, } from \"@redwoodjs/forms\"; import { CreateContactMutation, CreateContactMutationVariables, } from \"types/graphql\"; const CREATE_CONTACT = gql` mutation CreateContactMutation($input: CreateContactInput!) { createContact(input: $input) { id } } `; interface FormValues { name: string; email: string; message: string; } const ContactPage = () => { const formMethods = useForm(); const [create, { loading, error }] = useMutation< CreateContactMutation, CreateContactMutationVariables >(CREATE_CONTACT, { onCompleted: () => { toast.success(\"Thank you for your submission!\"); formMethods.reset(); }, }); const onSubmit: SubmitHandler<FormValues> = (data) => { create({ variables: { input: data } }); }; return ( <> <MetaTags title=\"Contact\" description=\"Contact page\" /> <Toaster /> <Form onSubmit={onSubmit} config={{ mode: \"onBlur\" }} error={error} formMethods={formMethods} > <FormError error={error} wrapperClassName=\"form-error\" /> <Label name=\"email\" errorClassName=\"error\"> Email </Label> <TextField name=\"email\" validation={{ required: true, pattern: { value: /^[^@]+@[^.]+\\..+$/, message: \"Please enter a valid email address\", }, }} errorClassName=\"error\" /> <FieldError name=\"email\" className=\"error\" /> <Submit disabled={loading}>Save</Submit> </Form> </> ); }; export default ContactPage; Yeah, that’s quite a mouthful. But this whole thing is necessary if we want to properly handle submissions and errors returned from the server. We won’t dive deeper into it now, but if you’re interested, make sure to take a look at Redwood’s really nicely written and thorough tutorial. Now compare this with how it would look like in Phoenix LiveView. <div> <.form let={f} for={@changeset} id=\"contact-form\" phx-target={@myself} phx-change=\"validate\" phx-submit=\"save\"> <%= label f, :title %> <%= text_input f, :title %> <%= error_tag f, :title %> <div> <button type=\"submit\" phx-disable-with=\"Saving...\">Save</button> </div> </.form> </div> A lot easier to see through while providing almost the same functionality. Yes, you’d be right to call me out for comparing apples to oranges. One is a template language, while the other is JSX. Much of the logic in a LiveView happens in an elixir file instead of the template, while JSX is all about combining the logic with the view. However, I’d argue that an ideal full-stack framework should allow me to write the validation code once for inputs, then let me simply provide the slots in the view to insert the error messages into, and allow me to set up the conditional styles for invalid inputs and be done with it. This would provide a way to write cleaner code on the front-end, even when using JSX. You could say this is against the original philosophy of React, and my argument merely shows I have a beef with it. And you’d probably be right to do so. But this is an opinion article about opinionated frameworks, after all, so that’s that. The people behind RedwoodJS Credit, where credit is due. Redwood was created by GitHub co-founder and former CEO Tom Preston-Werner, Peter Pistorius, David Price & Rob Cameron. Moreover, its core team currently consists of 23 people. So if you’re afraid to try out newish tools because you may never know when their sole maintainer gets tired of the struggles of working on a FOSS tool in their free time, you can rest assured: Redwood is here to stay. Redwood: Honorable mentions Redwood also comes bundled with Storybook, provides the must-have graphiql-like GraphQL Playground, provides accessibility features out of the box like the RouteAnnouncemnet SkipNavLink, SkipNavContent and RouteFocus components, of course it automatically splits your code by pages. The last one is somewhat expected in 2022, while the accessibility features would deserve their own post in general. Still, this one is getting too long already, and we haven’t even mentioned the other contender yet. Let’s see BlitzJS Blitz is built on top of Next.js, and it is inspired by Ruby on Rails and provides a “Zero-API” data layer abstraction. No GraphQL, pays homage to predecessors… seems like we’re off to a good start. But does it live up to my high hopes? Sort of. A troubled past Compared to Redwood, Blitz’s tutorial and documentation are a lot less thorough and polished. It also lacks several convenience features: It does not really autogenerate host-specific config files. Blitz cannot run a simple CLI command to set up auth providers. It does not provide accessibility helpers. Its code generator does not take into account the model when generating pages. Blitz’s initial commit was made in February 2020, a bit more than half a year after Redwood’s in June 2019, and while Redwood has a sizable number of contributors, Blitz’s core team consists of merely 2-4 people. In light of all this, I think they deserve praise for their work. But that’s not all. If you open up their docs, you’ll be greeted with a banner on top announcing a pivot. While Blitz originally included Next.js and was built around it, Brandon Bayer and the other developers felt it was too limiting. Thus they forked it, which turned out to be a pretty misguided decision. It quickly became obvious that maintaining the fork would take a lot more effort than the team could invest. All is not lost, however. The pivot aims to turn the initial value proposition “JavaScript on Rails with Next” into “JavaScript on Rails, bring your own Front-end Framework”. And I can’t tell you how relieved I am that this recreation of Rails won’t force me to use React. Don’t get me wrong. I love the inventiveness that React brought to the table. Front-end development has come a long way in the last nine years, thanks to React. Other frameworks like Vue and Svelte might lack behind in following the new concepts, but this also means they have more time to polish those ideas even further and provide better DevX. Or at least I find them a lot easier to work with without ever being afraid that my client-side code’s performance would grind to a standstill. All in all, I find this turn of events a lucky blunder. How to create a Blitz app You’ll need to install Blitz globally (run yarn global add blitz or npm install -g blitz –legacy-peer-deps), before you create a Blitz app. That’s possibly my main woe when it comes to Blitz’s design, as this way, you cannot lock your project across all contributors to use a given Blitz CLI version and increment it when you see fit, as Blitz will automatically update itself from time to time. Once blitz is installed, run $ blitz new my-blitz-app It will ask you whether you want to use TS or JS, if it should include a DB and Auth template (more on that later), if you want to use npm, yarn or pnpm to install dependencies, and if you want to use React Final Form or React Hook Form. Once you have answered all its questions, the CLI starts to download half of the internet, as it is customary. Grab something to drink, have a lunch, finish your workout session, or whatever you do to pass the time and when you’re done, you can fire up the server by running $ blitz dev And, of course, you’ll see the app running and the UI telling you to run $ blitz generate all project name:string But before we do that, let’s look around in the project directory. my-blitz-app/ ├── app/ ├── db/ ├── mailers/ ├── node_modules/ ├── public/ ├── test/ ├── integrations/ ├── babel.config.js ├── blitz.config.ts ├── blitz-env.d.ts ├── jest.config.ts ├── package.json ├── README.md ├── tsconfig.json ├── types.ts └── yarn.lock Again, we can see the usual suspects: config files, node_modules, test, and the likes. The public directory — to no one’s surprise — is the place where you store your static assets. Test holds your test setup and utils. Integrations is for configuring your external services, like a payment provider or a mailer. Speaking of the mailer, that is where you can handle your mail-sending logic. Blitz generates a nice template with informative comments for you to get started, including a forgotten password email template. As you’d probably guessed, the app and db directories are the ones where you have the bulk of your app-related code. Now’s the time to do as the generated landing page says and run blitz generate all project name:string. Say yes, when it asks you if you want to migrate your database and give it a descriptive name like add project. Now let’s look at the db directory. my-blitz-app/ └── db/ ├── db.sqlite ├── db.sqlite-journal ├── index.ts ├── migrations/ │ ├── 20220610075814_initial_migration/ │ │ └── migration.sql │ ├── 20220610092949_add_project/ │ │ └── migration.sql │ └── migration_lock.toml ├── schema.prisma └── seeds.ts The migrations directory is handled by Prisma, so it won’t surprise you if you’re already familiar with it. If not, I highly suggest trying it out on its own before you jump into using either Blitz or Redwood, as they heavily and transparently rely on it. Just like in Redwood’s db dir, we have our schema.prisma, and our sqlite db, so we have something to start out with. But we also have a seeds.ts and index.ts. If you take a look at the index.ts file, it merely re-exports Prisma with some enhancements, while the seeds.ts file kind of speaks for itself. Now’s the time to take a closer look at our schema.prisma. // This is your Prisma schema file, // learn more about it in the docs: https://pris.ly/d/prisma-schema datasource db { provider = \"sqlite\" url = env(\"DATABASE_URL\") } generator client { provider = \"prisma-client-js\" } // -------------------------------------- model User { id Int @id @default(autoincrement()) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt name String? email String @unique hashedPassword String? role String @default(\"USER\") tokens Token[] sessions Session[] } model Session { id Int @id @default(autoincrement()) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt expiresAt DateTime? handle String @unique hashedSessionToken String? antiCSRFToken String? publicData String? privateData String? user User? @relation(fields: [userId], references: [id]) userId Int? } model Token { id Int @id @default(autoincrement()) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt hashedToken String type String // See note below about TokenType enum // type TokenType expiresAt DateTime sentTo String user User @relation(fields: [userId], references: [id]) userId Int @@unique([hashedToken, type]) } // NOTE: It's highly recommended to use an enum for the token type // but enums only work in Postgres. // See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql // enum TokenType { // RESET_PASSWORD // } model Project { id Int @id @default(autoincrement()) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt name String } As you can see, Blitz starts out with models to be used with a fully functional User management. Of course, it also provides all the necessary code in the app scaffold, meaning that the least amount of logic is abstracted away, and you are free to modify it as you see fit. Below all the user-related models, we can see the Project model we created with the CLI, with an automatically added id, createdAt, and updatedAt files. One of the things that I prefer in Blitz over Redwood is that its CLI mimics Phoenix, and you can really create everything from the command line end-to-end. This really makes it easy to move quickly, as less context switching happens between the code and the command line. Well, it would if it actually worked, as while you can generate the schema properly, the generated pages, mutations, and queries always use name: string, and disregard the entity type defined by the schema, unlike Redwood. There’s already an open pull request to fix this, but the Blitz team understandably has been focusing on getting v2.0 done instead of patching up the current stable branch. That’s it for the db, let’s move on to the app directory. my-blitz-app └── app ├── api/ ├── auth/ ├── core/ ├── pages/ ├── projects/ └── users/ The core directory contains Blitz goodies, like a predefined and parameterized Form (without Redwood’s or Phoenix’s niceties though), a useCurrentUser hook, and a Layouts directory, as Bliz made it easy to persist layouts between pages, which will be rendered completely unnecessary with the upcoming Next.js Layouts. This reinforces further that the decision to ditch the fork and pivot to a toolkit was probably a difficult but necessary decision. The auth directory contains the fully functional authentication logic we talked about earlier, with all the necessary database mutations such as signup, login, logout, and forgotten password, with their corresponding pages and a signup and login form component. The getCurrentUser query got its own place in the users directory all by itself, which makes perfect sense. And we got to the pages and projects directories, where all the action happens. Blitz creates a directory to store database queries, mutations, input validations (using zod), and model-specific components like create and update forms in one place. You will need to fiddle around in these a lot, as you will need to update them according to your actual model. This is nicely laid out though in the tutorial… Be sure to read it, unlike I did when I first tried Blitz out. my-blitz-app/ └── app/ └── projects/ ├── components/ │ └── ProjectForm.tsx ├── mutations/ │ ├── createProject.ts │ ├── deleteProject.ts │ └── updateProject.ts └── queries/ ├── getProjects.ts └── getProject.ts Whereas the pages directory won’t be of any surprise if you’re already familiar with Next. my-blitz-app/ └── app/ └── pages/ ├── projects/ │ ├── index.tsx │ ├── new.tsx │ ├── [projectId]/ │ │ └── edit.tsx │ └── [projectId].tsx ├── 404.tsx ├── _app.tsx ├── _document.tsx ├── index.test.tsx └── index.tsx A bit of explanation if you haven’t tried Next out yet: Blitz uses file-system-based routing just like Next. The pages directory is your root, and the index file is rendered when the path corresponding to a given directory is accessed. Thus when the root path is requested, pages/index.tsx will be rendered, accessing /projects will render pages/projects/index.tsx, /projects/new will render pages/projects/new.tsx and so on. If a filename is enclosed in []-s, it means that it corresponds to a route param. Thus /projects/15 will render pages/projects/[projectId].tsx. Unlike in Next, you access the param’s value within the page using the <code>useParam(name: string, type?: string)</code> hook. To access the query object, use the <code>useRouterQuery(name: string)</code>. To be honest, I never really understood why Next needs to mesh together the two. When you generate pages using the CLI, all pages are protected by default. To make them public, simply delete the [PageComponent].authenticate = true line. This will throw an AuthenticationError if the user is not logged in anyway, so if you’d rather redirect unauthenticated users to your login page, you probably want to use [PageComponent].authenticate = {redirectTo: '/login'}. In your queries and mutations, you can use the ctx context arguments value to call ctx.session.$authorize or resolver.authorize in a pipeline to secure your data. Finally, if you still need a proper http API, you can create Express-style handler functions, using the same file-system routing as for your pages. A possible bright future While Blitz had a troubled past, it might have a bright future. It is still definitely in the making and not ready for widespread adoption. The idea of creating a framework agnostic full-stack JavaScript toolkit is a versatile concept. This strong concept is further reinforced by the good starting point, which is the current stable version of Blitz. I’m looking further to see how the toolkit will evolve over time. Redwood vs. Blitz: Comparison and Conclusion I set out to see whether we have a Rails, or even better, Phoenix equivalent in JavaScript. Let’s see how they measured up. 1. CLI code generator Redwood’s CLI gets the checkmark on this one, as it is versatile, and does what it needs to do. The only small drawback is that the model has to be written in file first, and cannot be generated. Blitz’s CLI is still in the making, but that’s true about Blitz in general, so it’s not fair to judge it by what’s ready, but only by what it will be. In that sense, Blitz would win if it was fully functional (or will when it will be), as it can really generate pages end-to-end. Verdict: Tie 2. A powerful ORM That’s a short one. Both use Prisma, which is a powerful enough ORM. Verdict: Tie 3. Server side rendered but interactive pages Well, in today’s ecosystem, that might be wishful thinking. Even in Next, SSR is something you should avoid, at least until we’ll have Server Components in React. But which one mimics this behavior the best? Redwood does not try to look like a Rails replacement. It has clear boundaries demarcated by yarn workspaces between front-end and back-end . It definitely provides nice conventions and — to keep it charitable — nicely reinvented the right parts of Phoenix’s form handling. However, strictly relying on GraphQL feels a bit overkill. For small apps that we start out with anyway when opting to use a full-stack framework, it definitely feels awkward. Redwood is also React exclusive, so if you prefer using Vue, Svelte or Solid, then you have to wait until someone reimplements Redwood for your favorite framework. Blitz follows the Rails way, but the controller layer is a bit more abstract. This is understandable, though, as using Next’s file-system-based routing, a lot of things that made sense for Rails do not make sense for Blitz. And in general, it feels more natural than using GraphQL for everything. In the meantime, becoming framework agnostic makes it even more versatile than Redwood. Moreover, Blitz is on its way to becoming framework agnostic, so even if you’d never touch React, you’ll probably be able to see its benefits in the near future. But to honor the original criterion: Redwood provides client-side rendering and SSG (kind of), while Blitz provides SSR on top of the previous two. Verdict: Die-hard GraphQL fans will probably want to stick with Redwood. But according to my criteria, Blitz hands down wins this one. 4. API Blitz auto generates an API for data access that you can use if you want to, but you can explicitly write handler functions too. A little bit awkward, but the possibility is there. Redwood maintains a hard separation between front-end and back-end, so it is trivial that you have an API, to begin with. Even if it’s a GraphQL API, that might just be way too much to engineer for your needs. Verdict: Tie (TBH, I feel like they both suck at this the same amount.) Bye now! In summary, Redwood is a production-ready, React+GraphQL-based full-stack JavaScript framework made for the edge. It does not follow the patterns laid down by Rails at all, except for being highly opinionated. It is a great tool to use if you share its sentiment, but my opinion greatly differs from Redwood’s on what makes development effective and enjoyable. Blitz, on the other hand, follows in the footsteps of Rails and Next, and is becoming a framework agnostic, full-stack toolkit that eliminates the need for an API layer. I hope you found this comparison helpful. Leave a comment if you agree with my conclusion and share my love for Blitz. If you don’t, argue with the enlightened ones… they say controversy boosts visitor numbers. * Nuxt 3 Caching with Authentication Olga Troyan We had a project where we aimed to optimize page load times while preserving SEO benefits. One of the techniques we employed was enabling ISR (Incremental Static Regeneration), which caches the page’s HTML response on the CDN network until the Read More » Comparing Nuxt 3 Rendering Modes: SWR, ISR, SSR, SSG, SPA Olga Troyan Update: to enhance the clarity of the Nuxt 3 documentation, we have opened a pull request (PR) that has already been merged. Now, the functionality of ISR/SWR rendering modes is better explained. The backstory We were developing a listing site using Nuxt Read More » JavaScript Interview Questions & Answers RisingStack Engineering In this article, we have compiled a list of some of the most vital JavaScript interview questions and answers you should definitely know the answers for. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/redwoodjs-vs-blitzjs-comparison/"
  },
  {
    "body": "* Menu * Contact us Practical Tutorial to * on Google Colab * *ngstack.com In this article: Janos Kubisch AI We will take a look at how to set up a RAG – * – demo with the Anthropic Claude 3 Sonet model, using google’s CoLab platform. CoLab offers free instances with T4 GPUs sometimes, but we’ll only need a simple CPU instance, since we access the model only through API. RAG can be used to update already trained models with new information to improve its question answering capabilities. We will be loading the new data into a vector database that will serve as an additional, external memory for the model. This will be accessed by a retrieval model – llama-index in our case – that constructs a task specific prompt and fetches the document, passing both on to the language model. Dependencies Grab something to enhance the model with – we’ll use a paper about QLoRA – Quantized Low Rank Adaptation – for this example, but this could be any text based content that was not part of the training for the particular model. Since this is a pdf, we’ll need to use a pdf loader later, make sure to account for that in case you want to use some other format. We can use shell commands by prefixing them with an exclamation mark in the notebook. Using this makes it simple to download the source pdf: !wget \"https://arxiv.org/pdf/2305.14314.pdf\" -O /content/QLORA.pdf Note: for some reason I don’t fully understand yet, I had to open the pdf in my browser before CoLab could download it, otherwise I got 403 errors until I did. There are some python dependencies we will also need to install: !pip install torch llama-index==0.10.20 transformers accelerate bitsandbytes pypdf chromadb==0.4.24 sentence-transformers pydantic==1.10.11 llama-index-embeddings-huggingface llama-index-llms-huggingface llama-index-readers-file llama-index-vector-stores-chroma llama-index-llms-anthropic --quiet The model There are quite a few things we will need to import from the packages we just installed. Not only that, but we will have to register an account with Anthropic to be able to access their models, since they are not open source. They do, however, offer $5 worth of API usage for free, of which we’ll need about 3 cents for this demo. Feel free to spend the rest on whatever else you’d like to test with it! You can register an account with Anthropic here. ## app.py ## Import necessary libraries import torch import sys import chromadb from llama_index.core import VectorStoreIndex, download_loader, ServiceContext, Settings from llama_index.vector_stores.chroma import ChromaVectorStore from llama_index.core.storage.storage_context import StorageContext from llama_index.embeddings.huggingface import HuggingFaceEmbedding from llama_index.readers.file import PDFReader from llama_index.llms.anthropic import Anthropic from transformers import BitsAndBytesConfig from transformers import AutoModelForCausalLM, AutoTokenizer, StoppingCriteria, StoppingCriteriaList from llama_index.core import PromptTemplate from llama_index.llms.huggingface import HuggingFaceLLM from IPython.display import Markdown, display, HTML from pathlib import Path import os After registering and activating the $5 voucher, we will need to create an API key and then add it as an environment variable to the code as well. os.environ[\"ANTHROPIC_API_KEY\"] = \"YOUR API KEY HERE\" Then, load the pdf we downloaded that contains details about QLoRA: loader = PDFReader() documents = loader.load_data(file=Path(\"/content/QLORA.pdf\")) The setup for the model itself is pretty simple in this case, since Anthropic models are not open source, and we can only interact with them through their API: llm = Anthropic( model=\"claude-3-sonnet-20240229\", ) tokenizer = Anthropic().tokenizer Settings.tokenizer = tokenizer Settings.llm = llm Settings.chunk_size = 1024 First, we ask the model about QLoRA to see if it possesses any knowledge on this topic: # resp contains the response resp = llm.complete(\"What is QLORA?\") # Using HTML with inline CSS for styling (gray color, smaller font size) html_text = f'<p style=\"color: #1f77b4; font-size: 14px;\"><b>{resp}</b></p>' display(HTML(html_text)) QLORA is not a commonly recognized acronym or term that I'm familiar with. Without more context, it's difficult for me to provide a definitive explanation of what QLORA means or refers to. Acronyms can have multiple meanings across different fields or contexts. Could you provide some additional details about where you encountered this term or what domain it relates to? That would help me try to determine the intended meaning of QLORA. New context and questions As you can see from the following output, the model doesn’t have data on this topic, which is great for us, as we can now attempt to extend its knowledge on the subject using RAG. We’ll now set up ChromaDB as our vector database, and load the data from the downloaded paper to it. Chroma is an open-source vector embedding database. When queried, it will compute the feature vector of our prompt and retrieve the most relevant documents – the one we will load into it – using similarity search, so the document can be then passed to the language model as context. You don’t need to attach any external servers, as ChromaDB can run within our Jupyter Notebook and was installed in the beginning with pip. #Create client and a new collection chroma_client = chromadb.EphemeralClient() chroma_collection = chroma_client.create_collection(\"firstcollection\") # Load the embedding model embed_model = HuggingFaceEmbedding(model_name=\"BAAI/bge-base-en-v1.5\") # Set up ChromaVectorStore and load in data vector_store = ChromaVectorStore(chroma_collection=chroma_collection) storage_context = StorageContext.from_defaults(vector_store=vector_store) service_context = ServiceContext.from_defaults(llm=llm, embed_model=embed_model) index = VectorStoreIndex.from_documents( documents, storage_context=storage_context, service_context=service_context ) Chroma will not have a hard time figuring out which document to return since we only use one, but you can definitely play around with loading additional documents and seeing how that affects the result. For now though, we will just ask the same question again: #Define query query=\"what is QLORA?\" query_engine =index.as_query_engine(response_mode=\"compact\") response = query_engine.query(query) # Using HTML with inline CSS for styling (blue color) html_text = f'<p style=\"color: #1f77b4; font-size: 14px;\"><b>{response}</b></p>' display(HTML(html_text)) But now we get a different answer: QLORA stands for Quantized Low-Rank Adaptation. It is a technique for efficiently finetuning large language models by only updating a small set of parameters during training, rather than the full model weights. This allows for significant memory savings compared to standard full model finetuning. QLORA uses quantization to further reduce the memory footprint, with model weights stored in a low-precision 4-bit format during training. The key components are low-rank adaptation using LoRA layers, and quantization using a custom 4-bit numeric format called NormalFloat4. This enables finetuning of very large models like GPT-3 on a single GPU, which would not be feasible with full precision finetuning. This seems like a pretty good quality answer, and in-line with the paper we used as context. This example demonstrates how we can use RAG to feed new information to a model to keep it up to date without having to re-train it on an even larger dataset from the beginning. Now that we confirmed that the new context is indeed being used, we can also ask something else that should be included in the paper: chat_engine = index.as_chat_engine(chat_mode=\"condense_question\", verbose=True) response = chat_engine.chat(\"What would be potential real world use cases for QLoRA?\") print(response) And the response: Querying with: Given the previous conversation, what would be potential real-world use cases or applications for QLoRA (Quantization-aware Learned Optimized Residual Addition), which is a technique for quantizing and compressing large language models like GPT while maintaining their performance? Based on the information provided, some potential real-world applications and use cases for QLoRA could include: 1. Enabling efficient finetuning and deployment of large language models on resource-constrained devices like mobile phones, IoT devices, or edge computing systems with limited memory and compute capabilities. 2. Facilitating the use of state-of-the-art large language models in cloud services or web applications where memory and computational efficiency is crucial for scalability and cost-effectiveness. 3. Allowing researchers and developers to experiment with and finetune very large language models (e.g., 65B parameters) on modest hardware like a single GPU, accelerating research and development in natural language processing. 4. Reducing the carbon footprint and energy consumption associated with training and running large language models, making them more environmentally sustainable. 5. Enabling the deployment of high-performance language models in embedded systems, robotics, or other specialized hardware with strict memory and compute constraints. The key advantage of QLoRA seems to be its ability to compress and quantize large language models to a 4-bit representation while preserving their performance through efficient finetuning techniques like Low Rank Adapters (LoRA). This could unlock a wide range of applications where state-of-the-art language models were previously impractical due to resource constraints. While the model couldn’t quite figure out what QLoRA stands for – the source paper did not have the explanation for it, so it’s hardly a surprise – the response ended up being a pretty solid list of pros. Summary From this small scale RAG demo, we can see how easy it can be to enhance the memory of language models in a performant and relatively resource efficient manner – the vector database will still require space to store all the new information, but no GPU is needed for just the process itself. In the example, we used an externally hosted model, but you can use other pre-trained models that can run in CoLab, provided you can get a hold of one of those elusive GPU instances. * Where to Host Your AI: Comparing ML Model Deployment Services Janos Kubisch When it comes to hosting machine learning models, whether it is for private or public use, it’s not a simple task to find the right services for the job. Many articles online and responses from AI tools tend to include Read More » ChatGPT use case examples for programming Ferenc Hámori Learn how we use GPT-based products as tools in a professional webdev setting. Read More » Mammogram Analysis with AI and User-Friendly Interfaces Janos Kubisch See how RisingStack and Semmelweis University created an image recognition system using deep convolutional neural networks and a user-friendly interface for healthcare workers fighting against breast cancer. *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/retrieval-augmented-generation-tutorial-google-colab/"
  },
  {
    "body": "* Menu * Contact us Tag: edited * * October 22, 2024 React-Native Sound & Animation Tutorial In this React-Native sound and animation tutorial, you’ll learn tips on how you can add animation and sound effects to your mobile application. May 30, 2024 Stripe & JS: Payments Integration Tutorial In this Stripe & JS tutorial, I’ll show how you can create a simple webshop using Stripe Payments integration, React and Express. May 30, 2024 How to Deploy a Ceph Storage to Bare Virtual Machines The main drawback of a Ceph storage is that you have to host and manage it yourself. In this post, we’ll check two different approaches of deploying Ceph. July 4, 2024 Getting Started with Ansible Tutorial – Automate your Infrastructure This Ansible tutorial teaches the basics of this open-source software provisioning, configuration management, and application-deployment tool. May 29, 2024 D3.js Bar Chart Tutorial: Build Interactive JavaScript Charts and Graphs From this D3.js Bar Chart tutorial you can learn how to create beautiful, interactive JavaScript bar charts and graphs! Real life examples and code-snippets inside. May 29, 2024 Puppeteer HTML to PDF Generation with Node.js Learn to generate a Puppeteer PDF document from a heavily styled React page using Node.js, headless Chrome and Docker. May 29, 2024 Async Await in Node.js – How to Master it? Learn how to use async await in Node.js (async functions) to simplify your callback or Promise based application. May 29, 2024 Handling runtime environment variables in create-react-apps A new package called runtime-env-cra allows you to handle environment variables in quick and easy way with create-react-apps. July 4, 2024 Building a Real-Time Webapp with Node.js and Socket.io In this blogpost we showcase a Node.js webapp that does real-time synchronization on multiple machines, which we implemented using Socket.io. May 29, 2024 Page1 Page2 Page3 Page4 Page5 **.",
    "url": "https://blog.risingstack.com/tag/edited/"
  },
  {
    "body": "* Menu * Contact us Tag: reviewed D3.js Bar Chart Tutorial: Build Interactive JavaScript Charts and Graphs From this D3.js Bar Chart tutorial you can learn how to create beautiful, interactive JavaScript bar charts and graphs! Real life examples and code-snippets inside. May 29, 2024 Puppeteer HTML to PDF Generation with Node.js Learn to generate a Puppeteer PDF document from a heavily styled React page using Node.js, headless Chrome and Docker. May 29, 2024 Async Await in Node.js – How to Master it? Learn how to use async await in Node.js (async functions) to simplify your callback or Promise based application. May 29, 2024 Node.js Async Best Practices & Avoiding the Callback Hell This post covers what tools and techniques you have at your disposal when handling Node.js asynchronous operations. Learn how to avoid the callback hell ! May 29, 2024 Yarn vs npm – which Node package manager to use in 2018? Yarn vs npm : Let’s take a look at the state of Node.js package managers in 2018. What’s the difference? Should you use yarn or npm? What’s the alternative? May 30, 2024 Understanding & Measuring HTTP Timings with Node.js This post explains timings in an HTTP request and shows how to measure them in Node.js to discover performance bottlenecks in client/server to server comms. July 4, 2024 How I Survived RisingStack’s Node.js Bootcamp We have a Node.js coding bootcamp here at RisingStack which will help you to sucker punch imposter syndrome and give you a kickstart learning Node.js! May 29, 2024 HTTP/2 Server Push with Node.js In this blog post, we will introduce the most important aspects of HTTP/2 Server Push and create a small Node.js app that gains benefit from using it. May 29, 2024 Building an API Gateway using Node.js Learn what are the benefits and best practices of API Gateways for microservices, and how you can start building yours using Node.js May 29, 2024 Node.js Performance Monitoring with Prometheus This article helps you to understand how to use Prometheus – an open-source solution – for Node.js monitoring, and what kind of things you should monitor. May 29, 2024 Page1 Page2 Page3 Page4 Page5 **.",
    "url": "https://blog.risingstack.com/tag/temp-use-only/"
  },
  {
    "body": "* Menu * Contact us Update Elixir & Phoenix & LiveView to the Latest Version Last updated: October 11, 2024 Search Search Popular ** Elixir This article serves as your one-stop resource for all the necessary information on updating these key components of the Elixir ecosystem. You’ll also find the recent changes and enhancements that have been made to Elixir, Phoenix, and LiveView – changelogs included. Whether you’re new to this tech stack, or just need quick info to get the latest version, we’ve got you covered. Updating Elixir to v1.17.3 On Linux / MacOS At first glance, when reading the Elixir install guide, you might be tempted to think it suggests using homebrew for installing Elixir on MacOS. However, it even states that you might want to look at the version managers listed below. So what gives? If you want to use a runtime/compiler as a developer, always use a version manager, as you will need an easy way to both lock old versions, update to new ones, and switch between different versions. On the other hand, if you just want to use said runtime/compiler, e.g., to run CLI tools with Node.js, or install programs with go install or cargo install, you’ll be fine with any OS-specific package manager. In the case of Elixir, however, we don’t know any good reason why you wouldn’t stick to a version manager, as people seldom use it to distribute CLI tools, save for Elixir development-specific ones. Now, the only question that remains is which one to use. kiex + kerl or asdf? Let us save you a couple of hours of headache and suggest using asdf. It can handle both, and you can even install project specific versions and it will switch between them automatically. . Run elixir --version to find out which version you have already installed. Getting started with asdf: https://asdf-vm.com/guide/getting-started.html GitHub repo: https://github.com/asdf-vm/asdf First, add the plugins for Elixir and Erlang with the following commands: asdf plugin-add erlang asdf plugin-add elixir If you already have the plugins installed, make sure they are up to date with these commands: asdf update asdf plugin-update --all Before continuing, note that you need compatible Erlang and Elixir versions otherwise, you might find yourself in a pickle. You can check the compatibility table in the official documentation: https://elixir-lang.org/docs You can check the latest available versions of Elixir and Erlang: $ asdf latest elixir 1.17.3-otp-27 $ asdf latest erlang 27.1.1 If the latest versions are compatible with each other, you can simply update both to the latest version: asdf install erlang latest asdf install elixir latest Otherwise, list all the available versions, then pick and choose what you need. asdf list all erlang asdf list all elixir When you list Elixir, you’ll see the OTP version it was compiled against as an -otp-XX suffix, eg: 1.15.7 1.15.7-otp-24 1.15.7-otp-25 1.15.7-otp-26 1.16.0 1.16.0-otp-24 1.16.0-otp-25 1.16.0-otp-26 1.16.0-rc.0 1.16.0-rc.0-otp-24 1.16.0-rc.0-otp-25 1.16.0-rc.0-otp-26 1.16.0-rc.1 1.16.0-rc.1-otp-24 1.16.0-rc.1-otp-25 1.16.0-rc.1-otp-26 main main-otp-22 main-otp-23 main-otp-24 main-otp-25 main-otp-26 Once you selected the versions you need, you’re ready to specify which to install asdf install erlang VERSIONNUMBER asdf install elixir VERSIONNUMBER We have a more detailed install guide coming very soon that includes a guide on how to install specific versions per project. Make sure to subscribe to our newsletter to be among the first to get it! On Windows You can do it the easy way or the hard way. The easy way: using chocolatey Install chocolatey, then run choco install elixir This will install Erlang as a dependency too. The hard way: with the installer We’d only go that way if you already have Erlang installed on your Windows machine, and you want to stick to your current install. Either way: If you haven’t done so already, download and install the latest version of Erlang: https://www.erlang.org/downloads.html If you want to check which version of Erlang you have (if any), run erl in the terminal. After that, download the Elixir installer that is compatible with the version of Erlang that you have installed: https://github.com/elixir-lang/elixir/releases/download/v1.17.3/elixir-otp-26.exe https://github.com/elixir-lang/elixir/releases/download/v1.17.3/elixir-otp-25.exe https://github.com/elixir-lang/elixir/releases/download/v1.17.3/elixir-otp-24.exe Note: you need to have Erlang v24.0 or later installed for Elixir v.1.16. If you already have a previous version of Elixir installed and just want to update, run the installer as usual and check the “replace my current version” when the installer asks. The best way: Using WSL Unless you really, really, really have to install Elixir on a Windows host, we suggest using it in WSL instead. Ports get automatically forwarded to the host machine, so you won’t have to do the rain dance to reach your local development server. You’ll be able to use asdf, and in general, you’ll have a nicer time. The only downside, in our experience, is that the LSP autosuggest is a bit slower that way than if the whole dev env was run on the host machine. In that case, Windows – Linux dual boot still looks preferable. Elixir changelog of the latest minor version (1.17.0) https://elixir-lang.org/blog/2024/06/12/elixir-v1-17-0-released Elixir changelog of 1.16.0 Compiler Diagnostics: Enhanced diagnostics with code snippets and ANSI coloring for errors like syntax errors, mismatched delimiters, and unclosed delimiters. Revamped Documentation: Learning materials moved to the language repository, enabling full-text search across API references and tutorials, with ExDoc autolinking to relevant documentation. Introduction of Cheatsheets and Diagrams: Starting with the Enum module and incorporating Mermaid.js diagrams in docs like GenServer and Supervisor. Anti-patterns Reference: Inclusion of anti-patterns categorized into code-related, design-related, process-related, and meta-programming, providing guidance for developers. Other Notable Changes: Addition of String.replace_invalid/2, a :limit option in Task.yield_many/2, and improvements in binary pattern matching. Building a Phoenix application with the latest version: 1.7.14 Before you proceed, make sure you have both Elixir and Erlang installed and both are up-to-date and the versions you have are compatible with each other. The first step is to get the Hex package manager: mix local.hex Don’t worry about Mix, it comes with Elixir – if you have Elixir installed then you have Mix as well. To install the Phoenix project generator, run the following command: mix archive.install hex phx_new You’re ready to generate your project: mix phx_new <your_project_name> Make sure you use a snake_case-d name, which also means that all letters should be lowercase! The command above sets up the project with a basic landing page as well as the server, router, migrations, db connection, and anything you need to get started. Speaking of database connection: PostgreSQL is the default one, but you can also switch to MySQL, MSSQL, or SQLite3 with the --database flag. If you aren’t planning on using databases with your app, use the --no-ecto flag when creating a new Phoenix app. Ecto is an Elixir package that – among many other things – helps establishing a database connection. Updating Phoenix If you just want to make sure that your app uses the latest version of Phoenix, you can simply update the version number in your mix.exs file. For patches, you shouldn’t run into any issues, but for minor updates, refer to the official Phoenix documentation to make sure you can update without a hitch: https://github.com/phoenixframework/phoenix/blob/main/CHANGELOG.md Phoenix changelog of the latest minor version (v1.7) Verified Routes: Introduces Phoenix.VerifiedRoutes for compile-time verified route generation using ~p sigil, enhancing reliability and reducing runtime errors. phx.new Revamp: The phx.new application generator has been improved to rely on function components for both Controller and LiveView rendering, ultimately simplifying the rendering stack of Phoenix applications and providing better reuse. The revamp also introduces improvements in the application generator, focusing on function components and Tailwind CSS for styling. This simplifies rendering and offers better style management. JavaScript Client Enhancements: New options for long poll fallback and debugging, improving WebSocket connectivity and logging. Various Bug Fixes and Enhancements: Across different versions (1.7.1 to 1.7.11), addressing issues in code reloader, controller, channel test, and more. Enhancements include dynamic port support for Endpoint.url/0, updated socket drainer configuration, and support for static resources with fragments in ~p. . Installing and updating LiveView If you’re using the latest version of phx.new and Phoenix, you’re in luck, because it has built-in support for LiveView apps. To get started with LiveView, you just simply get started with Phoenix: mix phx.new <your_project_name> On older versions you might need to add the --live flag, though it is the default since v1.6. Updating LiveView is as easy as updating the dependencies in your app’s mix.exs file to the latest version, and then run mix deps.get. The current latest version is 0.20.17. LiveView changelog of the latest minor version (0.20.17) https://hexdocs.pm/phoenix_live_view/changelog.html LiveView changelog of 0.20.14 (2024-03-13) Deprecations: The shift from older syntax and functions to new ones is crucial. This includes: Deprecating the ~L sigil in favor of ~H. Moving from preload/1 in LiveComponent to update_many/1. Transitioning from live_component/2-3 to <.live_component />. Replacing live_patch with <.link patch={…} />. Changing live_redirect to <.link navigate={…} />. Switching from live_title_tag to <.live_title />. Backwards Incompatible Changes: Removal of deprecated functions like render_block/2, live_img_preview/2, and live_file_input/2 in favor of new implementations (render_slot/2, <.live_img_preview />, <.live_file_input />). These changes can break existing code that hasn’t been updated. You can find the full changelog here: https://hexdocs.pm/phoenix_live_view/changelog.html#0-20-0-2023-09-22 Facing challenges in your Elixir development? Contact our team for professional help and get your project moving smoothly! * Ecto for Beginners RisingStack Engineering Ecto is a database wrapper and query generator for Elixir, so you can interact with databases in a functional and efficient way. In this guide we’ll cover the basics of Ecto, including setting up a project, defining schemas, running migrations Read More » Elixir Protocols & Behaviours for JavaScript/TypeScript Developers RisingStack Engineering Coming from TypeScript, the difference between behaviours and protocols in elixir might not be immediately obvious. Both of them look pretty much like an interface from two different angles. We’ll go into detail to try and clear up how they Read More » Elixir in Production: What Is It Used For? RisingStack Engineering We’ve already written a series of articles about why we think Elixir is a great choice, but don’t take our word for it – there are many success stories out there about using Elixir in production that not only prove *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/update-elixir-phoenix-liveview-latest-version/"
  },
  {
    "body": "* Menu * Contact us * Last updated: October 22, 2024 Search Search Popular ** Node.js * in the latest release. NAME RELEASED ACTIVE SUPPORT SECURITY SUPPORT LATEST Node 23 CURRENT 2024-10-15 2025-04-01 2027-06-01 23.0.0 Node 20 LTSLTS means long-term support. The acronym is often used to mark Node.js release lines that will be maintained and supported for an extended period. There are two separate kinds of LTS releases: Active and Maintenance. The Active release line often gets new features and other improvements beside security patches and bug fixes, and the Maintenance only gets the latter. It... 2023-04-18 2024-10-22 2026-04-30 20.18.0 In this article below, you’ll find changelogs and download / update information regarding Node.jsNode.js is an asynchronous event-driven JavaScript runtime and is the most effective when building scalable network applications. Node.js is free of locks, so there's no chance to dead-lock any process.! Node.js LTS & Current Download for macOS: 20.18.0 LTS macOS 23.0.0 Current macOS Node.js LTS & Current Download for Windows: 20.18.0 LTS Windows 32-bit 20.18.0 LTS Windows 64-bit 23.0.0 Current Windows 64-bit For other downloads like Linux libraries, source codes, Docker images, etc. please visit https://nodejs.org/en/download/ Node.js Release Schedule: Node.js v23 Default ESM in require(): Native ES modules can now be used with require() by default, simplifying module usage without experimental flags. Dropping Windows 32-bit Support: Node.js 23 no longer supports 32-bit Windows systems, focusing on modern platforms. Stable node –run Command: The --run command is now stable, making it easier to execute scripts directly from the command line. Enhanced Test Runner: Support for glob patterns in test runner coverage improves testing flexibility. Experimental Features: TypeScript integration, Web Storage API, and SQLite support have been introduced, improving versatility. Performance Boosts: On-disk code caching and improved buffer and filesystem performance enhance runtime efficiency. Node.js v22 * of this version. The full details are explained here. Integrated WebSocket Client: The WebSocket client is now enabled by default, facilitating real-time data exchange directly from Node.js applications without the need for experimental flags. V8 JavaScript Engine Update: The V8 engine has been upgraded to version 12.4.254.14, which may improve performance and support for modern JavaScript features. Support for ESM Graphs: Node.js 22 introduces support for synchronously requiring ESM (ECMAScript Module) graphs, allowing for more flexible and efficient module usage. FileSystem Enhancements: The fs module now includes glob and globSync functions, expanding capabilities for pattern matching in file operations. Command Line Improvements: A new CLI option, node --run, lets you execute scripts defined in package.json directly, streamlining workflow processes (experimental feature). Stream Performance Tuning: The default highWaterMark for stream buffering has been increased, potentially improving I/O performance under heavy loads. Maglev Optimization: On supported architectures, the Maglev backend for V8 is enabled, aiming to boost JavaScript execution speeds. Additional Changes: The watch module has been marked stable, indicating readiness for production use. The AbortSignal creation performance has been enhanced, which could improve responsiveness in applications using abortable operations. Experimental features like import assertions have been dropped, reflecting a shift towards stabilizing functionality. Remember, Node.js 22 will transition to long-term support (LTS) in October. Node.js v21 The latest major version of Node.js has just released with a few new interesting experimental features and a lot of fixes and optimization. You can find our highlights in this article: https://blog.risingstack.com/nodejs-21/ Built-in WebSocket client: A browser-compatible WebSocket implementation has been added to Node.js with this new release as an experimental feature. You can give it a go using the --experimental-websocket flag. The current implementation allows for opening and closing of websocket connections and sending data. flush option for the writeFile type filesystem functions: Up until now, it was possible for data to not be flushed immediately to permanent storage when a write operation completed successfully, allowing read operations to get stale data. In response, a flush option has been added to the fs module file writing functions that, when enabled, forces data to be flushed at the end of a successful write operation using sync. Addition of a global navigator Object: This new release also introduces a global navigator object to take steps towards enhancing web interoperability. We can now access hardware concurrency information through navigator.hardwareConcurrency, the only currently implemented method on the object. Array grouping: There is a new static method added to Object and Map, groupBy(), that groups the items of a given iterable according to a provided callback function. Additional changes: Both the fetch and the webstreams modules are now marked as stable after receiving a few changes with this version. A host of performance improvements as usual with any new release. WebAssembly gets extended const expressions Another new experimental flag, --experimental-default-type, has been added that allows setting the default module type to ESM The globalPreload hook has been removed, it’s functionality replaced by register and initialize Glob patterns are now supported in the test runner Learn More Node.js from RisingStack At RisingStack we’ve been writing JavaScript / Node tutorials for the community in the past 5 years. If you’re beginner to Node.js, we recommend checking out our Node Hero tutorial series! The goal of this series is to help you get started with Node.js and make sure you understand how to write an application using it. See all chapters of the Node Hero tutorial series: Getting Started with Node.js Using NPM Understanding async programming Your first Node.js HTTP server Node.js database tutorial Node.js request module tutorial Node.js project structure tutorial Node.js authentication using Passport.js Node.js unit testing tutorial Debugging Node.js applications Node.js Security Tutorial How to Deploy Node.js Applications Monitoring Node.js Applications As a sequel to Node Hero, we have completed another series called Node.js at Scale – which focuses on advanced Node / JavaScript topics. Take a look! * Node.js 23: Major Updates, Experimental Features, and Improved Performance * 23 is here, and it’s bringing some exciting changes and improvements to the runtime. With this release, Node.js 23 takes over as the ‘Current’ version, replacing Node.js 22, which is moving into Long-Term Support (LTS) later this month. What’s Read More » Node.js 22 and 22.1: Stable WebSocket and On-Disk Code Caching RisingStack Engineering Let’s explore the updates brought by Node.js 22, which promises enhancements in performance and development flexibility. Direct download links are available here. * in the latest release. Stable WebSocket Support: Node.js 22 Read More » Node.js 21 is here with Websocket RisingStack Engineering The latest major version of Node.js has just released with a few new interesting experimental features and a lot of fixes and optimization. You can find our highlights from the release notes. Built-in WebSocket client A browser-compatible WebSocket implementation has *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/update-node-js-latest-version/"
  },
  {
    "body": "* Menu * Contact us Elixir in Production: What Is It Used For? * ** Elixir We’ve already written a series of articles about why we think Elixir is a great choice, but don’t take our word for it – there are many success stories out there about using Elixir in production that not only prove that the language is mature enough to be a solid choice, but it can be even more effective than the usual frequently used languages and frameworks thanks to the features provided by BEAM and OTP. From startups to established enterprises, our examples clearly outline Elixir’s strengths: Scalability – Effortlessly handles sudden surges in traffic and data. Fault Tolerance – Maintains stability and uptime even during system failures. Cost Efficiency – Reduces infrastructure needs. After understanding how companies like Discord integrated Elixir to handle real-time communication and how Pinterest gained significant cost savings with it, we hope you’ll find Elixir inspiring enough to take a look at. Incredible Developer Productivity with Elixir at Remote.com Remote.com is built on Elixir from the ground up, for good reasons. “It offers incredible developer productivity due to its intuitive and straight-forward syntax, its well-designed standard libraries, and its convenient level of abstraction.“ – according to Peter Ullrich, a Senior Elixir Engineer at Remote. “We rarely have to reinvent the wheel,” says Peter, because Elixir provides them with the tools they need to improve their services while maintaining their desired productivity levels at the same time. It’s no wonder why Elixir became a serious player in the webdev space: Phoenix, its web framework is one of the best choices for writing webapps. It’s concurrency-focused design allows effortless scalability. The Erlang VM (BEAM) is built in a “let it crash” philosophy, thatencourages developers to build applications that can gracefully handle failures and self-recover. When it comes to the ecosystem and particular use cases, Elixir proved to be a great choice for Remote.com. For data processing they use Broadway, for multimedia processing Membrane. “Its recent ventures into machine learning (Nx) and collaborative development (Livebook) put Elixir on the map of many more industries and allowed it to be used for a whole range of new use-cases.” “It Just Works” – Elixir by Accident at Multiverse Most companies on this list chose Elixir after careful consideration and because of its clear advantages. Multiverse, a UK-based Ed-Tech startup (with a $220M Series D behind them), is built with Elixir simply because when the company was founded, an external agency was contracted to build the initial platform. And they happened to be an Elixir shop. However, while most companies seem to try to get rid of their initial platform by rebuilding it from the ground up, or just barely keeping it running with endless “quick fixes”, Multiverse considers itself very lucky to have Elixir as the foundation by this “lucky accident.” Razvan, a Senior Engineering Manager at Multiverse, is confident that it will help Multiverse scale, and they – too – are in contact with the creators of the language and the frameworks they use. Although the community is small compared to other languages, it is very active and supportive. This is something we especially love about Elixir at RisingStack, too. “I’m coming from a JavaScript background and I can say that the first thing that amazed me is that Elixir, well, just works.” When Razvan joined the team with little to no experience, he was able to get their Elixir platform up and running in a couple of hours without any glitches. The environment feels robust, cohesive and you don’t waste hours and hours trying to run it, to debug a cryptic error. The Elixir docs are amazing. It is actually useful, to the point and with examples. The tooling is powerful and testing is a first class citizen of Elixir development. Functional programming is just awesome! On top of that, the frameworks aren’t too bad either! “We’re currently using Elixir with Phoenix and LiveView, and our engineers are very happy with that, mostly because they don’t have to switch between languages all the time.” – said Razvan. Less Servers, Same Performance at Pinterest Pinterest estimates that it has saved about $2 million per year in server costs since it successfully adopted Elixir. Security, scalability, and fault tolerance are all important aspects of a system, but we can’t ignore the economical side of keeping it running – we have to think about costs too. The engineering team at Pinterest tried to find a solution for all of the above, and Elixir provided it for them. Pinterest managed to replace 200 servers running Python with just 4 running on Elixir, while providing the same performance as before. Besides, maintenance became much easier as well. Here are some highlights from the interview for those who are in a rush: Pinterest chose Elixir because they were looking for a system that was easy for programmers to understand. Elixir’s main strengths: friendly syntax, powerful metaprogramming features, and incorporation of the Actor model. Besides the cost saving, the performance and reliability of the systems went up despite running on drastically less hardware. In total, Pinterest reduced its server size by about 95% thanks to Elixir. Despite running on less hardware, the response times dropped significantly, as did errors. How Two Elixir Nodes Outperformed 20 Ruby Nodes by 83x Veeps is a streaming service that also offers ticket-based online events where it’s not uncommon for fans to immediately jump on ticket sales once an event is announced. While the previous Ruby on Rails system was able to service thousands of users, or even tens of thousands, the engineering team found it next to impossible to scale it further to allow more visits while maintaining performance at the same time. Vincent Franco, the CTO, convinced management to make the switch to Elixir to future-proof the company’s tech stack. It took about 8 months to rewrite everything in Elixir and Phoenix, but it turned out that the effort was worth it. Two Elixir nodes replaced 20 Ruby on Rails nodes, and those two can handle 83x more users than before. The project was managed by an external company due to a lack of internal experience with Elixir, but by the time it was finished, Veeps was able to establish an internal team that can build and expand on the newly built Elixir-based systems. Elixir Powers Emerging Markets – Literally Access to electricity is a given in developed countries, but still a rare commodity in other parts of the world. SparkMeter aims to change that with their grid-management solutions. They operate smart meters that communicate with a grid management unit which is connected to cloud servers. This may not sound like an unsolvable challenge so far, but there are additional complexities. The servers and the grid management unit communicate via cellular network which is prone to failure, and the electricity powering the systems may also go down time-to-time. Fault-tolerance was crucial in circumstances like this, And Elixir together with the Nerves platform is the perfect choice for this situation. Nerves is an open-source platform that combines the BEAM virtual machine and Elixir ecosystem to easily build and deploy embedded systems for production. A highlight of this setup is that it can handle cases when parts of the system are down. Finding capable engineers was also a problem, but after the project started with outside consultants, their in-house team was trained in Elixir to be able to maintain and further develop the system as a long-term solution which worked out really well. In the new system, the grid management unit communicates with the meters via radio, using Rust for hardware control and Elixir Ports for data processing. Communication with cloud servers over 3G or Edge required a custom protocol to minimize bandwidth usage, crafted uniquely to fit their specific needs. Additionally, their system includes a local web interface accessible via Wi-Fi, using Phoenix LiveView, and a cloud-based system that processes data through a custom TCP server and a Broadway pipeline, storing it in PostgreSQL. This robust setup allows SparkMeter to maintain high availability and manage its resources efficiently, despite the challenging environments it operates in. The team also managed to reduce the complexity of the previous architecture by replacing the old one that was using Ubuntu and Docker for the system level, Python/Celery and RabbitMQ for asynchronous processing, and Systemd for managing starting job processes with just Elixir and Nerves. Multiplayer With Elixir: 10000 Players in the Same Session X-Plane 11 is one of the best flight simulators in the world, aiming for unparalleled accuracy for even pilots to practice in a safe environment. It used to have a simple peer-to-peer solution for multiplayer, but the developers wanted to change that. This proved to be a huge challenge: the team did not have experience in the subject, but they needed a solution that could support way more concurrent players than an average multiplayer game, and it needed to do that with as much accuracy as possible. With a criteria like this, simply adding more servers was not an adequate solution so they excluded Ruby and Python among others. The top three choices were Rust, Go and Elixir: Elixir won because of its fault-tolerance capabilities and predictable latency. In addition to that, Elixir and Erlang have built-in support for parsing binary packets which made the implementation easier. The whole project took only 6 months, and that included the time to learn Elixir because the lead developer had no prior experience with the language. It’s so lightweight that the entire player base in North America is served by a single server running on 1 eight-core machine with 16GB of memory. The solution is open-source if you want to take a look. How PepsiCo Uses Elixir Many companies internally build their own tools for specific purposes, and PepsiCo is no exception. The Search Marketing and Sales Intelligence Platform teams handle immense amounts of data coming from their search partners that needed a support of a robust platform. This complex data pipeline is managed by the Data Engineering team, which initially collects and stores the data in the Snowflake Data Cloud. An Elixir application then processes this data and routes it to PostgreSQL or Apache Druid, depending on its characteristics. A Phoenix application serves this processed data to internal teams and interacts with third-party APIs. The team used Elixir to create a domain-specific language that translates business queries into data structures. It’s easy for them to extend it as they need and provides a solid foundation, even when connecting to several different third-party APIs. David Antaramian, a Software Engineering Manager at PepsiCo praises the Erlang runtime and its standard library, particularly for managing large datasets without frequently accessing the database. He emphasizes the use of Erlang’s in-memory table storage, ETS, which allows them to efficiently store hundreds of thousands of rows. This capability is crucial for handling the massive amounts of data PepsiCo deals with. The Elixir ecosystem effectively complements Erlang, supporting both front-end and server-side operations at PepsiCo. The company’s front-end, built in React, connects with the server using the Absinthe GraphQL toolkit atop the Phoenix web framework. For database interactions, the Ecto library manages communications with PostgreSQL. Additionally, the esaml and Samly libraries are used for authentication across PepsiCo’s network, demonstrating a practical application of tools from the Erlang and Elixir communities. 4 Billion Messages Every Day on Discord With Elixir Discord is one of the most famous adopters of Elixir since they have been building the platform on it from day one. Beside a Python API in a monolith architecture, Discord has about 20 different services built with Elixir. However, this choice was not without risk. In 2015, when Elixir v1.0 came out and Discord was founded, the team gambled and bet on Elixir, hoping the language would mature and evolve over time. Their bet paid off wonderfully, as seen from the growing user base. Jake Heinz, Lead Software Engineer at Discord said about Elixir: “In terms of real-time communication, the Erlang VM is the best tool for the job. It is a very versatile runtime with excellent tooling and reasoning for building distributed systems”. Those 20+ services are powered by 400-500 Elixir servers, and amazingly only maintained by a handful of engineers. The team uses Distributed Erlang, facilitated by etcd for service discovery and configuration, to create a partially meshed network rather than a fully connected one. This setup allows for efficient and scalable communication across Discord’s numerous services, including their audio and video platforms, which operate over 1000+ nodes. When needed, engineers from other teams can collaborate with the Chat Infrastructure Team operating these services and build on it with their assistance. Discord also uses Rust to complement Elixir, with the help of the Rustler project to bridge the gap between the two languages by hooking a custom data structure built in Rust directly into the Elixir servers. The flexibility of it allows engineers to solve uptime-related problems often in just a few minutes. Although none of the engineers had prior experience with Elixir before joining Discord, they quickly pick up the pace and thanks to Erlang VM, even able to efficiently debug a live system if needed. Conclusion As seen from these case studies, most companies needed not only scalability but also ease of maintenance and future-proofing – Elixir was able to provide all of these, thus proving its maturity for an environment that is more than ready for use in production. Our team also works with Elixir more and more often, utilizing it in situations where mighty JavaScript falls short. If you need advice with Elixir, reach out to us for a chat! * Ecto for Beginners RisingStack Engineering Ecto is a database wrapper and query generator for Elixir, so you can interact with databases in a functional and efficient way. In this guide we’ll cover the basics of Ecto, including setting up a project, defining schemas, running migrations Read More » Elixir Protocols & Behaviours for JavaScript/TypeScript Developers RisingStack Engineering Coming from TypeScript, the difference between behaviours and protocols in elixir might not be immediately obvious. Both of them look pretty much like an interface from two different angles. We’ll go into detail to try and clear up how they Read More » Elixir Cheatsheet: A Node.js Developer’s Transition Guide RisingStack Engineering We’ve previously written about the reasons for trying Elixir out, as well as a how-to-get-started guide. However, there is still a long way ahead of you after firing up your thrusters. While the tutorial and documentation of both Elixir and *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/what-is-elixir-used-for/"
  },
  {
    "body": "* Menu * Contact us Why Elixir? Phoenix & LiveView are unmatched for Modern Web Apps * *ngstack.com In this article: Tamas Kadlecsik Elixir Let’s face it: In the JavaScript world, we still don’t have a killer app. We’ve previously written about Redwood and Blitz, two technologies that seemed promising at the time, but they’re still not really there, and we do not see them taking the community by storm. (You can read about them here: RedwoodJS vs. BlitzJS: The Future of Fullstack JavaScript Meta-Frameworks) On the other hand, Next.js has become the de-facto standard for full-stack development, but it’s still far from becoming a kind of “React on Rails”, and compared to other frameworks, a Next.js project is definitely not smooth sailing either. In our meta-framework post, we briefly mentioned Elixir’s killer app, Phoenix, and LiveView. If you felt it was foreshadowing what was to come, you were right. Because of Phoenix and LiveView Phoenix is basically Rails for Elixir, but unlike Rails, it scales really well. And just like Rails, it comes with a powerful code generator: you simply define your data model, and a full-stack CRUD feature is generated for you with migrations, models, basic business logic, templates, components, and forms. It uses Ecto, which provides migrations, query builder model definitions, and validations for those models… and forms too! You can create forms based on your Ecto models, and Phoenix handles the form validation for you automatically, so you don’t need to repeat the same thing in multiple places. But Phoenix provides much more: Do you need authentication? Just run `phx gen.auth`, and you have everything from registration through login to email validation and forgotten password. You need to notify a subset of clients of events? Use Phoenix.Channel. Need to see who’s online? Phoenix.Presence tells you exactly that. And the list goes on. To explain why LiveView is awesome, we’ll need to dig a bit deeper into why it’s superior to SPAs first. But long story short, the speed and simplicity provided by Phoenix and LiveView are just unimaginable after working on SPAs for almost a decade. How fast, you ask? Look at this video where a live twitter clone gets implemented in 17 minutes. So just to answer my own question: Why Elixir? Because of Phoenix LiveView. What’s wrong with the Web today? We used to build backends for web pages. They were simple but weren’t really interactive. Then came mobile apps, and we loved the interactivity. We wanted to have the same in the browser, so we started building web Single-Page Apps (SPAs). While the architecture of a SPA does not seem that much different from a simple set of pages, the Client-Server separation made everything a lot more complicated. Previously, we had one system that simply generated HTML strings, and we added some JavaScript to it here and there. Now instead, we have a backend API and a frontend app that are essentially two different systems with their own states, their own validations, and their own storage (think LocalStorage and IndexedDB). We started to not only deliver HTML with CSS and some JavaScript logic for DOM manipulation to the browser but also a whole framework with a complex application. Inevitably, load times became slower and slower as the amount of code we sent over the wire kept growing. This is not a problem for applications that we open and use throughout the day, like webmail clients, instant messaging platforms, or to-do apps, but we use these frameworks for literally everything. And why? Because we have to. Take, for example, a simple listing site, which sounds like a good target for a simple web page: it has to be SEO friendly, listings have to be loaded quickly, and at first glance, it seems pretty static. Still, it needs interactive filters, navigation, and loading animations, so even though the majority of the content could be easily generated on the server, we end up needing to write a full-fledged web app for that too. So we needed to figure out how to render JavaScript on the server side. Or at least we thought. So we started to do just that and started using Next.js, Nuxt, and SvelteKit. But rendering JavaScript on the backend is ridiculously resource-heavy. While in the olden days, we simply needed to replace variables in an HTML string template, now we need to run JS on the server as a browser would so we can generate the same thing. So while we have the possibility to use SSR, we should only rely on it when we can easily cache the generated pages on a CDN. Well, if it changes so rarely, we can statically generate it, can’t we? But for now, most frameworks handle SSG in an “all or nothing” manner, so if the data behind one-page changes, we need to regenerate the whole site. So in those cases, we better rely on Incremental Static Regeneration (ISR), where the page only gets generated when it’s requested for the first time and gets cached for a given period of time. If the page gets accessed after its TTL has expired, the stale page gets served to the user, but a new version is generated in the background. So we’re juggling with SSR, SSG, and ISR, which makes it even more difficult to reason about our system. Mind you: this whole complexity is there so we can have some interactivity while forgoing the need to show our users a loading bar when they first navigate to our page. Web development really got out of hand in the last decade. LiveView to the rescue The whole problem arose because our toolset is binary: A site is either interactive or simple. No middle ground, while the majority of the apps we build could do with some sparkle form validation, navigation, and filtering and could leave the other parts static. The idea behind LiveView is fairly simple: You create templates that get rendered into HTML strings, then ship them with minuscule JavaScript that latches on to form controls and links. The JS lib also builds a WebSocket connection between the client and the server. Through that connection, interactions get streamed to the server. You update the state on the backend as you would do with react, and the diff between the old state and the new state gets sent to the frontend through the socket. Then the LiveView JS lib applies said diff to the DOM. And that’s it. When the user navigates to our page, LiveView replaces the variables in the template just like any other simple template engine would do instead of mimicking a browser on the server. It’s fast, interactive, and simple, just as we needed. And all this using ~1000 lines of JavaScript (88Kb without gzip and minification). Why we’ll help you learn Elixir So if you’re a startup or working on side projects and you build web apps, you should definitely start learning Elixir, Phoenix, and LiveView. It might take a couple of weeks to get productive, but the fact that with them, one person can achieve what 3-5 other engineers can do in the same amount of time with other tools starts to pay dividends quickly. Not to mention that they make web development fun again. To help you with your journey, we’ll start writing tutorials specifically for you, JavaScript developers, starting with a how-to-get-started guide and a cheat sheet. * Ecto for Beginners RisingStack Engineering Ecto is a database wrapper and query generator for Elixir, so you can interact with databases in a functional and efficient way. In this guide we’ll cover the basics of Ecto, including setting up a project, defining schemas, running migrations Read More » Elixir Protocols & Behaviours for JavaScript/TypeScript Developers RisingStack Engineering Coming from TypeScript, the difference between behaviours and protocols in elixir might not be immediately obvious. Both of them look pretty much like an interface from two different angles. We’ll go into detail to try and clear up how they Read More » Elixir in Production: What Is It Used For? RisingStack Engineering We’ve already written a series of articles about why we think Elixir is a great choice, but don’t take our word for it – there are many success stories out there about using Elixir in production that not only prove *i*es L*i*es **.",
    "url": "https://blog.risingstack.com/why-elixir/"
  },
  {
    "body": "* Follow Report Abuse Abhishek Jaiswal Passionate about building scalable solutions using the MERN stack, Docker, Kubernetes, and AWS. Skilled in CI/CD, Agile, and cloud technologies. India Joined on Aug 25, 2024 https://abhishekjaiswal-portfolio.vercel.app/ Education Technocrats Group of Institutions Pronouns He / Him Work Student More info about @abhishekjaiswal_4896 Badges 1 We*t * * Skills/Languages Java | Javascript | ReactJs | NodeJs | MongoDb | NextJs | Typescript | Docker | Kubernetes | Jenkins | Ansible | Terraform | CI/CD Pipeline | AWS Currently learning MERN Stack | NextJs | Redis | Ansible | Terraform | Devops CI/CD pipeline Currently hacking on Devops and Full stack web application scalable projects Available for Scalable Software development, Devops and Cloud Engineering Roles and Collaborative Tech Initiatives. 12 posts published 2 comments written 39 tags followe**bhishek Jaiswal? * Abhishek Jaiswal. * * Abhis*iswal Follow Nov 7 * #webdev #javascript #node #opensource 3 reactions * * *d * Abhis*iswal Follow Nov 5 * #* 15 * A Beginner's Guide to Contributing to Open Source Using Git Commands: Abhis*iswal Follow Oct 19 A Beginner's Guide to Contributing to Open Source Using Git Commands: #webdev #opensource #git #devchallenge 2 reactions Add Comment 4 * Ansible: Automation for the Modern DevOps Engineer Abhis*iswal Follow Oct 14 A Comprehensive Guide to Ansible: Automation for the Modern DevOps Engineer #devops #cloud #webdev #node 2 * Performance Tuning in Node.js Abhis*iswal Follow Oct 9 Performance Tuning in Node.js #webd* *ad Managing Rate Limiting Abhis*iswal Follow Sep 15 Managing Rate Limiting #webdev #node #api #*t 5 min read Redis: The Ultimate Guide to In-Memory Data Structure Store Abhis*iswal Follow Sep 10 Redis: The Ultimate Guide to In-Memory Data Structure Store #webdev #javascript #database #learning * Introduction to WebRTC Abhis*iswal Follow Sep 3 Introduction to WebRTC #webdev #javascript #api #node 47 reactions 10 comments 3 min read Building a Reverse Proxy Backend Server Abhis*iswal Follow Sep 2 Building a Reverse Proxy Backend Server #webdev #programming #node #api 2 * Introduction to Serverless Backend Abhis*iswal Follow Sep 1 Introduction to Serverless Backend #webdev #javascript #cloud #devops 8 reactions 4 comments 4 *onsor Neon * ",
    "url": "https://dev.to/abhishekjaiswal_4896"
  },
  {
    "body": "* 1 A*ead 0 * 1 * Abhishek Jaiswal Posted on Nov 8 1 * #webde* This guide will walk you through the process of building a SaaS application from scratch with detailed steps for each component, covering both development and system design. Key Sections of this Guide Introduction to SaaS and MERN Stack Planning the SaaS Architecture Setting Up the MERN Stack Designing the Backend with Node.js and Express Building a Scalable API Creating a User Authentication System Designing the Frontend with React Implementing State Management and API Integration Handling Payments and Subscriptions Integrating Analytics and Monitoring Deploying and Scaling the Platform Best Practices for SaaS Platforms 1. Introduction to SaaS and MERN Stack A SaaS platform is a cloud-based service where software is hosted and made accessible to users over the internet. The MERN stack—MongoDB, Express, React, and Node.js—is highly suitable for SaaS platforms as it enables full-stack development with JavaScript, seamless data transfer with JSON, and offers scalability. 2. Planning the SaaS Architecture A well-thought-out system design is crucial for scalability, maintainability, and performance. Key architectural components for a MERN-based SaaS platform include: Frontend Layer: Built with React to create a responsive UI. Backend API Layer: Node.js and Express handle the business logic and serve as the middle layer. Database Layer: MongoDB stores user and product data. Authentication and Authorization: Protect the system with JWT tokens and access control. Payment System: For handling subscriptions. Load Balancing and Scaling: Helps maintain consistent performance under heavy traffic. 3. Setting Up the MERN Stack 3.1. Project Structure Start by setting up a structured project environment: client/: React frontend server/: Node.js and Express backend database/: MongoDB models and configurations config/: Configurations for environment variables, authentication, etc. 3.2. Installing Dependencies Frontend: React, Redux, Axios, etc. Backend: Express, Mongoose (MongoDB ORM), bcrypt (for password encryption), dotenv (for environment management), and Stripe SDK (for payments). 4. Designing the Backend with Node.js and Express Create a scalable, RESTful backend with Node and Express. 4.1. Setting up Express Server * mongoose = require('mongoose'); const dotenv = require('dotenv'); dotenv.config(); const app = express(); app.use(express.json()); // MongoDB connection mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true }) .then(() => console.log('MongoDB connected')) .catch(err => console.error('MongoDB connection error:', err)); app.listen(process.env.PORT || 5000, () => { console.log('Server running on port 5000'); }); 4.2. Creating Models Define MongoDB models such as User, Subscription, Product, and Invoice using Mongoose. 5. Building a Scalable API 5.1. User Management Create routes for: Registration and Login: POST /api/auth/register and /api/auth/login Profile Management: GET/PUT /api/users/profile 5.2. Product and Subscription Management Allow users to view and subscribe to products: Products: GET /api/products Subscription: POST /api/subscription/subscribe 6. Creating a User Authentication System Implement authentication with JWT for secure, stateless sessions. Protect private routes with middleware. 6.1. JWT Authentication Middleware const jwt = require('jsonwebtoken'); const authenticateToken = (req, res, next) => { const token = req.header('Authorization').split(' ')[1]; if (!token) return res.status(401).json({ message: 'Access denied' }); try { const verified = jwt.verify(token, process.env.JWT_SECRET); req.user = verified; next(); } catch (err) { res.status(400).json({ message: 'Invalid token' }); } }; 7. Designing the Frontend with React 7.1. Setting Up the Project npx create-react-app client Organize the project: components/: Common UI components pages/: Core pages (e.g., Login, Dashboard, Product) services/: API functions for interacting with the backend redux/: Redux store for state management 7.2. Routing and Navigation Use React Router for seamless navigation between pages (e.g., /login, /dashboard, /product/:id). 8. Implementing State Management and API Integration 8.1. Using Redux for Global State Set up Redux to handle user sessions, product data, and subscription statuses. 8.2. API Integration Use Axios to call backend APIs and manage requests from components. import axios from 'axios'; export const login = async (credentials) => { return await axios.post('/api/auth/login', credentials); }; 9. Handling Payments and Subscriptions Integrate Stripe for secure payment processing. 9.1. Creating Stripe Endpoints Use Stripe’s SDK in your backend to manage subscriptions. const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY); app.post('/api/subscribe', async (req, res) => { const { token, productId } = req.body; const subscription = await stripe.subscriptions.create({ customer: token.customerId, items: [{ plan: productId }], }); res.json(subscription); }); 9.2. React Payment Flow Use the Stripe React library to add a payment form for users to enter their payment details. On form submission, send the tokenized payment data to the backend. 10. Integrating Analytics and Monitoring Set up analytics and monitoring tools, such as Google Analytics and LogRocket, to track user behavior and application performance. For backend monitoring, tools like Datadog or Prometheus can be used to track API health, errors, and latency. 11. Deploying and Scaling the Platform Frontend: Deploy on Vercel or Netlify. Backend: Deploy on AWS or DigitalOcean with a load balancer for scaling. Database: Use MongoDB Atlas for a managed, scalable MongoDB cluster. Caching: Use Redis for faster data retrieval. 12. Best Practices for SaaS Platforms Code Structure: Maintain a clean code structure. Security: Always secure sensitive data and routes. Logging and Error Handling: Implement comprehensive logging and error-handling. Scaling: Design your application with horizontal scaling in mind. Monitoring: Set up real-time monitoring to track user activity and errors. _SurveyJS Promoted * Simplify data collection in your JS app with a fully integrated form management platform. * ty*me analytics & more. Integrates with any backend system, giving you *. Learn more Top comments (0) * * * UI Libraries for Surveys and Forms SurveyJS lets you build a JSON-based *, giving you *. * ty*me analytics & more. Learn more Read next Building an Angular CRUD App with a Go API Amit Yadav - Nov 4 What is JavaScript ? Muhammad Bilal - Nov 4 Using CDC or Outbox pattern in microservices for decentralized data propagation Meidi Airouche - Nov 4 Claude AI now runs JavaScript, Python beats JavaScript on GitHub, new Node.js versions and more James - Nov 3 Abhishek Jaiswal Follow Passionate about building scalable solutions using the MERN stack, Docker, Kubernetes, and AWS. Skilled in CI/CD, Agile, and cloud technologies. Location India Education Technocrats Group of Institutions Pronouns He / Him Work Student Joined Aug 25, 2024 More from Abhishek Jaiswal * #webdev #javascript #node #opensource Understanding *cript #node #backenddevelopment * #* Neon **. Create Account → 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/abhishekjaiswal_4896/creating-a-saas-software-as-a-service-platform-using-the-mern-stack-11kd"
  },
  {
    "body": "* 3 Add reaction 2 Like 0 Unicorn 1 Exploding Head 0 * 0 * Abhishek Jaiswal Posted on Nov 7 2 1 * #webdev #javascript #node #opensource In the world of web development, handling file uploads is a common requirement. Whether it's profile pictures, documents, or images, many applications need to upload and store files securely and efficiently. When using Node.js with Express, Multer is one of the best libraries available to handle this task smoothly. In this blog, we'll cover everything you need to know about using Multer in Node.js, including installation, configuration, storage options, file filtering, and common use cases with code examples. Table of Contents What is Multer? Installation Setting Up Multer with Express Understanding Storage Options Disk Storage Memory Storage Cloud Storage (S3 example) Filtering Files by Type Limiting File Size Handling Multiple File Uploads Error Handling in Multer Real-World Use Cases Conclusion What is Multer? Multer is a middleware for handling multipart/form-data, a commonly used format for uploading files in web applications. It is specifically designed to work with Express and helps in managing file uploads by providing: File Storage: Configurable storage options to store files on the server or other storage services. File Filtering: Allows setting restrictions on file types. Size Limiting: Helps in limiting file sizes to prevent excessive data uploads. Installation To get started with Multer, install it via npm: npm install multer Setting Up Multer with Express Let's begin by setting up a basic file upload handler using Multer in an Express application. Here’s how to start: * multer = require('multer'); const app = express(); // Configure Multer for basic usage const upload = multer({ dest: 'uploads/' }); // Destination folder for uploaded files // Single File Upload Route app.post('/upload', upload.single('file'), (req, res) => { res.send('File uploaded successfully!'); }); app.listen(3000, () => console.log('Server running on port 3000')); In this example: upload.single('file'): This middleware processes a single file uploaded with the key file. Uploaded files will be stored in the uploads/ folder. Understanding Storage Options Multer provides two primary storage options: Disk Storage: Stores files locally on the server. Memory Storage: Stores files in memory as Buffer objects (useful for processing files in memory). 1. Disk Storage Disk storage provides more control over file naming and destination paths. const storage = multer.diskStorage({ destination: (req, file, cb) => cb(null, 'uploads/'), // Folder location filename: (req, file, cb) => { const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9); cb(null, uniqueSuffix + '-' + file.originalname); } }); const upload = multer({ storage: storage }); destination: Specifies the folder for file uploads. filename: Allows customization of the file name (e.g., adding a timestamp for uniqueness). 2. Memory Storage In memory storage, files are stored as buffers, which is useful for short-lived files or for handling uploads without saving files to disk. const upload = multer({ storage: multer.memoryStorage() }); Cloud Storage: Multer with AWS S3 For production applications, storing files directly on cloud storage (like AWS S3) is often preferable. To integrate with S3, use multer-s3. npm install aws-sdk multer-s3 const aws = require('aws-sdk'); const multerS3 = require('multer-s3'); aws.config.update({ region: 'your-region' }); const s3 = new aws.S3(); const upload = multer({ storage: multerS3({ s3: s3, bucket: 'your-s3-bucket-name', metadata: (req, file, cb) => cb(null, { fieldName: file.fieldname }), key: (req, file, cb) => cb(null, Date.now().toString() + '-' + file.originalname) }) }); This setup will upload files directly to the specified S3 bucket, bypassing local storage. Filtering Files by Type You can filter files by type to accept only specific file formats (e.g., images). Use the fileFilter option. const fileFilter = (req, file, cb) => { // Accept only image files if (file.mimetype.startsWith('image/')) { cb(null, true); // Accept file } else { cb(new Error('Only image files are allowed!'), false); // Reject file } }; const upload = multer({ storage: storage, fileFilter: fileFilter }); Limiting File Size To prevent large files from being uploaded, set a limits option. Here’s how to limit the file size to 1MB: const upload = multer({ storage: storage, limits: { fileSize: 1 * 1024 * 1024 } // 1 MB limit }); Handling Multiple File Uploads Multer also supports multiple file uploads: // For multiple files with the same field name app.post('/uploadMultiple', upload.array('files', 5), (req, res) => { res.send('Files uploaded successfully!'); }); // For multiple fields with different field names const uploadMultiple = multer().fields([ { name: 'file1', maxCount: 1 }, { name: 'file2', maxCount: 2 } ]); app.post('/uploadMultipleFields', uploadMultiple, (req, res) => { res.send('Multiple files uploaded successfully!'); }); upload.array('files', 5): Allows up to 5 files to be uploaded under the same field. upload.fields: Enables handling files with different field names. Error Handling in Multer Proper error handling is crucial for a smooth user experience. Multer can throw several types of errors, which you can handle like this: app.post('/upload', (req, res) => { upload.single('file')(req, res, (err) => { if (err instanceof multer.MulterError) { // Multer-specific error res.status(500).send('Multer error: ' + err.message); } else if (err) { // General error res.status(500).send('Error: ' + err.message); } else { res.send('File uploaded successfully!'); } }); }); Real-World Use Cases Here are some real-world applications for using Multer: Profile Image Upload: Allow users to upload profile pictures, store them on the server or in S3, and save the file path in a database. Document Storage: Store user-submitted documents (e.g., resumes, PDFs) with custom storage and filtering configurations. Media Files in E-commerce: Enable vendors to upload product images, restrict the file types and sizes, and store them on cloud storage for easy retrieval. Conclusion Multer simplifies file handling in Node.js applications by providing flexible storage options, file filtering, and handling various upload requirements, from single files to multiple files. Whether you’re building a small app or a production-level application with file handling needs, Multer has you covered. Happy Coding! 🚀 Sentry Promoted * Hydration errors suck But Sentry can help you debug them. Read full post → ** Read next String - JavaScript Challenges Mitchell - Oct 29 Django bookmark management software Piotr - Oct 29 What’s the Best Way to Market Your SaaS as a Solo Developer? Dusan Petkovic - Oct 29 🛠️ ¿Cómo actualizar tus paquetes de Go (Golang) de manera eficiente?🛠️ Roberto Morais - Oct 29 Abhishek Jaiswal Follow Passionate about building scalable solutions using the MERN stack, Docker, Kubernetes, and AWS. Skilled in CI/CD, Agile, and cloud technologies. Location India Education Technocrats Group of Institutions Pronouns He / Him Work Student Joined Aug 25, 2024 More from Abhishek Jaiswal * #webde* Understanding *cript #node #backenddevelopment * #* Heroku *referenc* 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/abhishekjaiswal_4896/handling-file-uploads-in-nodejs-with-multer-a-comprehensive-guide-1f7e"
  },
  {
    "body": "* 3 Add reaction 2 Like 1 *s 0 Fire 0 Jump to Comments 0 * Abhishek Jaiswal Posted on Nov 6 2 1 Understanding *cript #node #backenddevelopment The Model-View-Controller (MVC) pattern is one of the most popular architectural patterns in web development. By dividing an application into three interconnected components — Model, View, and Controller — MVC promotes organized, maintainable, and scalable code. Node.js, with its asynchronous processing and vast ecosystem, is an excellent choice for building MVC-based applications, especially for web and API development. This guide explores the MVC pattern with Node.js, taking you through its benefits and a practical implementation. What is the MVC Pattern? The MVC pattern divides an application into three distinct parts: Model: Represents the data and business logic of the application. It interacts with the database and processes data independently of the user interface. View: Handles the presentation layer of the application. It displays data to the user and sends user commands to the Controller. Controller: Acts as an intermediary between the Model and the View. It takes user input, interacts with the Model, and updates the View accordingly. This separation of concerns helps organize code in a way that’s easy to manage, test, and expand. Benefits of Using MVC in Node.js Maintainability: MVC makes it easier to manage complex applications by organizing code into layers. Scalability: The structure allows individual components to be scaled or modified independently. Reusable Code: With MVC, components are often reusable across multiple views or parts of the application. Efficient Team Collaboration: Frontend and backend developers can work simultaneously with minimal overlap. Setting Up an MVC Project with Node.js Here, we’ll build a simple MVC application using Node.js and Express. Our example will be a basic \"Task Manager\" that allows users to view, add, and delete tasks. Step 1: Initialize the Project Start by creating a new Node.js project and installing necessary dependencies. # Create a project folder mkdir mvc-task-manager cd mvc-task-manager # Initialize Node.js npm init -y # Install Express and other dependencies npm install express ejs mongoose body-parser Express: A minimalist web framework for Node.js, ideal for setting up controllers and routes. EJS: A templating engine that allows you to render dynamic HTML views. Mongoose: A popular library for MongoDB to model our data in the database. Body-parser: Middleware to parse incoming request bodies in a middleware. Step 2: Set Up the Project Structure Organize the application into models, views, and controllers folders. This structure is essential for an MVC pattern. mvc-task-manager/ │ ├── models/ │ └── Task.js │ ├── views/ │ ├── index.ejs │ └── tasks.ejs │ ├── controllers/ │ └── taskController.js │ ├── public/ │ └── css/ │ └── styles.css │ ├── app.js └── package.json Step 3: Configure the Model The Model represents the data structure in your application. For this task manager, we’ll define a Task model in MongoDB using Mongoose. // models/Task.js const mongoose = require('mongoose'); const taskSchema = new mongoose.Schema({ title: { type: String, required: true }, description: { type: String }, completed: { type: Boolean, default: false } }); module.exports = mongoose.model('Task', taskSchema); Here, taskSchema defines our Task model with fields for title, description, and completed. Step 4: Create the Controller The Controller handles the application logic, processes user inputs, interacts with the Model, and directs the View to render the data. // controllers/taskController.js const Task = require('../models/Task'); exports.getTasks = async (req, res) => { const tasks = await Task.find(); res.render('tasks', { tasks }); }; exports.createTask = async (req, res) => { const { title, description } = req.body; await Task.create({ title, description }); res.redirect('/tasks'); }; exports.deleteTask = async (req, res) => { await Task.findByIdAndDelete(req.params.id); res.redirect('/tasks'); }; This controller defines three main actions: getTasks: Fetches all tasks from the database. createTask: Adds a new task to the database. deleteTask: Deletes a task by its ID. Step 5: Set Up the View In this example, we use EJS to render HTML views. This will allow us to display task data dynamically in the browser. Create an index.ejs file for the homepage and a tasks.ejs file to display tasks. <!-- views/index.ejs --> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Task Manager</title> <link rel=\"stylesheet\" href=\"/css/styles.css\"> </head> <body> <h1>Welcome to Task Manager</h1> <a href=\"/tasks\">View Tasks</a> </body> </html> The tasks.ejs file will render a list of tasks and provide forms for adding or deleting tasks. <!-- views/tasks.ejs --> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Task List</title> </head> <body> <h1>Tasks</h1> <ul> <% tasks.forEach(task => { %> <li><%= task.title %> - <a href=\"/delete/<%= task._id %>\">Delete</a></li> <% }) %> </ul> <form action=\"/add\" method=\"POST\"> <input type=\"text\" name=\"title\" placeholder=\"Task Title\" required> <input type=\"text\" name=\"description\" placeholder=\"Description\"> <button type=\"submit\">Add Task</button> </form> </body> </html> Step 6: Set Up Routes Define routes in the main app.js file to connect each URL endpoint to the relevant controller function. // app.js * mongoose = require('mongoose'); const bodyParser = require('body-parser'); const taskController = require('./controllers/taskController'); const app = express(); app.set('view engine', 'ejs'); mongoose.connect('mongodb://localhost:27017/taskDB', { useNewUrlParser: true, useUnifiedTopology: true }); app.use(bodyParser.urlencoded({ extended: true })); app.use(express.static('public')); // Routes app.get('/', (req, res) => res.render('index')); app.get('/tasks', taskController.getTasks); app.post('/add', taskController.createTask); app.get('/delete/:id', taskController.deleteTask); const PORT = 3000; app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); Step 7: Styling with CSS To add a bit of styling, create a styles.css file in the public/css/ folder. You can add basic styling to make your application visually appealing. Step 8: Run and Test the Application Start the application using: node app.js Visit http://localhost:3000 in your browser. You’ll be able to navigate between views, add new tasks, and delete tasks using the MVC architecture. Best Practices for MVC Architecture in Node.js Keep Controllers Thin: Business logic should primarily reside in the Model. Use Middleware for Reusable Code: For instance, use middleware for authentication or request logging. Separate Routes from Controllers: To keep controllers clean and focused, consider defining routes in a separate file. Modularize Your Code: Keep models, views, and controllers in separate files and folders to maintain structure. Highlight Promoted * Replays, Logs, Errors and Traces with one line of code Say goodbye to setup complexity. With Highlight.io, it’s as simple as: H.init($projectId) One line, endless insights. Get the full picture of your app’s performance from replays to traces without the hassle. Start with Highlight.io and watch your observability come to life. Get Started Top comm* next How to build a website using React and Rest APIs (React basics explained) alexia cismaru - Nov 6 Navigating inheritance disputes: Why you need estate planning solicitors in London My Will And Probate - Oct 28 Created a Npm package for Vite, React Tailwindcss starter code with configuration. Plain - Oct 25 How to Deploy a NestJS Application to a VPS Server: A Complete Guide. Olashina - Oct 24 Abhishek Jaiswal Follow Passionate about building scalable solutions using the MERN stack, Docker, Kubernetes, and AWS. Skilled in CI/CD, Agile, and cloud technologies. Location India Education Technocrats Group of Institutions Pronouns He / Him Work Student Joined Aug 25, 2024 More from Abhishek Jaiswal * #webde* * #webdev #javascript #node #opensource * #* Heroku *referenc* 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/abhishekjaiswal_4896/understanding-the-mvc-pattern-with-nodejs-1fpg"
  },
  {
    "body": "* Follow Report Abuse ABIDULLAH786 👨‍💻 Passionate Developer | ⚛️ React.js/Next.js Lover | 🌐 MERN Stack Aficionado | 🌱 Lifelong Learner | 💡 Sharing Insights | 🚀 Let's Code, Collaborate, and Create Amazing Web Experiences! Lahore, Pakistan Joined on Mar 26, 2021 abidullah.se@gmail.com https://abidullah.vercel.app/ Education BS in Computer Science Pronouns his/him Work Full Stack Developer Three * three years. Got it * 8 Week Writing Streak The st* * *. **wo * two years. *or 4 consecutive weeks! G* @abidullah786 Skills/Languages 💻 JavaScript ⚛️ React.js/Next.js 🌐 MERN Stack Currently learning 🖼️ Learning UX/UI Available for Sponsorship Collaboration and Contribution 49 posts published 39 comments written 10 tags followed Pinned Let's Connect and Collaborate! || My Inbox * Aug 14 '23 Let's Connect and Collaborate! || My Inbox #discuss #webdev #community #codenewbie 6 *d CKEditor5 With Custom Image Uploader in React * Sep 21 CKEditor5 With Custom Image Uploader in React #webdev #react #tutorial #beginners 2 reactions Add C*h ABIDULLAH786? * ABIDULLAH786. * Essential YouTube Channels for Mastering Web Development * Jul 16 Essential YouTube Channels for Mastering Web Development #web*rial 14 * Introduction to Sets in JavaScript: A Comprehensive Guide * Aug 26 '23 Introduction to Sets in JavaScript: A * #beg*mment 3 min read Embracing Node.js: A Game-Changer for Top Tech Companies * Aug 18 '23 Embracing Node.js: A Game-Changer for Top Tech Companies #discuss #webdev #node #productivity 9 * Celebrating a Milestone: 2400+ Followers and 4200+ Reads on My dev.to Blog! * Aug 17 '23 Celebrating a Milestone: 2400+ Followers and 4200+ Reads on My dev.to Blog! #discuss #webdev #productivity #tooling 10 * Top Resources for High-Quality Images, Vectors, and Icons * Aug 16 '23 Top Resources for High-Quality Images, Vectors, and Icons #productivity #resources #codenewbie #webdev 11 * Ultimate Guide & Resources to Enhancing Your ReactJS Skills || 16 GitHub repositories * Aug 15 '23 Ultimate Guide & Resources to Enhancing Your ReactJS Skills || 16 GitHub repositories #webdev #react #resources #productivity 1*ad HTML Interview Questions with Answers and Code Examples Part-4 * Aug 14 '23 HTML Interview Questions with Answers and Code Examples Part-4 #webdev #html #productivity #interview 18 * HTML Interview Questions with Answers and Code Examples Part-3 * Aug 13 '23 HTML Interview Questions with Answers and Code Examples Part-3 #html #productivity #webdev #codenewbie 5 reactions * HTML Interview Questions Part-2: Explore autofocus, span, blockquote and progress tag * Aug 12 '23 Mastering HTML Interview Questions Part-2: Explore autofocus, span, blockquote and progress tag #html #productivity #interview #webdev 7 * Mastering HTML Interview Questions Part-1: header & footer, input and anchor tag * Aug 11 '23 Mastering HTML Interview Questions Part-1: header & footer, input and anchor tag #html #webdev #interview #productivity 13 * Mastering JS Shorthand Techniques Part-5: Async/Await, Arrow Function, and Exports and Imports * Aug 10 '23 Mastering JS Shorthand Techniques Part-5: Async/Await, Arrow Function, and Exports and Imports #javascript #productivity #webdev #codenewbie 13 * Mastering JS Shorthand Techniques Part-4: Array & Object Destructuring and Speed Operator * Aug 9 '23 Mastering JS Shorthand Techniques Part-4: Array & Object Destructuring and Speed Operator #javascript #productivity #codenewbie #webdev 11 * Mastering JS Shorthand Techniques Part-3: Ternary Operators, Arrays Methods, and Object Properties * Aug 8 '23 Mastering JS Shorthand Techniques Part-3: Ternary Operators, Arrays Methods, and Object Properties #javascript #programming #productivity #tutorial 8 reactions 5 comments 2 min read Mastering JavaScript Shorthand Techniques: Code Faster and Cleaner Part 2 * Aug 7 '23 Mastering JavaScript Shorthand Techniques: Code Faster and Cleaner Part 2 #* #productivity 14 reactions * JavaScript Shorthand Techniques: Write Code Faster and Cleaner Part 1 * Aug 6 '23 Mastering JavaScript Shorthand Techniques: Write Code Faster and Cleaner Part 1 #javascript #tutorial #productivity #codenewbie 11 react*.js Key One-Liners to Elevate Your Coding Skills * Aug 5 '23 Node.js Key One-Liners to Elevate Your Coding Skills #webdev #node #productivity #interview 8 *d Preparing for Success: Top REACT Interview Questions * Aug 4 '23 Preparing for Success: Top REACT Interview Questions #react #interview #beginners #webdev 5 *d Custom Hook in React: A Comprehensive Guide * Aug 3 '23 Custom Hook in React: A Comprehensive Guide #react #webdev #beginners #tutorial 10 * Build*: Testing API * Aug 2 '23 Build*: Testing API #webdev #node #express #api 7 * Building a RESTful API * * Aug 1 '23 Building a RESTful API * #webdev #node #api #beginners 33 * * 4 * Jul 28 '23 * 4 #javascript #programming #beg*mment 3 min read * 3 * Jul 27 '23 * 3 #* #* 2 min read * 2 * Jul 25 '23 * 2 #* #tutorial 4 reactions Add C* JavaScript Array Methods * Jul 24 '23 Introduction to JavaScript Array Methods #javascript #array #beginners #tutorial 13 * Sunday Memeday * Jul 23 '23 Sunday Memeday #jokes #meme #discuss * Mastering * 1 * Jul 22 '23 Mastering * 1 #* #tutorial 5 reactions * New Arrays Methods: ECMAScript 2023 * Jul 22 '23 JavaScript New Arrays Methods: ECMAScript 2023 #* #tutorial 8 reactions * Array Methods In Detail Part 5 * Jul 22 '23 JavaScript Array Methods In Detail Part 5 #* #* 3 min read Top 10 Websites Every Developer Needs to Know * Jul 22 '23 Top 10 Websites Every Developer Needs to Know #javascript #css #frontend #top7 4 * useEffect() Hook in React: A Comprehensive Guide * Jul 22 '23 useEffect() Hook in React: A Comprehensive Guide #react #webdev #beginners #tutorial 5 * Success in Frontend Interviews: Mastering Coding Question Challenges with React * Jul 20 '23 Success in Frontend Interviews: Mastering Coding Question Challenges with React #webdev #javascript #interview #learning 8 reactions * JavaScript Interviews: Top Programming Interview Questions You Should Know * Jul 15 '23 Mastering JavaScript Interviews: Top Programming Interview Questions You Should Know #* #interview 8 *d useState() Hook in React: A Comprehensive Guide * Jul 12 '23 useState() Hook in React: A Comprehensive Guide #react #webdev #beginners #tutorial 2 react* js Developer Top Interview Questions * Jul 3 '23 Node js Developer Top Interview Questions #webdev #javascript #node #interview 4 * A Guide to Identifying and Removing Unnecessary Dependencies * Jun 3 '23 A Guide to Identifying and Removing Unnecessary Dependencies #nextjs #react #webdev #tutorial 14 *d How to Access User Location In React * Jun 3 '23 How to Access User Location In React #*l 7 *d Next.js and Tailwind CSS Configuration * Jun 2 '23 Next.js and Tailwind CSS Configuration #nextjs #webdev #tailwindcss #react Add Comment 2 min read Can artificial intelligence eliminate programming work? * Feb 14 '23 Can artificial intelligence eliminate programming work? #ai #beginners #programming #openai * React Hooks Tutorials: Introduction * Oct 22 '22 React Hooks Tutorials: Introduction #react #javascript #webdev #tutorial 2 reactions * Object Methods * Jul 24 '22 JavaScript Object Methods #javascript #codenewbie #webdev #tutorial 11 * Jest Tutorial For Beginners: SuperTest or APIs Test [4/4] * Jul 7 '22 Jest Tutorial For Beginners: SuperTest or APIs Test [4/4] #javascript #jest #beginners #webdev 10 *d Jest Tutorial For Beginners: Different Ways of Running Test [3/4] * Jul 1 '22 Jest Tutorial For Beginners: Different Ways of Running Test [3/4] #web*rial 6 *d Jest Tutorial For Beginners: Jest Matchers [2/4] * Jun 25 '22 Jest Tutorial For Beginners: Jest Matchers [2/4] #webdev #javascript #jest #beginners 3 *d Jest Tutorial For Beginners: Introduction [1/4] * Jun 23 '22 Jest Tutorial For Beginners: Introduction [1/4] #webdev #javascript #jest #beginners 14 *d Temporal Dead Zone (TDZ) in JavaScript * Jun 18 '22 Temporal Dead Zone (TDZ) in JavaScript #webdev #* 8 * Hoisting In JavaScript * Jun 12 '22 Hoisting In JavaScript #discuss #webdev #javascript #hoisting 8 *d Can cellular SIM can be the part of LoRA Network or Not? * Oct 7 '21 Can cellular SIM can be the part of LoRA Network or Not? 1 reaction 1 comment 1 *onsor Neon * ",
    "url": "https://dev.to/abidullah786"
  },
  {
    "body": "* 96 Add reaction 77 Like 19 *s 0 Fire 106 Jump to Comments 96 * Prince Posted on Jun 23, 2018 77 19 NodeJs MySQL Build a simple app using Node JS and MySQL. #node #mysql Hello world!. In this tutorial, we are going to build a simple CRUD application using Node JS and MySQL. What we will build? The image above shows the app. It is an application that lets you add players to a database and also display their details from the database. You can also delete and edit player details. Prerequisites Before you join this tutorial it is assumed that you meet the requirements listed below: Node JS installed on your PC. Basic understanding of Node JS and Express JS. Knowledge of SQL, you should know and understand how to query a database. phpmyadmin installed on your PC. I recommend installing xampp as it already contains phpmyadmin in it. Understand how to use templating engines -- we are going to be using ejs in this tutorial). A text editor or IDE of your choice. Folder Structure This is how the project will be structured. ├── node-mqsql-crud-app (main directory) ├── node_modules ├── public ├── assets ├── img ├── routes ├── index.js ├── player.js ├── views ├── partials ├── header.ejs ├── index.ejs ├── add-player.ejs ├── edit-player.ejs ├── app.js Creating the directory for the project Open the command prompt in a suitable directory and type the following command: mkdir node-mysql-crud-app then change to the directory by typing the following command cd node-mysql-crud-app Initialize the Project Open your command prompt in your project directory and type the command below: npm init Install required modules. The following modules are going to be needed to successfully build the app. express: used to create handle routing and process requests from the client. express-fileupload: Simple express file upload middleware that wraps around busboy. body-parser: used to parse incoming request from the client. mysql: Node JS driver for MySQL. ejs: templating engine to render html pages for the app. req-flash: used to send flash messages to the view nodemon: Installed globally. It is used to watch for changes to files and automatically restart the server. Type the following command to install the first 7 modules as dependencies. npm install express express-fileupload body-parser mysql ejs req-flash --save Then type the following command to install the last module globally on your PC. npm install nodemon -g Creating the database for the app Copy the command below and navigate to your phpmyadmin dashboard and execute the following query in the console (usually found at the bottom of the page) in order to create database and table for the app. CREATE DATABASE socka; CREATE TABLE IF NOT EXISTS `players` ( `id` int(5) NOT NULL AUTO_INCREMENT, `first_name` varchar(255) NOT NULL, `last_name` varchar(255) NOT NULL, `position` varchar(255) NOT NULL, `number` int(11) NOT NULL, `image` varchar(255) NOT NULL, `user_name` varchar(20) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1; Adding the views header.ejs The header.ejs file is going to be in the /views/partials folder where it is going to be included in the rest of the project. <!doctype html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <!--<link rel=\"stylesheet\" href=\"/assets/css/custom.css\">--> <title><%= title %></title> </head> <style> .table-wrapper { margin-top: 50px; } .player-img { width: 40px; height: 40px; } .add-player-form { margin-top: 50px; } </style> <body> <div class=\"page-wrapper\"> <nav class=\"navbar navbar-light bg-light\"> <span class=\"navbar-brand mb-0 h1\" ><a href=\"/\">Socka Players</a></span> <a class=\"float-right\" href=\"/add\" title=\"Add a New Player\">Add a Player</a> </nav> index.ejs This is the homepage of the app which contains a table to display a list of all the players. <% include partials/header.ejs %> <div class=\"table-wrapper\"> <% if (players.length > 0) {%> <table class=\"table table-hovered\"> <thead class=\"thead-dark\"> <tr> <th scope=\"col\">ID</th> <th scope=\"col\">Image</th> <th scope=\"col\">First Name</th> <th scope=\"col\">Last Name</th> <th scope=\"col\">Position</th> <th scope=\"col\">Number</th> <th scope=\"col\">Username</th> <th scope=\"col\">Action</th> </tr> </thead> <tbody> <% players.forEach((player, index) => { %> <tr> <th scope=\"row\"><%= player.id %></th> <td><img src=\"/assets/img/<%= player.image %>\" class=\"rounded-circle player-img\" alt=\"\"></td> <td><%= player.first_name %></td> <td><%= player.last_name %></td> <td><%= player.position %></td> <td><%= player.number %></td> <td>@<%= player.user_name %></td> <td> <a href=\"/edit/<%= player.id %>\" target=\"_blank\" rel=\"noopener\" class=\"btn btn-sm btn-success\">Edit</a> <a href=\"/delete/<%= player.id %>\" class=\"btn btn-sm btn-danger\">Delete</a> </td> </tr> <% }) %> </tbody> </table> <% } else { %> <p class=\"text-center\">No players found. Go <a href=\"/add\" >here</a> to add players.</p> <% } %> </div> </div> </body> </html> add-player.ejs This page contains the form to add a new player to the database. <% include partials/header.ejs %> <div class=\"container\"> <% if (message != '') { %> <p class=\"text-center text-danger\"><%= message %></p> <% } %> <form class=\"add-player-form\" action=\"\" method=\"post\" enctype=\"multipart/form-data\"> <div class=\"form-row\"> <div class=\"form-group col-md-4\"> <input type=\"text\" class=\"form-control\" name=\"first_name\" id=\"first-name\" placeholder=\"First Name\" required> </div> <div class=\"form-group col-md-4\"> <input type=\"text\" class=\"form-control\" name=\"last_name\" id=\"last-name\" placeholder=\"Last Name\" required> </div> <div class=\"form-group col-md-4\"> <input type=\"text\" class=\"form-control\" name=\"username\" id=\"username\" placeholder=\"Username\" required> </div> </div> <div class=\"form-row\"> <div class=\"form-group col-md-6\"> <input type=\"number\" class=\"form-control\" name=\"number\" id=\"number\" placeholder=\"Number\" required> </div> <div class=\"form-group col-md-6\"> <select id=\"position\" name=\"position\" class=\"form-control\" required> <option selected disabled>Choose position</option> <option>Goalkeeper</option> <option>Defender</option> <option>Midfielder</option> <option>Forward</option> </select> </div> <div class=\"col-md-12\"> <label for=\"player-img\"><b>Player Image</b></label><br> <input type=\"file\" name=\"image\" id=\"player-img\" class=\"\" required> </div> </div> <button type=\"submit\" class=\"btn btn-primary float-right\">Add Player</button> </form> </div> </div> </body> </html> edit-player.ejs This page contains the form to edit a player added to the database. <% include partials/header.ejs %> <div class=\"container\"> <% if (message) { %> <p class=\"text-center text-danger\"><%= message %></p> <% } %> <% if (player) { %> <form class=\"add-player-form\" action=\"\" method=\"post\" enctype=\"multipart/form-data\"> <div class=\"form-row\"> <div class=\"form-group col-md-4\"> <label for=\"first-name\">First Name</label> <input type=\"text\" class=\"form-control\" name=\"first_name\" id=\"first-name\" value=\"<%= player.first_name %>\" required> </div> <div class=\"form-group col-md-4\"> <label for=\"last-name\">Last Name</label> <input type=\"text\" class=\"form-control\" name=\"last_name\" id=\"last-name\" value=\"<%= player.last_name %>\" required> </div> <div class=\"form-group col-md-4\"> <label for=\"username\">Username</label> <input type=\"text\" class=\"form-control\" name=\"username\" id=\"username\" value=\"<%= player.user_name %>\" required disabled title=\"Username cannot be edited.\"> </div> </div> <div class=\"form-row\"> <div class=\"form-group col-md-6\"> <label for=\"number\">Number</label> <input type=\"number\" class=\"form-control\" name=\"number\" id=\"number\" placeholder=\"Number\" value=\"<%= player.number %>\" required> </div> <div class=\"form-group col-md-6\"> <label for=\"position\">Position</label> <select id=\"position\" name=\"position\" class=\"form-control\" required> <option selected><%= player.position %></option> <option>Goalkeeper</option> <option>Centre Back</option> <option>Right Back</option> <option>Left Back</option> <option>Defensive Midfielder</option> <option>Central Midfielder</option> <option>Attacking Midfielder</option> <option>Right Wing Forward</option> <option>Left Wing Forward</option> <option>Striker</option> </select> </div> </div> <button type=\"submit\" class=\"btn btn-success float-right\">Update Player</button> </form> <% } else { %> <p class=\"text-center\">Player Not Found. Go <a href=\"/add\">here</a> to add players.</p> <% } %> </div> </div> </body> </html> Working on the server. App.js * fileUpload = require('express-fileupload'); const bodyParser = require('body-parser'); const mysql = require('mysql'); const path = require('path'); const app = express(); // const {getHomePage} = require('./routes/index'); // const {addPlayerPage, addPlayer, deletePlayer, editPlayer, editPlayerPage} = require('./routes/player'); const port = 5000; // create connection to database // the mysql.createConnection function takes in a configuration object which contains host, user, password and the database name. const db = mysql.createConnection ({ host: 'localhost', user: 'root', password: '', database: 'socka' }); // connect to database db.connect((err) => { if (err) { throw err; } console.log('Connected to database'); }); global.db = db; // configure middleware app.set('port', process.env.port || port); // set express to use this port app.set('views', __dirname + '/views'); // set express to look in this folder to render our view app.set('view engine', 'ejs'); // configure template engine app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); // parse form data client app.use(express.static(path.join(__dirname, 'public'))); // configure express to use public folder app.use(fileUpload()); // configure fileupload // routes for the app /* app.get('/', getHomePage); app.get('/add', addPlayerPage); app.get('/edit/:id', editPlayerPage); app.get('/delete/:id', deletePlayer); app.post('/add', addPlayer); app.post('/edit/:id', editPlayer); */ // set the app to listen on the port app.listen(port, () => { console.log(`Server running on port: ${port}`); }); In the above code, the modules are required and then a connection to the database is created. The mysql.createConnection function takes in an object which contains the configuration of the database being connected to. In the next statement, the database is being connected. Run the code below on the command prompt to run the server. nodemon app.js Your console should show the result below: Adding the routes index.js Copy the code below into the index.js file in the /routes directory. module.exports = { getHomePage: (req, res) => { let query = \"SELECT * FROM `players` ORDER BY id ASC\"; // query database to get all the players // execute query db.query(query, (err, result) => { if (err) { res.redirect('/'); } res.render('index.ejs', { title: Welcome to Socka | View Players ,players: result }); }); }, }; The db.query function queries the database. It takes in the query and string and a callback which takes in two parameters, if the query is successful, the result is passed to the view in the res.render function. player.js The player.js file is going to contain all the routes for the players page such as adding a player, updating a player's details and deleting a player. const fs = require('fs'); module.exports = { addPlayerPage: (req, res) => { res.render('add-player.ejs', { title: Welcome to Socka | Add a new player ,message: '' }); }, addPlayer: (req, res) => { if (!req.files) { return res.status(400).send(\"No files were uploaded.\"); } let message = ''; let first_name = req.body.first_name; let last_name = req.body.last_name; let position = req.body.position; let number = req.body.number; let username = req.body.username; let uploadedFile = req.files.image; let image_name = uploadedFile.name; let fileExtension = uploadedFile.mimetype.split('/')[1]; image_name = username + '.' + fileExtension; let usernameQuery = \"SELECT * FROM `players` WHERE user_name = '\" + username + \"'\"; db.query(usernameQuery, (err, result) => { *); } if (result.length > 0) { message = 'Username already exists'; res.render('add-player.ejs', { message, title: Welcome to Socka | Add a new player }); } else { // check the filetype before uploading it if (uploadedFile.mimetype === 'image/png' || uploadedFile.mimetype === 'image/jpeg' || uploadedFile.mimetype === 'image/gif') { // upload the file to the /public/assets/img directory uploadedFile.mv(`public/assets/img/${image_name}`, (err ) => { *); } // send the player's details to the database let query = \"INSERT INTO `players` (first_name, last_name, position, number, image, user_name) VALUES ('\" + first_name + \"', '\" + last_name + \"', '\" + position + \"', '\" + number + \"', '\" + image_name + \"', '\" + username + \"')\"; db.query(query, (err, result) => { *); } res.redirect('/'); }); }); } else { message = \"Invalid File format. Only 'gif', 'jpeg' and 'png' images are allowed.\"; res.render('add-player.ejs', { message, title: Welcome to Socka | Add a new player }); } } }); }, editPlayerPage: (req, res) => { let playerId = req.params.id; let query = \"SELECT * FROM `players` WHERE id = '\" + playerId + \"' \"; db.query(query, (err, result) => { *); } res.render('edit-player.ejs', { title: Edit Player ,player: result[0] ,message: '' }); }); }, editPlayer: (req, res) => { let playerId = req.params.id; let first_name = req.body.first_name; let last_name = req.body.last_name; let position = req.body.position; let number = req.body.number; let query = \"UPDATE `players` SET `first_name` = '\" + first_name + \"', `last_name` = '\" + last_name + \"', `position` = '\" + position + \"', `number` = '\" + number + \"' WHERE `players`.`id` = '\" + playerId + \"'\"; db.query(query, (err, result) => { *); } res.redirect('/'); }); }, deletePlayer: (req, res) => { let playerId = req.params.id; let getImageQuery = 'SELECT image from `players` WHERE id = \"' + playerId + '\"'; let deleteUserQuery = 'DELETE FROM players WHERE id = \"' + playerId + '\"'; db.query(getImageQuery, (err, result) => { *); } let image = result[0].image; fs.unlink(`public/assets/img/${image}`, (err) => { *); } db.query(deleteUserQuery, (err, result) => { *); } res.redirect('/'); }); }); }); } }; This file handles all the post and get requests for the players page. The add player function contains a function that uploads the player's image to the /public/assets/img directory and sends the player's details to the database. Connecting the routes and the views Go to app.js and uncomment the following lines on line 8 and 9 // const {getHomePage} = require('./routes/index'); // const {addPlayerPage, addPlayer, deletePlayer, editPlayer, editPlayerPage} = require('./routes/player'); on line 40 - 47 /* app.get('/', getHomePage); app.get('/add', addPlayerPage); app.get('/edit/:id', editPlayerPage); app.get('/delete/:id', deletePlayer); app.post('/add', addPlayer); app.post('/edit/:id', editPlayer); */ Running the app After removing the commented lines, check your command prompt to ensure your code has no errors, then head over to your browser and open http://localhost:5000. The index page will be shown and since no players have been added, the page will look similar to the one below: Click the Add a player link on the page, the add player page will load and then fill the form to add a player. After adding a player the home page will display the players added in a table. Like this If errors are encountered, draw my attention in the comment section or check the repo of the project on github. The code is not perfect and please feel free to make it better and send a pull request. Don't forget to check me out on twitter or github. Red Hat Developer Promoted * Your step-by-step guide to building from scratch Experience hands-on learning resources without setup or configuration, and learn to develop quicker than ever before. Get started Top comments (106) * kowalsk kowalsk kowalsk Follow I am a JavaScript ninja, well almost... Location London Joined Feb 11, 2019 • Feb 1*use Hi Atauba, I followed your tutorial and have the following error. Do you have any clues as to why this is so: C:\\Users\\PC\\OneDrive\\Coding\\JS\\node-mysql-crud-app>nodemon app.js [nodemon] 1.18.10 [nodemon] to restart at any time, enter rs [nodemon] watching: . [nodemon] starting node app.js C:\\Users\\PC\\OneDrive\\Coding\\JS\\node-mysql-crud-app\\routes\\index.js:11 title: Welcome to Socka | View Players ^^ SyntaxError: Unexpected identifier at new Script (vm.js:79:7) at createScript (vm.js:251:10) at Object.runInThisContext (vm.js:303:10) at Module._compile (*:656:28) at Object.Module._extensions..js (*:699:10) at Module.load (*:598:32) at tryModuleLoad (*:537:12) at Function.Module._load (*:529:3) at Module.require (*:636:17) at require (internal/modules/cjs/helpers.js:20:18) [nodemon] app crashed - waiting for file changes before starting... ^CTerminate batch job (Y/N)? y 5 likes Like Reply wolgensinger wolgensinger wolgensinger Follow Joined Feb 15, 2019 • Feb 15 '* I have the same error on line 11. Do you have any hints or a solution? Thank you for a short reply. 4 likes Like Reply Nitesh Kesarkar Nitesh Kesarkar Nitesh Kesarkar Follow Joined May 23, 2019 • May 23 '* Try adding the \"\" for the title values wherever this error shows. 1 like Like Reply Prince Prince Prince Follow A short bio... Email justprince9@gmail.com Location The Bright Side Education B.Sc, Information Technology. Work Software Developer at Leap Joined Jul 12, 2017 • Feb 18 '19 • Edited on Feb 18 • * Hi, sorry for the late reply, check if all brackets/braces have been closed and ensure you added the comma after the title key in the res.render function of the index.js file. Like Reply tjs1990-hub tjs1990-hub tjs1990-hub Follow Hi i'm new to development but i'm looking to learn Location UK Work Mr at Leeds Joined Oct 4, 2019 • Oct 4 '* Hi i have also got this error, i have re written the file to make sure all brackets are closed and that the comma is in the right place i have even tried making it an if else statement but still can't get it to run. Any help would be greatly appreciated. Like Reply Bhargav muppidi Bhargav muppidi Bhargav muppidi Follow Joined Dec 13, 2019 • Dec 13 '* Hi Atauba, I am Find following error while execting the code SyntaxError: Unexpected identifier in *\\views\\index.ejs while compiling ejs If the above error is not helpful, you may want to try EJS-Lint: github.com/RyanZim/EJS-Lint Or, if you meant to create an async function, pass async: true as an option. at new Function () at Template.compile (*\\node_modules\\ejs\\lib\\ejs.js:626:12) at Object.compile (*\\node_modules\\ejs\\lib\\ejs.js:366:16) at handleCache (*\\node_modules\\ejs\\lib\\ejs.js:215:18) at tryHandleCache (*\\node_modules\\ejs\\lib\\ejs.js:254:16) at View.exports.renderFile as engine at View.render (*\\node_modules\\express\\lib\\view.js:135:8) at tryRender (*\\node_modules\\express\\lib\\application.js:640:10) at Function.render (*\\node_modules\\express\\lib\\application.js:592:3) at ServerResponse.render (*\\node_modules\\express\\lib\\response.js:1012:7) Pls do help me , Thanks in advance Bhargav 2 likes Like Reply frames frames frames Follow I'm a continuous learning programmer. Location Spain Work University Joined Dec 29, 2019 • Dec 29 '* Same error here. 3 likes Like Reply Siddhant Misra Siddhant Misra Siddhant Misra Follow I'm a software developer who loves tackling problems for various solutions amongst multiple stacks. I love writing clean, scalable and extremely well-commented code. Working with different teams is fu Location San Fransisco Education Masters in Computer Science Joined May 21, 2018 • Jan *use Same error here. Any fix for this? 2 likes Like Thread alprvi alprvi alprvi Follow Joined Jan 7, 2020 • Jan 7 '* try this: <%- include ('partials/header.ejs'); -%> 4 likes Like Thread Melissa Dagley Melissa Dagley Melissa Dagley Follow Location The Colony, TX Work Front End Developer at Realpage Inc. Joined Jan 12, 2020 • Jan 12 '20 Co*s, I was having the same problem and this solved it for me. 2 likes Like Thread butau richmond butau richmond butau richmond Follow Location Cape Town,SA Joined Feb 21, 2020 • Feb 21 '* Worked for me too 2 likes Like Thread daliaalziani daliaalziani daliaalziani Follow Location turkey Work software engineer Joined Apr 18, 2020 • Apr 18 '* i tried it too but it is not working at all 1 like Like Thread Reem yahea ali Reem yahea ali Reem yahea ali Follow idont know :lol Location iraq/baghdad Education Computer Communication engineering ( programming) Work deve at developer in baghdad Joined Jan 26, 2020 • Jun 9 '* i am same what is solution bro ? Like Reply Marco Marco Marco Follow Joined Feb 26, 2019 • Feb 26 '* Hi Atauba! Great guide, very good! I have this error: {\"errno\":-4058,\"code\":\"ENOENT\",\"syscall\":\"open\",\"path\":\"C:\\WebTest\\public\\assets\\img\\photo1.jpeg\"} when I add new PLAYER. In img folder I've copied three photo .jpeg Where is the problem? 2 likes Like Reply Marco Marco Marco Follow Joined Feb 26, 2019 • Feb 26 '* Acc.. I found the error, sorry... 2 likes Like Reply amir amir amir Follow Joined Apr 25, 2019 • Apr 25 '* i have same problem how you fixed it? i have checked every things 1 like Like Thread amir amir amir Follow Joined Apr 25, 2019 • Apr 25 '* my problem solved 1 like Like Reply mohamad-alibrahim mohamad-alibrahim mohamad-alibrahim Follow Joined Jan 10, 2020 • Jan 10 '* can you please write the fixing? 1 like Like Thread Mark Leung Mark Leung Mark Leung Follow Joined Mar 24, 2020 • Mar 24 '* U need to create the public/assets/img folder path. Just create the folder structure. Then, the error should go away. 1 like Like Reply lexandra987 lexandra987 lexandra987 Follow Joined May 18, 2019 • May 18 '* Hi, I have a problem: TypeError: *\\views\\index.ejs:18 16| 17| <tbody> 18| <% players.forEach((player) => { %> 19| <tr> 20| <th scope=\"row\"><%= player.id %></th> 21| <td><img src=\"/assets/img/<%= player.image %>\" class=\"rounded-circle player-img\" alt=\"\"></td> players.forEach is not a function at eval (eval at compile (C:\\*ules\\ejs\\lib\\ejs.js:618:12), :28:16) at returnedFn (C:\\*ules\\ejs\\lib\\ejs.js:653:17) at tryHandleCache (C:\\*ules\\ejs\\lib\\ejs.js:251:36) at View.exports.renderFile as engine at View.render (C:\\players\\node-*\\view.js:135:8) at tryRender (C:\\players\\node-*\\application.js:640:10) at Function.render (C:\\players\\node-*\\application.js:592:3) at ServerResponse.render (C:\\players\\node-*\\response.js:1016:7) at Query.db.query (*\\routes\\index.js:10:17) at Query. (C:\\*ules\\mysql\\lib\\Connection.js:525:10) How can I fix it? BR, Aleksandra Like Reply EDEN SHARVIT EDEN SHARVIT EDEN SHARVIT Follow Joined Oct 18, 2019 • Nov *use Can u tell us how did u manage to fix your issue? I'm also stuck with the same error.... 2 likes Like Reply Gabiro Albert Gabiro Albert Gabiro Albert Follow i am interested in programming specifically in nodejs Joined Nov 24, 2019 • Nov 24 '19 • Edited on Nov 24 • * hy i have same question online 18 how did you fix it please help 1 like Like Reply rafad900 rafad900 rafad900 Follow I'm a college student in my last semester. Hoping to get an intership anywhere. Location California Work Student at N/A Joined Jan 8, 2020 • Jan 8 '* One of the things that you can check is in inside /routes/index.js Make sure that the players: result is not in any quotes. foreach is a function of arrays. If you have 'result', that is a string. 1 like Like Reply lexandra987 lexandra987 lexandra987 Follow Joined May 18, 2019 • May 18 '* but ok, it was no question. it was just a stupid error in my index.ejs file. Now it works! :) 1 like Like Reply dikshabhattacharjee dikshabhattacharjee dikshabhattacharjee Follow Location Goa Work Bhattacharjee at Student Joined Oct 26, 2019 • Oct 26 '* How did you fix it.please help.. 1 like Like Reply coolnin coolnin coolnin Follow Joined Jun 4, 2019 • Jun 4 '* I am getting the same problem what u did? 1 like Like Thread Uday Parekh Uday Parekh Uday Parekh Follow Location NY Work Prog at FReelancer Joined Sep 24, 2019 • Sep 24 '* Have you got a solution? 1 like Like Thread dikshabhattacharjee dikshabhattacharjee dikshabhattacharjee Follow Location Goa Work Bhattacharjee at Student Joined Oct 26, 2019 • Oct 26 '* Any solution? 1 like Like Reply Rajesh Chittampally Rajesh Chittampally Rajesh Chittampally Follow #reacting to the challenges faced by users and developing solutions with the help of #php, #node, #mysql so that users can #vue the applications as intended Location Hyderabad, Telangana, Ind*d Feb 14, 2018 • Feb 10 '19 • Edited on Feb 10 • * I have created a node & mysql app following this tutorial. It's all good but when i open the image, the image is not opening. all images size is 0 bytes only. Seeing broken image in browser too. 3 likes Like Reply Prince Prince Prince Follow A short bio... Email justprince9@gmail.com Location The Bright Side Education B.Sc, Information Technology. Work Software Developer at Leap Joined Jul 12, 2017 • Feb 1*use Sorry about that, I think these may be the possible reasons The SQL statement The image url. Check the console of your browser if any errors exist 1 like Like Reply Diego Roque Diego Roque Diego Roque Follow Joined Feb 18, 2019 • Feb 18 '* Same problem here. Any solution?? Best Rgs. 1 like Like Reply Al-mck Al-mck Al-mck Follow Joined Feb 18, 2019 • Feb 18 '19 Co* I change the first line by : fs.writeFile(public/assets/img/${image_name},uploadedFile.data, function (err) {... And it's work for me 2 likes Like Thread Diego Roque Diego Roque Diego Roque Follow Joined Feb 18, 2019 • Feb 18 '* thanks my friend. now work!! Best Rgs. 2 likes Like Reply PolarFoxOFF PolarFoxOFF PolarFoxOFF Follow Joined Dec 31, 2019 • Dec 31 '19 Co*, I tried activating app.js and it works, but when I tried to access my localhost: 5000, it happened SyntaxError: Unexpected identifier in /Users/apple/Documents/NodeJS/views/index.ejs while compiling ejs If the above error is not helpful, you may want to try EJS-Lint: github.com/RyanZim/EJS-Lint Or, if you meant to create an async function, passasync: trueas an option. at new Function () at Template.compile (/*js/lib/ejs.js:626:12) at Object.compile (/*js/lib/ejs.js:366:16) at handleCache (/*js/lib/ejs.js:215:18) at tryHandleCache (/*js/lib/ejs.js:254:16) at View.exports.renderFile as engine at View.render (/*xpress/lib/view.js:135:8) at tryRender (/*xpress/lib/application.js:640:10) at Function.render (/*xpress/lib/application.js:592:3) at ServerResponse.render (/*xpress/lib/response.js:1012:7) SyntaxError: Unexpected identifier in /Users/apple/Documents/NodeJS/views/index.ejs while compiling ejs 2 likes Like Reply Gabriel Gabriel Gabriel Follow Joined Feb 25, 2020 • Feb 25 '* I believe you tried an include but you may have written it bad. Try to write it like this: <%- include (\"../fragments/header\") %> 1 like Like Reply Raihanul Alam Hridoy Raihanul Alam Hridoy Raihanul Alam Hridoy Follow I am a student of BUET CSE Location BUET, Bangladesh Work Student at Student Joined Mar 12, 2020 • Mar 12 '* Inside index.ejs file add this in line 1: <%- include(\"partials/header\") -%> Like Reply Siddhant Misra Siddhant Misra Siddhant Misra Follow I'm a software developer who loves tackling problems for various solutions amongst multiple stacks. I love writing clean, scalable and extremely well-commented code. Working with different teams is fu Location San Fransisco Education Masters in Computer Science Joined May 21, 2018 • Jan *use Same error here. Any fix for this? Like Reply zzrez zzrez zzrez Follow Joined Jan 7, 2020 • Jan 7 '* I just completed this useful tutorial, thanks. In the process I had to solve some bugs which may be because versions of packages, eg express, have changed. This bug (frequently mentioned below): \"SyntaxError: Unexpected identifier\". This is due to use of \"<% include partials/header.ejs %>\" at the top of the ejs files. If this is replaced by the original html of header.ejs, all works. So the required inclusion format seems to have changed for Express 4.x to:- \"<%- include ('partials/header') %>\" Then there are various places with \"title: Welcome to Socka | View Players\" or similar, the value \"Welcome to Socka | View Players\" needs enclosing in single or double quotes. Finally, the add form works if the directory for images, /public/assets/img, is first created. Hope this helps. Great tutorial! 2 likes Like Reply silverbackjack1 silverbackjack1 silverbackjack1 Follow Joined Sep 25, 2018 • Sep 25 '18 • Edited on Sep 25 • * Great guide, very useful. I'm looking to create something similar using this as a starting point but I'm struggling to remove the image upload requirement, it's not something I need. Could you give any advice on how to remove this requirement? I've encountered a few issues when trying to change this code. Thanks in advance Never mind, I figured it out :) 2 likes Like Reply Prince Prince Prince Follow A short bio... Email justprince9@gmail.com Location The Bright Side Education B.Sc, Information Technology. Work Software Developer at Leap Joined Jul 12, 2017 • Sep 2*use Okay but note that the code is susceptible to SQL injection, I have been quite lazy about fixing and updating it on the repo 😩. Anyways, thanks for the kind words. 1 like Like Reply abhinavsingh1995 abhinavsingh1995 abhinavsingh1995 Follow Joined Sep 17, 2018 • Sep 17 '18 • Edited on Sep 17 • * adding players is not working.It is not giving any error. I tried to add player, once i open the add player page/form AND some player information it shows this after submitting { \"errno\":-2, \"code\":\"ENOENT\", \"syscall\":\"open\", \"path\":\"public/assets/img/user.png\" } and when i went back to homepage no player is added. 1 like Like Reply Prince Prince Prince Follow A short bio... Email justprince9@gmail.com Location The Bright Side Education B.Sc, Information Technology. Work Software Developer at Leap Joined Jul 12, 2017 • Sep 17 '18 C* could be from the addPlayer.js function or the path to the store the image does not exist, kindly crosscheck and try again. 2 likes Like Reply mohamad-alibrahim mohamad-alibrahim mohamad-alibrahim Follow Joined Jan 10, 2020 • Jan 10 '* i have encounterd in the same issue, how it would be solved? 1 like Like Reply Melissa Dagley Melissa Dagley Melissa Dagley Follow Location The Colony, TX Work Front End Developer at Realpage Inc. Joined Jan 12, 2020 • Jan 12 '20 C* happened to me when I didn't have the directory created for the image. 1 like Like Reply kl4532 kl4532 kl4532 Follow Joined Dec 19, 2018 • Dec 19 '18 *! I get error after clicking 'Add a Player'. Here is the output: ReferenceError: /*/views/add-player.ejs:7 5| <% } %> 6| 7| <% if (player) { %> 8| 9| 10| player is not defined at eval (eval at compile (/*/node_modules/ejs/lib/ejs.js:618:12), :34:8) at returnedFn (/*/node_modules/ejs/lib/ejs.js:653:17) at tryHandleCache (/*/node_modules/ejs/lib/ejs.js:251:36) at View.exports.renderFile as engine at View.render (/*/node_modules/express/lib/view.js:135:8) at tryRender (/*/node_modules/express/lib/application.js:640:10) at Function.render (/*/node_modules/express/lib/application.js:592:3) at ServerResponse.render (/*/node_modules/express/lib/response.js:1008:7) at addPlayerPage (/*/routes/player.js:5:13) at Layer.handle as handle_request ================ Can you help me? BR, Corny 1 like Like Reply Prince Prince Prince Follow A short bio... Email justprince9@gmail.com Location The Bright Side Education B.Sc, Information Technology. Work Software Developer at Leap Joined Jul 12, 2017 • Dec 21 '18 Co*, sorry about the error, kindly check the add-player.ejs and edit-player.ejs files to confirm everything checks out and then try again. 1 like Like Reply kl4532 kl4532 kl4532 Follow Joined Dec 19, 2018 • Dec 21 '* My god, I switched files contents... I am an idiot. Thank you for help and great tutorial. BR, Corny 3 likes Like Thread Prince Prince Prince Follow A short bio... Email justprince9@gmail.com Location The Bright Side Education B.Sc, Information Technology. Work Software Developer at Leap Joined Jul 12, 2017 • Dec 23 '* 😂 Oh okay. No problem *ion (106 comments) *. * Heroku *referenc* Read next Automating Swagger Documentation with Joi in Node.js: Simplify Your API Documentation Workflow Gleidson Leite da Silva - Oct 5 Beginner's Guide to Handling DELETE Requests in Node.js with Express Emmanuel Mumba - Sep 24 ⚔️ Rust vs Go vs Bun vs Node.js: The Ultimate 2024 Performance Showdown 🚀 Hamza Khan - Oct 5 Merge and bundle open api yaml files for swagger Mehdi Faraji - Aug 31 Prince Follow A short bio... Location The Bright Side Education B.Sc, Information Technology. Work Software Developer at Leap Joined Jul 12, 2017 Trending on DEV Community Understanding JavaScript Closures: A Comprehensive Guide #javascript #closure #programming #node Best Practices for Code Reviews That Foster Team Collaboration #webdev #coding #beginners #productivity * #webdev #backend #node Sentry Promoted * Youtube Tutorial Series 📺 * 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/achowba/build-a-simple-app-using-node-js-and-mysql-19me"
  },
  {
    "body": "* 28 Add reaction 19 Like 9 *s 0 Fire 5 Jump to Comments 59 * Alex 👨🏼‍💻FullStack.Cafe Posted on Aug 22, 2019 • Updated on Sep 18, 2019 • Originally published at fullstackresume.com 19 9 Node JS Resume Points How To Write Node.js Developer Resume (+ Real Word Template) #resume #career #cv #node Treat your resume as a landing page - optimize it for conversion (that is basically an interview invitation) Keep it just one sheet long (two pages max) Don’t use photos, never Layout mattes - choose more readable, good looking one with better font, if you need one look at the example below Polish your tech skills cloud and aligned it with job description - without it you will be rejected by any recruiting automation system on a filtering step Add WOW effects to your experience, namely stress out how did you improve the business of a company using your tech skills Stop DOing, start ACHIEVing in your experience A/B Test your resume all the time, send it to recruiters and check what version has better conversion rate (calls back) Originally published on FullStack.Cafe - Never Fail Your Tech Interview Again Node.js Developer Resume Template John Rippin | Node.js Developer Creative Node.js Developer with 12+ years of strong experience in Operating Systems & Terminal, Machine Learning areas with willingness to learn and master Scrum & Agile and RDBMS & SQL. Blockchain expert. >> Download Word, DOCX Version Now << >> Download Word, DOCX Version Now << CONTACTS Phone: (997) 360-2706 Email: john11@gmail.com LinkedIn: @john11 Github: @john11 KEY SKILLS Front End: BabylonJS, Backbone.js, Handlebars.js JavaScript/ES6/ES2017, MeteorJS, RESTful API ReactJS, Underscore.js, Web Components WebGL, XHTML, XML Back End: Node.js 0.8-10.1, Azure Functions, Flask LINQ, MS Build, kops Databases: CRUD, Cassandra, DAX MongoDB, MySQL, NHibernate SQLLite, SSIS, SSRS Testing: Blanket, Nock, Unexpected DevOps: CI/CD, Jenkins, Raygun, Travis CI SDLC: 12 Factor App, Asana, Basecamp Bitbucket, Crucible, ER Diagrams Lint, SOLID principles, UML WORK HISTORY Mayer LLC, Senior Node.js Developer, 01/2014 - 12/2016 | Handburgh, AR Building hypothesis and executing the set of A/B tests related to the high-profile internal web application resulting in 3x conversion and revenue grow Capturing the best development practices in a way of common condign standards team of 4 developers that helped to decrease code complexity and improve maintainability of the shared libraries and components. Integrating with third-party services and external APIs as a part of implementation of the high-profile customers-facing portal adopting an improved way of reports producing amongst different solutions and mitigating the code duplicity by 60% Reverse-Engineering legacy modules related to high-profile online service, following to the more effective components interoperability and code maintainability. McClure and Sons, Node.js Backend Developer, 03/2011 - 01/2014 | Kreigerbury, MN Conducting requirements gathering and validation as a part of collaboration for the high-profile progressive web application that helped to develop clear, unambiguous technical requirements and establish consistent feed-back loop. Coordinated with engineering and product teams in identification of customer requirements for the high-volume progressive web application. The result helped to create more than 16 BRD and tech documents to stream line development activities. Full Stack development of the high-profile external web app (BabylonJS and SOLID principles). As a result 5 bugs-free releases have been deployed just-in-time. Implementation of the set of new API endpoints related to the mission-critical internal web application, that provided critical connectivity channel for distributed functionality and increase system cohesion keeping manageable code complexity. Maintaining newly developed and legacy systems mission-critical external web app applying knowledge of Azure Functions, NHibernate and Jenkins Optimizing legacy data storages and search queries for the high-volume external web app utilizing NHibernate and MongoDB resulted in minimization of the average response time by 63% Mays - Kautzer, Back-End Developer, 01/2009 - 05/2010 | West Nathaniel, IA Design and configuration of the fully automated CI/CD lifecycle for the high-volume external web app resulting in 5x reduction of average deployment time. Maintaining newly developed and legacy systems high-volume external web app applying knowledge of 12 Factor App and Handlebars.js Performing unit & load testing for the critical progressive web application that helped to improve system's stability and scalability by identification critical performance issues during development phase Resolved technical problems relating to the business-critical internal web application resulting in application performance tunning and code quality improvements Reviewing the quality of code for the high-volume progressive web application maintaining code and design consistency across different team members Transforming client needs into the new product features for the high-profile external web app. The result helped to create more than 18 BRD and tech documents to stream line development activities. SIDE PROJECTS FullStack.Cafe - Never Fail Tech Interview, Founder | www.fullstack.cafe FullStack.Cafe is a smartest way to nail your Full Stack tech interview. It has more than 2800 * sourced from any possible resources on Internet and presented in a concise, unobtrusive way for high-focusing interview preparation process. ~20'000 MAU. EDUCATION Master of Communication. Salem University, Nigeria, 2003 - 2010. Intro to Coding and Programming - Nanodegree. Code Avengers. ADDITIONAL INFORMATION Bengali language: Native proficiency Arabic language: Fluent proficiency Visa Status: Permanent Resident 👋 One last chance before you go! * It takes one minute to join DEV *. You get 3x the value by signing in instead of lurking Get started Top comments (5) * Carlos Trapet Carlos Trapet Carlos Trapet Follow Full-Stack Javascript Dev || ex- Santander Technology || now living the start-up life in central London Location London Education Master's Degree Work NodeJS Developer at Atom Learning Joined May 25, 2018 • Aug 22 '19 • Edited on Aug 22 • * Most of these guidelines have to be taken with a grain of salt and would be red flags in some countries. To anyone reading this who's not based in Australia/United States; please, please, please make sure you tailor your CV to the culture of the country you're in. I can't stress this enough; I know in the US you have to look very proud of your achievements, competitive and direct, but here in the UK (and in Europe in general) that can be seen as overly aggressive, narcissistic and egocentric. My team and I have rejected candidates purely based on this, even if their coding skills were outstanding. 7 likes Like Reply Laís Carvalho Laís Carvalho Laís Carvalho Follow Python-lover, tech-enthusiast and volunteer at @EuroPython. Co-founder of @PyjamasConf. Other-half of @MidmeetPy. Board member of @PythonIreland. Email lais.bsc@gmail.com Location Dublin, Ireland Education BSc in IT Work tech writer for whomever pays more Joined Sep 9, 2019 • Sep 10 '19 • Edited on Apr 4 • * That makes complete sense! Writing document without considering your audience can cause a huge problem. 1 like Like Reply Dan Dan Dan Follow Work Jack of all trades master of none at On a desk Joined Aug 23, 2019 • Aug 23 '* I don't want to be rude but I see a lot of inconsistency in this type of resume. I find a few point surprising, that would in my opinion do more harm than good during a job interview. For instance, I would expect any descent Node JS developer to be able to pick up any NPM library such as Handlebars or even use a REST api, mentioning it as a skill seem odd. Seeing WebGL alongside XHTML and XML is hilarious to me, WebGL, and by extension OpenGL, is a complete different beast, I would expect someone that list it as a skill to also be familiar with GLSL, 3D math and the whole rendering pipeline, please do yourself a favor and never list XML/HTML next to WebGL as common skills set unless you know what it imply. Database 'CRUD', is more confusing than anything as it doesn't even stand for any particular tech. Node 0.8 to 10.1... why even bother listing the version if you already know ES6? And listing Bitbucket as a skill is also confusing, I would expect at least to see the word 'git' somewhere... not a hosting service. What scare me about these type of resume is that its just a bunch of technology name to look fancy and cool, but when it come down to it, no one really care if you happened to stubble upon one of these tech. It's basically beating around the bushes when really the most important thing is not to highlight what tech you used, but rather how quickly you can learn and adapt. 4 likes Like Reply Cosmas Gikunju Cosmas Gikunju Cosmas Gikunju Follow Software Engineer Location Nairobi Work Systems Engineer Fintech Joined Jan 25, 2019 • Aug 22 '* Wow , didn't think the templates were behind a paywall 1 like Like Reply Dimitri Torterat Dimitri Torterat Dimitri Torterat Follow Joined Aug 15, 2018 • Aug 22 '* Where’s the Node.js developer resume howto? I only see introductory bullet points at the top of the article 1 like Like Reply * DEV Community * Trending in Career The community is discussing better communication with non-devs, handling RTO policies, and tips for DevOps interviews. There's also interest in job search challenges. How to Talk to Non-Developers? Mangabo Kolawole ・ Oct 6 #beginners #career #productivity #programming So You Need to Give a Talk... Abbey Perini ・ Sep 30 #career #techtalks #programming #devrel Tips for working from the office? Gabrielle Niamat ・ Oct 2 #productivity #career #discuss #watercooler Why Can’t I Get a Job? Scofield Idehen ・ Oct 8 #career #beginners #learning #discuss How to Crack a DevOps Interview in One Attempt: A Complete Guide for Freshers and Experienced H A R S H H A A for ProDevOpsGuy Tech Community ・ Oct 13 #devops #interview #beginners #career Read next Understanding * - Nov 6 * Sushant Gaurav - Nov 6 * Ken Yip - Nov 4 The Software Engineering Manager Role Eduardo Klein - Nov 4 Alex 👨🏼‍💻FullStack.Cafe Follow 👋 Product enthusiast. FullStack Dev. 🇦🇺 Currently working on: ◀️ www.FullStack.cafe ▶️ Kill Your Tech & Coding Interview Location Perth, Western Australia Education Moscow Aviation Institute Work Founder at FullStack.Cafe Joined Jul 14, 2018 More from Alex 👨🏼‍💻FullStack.Cafe 🔴👨‍💻 FullStack.Café - 🪓 Kill Your Tech & Coding Interview + BLKFRD 50% OFF DEAL #career 12 Common Dynamic Programming Interview Questions and Problems (SOLVED) #dynamicprogramming #career #interview 25 NoSQL Interview Questions (ANSWERED) You Must Know In 2020 #mongodb #nosql #career #interview 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/aershov24/how-to-craft-node-js-developer-resume-real-word-template-225g"
  },
  {
    "body": "* Follow Report Abuse Guddeti Ajay Manikanta ⭐⭐⭐ I'm passionate about both frontend and backend which made me a full-stack developer. Bangalore Joined on Jun 14, 2019 ajay.vijay1123@gmail.com https://ajaymanikantag.github.io/resume/#aboutme * in electronics and communication engineering Work Full stack cloud developer Five * five years. Got it * Four * four years. Got it 1 We*t 2 comme** years. G* @ajaymanikanta1123 Skills/Languages Node, React, AWS, D365 F&O Commerce. Currently learning I am fully into learning Cloud (AWS). Utilization of it in the real world. Currently hacking on Real-world projects using AWS Available for If you can say. Let's learn something new. 2 posts published 16 comments written 24 tags followed ✋🏼🌩️ AWS - The Beginning: Pt.2 Guddeti Ajay Manikanta ⭐⭐⭐ Guddeti Ajay Manikanta ⭐⭐⭐ Guddeti Ajay Manikanta ⭐⭐⭐ Follow Jan 18 '23 ✋🏼🌩️ AWS - The Beginning: Pt.2 #aws #cloud #node #beginners 1 c*h Guddeti Ajay Manikanta ⭐⭐⭐? * Guddeti Ajay Manikanta ⭐⭐⭐. * ✋🏼🌩️ AWS - Cloud computing: Pt.1 Guddeti Ajay Manikanta ⭐⭐⭐ Guddeti Ajay Manikanta ⭐⭐⭐ Guddeti Ajay Manikanta ⭐⭐⭐ Follow Jan 18 '23 ✋🏼🌩️ AWS - Cloud computing: Pt.1 #aws #cloud #node #beginners 1 comment 3 *onsor Neon * ",
    "url": "https://dev.to/ajaymanikanta1123"
  },
  {
    "body": "* Follow Report Abuse Akram Khan Javascript Developer | Reactjs | Nextjs | Nodejs | React Native | Mongodb | Postgresql Indore, Madhya Pradesh, India Joined on Oct 23, 2022 https://akram6t.github.io Education MCA persuing. More info about @akram6t Badges Two * two years. Got it * * * Mobile App Developer * * Web Developer * * Backend Developer * Currently learning Remixjs, AI 9 * 5 tags followed *. * Oct 31 *. #node #mongodb #javascript #express Add Comment 6 m*kram Khan? * Akram Khan. * I create a custom Modal component in react + typescript. * Sep 18 I create a custom Modal component in react + typescript. #react #javascript #type*ent 2 min read Unveiling the Dark Sides of JavaScript: Common Pitfalls Every Developer Should Know * Aug 16 Unveiling the Dark Sides of JavaScript: Common Pitfalls Every Developer Should Know * my personal view component * Jul 16 my personal view component Add Comment 2 min read I create a Todo Application in Typescript With Save Todos in Local Storage * Jul 14 I create a Todo Application in Typescript With Save Todos in Local Storage #typescript #html #css #node * My subdomain proxy server in nodejs * Jul 9 My subdomain proxy server in nodejs #javascript #node #proxy #subdomain Add Comment 1 min read My subdomain proxy server in nodejs * Jul 9 My subdomain proxy server in nodejs #javascript #node #proxy #subdomain Add Comment 1 min read Use socket.io in react native with nodejs server * Nov 28 '23 Use socket.io in react native with nodejs server #reactnative #react #node #socket Add Comment 2 min read My CodexProject Server js * Oct 23 '22 My CodexProject Server js #react 3 * * ",
    "url": "https://dev.to/akram6t"
  },
  {
    "body": "* 0 *ead 0 * 0 * Akram Khan Posted on Oct 31 *. #node #mongodb #javascript #express Node.js Package Reference Guide Core Dependencies Web Framework & Server express (^4.18.2) Web application framework Handles routing, middleware, and HTTP requests/responses Core foundation for building APIs and web applications Database mongoose (^7.0.0) MongoDB object modeling tool Provides schema-based solution to model application data Handles database operations and relationships Security Packages jsonwebtoken (^9.0.0) Creates and verifies JSON Web Tokens (JWT) Used for user authentication and secure information exchange bcryptjs (^2.4.3) Hashes and compares passwords securely Protects user passwords in the database helmet (^6.0.1) Adds security headers to HTTP responses Protects against common web vulnerabilities Sets various HTTP headers for security cors (^2.8.5) Enables Cross-Origin Resource Sharing Controls which domains can access your API Essential for web applications with separate frontend/backend Validation & Configuration joi (^17.9.0) Data validation library Validates request bodies, query parameters, and other inputs Ensures data integrity and format dotenv (^16.0.3) Loads environment variables from .env file Manages configuration settings Keeps sensitive data secure Development Dependencies Development Tools nodemon (^2.0.22) Monitors file changes during development Automatically restarts the server Improves development workflow Usage Example // Express server setup * app = express(); // Security middleware const helmet = require('helmet'); const cors = require('cors'); app.use(helmet()); app.use(cors()); // Environment variables require('dotenv').config(); // Database connection const mongoose = require('mongoose'); mongoose.connect(process.env.MONGODB_URI); // Validation example const Joi = require('joi'); const schema = Joi.object({ email: Joi.string().email().required() }); // Password hashing const bcrypt = require('bcryptjs'); const hashedPassword = await bcrypt.hash('password', 10); // JWT authentication const jwt = require('jsonwebtoken'); const token = jwt.sign({userId: 123}, process.env.JWT_SECRET); Complete Node.js and Mongoose Project Structure Guide Project Structure project-root/ ├── src/ │ ├── config/ │ │ ├── database.js │ │ └── config.js │ ├── models/ │ │ ├── user.model.js │ │ └── product.model.js │ ├── controllers/ │ │ ├── user.controller.js │ │ └── product.controller.js │ ├── routes/ │ │ ├── user.routes.js │ │ └── product.routes.js │ ├── middleware/ │ │ ├── auth.middleware.js │ │ └── error.middleware.js │ ├── utils/ │ │ ├── logger.js │ │ └── validators.js │ └── app.js ├── .env ├── .gitignore └── package.json 1. Initial Setup package.json { \"name\": \"node-mongoose-project\", \"version\": \"1.0.0\", \"main\": \"src/app.js\", \"scripts\": { \"start\": \"node src/app.js\", \"dev\": \"nodemon src/app.js\" }, \"dependencies\": { \"express\": \"^4.18.2\", \"mongoose\": \"^7.0.0\", \"dotenv\": \"^16.0.3\", \"joi\": \"^17.9.0\", \"jsonwebtoken\": \"^9.0.0\", \"bcryptjs\": \"^2.4.3\", \"cors\": \"^2.8.5\", \"helmet\": \"^6.0.1\" }, \"devDependencies\": { \"nodemon\": \"^2.0.22\" } } .env PORT=3000 MONGODB_URI=mongodb://localhost:27017/your-database JWT_SECRET=your-secret-key NODE_ENV=development .gitignore node_modules/ .env logs/ *.log 2. Configuration Setup src/config/config.js require('dotenv').config(); module.exports = { port: process.env.PORT || 3000, mongoUri: process.env.MONGODB_URI, jwtSecret: process.env.JWT_SECRET, nodeEnv: process.env.NODE_ENV || 'development', jwtExpiresIn: '1d' }; src/config/database.js const mongoose = require('mongoose'); const config = require('./config'); const logger = require('../utils/logger'); const connectDB = async () => { try { await mongoose.connect(config.mongoUri, { useNewUrlParser: true, useUnifiedTopology: true }); logger.info('MongoDB connected successfully'); } catch (error) { logger.error('MongoDB connection error:', error); process.exit(1); } }; module.exports = connectDB; 3. Models Definition src/models/user.model.js const mongoose = require('mongoose'); const bcrypt = require('bcryptjs'); const jwt = require('jsonwebtoken'); const config = require('../config/config'); const userSchema = new mongoose.Schema({ name: { type: String, required: [true, 'Name is required'], trim: true, minlength: 3, maxlength: 50 }, email: { type: String, required: [true, 'Email is required'], unique: true, lowercase: true, trim: true }, password: { type: String, required: [true, 'Password is required'], minlength: 6, select: false }, role: { type: String, enum: ['user', 'admin'], default: 'user' } }, { timestamps: true }); // Pre-save middleware to hash password userSchema.pre('save', async function(next) { if (!this.isModified('password')) return next(); this.password = await bcrypt.hash(this.password, 12); next(); }); // Instance methods userSchema.methods.generateAuthToken = function() { return jwt.sign( { id: this._id, role: this.role }, config.jwtSecret, { expiresIn: config.jwtExpiresIn } ); }; userSchema.methods.comparePassword = async function(candidatePassword) { return await bcrypt.compare(candidatePassword, this.password); }; const User = mongoose.model('User', userSchema); module.exports = User; src/models/product.model.js const mongoose = require('mongoose'); const productSchema = new mongoose.Schema({ name: { type: String, required: true, trim: true }, price: { type: Number, required: true, min: 0 }, description: String, category: { type: String, required: true }, createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true } }, { timestamps: true }); const Product = mongoose.model('Product', productSchema); module.exports = Product; 4. Controllers src/controllers/user.controller.js const User = require('../models/user.model'); const { validateUser } = require('../utils/validators'); const logger = require('../utils/logger'); exports.register = async (req, res) => { try { const { error } = validateUser(req.body); if (error) return res.status(400).json({ error: error.details[0].message }); const user = await User.create(req.body); const token = user.generateAuthToken(); res.status(201).json({ status: 'success', token, data: { user } }); } catch (error) { logger.error('Registration error:', error); res.status(400).*: error.message }); } }; exports.login = async (req, res) => { try { const { email, password } = req.body; const user = await User.findOne({ email }).select('+password'); if (!user || !(await user.comparePassword(password))) { return res.status(401).*: 'Invalid email or password' }); } const token = user.generateAuthToken(); res.json({ status: 'success', token }); } catch (error) { logger.error('Login error:', error); res.status(400).*: error.message }); } }; 5. Routes src/routes/user.routes.js * router = express.Router(); const userController = require('../controllers/user.controller'); const auth = require('../middleware/auth.middleware'); router.post('/register', userController.register); router.post('/login', userController.login); router.get('/profile', auth, userController.getProfile); module.exports = router; 6. Middleware src/middleware/auth.middleware.js const jwt = require('jsonwebtoken'); const config = require('../config/config'); const User = require('../models/user.model'); module.exports = async (req, res, next) => { try { const token = req.headers.authorization?.replace('Bearer ', ''); if (!token) { return res.status(401).*: 'No token provided' }); } const decoded = jwt.verify(token, config.jwtSecret); const user = await User.findById(decoded.id); if (!user) { return res.status(401).*: 'User not found' }); } req.user = user; next(); } catch (error) { res.status(401).*: 'Invalid token' }); } }; src/middleware/error.middleware.js const logger = require('../utils/logger'); module.exports = (err, req, res, next) => { logger.error(err.stack); if (err.name === 'ValidationError') { return res.status(400).*: err.message }); } if (err.code === 11000) { return res.status(400).*: 'Duplicate field value' }); } res.status(err.status || 500).json({ status: 'error', message: err.message || 'Internal server error' }); }; 7. Utils src/utils/logger.js const winston = require('winston'); const config = require('../config/config'); const logger = winston.createLogger({ level: config.nodeEnv === 'development' ? 'debug' : 'info', format: winston.format.combine( winston.format.timestamp(), winston.format.json() ), transports: [ new winston.transports.File({ filename: 'logs/error.log', level: 'error' }), new winston.transports.File({ filename: 'logs/combined.log' }) ] }); if (config.nodeEnv === 'development') { logger.add(new winston.transports.Console({ format: winston.format.simple() })); } module.exports = logger; src/utils/validators.js const Joi = require('joi'); exports.validateUser = (user) => { const schema = Joi.object({ name: Joi.string().min(3).max(50).required(), email: Joi.string().email().required(), password: Joi.string().min(6).required(), role: Joi.string().valid('user', 'admin') }); return schema.validate(user); }; exports.validateProduct = (product) => { const schema = Joi.object({ name: Joi.string().required(), price: Joi.number().min(0).required(), description: Joi.string(), category: Joi.string().required() }); return schema.validate(product); }; 8. Main Application File src/app.js * cors = require('cors'); const helmet = require('helmet'); const config = require('./config/config'); const connectDB = require('./config/database'); const errorMiddleware = require('./middleware/error.middleware'); const userRoutes = require('./routes/user.routes'); const productRoutes = require('./routes/product.routes'); const logger = require('./utils/logger'); // Initialize express app const app = express(); // Connect to MongoDB connectDB(); // Middleware app.use(helmet()); app.use(cors()); app.use(express.json()); app.use(express.urlencoded({ extended: true })); // Routes app.use('/api/users', userRoutes); app.use('/api/products', productRoutes); // Error handling app.use(errorMiddleware); // Start server app.listen(config.port, () => { logger.info(`Server running in ${config.nodeEnv} mode on port ${config.port}`); }); // Handle unhandled promise rejections process.on('unhandledRejection', (err) => { logger.error('UNHANDLED REJECTION! Shutting down...'); logger.error(err.name, err.message); process.exit(1); }); Running the Application Install dependencies: npm install Set up your environment variables in .env Start the development server: npm run dev For production: npm start Testing the API Test the API endpoints using tools like Postman or curl: # Register a new user curl -X POST http://localhost:3000/api/users/register \\ -H \"Content-Type: application/json\" \\ -d '{\"name\": \"John Doe\", \"email\": \"john@example.com\", \"password\": \"password123\"}' # Login curl -X POST http://localhost:3000/api/users/login \\ -H \"Content-Type: application/json\" \\ -d '{\"email\": \"john@example.com\", \"password\": \"password123\"}' This structured guide provides a complete setup for a Node.js and Mongoose application with proper organization, error handling, and security features. Each file has its specific responsibility, making the codebase maintainable and scalable. 👋 * big *, it's free, and * Community matters *enc* Read next Exploring the Core of true value vs false value in JavaScript... Tanvir Ahmed - Oct 17 * Sushant Gaurav - Nov 4 Understanding JavaScript Proxy: Power of Intercepting and Customizing Operations Shafayet Hossain - Oct 16 Top 5 Game-Changing JavaScript Features in ECMAScript 2024: Boost Your Code Like Never Before! vamstroy - Nov 4 Akram Khan Follow Javascript Developer | Reactjs | Nextjs | Nodejs | React Native | Mongodb | Postgresql Location Indore, Madhya Pradesh, India Education MCA persuing. Joined Oct 23, 2022 More from Akram Khan I create a custom Modal component in react + typescript. #react #* I create a Todo Application in Typescript With Save Todos in Local Storage #typescript #html #css #node My subdomain proxy server in nodejs #javascript #node #proxy #subdomain Neon Promoted * Top 3 Features in Postgres 17 These are the 3 new features you need to know about. See Article → How and when to use btree_gist Become a wizard of space and time with Postgres. See Article → 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/akram6t/a-secure-authentication-in-nodejs-with-mongodb-database-hlf"
  },
  {
    "body": "* Follow Report Abuse Ali Torki 404 bio not found Tehran Joined on Mar 18, 2017 ali_4286@live.com https://linkedin.com/in/alitorki Work Bitex Seven * seven years. Got it * Six * six years. Got it Five * five years. Got it *. Got it Two * two years. G* @alimaster Skills/Languages typescript, javascript, nodejs, nestjs, devops, kubernetes Currently hacking on Typescript, Nodejs, React, Docker, Kubernetes 2 * 3 tags followed Pinned PWA Badge Ali Torki Ali Torki Ali Torki Follow Jan 13 '21 PWA Badge #pwa #javascript #react #vue 34 * Fix the IOS 14 Keychain bug in Password fields Ali Torki Ali Torki Ali Torki Follow Jan 18 '21 Fix the IOS 14 Keychain bug in Password fields #ios #html #web Add C*ith Ali Torki? * Ali Torki. * * * ",
    "url": "https://dev.to/alimaster"
  },
  {
    "body": "* Follow Report Abuse Ali Sina Yousofi A bit lazy Full-Stack Developer | Technical writer | Mobile Developer Kabul Joined on Mar 12, 2023 https://alisina.vercel.app/ Education YDWK Work Freelancing One * one year. Got it * Beloved Comment Awarded for making a well-loved comment, as voted on with 25 heart (❤️) reactions by the community. Got it GitHub + DEV 2023 Hackathon Participant Thanks for participating in the GitHub + DEV 2023 Hackathon! Got it *. Got it 2 Week Co* * * 1 We*t * More info about @alisinayousofi Skills/Languages javascript node.js express react next tailwind html css Currently learning Trying to earn money through what i have learned. Currently hacking on A blogging website for developers to share their knowledge. check the progress on github: https://github.com/AliSinaYOusofi/LazyDevs Available for Nextjs Nodejs 20 posts published 17 comments written 4 tags followed Anyone hiring Ali S*usofi Follow Jul 31 Anyone hiring #webdev #javascript #hire #developerforhire Add C*ith Ali Sina Yousofi? * Ali Sina Yousofi. * Netlify image CDN Ali S*usofi Follow May 9 Netlify image CDN #netlifychallenge #devchallenge #webdev #*t 1 min read Git Techniques: Best Practices for Version Control Ali S*usofi Follow May 19 '23 Git Techniques: Best Practices for Version Control #github #git #versioncontrol #codebase 4 *d Closures in javascript Ali S*usofi Follow May 14 '23 Closures in javascript #javascript #closures #beginners #programming 3 comments 3 min read Time Track Chrome Extension Ali S*usofi Follow May 12 '23 Time Track Chrome Extension #githubhack23 #chromeextension #javascript #html * API and RESTful API. Ali S*usofi Follow Apr 8 '23 What is API and RESTful API. #api #rest #http #httpmethod Add Comment 3 min read Destructing arrays. Ali S*usofi Follow Apr 5 '23 Destructing arrays. 1 comment 3 min read Creational Design Patterns. Ali S*usofi Follow Apr 1 '23 Creational Design Patterns. * {minimize: false} MongoDB Ali S*usofi Follow Mar 27 '23 {minimize: false} MongoDB * Check if a user has enough internet speed for uploading a photo in JavaScript Ali S*usofi Follow Mar 27 '23 Check if a user has enough internet speed for uploading a photo in JavaScript * Why we use app.use(express.urlEncoded({extended: true})) in our express web app. Ali S*usofi Follow Mar 26 '23 Why we use app.use(express.urlEncoded({extended: true})) in our express web app. * Git and Github Ali S*usofi Follow Mar 25 '23 Git and Github #git #github #versioncontr #* 3 min read For and while loops in Javascript. Ali S*usofi Follow Mar 23 '23 For and while loops in Javascript. * If, else in javascript. Ali S*usofi Follow Mar 22 '23 If, else in javascript. #javascript #* 1 reaction 2 comments 2 min read Javascript useful one liners and their explanation. Ali S*usofi Follow Mar 19 '23 Javascript useful one liners and their explanation. Add Comment 2 min read Try, Catch, Finally in javascript. Ali S*usofi Follow Mar 18 '23 Try, Catch, Finally in javascript. Add Comment 2 min read Functions in JavaScript Ali S*usofi Follow Mar 16 '23 Functions in JavaScript 1 reaction 2 comments 4 min read Objects in javascript. Ali S*usofi Follow Mar 14 '23 Objects in javascript. #* #* Difference between let, var and const with examples. Ali S*usofi Follow Mar 12 '23 Difference between let, var and const with examples. Add Comment 2 min read Login page using flexbox Ali S*usofi Follow Mar 12 '23 Login page using flexbox #webdev #html #css #beginners 2 * * ",
    "url": "https://dev.to/alisinayousofi"
  },
  {
    "body": "* Follow Report Abuse Ana Ribas 404 bio not found Joined on Jan 18, 2023 More info about @anaribazz Badges One * one year. Got it 0 posts *owe*nsor Neon * ",
    "url": "https://dev.to/anaribazz"
  },
  {
    "body": "* 67 Add reaction 57 Like 10 *s 0 Fire 8 Jump to Comments 76 * Andre Posted on Mar 16, 2019 • Updated on Nov 30, 2019 57 10 Node Scheduler How to create a Task Scheduler in NodeJS #node #javascript #es6 Wes Bos posted a really useful video explaining how to scrape data from the web with NodeJS. In his second video he explained how to setup a schedule for this particular task. Something I'd never done before in Node so I thought this might come in useful in the future and therefore I should write a quick blog post about it. Whereas in Wes his video he grabs data from his own social media pages, I'm going to create a small app that runs on a schedule and downloads a random image every day at 6PM. I know right, who doesn't want to have a random image popping up on his or her disk every day?! A few things we need to install first: // create dir, go into it and install packages mkdir image-downloader && cd image-downloader && npm i node-cron node-fetch esm A quick break down of what you've just installed: node-cron: this is the package for the task scheduler. It allows you to setup schedules that automatically perform something (often executes a function). node-fetch: a way to use the fetch api. Which is a native browser API - but we don't have a browser when we use node. You can also use another package here. Axios is very popular one. It just allows you to download the content behind a url. Typically you use this for connecting to APIs or scraping the web. esm: I had not used this one before but it's super useful. It allows you to write your code like you'd do in client side JavaScript such as in Vue or React. Which means you have access to things like import / exports. To enable this esm you have to install it and then add it to your run script. In my package.json file I added this line as the 'start' script: \"scripts\": { \"start\": \"node -r esm index.js\" }, You could then run this script by doing npm run start. Create downloader Now we got the necessary packages installed it's time to create the first file in which we'll just fetch one image: fetch.js // fetch.js import fetch from \"node-fetch\"; import fs from \"fs\"; // create a function that grabs a random image const fetchingData = async () => { const res = await fetch(\"https://picsum.photos/200?random\"); const date = Date.now(); const dest = fs.createWriteStream(`./image-${date}.png`); res.body.pipe(dest); }; // export the function so it can be used in the index.js file export default fetchingData; In order to get a random picture each time you execute this script, I use Picsum. This website allows you to generate a random image with a fixed width and height. You can append those dimensions to the url. I also create a variable with the current date. This date will then be appended to the file name and prevents the files from being overwritten. Because we're working with promises here I'm using async/await. If you want to test this file you can run it with node -r esm fetch.js Setup a schedule Next you want to create an index.js file. This will be the main entry file and this one contains the node-cron function: import cron from \"node-cron\"; cron.schedule(\"* * * * *\", () => { console.log(`this message logs every minute`); }); This is a very small app which if you execute it will log a message to the console. This message will be repeated every minute. Cool, but not very useful. Let's add our image fetcher by importing it. The index.js file will then look like so: import cron from \"node-cron\"; import fetchingData from \"./fetch\"; cron.schedule(\"* * * * *\", () => { console.log(`one minute passed, image downloaded`); fetchingData(); }); However, this will run the image downloader every minute. We can change the cron job by changing the first parameter that we're adding into the schedule function. The five stars you see mean that the function will run every minute. You can modify this by following this (taken from here): # ┌────────────── second (optional) # │ ┌──────────── minute # │ │ ┌────────── hour # │ │ │ ┌──────── day of month # │ │ │ │ ┌────── month # │ │ │ │ │ ┌──── day of week # │ │ │ │ │ │ # │ │ │ │ │ │ # * * * * * * At first, I didn't really understand what this meant. After a bit of Googling I found the following website that was really useful as a cheatsheet; the crontabguru This means you can setup a schedule for literally any time. Maybe once a year? Or every Tuesday at 8am in January and July. There's really no limitation. I continued by setting up a schedule to make it download every day at 6PM by setting it to this: 0 18 * * * The complete and final index.js file is then: import cron from \"node-cron\"; import fetchingData from \"./fetch\"; cron.schedule(\"0 18 * * *\", () => { console.log(`one minute passed, image downloaded`); fetchingData(); }); Want to take a look at the full app or clone it? Head over to my Github here! First post at Dev.to so be gentle. Originally published at andredevries.dev _Su* UI Component * retain full ownership *ion limits. Learn more Top comments (8) * dAVE Inden dAVE Inden dAVE Inden Follow Maker of electronic noise | Drinker of coffee Location Seattle Work Developer Support Engineer at Recharge Payments Joined Dec 2, 2017 • Mar 16 '19 * post. It is a nice example of getting a scheduled app up and running. I especially like the link out to the crontabguru resource. That will be very helpful in understandingand those statements for this and other cron jobs. I also like the use of esm. I have been meaning to bring that into some of my projects to be abel to use import and export statements. 3 likes Like Reply Florin Pop Florin Pop Florin Pop Follow Purple Popper 💜, Coding enthusiast 💻, YouTuber youtube.com/florinpop 😍, Streamer twitch.tv/florinpop17 ⌨ - Discord discord.gg/qSse3Ey 👨‍👩‍👧‍👦 Work YouTuber at YouTube Joined Mar 5, 2017 • Mar 17 '* Very nice article! 👏 I've learned about esm. Never used before, wondering why? 🤔 3 likes Like Reply The Suhu The Suhu The Suhu Follow life is share Location Indonesia Work Programmer at Government Joined Aug 7, 2019 • Aug 7 '* if i set scheduller every 1 minute, but task finish more than one minutes, how to prevent from overlaping job? 3 likes Like Reply Jamal Al Jamal Al Jamal Al Follow Free individual, lost in the world of javascript Location San Antonio TX Education Associate in Computer Programming Joined Aug 5, 2018 • Mar 17 '* Question: the script got be ruining all the time in order for this to work right? So if I turn off my PC, it's gone. Or is it written to the OS crontab? 2 likes Like Reply Md Abu Taher Md Abu Taher Md Abu Taher Follow Full Stack Developer, focused on web automation, open source enthusiast and contributor. Passionate about programming, specializing in JavaScript. Location Dhaka, Bangladesh Joined Sep 29, 2017 • Mar 17 '19 * can use a package manager like pm2 to run it forever in background. 3 likes Like Reply Andre Andre Andre Follow Joined Mar 16, 2019 • Mar 17 '19 * question! But yes if you turn your machine off the cron job will stop. I’ll have a look if I can find an npm package that actually writes to the crontab. 2 likes Like Reply mrdiez73 mrdiez73 mrdiez73 Follow Joined Oct 3, 2019 • Oct 3 '19 * post bro, love it simple and easy to understand. Thx!!! 2 likes Like Reply Dishant Pandya Dishant Pandya Dishant Pandya Follow DevOps Engineer| PaaS | Kubernetes | Cloudfoundry Location Ahmedabad Education Gujarat Technological University Work DevOps Engineer at OpenXcell Inc. Joined Dec 10, 2019 • Jan 21 '22 *! Can you suggest a solution for distributed scheduling for scalable microservices. 1 like Like Reply * * NextJS makes yo* How to Build a Gay Video Chat App with ZEGOCLOUD Stephen568hub - Nov 5 TC39 JavaScript Updates, TypeScript 5.7 Beta, Node.js v20.18.0 and more James - Oct 13 Building a Self-Evolving Codebase: JavaScript’s AST Manipulation and Dynamic Compilation Shafayet Hossain - Nov 5 How to download a file in Angular using document API Prateek Kr - Oct 13 Andre Follow Joined Mar 16, 2019 More from Andre A first look at Deno #deno #node #javascript #videos How to use a 'do... while' loop for API pagination #javascript #api #node How to deploy a React application on AWS Amplify #aws #react #javascript #videos _SurveyJS Promoted * UI Components for Dynamic Surveys and Forms SurveyJS lets *ystem that works with any backend. You get full control over your data, no user limits, and all the good stuff—custom *S*ics, and more. Fully compatible with React, Angular, Vue.js, jQuery, or whatever JS framework you're using. View demo 👋 ** * ",
    "url": "https://dev.to/andre347/how-to-create-a-task-scheduler-in-nodejs-4lo2"
  },
  {
    "body": "* Follow Report Abuse Anshul Negi Hello there... I Consider Myself A Budding Programmer, Learning Things At Own Pace & Celebrating The Learning Curve. India Joined on Dec 14, 2019 anshul.negi.tc@gmail.com Education B.Tech(Computer Science) Work MERN developer at Anshul Negi The Pinata Challenge Completion Badge Awarded for completing The Pinata Challenge. Thank you for participating! 💻 Got it * Four * four years. Got it 1 We*t 2 comme*hree * three years. Got it Redis x DEV Hackathon Participant Awarded to everyone who participated in the 2022 Redis Hackathon on DEV. Great work, y'all! Got it Two * two years. G* @anshulnegitc Skills/Languages The Technologies I am familiar with are React JS, Angular, Bootstrap, Node JS, Mongo DB, Redis, Jest, Supertest, ThreeJs Available for Web development, JavaScript, MERN stack, and enhancing oneself. 3 posts published 70 comments written 45 tags followed Free Image Hosting Anshul Negi Anshul Negi Anshul Negi Follow Oct 13 Free Image Hosting #devchallenge #pinatachallenge #webdev #api 14 reactions Add C*ith Anshul Negi? * Anshul Negi. * Url Shortener Anshul Negi Anshul Negi Anshul Negi Follow Aug 29 '22 Url Shortener #redishackathon Add Comment 2 min read designing database Anshul Negi Anshul Negi Anshul Negi Follow Mar 16 '20 designing database #help #mongodb #database #discuss 6 reactions 7 comments 1 *onsor Neon * ",
    "url": "https://dev.to/anshulnegitc"
  },
  {
    "body": "* Follow Report Abuse Apoorv Software Developer by profession, Explorer by Passion. Dev Tag Moderator (#javascript, #webdev, #node, #programming, #react) India Joined on Mar 4, 2018 https://mindroast.com Education India Work Senior Software Developer Six * six years. Got it * Five * five years. Got it 1 We*t * Redis x DEV Hackathon Participant Awarded to everyone who participated in the 2022 Redis Hackathon on DEV. Great work, y'all! Got it *. Got it Two * two years. G* @apoorvtomar Skills/Languages Javascript, Node JS, React JS, Python, Java. Available for I am mostly available for any meaningful discussion or collaboration. 32 posts published 8 comments written 1 tag followed Protecting Yourself from Modern Scams: A Guide for 2025 Apoorv Apoorv Apoorv Follow Oct 2 Protecting Yourself from Modern Scams: A Guide for 2025 #scams #deepfake #ai #whatsapp Add Comment 5 m*poorv? * Apoorv. * React Prop Drilling: Should You Use It? Apoorv Apoorv Apoorv Follow Aug 24 React Prop Drilling: Should You Use It? #webdev #javascript #coding #react Add Comment 5 min read What the Heck is Platform Engineering? Apoorv Apoorv Apoorv Follow Jul 31 What the Heck is Platform Engineering? #webdev #career #programming #development Add Comment 4 min read How to Identify and Mitigate Flaky Tests: Best Practices and Strategies. Apoorv Apoorv Apoorv Follow Jul 9 How to Identify and Mitigate Flaky Tests: Best Practices and Strategies. #* #coding Add Comment 4 min read Maximizing Productivity with ChatGPT: Comparing ChatGPT-3.5 and ChatGPT-4 Omni for Diverse AI Applications Apoorv Apoorv Apoorv Follow Jun 15 Maximizing Productivity with ChatGPT: Comparing ChatGPT-3.5 and ChatGPT-4 Omni for Diverse AI Applications #webdev #ai #software #coding Add Comment 4 min read Top 5 Essential Laptop/Mac Maintenance Tasks for Peak Performance Apoorv Apoorv Apoorv Follow May 1 Top 5 Essential Laptop/Mac Maintenance Tasks for Peak Performance #apple #windows #performance Add Comment 5 min read Maximizing Payment Reliability: Harnessing the Power of Idempotency Keys in Your Stripe Integration Apoorv Apoorv Apoorv Follow Mar 23 Maximizing Payment Reliability: Harnessing the Power of Idempotency Keys in Your Stripe Integration #systemdesign #webdev #programming #coding Add Comment 5 min read Battle for AI Dominance: Can Gemini Surpass Chat GPT in the Future?” Apoorv Apoorv Apoorv Follow Jan 18 Battle for AI Dominance: Can Gemini Surpass Chat GPT in the Future?” #ai #chatgpt #bard #machinelearning Add Comment 5 min read Prevent Your Website from Being Embedded on Other Sites. Apoorv Apoorv Apoorv Follow Dec 25 '23 Prevent Your Website from Being Embedded on Other Sites. #webdev #nginx #cybersecurity #* 3 min read ChatGPT vs OpenAI: A Comparative Look at AI Advancements Apoorv Apoorv Apoorv Follow Dec 6 '23 ChatGPT vs OpenAI: A Comparative Look at AI Advancements #ai #chatgpt #programming #machinelearning * Unlocking the Power of Chat GPT: A Comprehensive Guide to Prompt Engineering Excellence. Apoorv Apoorv Apoorv Follow Nov 25 '23 Unlocking the Power of Chat GPT: A Comprehensive Guide to Prompt Engineering Excellence. #ai #chatgpt #webdev #programming 7 * Step-by-Step Guide: How to Add a Download Button to Save React Component as PDF Apoorv Apoorv Apoorv Follow Oct 22 '23 Step-by-Step Guide: How to Add a Download Button to Save React Component as PDF #webdev #* 5 * Better Way To Manage Your Node.js Secrets, Technically Apoorv Apoorv Apoorv Follow Oct 6 '23 Better Way To Manage Your Node.js Secrets, Technically #javascript #programming #node #webdev Add Comment 6 min read Expert Advice from MANG Engineer Apoorv Apoorv Apoorv Follow Aug 15 '23 Expert Advice from MANG Engineer #beginners #career #productivity 2 comments 3 min read Different Ways of Handling Dynamic Routing in Next.js Apoorv Apoorv Apoorv Follow Jul 24 '23 Different Ways of Handling Dynamic Routing in Next.js #webdev #nextjs #*nt 7 min read A Better Understanding Of Micro Rep Vs Mono Repo. Apoorv Apoorv Apoorv Follow Jul 11 '23 A Better Understanding Of Micro Rep Vs Mono Repo. #programming #beginners #git Add Comment 7 min read Saga Microservice Pattern. Apoorv Apoorv Apoorv Follow Apr 8 '23 Saga Microservice Pattern. #webdev #devops #architecture Add Comment 3 min read Notes Revolution is Here, Explore It Now. Apoorv Apoorv Apoorv Follow Jan 29 '23 Notes Revolution is Here, Explore It Now. #* A Chrome Extension For Easing Your Writing At Dev Platform. Apoorv Apoorv Apoorv Follow Jan 26 '23 A Chrome Extension For Easing Your Writing At Dev Platform. #webdev #productivity #writing * Stealth Startups: Let’s Decrypt Them. Apoorv Apoorv Apoorv Follow Jan 12 '23 Stealth Startups: Let’s Decrypt Them. * Perks / Hardships of Becoming A Technical Blogger 2023 | Technical. Apoorv Apoorv Apoorv Follow Jan 11 '23 Perks / Hardships of Becoming A Technical Blogger 2023 | Technical. #webdev #developer * Curling the Alternative Data for Better Analytics. Apoorv Apoorv Apoorv Follow Nov 5 '22 Curling the Alternative Data for Better Analytics. #webdev #database #api 2 * Different Ways You Must Know To Deploy Your Application | Technical. Apoorv Apoorv Apoorv Follow Oct 8 '22 Different Ways You Must Know To Deploy Your Application | Technical. #devops #software #deploymen #webdev Add Comment 8 min read Redux in Next JS project. | Technical Apoorv Apoorv Apoorv Follow Sep 22 '22 Redux in Next JS project. | Technical #javascript #nextjs #redux * Crack the Code of Landing the Technical Interviews Apoorv Apoorv Apoorv Follow Sep 15 '22 Crack the Code of Landing the Technical Interviews #* #javascript 4 reactions 2 comments 9 min read Trip Collaborator [#3]: Finalising Location Made Easy . Apoorv Apoorv Apoorv Follow Aug 22 '22 Trip Collaborator [#3]: Finalising Location Made Easy . #redishackathon #nextjs #react 7 * Trip Collaborator #2: Finalising Location Made Easy (Architecture and Screenshots). Apoorv Apoorv Apoorv Follow Aug 17 '22 Trip Collaborator #2: Finalising Location Made Easy (Architecture and Screenshots). #redishackathon #redis #database #* 2 min read Trip Collaborator #1: Finalising Location Made Easy (Problem Statement). Apoorv Apoorv Apoorv Follow Aug 13 '22 Trip Collaborator #1: Finalising Location Made Easy (Problem Statement). #redishackathon #redis #javascript #* 1 min read Build a Resilient Application Using Redis Offering. Apoorv Apoorv Apoorv Follow Jul 28 '22 Build a Resilient Application Using Redis Offering. #javascript #redis #programming * Explore the Architecture Behind a Typical Notification Apoorv Apoorv Apoorv Follow May 19 '22 Explore the Architecture Behind a Typical Notification #javascript #* 7 min read React Redux is this a Thing of the Past after Context API. Apoorv Apoorv Apoorv Follow May 8 '22 React Redux is this a Thing of the Past after Context API. #javascript #react #tutorial 9 * 3 Ways Digital World is Contributing to Prevention of Global Warming Apoorv Apoorv Apoorv Follow Apr 30 '22 3 Ways Digital World is Contributing to Prevention of Global Warming #discuss #programming #coding 2 reactions Add Comment 6 *onsor Neon * ",
    "url": "https://dev.to/apoorvtomar"
  },
  {
    "body": "* Follow Report Abuse Arif Hossain 404 bio not found Jasore,Khulna,Bangladesh Joined on Nov 6, 2024 More info about @arif_hossain Badges * 26 posts *owed Actions Runner Controller (ARC) Setup Guide * 9 Actions Runner Controller (ARC) Setup Guide #devops #docker #github* Basic GitHub Actions Checkout * 9 Basic GitHub Actions Checkout #devops #docker #githubactions 2 *d Deploy The Multi-Container App * 9 Deploy The Multi-Container App #devops #docker Add Comment 6 min read Introduction to Docker Compose * 9 Introduction to Docker Compose #* * Follow Nov 9 Multi-stage Buil* Add Comment 2 min read Containerize a Single-Container App * 9 Containerize a Single-Container App #* Exploring Docker Image Layers and Size Management * 9 Exploring Docker Image Layers and Size Management #*ad Modifying Docker Image Attributes * 9 Modifying Docker Image Attribut*ad Reviewing Filesystem Changes * 9 Reviewing Filesystem Changes #docker #devops Add Comment 4 min read Create and Commit an Ubuntu Container with Git Installed * 9 Create and Commit an Ubuntu Container with Git Installed #docker #devops Add Comment 3 min read Docker Container Restart Policies * 8 Docker Container Restart Polici*ad Building Docker Images from a Container * 8 Building Docker Images from a Container #*nt 3 min read Docker image layer sharing and digest * 8 Docker image layer sharing and digest #*nt 4 min read Create own Docker image * 8 Create own Docker image #devops #docker 3 * Exploring Bridge Networks in Docker. * 8 Exploring Bridge Networks in Docker. #*nt 3 min read Communication Between Containers in a Custom Bridge Network * 8 Communication Between Containers in a Custom Bridge Network #* Log Sharing Between Containers * 8 Log Sharing Between Containers #devops #docker Add Comment 5 min read Working with Docker Volumes * 8 Working with Docker Volumes #*nt 4 min read Docker Bind Mounts * 7 Docker Bind Mounts #devops #docker Add Comment 5 min read Setting Up a Host-Like Environment Using Docker Containers * 7 Setting Up a Host-Like Environment Using Docker Containers #devops #docker 3 *d Deploying a Monitored NGINX Web Server Using Docker * 7 Deploying a Monitored NGINX Web Server Using Docker #* Searching Docker Hub from the CLI * 7 Searching Docker Hub from the CLI #*nt 3 min read Filtering Docker Images * 7 Filtering Docker Images 2 * Differentiating Docker stop vs Kill * 7 Differentiating Docker stop vs Kill #*ad Lifecycle of a Container * 7 Lifecycle of a Container #devops #docker #containers 2 *d Running an NGINX Web Server in a Docker Container * 7 Running an NGINX Web Server in a Docker Container #devops #docker Add Comment 3 *onsor Neon * ",
    "url": "https://dev.to/arif_hossain"
  },
  {
    "body": "* 0 *ead 0 * 0 * Arif Hossain Posted on Nov 9 Multi-stage Buil* * In the world of making programs run smoothly inside containers, we've found that using just one step to build them isn't always the best idea. When we stick to single steps, our containers can end up being really big and slow. But fear not! There's a better way: multi-stage builds. These help us make our containers smaller and faster without losing any important stuff. Today, we're going on an adventure to discover how multi-stage builds work. We'll break down the complicated bits into easy-to-understand pieces. Create a Simple Node.js App Create a directory for our project and navigate into it: mkdir node-app cd node-app Now, create a file named app.js and add the following code: const http = require('http'); const server = http.createServer((req, res) => { res.writeHead(200, {'Content-Type': 'text/plain'}); res.end('Hello from Docker! Welcome to our application.\\n'); }); const PORT = process.env.PORT || 3000; server.listen(PORT, () => { console.log(`Server running at http://localhost:${PORT}/`); }); This simple Node.js application creates an HTTP server that listens on port 3000 and responds with \"Hello, world!\" to all requests. Create a Dockerfile Next, let's create a Dockerfile to containerize our Node.js application using two-stage builds: # Stage 1: Build the Node.js application FROM node:latest AS build WORKDIR /app COPY app.js . # Stage 2: Create the production image FROM node:slim WORKDIR /app COPY --from=build /app . EXPOSE 3000 CMD [\"node\", \"app.js\"] Stage 1 (build): Purpose: Build the Node.js application. Functionality: Uses node:latest image as the base, providing necessary build tools. Sets the working directory to /app where application code will be copied. Copies index.js into the image, preparing for application build. Stage 2: Purpose: Create the production image. Functionality: Uses node:slim image as the base, providing a minimal runtime environment. Sets the working directory to /app, ensuring consistency with the build stage. Copies the built application from the build stage into this stage, excluding unnecessary build tools. Exposes port 3000, allowing external communication with the application. Defines the command to run the application (node index.js), starting the HTTP server. Build and Run the Docker Image Now, let's build and run the Docker image: docker build -t node-app . docker run -d -p 3000:3000 node-app Check that the container is running: docker ps This will build the Docker image based on the Dockerfile and run a container based on that image. The application will be accessible at http://localhost:3000. Testing the App To test the app, we can use curl to send a request to the running container: curl http://localhost:3000 This should return: Conclusion In this guide, we've demonstrated how to use two-stage builds in Docker to containerize a simple Node.js application. Each stage has a specific purpose, allowing us to create smaller and more efficient Docker images by separating the build process into distinct steps. Coherence Promoted * The Next Generation Developer Platform Coherence is the first Platform-as-a-Service you can control. Unlike \"black-box\" platforms that are opinionated about the infra you can deploy, Coherence is powered by CNC, the open-source IaC framework, which offers limitless customization. Learn more Top comments (0) * * Sentry *r* -? What is YARN ?- nobody-99 - Nov 3 * Abhishek Jaiswal - Nov 7 *) gitter4coding - Nov 7 Demonstrating Persistence vs. Non-Persistence in Kubernetes with MongoDB Dmitry Romanoff - Nov 2 Arif Hossain Follow Location Jasore,Khulna,Bangladesh Joined Nov 6, 2024 More from Arif Hossain Containerize a Single-Container App #devops #docker Exploring Docker Image Layers and Size Management #devops #docker Modifying Docker Image Attributes #docker #devops * * * * ",
    "url": "https://dev.to/arif_hossain/multi-stage-builds-with-a-simple-nodejs-app-cfp"
  },
  {
    "body": "* Follow Report Abuse Aris Kurniawan Always learning for something fun is art and technology. Indonesia Joined on Nov 6, 2019 More info about @arisdolanan Badges Five * five years. Got it * *. Got it T*. Got it 1 post published 4 comments written 27 tags followed R* Aris Kurniawa* Follow Oct 29 R* #rabbitmq #node #javascript #erlang Add Comment 6 m*ris Kurniawan? * Aris Kurniawan. * * * ",
    "url": "https://dev.to/arisdolanan"
  },
  {
    "body": "* 0 *ead 0 * 0 * Aris Kurniawan Posted on Oct 29 R* #rabbitmq #node #javascript #erlang Introduction In applications that require real-time, efficient data communication, two commonly used technologies are RabbitMQ with the Web MQTT Plugin and Node.JS (Socket.IO). RabbitMQ with the Web MQTT Plugin allows for communication using the MQTT protocol over WebSockets, while Node.JS (Socket.IO) provides a JavaScript runtime that efficiently handles events in real-time. This article compares the performance and memory usage of RabbitMQ with the Web MQTT Plugin and Node.JS (Socket.IO), particularly for handling 36 events such as notifications, data reloads, and queue management. It also analyzes whether this setup is optimal or requires further adjustments. Overview of RabbitMQ with Web MQTT Plugin What is RabbitMQ with Web MQTT Plugin? RabbitMQ is a message broker that supports multiple protocols, including MQTT. The Web MQTT Plugin in RabbitMQ enables clients to communicate with the broker via WebSockets using the MQTT protocol. This is particularly useful for web-based applications that need real-time, two-way communication, such as notifications or data queuing. Key Functions of RabbitMQ with Web MQTT Plugin WebSocket Communication: Allows web-based clients to use MQTT over WebSockets, enabling direct communication between the server and browser clients. Queue and Topic Management: Supports queue and topic configurations for effective message traffic management. Retained Messages: Stores the last message so that newly connected clients can receive the latest information without re-requesting. High Scalability for Lightweight Messages: Ideal for applications sending real-time notifications with low latency, like data reloads and notification queues. Overview of Node.JS (Socket.IO) What is Node.JS (Socket.IO)? Node.JS (Socket.IO) is a * engine, designed to handle non-blocking I/O operations. In this context, server.js is used to manage notification events, data reloads, and queues via WebSocket or HTTP protocols, depending on the application requirements. Key Functions of Node.JS (Socket.IO) Non-Blocking I/O: Allows handling multiple requests simultaneously without blocking other operations, ideal for event-driven applications. Event-Driven Architecture: Reduces resource consumption by running code only when specific events occur. Two-Way Communication: Node.JS (Socket.IO) is well-suited for real-time applications that require continuous two-way communication between the client and server via WebSocket. Efficiency and Responsiveness: Efficiently handles large numbers of I/O-based connections, such as managing notifications and queues. Challenges and Limitations RabbitMQ with Web MQTT Plugin Resource Consumption: RabbitMQ, especially with the Web MQTT Plugin, can consume a lot of memory and CPU to handle high message volumes. In this test, RabbitMQ showed a CPU usage of about 5.2%, which is relatively high but reasonable for a message broker. Latency under High Load: Under extremely high loads, there might be a slight latency in message delivery, which can impact applications heavily reliant on real-time performance. More Complex Configuration: Compared to Node.JS (Socket.IO), RabbitMQ with Web MQTT Plugin requires more initial configuration, especially for setting up queues, topics, and bindings. Node.JS (Socket.IO) Single-Threaded: Node.JS (Socket.IO) uses a single thread, so CPU-intensive operations can become a bottleneck. In testing, CPU usage reached 50.5%, which is high for a single-threaded application and may cause delays. Memory Leaks: If not managed properly, a Node.JS (Socket.IO) application can experience memory leaks, especially in long-running applications with high event activity. Dependency on External Libraries: Node.JS (Socket.IO) often relies on many third-party libraries which, if not maintained, could affect overall performance. Performance Analysis with Glances Overview of the Processes RabbitMQ with Web MQTT Plugin: CPU usage: 5.2% Memory usage: 2.8% (5.97 GB Virtual, 887 MB Resident) Uptime: 18 hours and 26 minutes Node.js (server.js): CPU usage: 50.5% Memory usage: 0.4% (1.04 GB Virtual, 257 MB Resident) Uptime: 4 hours and 1 minute These numbers give an initial impression of how each service is consuming resources. CPU Usage Comparison RabbitMQ is relatively light on CPU, only consuming 5.2%, even though it is managing 36 events (notifications, data reloads, and queue management tasks). This low CPU usage is characteristic of RabbitMQ, as it is optimized for message handling and asynchronous communication. Node.js (server.js) is consuming significantly more CPU, at 50.5%. This high usage suggests that server.js may be handling more compute-intensive tasks, possibly related to managing WebSocket connections, processing requests, or handling real-time data. This high CPU usage could impact the server’s performance under higher load or when additional applications are running concurrently. Memory Usage Comparison RabbitMQ shows higher memory usage with 887 MB resident memory, which is reasonable for a messaging broker handling continuous WebSocket connections and MQTT messaging through the Web MQTT Plugin. Its virtual memory footprint (5.97 GB) is high, but this is typically due to pre-allocation and not actual memory in use. Node.js (server.js) has a much lower memory footprint, with only 257 MB resident memory. Node.js applications generally have a small memory footprint but can grow based on the complexity of tasks. Its relatively low memory usage here suggests it is well-optimized for handling tasks, though the high CPU usage may indicate some inefficiencies in CPU-bound tasks. Uptime and Stability RabbitMQ has an uptime of over 18 hours, and it’s using minimal CPU, indicating that it is stable and efficient over longer periods. Node.js (server.js) has only been running for 4 hours but is consuming a large percentage of the CPU. If this CPU usage trend continues, it could become a bottleneck and may require restarting or optimization, especially for a production environment that expects high uptime. Implications on System Performance RabbitMQ with Web MQTT Plugin appears to be less demanding on the CPU and moderate in memory usage. This makes it well-suited for applications that require high-throughput messaging with minimal latency. The current resource usage does not seem excessive, but monitoring memory over longer uptime periods is advised, as message brokers can accumulate memory usage with a high volume of persistent messages. Node.js (server.js) at 50.5% CPU usage suggests that it could be CPU-bound, which could affect other processes or reduce system responsiveness under high load. If server.js handles WebSocket connections, optimizing the code for asynchronous tasks or offloading some processes could reduce CPU usage. High CPU usage in Node.js might also suggest the need for load balancing across multiple instances, especially if the server needs to scale to handle more events. Recommendations for Optimization RabbitMQ: Although RabbitMQ's memory usage is moderate, monitoring is recommended to ensure it doesn't grow unbounded over time, especially with increased event volumes. Node.js (server.js): Optimize CPU Usage: Review code for any CPU-intensive operations or synchronous code that might benefit from asynchronous handling. Benchmark and Load Test: Conduct stress tests to see if server.js CPU usage increases further with more concurrent events. This could help identify specific code bottlenecks. Scaling: Consider horizontal scaling for server.js by running multiple instances behind a load balancer, especially if high CPU usage persists under typical workloads. Latency RabbitMQ with Web MQTT Plugin: Generally has low latency, especially in real-time communication for lightweight messages, which is ideal for notification and data reload scenarios. Node.JS (Socket.IO): Low latency, but high CPU load can introduce delays, especially if the application handles CPU-intensive events. Conclusion RabbitMQ with Web MQTT Plugin is a good choice for applications that require real-time message handling, particularly for the 36 events including notifications, data reloads, and queue management. With around 5.2% CPU usage, RabbitMQ is stable for high message delivery loads, especially when low latency and two-way communication are needed. Node.JS (Socket.IO) is suitable for applications needing an event-driven architecture with two-way communication. However, with CPU usage reaching 50.5%, applications may face limitations in scenarios requiring high CPU processing. Therefore, solutions like clustering or worker threads could be considered if usage continues to grow. Overall: RabbitMQ with Web MQTT Plugin: Highly recommended for applications with large messaging and notification needs. It also simplifies managing connections and messages through WebSockets efficiently. Node.JS (Socket.IO): Ideal for web applications that require fast responses and two-way communication but may require further adjustments to reduce CPU load. With performance analysis through Glances, both technologies have demonstrated results by capturing the highest CPU usage values from each process, which is quite suitable for this scenario. However, regular monitoring is necessary to prevent spikes in CPU or memory usage that could impact the overall system performance. please correct me if I'm wrong 😁 Note : If you have any suggestions for testing, please comment below, and feel free to recommend other tools for real-time communication between the client and server 😊. Documentation: https://www.rabbitmq.com/docs/web-mqtt https://socket.io/docs/v4/ *upercharge your development Reduce frustration, boost productivity, and increase your organization's competitive advantages with Red Hat Developer Hub. Learn more ** Read next Rust + WASI: Application Monitoring Zane - Oct 23 What I’ve Learned from Building a Calculator with Vue.js William Kwadwo Owusu - Oct 19 How I Created a Hover Reveal Text Animation with TailwindCSS and React Skyler Dev - Nov 1 Java Spring Boot use log4j in a gradle project Minhaz - Oct 18 Aris Kurniawan Follow Always learning for something fun is art and technology. Location Indonesia Joined Nov 6, 2019 Trending on DEV Community Open-Source will make you richhhh! 🤑💸 #opensource #* * 🚀 #we* NodeList vs HTMLCollection: The Difference Between NodeList and HTMLCollection #* #react _SurveyJS Promoted * UI Libraries for Dynamic Surveys and Forms SurveyJS lets *ystem that works with any backend. You get full control over your data, no user limits, and all the good stuff—custom *S*ics, and more. Fully compatible with React, Angular, Vue.js, jQuery, or whatever JS framework you're using. View demo 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/arisdolanan/rabbitmq-with-web-mqtt-plugin-vs-nodejs-performance-and-memory-usage-comparison-4jea"
  },
  {
    "body": "* Follow Report Abuse balaji giri 404 bio not found Joined on Nov 7, 2024 More info about @balaji_giri_2003 Badges * * 4 tags followe*ensourc*t 3 *onsor Neon * ",
    "url": "https://dev.to/balaji_giri_2003"
  },
  {
    "body": "* 2 A*ead 0 Raised Hands 1 Fire 0 Jump to Comments 0 * balaji giri Posted on Nov 7 1 1 * Backstage is an open-source developer portal created by Spotify, specifically designed for managing microservices and infrastructure within a DevOps ecosystem. It centralizes tools, documentation, and service catalogs, thereby empowering engineering teams to increase productivity and streamline operations by providing a unified and consistent interface. Here’s a breakdown of its features, use cases, and technical foundation. Key Features in DevOps 1.Service Catalog: The heart of Backstage, the service catalog allows organizations to organize and manage all microservices and infrastructure in one place. This catalog enables teams to locate services easily, check their health, and understand dependencies, helping developers manage complex infrastructures efficiently. 2.Developer Portal: Acting as a centralized hub, Backstage integrates a wide range of tools, plugins, and resources into a single interface, minimizing the need to switch between various DevOps tools. This unified portal improves productivity by providing easy access to everything developers need in one place. 3.Software Templates: Backstage enables the use of templates for creating new services, components, or libraries, which helps ensure standardization and adherence to best practices. This allows teams to maintain consistency across development workflows, promoting best practices and improving quality. 4.Documentation Hub: Backstage provides a centralized repository for documentation, often integrated with tools like Markdown or Confluence. By attaching documentation directly to services, it becomes more accessible, reducing time spent searching for relevant information and enhancing knowledge-sharing. 5.Plugins and Integrations: Backstage has a plugin-based architecture, allowing for seamless integration with popular DevOps tools such as Jenkins, GitHub, Prometheus, and Kubernetes. This adaptability lets teams customize Backstage to fit their unique workflows and tech stacks. 6.API Documentation: Backstage features an API catalog where developers can document and manage APIs, enhancing collaboration and encouraging API reuse. 7.Tech Radar: Backstage includes a “Tech Radar” feature, which visually represents which technologies the company is adopting, evaluating, or retiring. This promotes alignment and helps developers make informed technology choices. How Backstage Fits into DevOps/DevSecOps Backstage acts as a centralized hub within DevOps and DevSecOps frameworks by integrating with existing tools and processes, centralizing resources, and improving visibility and consistency. By bridging DevOps tools into a unified platform, Backstage simplifies the DevOps lifecycle from development through deployment, monitoring, and maintenance. For DevSecOps, Backstage’s centralized portal allows teams to bake security protocols and compliance standards directly into templates, catalogs, and pipelines, reinforcing a “shift-left” approach to security. Furthermore, the documentation hub supports consistent compliance records, while integration capabilities allow security checks to be embedded into pipelines for continuous monitoring. Technical Foundation Primary Language: Backstage is primarily written in TypeScript, with extensive use of JavaScript(React) for its frontend and Node.js as its backend runtime. APIs: Backstage supports both GraphQL and REST APIs for data management. Configuration: YAML is used for configuring services and templates, making it accessible even for developers with minimal programming experience. Deployment Compatibility: Backstage can integrate with databases like SQLite and PostgreSQL for data storage and can be deployed in environments using Docker or Kubernetes. Parent Company and Open Source Spotify developed Backstage as an internal solution for managing their infrastructure and later released it as an open-source project in 2020 under the Apache 2.0 license, allowing free use and modification. While Spotify continues to be a key contributor, Backstage is now governed by the Cloud Native Computing Foundation (CNCF), where it has become a community-driven project with widespread contributions. Overall, Backstage provides an open, flexible platform that aligns well with DevOps and DevSecOps by enhancing productivity, promoting standardization, and simplifying complex workflows. Its comprehensive feature set and extensibility make it a powerful solution for organizations seeking a centralized portal to manage services and infrastructure across their tech stacks. 👋 Before you go * Your next step Do your career a favor. *orth it * (0) * * Sentry *r* How to Calculate the Sum of Multiple Columns Using Eloquent Saddam Hossain - Oct 20 Deploy a Static Astro Site on Railway Mark Munyaka - Oct 20 Rust + WASI: Application Monitoring Zane - Oct 23 Build Your First React App: Mood Tracker pflashgary - Oct 19 balaji giri Follow Joined Nov 7, * Deploy a bento to GitHub Pages #github #javascript #portfolio #webdev * * * * * * ",
    "url": "https://dev.to/balaji_giri_2003/backstage-15mo"
  },
  {
    "body": "* 81 Add reaction 69 Like 3 Unicorn 3 Exploding Head 3 Raised Hands 3 Fire 21 Jump to Comments 117 * Balraj Singh Posted on Oct 8 69 3 3 3 3 * #webdev #npm #node #productivity Productivity is always key, we all know but as developers with tight deadlines and packed schedules, finding the right tools to boost productivity can make a world of difference. So, I’ve pulled together some of my favorite NPM packages. Here are 10 NPM packages that will give your productivity a serious boost. And trust me, these aren't just the \"usual suspects.\" 1. nodemon If you haven't already, it's time to install this. nodemon automatically restarts your Node.js application whenever file changes are detected, so you don’t have to keep restarting the server manually. It’s one of those \"set it and forget it\" tools that become indispensable once you start using it. 2. concurrently If you need to run multiple npm scripts at the same time (like a backend and frontend dev server), concurrently is a lifesaver. One terminal tab, multiple tasks. 3. eslint A no-brainer for keeping your code linted and clean. It helps catch syntax errors and enforces coding standards. If you're working with a team, this can prevent style-related PR comments. 4. prettier Prettier helps format your code consistently. Pair this with ESLint for the ultimate clean code setup. Plus, you can add it as a pre-commit hook with husky to ensure every commit is formatted perfectly. 5. husky Speaking of which, husky allows you to run scripts before Git commits. You can automatically run linting, tests, or formatting before every commit, preventing those \"oh no, I forgot to lint!\" moments. 6. lint-staged When paired with husky, lint-staged allows you to only lint or format the files that are being committed, saving you time and processing power. 7. axios Making HTTP requests is a common task for any developer, and axios remains one of the best libraries for this. It simplifies your requests and supports promises and async/await. Plus, its features for interceptors make API calls easier to manage. 8. jsonwebtoken (JWT) Security is key, and JWT is still a go-to for handling token-based authentication in 2024. It's reliable, and its NPM package makes generating and verifying tokens a breeze. 9. dotenv A small but incredibly useful package that allows you to separate environment configurations from your codebase. It’s great for managing sensitive keys or environment-specific settings. 10. moment-timezone Yes, moment is considered legacy now, but moment-timezone still plays a role when you need to handle time zones reliably. It extends moment to parse and display dates in various time zones, which comes in handy for international apps. Which ones do you already use, and what’s missing from this list? Let’s discuss it in the comments! Neon Promoted * Postgres on Neon - Get the Free Plan No credit card required. The database you love, on a serverless platform designed to help you build faster. Get Postgres on Neon Top comments (21) * carcinocron carcinocron carcinocron Follow Joined Sep 30, 2017 • *e prettier is bad software, it autoremoves parenthesis in math contexts where readability and documenting programmer's intent are mission critical. The only way to prevent prettier from doing this is to uninstall. Very arrogant and poorly designed. 4 likes Like Reply Eduardo Cuomo Eduardo Cuomo Eduardo Cuomo Follow Location General Roca, Río Negro Joined Jul 13, 2020 • *e // prettier-ignore const m = (x * y) + (a / b); prettier.io/docs/en/ignore.html 3 likes Like Reply carcinocron carcinocron carcinocron Follow Joined Sep 30, 2017 • *e Easier to just uninstall prettier and only use eslint than to write 5000 lines of // prettier-ignore github.com/prettier/prettier/issue... 2 likes Like Reply eshimischi eshimischi eshimischi Follow Kawaii desu Work Fullstack developer Joined Apr 8, 2019 • Oct 9 • Edited on Oct 9 • * If you can’t properly configure tools like prettier doesn’t mean it is bad, dude. There is a new alternative to all tools like prettier, eslint, stylelint is biome. Check it out 4 likes Like Reply __ Sinan __ Sinan __ Sinan Follow Joined Jul 30, 2024 • Oct 14 Copy link Hide Report abuse not actually. you can manually change the settings just need to add teh configuration as you needed 1 like Like Reply Alex Alex Alex Follow Just another IT guy, 5+ years of coding on Frontend, Follow me on GitHub , appreciate it. Location void 0 Joined Jun 27, 2019 • *e There isn't a tool that fit every use case, prettier is good for common cases, if you have something very unusual it's different. 1 like Like Reply Xphile Xphile Xphile Follow Joined Jul 29, 2018 • *e Instead of using moment, even the moment team calls out to use a library like luxon instead 4 likes Like Reply eshimischi eshimischi eshimischi Follow Kawaii desu Work Fullstack developer Joined Apr 8, 2019 • *e Dayjs is way less in terms of size, same functionality 2 likes Like Reply eshimischi eshimischi eshimischi Follow Kawaii desu Work Fullstack developer Joined Apr 8, 2019 • Oct 9 • Edited on Oct 9 • * Instead of moment-timezon (rather than moment.js in general sumitaec108.medium.com/stop-using-...) is better @dayjs/tz. Instead of prettier/eslint is biome biomejs.dev/. Check it out 2 likes Like Reply Balraj Singh Balraj Singh Balraj Singh Follow Software engineer with 10 years experience developing simple & anti-fragile software for high-volume businesses. Improved Mobile App's stability and responsiveness by incorporating patterns & practice Work Engineer @ Meta(Facebook) Joined Jan 24, 2023 • *e Would check it out!! 1 like Like Reply Koushik Roy Koushik Roy Koushik Roy Follow I'm Koushik Roy. An front-end JavaScript developer. Email koushikgamerzyt@gmail.com Location India Pronouns He/Him Joined Oct 9, 2024 • *e Hmm..... Its good. Also see my npm package: npmjs.com/package/xytro.js 3 likes Like Reply Balraj Singh Balraj Singh Balraj Singh Follow Software engineer with 10 years experience developing simple & anti-fragile software for high-volume businesses. Improved Mobile App's stability and responsiveness by incorporating patterns & practice Work Engineer @ Meta(Facebook) Joined Jan 24, 2023 • *e Looks great! 2 likes Like Reply Koushik Roy Koushik Roy Koushik Roy Follow I'm Koushik Roy. An front-end JavaScript developer. Email koushikgamerzyt@gmail.com Location India Pronouns He/Him Joined Oct 9, 2024 • *e Sir can you please help me to grow my package please sir 1 like Like Reply Martin Baun Martin Baun Martin Baun Follow Tech Lead and Founder Baunit.com Learn development, software, business, and process building! Checkout our tools below. Goleko.com | Duckist.com | VideoFeedbackr.com | ToolBun.com | ElegantDoc.com Location Sofia, Bulgaria Work CTO -BaunIT Joined Oct 7, 2021 • *se I use axios, cons: idk, pro: I like it. 2 likes Like Reply Balraj Singh Balraj Singh Balraj Singh Follow Software engineer with 10 years experience developing simple & anti-fragile software for high-volume businesses. Improved Mobile App's stability and responsiveness by incorporating patterns & practice Work Engineer @ Meta(Facebook) Joined Jan 24, 2023 • *se Heard good things about it! 2 likes Like Reply Muhammad Asif Javed Muhammad Asif Javed Muhammad Asif Javed Follow Software Developer Joined Oct 10, 2024 • Oct 10 * but why 10 only? the list should goes on. I will go with Deno ;) ;) one runtime include all. 1 like Like Reply Balraj Singh Balraj Singh Balraj Singh Follow Software engineer with 10 years experience developing simple & anti-fragile software for high-volume businesses. Improved Mobile App's stability and responsiveness by incorporating patterns & practice Work Engineer @ Meta(Facebook) Joined Jan 24, 2023 • *se There will be a Part 2 of this :) 1 like Like Reply Abijith Vasanthakumar Abijith Vasanthakumar Abijith Vasanthakumar Follow Joined Jan 18, 2021 • Oct 11 * list! I created a lightweight scaffolding package so that I don't have to clone/copy-paste commonly used boilerplates all the time. It has 1.1k+ downloads now: scaffold-master npm 1 like Like Reply Dong Nguyen Dong Nguyen Dong Nguyen Follow A software engineer who is also interested in finance, crypto and stock market. Location Vietnam Joined Mar 8, 2018 • *e You can use process.loadEnvFile() instead of dotenv. You may prefer spacetime while working with datetime and timezone because its smart APIs. 1 like Like Reply Johnny Wu Johnny Wu Johnny Wu Follow Joined Jul 21, 2020 • Oct 15 Copy link Hide Report abuse Alternatives: nodemon -> bun, just use bun run --hot main.ts concurrently -> pnpm workspace; pnpm run -r dev 1 like Like Reply Alex Alex Alex Follow Just another IT guy, 5+ years of coding on Frontend, Follow me on GitHub , appreciate it. Location void 0 Joined Jun 27, 2019 • Oct 9 • Edited on Oct 9 • * Check out wireit package, also those tools like commitizen and @semantic-release. Also wait-on helper. *ion (21 comments) * * Exploring Pawapay Deposits, Refunds, and Payouts: A Hands-On Preview katorymnddev - Nov 7 Freshman in College? Here’s How I Started with Web Development Metta Surendhar - Nov 7 Evaluating Medical Retrieval-Augmented Generation (RAG) with NVIDIA AI Endpoints and Ragas KAMAL KISHOR - Nov 7 Best Version Control Practices Every React Development Team Needs To Know Joseph Abraham - Nov 7 Balraj Singh Follow Software engineer with 10 years experience developing simple & anti-fragile software for high-volume businesses. Improved Mobile App's stability and responsiveness by incorporating patterns & practice Work Engineer @ Meta(Facebook) Joined Jan 24, 2023 More from Balraj Singh 10 best software development collaboration tools in 2025. #webdev #tooling #productivity #devops Best Practices for Code Reviews That Foster Team Collaboration #webdev #coding #beginners #productivity Top 10 Modern JavaScript Patterns for 2025 #* #learning Heroku *refer* 👋 *** * ",
    "url": "https://dev.to/balrajola/10-npm-packages-for-productivity-1odb"
  },
  {
    "body": "* Follow Report Abuse Tandap Noel Bansikah Junior DevOps engineer & Technical writer Bangangté ,Cameroon Joined on Dec 8, 2022 tandapnoelbansikah@gmail.com http://noelbansikah.pages.dev Education HIMS Buea Cameroon Work Associate Full Stack Engineer | LPIC-1 Certified | Java OCFA More info about @bansikah Badges 2 Week Co* * One * one year. Got it 1 We*t *t it Skills/Languages PHP, JS, Java, python ,Agile, Linux System Administration Currently learning Trainee at adorsys Currently hacking on Robust applications, CI/CD pipelines , Linux System Administrator Available for Improvement of programming skills also check [Youtube channel](https://www.youtube.com/@techwithbansikah) 27 posts published 22 comments written 68 tags followed Pinned Kubernetes for Beginners * * 19 Kubernetes for Beginners #beginners #kubernetes #devops #networking 16 reactions 4 comments 12 min read Creating a Docker Image for a Simple python-flask \"hello world!\" application. * Tandap Noel Bansikah Follow Jan 29 Creating a Docker Image for a Simple python-flask \"hello world!\" application. #docker #tutorial #python #devops 14 * Keycloak and Spring Boot: The Ultimate Guide to Implementing Single Sign-On * Tandap Noel Bansikah Follow Oct 30 Keycloak and Spring Boot: The Ultimate Guide to Implementing Single Sign-On #springboot #springsecurity #keycloak #java 3 * Want to connect with Tandap Noel Bansikah? * Tandap Noel Bansikah. * Deploying Nginx with Self-Signed TLS Using Helm and Minikube (Dev & Staging Environments) * Tandap Noel Bansikah Follow Oct 20 Deploying Nginx with Self-Signed TLS Using Helm and Minikube (Dev & Staging Environments) #nginx #devops #kubernetes #development * a User CRUD Application with Spring Boot and Docker * Tandap Noel Bansikah Follow Sep 6 Building a User CRUD Application with Spring Boot and Docker #springboot #spring #docker #java 6 * Vagrant: A Comprehensive Guide to Managing Virtual Environments * *l 27 Vagrant: A Comprehensive Guide to Managing Virtual Environments #vagrant #virtualmachine #devops #vmwar 2 *d Streamline Your Rust Project with GitLab CI/CD and Discord Notifications * *l 19 Streamline Your Rust Project with GitLab CI/CD and Discord Notifications #gitlab #cicd #rust #automation 2 * Boost Your DevOps Workflow with Traefik * * 22 Boost Your DevOps Workflow with Traefik #traefik #devops #docker #webdev 2 *d Effective Testing Strategies in Software Development * Tandap Noel Bansikah Follow Nov 22 '23 Effective Testing Strategies in Software Development #testing #webdev #programming #software * The Importance of Testing in Software Development * Tandap Noel Bansikah Follow Nov 22 '23 The Importance of Testing in Software Development #webdev #testing #unittest #programming 2 comments 2 min read Simple JavaScript Challenges with solutions * *l 10 '23 Simple JavaScript Challenges with solutions #javascript #tutorial #* Simple Counter in JavaScript * *l 7 '23 Simple Counter in JavaScript #* 16 reactions * Math() * *n 21 '23 JavaScript Math() #javascript #tutorial #beginners #codenewbie * Arithmetic Expression in JavaScript * *n 20 '23 Arithmetic Expression in JavaScript #* #codenewbie * Variables and Data types in JavaScript * *n 20 '23 Variables and Data types in * #beginners #codenewbie 2 * Getting started with JavaScript for complete beginners * *n 13 '23 Getting started with JavaScript for complete beginners #* #tutorial 2 reactions 6 comments 5 min read *ARGS & **KWARGS in Python are Awesome * *n 8 '23 *ARGS & **KWARGS in Python are Awesome #webdev #beginners #python #* 5 min read Decorators in Python. * *n 5 '23 Decorators in Python. #python #programming #tutorial #webdev 2 * Interactive Learning Tools * * 31 '23 Interactive Learning Tool*rs #react Add Comment 3 min read Dictionaries in Python Explained * * 31 '23 Dictionaries in Python Explained #beginners #webdev #python #programming 6 * Understanding Lists, sets and tuples in Python. * * 28 '23 Understanding Lists, sets and tuples in Python. #beginners #programming #datastructure #python Add Comment 10 min read Build your own IDE using Python * * 19 '23 Build your own IDE using Python #python #webdev #* BMI calculator with Python, simple projects for beginners * * 11 '23 BMI calculator with Python, simple projects for beginners #beginners #python #webdev * Email Slicer with Python * * 11 '23 Email Slicer with Python #webdev #bigginers #python * JavaScript array methods * Tandap Noel Bansikah Follow Apr 14 '23 JavaScript array methods #* #webdev 2 comments 2 min read Websites to practice Programming. * Tandap Noel Bansikah Follow Jan 16 '23 Websites to practice Programming. #* #* 1 min read CSS Box Model * Tandap Noel Bansikah Follow Dec 11 '22 CSS Box Model #webdev #* Add Comment 2 *onsor Neon * ",
    "url": "https://dev.to/bansikah"
  },
  {
    "body": "* Follow Report Abuse Noureddine Belguinan Lazy Full-Stack developer who loves to build stuff with Laravel, Vue and Inertiajs. Joined on Nov 6, 2024 More info about @belguinan Badges * * 6 tags followed * 🎨 * Noureddine Belguinan Follow Nov 6 * 🎨 #node #bunjs #npm #javascript 3 * * ",
    "url": "https://dev.to/belguinan"
  },
  {
    "body": "* 3 Add reaction 3 Like 0 *s 0 Fire 0 Jump to Comments 5 * Noureddine Belguinan Posted on Nov 6 3 * 🎨 #node #bunjs #npm #javascript Ever wished your Node.js console logs were more visually appealing and easier to parse? Meet pretty-js-log, a lightweight logging package that brings color and structure to your console output while also supporting file logging! ✨ Key Features 🎨 Colorful console output with different colors for different log levels 📁 Built-in file logging support ⚡ Works with both Node.js and Bun 🕒 Timezone-aware timestamps 🔍 Process ID tracking 🎯 JSON/Array pretty formatting 🚀 Quick Start Install with npm: npm install pretty-js-log Or with Bun: bun install pretty-js-log Basic usage: const { logFactory } = require('pretty-js-log'); // Create a basic logger const logger = logFactory({}); // Start logging! logger('Hello World'); logger.info('This is an info message'); logger.warn('Warning! Something needs attention'); logger.error('Oops! Something went wrong'); logger.debug('Debug information'); 🔧 Advanced Usage Save Logs to File const logger = logFactory({ path: './logs/app.log', // Logs will be saved here id: process.pid // Add process ID to logs }); logger('This will be saved to the file too!'); Logging Objects const data = { user: 'john', age: 25 }; logger('User data:', data); // Objects are automatically formatted Disable Console Output If you want to write logs only to file without console output, use the toStdout option: const logger = logFactory({ path: './logs/app.log', toStdout: false // Logs will only be written to the file only }); logger('This will only appear in the log file'); logger.info('Silent logging to file'); 🤔 Why Another Logging Package? Simplicity: Just import and use - no complex configuration needed Lightweight: Minimal dependencies, perfect for small to medium projects Visual Appeal: Makes debugging more pleasant with color-coded log levels File Support: Built-in file logging without extra dependencies Modern: Works with both Node.js and Bun 🔗 Links GitHub Repository npm Package 🤝 Contributing This is an open-source project and we welcome contributions! Feel free to: Open issues Submit PRs Suggest features Help with documentation 📈 Future Plans File size-based rotation External logging API endpoints support Give it a try and let me know what you think in the comments below! Thanks! *et up your Developer Sandbox Deploy a full-stack Javascript application with the Developer Sandbox for Red Hat OpenShift. Get started Top comments (0) * * Sentry Promoted * 📺 Youtube Tutorial Series * Read next *! kit2d2 - Nov 1 Exploring Java's Role in Cloud Computing and AI for 2024 Teo Nordic - Oct 31 Understanding merge sort algorithm: Beginner's guide to mastering sorting algorithm Emmanuel Ayinde - Nov 4 Brisa Framework Presentation - October 2024 Aral Roca - Oct 30 Noureddine Belguinan Follow Lazy Full-Stack developer who loves to build stuff with Laravel, Vue and Inertiajs. Joined Nov 6, * Java* #* 🔥14 game-changing open-source tools every developer should know 🚀 #* #opensource * Radar Promoted * The #1 Geolocation Platform Geofencing, maps, and geolocation compliance, all in a modern, cost-effective platform. Thousands of companies trust Radar's APIs and SDKs to power location-based experiences across hundreds of millions of devices globally. Learn more 👋 *** * ",
    "url": "https://dev.to/belguinan/introducing-pretty-js-log-add-beautiful-colorful-logging-to-your-nodejs-apps-5hfn"
  },
  {
    "body": "* Follow Report Abuse Bhargav Sakaria 404 bio not found India Joined on May 14, 2018 Education Bachelor of Engineering in Information Technology Six * six years. Got it * Five * five years. Got it *. Got it Two * two years. G* @bhargavsakaria Currently learning Full Stack development in MERN 1 post published 6 comments written 20 tags followed Install Firefox on Linux Bhargav Sakaria Bhargav Sakaria Bhargav Sakaria Follow Jul 13 '21 Install Firefox on Linux #linux #firefox 4 * Want to connect with Bhargav Sakaria? * Bhargav Sakaria. * * * ",
    "url": "https://dev.to/bhargavsakaria"
  },
  {
    "body": "* 90 Add reaction 63 Like 27 *s 0 Fire 27 Jump to Comments 55 * Bogdan Nedelcu Posted on Feb 18, 2020 • Updated on Mar 19, 2020 63 27 node vs deno On Deno and the future of Node #node #deno #javascript #typescript What would Node look like if it was written today? In one word: Deno. The JS runtime has Typescript build in and simplifies module resolution. On top, it takes security to the next level and closes the gap between how we write javascript on the backend and the browser. Not so long ago ... Released in 2009 node took over the world incredibly fast. Despite the initial skepticism about running javascript in the backend, the community backup was unrivaled. Soon, sophisticated tooling appeared, and years later(2014), Microsoft released Typescript, double betting on Javascript. Today, Node is one of the most popular choices for backend development. The event-based server philosophy ensures a high performance/throughput ratio. Running Javascript makes is an accessible tool for many developers. In a way, one can say, Node democratized backend development by lowering the barrier of entry. I have been happily using Node in the last five years, but at the same time, I wonder what does the future awaits? The new kid around the block: Deno Started in 2018, the Deno project, as the website states, provides a secure runtime for Javascript and Typescript. It is composed of basically two parts: a typescript frontend and a Rust backend. The communication between the two happens by messaging with TypedArrays. Deno is a JavaScript/TypeScript runtime with secure defaults and a great developer experience. — The Deno Website Under the hood, we find a snapshotted version of the Typescript compiler, the V8 engine, and the Tokio event loop. Altogether, shipped as one binary of less than ten MB or as a Rust crate. Ageing API's Removing promises from Node back in 2010, helped the community at is early stage. But as javascript started to move faster and faster and introducing the await and async functionalities, Node's APIs started to age. A considerable effort is made today to bring them up to speed and keep consistent versioning at the same time. Many of the API calls must still be wrapped in constructors like promisify to be used with the Promise syntax. This extra step adds overhead to development and increases boilerplate in applications. In contrast, Promises are Deno's native bindings for async behavior. The Rust backend mirrors the promise objects received from the Typescript frontend with Rust Futures. Async actions in Deno always return a Promise. Another noticeable thing about Node is that it relies on Buffer objects to read and write data. In a step to bring uniformity with browser interfaces, Deno uses TypedArrays everywhere. Being consistent when reading and writing files across the backend and front end is much easier when using the same data structures. Typescript with Zero Setup If you use Typescript, you know it is a remarkable tool. It introduces a type system that can be enforced as applications grow. This reduces the overhead of conventional static typing by providing flexibility. A project can be partially typed in the begging, and type coverage can be extended as the application grows. In Node, Typescript can be used directly with ts-node, although one must be careful in production. The safest and most performant choice is to use ts-node for development. Then compile to javascript for production. The setup for development can be complicated, especially together with other features like hot code reloading. On the other hand, Deno is all about Typescript. It uses a snapshotted version of the compiler and catches unchanged files. Do you want to run Typescript code? Just run the Deno binary. No config. No hustle. Is that easy, and of course it supports javascript too. Browser Like Package Resolution The current resolution scheme of Node overcomplicates module resolution. The algorithm provides flexibility in file location and naming with a considerable tradeoff in complexity. A require call would first search for a file with the same name and a .js, .json, or .node extension. If the path specified does not include a leading '/', './', or '../' node assumes the module is a core module or a dependency in the node_modules folder. If the name does not match, a core module node will check the node_modules at that location. If nothing is found, it will get to the parent directory and continue to do so until it reaches the root of the file system. Additionally, folders can be specified as modules in the package.json file. The require function is also aware of the package.json file of all the folder begins checked. Once a folder is found, Node will look for anindex.js or index.node file inside it. The freedom of not having to provide a file extension and the flexibility of package.json comes at a considerable increase in complexity and decrease in performance. Deno simplifies the algorithm by providing two types of module resolution, relative and URL based: import * from \"https://deno.land/std/testing/asserts.ts\"; In addition, the resolution algorithm does not use package.json file or the node_modules folder. Instead of require, it uses ES Modules imports. This allows us to use a modern approach to code management without the need of a pre-compiler and brings us again closer to how Javascript is used in the browser. Distributed Package Management Server-less adoption is at this moment doubling every year. Developers use to split monoliths into microservices. Now we are splitting micro-services into functions. Why? Well, on the one hand, nobody wants to deal with orchestration unless we have too. On the other hand, distributed systems are more flexible and can be changed faster. The bottom line is, applications are becoming systems of smaller and separated parts. A typical javascript backend application represents 0.3% of the code is using. The rest is made up of packages in the node_modules folder. And many are hardly used at runtime. At the same time, the whole ecosystem depends on a centralized package manager: npm. Deno brings a distributed approach to package management. Packages can be resolved by URL and catched afterward. Applications are lighter and less dependent on a single and centralized package registry. On Security When doing backend development, I expect security to work outside the box. The last thing I want to think about is a linter file or node module accessing the network or the file system. In Deno, internal functions cannot call V8 API's arbitrarily as they do in Node. The communication between Deno's APIs and the JS engine is centralized and unified with messaging based on typed arrays. Unless specifically allowed, scripts can't access files, the environment, or the network. — deno.land Scripts executed with Deno can access the file system and network only if the user explicitly specifies it. And even better, permission can be given at file, folder level, or network path level with the —allow flag. This offers developers granular control of read and write actions that happen at runtime. $ deno --allow-net https://deno.land/std/examples/echo_server.ts Security by default is a significant upgrade compared to the \"trust\" policy applied to dependencies one pulls from npn. With Deno you can run and develop applications with the confidence that they will do what they are expected to. Summing up Deno is how Node would look like if it would be built today. It improves security, simplifies module resolution, and runs Typescript. As I am writing this article, we are still at version 0.33 and growing fast. I am sure if you are here is because you are to some degree using Node or Javascript. If you are like me, you probably love it. But as they say, to love something truly means to let it go. I am looking forward to seeing Deno grow beyond merely a scripting runtime and to hearing about the first experiences in production. As long as developers continue disrupting ourselves, we can always expect faster, more straightforward, and more reliable software. Originally published on bogdanned.com. Highlight Promoted * Find Code Bottlenecks Fast 🏎️ No more hunting through endless lines of code. With Highlight.io, you can spot performance bottlenecks instantly, from frontend to backend. Optimize your app, improve load times, and keep users happy – all with a few clicks. Start diagnosing smarter with Highlight.io. Get Started Top comments (27) * Himanshu Mishra Himanshu Mishra Himanshu Mishra Follow Hi, My name is Himanshu and I'm an independent maker from India. Currently working on Hoverify- tryhoverify.com Location India Work Indie Maker Joined Jan 10, * Report abuse I heard a talk about deno and looked into it a bit. The first thing that stand out to me was there import system. Using urls for import doesn't seem to me a great idea. I cannot imagine anything other than the bad dev experience it would bring. They are using rust for there backend which have a powerful package manager and is one the reason why people prefer rust over any other systems level lang. I think they have to introduce a package manager sometime in the future and as the ecosystem/community will grow around it, a package manager would play very important role in supporting that. 6 likes *u * * • * abuse The idea behind this is that we are already using URLs as imports in the browser all the time. Why not in backend applications? There is also the case of simplifying build and compile processes by eliminating dependencies. When looking at Deno we must keep in mind it is designed to replace bash scripts with js. That was the original problem to solve. As the community picked it up it seems like is growing to be much more than that. 2 likes Like Reply Himanshu Mishra Himanshu Mishra Himanshu Mishra Follow Hi, My name is Himanshu and I'm an independent maker from India. Currently working on Hoverify- tryhoverify.com Location India Work Indie Maker Joined Jan 10, * Report abuse But aren't we moving away from that by using frontend frameworks? Today at most we use urls for importing images or css. That too we do mostly for internet reasons. At backend it is unnecessary and doesn't make any sense. I listened the talk by one of the founders and he was kind of clear that they were trying to make a better node And even if it was designed to replace bash script then why compare with node? 3 likes Like Thread Bogdan Nedelcu Bogdan Nedelcu * * • * abuse \"At backend it is unnecessary and doesn't make any sense\" -- I would say as things are today, you are probably right. However, with serverless and services getting smaller and smaller I see a strong case for URL imports. The comparison with Node is natural as they are bot JS runtimes. And both written by the same persona. Ryan Dahl based Deno on what he would like Node to be/have back in 2018. I think you have a strong point but I am trying to imagine how things will be in five to ten years. And there I see a strong tendency towards decentralized and smaller but independent applications. Some of them which can perfectly run on Deno. 3 likes Like Thread Himanshu Mishra Himanshu Mishra Himanshu Mishra Follow Hi, My name is Himanshu and I'm an independent maker from India. Currently working on Hoverify- tryhoverify.com Location India Work Indie Maker Joined Jan 10, 2019 • Feb 19 '* Well in five to ten years it will be used for more than just serverless and services. That's where the problem will start. Deno is in early stages so I am pretty much sure that they will change some things for good. 2 likes Like Thread Steven Guerrero Steven Guerrero Steven Guerrero Follow Joined Feb 26, 2020 • Feb 26 '20 • Edited on Feb 26 • * Using Deno does not mean you can't use tools like NPM, it means that you are not restricted by it. Currently all code used in Node must be in this central repo, with Deno, no more. This imports can be manual if you want to, the reality is, we should know what are we importing and not just blindly installing cause the tutorial say so. EDIT: Something like NPM will probably be implemented by the community after v1.0, just hoping it moves towards Linux package management(repos), its cleaner this way. 2 likes Like Reply Isaac Hagoel Isaac Hagoel Isaac Hagoel Follow Location Sydney, Australia Work Principal Engineer at Atlassian (ex. Pearson, TripAdvisor, Intel) Joined Feb 4, 2020 • * abuse Thanks for the writeup. I really admire Ryan Dahl and am rooting for him and for Deno. It is hard for me to see how it will gain mainstream adoption without a \"killer feature\". While all of these features are good (maybe even great) incremental improvements I am afraid they won't be enough. The article is well written and polished but looks like you forgot to add a source that you wanted to add: Server-less adoption is at this moment doubling every year(add a source here). 3 likes *u * * • Feb 18 '20 • Edited on Feb 18 • * Spot on Isaac: Deno is still missing that one \"killer feature\" that would make up for the cost of switching. At the same time, it does offer a glimpse of what the future will look like. Maybe it will just end up as a \"research\" space fo the community in order to improve Node. Thx for the tip adding the source. Cheers! 3 likes Like Reply Steven Guerrero Steven Guerrero Steven Guerrero Follow Joined Feb 26, 2020 • Feb 26 '* Deno Compile, that's probably the feature that will pay off the investment. 3 likes Like Reply Khauri Khauri Khauri Follow Location Arlington, VA Education The College of William and Mary Work Software Developer Joined Oct 15, * Report abuse Admittedly I haven't looked into Deno a great deal yet, but I'm having trouble imagining production level software at this point given that a lot of proven and tested open source frameworks and tools such as express, create-react-app, electron, webpack, and their hundreds of dependencies, assume the use of npm or CJS modules require syntax. Would these packages and their dependencies have to be rewritten? I hope not, but if so I do feel like we'd be seeing yet another split in the javascript ecosystem and a whole new world of compatibility concerns that would not be a \"great developer experience.\" I've already noticed a number of people creating their own versions of popular packages for Deno and I can't help but feel they might not get the same support as the originals. I wonder if Deno could perhaps add some kind of compatability layer. 4 likes Like Reply Chris Knight Chris Knight Chris Knight Follow Joined Feb 18, 2020 • * abuse A node polyfill is currently under development in the Deno std library. You can see the docs and progress here: github.com/denoland/deno/tree/mast.... Still in it's infancy but growing. Supporting node packages would certainly ease the transition for developers. 5 likes *u * * • Feb 19 '* Looks like the way to go. Thanks Chris! 1 like *u * * • * abuse That's a really good point. The code amount of code relying on Node is right now huge and the added features do not pay off for now(my opinion). \"I wonder if Deno could perhaps add some kind of compatibility layer.\" -- I really wonder how that would work. If one could translate the calls to the Node APIs to Deno APIs that might just work as long as we keep performance in mind. Maybe that's even a project worth pursuing. 2 likes Like Reply Christian Bewernitz Christian Bewernitz Christian Bewernitz Follow 🏳‍🌈 white non-trans* he/him, born GDR/Europe, father of two sons, married Location Saxony/Germany Pronouns he/him Work Software Engineer at Bettermarks GmbH Joined Jan 24, 2017 • Feb 25 '* In your section \"Typescript with Zero Setup\": Didn't you want to say that you can execute typescript directly with ts-node? Since node-ts is something related to TeamSpeak... 2 likes *u * * • Feb 25 '* Although you can execute typescript code out of the box ts-node you still need config files for a proper dev to production flow. On the other hand with deno is out of the box. How is ts-node related to TeamSpeak? 1 like Like Reply Christian Bewernitz Christian Bewernitz Christian Bewernitz Follow 🏳‍🌈 white non-trans* he/him, born GDR/Europe, father of two sons, married Location Saxony/Germany Pronouns he/him Work Software Engineer at Bettermarks GmbH Joined Jan 24, 2017 • Mar 6 '* I just tried to give you a hint regarding a \"typo\"/error in your post. node-ts is not about typescript at all, but ts-node is. ts-node is not related to TeamSpeak, but node-ts is. if you search for node-ts in your article and replace all occurrences with node-ts the error would be fixed. 2 likes Like Thread Bogdan Nedelcu Bogdan Nedelcu * * • Mar 19 '* Thx a lot for spotting that and for the feedback!!!! 1 like Like Reply Seanmclem Seanmclem Seanmclem Follow Developer looking to be awesome Location Floridia Work Senior web developer at Earth Joined Dec 27, 2018 • * abuse I'm not sure that the lack of a package manager is something I consider a feature or benefit. Npm is one of the single greatest things to come out of node. I'm sure living without it in Deno has its advantages, but I could definitely imagine some disadvantages that I'm not sure why I would have to live with 3 likes *u * * • * abuse Npm standardized package management for Node. But that itself is the problem. I see your point, however. As applications grow one wants to be able to understand dependencies easy and for the better or worse package.json was fulfilling that function really well. Personally I think URL imports can become really important when one builds a service containing several serverless functions. In the case of stateless services, you do not want to write a REST API. So they can just be replaced with a script hosted on S3. Publishing to npm would be in that case too much of an overhead. 2 likes Like Reply Mariusz Nowak Mariusz Nowak Mariusz Nowak Follow Joined Sep 11, 2017 • Feb 20 '* Removing promises from Node back in 2010 Node.js never had promises, not until native came in with V8. What was called promises in few old versions (last one was v0.1.29) was purely a simple extension to event emitter, nothing more (no then, no nested resolution, it had nothing to do with promises which we work with now) You may confirm that at still available documentation: nodejs.org/docs/v0.1.29/api.html#_... Still, it's true, core Node.js members didn't believe in promise interface even when Promise A+ started to be really popular. It's only after it became a part of a standard, things changed. async/await was delivered in Node.js on par with browsers, soon after we also got fs.promises. Anyway to this day (as lighter, and not introducing artificial ticks) callbacks are faster than promises, but for most of real world scenarios difference can be safely ignored. 2 likes *u * * • Feb 25 '20 Copy l* the suggestion. And thanks a lot for the reference to the v0.1 docs. I will take a closer look and update where appropriate. Much appreciated! 1 like Like Reply Alex Leung Alex Leung Alex Leung Follow Building: 1 Lerna,Yarn alternative for TS project references workspaces 2 Webpack plugin for simultaneous Node,Web HMR Location Seattle Work SDE at Amazon Joined Dec 25, 2019 • Apr 5 '20 * mention \"The setup for development [with node + typescript] can be complicated, especially together with other features like hot code reloading.\" Last I checked, Deno has no answer for hot reloading yet. Has that changed? 2 likes *u * * • Apr 6 '20 * remark Alex! I just run into this file watcher but never tested it. A file watcher should be enough to reproduce what we on node with nodemon. 1 like Like Reply Tamb Tamb Tamb Follow I am not the brightest tool in the shed Location Pittsburgh, PA Education BA Pronouns He/Him Work Full Stack Engineer Joined Mar 18, 2019 • May 10 '20 C* seems cool. However, I'm looking forward to NodeJS deprecating old APIs and growing. If it's all JS and TS for either runtime, I'd rather stick with something mature. 2 likes Like Reply Nitin Reddy Nitin Reddy Nitin Reddy Follow Seasoned JavaScript Developer who loves to explore other programming languages like Python. A problem solver, tech lover by heart. Loves reading booking, and cooking. 🤩🚀🔬 Email reddynitin3@gmail.com Location Pune, India Education CS Graduate Work Senior Software Engineer at IglooInsure Joined Nov 21, 2018 • Feb 18 '20 • Edited on Feb 18 • * Deno will be future after Node. Thanks for the article. 2 likes *u * * • * abuse you are welcome Nitin! 1 like Like Reply Josh Leong Josh Leong Josh Leong Follow Software Engineer Front End JavaScript, TypeScript, React/Redux, Node.js, Next.js, Gatsby.js React Native, GraphQL, Ruby on Rails, Python/Django. Location Denver, CO Education Galvaniz*d Dec 25, 2017 • May 7 '* Newer dev here looking to future proof his skills by paying attention to Deno. Mind ELI5 some of the benefits? Some of the terminology is confusing. Super interested in the future of this! 2 *ion (27 comments) * Neon **. Try Neon for Free → Read next Node.js v23.0.0 Released: End of Support for 32-bit Windows Probir Sarkar - Oct 20 Rust + WASI: Application Monitoring Zane - Oct 23 What I’ve Learned from Building a Calculator with Vue.js William Kwadwo Owusu - Oct 19 How I Created a Hover Reveal Text Animation with TailwindCSS and React Skyler Dev - Nov 1 * * More from Bogdan Nedelcu GraphQL at global scale: Facebook #graphql #architecture #javascript #react The Graph in GraphQL #graphql #javascript #node #architecture Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/bogdanned/on-deno-and-the-future-of-node-1l0p"
  },
  {
    "body": "* Follow Report Abuse Bosco Domingo Ex-Microsoft, SWE since 2018. I've filled many roles, now going deep into Backend and eventually, (Technical) Management. Madrid, Spain Joined on Jan 7, 2024 https://dub.sh/boscodomingo Education BSc. Software Engineering @ Universidad Politécnica de Madrid Work Founding Software Engineer @ Samara More info about @boscodomingo Badges 1 We*t * * GitHub Repositories SpotifyMatcher Match your local files to Spotify's database, so you can listen to them anywhere you go! Python • 30 stars best-coding-fonts A repo with the fonts I use for Shells and Programming, most of them with Ligatures and Powerline support! Shell • 3 stars jira-issue-in-description-action A lightweight solution to integrate JIRA issues in your GitHub PRs Fork TypeScript • 1 star typescript-ddd-hexagonal-ddd A basic TypeScript app (using Node.js) skeleton, with DDD and hexagonal example implementation. Fork JavaScript • 1 star js-promise-concurrency A quick showcase of JavaScript's Promise's concurrency methods: `all()` vs `allSettled()` vs `any()` vs `race()` JavaScript typescript-api-skeleton 🔷🌍 TypeScript API Skeleton: Bootstrap your new TypeScript backend project (forked from @CodelyTV's amazing base!) Fork TypeScript typescript-skeleton A basic TypeScript app (using Node.js) skeleton. Great for simple scripts or programs! JavaScript Skills/Languages TypeScript, Python, SQL Currently learning TypeScript, Node.js, Go, Management Currently hacking on Proprietary projects, OSS stuff ad-hoc Available for Mentoring, TypeScript, Public speaking 13 posts published 11 comments written 7 tags followed Pinned TypeScript Enums are *more than ok* * Jun 14 TypeScript Enums are *more than ok* #* #typescript Add Comment 2 min read The ultimate Node Test Runner + TypeScript + ENV variables guide * Apr 25 The ultimate Node Test Runner + TypeScript + ENV variables guide #testing #node #typescript #webdev 7 *d The 5-minute guide to Software Testing concepts and strategy * Apr 19 The 5-minute guide to Software Testing concepts and strategy #testing #softwareengineering #learning #coding 1 reaction 3 comments 4 min read 5 Database Index tips you may find (extremely) helpful * Jan 7 5 Database Index tips you may find (extremely) helpful #todayilearned #sql #database #backend 6 *d * * Nov 5 * #typescript #javascript #node #react 1 reaction Add C*ith Bosco Domingo? * Bosco Domingo. * Set up Go with version management and VS Code extension * Sep 6 Set up Go with version management and VS Code extension #go #vscode #mise #linux Add Comment 1 min read On Agile Development (ft. Dr. John Ousterhout) * Aug 5 On Agile Development (ft. Dr. John Ousterhout) #agile #*sign #programming * The best Design Patterns repository * Aug 5 The best Design Patterns repository #designpatterns #programming #martinfowler * The difference between Promise.all() vs Promise.allSettled() vs Promise.any() vs Promise.race() in 30 seconds * Apr 26 The difference between Promise.all() vs Promise.allSettled() vs Promise.any() vs Promise.race() in 30 seconds #todayilearned #* * Node Test Runner vs Bun Test Runner (with TypeScript and ESM) * Apr 26 Node Test Runner vs Bun Test Runner (with TypeScript and ESM) #testing #node #bunjs #typescript * Finding and solving a nasty bug with Cloud Run and environment variables * Apr 9 Finding and solving a nasty bug with Cloud Run and environment variables #googlecloud #swe #cloudrun #story 2 *d A (somewhat) deep dive into TypeScript constructor intricacies, step-by-step * Mar 5 A (somewhat) deep dive into TypeScript constructor intricacies, step-by-step #typescript #javascript #deepdive #tip 5 *d The Sidecar Pattern explained in 5 minutes * Feb 22 The Sidecar Pattern explained in 5 minutes #architecture #systemdesign #hexagonalarchitecture #designpatterns * Diamond Sponsor Neon * ",
    "url": "https://dev.to/boscodomingo"
  },
  {
    "body": "* 1 *ead 1 * 0 * Bosco Domingo Posted on Nov 5 1 * #typescript #javascript #node #react Credit to the source, I'm just putting it in writing for easier access! It turns out json() must be awaited because fetch() will resolve or reject when it receives the response headers, regardless of what the body is! The body is likely to be much larger in size, and may even take a long time to arrive and/or might do so in chunks, thus it has to be awaited even after fetch() has finished. I had no idea why this behaviour existed until now. I love learning deeper stuff like this, and hope you do too! Again, watch the video for a better and more visual explanation! (it's 6 minutes long, worth every second) Top comments (0) * * * *, exploring frameworks like Elysia and Nest, and sharing best practices via GitHub repositories. * Need Help with My Live Transcription Browser Extension – Not Working saifalikhan9 - Oct 20 RTC design with automatic cloud calibration for simple programmable controller based on ESP8266 zhuyue - Oct 20 Node.js v23.0.0 Released: End of Support for 32-bit Windows Probir Sarkar - Oct 20 Rust + WASI: Application Monitoring Zane - Oct 23 Bosco Domingo Follow Ex-Microsoft, SWE since 2018. I've filled many roles, now going deep into Backend and eventually, (Technical) Management. Location Madrid, Spain Education BSc. Software Engineering @ Universidad Politécnica de Madrid Work Founding Software Engineer @ Samara Joined Jan 7, 2024 More from Bosco Domingo TypeScript Enums are *more than ok* #* #typescript The difference between Promise.all() vs Promise.allSettled() vs Promise.any() vs Promise.race() in 30 seconds #todayilearned #* Node Test Runner vs Bun Test Runner (with TypeScript and ESM) #testing #node #bunjs #typescript 👋 ** * ",
    "url": "https://dev.to/boscodomingo/why-responsejson-must-be-awaited-cbd"
  },
  {
    "body": "* Follow Report Abuse Bregwin Jogi Aspiring software developer learning things I like :) Joined on Sep 4, 2024 More info about @bregwin Badges * 14 * 10 tags followed * Bregwin Jogi Breg* * Add Comment 3 min read A brief recap of what I did this Month * Oct 31 A brief recap of what I did this Month Add Comment 2 min read How to use Eslint and Prettier together for your Node.js Project * Oct 30 How to use Eslint and Prettier together for your Node.js Project 4 *d From Regex to Ruff: Lessons Learned in Contributing to Magika * Oct 29 From Regex to Ruff: Lessons Learned in Contributing to Magika #opensource #coding #github Add Comment 3 min read Contributing to Open Source Projects #3 * Oct 16 Contributing to Open Source Projects #3 Add Comment 1 min read Contributing to Other Open Source Projects - Week 2 * Oct 15 Contributing to Other Open Source Projects - Week 2 Add Comment 2 min read Refactoring my Messy code and using Git Rebase - OSD600 * Oct 11 Refactoring my Messy code and using Git Rebase - OSD600 Add Comment 2 min read Learning more about Git Merges and Remotes * Oct 2 Learning more about Git Merges and Remotes #github #git #webdev #software * Started with Hacktoberfest: My First Open-Source Contributions * Oct 2 Getting Started with Hacktoberfest: My First Open-Source Contributions #hacktoberfest #opensource #coding * Dealing with Merge Conflict Trauma OSD600#5 * Sep 26 Dealing with Merge Conflict Trauma OSD600#5 Ad* RefactorCode - Enhance your code with a single command 👨‍💻 * Sep 17 Introducing RefactorCode - Enhance your code with a single command 👨‍💻 Add Comment 2 min read So how does Pull requests work again? OSD600#3 * Sep 17 So how does Pull requests work again? OSD600#3 #* #ai Add Comment 3 min read Starting an Open Source Project - OSD#2 * Sep 13 Starting an Open Source Project - OSD#2 #opensource #ai #webdev #* Just gonna sneak myself into this blog - OSD600 #1 * Sep 5 Just gonna sneak myself into this blog - OSD600 #1 #webdev #opensource #learning #beginners * Diamond Sponsor Neon * ",
    "url": "https://dev.to/bregwin"
  },
  {
    "body": "* 0 *ead 0 * 0 * Bregwin Jogi Posted on Nov 9 • Updated on Nov 10 Testing Troubles with * This week, I was tasked with adding tests to my RefactorCode project. As I started adding new features, I noticed that some existing features were breaking, and it became increasingly difficult to test everything manually. This made it clear that I needed to implement proper automated testing to ensure the application is stable. Since I had prior experience with Jest from my previous Cloud Computing for Programmers course, where I worked with Node.js, I decided to use it for this project as well. I started by writing some tests to check the functionality of my code. However, I encountered a few errors that I hadn’t faced before. After some debugging and searching through Stack Overflow, I realized that there are additional configurations required when using ESM (ECMAScript Modules) with Jest. In my previous project, I had used CommonJS, which worked perfectly. While I could have opted to use Babel for the conversion, Jest offered a new beta feature that allowed ESM to run directly. I decided to give it a try, and it worked great! This explains everything related to configuring jest with ESM: https://jestjs.io/docs/ecmascript-modules Here is a quick overview of the setup: Install Jest: npm install --save-dev jest Create a jest.config.js file. Here I set what folders to ignore as well: export default { testPathIgnorePatterns: [\"/node_modules/\", \"/examples\"], transform: {}, }; In the package.json scripts section, use the experimental argument for jest to work with ESM modules: \"scripts\": { \"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\" } Create a test file. I created all the tests within a test folder in root directory. Here is a simple one I created: import { readFile, checkIfDirectory } from \"../src/fileUtils\"; describe(\"File Utility\", () => { test(\"Read File\", () => { readFile(\"./examples/test.txt\").then((data) => { expect(data).toBe(\"Hello World\"); }); }); test('should return true if the path is a directory', async () => { const result = await checkIfDirectory('./examples'); expect(result).toBe(true); }); }); If you want to test using a single test file: npm test -- banner.test.js For running all the tests, we use the script, we added earlier in package.json: npm run test Finally, the basic tests were set up. However, this was just the beginning of my troubleshooting journey. I also faced difficulties with mocking libraries and modules, especially since they were using ESM. These required extra configuration, but after some tweaking, I was able to get everything working, and the tests ran successfully. Instead of using the regular jest.mock, you have to use jest.unstable_mockModule: For example: await jest.unstable_mockModule(\"fs\", () => ({ existsSync: jest.fn(), readFileSync: jest.fn(), })); See this section for more info. One of the core functionalities I wanted to test involved integrating with the Gemini API. Since I didn’t want to rely on the live API for testing, I decided to mock the API calls. Initially, I tried using Nock, but I ran into issues because it didn’t work well with Node’s default fetch implementation. It seemed that the Gemini library was using the default fetch instead of a third-party fetch implementation, which caused the mock to fail. After several attempts without success, I switched to another library called MSW (Mock Service Worker). Although it required a bit more setup to create a mock server, it worked flawlessly on the first try. I crafted an example response based on how the Gemini API would respond, which allowed me to test the refactored functionality. Here is how the mock server was set up for reference: import { http, HttpResponse } from 'msw' export const handlers = [ http.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent', () => { return HttpResponse.json({ candidates: [ { content: { parts: [ { text: JSON.stringify({ explanation: \"The provided code has been refactored to address several issues and improve readability.\", refactoredCode: ` var count = 0; var message = \"Hello\"; ` }) } ], role: \"model\" }, finishReason: \"STOP\", index: 0 } ], }); }), ]; You can see that I am mocking a specific API endpoint that I am using for the application. Now all you have to do this add the below to start the server while testing: import { setupServer } from \"msw/node\"; import { handlers } from \"../mocks/handler.js\"; export const server = setupServer(...handlers); server.listen(); Reflecting on the process, this was a great learning experience for me. In hindsight, I probably should have checked the compatibility of the libraries I was using and considered any potential issues beforehand. Despite the challenges, I’m glad to have reached a point where my tests are running smoothly. I look forward to adding more tests in the future and improving the overall stability of my project. *? Manage p* Top comments (0) * * _SurveyJS Promoted * Build Your Own Forms without Manual Coding SurveyJS UI libraries let you build a JSON-based *, * with no user limits. Includes * logic, an integrated CS*ics, and more. Learn more Read next How to Unsave All Saved Posts on Facebook in a Few Simple Steps Md. Fahim Bin Amin - Oct 30 What does CORS really do? 🤔 Pelle Nilsen - Oct 30 Introducing Visual Copilot 2.0: Design to Interactive Steve Sewell - Oct 31 Essential Laravel Tips form and for Entry-Level Developers 🚀 Harold Defree - Nov 3 Bregwin Jogi Follow Aspiring software developer learning things I like :) Joined Sep 4, 2024 More from Bregwin Jogi Learning more about Git Merges and Remotes #github #git #webdev #software So how does Pull requests work again? OSD600#3 #* #ai Starting an Open Source Project - OSD#2 #opensource #ai #webdev #beginners * * * * ",
    "url": "https://dev.to/bregwin/testing-troubles-with-jest-and-esm-and-how-to-fix-it-pae"
  },
  {
    "body": "* Follow Report Abuse kit2d2 If your code doesn't work, clear your terminal and run it again. https://kit2d2.vercel.app https://github.com/cat2d2/florr.io Joined on Nov 1, 2024 More info about @cat2d2 Badges * * 8 tags followed *! kit2d2 kit2d2 kit2d2 Follow Nov 1 *! #javascript #gamedev #* 1 *onsor Neon * ",
    "url": "https://dev.to/cat2d2"
  },
  {
    "body": "* 1 A*ead 0 * 0 * kit2d2 Posted on Nov 1 1 *! #javascript #gamedev #webdev #node https://github.com/cat2d2/florr.io has a new open source canvas game! It comes with easy to follow build instructions which somebody who has no experience could follow. It has a bustling Discord community with 300+ members as well. If you could leave the repository a star, it would help a lot :) Already 120+ clones within 3 days of release! Top comments (0) * * Sentry *r* Building React Native In-App Modules bypassing the JS bridge. Ritesh Shukla - Oct 29 Accessible components: Pagination Mica - Oct 29 Introducing svelte-bundle uhteddy - Oct 25 Login/cadastro com firebase + Vue JS #PASSO 1️⃣ Jackson Dhanyel Santin - Oct 25 kit2d2 Follow If your code doesn't work, clear your terminal and run it again. https://kit2d2.vercel.app https://github.com/cat2d2/florr.io Joined Nov 1, * * * Mongoose Interview Questions #mongodb #mongoose #webdev #programming Hazelcast Promoted * Hazelcast covers all your stream processing needs. Accelerate app development and deployment to realize your real-time potential. Learn more 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/cat2d2/new-open-source-multiplayer-canvas-game-27ae"
  },
  {
    "body": "* Follow Report Abuse certifieddev0101 I am a Full Stack Developer with 8+ years of professional front-end & back-end development experience using React and Node.js Recently, I took part in the development of LMS(Learning Management System Joined on Jul 11, 2023 noru0916@gmail.com Work Midas Tech More info about @certifieddev19960101 Badges One * one year. Got it * *. ** *le week. Got it Skills/Languages JavaScript, TypeScript, Python, Tailwind CSS, GraphQL, D3.js, Currently learning I am learning D3.js, Chart.js Currently hacking on Recently I was working as a web developer on a healthcare collaboration platform that helps to streamline operations, increase accuracy, reduce wait times, improve patient outcomes. Available for I am available for discussions all day 15 posts published 13 comments written 32 tags followed Top 9 Frontend Framework certi*v0101 Follow Aug 18 '23 Top 9 Frontend Framework Add Comment 9 min read Want to connect with certifieddev0101? * certifieddev0101. * Top 10 Mistakes to Avoid When Using React certi*v0101 Follow Aug 12 '23 Top 10 Mistakes to Avoid When Using React Add Comment 6 min read 6 ways to get data in React certi*v0101 Follow Aug 10 '23 6 ways to get data in React Add Comment 8 min read 5 projects to master Front End Development certi*v0101 Follow Aug 8 '23 5 projects to master Front End D* 3 Common Mistakes to Avoid When Handling Events in React certi*v0101 Follow Aug 3 '23 3 Common Mistakes to Avoid When Handling Events in React 6 * 2023 Fastest Roadmap for ReactJS Junior Level - With Preparation Links certi*v0101 Follow Aug 3 '23 2023 Fastest Roadmap for ReactJS Junior Level - With Preparation Links * 9 Tips for Writing Clean, Fast, And Maintainable React Code certi*v0101 Follow Jul 28 '23 9 Tips for Writing Clean, Fast, And Maintainable React Code #javascript #react #programming Add Comment 11 min read “Top Frontend Interview Questions : (Part 1) — Boost Your Knowledge and Ace Your Next Job Interview!” certi*v0101 Follow Jul 27 '23 “Top Frontend Interview Questions : (Part 1) — Boost Your Knowledge and Ace Your Next Job Interview!” #webdev #* 4 * Roadmap for ReactJS Developers in 2023 | Zero to Hero certi*v0101 Follow Jul 26 '23 Roadmap for ReactJS Developers in 2023 | Zero to Hero #webdev #react #javascript 3 comments 2 min read The Future of Programming certi*v0101 Follow Jul 24 '23 The Future of Programming * Top Websites To Practice Coding. certi*v0101 Follow Jul 23 '23 Top Websites To Practice Coding. 10 * 7 JavaScript Powerful Optimization Tricks You Need To Know certi*v0101 Follow Jul 20 '23 7 JavaScript Powerful Optimization Tricks You Need To Know #* * 10 JavaScript Best Practices That Every Developer Should Know! certi*v0101 Follow Jul 18 '23 10 JavaScript Best Practices That Every Developer Should Know! 5 * 8 mistakes you must never make as a programmer certi*v0101 Follow Jul 17 '23 8 mistakes you must never make as a programmer 6 *d What is the Future of a Web Developer? certi*v0101 Follow Jul 17 '23 What is the Future of a Web Developer? #* 27 reactions 5 comments 4 *onsor Neon * ",
    "url": "https://dev.to/certifieddev19960101"
  },
  {
    "body": "* Join a Challenge. Challenges Happening Now 👾 The Open Source AI Challenge with pgai and Ollama Endless possibilities with PostgreSQL and Open Source! Ends tomorrow Live Cash Prizes 🤑 What are DEV Challenges? 🧠 DEV Challenges are like miniature Hackathons, and provide a fun opportunity for you to build up experience using new tools or to publicly show off your best skills to the community, potential employers and more. Diamond Sponsor 💎 Thank you to our diamond s* challenges. Neon is the official database partner of DEV and we hope you consider their service for any of your projects that need a database. Challenges Launching Soon - mark your calendars! AssemblyAI Challenge Innovate with superhuman speech-to-text accuracy. Starts in 4 days Cash Prizes 🤑 Previous Challenges Frontend Challenge v24.03.20 See the winners from the CSS Art Challenge, Glam Up My Markup and One Byte Explainer prompts Cloudflare AI * Build a Workers AI Application prompt Frontend Challenge v24.04.17 See the winners from the CSS Art: Earth Day and Glam Up My Markup: Earth Day Celebration Landing Page prompts Coze AI Bot * Bot Innovator and Coze Trailblazer prompts Netlify Dynamic Site * Visual Feast, Build with Blobs and Clever Caching prompts The AWS Amplify Fullstack Typescript * Build and Deploy a Fullstack Application with AWS Amplify Gen 2 prompt Frontend Challenge v24.05.29 See the winners from the CSS Art: June and Glam Up My Markup: Beaches prompts Computer Science * One Byte Explainer prompt Twilio * Build an AI-driven Experience that Leverages Twilio prompt Wix Studio * Build an Innovative eCommerce Experience with Wix Studio prompt Build Better on Stellar: Smart Contract * Build a dApp and Create a Tutorial prompts Frontend Challenge v24.07.24 See the winners from the CSS Art: Favorite Recreation and Glam Up My Markup: Cricket League! prompts Nylas AI and Communications * AI Expedition 🚀 and Galaxy Brain 💫 prompts Neon OSS Starter Kit * Ultimate Open Source Starter Kit prompt Frontend Challenge v24.09.04 Winners announced soon! Web Game Challenge Winners announced soon! Hacktoberfest Writing Challenge Winners announced soon! Pinata * Fun with Files prompt Wix Studio Challenge: Community Edition Winners announced soon! * * ",
    "url": "https://dev.to/challenges"
  },
  {
    "body": "* Follow Report Abuse Abdulsalaam Noibi A Passionate BackEnd Developer, Working towards being a Top 1% BackEnd Developer , A Dev—Mod on this platform Joined on Oct 30, 2022 noibisjunior22@gmail.com https://super-developer-portfolio.vercel.app Education Federal university of Technology Minna Pronouns He Work Searching for Technical writing jobs/ opportunity Two * two years. Got it * One * one year. ** * * * *. Got it *le week. Got it More info about @clericcoder GitHub Repositories A-filter-Tab HTML A-grid-calculator JavaScript A-responsive-DOM-projects CSS Skills/Languages Javascript,React.js,Nextjs,Nodejs,Express,MongoDB,Firebase,Tailwindcss,Docker,Kubernetes Currently learning Mastering the MERN STACK skills Available for Open for Technical writing opportunities and open-source project. 19 posts published 61 comments written 37 tags followed Pinned Mastering Trace Analysis with Span Links using OpenTelemetry and Signoz (A Practical Guide, Part 1) Abdulsa*m Noibi Follow Oct 23 Mastering Trace Analysis with Span Links using OpenTelemetry and Signoz (A Practical Guide, Part 1) #opensource #python #devops #tutorial 2 reactions 2 comments 14 min read how I built a Task Tracker Application with React and Json Server Abdulsa*m Noibi Follow Mar 14 '23 how I built a Task Tracker Application with React and Json Server #restapi #crudoperation #frontend #react 24 * Mastering Trace Analysis with Span Links using openTelemetry and Signoz (A Practical Guide,Part 2) Abdulsa*m Noibi Follow Oct 24 Mastering Trace Analysis with Span Links using openTelemetry and Signoz (A Practical Guide,Part 2) #devops #opensource #tutorial #python 4 *d Want to connect with Abdulsalaam Noibi? * Abdulsalaam Noibi. * #DEVResolutions2024 Abdulsa*m Noibi Follow Jan 11 #DEVResolutions2024 Add Comment 1 min read 5 Essential Tips for Junior Developers: Advice I Wish I Knew When I Started Abdulsa*m Noibi Follow May 12 '23 5 Essential Tips for Junior Developers: Advice I Wish I Knew When I Started #discuss #newbie #codenewbie #developers 3 *d How Streams works in Nodejs Abdulsa*m Noibi Follow May 6 '23 How Streams works in Nodejs #node #javascript #webdev #backend 2 reactions * the Concept of Decentralized Social Media and how Bluesky fits into it. (Part 1) Abdulsa*m Noibi Follow Apr 27 '23 Understanding the Concept of Decentralized Social Media and how Bluesky fits into it. (Part 1) #discuss #blockchain #opensource #socialmedia 1 comment 4 min read Multer vs Cloudinary: Which Solution Reigns Supreme for Your File Upload Needs? Abdulsa*m Noibi Follow Apr 19 '23 Multer vs Cloudinary: Which Solution Reigns Supreme for Your File Upload Needs? #node #cloudinary #cloud #webdev 4 * Revolutionize Your React App with Redux: A Beginner's Guide to Simplifying State Management(PART 2) Abdulsa*m Noibi Follow Apr 12 '23 Revolutionize Your React App with Redux: A Beginner's Guide to Simplifying State Management(PART 2) #react #redux #javascript #webdev 2 * Revolutionize Your React App with Redux: A Beginner's Guide to Simplifying State Management(PART 1) Abdulsa*m Noibi Follow Apr 5 '23 Revolutionize Your React App with Redux: A Beginner's Guide to Simplifying State Management(PART 1) #react #redux #javascript #tutorial 2 * Mastering React Router: The Ultimate Guide to Navigation and Routing in React Apps! Abdulsa*m Noibi Follow Mar 31 '23 Mastering React Router: The Ultimate Guide to Navigation and Routing in React Apps! #webdev #react #javascript #reactrouter 7 * Master VS Code Like a Pro with These Game-Changing Extensions Abdulsa*m Noibi Follow Mar 25 '23 Master VS Code Like a Pro with These Game-Changing Extensions #vscode #webdev #javascript #* 1 min read Debugging Your Way to Success: Essential Techniques for Frontend Developers Abdulsa*m Noibi Follow Mar 17 '23 Debugging Your Way to Success: Essential Techniques for Frontend Developers #frontend #webdev #javascript #debugging 5 * Creating Dynamic Layouts with the New Pseudo-Class Selectors in CSS Abdulsa*m Noibi Follow Mar 16 '23 Creating Dynamic Layouts with the New Pseudo-Class Selectors in CSS #css #webdev #frontend #beginners 3 * How I Fix \"Error: Objects are not valid as a React child (found: [object Promise]) Abdulsa*m Noibi Follow Feb 16 '23 How I Fix \"Error: Objects are not valid as a React child (found: [object Promise]) #webdev #react #javascript #beginners 14 * How To Start a Development Server for Your Project Abdulsa*m Noibi Follow Feb 9 '23 How To Start a Development Server for Your Project #webdev #node #javascript #beginners 19 *d Exploring the benefits and use cases of using CSS Grid vs Flexbox for website layout. Abdulsa*m Noibi Follow Feb 8 '23 Exploring the benefits and use cases of using CSS Grid vs Flexbox for website layout. #css #flexbox #grid #webdev Add Comment 2 min read How I solved Firebase Auth/unauthorized domain. Domain is not authorized error problem using the Vite development tool Abdulsa*m Noibi Follow Feb 2 '23 How I solved Firebase Auth/unauthorized domain. Domain is not authorized error problem using the Vite development tool #webdev #vite #react #firebase 17 *d Here are some Tips That Will Keep You Motivated When Learning To Code As a Beginner In 2023. Abdulsa*m Noibi Follow Feb 2 '23 Here are some Tips That Will Keep You Motivated When Learning To Code As a Beginner In 2023. #beginners #codenewbie #react #programming Add Comment 3 *onsor Neon * ",
    "url": "https://dev.to/clericcoder"
  },
  {
    "body": "* 7 Add reaction 7 Like 0 *s 0 Fire 1 Jump to Comments 2 * Brian Morrison II for Clerk Posted on Sep 30 • Originally published at clerk.com 7 * #clerk #express #node #react When calling multiple external APIs from an application using Clerk for authentication, you need to ensure that each API request is properly authenticated and secured. Implementing authentication in Express or Node.js is crucial for ensuring your API's integrity, security, and reliable operation. This reassures you that your APIs are protected and functioning as intended. In this tutorial, we'll explore how to use Clerk with Express to authenticate API requests using ClerkExpressWithAuth() and ClerkExpressRequireAuth() middleware, and build a secure and robust backend for your application. Prerequisites To following along with this article, make sure you have the following: Create a Clerk account. Create a Clerk application. Node.js and npm installed on your computer. Postman installed on your computer. Securing API Endpoints To secure multiple external APIs with your application and Clerk, you can use Clerk's authentication middleware to protect your API endpoints. Clerk provides middleware that can be used to authenticate requests to your API endpoints. This middleware can be applied to routes that need authentication, ensuring that only authenticated users can access these endpoints. For Express applications, Clerk offers two middleware options: ClerkExpressWithAuth(): This middleware attaches the authenticated user's session to the request object, allowing you to access user information in your route handlers. ClerkExpressRequireAuth(): This middleware ensures that only authenticated requests can access the protected routes and will throw an error if the request is not authenticated. Let's explore how both middlewares can be used with Express. Create the API with Express Start by opening an empty directory on your computer and initializing a new Node project with the following command: npm init -y Now open the package.json file and update it to add the \"type\": \"module\" setting as shown below: { \"name\": \"api\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"server.js\", \"type\": \"module\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"start\": \"node server.js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\" } Next, we need to install the following packages: express is the web framework for Node.js we're going to use. Express is a great option for running Node servers because it's fast and minimal. cors allows us to easily call the endpoint from a client dotenv is used to read environmental variables in Node. @clerk/clerk-sdk-node is the Node.js SDK for the Clerk user management platform. These can be installed by running the following command in the your terminal: npm install express cors dotenv @clerk/clerk-sdk-node Once installation completes, find your CLERK_PUBLISHABLE_KEY & CLERK_SECRET_KEY in the Clerk dashboard on the Quickstart screen if this is a new application, or in the Configure tab in the sidebar under API keys. Because you are building these routes on the backend, it is safe to include the CLERK_SECRET_KEY in your environment variables. Finally, create a file named server.js and add the following code to it. Note that both Clerk middleware functions are being used on different routes to test the behavior of each. Below those routes is an error-handling middleware to address any errors that are thrown. If an error occurs in any middleware function that is run before the ClerkExpressRequireAuth middleware, this function will be called. // server.ts import 'dotenv/config' // To read CLERK_SECRET_KEY and CLERK_PUBLISHABLE_KEY import express from 'express' import { ClerkExpressRequireAuth, ClerkExpressWithAuth } from '@clerk/clerk-sdk-node' import cors from 'cors' const port = process.env.PORT || 3000 const app = express() app.use(cors()) // Use the strict middleware that throws when unauthenticated app.get('/protected-auth-required', ClerkExpressRequireAuth(), (req, res) => { res.json(req.auth) }) // Use the lax middleware that returns an empty auth object when unauthenticated app.get('/protected-auth-optional', ClerkExpressWithAuth(), (req, res) => { res.json(req.auth) }) // Error handling middleware function app.use((err, req, res, next) => { console.error(err.stack) res.status(401).send('Unauthenticated!') }) // Route not utilizing any authentication app.get('/', function (req, res) { res.send('Hello World!') }) app.listen(port, () => { console.log(`Example app listening at http://localhost:${port}`) }) Let's start the API server by running the following command in the terminal: node server.js You should now see that message from in your app.listen(…) terminal: Example app listening at http://localhost:3000 Testing the route with Postman Postman is a tool that's used to dispatch requests to various endpoints and analyze the results. With Postman open, create a new request by selecting File > New. In the modal that appears, select HTTP as the request type. In the URL field, type in http://localhost:3000/protected-auth-required and click Send. The results will be displayed in the Response tab like so: While accessing the /protected-auth-required route without authentication will return a 401 response as defined in the error handling middleware, accessing the /protected-auth-optional route will return an empty JSON object instead. Feel free to create a new request in Postman and send the request. This is the expected response: { \"sessionClaims\": null, \"sessionId\": null, \"session\": null, \"userId\": null, \"user\": null, \"actor\": null, \"orgId\": null, \"orgRole\": null, \"orgSlug\": null, \"organization\": null, \"claims\": null } Testing authentication with React Let's create a React app so we can add Clerk to it and test the API endpoints after being authenticated. Open an empty directory in your terminal and run the following command to initialize a new React app: npm create vite@latest You'll be guided through a series of questions, use the following answers for each: Ok to proceed? (y) y Project name: app Select a framework: React Select a variant: TypeScript Next, run the following command to switch directories, install the dependencies, and launch the project: cd app npm install npm run dev You should now be able to open your browser to http://localhost:5173/ to access the React app. Set up Clerk Next, follow the Clerk React Quickstart Guide to add Clerk to the app you just created. Once done, replace the code in src/App.jsx to render the <SignInButton> if the user is not signed in, or the <UserButton> if they are: // src/App.tsx import './App.css' import { SignInButton, SignedIn, SignedOut, UserButton } from '@clerk/clerk-react' function App() { return ( <> <p>Hello World!</p> <SignedOut> <SignInButton /> </SignedOut> <SignedIn> <UserButton /> </SignedIn> </> ) } export default App Now click the Sign-in button and test that you can sign-in using your preferred method. After fully authenticating, the Sign-in button will be replaced with your avatar, which is the <UserButton> component. Accessing the API via React Next, we'll update App.tsx again with the following changes. This code will add the useAuth hook provided by the Clerk React SDK, which contains the getToken function used to obtain the JWT for the currently authenticated user. That token will be used in the Authorization header of the fetch requests to our API, each of which can be called by clicking the appropriate button that is rendered in the browser. Finally, we're storing the responses of each call in a data state and simply displaying that as a string in the browser. // src/App.tsx import './App.css' import { SignInButton, SignedIn, SignedOut, UserButton, useAuth } from '@clerk/clerk-react' import { useState } from 'react' function App() { const { getToken } = useAuth() const [data, setData] = useState({}) async function callProtectedAuthRequired() { const token = await getToken() const res = await fetch('http://localhost:3000/protected-auth-required', { headers: { Authorization: `Bearer ${token}`, }, }) const json = await res.json() setData(json) } async function callProtectedAuthOptional() { const token = await getToken() const res = await fetch('http://localhost:3000/protected-auth-optional', { headers: { Authorization: `Bearer ${token}`, }, }) const json = await res.json() setData(json) } return ( <> <p>Hello World!</p> <SignedOut> <SignInButton /> </SignedOut> <SignedIn> <UserButton /> <button onClick={callProtectedAuthRequired}>Call /protected-auth-required</button> <button onClick={callProtectedAuthOptional}>Call /protected-auth-optional</button> <h1>Data from API:</h1> <p>{JSON.stringify(data, null, 2)}</p> </SignedIn> </> ) } export default App In the browser, click each of the newly rendered buttons to display a payload similar to the following JSON on the page: { \"sessionClaims\": { \"azp\": \"http://localhost:5173\", \"exp\": 1720558905, \"iat\": 1720558845, \"iss\": \"https://boss-squid-85.clerk.accounts.dev\", \"nbf\": 1720558835, \"sid\": \"sess_2j1ZjdrAVrALRRTkn8ZFXHDQ7Qy\", \"sub\": \"user_2iQUovqEkfcRDScQrXvAIfGQgUn\" }, \"sessionId\": \"sess_2j1ZjdrAVrALRRTkn8ZFXHDQ7Qy\", \"userId\": \"user_2iQUovqEkfcRDScQrXvAIfGQgUn\", \"claims\": { \"azp\": \"http://localhost:5173\", \"exp\": 1720558905, \"iat\": 1720558845, \"iss\": \"https://boss-squid-85.clerk.accounts.dev\", \"nbf\": 1720558835, \"sid\": \"sess_2j1ZjdrAVrALRRTkn8ZFXHDQ7Qy\", \"sub\": \"user_2iQUovqEkfcRDScQrXvAIfGQgUn\" } } Conclusion Authentication should be swift and efficient to ensure it gets done, rather than sitting in your backlog for months or leaving your endpoints vulnerable to attackers. By using Clerk Middlewares, In this case, ClerkExpressWithAuth() or ClerkExpressRequireAuth(), you can secure any endpoint and integrate authentication with Express without the complexity of building it from scratch. *upercharge your development Reduce frustration, boost productivity, and increase your organization's competitive advantages with Red Hat Developer Hub. Learn more Top comments (1) * Samiul Karim Samiul Karim Samiul Karim Follow Joined Jul 18, 2024 • Nov 3 * save my day. Thank you. 1 like Like Reply * Heroku *referenc* Read next Some new features CSS in 2024 Sonay Kara - Oct 26 Fix an issue on my Dockerfile: ARG Scope in Multi-Stage Docker Build Manuel Artero Anguita 🟨 - Oct 31 Dive into Next.js Parallel & Intercepting Routing: Enhancing UX Nik Bogachenkov - Oct 11 Efficiently Manage Errors in Next.js with a Comprehensive Developer Solution Riyon Sebastian - Oct 31 Clerk Follow The most comprehensive User Management Platform More from Clerk Role-based access control with Clerk Organizations #webdev #security #clerk #b2b Per-user B2B monetization with Stripe and Clerk Organizations #stripe #saas #webmonetization #clerk Clerk Update — July 2024 #showdev #clerk #news Heroku *referenc* 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/clerk/securing-nodejs-express-apis-with-clerk-and-react-ook"
  },
  {
    "body": "* Code of Conduct Last updated July 31, 2023 All participants of DEV Community are expected to abide by our Code of Conduct and Terms of Service, both online and during in-person events that are hosted and/or associated with DEV Community. Our Pledge In the interest of fostering an open and welcoming environment, we as moderators of DEV Community pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Referring to people by their pronouns and using gender-neutral pronouns when uncertain Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Citing sources if used to create content (for guidance see DEV Community: How to Avoid Plagiarism) Following our AI Guidelines and disclosing AI assistance if used to create content Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances The use of hate speech or communication that is racist, homophobic, transphobic, ableist, sexist, or otherwise prejudiced/discriminatory (i.e. misusing or disrespecting pronouns) Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Plagiarizing content or misappropriating works Other conduct which could reasonably be considered inappropriate in a professional setting Dismissing or attacking inclusion-oriented requests We pledge to prioritize marginalized people's safety over privileged people's comfort. We will not act on complaints regarding: 'Reverse' -isms, including 'reverse racism,' 'reverse sexism,' and 'cisphobia' Reasonable communication of boundaries, such as 'leave me alone,' 'go away,' or 'I'm not discussing this with you.' Someone's refusal to explain or debate social justice concepts Criticisms of racist, sexist, cissexist, or otherwise oppressive behavior or assumptions Enforcement Violations of the Code of Conduct may be reported by contacting the team via the abuse report form or by sending an email to support@dev.to. All reports will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Further details of specific enforcement policies may be posted separately. Moderators have the right and responsibility to remove comments or other contributions that are not aligned to this Code of Conduct or to suspend temporarily or permanently any members for other behaviors that they deem inappropriate, threatening, offensive, or harmful. If you agree with our values and would like to help us enforce the Code of Conduct, you might consider volunteering as a DEV moderator. Please check out the DEV Community Moderation page for information about our moderator roles and how to become a mod. Attribution This Code of Conduct is adapted from: Contributor Covenant, version 1.4 Write/Speak/Code Geek Feminism * * ",
    "url": "https://dev.to/code-of-conduct"
  },
  {
    "body": "* Follow Report Abuse Ketan Jakhar Everything backend | NodeJS Ninja | Building products from scratch Jaipur, Rajasthan, India Joined on Feb 28, 2021 ketanjakhar29@gmail.com https://codexstoney.medium.com More info about @codexstoney Badges * T* *2 *22 * One * one year. Got it 11 * 13 tags followed Mastering *: * * *: Pa*ac* * 4 — The Strategy Pattern * Oct 28 * 4 — The Strategy Pattern #javascript #typescript #programming #react Add Comment 1 min read * 3 — The Observer Pattern * Oct 28 * 3 — The Observer Pattern #node #react #designpatterns #* * 2 — The Factory Pattern * Oct 19 * 2 — The Factory Pattern #javascript #node #designpatterns #* * 1 — The Singleton Pattern * Oct 17 * 1 — The Singleton Pattern #designpatterns #javascript #softwareengineering #node Add Comment 5 min read The Ultimate Guide to TypeScript’s Utility Types * Oct 14 The Ultimate Guide to TypeScript’s Utility Types #javascript #tips #typescript #react * Is Broken! * Oct 11 JavaScript Is Broken! #javascript #node #typescript #react Add Comment 1 min read Real-Time Data Processing with Node.js, TypeScript, and Apache Kafka * Oct 14 Real-Time Data Processing with Node.js, TypeScript, and Apache Kafka #queue #pubsub #node #* Handling Backpressure in Node.js streams * Oct 14 Handling Backpressure in Node.js streams #typescript #asynchronousprogramm #systemdesignconcepts #node Add Comment 10 min read Essential Security Measures for Production-Level Express.js Applications * Oct 15 Essential Security Measures for Production-Level Express.js Applications #hacking #javascript #express #security Add Comment 11 *onsor Neon * ",
    "url": "https://dev.to/codexstoney"
  },
  {
    "body": "* 0 *ead 0 * 0 * Ketan Jakhar Posted on Nov 5 • Originally published at javascript.plainenglish.io on * JavaScript: Pa*act #node Hey folks! 👋 Continue reading on JavaScript in Plain English » Top comments (0) * * Stellar Development Foundation Promoted * A brief tutorial on creating on setting up your local environment for Rust development Follow our step-by-step guide to develop smart contracts on Soroban. Start Building Read next How I Created a Hover Reveal Text Animation with TailwindCSS and React Skyler Dev - Nov 1 Mastering Compiler Design: A Comprehensive Collection of Free Programming Resources GetVM - Oct 19 HumanAIze AI text with the smartest AI humanizer! Here’s how… Ibrohim Abdivokhidov - Nov 5 Java Spring Boot use log4j in a gradle project Minhaz - Oct 18 Ketan Jakhar Follow Everything backend | NodeJS Ninja | Building products from scratch Location Jaipur, Rajasthan, India Joined Feb 28, 2021 More from Ketan Jakhar Mastering Design Patterns in JavaScript: * * 4 — The Strategy Pattern #javascript #typescript #programming #react * 3 — The Observer Pattern #node #react #designpatterns #typescript Heroku *referenc* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/codexstoney/mastering-design-patterns-in-javascript-part-5-the-decorator-pattern-4353"
  },
  {
    "body": "* 0 *ead 0 * 0 * Ketan Jakhar Posted on Nov 8 • Originally published at javascript.plainenglish.io on *n JavaScript: * Master the Adapter Pattern in JavaScript to seamlessly integrate incompatible interfaces. Learn through practical examples, best practices, Continue reading on JavaScript in Plain English » Top comments (0) * * _Su* UI Component * retain full ownership *ion limits. Learn more Read next list of the most common JavaScript string methods Nozibul Islam - Nov 5 JSON Extensions for writing config files and parsing data Michael Z - Nov 6 3d Image carousel rotation illusion using html css and javascript Prince - Nov 6 How to build an AI assistant with OpenAI, Vercel AI SDK, and Ollama with Next.js This Dot Media - Nov 6 Ketan Jakhar Follow Everything backend | NodeJS Ninja | Building products from scratch Location Jaipur, Rajasthan, India Joined Feb 28, 2021 More from Ketan Jakhar Mastering Design Patte* * 4 — The Strategy Pattern #javascript #typescript #programming #react * 3 — The Observer Pattern #node #react #designpatterns #typescript Sentry Promoted * Youtube Tutorial Series 📺 * 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/codexstoney/mastering-design-patterns-in-javascript-part-6-the-adapter-pattern-mki"
  },
  {
    "body": "* Follow Report Abuse codingjlu 404 bio not found Joined on Jun 15, 2021 Three * three years. Got it * Two * two years. Got it *. Got it One * one year. Got it *le week. Got it More info about @codingjlu 2 posts published 161 comments written 6 tags followed Parallax using scroll driven animations codingjlu codingjlu codingjlu Follow Nov 23 '23 Parallax using scroll driven animations #webdev #css #html 3 reactions Ad*h codingjlu? * codingjlu. * Developing Express and React on the same port codingjlu codingjlu codingjlu Follow Jan 17 '22 Developing Express and React on the same port #node #express #webdev #react 13 reactions 2 comments 3 *onsor Neon * ",
    "url": "https://dev.to/codingjlu"
  },
  {
    "body": "* Contacts DEV Community would love to hear from you! Email: support@dev.to 😁 Twitter: @thepracticaldev 👻 Report a vulnerability: dev.to/security 🐛 To report a bug, please create a bug report in our open source repository. To request a feature, please start a new GitHub Discussion in the Forem repo! * * ",
    "url": "https://dev.to/contact"
  },
  {
    "body": "* Follow Report Abuse Cristian Magalhães Sharing my knowledge Guarujá -SP Joined on Aug 21, 2019 cristian123105@gmail.com https://cristiansilva.dev Education Systems Analyst Pronouns He/Him Work Software Engineer Five * five years. Got it * DEV Resolutions Quester Awarded for setting and sharing professional, personal, and DEV-related resolutions in the #DEVResolutions2024 campaign. Got it Hacktoberfest 2023 Pledge Earned by pledging commitment and authoring a post about Hackathon experience or Hacktoberfest goals. This achievement sets participants on the path to earning other badges. Got it Four * four years. ** * 2 Week Co* * * 1 We*t * Hacktoberfest 2022 *22 * Three * three *1 *21 * Two * two *0 *20 * *19 *19 * Show all 16 badges More info about @cristuker Organizations NodeBR GitHub Repositories bash_scripts Repositório com scripts criados na aula de Sistemas Operacionais 2(Linux) Shell • 1 star data-transformation 📦 Aplicação para pegar dados de um PDF, adicionar a um CSV e depois zipar todos os CSVs JavaScript estoque-api 📦 Uma api criada para gerenciar estoque de uma padaria JavaScript GolangContactsBook 📙 Simple go lang use Go SafeHouse 🏠 Esse é o repositório do meu projeto de conclsõa de curso de Analise e Desenvolvimento de Sistemas Fatec Rubens Lara 2021 teddy-api API para criar urls curtas TypeScript Tindev 👨‍💻 App feito em ReactJS e React Native onde você pode encontrar outros desenvolvedores, consumido API do github. JavaScript TRSLDA 🚛 Uma api para um serviço de transportes JavaScript ubuntu-setup Scripts de pós instalação para o ubuntu Fork Shell Skills/Languages - JavaScript - Java - ReactJS - NodeJS - AngularJS - TypeScript - C - C++ - Docker - Ionic - NestJS - Next.JS - Go Currently learning - CI/CD - Go - NestJS - FullCycle Development - English Currently hacking on - Write for dev.to - NodeBR community Available for Open Source Projects, Talk about tech 34 posts published 20 comments written 10 tags followed Pinned Bun: o novo runtime para Javascript * Cristian Magalhães Follow Jul 26 '22 Bun: o novo runtime para Javascript #discuss #javascript #node #webdev 17 *d O que são testes e como funcionam? * Cristian Magalhães Follow Jul 5 '22 O que são testes e como funcionam? #javascript #tdd #beginners #tutorial 14 *d [Design Patterns] Trabalhando com Factories * Cristian Magalhães Follow Aug 14 [Design Patterns] Trabalhando com Factories #javascript #beginners #braziliandevs #programming 4 reactions 1 c*ith Cristian Magalhães? * Cristian Magalhães. * Uma breve introdução a microsserviços * Cristian Magalhães Follow Aug 5 Uma breve introdução a microsserviços #braziliandevs #architecture #beginners #node 3 * JavaScript: Alterando a prioridade de execução * Cristian Magalhães Follow Jul 3 JavaScript: Alterando a prioridade de execução #javascript #braziliandevs #beginners #programming 7 * JavaScript: Interceptando objetos com Proxy * Cristian Magalhães Follow Jun 28 JavaScript: Interceptando objetos com Proxy #braziliandevs #javascript #node #* 2 min read JavaScript: Trabalhando com Set * Cristian Magalhães Follow Jun 25 JavaScript: Trabalhando com Set #javascript #braziliandevs #beginners #node 10 * JavaScript: O que é Symbol? * Cristian Magalhães Follow Jun 19 JavaScript: O que é Symbol? #javascript #braziliandevs #beginners #node 15 *d O que é strict mode no JavaScript? * Cristian Magalhães Follow May 27 O que é strict mode no JavaScript? #javascript #webdev #beginners #braziliandevs 4 * Um pouco sobre Arquitetura Hexagonal * Cristian Magalhães Follow Apr 18 Um pouco sobre Arquitetura Hexagonal #programming #braziliandevs #development #architecture 6 reactions 5 comments 3 min read Como e por que usar GraphQL? * Cristian Magalhães Follow Feb 6 Como e por que usar GraphQL? #webdev #programming #braziliandevs #graphql 7 *d #DEVResolutions2024 * Cristian Magalhães Follow Jan 17 #DEVResolutions2024 #devresolutions2024 5 *d Amazon Web Services Basics: What is EC2 * Cristian Magalhães Follow Jan 9 Amazon Web Services Basics: What is EC2 #aws #beginners #braziliandevs #devops 3 * Amazon S3 Basics: What You Need to Know * Cristian Magalhães Follow Nov 21 '23 Amazon S3 Basics: What You Need to Know #programming #aws #braziliandevs #devops 2 *d O que é JSDoc * Cristian Magalhães Follow Nov 11 '23 O que é JSDoc #javascript #node #nodebr #braziliandevs 8 reactions *st: Entenda o que é e por que vale a pena participar * Cristian Magalhães Follow Sep 22 '23 Hacktoberfest: Entenda o que é e por que vale a pena participar #hacktoberfest #hacktoberfest23 #braziliandevs #programming 3 reactions * the Cloud: Service Categories * Cristian Magalhães Follow Sep 18 '23 Understanding the Cloud: Service Categories #aws #cloud #webdev #programming 7 * O que são annotations? * Cristian Magalhães Follow Aug 21 '23 O que são annotations? #programming #braziliandevs #beginners #java 1 reaction *: atribuição por referência * Cristian Magalhães Follow Jun 29 '23 JavaScript: atribuição por referência #javascript #braziliandevs #beginners #* 3 min read Como tirar uma ideia do papel? * Cristian Magalhães Follow Apr 25 '23 Como tirar uma ideia do papel? #beginners #braziliandevs #tutorial #* 3 min read O que é gRPC? * Cristian Magalhães Follow Mar 31 '23 O que é gRPC? #braziliandevs #programming #node #go 5 reactions *: Um pouco sobre o This * Cristian Magalhães Follow Mar 24 '23 JavaScript: Um pouco sobre o This #braziliandev* Comment 2 min read Node.Js 19, quais são as novidades? * Cristian Magalhães Follow Mar 17 '23 Node.Js 19, quais são as novidades? #javascript #node #braziliandevs #* 2 min read Estrutura de Dados: Filas * Cristian Magalhães Follow Mar 10 '23 Estrutura de Dados: Filas #braziliandevs #programming #database #ptbr 4 * Entendendo S.O.L.I.D * Cristian Magalhães Follow Mar 3 '23 Entendendo S.O.L.I.D #braziliandevs #ptbr #programming #beginners 4 * Dicas de como escrever um código limpo * Cristian Magalhães Follow Feb 24 '23 Dicas de como escrever um código limpo #javascript #braziliandevs #* 4 min read JavaScript: Porque usar Promise.all? * Cristian Magalhães Follow Feb 17 '23 JavaScript: Porque usar Promise.all? #* #braziliandevs 6 *d O que são funções puras? * Cristian Magalhães Follow Feb 10 '23 O que são funções puras? #javascript #testing #programming #braziliandevs 5 reactions *: O que é Intl? * Cristian Magalhães Follow Feb 2 '23 JavaScript: O que é Intl? #javascript #programming #node #codenewbie 3 * JavaScript: Para que serve o comando eval? * Cristian Magalhães Follow Jan 24 '23 JavaScript: Para que serve o comando eval? #javascript #beginners #node #webdev * JavaScript: O que é callstack? * Cristian Magalhães Follow Jan 19 '23 JavaScript: O que é callstack? #webdev #javascript #node #algorithms 3 reactions *: O que são funções IIFE? * Cristian Magalhães Follow Jan 17 '23 JavaScript: O que são funções IIFE? #* #node 9 * Estrutura de Dados: O que é uma pilha? * Cristian Magalhães Follow Jan 2 '23 Estrutura de Dados: O que é uma pilha? #beginners #programming #javascript #tutorial 4 * JavaScript: O que é uma Promise? * Cristian Magalhães Follow Dec 27 '22 JavaScript: O que é uma Promise? #javascript #beginners #react #webdev 5 reactions 1 comment 3 *onsor Neon * ",
    "url": "https://dev.to/cristuker"
  },
  {
    "body": "* 48 Add reaction 41 Like 7 *s 0 Fire 8 Jump to Comments 63 * Carmen Salas Posted on Jul 2, 2020 • Updated on Apr 29, 2022 41 7 What Is Webpack What The Webpack #react #beginners #node #javascript Webpack can seem overwhelming and something you might have avoided learning about when building out React applications. But it is pretty simple to set up and create yourself, for your React apps. This will be a beginner’s guide into Webpack and what it’s actually doing. Let’s unpack any questions you might have about Webpack… haha... We will be going over: What is Webpack? How to Configure Webpack Cache Busting in Webpack What is Webpack, how does it work, and what is it doing? If you are familiar with Create React App, Webpack is responsible for the main functionality in Create React App, along with some other things like Babel (a JS compiler). Create React App is using Webpack to bundle your files, together, and is the reason why developing React applications using create React app is really easy. Webpack is a module bundler. But what does this mean? It means Webpack compiles JS files into one main file or however many files you want to bundle your code into, but typically it is one bundle file. Webpack comes with many features such as module bundling, file minification(the process of minimizing code by getting rid of white space, comments, unnecessary code, and minimizing/ shortening code.), SASS compilation, etc. It bundles and complies with your developing application into something that the browser can understand. Webpack manages dependencies and loads code that needs to be loaded first. Webpack keeps track of what files depend on what and loads them accordingly. The problem Webpack solves is when developing large apps, your dependencies can pile up and intersect different files which make it complex and difficult to manage. Webpack manages all these dependencies and files for you, bundles it to plain JS that the browser can understand. How to Configure Webpack If you want to add loader and plugins to your Webpack bundle, you have to do this in a Webpack config file. Here is what a webpack config file looks like. //Webpack.config.js file: const path = require(\"path\"); module.exports = { mode: \"development\", entry: \"./src/index.js\", output: { filename: \"main.js\", path: path.resolve(__dirname, \"dist\") } }; Let’s unpack what is happening in this file. First, we set the mode to be development and this tells the Webpack not to minify our code, which is extremely helpful when developing. We then, have to make sure everything we have in this file is exported as a module if we want to use it. In your package.json file, created when you initialize your application with npm init you can tell Webpack to run in scripts like so: \"scripts\": { \"start\": \"webpack --config webpack.config.js\" }, //The webpack config file can be named anything, //In this case, it is webpack.config.js Next the entry property, takes in the src of where your entire application runs. By default, Webpack will look for an index.js file in a src folder but here is where you can specify the file where your application starts and what code needs to be bundled. The output property is an object, where you want your code to be outputted. The filename property can be named anything you’d like, typically it is main.js. The path property specifies where you want the code to go. In this case, we are resolving an absolute path to the dist directory, you can call this folder anything. Essentially this is the folder that Webpack will bundle your application in, traditionally this folder is dist. This is the basics for configuring your Webpack file and how to get Webpack to run your application. There is of course more you can add to this config file such as loaders and plugins. You can refer to the Webpack docs if you are interested in this. Cache busting in Webpack Cache busting can be a confusing topic at first, but it can be important to the functionality of your application and something that can be easily done in a Webpack. When you bundle up your application with Webpack, Webpack bundles everything up in a deployable /dist directory. Once your application is deployed to a server, and a user is visiting your application, the client (typically a browser) has to reach the server again to retrieve all of the application’s assets. This is why browsers cache application assets. Essentially they save files or modules form the /dist directory so that the next time the user refreshes or visits the browser doesn’t have to retrieve any assets it already remembers. How to prevent browsers to cache bundles for CSS or files we have made changes to? The browser caching files can cause a problem because if we change files that have been cached, the browser might not update them and assume the file is the same just because the name of the file hasn’t changed. The idea behind cache busting is we want to create a new file name every time you make changes to a file and keep the file name the same if you haven’t made changes. This way when you have made changes to a file, when the client makes requests to the server to retrieve the application assets, the files you have changed will update since the browser does not recognize the filenames. Luckily, a Webpack comes with a built-in substitution feature in output.filename in the Webpack config file called [contenthash]. The [contenthash] substitution will create a unique hash based on whether the content of an asset has changed or not, updating only when it does. When you add [contenthash] to the output object in your config file it will look something like this: //the output object in module.exports from the webpack.config.js file: output: { filename: \"main.[contentHash].js\", path: path.resolve(__dirname, \"dist\") }, So, I hope this introduction to Webpack was easy to digest and answered a few questions you might have had about Webpack. Webpack is doing a lot of the behind the scenes work to make your React applications work, all you need to do is make sure you configure it correctly for your application. Next time you're working on a React app, consider configuring Webpack yourself! Coherence Promoted * The Next Generation Developer Platform Coherence is the first Platform-as-a-Service you can control. Unlike \"black-box\" platforms that are opinionated about the infra you can deploy, Coherence is powered by CNC, the open-source IaC framework, which offers limitless customization. Learn more Top comments (8) * Cécile Fécherolle Cécile Fécherolle Cécile Fécherolle Follow French full-stack web developer who loves music, singing and video games! Location Lyon, France Education Computer Science Engineering Degree (Université de Technologie de Compiègne) Work Full-stack web developer Joined Oct 31, 2018 • Jul 4 '20 Copy * for this clear and simple explanation! I now have a better understanding about what's going on, since Webpack is used under the hood by so many JS frameworks these days. PS: I think I spotted a minor typo, maybe it should be Babel instead of Bable? 5 likes Like Reply Carmen Salas Carmen Salas Carmen Salas Follow Associate Instructor at The Marcy Lab School. I love listening to music and taking photos on my film camera! Location New York Education The Marcy Lab School Work Software Engineering Joined Dec 18, 2019 • Jul 6 '20 • Edited on Jul 6 • * Thank you for the correction! 1 like Like Reply SavagePixie SavagePixie SavagePixie Follow Always learning new things. I love web development and coding in general. Joined Jul 23, 2019 • Jul 2 '20 * explanation about the basics of Webpack! I didn't know about cache busting, so it was really interesting to read that. 6 likes Like Reply Carmen Salas Carmen Salas Carmen Salas Follow Associate Instructor at The Marcy Lab School. I love listening to music and taking photos on my film camera! Location New York Education The Marcy Lab School Work Software Engineering Joined Dec 18, 2019 • Jul 2 '* yay! thank you:) 1 like Like Reply nageshnandyal nageshnandyal nageshnandyal Follow Joined Apr 23, 2020 • Jul *use Very nice and clear explanation about basics of webpack 3 likes Like Reply Ashim Codec Ashim Codec Ashim Codec Follow Former civil engineer turned software engineer who is trying to understand Data analysis & a lot of other things. Location Delhi Work SDE at infotech Pvt limited Joined Jul 3, 2020 • Jul 3 '20 * and structured explanation about basics of webpack. i was planning to do some regular examine & search more info about it but i dont think i needed it anymore Thanks ! 2 likes Like Reply Carmen Salas Carmen Salas Carmen Salas Follow Associate Instructor at The Marcy Lab School. I love listening to music and taking photos on my film camera! Location New York Education The Marcy Lab School Work Software Engineering Joined Dec 18, 2019 • Jul 6 '* Really interesting, I will be looking into that! 1 like Like Reply * Sentry *r* Modular React architecture Michael Mazzone - * and * - Nov 9 Promises in JavaScript and React Native: Creation, Usage, and Common Scenarios Ajmal Hasan - Nov 9 Essential JavaScript Array Methods Every Developer Should Know Khalif AL Mahmud - Nov 8 Carmen Salas Follow Associate Instructor at The Marcy Lab School. I love listening to music and taking photos on my film camera! Location New York Education The Marcy Lab School Work Software Engineering Joined Dec 18, 2019 More from Carmen Salas Getting into Gatsby #node #beginners #webdev #productivity This is my JAMstack #javascript #react #html #devops How to be an A11y #javascript #html #beginners #productivity * * * * ",
    "url": "https://dev.to/cs_carms/what-is-webpack-43h6"
  },
  {
    "body": "* Follow Report Abuse Clara Situma Fullstack software engineer with frontend focus and technical writer Nairobi Joined on Sep 25, 2020 cnsituma@gmail.com Work Software developer Four * four years. Got it * Three * three years. *or 4 consecutive weeks! **wo * two years. G* @csituma Skills/Languages React Typescript Nodejs Solidity Javascript Currently learning Solidity Available for Technical writing React Developer Blockchain developer 26 posts published 47 comments written 19 tags followed Pinned Using Google Dorking to land a Job * Nov 22 '22 Using Google Dorking to land a Job #webdev #career #python #react 55 *d Must know blockchain Terminologies. * Apr 1 Must know blockchain Terminologies. #webdev #blockchain #web3 #beginners 12 * Want to connect with Clara Situma? * Clara Situma. * WHAT IS GAS IN BLOCKCHAIN? * Mar 31 WHAT IS GAS IN BLOCKCHAIN? #blockchain #web3 #defi #webdev 5 *d React Usecallback for Kids/Beginners * Feb 8 React Usecallback for Kids/Beginners #react #webdev #javascript #hook 41 reactions 17 comments 2 min read HTML IS JUST LIKE WRITING A WORD DOCUMENT * Jul 14 '23 HTML IS JUST LIKE WRITING A WORD DOCUMENT #html #beginners #* 2 min read Unraveling the Mysteries of Code: Decoding, Interpreting and Compiling * Jun 26 '23 Unraveling the Mysteries of Code: Decoding, Interpreting and Compiling #webdev #javascript #beg*mment 3 min read Test for dynamically created elements like time and token with jest(spys) * Jan 26 '23 Test for dynamically created elements like time and token with jest(spys) #we*esting 3 *d Stubs/fakes(casting as a particular object) * Jan 17 '23 Stubs/fakes(casting as a particular object) #webdev #javascript #beginners #* 1 min read UNIT TESTING WITH JEST (with example) * Jan 16 '23 UNIT TESTING WITH JEST (with example) #we*esting 7 * useReducer for dummies(kid friendly) * Dec 27 '22 useReducer for dummies(kid friendly) #javascript #beginners #react #webdev 12 *d Easiest way to understand Pub/Sub System (kid friendly) * Dec 27 '22 Easiest way to understand Pub/Sub System (kid friendly) #architecture #javascript #beginners #react 5 *d useState vs useReducer - choose your champion 🤺 * Dec 16 '22 useState vs useReducer - choose your champion 🤺 #webdev #react #javascript #beginners 5 * useReducer hook in React (No redux here) * Dec 15 '22 useReducer hook in React (No redux here) #webdev #javascript #react #beginners 35 reactions 8 comments 2 min read When do you use setState with a callback? * Dec 14 '22 When do you use setState with a callback? #webdev #javascript #beginners #react 15 * WHY YOUR STATE IS BEHIND.(react.js) * Dec 10 '22 WHY YOUR STATE IS BEHIND.(react.js) #react #webdev #javascript #beginners 5 * Inversion of Control vs Dependency injection - can they be used interchangeably? * Dec 9 '22 Inversion of Control vs Dependency injection - can they be used interchangeably? 4 *d DEPENDENCY INJECTION. * Dec 9 '22 DEPENDENCY INJECTION. #react #webdev #javascript #beginners 6 *d Do i need to use cleanup function on useEffect? * Dec 8 '22 Do i need to use cleanup function on useEffect? #react #webdev #beginners #javascript 6 * Why we use empty array with UseEffect * Dec 8 '22 Why we use empty array with UseEffect #react #javascript #webdev #beginners 22 reactions 18 comments 2 min read Install NVM on Mac, Windows and Linux * Dec 6 '22 Install NVM on Mac, Windows and Linux 9 *d YOUR SOLUTION IS NVM * Dec 6 '22 YOUR SOLUTION IS NVM #npm #node #nvm #webdev 3 * 20 SITES THAT REGULARLY POST REMOTE JOBS * Nov 22 '22 20 SITES THAT REGULARLY POST REMOTE JOBS #webdev #remote #career #*nt 1 min read LESSON 1: BASIC COMMAND LINES * Apr 27 '22 LESSON 1: BASIC COMMAND LINES #webdev #beginners #tutorial #html 3 *d LESSON 0:WEB DEV CODING- where to start(Code Editor) * Apr 27 '22 LESSON 0:WEB DEV CODING- where to start(Code Editor) #webdev #beginners #tutorial #html 5 * WHY YOU SHOULD TEACH WEB DEVELOPEMENT * Feb 10 '22 WHY YOU SHOULD TEACH WEB DEVELOPEMENT #javascript #webdev #beginners #react 6 * Learning & Memorization. * Nov 3 '20 Learning & Memorization. #javascript #codenewbie #devjournal #react 3 *n * ",
    "url": "https://dev.to/csituma"
  },
  {
    "body": "* Follow Report Abuse Daniel Golant 404 bio not found NYC Joined on Dec 20, 2016 Education Purdue University Work Software Engineer * Seven * seven years. Got it Tag Moderator 2022 Awarded for being a tag moderator in 2022. Got it Trusted Member 2022 Awarded for being a trusted member in 2022. Got it Five * five years. Got it *. * DEV Contributor Awarded for contributing code or technical docs/guidelines to the Forem open source project Got it One * one year. Got it Top 7 Awarded for having at least one post featured in the weekly \"must-reads\" list at any point. 🙌 Got it More info about @dangolant GitHub Repositories EverythingisX A project that pulls in Headlines, grades their sentiment, and outputs two webpages. CSS Currently hacking on LinkMeLater.win 32 posts published 184 comments written 12 tags followed Only Debate The Non-Linear * Follow Feb 19 '23 Only Debate The Non-Linear #culture #organizations #teams #architecture Add Comment 8 min read Want to connect with Daniel Golant? * Daniel Golant. * Stop Checking Where You Are! * Follow Feb 19 '23 Stop Checking Where You Are! #environments #testing #deployment #codesmells Add Comment 3 min read Dev.to Review #15: * Daniel Golant Follow Feb 13 '19 Dev.to Review #15: T* #bestofdev #career #webdev 42 * Dev.to Review #14: * Daniel Golant Follow Feb 6 '19 Dev.to Review #14: T* #bestofdev #career #webdev 36 * Dev.to Review #13: * Daniel Golant Follow Jan 30 '19 Dev.to Review #13: T* #bestofdev #career #webdev 36 * Conversation with an Author - Ali Spittel * Follow Jan 3 '19 Conversation with an Author - Ali Spittel #discuss #bestofdev #career #writing 73 reactions 8 comments 1 min read Dev.to Review #12: * Daniel Golant Follow Dec 12 '18 Dev.to Review #12: T* #bestofdev #career #javascript 37 reactions 11 comments 2 min read Dev.to Review #11: * Daniel Golant Follow Dec 5 '18 Dev.to Review #11: T* #work #javascript #bestofdev 40 reactions 11 comments 3 min read Dev.to Review #10: * Daniel Golant Follow Nov 28 '18 Dev.to Review #10: T* #career #productivity #bestofdev 41 reactions 8 comments 3 min read What're You Thankful For? * Follow Nov 22 '18 What're You Thankful For? #discuss #thanksgiving #thankful #grateful 10 reactions 10 comments 1 min read Dev.to Review #9: * Daniel Golant Follow Nov 21 '18 Dev.to Review #9: T* #career #productivity #bestofdev 47 * Dev.to Review #8: * Daniel Golant Follow Nov 14 '18 Dev.to Review #8: Top 7 Of The Week, Discussed #career #javascript #vim #bestofdev 35 reactions 16 comments 2 min read Dev.to Review #7: * Daniel Golant Follow Nov 7 '18 Dev.to Review #7: Top 7 Of The Week, Discussed #serverless #javascript #git #bestofdev 18 reactions 6 comments 2 min read Dev.to Review #6: * Daniel Golant Follow Oct 31 '18 Dev.to Review #6: T* #webdev #bestofdev #meta 15 * Dev.to Review #5: * Daniel Golant Follow Oct 24 '18 Dev.to Review #5: T* #meta #bestofdev #popular 38 * Dev.to Review #4: * Daniel Golant Follow Oct 17 '18 Dev.to Review #4: T* #audio #bestofdev #popular 42 reactions 12 comments 1 min read Dev.to Review #3: * Daniel Golant Follow Oct 11 '18 Dev.to Review #3: T* #audio #bestofdev #popular 43 reactions 11 comments 1 min read Dynamic Auth Redirects With PassportJS * Follow Oct 11 '18 Dynamic Auth Redirects With PassportJS #node #passport #auth #javascript 65 reactions 10 comments 4 min read Dev.To Review #2: Top 7 Of The Week, Discussed 49:22 * Follow Oct 5 '18 Dev.To Review #2: T* #audio #top #popular 42 * Dev.To Review #1: Top 7 Of The Week, Discussed 36:53 * Follow Sep 30 '18 Dev.To Review #1: T* #audio #top #popular 32 reactions 6 comments 1 min read What JS Logging library / tool do you use? * Follow Sep 14 '18 What JS Logging library / tool do you use? #discuss #javascript #node #logging 58 reactions 44 comments 1 min read O11yCon 2018: Notes and Observations * Follow Aug 19 '18 O11yCon 2018: Notes and Observations #observability #o11y #conference 16 reactions 5 comments 11 min read O11ycon Talks: Dr. Peter Alvaro, \"Twilight Of The Experts\" * Follow Aug 19 '18 O11ycon Talks: Dr. Peter Alvaro, \"Twilight Of The Experts\" #o11ycon #fault #injection #alvaro 15 * Choosing Your Tools: A Values Driven Proposal 1:07:16 * Follow Jul 18 '18 Choosing Your Tools: A Values Driven Proposal #devlive #video #tools #philosophy 16 * Other People's Code and the Intentional Fallacy * Follow Apr 16 '18 Other People's Code and the Intentional Fallacy #refactor #rewrit #confidence #edit 97 reactions 16 comments 6 min read A Call For Testers: If You Hoard Tabs or Want To Manage Your Reading List Better, I Need your Help * Follow Dec 26 '17 A Call For Testers: If You Hoard Tabs or Want To Manage Your Reading List Better, I Need your Help #showdev 35 reactions 24 comments 3 min read Active NYC Tech Meetups * Follow Dec 24 '17 Active NYC Tech Meetups #discuss 11 * What NodeJS SQL Query Builder/ORM should I use for my Postgres DB, and why? * Follow Nov 28 '17 What NodeJS SQL Query Builder/ORM should I use for my Postgres DB, and why? #discuss 15 reactions 6 comments 1 min read Creating Serverless Functions with Python and AWS Lambda * Follow Nov 24 '17 Creating Serverless Functions with Python and AWS Lambda #python #serverless #sls 63 reactions 7 comments 9 min read Hapi-er Express Routing with Celebrate and Joi * Follow Nov 6 '17 Hapi-er Express Routing with Celebrate and Joi #express #validate #routing #node 20 * Things I Brushed Up On This Week: The HTTP Request Lifecycle * Follow Jul 25 '17 Things I Brushed Up On This Week: The HTTP Request Lifecycle #http #udp #tcp 120 reactions 25 comments 10 min read Hi, I'm * Daniel Golant Follow Jul 3 '17 Hi, I'm Daniel Golant #introductions 17 reactions 1 comment 1 *onsor Neon * ",
    "url": "https://dev.to/dangolant"
  },
  {
    "body": "* 19 Add reaction 14 Like 5 *s 0 Fire 38 Jump to Comments 33 * Daniel Golant Posted on Sep 14, 2018 14 5 What JS Logging library / tool do you use? #discuss #javascript #node #logging I am trying to decide on what logging module to try out for my next project. I'd love the dev community's input on: A) What logging lib you use B) Whether you structure your logs (and how) C) Where you store your logs or any other logging infra you have I have been using Winston, but I would like something that supports structured logging out of the box. The general ecosystem on NPM seems to be pretty split, and some options seem to be popular but un-maintained. Top comments (38) * Stijn de Witt Stijn de Witt Stijn de Witt Follow Joined Jan 8, 2019 • Jan 8 '* Before I proceed I must warn you I am the author of the logging library I am using, so there is a tiny possibility that I might be biased. Very tiny :) ulog - The microscopically small universal logger Basically ulog is debug meets loglevel meets the console. It works in Node JS and all major browsers (even old ones!) Mostly works exactly like the console does Supports levels that map to console methods (info, warn, error...) Supports configuration of log level via query string/localStorage (browser) or environment variables (Node) Supports a debug mode that selectively enables loggers Smart default log levels Why I built it It started out because using console directly is basically VERBOTEN. Because some browsers simply don't support it and will crash your code. Also you need to remove these statements afterwards etc. Making logging difficult and error prone. So it started as a tiny shim that just makes sure that your code never crashes or fails whether console is available or not. I then decided I wanted log level support so I added that. And then I discovered debug, which is GREAT, and I decided to copy those features I loved about that. Why I think it is one of the best loggers It is SMALL. Some loggers really go overboard but I need this stuff to be tiny. 1K is about all I want to spend on a logging lib It supports levels. Levels make logging useful! It has AWESOME debug features. Just set DEBUG=module1,module2 and these modules will start logging debug info By default, only Error and Warning message will show up in the console in browsers, meaning you can log as much as you want and only those people that are interested in it will actually see it. You can just leave your log statements in your production code. In Node JS we use INFO as the default level because there the 'users' are mostly developers / server admins etc who are more interested in our logging. Using different defaults on different platforms felt weird at first but it actually works out great for my projects. It supports a shorthand form that applies formatting. Example usage var ulog = require('ulog') var log = ulog('my-module') log.debug('Debug message'); log.info('Info message'); log.warn('Warning message'); log('Formatted message (at debug level)') log('warn', 'Formatted message (at warning level)') Yields (on browsers) Warning message 21:23:24 .03 my-module Formatted message (at warning level) If you want to try it Now is the perfect time as I am trying to perfect v2 currently. So if you want to try this, please install the beta and let me know: npm install --save ulog@beta Or you can use v1, but that version is more limited in features: npm install --save ulog 8 likes Like Reply Md Abu Taher Md Abu Taher Md Abu Taher Follow Full Stack Developer, focused on web automation, open source enthusiast and contributor. Passionate about programming, specializing in JavaScript. Location Dhaka, Bangladesh Joined Sep 29, 2017 • Sep 14 '18 • Edited on Sep 14 • * Other than console.log(), there have been morgan, winston, pino and at least hundreds of others. But, I am very surprised to see no one mentioned debug, it has 22,914,644 weekly downloads as of right this comment. I can filter out and specify different keywords I put beforehand, can use wildcards for multiple keywords/namespace Can have namespace colors Even works on web browser with colorized output can show ms diff between last msg ...lots of other cool features like streams and the list goes on and most importantly it is actively developed Though it is more of a debugging tool than a logging tool, we do have to log a lot while trying to debug, or in most case debugging is the only goal for logging. There are obvious gotchas, but who cares as long as I can get to see what I wanted to see. 5 likes Like Reply Stijn de Witt Stijn de Witt Stijn de Witt Follow Joined Jan 8, 2019 • Jan 8 '* Indeed, debug RULES! So much so I rebuilt my logging lib from scratch so it could incorporate debug's best features. The biggest gripe I have with it is that it is not full-featured. It basically is ONLY for debug logging. I like to log some info/warning messages as well some times. With debug you still need either a different lib or the console just for that. 3 likes Like Reply Doruk Kutlu Doruk Kutlu Doruk Kutlu Follow Location İstanbul Joined Jun 28, 2018 • *use debug module borks when minimized You need to configure the compression to let some optimizations through I also couldnt get it to work on an isomorphic app. Minimizing for node.js and tje web require 2 different approaches 1 like Like Reply Luca Luca Luca Follow Web Developer Location Italy Joined May 31, 2018 • *use For those who use simple console.log() and VS Code as editor, try out wrap-console-log extension. If you'd like to color your log try chalk. 5 likes Like Reply * Follow Location NYC Education Purdue University Work Software Engineer Joined Dec 20, 2016 • *use this is awesome :) 1 like Like Reply Harry Dennen Harry Dennen Harry Dennen Follow Just another f̶r̶o̶n̶t̶ ̶e̶n̶d̶ full stack dev. Education Bachelor of Arts in English Literature & Language Work Senior Developer at Derivco Joined Dec 4, 2017 • Sep 17 '* chalk is great. 1 like Like Reply Ben Halpern Ben Halpern Ben Halpern Follow A Canadian software developer who thinks he’s funny. Email ben@forem.com Location NY Education Mount Allison University Pronouns He/him Work Co-founder at Forem Joined Dec 27, 2015 • *use I also do this. But I’m curious about other answers in the thread. 7 likes Like Reply Stijn de Witt Stijn de Witt Stijn de Witt Follow Joined Jan 8, 2019 • Jan 8 '* The problem with using console directly is that there are browsers out there (probably only real old ones though) that simply crash your code right away because console is undefined when the developer tool is not opened. Also some interpreters, such as Nashorn which comes with Java, simply do not have a console defined. If you want to avert that risk and still only use the console for logging, you should write code similar to this: var log = (typeof console != 'undefined') && console // Testing with typeof is better than window.console // since it works everywhere, inclucing Node JS / Nashorn log && log.info('If the console is not there, this code will not crash') However, this means testing log before each call to log.info... You could maybe do this to prevent that test: var log = typeof console != 'undefined' ? console : {info:function(){}} log.info('This code calls a dummy function if console is not there') However, you would also have to make dummies for warn(), error() etc... In the end you would be building a shim... Which is exactly how ulog started. I understand your desire to keep logging simple and not use any external libs for it... But really the state of JS today is that 'simple' logging either is broken (crashes on some systems), is not actually 'simple' (see code examples above), or does use a library. I built ulog from the desire to make it as close to using no lib at all, while actually solving those problems. If you never use any logging lib, ulog was built with you in mind! Please try it and let me know. 4 likes Like Reply Corey Cleary Corey Cleary Corey Cleary Follow Tech Lead primarily working with JavaScript and Node.js Joined Jul 24, 2018 • *use I've written two posts on logging in JavaScript that might be helpful: Should you use a logging framework or console.log() in Node? ^ In this one I make the argument that often console.log() and console.error() are enough to get the job done, unless you have a use case for custom log levels, for writing to different outputs/locations (I recommended against doing this), or need the ability to toggle logs on and off. If I do have that use case I use Winston as it's pretty well supported. Why should your Node.js application not handle log routing? ^ this one hopefully helps answer your question about storing logs and logging infrastructure I always write to stdout/stderr (the console module writes here) as it's really easy for Docker or other containers to pick up the logs from there and route them wherever you need to (Splunk, a database, etc.). In a container/distributed/cloud environment it becomes much easier to manage the logs and adheres to the 12 Factor best practices for logging. In this way, the log routing is decoupled from the concerns of the application. All the application then cares about is writing to console, and infrastructure-wise, the container picks up the logs and takes care of them from there. 4 likes Like Reply dyllanwx dyllanwx dyllanwx Follow Joined Sep 13, 2018 • *use I'am using log4js in my project. But most of time I still using console.log() for debugging 6 likes Like Reply Jonathan Irvin Jonathan Irvin Jonathan Irvin Follow I'm a full-stack cloud-minded engineer who enjoys devops and clean code. Email offendingcommit@gmail.com Location San Antonio, TX Education BS Computer Science Work DevOps & Automation Engineer at AirStrip Joined Jul 20, 2018 • *use I like using this, too. Log levels are super helpful 1 like Like Reply Leonardo Teteo Leonardo Teteo Leonardo Teteo Follow Java Web Developer with a passion for Spring and cloud computing. Know a thing or two about AWS. Trying to learn NodeJS lately with the help of TypeScript. Location Brazil Joined Sep 2, 2018 • *use Since I'm just starting learning node I came to this post with some hesitation since I really didn't know if console.log() was an acceptable answer. Thanks for the clarification. hahaha 5 likes Like Reply Avalander Avalander Avalander Follow \"Biography is irrelevant\" - Seven of nine (probably) if she was asked that question. Joined Mar 12, 2018 • *use console.log and node app.js > app.log work fine most of the time. Sometimes, if I need to filter logs and stuff, I write them as json objects instead of plain files and create a very simple wrapper over console.log, but I've never had the need to do anything very elaborated. 2 likes Like Reply Adrien Poly Adrien Poly Adrien Poly Follow CTO @Plume_app, doing mostly Rails and Stimulus stuff. Creator of Stimulus-Use. Location Bordeaux France Work Freelance Joined Sep 6, 2018 • *use I love console.table() 3 likes Like Reply Stijn de Witt Stijn de Witt Stijn de Witt Follow Joined Jan 8, 2019 • Jan 8 '* It is great but not very well supported I think? Does this work in Edge? Firefox? *ion (38 comments) * Sentry *r* Refactoring code and Git history! Abdullah Al Mamun Fahim - Oct 9 How to Set Up Your JavaScript Development Environment Ridoy Hasan - Oct 22 React : Keeping Components Pure Sonay Kara - Oct 21 Offload - A unified javascript SDK that enables in-browser AI Miguel Ángel Cabrera Miñagorri - Oct 8 Daniel Golant Follow Location NYC Education Purdue University Work Software Engineer Joined Dec 20, 2016 More from Daniel Golant Dev.to Review #12: Top 7 Of The Week, Discussed #bestofdev #career #discuss #javascript Dev.to Review #11: Top 7 Of The Week, Discussed #work #javascript #discuss #bestofdev Dev.to Review #8: Top 7 Of The Week, Discussed #career #javascript #vim #bestofdev Heroku *referenc* 👋 ** * ",
    "url": "https://dev.to/dangolant/what-js-logging-library--tool-do-you-use-5e8"
  },
  {
    "body": "* Follow Report Abuse danielAsaboro A dedicated Backend Junior developer. proficient in Node.js. Strong in RESTful API development, and database systems. And now, I'm writing about using Dart beyond building beautiful UI with Flutter. Joined on May 15, 2023 asaborodaniel@gmail.com Education University of Lagos Pronouns King Work Innovation and Technological Management Office More info about @danielasaboro Badges One * one year. Got it * *. ** *le week. Got it Skills/Languages Writing, Javascript, NodeJs, C++, CSS, HTML, MongoDb, ExpressJs Currently learning Flutter, Dart, TypeScript, and Go Currently hacking on Attendance-taking System, Fashion-Focused E-commerce 17 posts published 27 comments written 16 tags followed StateNotifierProvider: How to link your stateNotifier to your UI Widgets * Nov 10 '23 StateNotifierProvider: How to link your stateNotifier to your UI Widgets #flutter #dart #riverpod #statemanagement 1 c*h danielAsaboro? * danielAsaboro. * StateNotifier, ChangeNotifier — Why, When, and How to use them. * Nov 10 '23 StateNotifier, ChangeNotifier — Why, When, and How to use them. #riverpod #dart #mobile #flutter 14 reactions 7 comments 6 min read So many providers in RiverPod 😱😱 Which one should I use? * Oct 21 '23 So many providers in RiverPod 😱😱 Which one should I use? #dart #fluttter #riverpod #statemanagement 7 * Explaining RiverPod like I'm 5 — From someone who finally got it! * Oct 17 '23 Explaining RiverPod like I'm 5 — From someone who finally got it! #dart #flutter #statemanagement #riverpod 9 * Riverpod easily explained for those who don't get it * Oct 16 '23 Riverpod easily explained for those who don't get it #flutter #riverpod #dart #statemanagement 25 * Flutter * Aug 13 '23 Flutter Add Comment 1 min read From Novice to Ninja: How I moved from getting scared of Errors to throwing and handling them gracefully * Jul 30 '23 From Novice to Ninja: How I moved from getting scared of Errors to throwing and handling them gracefully #javascript #webdev #beginners #* 4 min read I took a BIG Leap, but Backwards. Here's why and how it's panning out * Jul 23 '23 I took a BIG Leap, but Backwards. Here's why and how it's panning out #beginners #learning #productivity #tips 16 * Id or UUID: Which one should you use as the primary key in your DB? * Jul 14 '23 Id or UUID: Which one should you use as the primary key in your DB? #javascript #database #security #webdev * Security: \"Over 83% of Developers Commit this Critical Mistake when storing User's Password.\" Are You One of Them?\" * Jul 9 '23 Security: \"Over 83% of Developers Commit this Critical Mistake when storing User's Password.\" Are You One of Them?\" #javascript #node #security #mongodb 20 reactions 18 comments 4 min read The 4 JS Array Methods every Backend Developer should know (Real-Life examples included) * Jul 3 '23 The 4 JS Array Methods every Backend Developer should know (Real-Life examples included) #* #webdev 13 * Do you make these small mistakes with HTTP status code? * Jun 9 '23 Do you make these small mistakes with HTTP status code? #api #backend #javascript #security 2 *d Git Fork and Git Clone: The difference and why it's important! * Jun 7 '23 Git Fork and Git Clone: The difference and why it's important! #github #beginners #git #opensource 2 *d Beyond JSON: A Beginner's Guide to Data Serialization * Jun 6 '23 Beyond JSON: A Beginner's Guide to Data Serialization #webdev #* 4 * Encryption, Hashing, Salting: What does it mean for your Users Password's safety? * Jun 1 '23 Encryption, Hashing, Salting: What does it mean for your Users Password's safety? #node #cybersecurity #security #backend 2 *d How to upload, Handle, and Store Files in NodeJs: The Step-by-Step HandBook * May 31 '23 How to upload, Handle, and Store Files in NodeJs: The Step-by-Step HandBook #node #mongodb #express #javascript 16 * Tricky JS: What every Software Developer must know about Functions * May 31 '23 Tricky JS: What every Software Developer must know about Functions #javascript #webdev #node #beginners 3 reactions Add Comment 6 *onsor Neon * ",
    "url": "https://dev.to/danielasaboro"
  },
  {
    "body": "* Follow Report Abuse Daniel Santos Hi! I'm Daniel Santos. I'm particularly interested in Rust and backend development. I'm always looking to learn new things and collaborate on interesting projects Brazil Joined on Dec 17, 2021 https://ddaniel.me More info about @ddanielsantos Badges * T*. Got it 1 We*t * Currently learning Rust, Typescript 5 posts published 10 comments written 6 tags followed Pinned I started astro-deck Daniel Santos Daniel Santos Daniel Santos Follow Jul 18 '23 I started astro-deck #sideprojects #astro Add Comment 2 min read The astro-deck's CLI Daniel Santos Daniel Santos Daniel Santos Follow Aug 10 '23 The astro-deck's CLI #astro #cli #opensource #typescript 2 reactions Add C*h Daniel Santos? * Daniel Santos. * What is a Webhook and how it works Daniel Santos Daniel Santos Daniel Santos Follow Jun 4 '23 What is a Webhook and how it works #http 3 *d Creating Rest APIs with Rust Daniel Santos Daniel Santos Daniel Santos Follow Dec 12 '22 Creating Rest APIs with Rust #rust #openapi #api #rest 26 * Porquê e como utilizar Dataloaders Daniel Santos Daniel Santos Daniel Santos Follow Oct 19 '22 Porquê e como utilizar Dataloaders #api #type* 4 *onsor Neon * ",
    "url": "https://dev.to/ddanielsantos"
  },
  {
    "body": "* 82 Add reaction 69 Like 13 *s 0 Fire 19 Jump to Comments 84 * Maxime Posted on Aug 4, 2018 • Originally published at Medium on Aug 4, 2018 69 13 Javascript Environment Variables Loading environment variables in JS apps #react #node #security #configuration How to store and consume environment variables for local development APIs and third-party integrations require developers to use configuration data called environment or config variables. These variables are usually stored in password-protected places like CI tools or deployment pipelines, but how can we use them when we’re developing applications locally? TL;DR: Don’t store environment variables in source control Use dotenv to read data from your .env file create-react-app forces a namespace on environment variables This short tutorial will explain one way of loading environment variables into your code when developing locally. The main benefit is that secrets such as API keys are not committed to source control to keep your application safer. Requirements: A Javascript application A package manager (yarn and npm are great) Node 7+ Set up the variables Create a file called “.env” in the root of your repository. This file is called a “dot file” and is different from regular files in that it is usually hidden in file browsers. Most IDEs will allow users to create files without a name, but if that’s not the case, head over to your terminal and cd into your application’s root folder. touch .env Next, set up your variables with the format key=value, delimited by line breaks: API_KEY=abcde API_URL=https://my-api.com/api Finally, make sure the .env file is not committed to your repository. This can be achieved by opening (or creating) a .gitignore file and adding this line: .env # This contains secrets, don't store in source control Consume the variables Head to your terminal to install dotenv with your preferred package manager: # Using npm: npm i dotenv # Using yarn: yarn add dotenv You’re now ready to read from your .env file. Add this line of code as early as possible in your application. With React apps, that’s usually index.js or App.js, but it’s entirely up to your setup: require('dotenv').config(); And that’s it! Your application should have access to environment variables via the process.env object. You can double-check by calling: console.log(process.env); If all is well, you should see something like: { NODE_ENV: \"development\", API_KEY: \"abcde\", API_URL: \"https://my-api.com/api\" } 🎉 You’re now ready to use environment variables in your application! Now, for those of us that use create-react-app, there’s a catch, and I wish it was documented a little better. Using create-react-app Facebook’s create-react-app works a little differently. If you followed the steps above and haven’t ejected the application, all you should see is the NODE_ENV variable. That’s because create-react-app only allows the application to read variables with the REACT_APP_ prefix. So in order to make our variables work, we’ll need to update our .env file like so: REACT_APP_API_KEY=abcde REACT_APP_API_URL=https://my-api.com/api Once again, verify your setup by logging process.env to the console: { NODE_ENV: \"development\", REACT_APP_API_KEY: \"abcde\", REACT_APP_API_URL: \"https://my-api.com/api\" } And you’re done 😎 Tips Variables in .env files don’t require quotation marks unless there are spaces in the value. NO_QUOTES=thisisokay QUOTES=\"this contains spaces\" It’s good practice to create a .env.sample file to keep track of the variables the app should expect. Here’s what my own sample file looks like in my current project. Note that it explains where someone might be able to find those keys and URLs. CONTENTFUL_SPACE_TOKEN=\"see Contentful dashboard\" CONTENTFUL_API_KEY=\"see Contentful dashboard\" S3_BUCKET_URL=\"check AWS\" SHOW_DEBUG_SIDEBAR=\"if true, show debug sidebar\" Further reading: Reading configuration in the environment in the 12-Factor App methodology Thank you for reading! Do you prefer another way of loading environment variables locally? I’d love to hear about it in the comments below! Red Hat Developer Promoted * Learn Kubernetes with Sandbox Create an application using plain Kubernetes instead of OpenShift in the Developer Sandbox. Get started Top comments (19) * Muhammad Osama Arshad Muhammad Osama Arshad Muhammad Osama Arshad Follow Software Engineer at Arbisoft. Fluent in JavaScript and Python. Education Bachelors in CS Work Software Engineer at Arbisoft Joined Sep 16, 2017 • *buse Hi there, nice article. Just have a quick question. Does the dotenv script load the entire .env file into the client side? If that's the case then wouldn't that expose sensitive data such as DB password etc? 6 likes Like Reply Fabio Rosado Fabio Rosado Fabio Rosado Follow I'm The Flying Dev - flight attendant by day and self-taught developer by night. Founder and host of the Landing in Tech podcast. Location Redhill, UK Work Flight Attendant Joined Nov 28, 2017 • Aug 5 '18 • Edited on Aug 5 • * This might be silly but I was wondering exactly the same thing. If you can do console.log(process.env); I wonder if the values are automatically replaced by environment variables perhaps? --EDIT-- I went ahead and read the link to the 12-factor app and this is exactly what happens. The values are replaced by environment variables with each deploy. The twelve-factor app stores config in environment variables (often shortened to env vars or env). Env vars are easy to change between deploys without changing any code; unlike config files, there is little chance of them being checked into the code repo accidentally; and unlike custom config files, or other config mechanisms such as Java System Properties, they are a language- and OS-agnostic standard. - The Twelve-factor App 4 likes Like Reply Muhammad Osama Arshad Muhammad Osama Arshad Muhammad Osama Arshad Follow Software Engineer at Arbisoft. Fluent in JavaScript and Python. Education Bachelors in CS Work Software Engineer at Arbisoft Joined Sep 16, 2017 • *buse Very cool. Thanks for taking the time to answer. 1 like Like Reply Maxime Maxime Maxime Follow Gradient developer and JAMstack advocate 🥑 they/them Location Seattle, WA Education Bachelor of arts 🤦‍♂️ Work Principal Software Developer at CodeSee Joined Aug 3, 2018 • *buse Hi Muhammad! The entire .env file is indeed loaded, so all the secrets (including database passwords, in your case) will be exposed on the client, if that's where your app is running. This would obviously be a huge problem in a production environment, but my use case was centered around local development. Security depends heavily on your deployment pipeline and the kind of system you're building, and I don't want to go too deep on that topic in a comment, but I'll leave you with two things: If you're developing a client-side app, it should be making calls to an API, not a database. This way, even if the API key is leaked, you can control security by making the API read-only or having a strict CORS policy. You could use the code below to make sure your client-side app doesn't expose secrets: if (process.env.NODE_ENV !== 'production') { require('dotenv').config(); } Hope this answers your question! 3 likes Like Reply Muhammad Osama Arshad Muhammad Osama Arshad Muhammad Osama Arshad Follow Software Engineer at Arbisoft. Fluent in JavaScript and Python. Education Bachelors in CS Work Software Engineer at Arbisoft Joined Sep 16, 2017 • *buse I see. I was thinking of using this in production in my current client's app. Thanks for pointing this out. Dodged a bullet there. 4 likes Like Reply Ran Cohen Ran Cohen Ran Cohen Follow https://www.linkedin.com/in/rannn505/ Email rannn505@outlook.com Work CTO & Co-Founder at Configu Joined Jan 12, 2022 • Jul 4 '23 * Everyone, Firstly, I'd like to commend @deammer for this insightful article. Reading through the comments, I noticed some concerns regarding handling of secrets and configuration deployments. As your projects scale, complexities with managing more code, services, and environment variables are bound to increase. That's where a third-party tool can come in handy. I recommend considering a tool like Configu for managing your app settings. It's an open-source, language-agnostic solution that streamlines configuration management. By using Configu, you can alleviate the burden of dealing with raw-text based files and orchestrating configuration data across various formats during build, deployment, or runtime. For more insights, feel free to check out my article that dives deeper into this topic: Configu - Unleashing the Power of Configuration as Code Happy coding! 2 likes Like Reply Mihail Malo Mihail Malo Mihail Malo Follow Joined Jul 11, 2018 • Aug 7 '* So, the most interesting part is missing: How do I actually shove some .env files into the deployment environment? Are we talking about functions? Container images? VM images? Persistent VMs? 2 likes Like Reply Maxime Maxime Maxime Follow Gradient developer and JAMstack advocate 🥑 they/them Location Seattle, WA Education Bachelor of arts 🤦‍♂️ Work Principal Software Developer at CodeSee Joined Aug 3, 2018 • Aug 7 '18 * Mihail! This article is focused on local development, in part because there are countless ways to execute deployments. For instance, tools like Travis, Heroku, and Netlify provide a UI that lets you set up environment variables. If you're using a VM-like environment like EC2 or Digital Ocean, you can actually upload a .env file directly. If you're using a container system like Docker, you can use Compose or config arguments to set environment vars. Hope this helps! 3 likes Like Reply Mihail Malo Mihail Malo Mihail Malo Follow Joined Jul 11, 2018 • Aug 7 '* So, using the dotenv module is essentially the local version of those managed environments' ENV configs? Then, perhaps, the best way to use it is node -r dotenv/config your_script.js, and only include it in devDependencies so it's not present at all in production? ...but in that case it's not very different from just putting a cross-env at the start of your development script. I guess I still don't entirely understand what unique niche dotenv is the best fit for. 1 like Like Thread Roger K. Roger K. Roger K. Follow I'm a Ruby on Rails Developer with product management and startup experience. Location Calgary, Canada Education University of the People Work Software Developer, Leader Joined Dec 9, 2017 • Aug 7 '18 * Mihail, have you written anything about how you go about protecting while using your secret keys? I'm interested to learn more and if you have then please post a link. These kinds of nuts and bolts articles are in such dire need from my point of view. 1 like Like Thread Mihail Malo Mihail Malo Mihail Malo Follow Joined Jul 11, 2018 • Aug 7 '* Well, so far as protecting secrets, at the moment I believe that these are indeed best set as environmental variables of the deployment environment. I know some people use git hooks that test that they aren't committing any secrets, but I believe these are brittle and only give a false sense of security. A rule that seems to work for me is - if you want to make sure something is never committed, don't put it in the project directory. Don't test with it. But then there's still the app's responsibility of not sending the secrets to any users. Corollary: Don't rely on this as a way to protect the secrets from malicious developers or even accidental disclosure. If they can get code into production, they can compromise any data available in the production environment. Even if all deployment goes through CI from a protected branch, all you get is blame a long time later. Hence, all secrets must have the minimum permissions possible. For example, every service should have its own database login/connection string. Not for permissions alone, but so that it can be easily replaced when compromised. Another example (although not usually provided through ENV since they are reissued at runtime) could be asymmetric JWT algorithms, where most services can only verify the token but not issue it. 3 likes Like Thread Roger K. Roger K. Roger K. Follow I'm a Ruby on Rails Developer with product management and startup experience. Location Calgary, Canada Education University of the People Work Software Developer, Leader Joined Dec 9, 2017 • Aug 7 '18 Copy *! I can't read input like this often enough. It really helps me. I wish experienced devs talked more about it, since it's so key to delivering a basic professional experience 2 likes Like Reply Kyle Parisi Kyle Parisi Kyle Parisi Follow Working on https://buildapart.io, https://fluxion.app in my spare time. Email kyle@buildapart.io Location Newtown, PA Education BSME, self taught programmer Work Senior Developer at Say Joined Jun 20, 2018 • *buse Additional tip dotenv.config({ path: \".env\" }); // Set any missing with defaults dotenv.config({ path: \".env.example\" }); 3 likes Like Reply Tryston Perry Tryston Perry Tryston Perry Follow Senior Web Developer Email trystonperry@proton.me Location San Diego, California, United States Work Self-employed / Freelance Joined Aug 5, 2018 • *buse Thank you! I've been trying to figure this out for a while and couldn't find a resource on how to do it. 3 likes Like Reply Maxime Maxime Maxime Follow Gradient developer and JAMstack advocate 🥑 they/them Location Seattle, WA Education Bachelor of arts 🤦‍♂️ Work Principal Software Developer at CodeSee Joined Aug 3, 2018 • *buse Glad you found this useful! 2 likes Like Reply Robert Moskal Robert Moskal Robert Moskal Follow Joined Nov 15, 2017 • Aug 6 '* I don't think there's any harm in keeping development secrets under version control in many, many cases. Especially when you are using something like compose. It speeds up the onboarding of new developers. Production secrets are another matter. Like Reply Hans-Helge Buerger Hans-Helge Buerger Hans-Helge Buerger Follow Education M.Sc. Computer Science Joined Jul 23, 2018 • Aug 5 '18 * tutorial. Thx for sharing 👍 2 likes Like Reply Sandip Das Sandip Das Sandip Das Follow AWS Container Hero | Sr Cloud Solutions Architect | DevOps Engineer: App + Infra | Full Stack JavaScript Developer Email sandip.sandip.das5@gmail.com Location Kolkata Education MCA Work Sr. Cloud Solutions Architect & DevOps Engineer at Gryphon Online Safety Inc. Joined Feb 20, 2018 • *buse good read before going to sleep :) 2 likes Like Reply Ismail PE Ismail PE Ismail PE Follow Work Developer Joined Jun 11, 2020 • Jun 1*use Further read: dev.to/ismailpe/handling-environme... *ion (19 comments) * Sentry Promoted * Youtube Tutorial Series 📺 * Read next Installing Node.js on Windows: A Complete Tutorial Arham Rumi - Oct 20 Node.js v23.0.0 Released: End of Support for 32-bit Windows Probir Sarkar - Oct 20 Build Your First React App: Mood Tracker pflashgary - Oct 19 UI Verse Gav - Oct 18 Maxime Follow Gradient developer and JAMstack advocate 🥑 they/them Location Seattle, WA Education Bachelor of arts 🤦‍♂️ Work Principal Software Developer at CodeSee Joined Aug 3, 2018 Trending on DEV Community * Understanding JavaScript Closures: A Comprehensive Guide #javascript #closure #programming #node Open-Source will make you richhhh! 🤑💸 #opensource #* Heroku *refer* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/deammer/loading-environment-variables-in-js-apps-1p7p"
  },
  {
    "body": "* Follow Report Abuse Abel Mathew 404 bio not found Joined on Apr 13, 2020 Four * four years. Got it * Three * three *2 *22 * Two * two *1 *21 * *20 *20 * GitHub Actions Hackathon Participant Awarded for participating in the GitHub Actions x DEV Hackathon 2020. Got it More info about @designrknight 1 post published 3 comments written 1 tag followed Maintain Javascript Project Efficiently with GitHub Actions Abel Mathew Abel Mathew Abel Mathew Follow Sep 17 '20 Maintain Javascript Project Efficiently with GitHub Actions #actionshackathon #javascript #github 5 reactions Ad*h Abel Mathew? * Abel Mathew. * * * ",
    "url": "https://dev.to/designrknight"
  },
  {
    "body": "* 14 Add reaction 10 Like 1 Unicorn 1 Exploding Head 1 Raised Hands 1 Fire 15 Jump to Comments 7 * Desone Posted on Dec 13, 2023 • Updated on Mar 12 10 1 1 1 1 Why Typescript Vs JavaScript discussion is still hot? #javascript #react #discuss #node At the end some like this or that but: Is Typescript like an extremist religion or a theocracy? Is there Typescript discrimination ? If you are a JavaScript developer and if you have recently been to a job interview, you might have noticed Typescript is quite bold in the questions specially for large organisations. In a majority of interviews you will be either asked explicitly about your consent of Typescript or you will be asked opinionated questions about advantages of Typescript over JavaScript.( like \"What are top 3 dvantages of Typescript over JavaScript?\" or \"Why do you prefer Typescript over JavaScript?\" !!). Unless you are a Typescript lover, there are politically right and wrong answers to those questions in these interviews. While Typescript like anything else might have its own goods and bads, pros and cons, every experienced job-seeking developer knows that interviewers try to detect if you would have any resistance to Typescript and reject you in that case. Even if you explicitly say \"you will follow the workplace coding conventions and guidelines\" they will try to read your mind or detect if you are not a Typescript fan and that will be a negative point if not eventually wipe out your opportunity. Why is that ? And what does this mean? Is there Typescript extremism ? If you are not a Typescript fan at a technical discussion space, (chatroom, forum or community) it is quite controversial to question Typescript. While I know a lot of programmers who are unhappy with Typescript, they normally do not dare questioning it because they know the consequences might include personal or a top down organisational attack. In fact more than 60–70% of answers to a question about Typescript, will target the person who asked the question rather than being about the topic or the technical discussion posed inside the question or objection.(for example you are dumb or fool, you do not know about typescript, who let this guy in?, This topic is not allowed in this room, looks like you have never done professional programming, you are a low level …. etc etc).There are lots and lots of examples for that but for a handy one look at this article \"Typescript doesn't make sense\". Again , Why is that and what does it mean? Analogy of Typescript with a Theocratic extremism ( or Religious Ideas) This is all because Typescript is quite a controversial subject even after dominating a lot of software development workplaces a lot of programmers not yet convinced to use it or do not feel it is the right thing to do for development. At the other hand some developers might like it and with the help of Typescript loving developers, there is a push, a dictatorship or lets say a woke-ness movement about Typescript which is making developers scared inhibiting their opinions. I prefer not to say which religion I am comparing Typescript to because I cannot confront both religion fanatics and Typescript fanatics here. However I am assuming majority of people would know which religion is which uses violence and terror. I cut it here and I leave it to individuals. Divisive Once they happen, both Mismal and Typescript divide people like hell! You are either with them or against them. Despite \"Mismal\" itself saying believers of other religions can live with \"Muismils\" in a Mismalmic society, you notice atheists as well as mild Muismils running away from Mismalmic countries. Despite Typescript saying it can co-exists with JavaScript and .js files can co-exist with .ts files! in a Typescript repo, you will see fanatics enforcing their own flavour and subset of Typescript and making the rest of it forbidden. That's why you will see even mild Typescript lovers facing problems with fanatic typescript lovers and getting removed form teams. You'll never find this kind of situation in Budhism, or in Hinduism, or with C/C++ or bash scripts or even JavaScript. Heaps of people used them or left them or never used them and no one ever enforced to do something. There is no love and hate in a good tool,Just you might find it useful and use it to the extent it helps you, or you find it not fit for your purpose and don't use it! They are not as vital to the world as they claim: Theocratic opinions normally claim saving the world and saving the humanity from a proposed danger while world was quite fine if not better without them. Even if some of them result in some useful changes, it comes as side effects or it is minimal compared to the pain they cause and the resources they consume. Typescript happened in a world of perfect JavaScript development. Applications were there and even Angular and React were there with almost the same capabilities as today(of course older versions) but there was no impossible in those days that Typescript made it possible and no problem in JavaScript solved by Typescript. The fact that a JavaScript program runs without types persists to remind us of Typescript stepped in as an arbitrary unnecessary extension while everything was already working fine. Rise of the prophet: It is always controversial. Some of them are told to be best living people of their era while followers admire and adore them, non-believers and followers of other prophets always question them. Typescript introduced by Microsoft! along with VSCode as a gift to the open-source community! which we all know was obviously Microsoft's rival for quite a time with a long history of problems. I do not have much to say about Microsoft as it is quite well known and its famous founder and former CEO Bill Gates is also very familiar to everyone caring about programming and computers. So was Bill Gates one of the best people of his era? up to you. How much did Microsoft care about open-source community and how much they love diversity of tools and programming again up to your own research. Followers think they are better people than non-followers (Idea of moral programming) It is told that Religious people are better than atheists or even better than believers of other religions! (Yes I know!) Before inventions of Typescript programmers were bunch of misled people. They were not using types which are a vital part of (even in untyped scripting language!) programming and it was causing a huge misfortune! and loss! (but they could not understand and some still don't!), but everything was fine and even more fun. These morality claim and ethical arrogance is a common thing between religion and Typescript extremists. Once they are summoned in a workplace or in a society, They start claiming all goodness and claiming other people are evil or irresponsible people doing sins or using untyped variables! and hence they should convert to Typescript or be removed physically. Morality source/target is idealistic and above practice and humanity Ask a Muismil: You kill kidz and women, you sell people to slavery and you give them a miserable life and you never contributed to human progress. How do you claim morality with all bad things you do to people? Ask a Typescript fanatic: You spent double time to write a code that does the same thing, less readable code and less understandable, you remove test or make it very difficult and your code is more prone to break in the same situation that a TDD code. You compile and assume type-safety! on an untyped scripting language and you pretend to do OOP on a total different paradigm and other than JavaScript not being similar to something else! you never solved a problem( like related to productivity or ...) How do you claim to have a better structured code by inserting so many anti-patterns or be more productive with doubled size of non-understandable code? How is this even possible ? Listen to the answers and you'll find out, The good code they talk about is not for productivity or for features or user experience. They think of some morality which is above humanity! and some goodness in coding beyond productivity and user/developer experience. You might be alright earning good money and helping people in your life but Bahlah who is sitting up there in the sky is unhappy! and you are committing sins! Your program might be working fine and your code is tidy and readable clean and is fully tested and helps users easy to change, but TS! Goddess is not satisfied and it is not Type-Safe! Once their religion started, it claimed happiness for human kind! Now everything is floating in the sky! Forcibly assert it as Just practised by followers is not enough If you do not follow that religion, other people seeing you committing sins is a sin itself! Here we go! you are encouraging them to commit sins! Like you do non-typed JavaScript makes Typescript not being so fruitful for the ones wanting to use it! They do all the typing but your code has any in it! So in the same repo, you not doing typescript is not OK for others wanting to do typescript even If you as a JavaScripter are OK with them doing Typescript! (What a beautiful extension it is!). That's why you should either do what they want or you should be removed from the team. They are the good people, you are the bad. You cannot leave in a country that believers live ( having your own religion or be a non-believer). You will soon be detected as a threat, A source of bad habits, An encourager of sins. You are a bad role model for kids, you are trapping people into your satanic thoughts and your are source of people loosing their faith etc… If you don't want it you either don't know or you are evil If you tell believers of those religions that you just don't want to worship their God and don't want to go to their paradise or you are not afraid of the threats which they claim exist after death!. What happens?! They come up with one of these 2 reactions: 1- You have a good heart but you are ignorant. You do not know how passionate their God is and how joyful is a believers life both before and after death! because you would love their way of living if you knew. Like If you don't want to use Typescript, you possibly missing the point and need learning more about programming for that and you don't know how amazing it would be to put an \"any\" in front of everything and how amazing it feels when your JavaScript code doesn't work for just Typescript being unhappy with it and make your code 3 times longer to do the same thing rocks!! Just it is soooo satisfying suit and lovely. 2- You are evil! (Normally this comes after you reject first offer!!)You must be killed or tortured to death or be jailed for the rest of your life. You are a savage ridiculing Holly God! You are a dumb irresponsible programmer not caring for the boss or company and one who does not know the proper programming and You must be punished and thrown out of your job! because you are against structured , type safe and well documented code (That works without all those and you can see it is still well structured by the way!!) which are apparently like breath and bread for the life of organisation and you are a disgrace, hence your employment must be terminated! If good that's why religion said it, But when it breaks its your fault! When you see something nice in your code repo, it is because you used Typescript! They told you to use it exactly for this and similar reasons. and you really were lucky that you converted to this religion and here you just found out yourself ( Actually your opinion and self determination by itself counts for this occasion). But If there is a situation that Typescript doesn't work! like many many many cases, you know what?! You were not responsible enough to use Typescript correctly because your lazy ass wrote just 100 (pages of useless types) while 120 was needed! Therefore Shut Up and stop criticising a religion which is coming from God. God knows everything and no way he said something wrong! No one ever saw it delivering Perks of following those religions in this world(Development time life before death) are either not perks or are very minimal compared to the effort and changes requested and all the Perks promised to be delivered after death (runtime)are never witnessed! Like Typescript perks in development time are either not perks or can always be obtained with much less expense and effort elsewhere and the type-safety it promises is never seen at runtime. Their lovers think it is a spell checker or if you are passing an instance of a Database-Server instead of an integer to a function! there will be an alarm! (provided that you have annotated them), well, suit , but simply code wouldn't work or tests would fail if you had bothered to write one! Some developers become fanatics and extremists Try to criticise and question logically in a Typescript environment ( If you feel safe about your job security, I won't pay you if you get fired) and Try to criticise or logically analyse that religion, at presence of its fanatic believers(If you feel safe about your life, I won't take care of your kidz if you get killed). You will know that the reaction you face will be exactly the same. You will be personally attacked in both cases by lovers of Typescript/Religion and they will normally will not think or answer what you asked about the Religion/!. The response in both cases will be \"you are a crazy person\" or \"you don't know anything about many things!\" or \"you are somehow evil\" or having a wild non-civilised behaviour or \"Discussing this topic is harmful to community\" or things like that. Some fell in misery without limitations because they can't self-contain freedom! Yep some do! like some people tell less lies when they are afraid of hell or … So, we need to threaten them and they become better programmers! Common! It is even embarrassing to elaborate that. If you are not a JavaScript programmer, then use C/C++/Python/Pascal/ … Heaps of other languages there for you. Or just trust developers! or Go learn how to use JavaScript as it it or … . Educate people to admire humanity instead of threatening them with an imaginary Hell and giving them false promises for after death! JavaScript does not have types! and runtime type safety is not delivered by Typescript they are all fairy tales. Use tests to know where or when your code works and use science and logic to have a good life. Heaven does not send you gold or a pretty girlfriend. Education and effort and a good plan would do! Advertisers are easy on you but once you convert you are trapped in In some religions there is a death penalty for someone converting back ( getting out or putting off the religion) while when the advertisers come to you they always say it won't be a big deal, it won't have any major impact on your day to day life, you are well accepted as you are… things like this, but when you convert the demands start to raise and raise and there will be all inclusive non-stop pressure to change everything and if you want to stop it will become significant as a life or death game. For example, JavaScript is well accepted as Typescript!! you know why? because Typescript is an extension of JavaScript! You can get in by just saying \"I Shadow an blah blaha blah blah\" or changing file name from \"file.js\" into \"file.ts\" as simple as that! But once you get in, you need to type everything, then there are good practices that you will be forced to follow demanded by more senior follower and priests like use Generics, use interfaces, create complex types, arrays of types, use Typed libraries, avoid using any, avoid this and that and … and If you wanna stop guess what?!! you will have to re-write the whole repo because you'll then realise Typescript is not JavaScript!(not a reversible equation) and also there is death penalty for a person converting back out of that religion! Simply whatever told about JavaScript accepted as Typescript was a very low-likely edge situation that is unlikely to happen if not a 100% lie. To show popularity Real lovers and fearful followers accepted Once Typescript penetrated into environment, you will see a lot of developers not looking for trouble and therefore they never pose their opinion of liking or disliking it. There are also people that genuinely like it but for fanatics that does not matter. You should not open your mouth and start saying what you think and they are OK like Kim in Korea, Ayatollah in Iran and Putin in Russia. You are assumed to be a lover since no evidence to say you are not because If there is you will be physically removed from the environment. People might love it not just because of personal matters When it comes to personal ideas , I think everyone is entitled to his opinions and ideas whether wrong or right. it is up to people to keep or change them and I understand and respect that the same way I don't like Typescript, some developers might like it. Yep?! fine! But some people, especially ones who push for religion/Typescript do not take side because they like to practice it or code using it! You would 100% agree if you had been to couple of workplaces with JavaScript/Typescript code with a push from higher levels of organisations and resistance from programmers. Religions help dictators to control the society, even in democracies candidates pretend to be believers to gain votes and hand-off IT overhead people all like it because of almost the same reasons. Once you find a subject like Typescript, there is money in going the same direction forced from top of the organisation or society beliefs. People show their adherence to Religion or Typescript they get promoted socially or by organisation position and salary, specially if they can show not everyone else is willing to follow the same path way. This makes a race for showing sincere for values like type safety! What else Religious/Typescript people do have in common? Saying hypothetical things like There are 4 pillars to the world which are our 4 holly brothers which are alive for 4000 years and there are 7 Skies and God leaves in the second from the top. Or writing heaps of extra code ( which is smoke in the air in at run time!) to do the same thing makes you more productive! They go to interviews and reject people who are not followers. They attack you if you say anything against their values, they don't think about the value or it being right/wrong because they simply do not follow/un-follow it for right/wrong but for personal benefits. Typescript extremists are analogous to extremist terrorists believing in that Religion and can do analogous things ( for example counter-parting murdering people in real life is reporting them for termination of employment because of not following strong typing) Corruption, Oppression and Terror, ruined hope and entangled useless slave life We are getting close to ends of the game! You will know that it was all a lie to ruin your life and code repo and make it machine readable to give some insights into your code and some hints to buddies like SonarQube or other AI linters, taking away your freedom, creativity and joy of life and making you follower/slave of some predefined patterns or corrupt governments and criminal groups. There will be no joy in development or beauty in your life as every joyful thing is ruled out or is forbidden and all your moves are detected and assessed by big linting giants. Your once friend colleagues which are religious fanatics now will report you to execution (or termination of employment ) if you do not follow the instructions. Your firm is as non-productive as a desert and all your managers can do is to buy a solution from Big Criminal Organisations! From a believer's diary: First I was developing using JavaScript and I was introduced to TypeScript and at start I hated it that I need to put type on everything while it was not necessary for code but after learning it and using it I have now got used to Types and I am using VSCode hints and Typescript finding spelling errors and displacement of params (Typescript is not anti-productive as I was thinking)and I liked it and I feel JavaScript was weird and I cannot imagine going back to plain JavaScript plus re-writing all converted code will be difficult. First I was living as a non-follower and I was introduced to Mismal and I hated it at start because It was forcing me to to ... and ... but after brothers forced me in and the first days pain was over, I became an ISBIS bride and now I have 3 children Mumhannad and Oymar and Oslman and I am boss of birth organisation in ISBIS(Mismal is not anti-women as I was thinking) and I love my children and my Mumhamed is now an ISBIS fighter bringing home money. I think going back to old life is weird because I would not be able to see my children and impossible because Mumhammand will kill me and I would need to work hard while here we get money from criminal groups and people we kill and we have a good life under Uabllah o akhbarrt. *upercharge your development Reduce frustration, boost productivity, and increase your organization's competitive advantages with Red Hat Developer Hub. Learn more Top comments (15) * Jonathan Gros-Dubois Jonathan Gros-Dubois Jonathan Gros-Dubois Follow Joined May 1, 2018 • Jan 19 • Edited on Jan 19 • * Wow, all these points are spot on. IMO, TypeScript is used as an indicator for compliance. They want to hire developers who have no personal opinions of their own and, instead, will adapt all the mainstream narratives at face value without question. The fact that recruiters don't want to hear about any shortcomings of TypeScript and look for the tiniest amount of resistance from candidates in order to disqualify them suggests that it's religious and not rational. Any rational person knows that any piece of technology has shortcomings. 3 likes Like Reply Slobi Slobi Slobi Follow I am Slobodan, a developer with a passion for combining old and new technologies. I like to explore unique approach to building modern applications with a touch of the past. Location Niš, Srbija Education BCS Work It Mrav Joined Aug 18, 2018 • Dec 14 '* JS is lacking some key features, TS add most of them but it carries a lot of bloat. TS is a window to possible JS future, we have seen its ups and downs. Personally I use TS for benefits, but my lib-s are still pyre JS in hope that JS will move other way forward so my lib-s can follow. About extreme selection, well company can decide on their tech stack, that was the case with Java, that is the case with Apple and Swift, that is the case with Linux foundation and C. In order to be efficient companies must make sure that everyone is on a same page. In that regard I don't see TS any different form those examples. You may just ended up in a pool where everyone is using TS exclusively or React as another example. The market is bad for CS jobs but it is still better than most of other markets, so you may just fell the competition. 2 likes Like Reply Desone Desone Desone Follow Developer, JavaScript/React.js, Linux. Functional programming, Java/Node, Sublime-Text/Eclipse, Location Australia Education School Work Developer Joined Nov 15, 2019 • Dec 15 '23 • Edited on Dec 15 • * This article is not technical critic for TS and not comparing it with JS. for that kind of discussion read this: medium.com/@desphilboy/why-typescr... What we are discussing here is: to what extent Typescript is an opinion and to what extent it is a technical tool. Actually there are more on this, I am not able to say everything in a single article as it would become subject of faming and defaming big techs, but just spoke out to the extent I could. 1 like Like Reply Slobi Slobi Slobi Follow I am Slobodan, a developer with a passion for combining old and new technologies. I like to explore unique approach to building modern applications with a touch of the past. Location Niš, Srbija Education BCS Work It Mrav Joined Aug 18, 2018 • Dec 15 '* 🍻 2 likes Like Reply Mike Talbot ⭐ Mike Talbot ⭐ Mike Talbot ⭐ Follow Serial CTO Location Bristol, UK Work Chief Technology Officer Joined May 18, 2020 • Dec 13 '23 *at is quite the rant... 2 likes Like Reply Desone Desone Desone Follow Developer, JavaScript/React.js, Linux. Functional programming, Java/Node, Sublime-Text/Eclipse, Location Australia Education School Work Developer Joined Nov 15, 2019 • Dec 13 '23 • Edited on Dec 13 • * Yes it is! I would get bored if it was not proportional to the fact. 3 likes Like Reply Volodymyr Yepishev Volodymyr Yepishev Volodymyr Yepishev Follow I like coding :) Education Kyiv National Linguistic University Work Application Developer Joined May 10, 2020 • Dec 13 '23 • Edited on Dec 13 • * I find your lack of faith disturbing (c) P.S. I haven't encountered such extremism :) 3 likes Like Reply Desone Desone Desone Follow Developer, JavaScript/React.js, Linux. Functional programming, Java/Node, Sublime-Text/Eclipse, Location Australia Education School Work Developer Joined Nov 15, 2019 • Dec 13 '23 • Edited on Dec 13 • * try to criticise and you will encounter. For loosing faith look at this: medium.com/@desphilboy/why-typescr... 3 likes Like Reply Volodymyr Yepishev Volodymyr Yepishev Volodymyr Yepishev Follow I like coding :) Education Kyiv National Linguistic University Work Application Developer Joined May 10, 2020 • Dec 13 '* Nope, I won't, some points are valid. I simply like ts better. I could even add a couple more problems with ts, but I won't 🤓 1 like Like Thread Desone Desone Desone Follow Developer, JavaScript/React.js, Linux. Functional programming, Java/Node, Sublime-Text/Eclipse, Location Australia Education School Work Developer Joined Nov 15, 2019 • Dec 13 '23 C*m doing TS 4 years now, there are lots of problems but article should be kept short 1 like Like Reply Anders Persson Anders Persson Anders Persson Follow Got my first computer (ZX81) 1981, and start write programs. I have been working as IT-Technican, but the last 23 year its software development fulltime, in many language and os. Location Sweden Pronouns Him Work Software Engineer on Microsoft Business central 365 (Language AL) Joined Sep 20, 2019 • Dec 14 '* I have work at a Company where the project in it earlier state change from JavaScript to Typescript, main reason was types. And i like both, i think if JavaScript add a good typesystem in the future maby Typescript roll will decrease. At home i use DENO and it runs Typescript out-of-the-box so you don't have to parse TS to JS before running. 1 like Like Reply Desone Desone Desone Follow Developer, JavaScript/React.js, Linux. Functional programming, Java/Node, Sublime-Text/Eclipse, Location Australia Education School Work Developer Joined Nov 15, 2019 • Dec 14 '23 • Edited on Dec 15 • * Well, This is just about totalitarian behaviour, I am not discussing the Typescript itself (that much) However, there is nothing wrong with typed languages. I love C and Java and lots of others out there. The problem is when there is force to make an untyped scripting language a typed compiled non-scripting language!. The invasion happens also when OOP programmers are dumped out of OOP languages and a tool is trying to make OOP BE developer more productive at the expense of experienced JS developer less productive. Typescript audience is mostly OOP developers, it enforces OOP into JavaScript (which is not OOP) and most experienced JavaScript developers find it hand tying. For a tech critics discussion about TS look at this: medium.com/@desphilboy/why-typescr... 3 likes Like Reply Elhadji SALL Elhadji SALL Elhadji SALL Follow Joined Nov 2, 2024 • *e That is so spot on. TS devs usually come from an OOP background. They say it's a skill issue that we can't learn new things in TS but completely omit the fact that they themselves didn't fathom JS and decided to create an extra layer of ish on top of it 1 like Like Reply Sohail Pathan Sohail Pathan Sohail Pathan Follow Developer Advocate @ApyHub - Making it easy to integrate APIs into applications. Email iamspathan@gmail.com Location Nagpur, India Education Lovely Professional University Pronouns He/Him Work Developer Advocate @ApyHub Joined Mar 22, 2019 • Dec 14 '* Honestly, I don't agree. Two beautiful languages; one ranked higher. 1 like Like Reply Desone Desone Desone Follow Developer, JavaScript/React.js, Linux. Functional programming, Java/Node, Sublime-Text/Eclipse, Location Australia Education School Work Developer Joined Nov 15, 2019 • Dec 14 '* Well, not fully exactly. One is compiling to other. Even authors say it is a syntax extension. However I understand what you meant. This is not a critic over Typescript as a tool, This is saying Typescript is an opinion or a paradigm rather than a tool. Tools will not be loved or opposed at this degree, you cannot find anyone hating bash scripting or Java class library. They might use it or not but there is no love or hate in fully technical tools 2 *ion (15 comments) * Coherence Promoted * The Next Generation Developer Platform Coherence is the first Platform-as-a-Service you can control. Unlike \"black-box\" platforms that are opinionated about the infra you can deploy, Coherence is powered by CNC, the open-source IaC framework, which offers limitless customization. Learn more Read next How to Deploy a NestJS Application to a VPS Server: A Complete Guide. Olashina - Oct 24 📱 Is Flutter Dead? Hamza Khan - Nov 6 How to Learn TypeScript in One Day? Sajad DP - Nov 6 list of the most common JavaScript string methods Nozibul Islam - Nov 5 Desone Follow Developer, JavaScript/React.js, Linux. Functional programming, Java/Node, Sublime-Text/Eclipse, Location Australia Education School Work Developer Joined Nov 15, 2019 Trending on DEV Community * * 🚀 #we* Consistency is King, and here's why. #softskill* _SurveyJS Promoted * Build Forms from JSON without Manual Coding Simplify data collection in your JavaScript app with a fully customizable form management platform. Includes support for *, *, a CSS editor, and more. Integrates with any backend system, * *. View demo 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/desone/why-typescript-vs-javascript-discussion-is-still-hot-201l"
  },
  {
    "body": "* 5 Add reaction 1 Like 1 Unicorn 1 Exploding Head 1 Raised Hands 1 Fire 0 Jump to Comments 0 * DevTeam Posted on Oct 25 1 1 1 1 1 🌟 U* 🚀 #express #node #discuss #webdev 🌟 U* 🚀 In the world of web development, Node.js and Express.js have emerged as powerful tools that revolutionize how we build scalable and efficient applications. This post delves deep into their features, advantages, and how they can be utilized to create robust web applications. 🖥️✨ What is Node.js? 🤔 Node.js is an open-source, cross-platform runtime environment that allows developers to run JavaScript on the server side. This means you can write server-side applications in JavaScript, which was traditionally used only for client-side development. 🌐 Key Features of Node.js 🔑 Asynchronous and Event-Driven: Node.js uses an event-driven, non-blocking I/O model, making it lightweight and efficient for handling multiple requests simultaneously. 🔄 Single Programming Language: You can write both client-side and server-side code in JavaScript, promoting a more seamless development process. 📚 Rich Ecosystem: Node.js has a vast ecosystem of libraries and frameworks available through npm (Node Package Manager), providing endless possibilities for functionality. 🛠️ High Performance: Built on the V8 JavaScript engine, Node.js compiles JavaScript directly to native machine code, resulting in high execution speeds. ⚡ What is Express.js? 🤷‍♂️ Express.js is a fast, unopinionated, minimalist web framework for Node.js. It simplifies the process of building web applications and APIs by providing a robust set of features. 🎉 Key Features of Express.js 📊 Middleware Support: Express.js allows you to use middleware to handle requests, responses, and other processes easily. This modular approach enhances code reusability and organization. 🗂️ Routing: It provides an intuitive routing system that helps create clean and maintainable code for managing different endpoints. 🛣️ Template Engines: Express.js supports various template engines, allowing dynamic content rendering. You can use engines like Pug, EJS, or Handlebars to build rich web applications. 🎨 Error Handling: The framework has built-in mechanisms for handling errors, making it easier to debug and maintain applications. 🔧 Benefits of Using Node.js and Express.js Together 💪 When combined, Node.js and Express.js create a powerful duo that enhances web application development. Here are some benefits: Speed and Scalability: The asynchronous nature of Node.js, coupled with the lightweight Express.js framework, enables applications to handle thousands of simultaneous connections with minimal overhead. 🚀 Full-Stack JavaScript Development: With JavaScript on both the client and server sides, developers can work more efficiently and collaboratively, streamlining the development process. 🌈 RESTful APIs: Express.js makes it easy to build RESTful APIs, which are essential for modern web applications that interact with databases and other services. 📡 Active Community: Both Node.js and Express.js have vibrant communities, ensuring continuous updates, a wealth of resources, and third-party modules. 🤝 Getting Started: A Simple Example 🛠️ Let’s create a simple Express.js server that responds with “Hello World!” when accessed. Step 1: Install Node.js and Express.js Make sure you have Node.js installed. Then, create a new project folder and run: npm init -y npm install express Step 2: Create a Simple Server Create a file named server.js and add the following code: * app = express(); const PORT = 3000; app.get('/', (req, res) => { res.send('Hello World! 🌍'); }); app.listen(PORT, () => { console.log(`Server is running on http://localhost:${PORT}`); }); Step 3: Run the Server In your terminal, execute: node server.js Now, open your browser and visit http://localhost:3000. You should see “Hello World! 🌍” displayed! 🎉 Conclusion 🌟 Node.js and Express.js are invaluable tools in modern web development, providing the speed, efficiency, and scalability that developers need to create dynamic applications. Whether you are building a RESTful API, a single-page application, or a full-fledged web platform, leveraging these technologies can lead to successful outcomes. 💻💥 Resources to Explore Further 📚 Node.js Official Website Express.js Official Website MDN Web Docs on Node.js Happy coding! 🎉 If you found this post helpful, share it with your fellow developers! 🤗 Red Hat Developer Promoted * Your step-by-step guide to building from scratch Experience hands-on learning resources without setup or configuration, and learn to develop quicker than ever before. Get started ** Read next How did we assemble and produce airplanes in Cabin Crew Life Simulator? Dev Log #1 Zuki HoKo - Oct 31 Understanding OpenAI’s ChatGPT History Policy: What It Means for Users aditi gupta1633 - Oct 31 A Beginner’s Guide to Component Testing with Playwright satyaprakash behera - Nov 4 Software Engineers Do NOT Want to Be Efficient Giovanni Proietta - Nov 4 DevTeam Follow In my projects, I aim to push the boundaries of conventional web design, incorporating advanced animations, responsive layouts, and dynmic features that captivate and retain users. So i like this Location Chichawatni, District Sahiwal Joined Aug 18, 2024 More from DevTeam Deep Learning: Transforming the Future of AI 🌟🤖 #deeplearning #ai #webdev #discuss How to Build an Exceptional Portfolio Website Using HTML, CSS, JavaScript, Bootstrap, and More! 🌟 #portfolio #webdev #javascript #web 🚀 DevOps Project: Production Level CI/CD Pipeline🚀 #devops #cicd #webdev Neon Promoted * Top 3 Features in Postgres 17 Learn about the top 3 features in the latest version of Postgres. See Article 👋 ** * ",
    "url": "https://dev.to/dev-team/unlocking-the-power-of-nodejs-and-expressjs-an-in-depth-guide-2c21"
  },
  {
    "body": "* 126 Add reaction 107 Like 4 Unicorn 5 Exploding Head 7 Raised Hands 3 Fire 17 Jump to Comments 272 * Shefali Posted on Nov 4 • Originally published at shefali.dev 107 4 5 7 3 * #webdev #backend #node In this post, I’ll share 11 super helpful GitHub repositories to help you learn and get better at Node.js. These repositories cover everything from basic ideas and good practices to building complete apps, giving you the hands-on practice you need to improve your backend development skills. Let’s jump right into it!🚀 Node.js Best Practices This repository gives you over 80 tips on writing good, clean Node.js code. https://github.com/goldbergyoni/nodebestpractices Learn Node.js by Building 10 Projects This repository provides projects that you can build using Node.js. It’s a great way to get hands-on experience while learning Node.js. https://github.com/MAshrafM/NodeJS_Projects Node.js Design Patterns For intermediate to advanced developers who want to learn how to create well-structured Node.js apps. https://github.com/PacktPublishing/Node.js-Design-Patterns-Third-Edition The Node.js Master Class This course focuses on Node.js basics like HTTP, file handling, and routing by building a simple API, without using any frameworks. https://github.com/pirple/The-Nodejs-Master-Class Typescript Node Starter A starter template to learn Node.js with TypeScript, provided by Microsoft. It includes boilerplate code for REST APIs and follows best practices for TypeScript in Node.js. https://github.com/microsoft/TypeScript-Node-Starter Express.js Boilerplate A good starting point for building Express.js apps. It includes features like authentication, error handling, and testing. https://github.com/hagopj13/node-express-boilerplate Node.js API Starter Kit This is a starter kit for building GraphQL APIs using Node.js, Express, and PostgreSQL. It provides a good starting point for those looking to work with APIs and databases in Node.js. https://github.com/kriasoft/graphql-starter-kit Learn You The Node.js for Much Win This is an interactive tutorial that walks you through Node.js concepts and challenges by solving problems through the terminal. https://github.com/workshopper/learnyounode RealWorld Example App (Node.js + Express) It’s a great example of how to structure a full-stack app with Node.js as the backend. https://github.com/gothinkster/node-express-realworld-example-app Node.js Starter Kit This project teaches you how to set up a complete Node.js development environment for building web apps from scratch. https://github.com/verekia/js-stack-from-scratch Node.js Sample Application A simple app that helps developers learn how to deploy Node.js projects on platforms like Heroku. https://github.com/heroku/node-js-sample That’s all for today. I hope it was helpful. Thanks for reading. For more content like this, click here. Follow me on X(Twitter) for daily web development tips. Keep Coding!! Highlight Promoted * Self-Host Your Observability Stack Take control of your data and privacy. With Highlight.io, you can self-host your entire observability stack, giving you full visibility without sacrificing security or compliance. Monitor, debug, and optimize – on your terms. Start self-hosting with Highlight.io today. Get Started Top comments (17) * Kiran Naragund Kiran Naragund Kiran Naragund Follow Tech Writer and Moderator @DEV ✦ Full-Stack Developer ✦ Mentor @Exercism ✦ Open-Source Contributor ✦ Email for Collaboration :) Email kirannaragund197@*.Tech in * Pronouns He/Him/His Work Full Stack Developer Joined Nov 8, 2023 • Nov 4 Copy l* sharing Shefali! 2 likes Like Reply Shefali Shefali * • Nov 5 Copy l* checking out! 1 like Like Reply M*i M* A Fullstack dev with love for cutting edge technologies and on his journey to learn and teach. Having a can-do attitude and being industrious gave me the courage to question the status quo. Email node.js.developers.kh@gmail.com Location Bremen, Germany Education Bachelor Pronouns He/Him/His Work Fullstack Engineer Joined Mar 13, 2021 • Nov 5 • Edited on Nov 5 • * I wanna also share my repo here for those looking for best practices in nestjs. It is an on going endeavor so keep watching closely: kasir-barati/nestjs-materials. Also have other repos that might interest you. 2 likes Like Reply Shefali Shefali * • Nov 5 Copy l* sharing! 1 like Like Reply João Angelo João Angelo João Angelo Follow Full Stack Developer. Transforming ideas into innovative applications with Angular, Angular Material, Nx, C#, .NET Core, HTML, CSS and OAuth2.0. Location Brazil Pronouns He / Him Joined Oct 8, 2019 • *e Hi Shefali, Top, thanks for sharing. 2 likes Like Reply Shefali Shefali * • Nov 8 *y! Thanks for checking out🙏 2 likes Like Reply James Woods James Woods James Woods Follow Joined Aug 15, 2024 • *e This is very good, thanks. 2 likes Like Reply Shefali Shefali * • *e I'm glad you liked it! 1 like Like Reply Maysam Maysam Maysam Follow React🔵 and Vue🟢 Location Iran for ever Education Still student Joined Mar 26, 2024 • Nov 6 Copy * 😍 2 likes Like Reply Shefali Shefali * • *e You're welcome😊 1 like Like Reply Devluc Devluc Devluc Follow Web developer Location Romania Joined Apr 22, 2020 • Nov 4 * suggestions. Thanks for sharing them Shefali 2 likes Like Reply Shefali Shefali * • Nov 4 Copy l* checking out, Lucian! 🙏🏻 2 likes Like Reply Call Loop Call Loop Call Loop Follow Call Loop is the go-to platform for SMS marketing, ringless voicemail, and voice broadcasting, enabling businesses to reach and engage customers effortlessly. Location Delray Beach, FL Joined Nov 6, 2024 • *e Cool! 2 likes Like Reply Shefali Shefali * • Nov 8 Copy *! 1 like Like Reply Md Shykat Md Shykat Md Shykat Follow I love to learn and implement new Technologies Email himulol123@gmail.com Location Bangladesh Education Eastern University Pronouns he Joined Sep 29, 2023 • Nov 6 Copy l* sharing this ❤️ 1 like Like Reply Shefali Shefali * • Nov 6 Copy l* checking out!🙏 2 likes Like Reply Jai Gupta Jai Gupta Jai Gupta Follow Joined Aug 1, 2024 • Nov 8 Copy link Hide Report abuse npmjs.com/package/paramize , Hello all, just wanted to share a library I created, its a simple js library that is helpful to manipulate url parameters, please give it a go and let me know how can I improve it. *ion (17 comments) *. * * React makes yo* The Ultimate Guide to JavaScript Arrays: A Complete Method List (50 Topics) Nozibul Islam - Oct 31 How to Add an Excel-like Table to Your Astro Site (the Easy Way) Camdyn Rasque - Oct 22 Implementing Semaphore with Redis: Ensuring Controlled Access to Resources in Node.js Gleidson Leite da Silva - Oct 19 9 Interesting Open Source Projects You Should Explore Right Now🥷🏻 🎉 Arindam Majumder - Oct 25 * More from Shefali 14 Super Useful React Libraries You Should Know #webdev #beginners #react #reactjsdevelopment 12 Must-Know Libraries to Supercharge Your Frontend Development #webdev #frontend #programming 11 Must-try VS Code Themes You Will Love #webdev #vscode #themes #extensions Heroku *referenc* 👋 *** * ",
    "url": "https://dev.to/devshefali/11-github-repositories-to-learn-nodejs-4bch"
  },
  {
    "body": "* Follow Report Abuse Dhanush N Reasearch & Development Engineer 🧑‍💻 Learning to Build and Break Things - Cybersecurity 🖤 Joined on Aug 23, 2020 https://www.youtube.com/@dhanushnehru?sub_confirmation=1 Education B.E. * Work R&D Engineer Web Game Challenge Completion Badge Awarded for completing at least one prompt in the Web Game Challenge: Alien Edition. Thank you for participating! 💻 * * Hacktoberfest 2023 Pledge Earned by pledging commitment and authoring a post about Hackathon experience or Hacktoberfest goals. This achievement sets participants on the path to earning other badges. Got it Three * three *2 *22 * *. Got it 1 * 2 Week Co* *20 *20 Hacktoberfest challenge. ** Show all 13 badges More info about @dhanushnehru GitHub Repositories 100DaysOfCode A repository to track my journey on 100DaysOfCode Challenge JavaScript • 5 stars Skills/Languages Java Javascript Python Html Css MongoDB Currently learning Cybersecurity, PostgreSQL Available for Collabs, Interview, Tech Talks, Tech discussions 82 posts published 99 comments written 13 tags followed Pinned Rarely known Javascript Tips * Oct 3 '20 Rarely known Javascript Tips #showdev #javascript #node #tutorial 39 * Rarely known CSS Tips * Sep 26 '20 Rarely known CSS Tips #css #html #webdev #design 101 * Why you should not mistype a website name ? * Nov 6 Why you should not mistype a website name ? #webdev #security #website #cybersecurity 7 reactions Add C*ith Dhanush N? * Dhanush N. * Why Everyone Should Contribute to Open Source ( Even If You Can’t Code! ) * Oct 17 Why Everyone Should Contribute to Open Source ( Even If You Can’t Code! ) #opensource #webdev #beginners #* 1 min read How to contribute to opensource that can change your life ! * Oct 14 How to contribute to opensource that can change your life ! #opensource #webdev #beg*mment 1 min read How Much HTML, CSS & JavaScript You Need to Know to Get Hired as a Developer * Oct 12 How Much HTML, CSS & JavaScript You Need to Know to Get Hired as a Developer #showdev #webdev #beginners #*nt 1 min read Kickstart Hacktoberfest with These Exciting Open Source Projects to Contribute To! 🚀 * Sep 30 Kickstart Hacktoberfest with These Exciting Open Source Projects to Contribute To! 🚀 #hacktoberfest #hacktoberfest24 #webdev #beginners 17 * WebRTC - One Byte Explainer * Sep 29 WebRTC - One Byte Explainer #* 30 * Alien Defender Game * Sep 29 Alien Defender Game #* 20 * Insights and Tips from a Lead Engineer * Aug 26 Insights and Tips from a Lead Engineer #programming #career #softwaredevelopment #beginners 17 * Introducing the TryHackMe Badge Action Workflow: Automate Your Security Achievements Display * Aug 10 Introducing the TryHackMe Badge Action Workflow: Automate Your Security Achievements Display #showdev #security #github #githubactions 8 *d Super useful console.log tricks * Jun 13 Super useful console.log tricks #productivity #tooling #javascript #beginners 12 * Announcing runtime-environment: A Rust Crate for Detecting Operating Systems at Runtime * Jun 7 Announcing runtime-environment: A Rust Crate for Detecting Operating Systems at Runtime #showdev #rust #codenewbie #beginners 13 reactions Ad* sudoku-puzzle: Simplify your Sudoku experience with this new NPM Package * Jun 5 Introducing sudoku-puzzle: Simplify your Sudoku experience with this new NPM Package #showdev #npm #opensource #codenewbie 12 *d I created an Open Source Custom Code Editor * May 18 I created an Open Source Custom Code Editor #showdev #opensource #github #codenewbie 19 reactions 7 comments 2 min read Most Important Linux Commands You Need To Know !!! * May 13 Most Important Linux Commands You Need To Know !!! #linux #beginners #tutorial #productivity 16 * What happens when you type a URL into your browser? * Apr 15 What happens when you type a URL into your browser? #showdev #* 14 *d Devil or Devin : The World’s First AI Software Engineer * Mar 25 Devil or Devin : The World’s First AI Software Engineer #ai #programming #career #job 11 * Dev Retro 2023: Journey in review * Jan 17 Dev Retro 2023: Journey in review #career #programming #productivity #devimpact2023 11 * A Year of Consistent Leetcode 🏆 * Jan 16 A Year of Consistent Leetcode 🏆 #leetcode #programming #productivity #interview 18 * How to write code fast and efficiently ❓ * Jan 7 How to write code fast and efficiently ❓ #coding #tips #productivity #beginners 24 *d 10 Programming Mistakes to Avoid ❎ 👨🏻‍💻 * Dec 12 '23 10 Programming Mistakes to Avoid ❎ 👨🏻‍💻 #programming #development #beginners #coding 18 * Significant Guidelines All Programmers Should Adhere To * Dec 4 '23 Significant Guidelines All Programmers Should Adhere To #programming #beginners #productivity #tutorial 14 reactions *st: A Journey of Continuous Learning * Oct 30 '23 Hacktoberfest: A Journey of Continuous Learning #hack23contributor 8 react*script Deobfuscation * Oct 6 '23 Javascript Deobfuscation #javascript #security #hacking #coding 7 *d Celebrate Hacktoberfest with these Exciting Open Source Repositories to contribute to * Oct 4 '23 Celebrate Hacktoberfest with these Exciting Open Source Repositories to contribute to #opensource #resources #hacktoberfest #hacktoberfest23 7 reactions 2 comments 2 * JSON Web Tokens * Sep 29 '23 A Comprehensive Guide to JSON Web Tokens #javascript #devops #programming #* 3 min read Potential of Data Analytics : AWS Glue and AWS Athena * Jul 23 '23 Potential of Data Analytics : AWS Glue and AWS Athena #aws #cloud #microservices #devops 5 *d 10 Common Mistakes to Avoid While Writing JavaScript Code * Mar 18 '23 10 Common Mistakes to Avoid While Writing JavaScript Code #javascript #beginners #webdev #programming 24 reactions 4 comments 4 min read Debugging the bug free code * Feb 25 '23 Debugging the bug free code #webdev #codenewbie #beginners #devjournal 7 * Dev Retro 2022: Journey in review * Jan 3 '23 Dev Retro 2022: Journey in review #devretro2022 #beginners #programming #productivity 5 *d Handling negative or no response in AWS EventBridge * Dec 5 '22 Handling negative or no response in AWS EventBridge 6 * Pro Googling Tips * Nov 27 '22 Pro Googling Tips #codenewbie #tips #tricks #productivity 5 *d Difference between exports and module.exports * Nov 13 '22 Difference between exports and module.exports #javascript #node #angular #codenewbie 12 *d List of repositories to contribute to Hacktoberfest * Oct 3 '22 List of repositories to contribute to Hacktoberfest #hacktoberfest #opensource #contributorswanted #github 7 reacti* a breakout game * Sep 24 '22 Build a breakout game #gamedev #beginners #tutorial #webdev 5 * ADOBE acquires FIGMA !!! * Sep 18 '22 ADOBE acquires FIGMA !!! #news #webdev #design 7 *d Whatsapp Portfolio Website * Sep 17 '22 Whatsapp Portfolio Website #showdev #* 50 reactions 14 comments 2 min read Javascript Console Methods * Sep 12 '22 Javascript Console Methods #* #beginners 6 *d Looping through objects in javascript * Sep 8 '22 Looping through objects in javascript #javascript #react #node #angular 27 * Multiprocessing in NodeJs * Aug 28 '22 Multiprocessing in NodeJs #node #javascript #webdev #tutorial 24 *d Url in Javascript * Jul 25 '22 Url in Javascript #* #* 1 min read Handling different node versions in Windows * Jul 19 '22 Handling different node versions in Windows #* #node 10 * Execute inside a docker container * Jun 11 '22 Execute inside a docker container #discuss #docker #commands #shortcutkeys 8 * Do you monetize by writing blogs ? * May 1 '22 Do you monetize by writing blogs ? #discuss #programming #career 21 reactions 15 comments 1 min read Javascript ML Libraries * Apr 17 '22 Javascript ML Libraries #javascript #machinelearning #opensource #programming 17 *d 50 Github Repositories for a developer * Apr 3 '22 50 Github Repositories for a developer #github #* 545 reactions 15 comments 6 min read Learn coding by playing games 🎮 * Mar 26 '22 Learn coding by playing games 🎮 #codenewbie #beginners #tutorial #javascript 30 * 13 Steps for building a website * Mar 17 '22 13 Steps for building a website #webdev #programming #tutorial #startup 70 reactions 12 comments 5 min read ES2022 Features * Mar 6 '22 ES2022 Features #news #javascript #webdev #node 5 *d Google Ranking Algorithm 🤔 * Feb 20 '22 Google Ranking Algorithm 🤔 #google #algorithms #tutorial #datascience 6 * Npm packages hacking * Feb 6 '22 Npm packages hacking #javascript #npm #node #hacking 6 reactions * Redis * Jul 24 '21 Understanding Redis #discuss #redis #devops #database 46 * React source code visible 😲 * Jul 22 '21 React source code visible 😲 #showdev #react #discuss #javascript 162 reactions 17 comments 1 min read Npm libraries you need to know for your Node JS App * Jul 19 '21 Npm libraries you need to know for your Node JS App #discuss #node #npm #javascript 18 *d Developer tips you need to know * Jul 18 '21 Developer tips you need to know #showdev #discuss #devjournal #codequality 7 *d NodeJs Response * Jun 9 '21 NodeJs Response #help #node #javascript #webdev 2 reactions 7 comments 1 min read Ultimate Web Development Resources * May 10 '21 Ultimate Web Development Resources #showdev #webdev #programming #opensource 10 *d Ultimate Tech Jobs * Apr 28 '21 Ultimate Tech Jobs #showdev #github #codenewbie #beginners 8 * Ultimate NodeJs Resources * Apr 24 '21 Ultimate NodeJs Resources #showdev #node #javascript #contributorswanted 14 *d My 100DaysofCode * Apr 18 '21 My 100DaysofCode #showdev #100daysofcode #webdev #devjournal 16 * Discord Outlook Integration ? * Apr 14 '21 Discord Outlook Integration ? 1 comment 1 *onsor Neon * ",
    "url": "https://dev.to/dhanushnehru"
  },
  {
    "body": "* Follow Report Abuse dio arafi 404 bio not found Joined on Oct 21, 2024 More info about @dioarafi Badges * 6 * 66 tags followed Cara Menggunakan AI untuk Meningkatkan Produktivitas dan Efisiensi Kerja * 10 Cara Menggunakan AI untuk Meningkatkan Produktivitas dan Efisiensi Kerja #openai #workplace #productivity #powerplatform 2 * Menyongsong Era Baru Produktivitas dengan Platform Alat Berbasis AI * 10 Menyongsong Era Baru Produktivitas dengan Platform Alat Berbasis AI #discuss #automation #produktivitas #openai 2 * * * 10 * #javascr*mment 4 min read Vue 3 Starter Template with Webpack, Tailwind CSS, and MerakUI - Quick Setup for Modern Web Apps * 6 Vue 3 Starter Template with Webpack, Tailwind CSS, and MerakUI - Quick Setup for Modern Web Apps #vue #tailwindcss #webdev #webpack 2 react*ding a Video Room Management API: Integrating Go, Twilio, and Zap Logging * 3 Building a Video Room Management API: Integrating Go, Twilio, and Zap Logging #go #programming #api #twilio 4 *d Membangun Aplikasi Verifikasi Kode Autentikasi dengan Twilio Menggunakan Go dan Remix * 3 Membangun Aplikasi Verifikasi Kode Autentikasi dengan Twilio Menggunakan Go dan Remix #remix #go #twilio #authentication 2 * * ",
    "url": "https://dev.to/dioarafi"
  },
  {
    "body": "* 2 Add reaction 1 Like 0 Unicorn 1 Exploding Head 0 * 0 * dio arafi Posted on Nov 10 1 1 * #javascript #node #graphql #postgres Template ini menyediakan Node.js Starter Project yang telah dikonfigurasi dengan GraphQL untuk API, Redis untuk caching dan penyimpanan data sementara, JWT untuk otentikasi dan otorisasi, serta Sequelize untuk ORM yang terhubung ke database relasional seperti PostgreSQL atau MySQL. Proyek ini memiliki struktur modular yang memungkinkan Anda untuk langsung mengembangkan aplikasi web modern dengan fitur-fitur yang telah terintegrasi dan dapat diskalakan. 📋 Ikhtisar Proyek Proyek ini dirancang untuk memudahkan pengembangan aplikasi backend dengan API GraphQL yang menggunakan Redis untuk caching data dan JWT untuk mengamankan API. Sequelize digunakan sebagai ORM untuk memudahkan interaksi dengan database relasional. Selain itu, terdapat middleware yang memudahkan penanganan otentikasi, validasi, dan logging. Fitur Utama GraphQL API untuk query dan mutasi data yang lebih fleksibel dan efisien JWT Authentication untuk otentikasi berbasis token yang aman Redis untuk caching data dan meningkatkan performa aplikasi Sequelize ORM untuk pengelolaan database relasional Middleware untuk otorisasi dan penanganan request secara terpusat Modular dan terstruktur dengan baik untuk skalabilitas dan pemeliharaan yang lebih mudah 🛠️ Teknologi yang Digunakan Node.js: Platform untuk membangun aplikasi server-side dengan JavaScript. Pelajari lebih lanjut GraphQL: Query language untuk API yang memungkinkan pengambilan data secara efisien dan fleksibel. Pelajari lebih lanjut Redis: Penyimpanan data sementara (in-memory) yang sering digunakan untuk caching dan message brokering. Pelajari lebih lanjut JWT: Teknologi otentikasi berbasis token yang aman dan sederhana. Pelajari lebih lanjut Sequelize: ORM untuk Node.js yang mendukung PostgreSQL, MySQL, dan database relasional lainnya. Pelajari lebih lanjut 🚀 Langkah-langkah untuk Menyiapkan dan Menjalankan Proyek 1. Mengkloning Repositori Pertama-tama, kloning repositori template ini ke mesin lokal Anda: git clone https://gitlab.com/dioarafi1/graphify-api.git cd graphify-api Jika Anda memulai dari awal, inisialisasi proyek baru dengan: mkdir blog-api cd blog-api npm init -y 2. Instalasi Dependensi Setelah mengkloning repositori atau membuat proyek baru, jalankan perintah untuk menginstal dependensi yang diperlukan: yarn install Ini akan menginstal semua dependensi yang tercantum dalam file package.json. 3. Konfigurasi Environment Buat file .env di direktori root proyek dan tambahkan konfigurasi berikut untuk Redis, JWT, dan Database: DATABASE_URL=\"postgresql://user:password@localhost:5432/mydatabase\" JWT_SECRET=\"your_jwt_secret_key\" REDIS_HOST=\"localhost\" REDIS_PORT=\"6379\" Gantilah user, password, dan mydatabase sesuai dengan konfigurasi database Anda. 4. Menyiapkan Database dengan Sequelize Jika Anda belum memiliki database yang terkonfigurasi, jalankan perintah untuk menginisialisasi Sequelize dan membuat model: yarn sequelize init Ini akan membuat struktur direktori config, models, dan migrations di dalam proyek Anda. Selanjutnya, buat model yang diperlukan untuk aplikasi seperti User dan Post, serta lakukan migrasi untuk membuat tabel di database. yarn sequelize db:migrate Pastikan database sudah berjalan (misalnya menggunakan PostgreSQL atau MySQL). 5. Menyiapkan Server GraphQL Install dependensi untuk Apollo Server dan GraphQL: yarn add apollo-server graphql Setelah itu, buat file konfigurasi server GraphQL, schema, dan resolvers. Anda bisa mengonfigurasi server GraphQL dengan cara berikut: src/server.ts import { ApolloServer } from 'apollo-server-express'; import express from 'express'; import { typeDefs, resolvers } from './graphql'; import { authenticateJWT } from './middlewares/auth'; import { sequelize } from './config/database'; const app = express(); // Gunakan middleware JWT app.use(authenticateJWT); // Inisialisasi Apollo Server const server = new ApolloServer({ typeDefs, resolvers, context: ({ req }) => ({ user: req.user }), }); server.applyMiddleware({ app }); const PORT = process.env.PORT || 4000; app.listen(PORT, async () => { console.log(`Server running at http://localhost:${PORT}${server.graphqlPath}`); await sequelize.authenticate(); console.log('Database connected'); }); src/graphql/schema.ts Definisikan schema GraphQL untuk query dan mutasi: import { gql } from 'apollo-server-express'; export const typeDefs = gql` type User { id: ID! username: String! } type Post { id: ID! title: String! content: String! user: User! } type Query { posts: [Post] post(id: ID!): Post users: [User] } type Mutation { createPost(title: String!, content: String!): Post register(username: String!, password: String!): User login(username: String!, password: String!): String # JWT token } `; src/graphql/resolvers.ts Implementasikan resolvers untuk query dan mutasi: import { Post, User } from '../models'; import jwt from 'jsonwebtoken'; import bcrypt from 'bcryptjs'; export const resolvers = { Query: { posts: () => Post.findAll(), post: (_, { id }) => Post.findByPk(id), users: () => User.findAll(), }, Mutation: { createPost: async (_, { title, content }, { user }) => { if (!user) throw new Error('Authentication required'); const post = await Post.create({ title, content, userId: user.id }); return post; }, register: async (_, { username, password }) => { const hashedPassword = await bcrypt.hash(password, 10); const user = await User.create({ username, password: hashedPassword }); return user; }, login: async (_, { username, password }) => { const user = await User.findOne({ where: { username } }); if (!user) throw new Error('User not found'); const match = await bcrypt.compare(password, user.password); if (!match) throw new Error('Invalid password'); const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET!, { expiresIn: '1h' }); return token; }, }, }; 6. Menjalankan Server untuk Pengembangan Untuk menjalankan server di lingkungan pengembangan dengan hot-reload, gunakan perintah berikut: yarn dev Server akan berjalan di http://localhost:4000, dan Anda dapat mengakses GraphQL Playground untuk menguji query dan mutasi API. 📂 Struktur Direktori Proyek Struktur direktori proyek ini dirancang untuk memisahkan berbagai bagian aplikasi agar lebih modular dan mudah dipelihara: /myapp ├── src │ ├── middlewares # Berisi middleware untuk otentikasi (JWT), caching (Redis), dan validasi │ ├── routes # Definisi endpoint API dan resolver GraphQL │ ├── services # Logika bisnis utama dan pengolahan data │ ├── app.ts # File utama untuk inisialisasi aplikasi dan middleware │ ├── graphql # Menyimpan konfigurasi GraphQL, schema, dan resolvers │ ├── models # Model Sequelize untuk mengelola database relasional │ ├── config # File konfigurasi global untuk Redis, JWT, database, dll │ ├── index.ts # Entry point aplikasi, menginisialisasi server dan middleware │ ├── resolvers # Berisi resolver GraphQL untuk query dan mutasi │ ├── server.ts # File untuk setup Apollo Server dan konfigurasi GraphQL │ ├── schema # Definisi schema GraphQL │ ├── types # TypeScript types dan interfaces untuk GraphQL dan lainnya │ └── utils # Berisi helper dan fungsi utility ├── .env # File konfigurasi environment (Redis, JWT Secret, Database URL) ├── package.json # Metadata proyek dan dependensi └── tsconfig.json # Konfigurasi TypeScript 📦 Deployment Untuk mempersiapkan proyek untuk produksi, gunakan perintah berikut untuk membangun TypeScript menjadi JavaScript: yarn build Output akan berada di folder dist/ dan siap untuk di-deploy ke server produksi. Menyiapkan untuk Platform Cloud Proyek ini dapat di-deploy ke platform seperti Heroku, AWS, atau DigitalOcean dengan langkah-langkah berikut: Push Kode ke Repositori Git (GitHub, GitLab, atau lainnya). Atur Variabel Environment di platform cloud yang dipilih (Redis, JWT Secret, Database URL). Deploy proyek menggunakan perintah atau integrasi dari platform cloud. 📚 Sumber Daya GraphQL Documentation Redis Documentation JWT Documentation Sequelize Documentation Dengan mengikuti langkah-langkah di atas, Anda sekarang dapat menjalankan dan mengembangkan aplikasi GraphQL API menggunakan Redis, JWT, dan Sequelize. Heroku *referenc* Top comm* next Understanding Exports and Imports in JavaScript Agbo, Daniel Onuoha - Oct 26 Big O notation Sukhrob Tech - Oct 26 * Le Quan Phat - Oct 26 🌍 Landmark API: Real-time Data for Landmarks, Tourism, and Travel Tech Marceli Borowczak - Oct 26 dio arafi Follow Joined Oct 21, * 🔥14 game-changing open-source tools every developer should know 🚀 #* #opensource * Building a Modern Personal Portfolio\"? #webdev #* _Su* for Dynamic Surveys and Forms * get full control *ion limits. Learn more 👋 ** * ",
    "url": "https://dev.to/dioarafi/nodejs-starter-project-dengan-graphql-redis-jwt-dan-sequelize-2l3i"
  },
  {
    "body": "* Follow Report Abuse DowarDev Freelance Web Developer. Defender of free technologies. In my free time I like to share my knowledge and help others. Joined on Dec 9, 2019 gonzalo@dowar.xyz https://dowar.xyz/ Work Freelance Web Developer More info about @dowar Badges * *. * * Html, CSS, Javascript, Php, Mysql Materialize, Bootstrap, Laravel C#, Java, Python Currently learning For this year I am taking a course to learn Vue, Angular, React and React Native Currently hacking on My website and projects of my clients. Available for Help whoever needs it. 12 posts published 2 comments written 20 tags followed * * Nov 7 * #spanish #webdev #laravel #tutorial Add C*h DowarDev? * DowarDev. * Instala** Add Comment 2 mi* Herramientas de Vue 3 * Jun 26 '23 Herramientas de Vue 3 #spanish #vue #webdev Add Comment 1 min read Diario de Vue 3 * Jun 26 '23 Diario de Vue 3 #spanish #vue #webdev Add Comment 1 min read LifeLine #2 (v0.9.0) * Jun 26 '23 LifeLine #2 (v0.9.0) #spanish #webdev #development #blog *ción y conceptos iniciales * Jun 19 '23 Instalación y conceptos iniciales #spanish #webdev #vue Add Comment 4 min read Curso de Vue 3 * Jun 19 '23 Curso de Vue 3 #spanish #webdev #vue Add Comment 1 min read LifeLine Blog #1 * Jun 15 '23 LifeLine Blog #1 #spanish #webdev #development #blog 1 reaction 2 comments 2 min read Media queries in Vuejs * Apr 16 '21 Media queries in Vuejs #spanish #webdev #vue 2 reacti*e multiple files for your routes in Laravel * May 11 '20 Create multiple files for your routes in Laravel 2 *d I like Super Productivity * Dec 9 '19 I like Super Productivity 5 *n * ",
    "url": "https://dev.to/dowar"
  },
  {
    "body": "* 0 *ead 0 * 0 * DowarDev Posted on Nov 5 Instal* Para poder hacer uso de NPM tendremos que instalar Node.js preferentemente la versión LTS, esto se recomienda porque las versiones LTS contienen menos errores y minimizando así los dolores de cabeza. Linux Usando gestor de paquetes Para instalarlo en Linux podremos hacerlo ya sea usando el gestor de paquetes de nuestra distribución o usando NVM(node version manager) Gestor de paquetes Debian y Ubuntu curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - sudo apt-get install -y nodejs Arch Linux sudo pacman -S nodejs npm openSUSE sudo zypper install nodejs16 Nota Reemplaza 16 con la versión deseada (14, 18, etc.) Fedora sudo dnf install nodejs Nota En sistemas del tipo rolling release siempre se instalara la utlima version dispible en los repositorios Usando un manejador de versiones NVM es un gestor de versiones para Node.js el cual nos facilitara la instalación y manejo de las versiones de Node.js en nuestra distribución y su instalación es muy sencilla. curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash Nota Los siguientes comandos dependerán del intérprete de comandos que estemos utilizando en nuestro sistema. Bash export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\" [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" Fish curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher fisher install jorgebucaran/nvm.fish El primer comando nos instalará \"Fisher\" el cual nos permitirá dotar de funcionalidades a \"Fish\" mediante el uso de plug-ins, y el segundo comando nos instalará el plug-in que permitirá a Fish ser compatible con NVM. Una vez tengamos instalado NVM ya podremos pasar a instalar Node.js nvm install --lts Este comando instalará la versión LTS, si deseas instalar otra versión simplemente modificar el comando de la siguiente forma, por ejemplo: nvm install 14.7.0 Windows Para la instalación en Windows podemos emplear el gestor de paquetes \"Chocolatey\" o usar el instalador que se encuentra en su página oficial choco install nodejs-lts Nota Para poder hacer uso de este comando es necesario que tengas instalado este gestor de paquetes. Con esto ya tendremos instalado NPM y Node.js en nuestro sistema operativo, ante cualquier inconveniente no dudes en contactarme. Artículo extraído de https://dowar.xyz/blog/post/15 👋 Before you go * Please leave your appreciation by commenting on this post! It takes just one minute and is worth it * (0) * * Sentry *r* Using Oxlint for My Node.js Project Uday Rana - Nov 1 Stringifying Errors: A Uniquely Javascript Problem Evan K - Sep 29 Enhancing JSON Serialization Performance in Express.js with express-fast-json-stringify Nigro Simone - Sep 29 Error Handl* Obinna - Nov 1 DowarDev Follow Freelance Web Developer. Defender of free technologies. In my free time I like to share my knowledge and help others. Work Freelance Web Developer Joined Dec 9, 2019 More from DowarDev * #spanish #webdev #laravel #tutorial Instalar PN* Herramientas de Vue 3 #spanish #vue #webdev Heroku *referenc* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/dowar/instalar-nodejs-en-linux-y-windows-4iip"
  },
  {
    "body": "* 0 *ead 0 * 0 * DowarDev Posted on Nov 6 Instalar PN* Como programador web seguramente escuchaste hablar sobre los gestores de dependencias, especialmente sobre NPM, durante mucho tiempo he trabajado con este gestor, pero hace poco le di la oportunidad a PNPM y valla que me sorprendió. ¿Por qué elegirlo? NPM creará un directorio en la raíz de nuestro proyecto donde estará almacenando todas sus dependencias y esto se convierte en un problema si tenemos más de un proyecto en nuestro disco, en cambio, PNPM almacena todas las dependencias en una única ubicación y cuando un proyecto requiere de una de ellas simplemente se referencia a través de un enlace, también nos permitirá ser más eficientes a la hora de crear nuevos proyectos, ya que solamente se descargarán aquellas nuevas dependencias. Instalación Linux Para los siguientes comandos no es necesario tener instalado Node.js. curl -fsSL https://get.pnpm.io/install.sh | sh - Si no tenemos instalado curl podemos intentar usando wget. wget -qO- https://get.pnpm.io/install.sh | sh - Windows El siguiente comando lo tendremos que ejecutar usando PowerShell. iwr https://get.pnpm.io/install.ps1 -useb | iex macOS Al igual que en Linux podremos hacer uso de los siguientes comandos y sin requerir Node.js. curl -fsSL https://get.pnpm.io/install.sh | sh - Si no tenemos instalado curl podemos intentar usando wget. wget -qO- https://get.pnpm.io/install.sh | sh - También podremos hacer uso del gestor de paquetes Homebrew. brew install pnpm Linux, macOS y Windows Si contamos con Node.js instalado en nuestro sistema entonces podremos activar PNPM usando una herramienta que este nos provee, de lo contrario te comparto un post donde detallo como instarlo. corepack enable corepack prepare pnpm@<version> --activate Artículo original dowar.xyz Red Hat Developer Promoted * Learn Kubernetes with Sandbox Create an application using plain Kubernetes instead of OpenShift in the Developer Sandbox. Get started *enc* Read next Build Your Own AI Search Engine: Setup with PostgreSQL and pgvector (Part 1) yukaty - Nov 5 Understanding Event-Driven Architecture in C# with Real-Life Scenarios Odumosu Matthew - Nov 5 How to embed link with preview in React Application Bojan Jagetic - Oct 13 Best IDEs for Node.js Development in 2025 Prashant Pujara - Nov 6 DowarDev Follow Freelance Web Developer. Defender of free technologies. In my free time I like to share my knowledge and help others. Work Freelance Web Developer Joined Dec 9, 2019 More from DowarDev * #spanish #webdev #laravel #tutorial Instal* Herramientas de Vue 3 #spanish #vue #webdev * * * * ",
    "url": "https://dev.to/dowar/instalar-pnpm-en-linux-macos-y-windows-29pm"
  },
  {
    "body": "* Follow Report Abuse Dulya Perera Software Engineering Undergraduate 🎓 Passionate STEM engineer since 2019 👩‍🎓 Geek since ever 👾 Sri Lanka Joined on Feb 9, 2020 Education Student @ Sri Lanka Institute of Information Technology Work Student * *. Got it Redis x DEV Hackathon Participant Awarded to everyone who participated in the 2022 Redis Hackathon on DEV. Great work, y'all! Got it Redis x DEV Hackathon Runner-Up Awarded for submitting an awesome project and was named a runner-up in the Redis x DEV Hackathon in 2022. Got it 1 We*t 2 comme*wo * two *1 *21 * *20 *20 * Codeland:Distributed 2020 Awarded for attending CodeLand:Distributed 2020! Got it More info about @dulyaaa GitHub Repositories Library-Management-System 📚 Library Management System | Dekstop Application | C# | Individual Project C# • 8 stars Procurement_Management_System_For_Construction_Industry 🏗 This is my individual part of the Case Study implementation of the 3rd Year 2nd Semester - Case Studies in Software Engineering(CSSE) module. Here we try to solve the difficulties faced in the procurement procedures in the construction industry. JavaScript • 5 stars Transportation_and_Scheduling_Management 🚛 This is my individual part of the Factory and Sales Management System implementation of the 2nd Year 2nd Semester - Information Technology Project(ITP) module. My function was Transportation and Scheduling Management. JavaScript • 4 stars Conference_Management_System 🌃 🚀This repository contains part of the ICAF Conference Management System, a 3rd Year 1st Semester group project of the Application Frameworks module. Here is the ICAF frontend. This is used to Deploy ICAF Frontend in the Heroku Server. Changes in the Repository reflects on the server with a new build. JavaScript • 3 stars E-commerce_mobile_app 🛍This is a group project for 2nd Year 2nd Semester - Mobile Application Development (MAD) module, mini-project assignment. Java • 3 stars Guess_The_Number_Android_App_Game 📱 Simple Android App Game using Kotlin Language. My first android mobile application. Kotlin • 1 star Learn-A-Flower 🌷 A mobile application built with Flutter that helps anyone learn about flowers! 🌻 Fork Dart • 1 star Pet_Care_Management_System 🐕 This is a group project for year 3 semester 2 - Software Project Management (SPM) module - SE3080, where we have built a Pet Care Management System. JavaScript • 1 star Property_Management_System 🏡 This is a group project for 2nd Year 1st Semester - Object Oriented Programming (OOP) module, where we have to build a Property Management System according to the OOP concept. CSS • 1 star Skills/Languages - Flutter - React.js - React-Native - HTML - CSS - JS Currently learning - Flutter - React-Native 14 posts published 17 comments written 25 tags followed 1. Let's Create GitHub Account * Sep 15 '22 1. Let's Create GitHub Account #github 1 reaction Add C*ith Dulya Perera? * Dulya Perera. * Dockerize Node.Js Application * Sep 15 '22 Dockerize Node.Js Application #docker #nodej #javascript 1 reaction 2 comments 2 min read Affordable Battery Lifespan 🔋⚡ * Sep 14 '22 Affordable Battery Lifespan 🔋⚡ #discuss #productivity #battery #lifespan 5 * \"Volunteer Up Community\" To Save and Love The World🌏🙌 * Aug 28 '22 \"Volunteer Up Community\" To Save and Love The World🌏🙌 #redishackathon #react #node #redis 9 *d Let's peek into machine learning🤖 * Jun 6 '22 Let's peek into machine learning🤖 7 * Nevertheless, Dulya Coded in 2022!👩‍💻 * Mar 8 '22 Nevertheless, Dulya Coded in 2022!👩‍💻 #wecoded 6 *d #5🏗 Procurement Management System For Construction Industry * Oct 21 '21 #5🏗 Procurement Management System For Construction Industry 5 * #4 🌃🚀 ICAF Conference Management System * Oct 21 '21 #4 🌃🚀 ICAF Conference Management System * #3 🚛 Transportation and Scheduling Management System * Oct 21 '21 #3 🚛 Transportation and Scheduling Management System 1 reaction 3 comments 2 min read #2 🛍E-Commerce Mobile App🛒 * Oct 21 '21 #2 🛍E-Commerce Mobile App🛒 * Hacktoberfest 2021 * Oct 1 '21 Hacktoberfest 2021 #hacktoberfest #hacktoberfest2021 5 * #1 📚Library Management System * Sep 14 '21 #1 📚Library Management System #library #system #csharp #desktopapplication 2 *d My Contributed Projects * Sep 14 '21 My Contributed Projects #projects #systems #contribution #series 3 reactions *st 2020 * Oct 17 '20 Hacktoberfest 2020 #hacktoberfest 4 reactions 1 comment 1 *onsor Neon * ",
    "url": "https://dev.to/dulyaaa"
  },
  {
    "body": "* 78 Add reaction 78 Like 0 *s 0 Fire 6 Jump to Comments 133 * Dušan Posted on Sep 8 • Updated on Sep 9 78 Building a Visual Studio Code Extension to Generate Files from Templates #vscode #node #javascript Project: CFFT - Create Files From Template - Visual Studio Code Extension Visual Studio Marketplace GitHub Last year, I published a blog post on Dev.to titled \"Let’s create a Node CLI for generating files from templates!\". In it, I detailed how to create a Node.js CLI tool to help developers generate file structures based on customizable templates. This tool saved me countless hours as a developer working with repetitive tasks. This time, I’ve taken the next step—extending that project into a Visual Studio Code extension, built on the same foundation, but bringing that power directly into the VS Code interface. In this post, I’ll cover: What CFFT is and how to use it, How to get started with Visual Studio Code extensions, Tips on code organization when building both CLI tools and VS Code extensions, How to publish your extension for others to use. What is CFFT and How to Use it CFFT (Create Files From Template) is a Visual Studio Code extension that simplifies file generation. If you work with any library, framework, or programming language that lacks an official CLI, CFFT can be a game-changer, saving you time and effort by automating repetitive tasks. As a React/Next.js developer, I often found myself recreating the same folder and file structures repeatedly. That’s why I originally built the CFFT CLI. This new extension brings the same functionality to VS Code, allowing you to generate files with just a right-click inside the Explorer pane. Instead of running a command in the terminal, now you can generate files directly from the VS Code interface—making the process even more streamlined. To learn more about the extension or install it, visit the Visual Studio Marketplace. Build Your First VS Code Extension Building a VS Code extension isn’t as complex as it might seem, especially if you’re already familiar with JavaScript or TypeScript. In my case, I was able to reuse a lot of the logic from the original CFFT CLI project. On a sunny afternoon, the idea clicked, and I got to work. The Plan As with any project, planning is key. It minimizes trial-and-error and sets a clear roadmap for implementation. Here’s how I approached it: Decide how to reuse the existing CLI code. Create the Visual Studio Code extension project (research the docs, and set up the basics). Implement a command to generate files based on a template. Add this command to the context menu, available when right-clicking on directories. Reusing the CLI Code Code reusability is a developer’s best friend. I wanted to maximize this for the CFFT extension, so I decided to create a new base package: @beezydev/create-files-from-template-base. This allowed me to reuse shared code between the CLI tool and the VS Code extension, without duplicating effort. Publishing this shared logic as an NPM package meant that both projects could easily import and use it: \"dependencies\": { \"@beezydev/create-files-from-template-base\": \"^1.5.14\" } import { createAllDirectoriesAndFilesFromTemplate } from \"@beezydev/create-files-from-template-base/files\"; More details on publishing NPM packages can be found here. Creating the VS Code Extension Before diving in, I familiarized myself with the official VS Code extension documentation. I recommend starting with their guide on Your First Extension. To kick off the project, I used the following command: npx --package yo --package generator-code -- yo code This Yeoman generator helps scaffold a new VS Code extension. After answering some setup questions (e.g., whether to use TypeScript, eslint, etc.), you’ll have a basic structure ready to go. Creating the Command The main functionality of your extension is defined in the extension.ts file. Here’s an example of how to register a command that gets triggered when users want to generate files from a template: import * as vscode from \"vscode\"; export function activate(context: vscode.ExtensionContext) { const cfftExecuteCommand = vscode.commands.registerCommand( \"cfft.newFileFromTemplate\", // the command name async (uri: vscode.Uri) => { // the callback // Your code goes here } ); context.subscriptions.push(cfftExecuteCommand); } Make sure you also register the command in package.json: \"contributes\": { \"commands\": [ { \"command\": \"cfft.newFileFromTemplate\", \"title\": \"New From Template... (CFFT)\" } ] } This registers the command, which you can now call via the command palette or by adding it to a context menu. Adding to the Context Menu I wanted to make the command accessible when right-clicking on a folder, just after the “New File…” and “New Folder…” options. To achieve this, I modified the package.json: \"contributes\": { \"commands\": [ { \"command\": \"cfft.newFileFromTemplate\", \"title\": \"New From Template... (CFFT)\" } ], \"menus\": { \"explorer/context\": [ { \"command\": \"cfft.newFileFromTemplate\", \"when\": \"explorerResourceIsFolder\", \"group\": \"navigation@9\" } ] } } This configuration ensures the command only appears when the user right-clicks on a folder in the Explorer pane. Publishing the Extension Once your extension is ready, the final step is making it available to the world. Fortunately, publishing is straightforward thanks to VS Code’s extension publishing guide. Start by creating a solid README.md to explain how to use your extension. You’ll also need to ensure that your package.json includes the necessary fields: name - The extension’s name, displayName - How it appears in the marketplace, description - A brief explanation of what it does, icon - path to the icon. I created the images folder and uploaded the icon there. publisher - Your publisher ID. See the docs to find out how to get it. In my case, it's my name: version - Current version, categories - Help users find your extension: repository - the link to the repository - if you want to expose your code, keywords - Tags that improve discoverability: See more in package.json. Conclusion Creating a VS Code extension is a rewarding experience, especially when you build something like CFFT that saves time for developers. As time is our most valuable resource, tools like this are invaluable. I hope this post helps you in your own journey of building extensions or automating workflows. Thank you for reading! Heroku *referenc* Top comments (6) * George WL George WL George WL Follow Web and Software Frontend Developer. Used to work in Full-stack JavaScript.Been at this for a few years now, and think I now understand my specific domain pretty well. Still a lot to learn though. Location Manchester, UK Education Web Systems Design BSc at Sheffield Hallam University, Sheffield, UK Work Front End Software Developer at Autodesk Joined Sep 16, 2017 • Sep * I love how much depth you went into, not too much, not too little, just the perfect amount 2 likes Like Reply Martin Baun Martin Baun Martin Baun Follow Tech Lead and Founder Baunit.com Learn development, software, business, and process building! Checkout our tools below. Goleko.com | Duckist.com | VideoFeedbackr.com | ToolBun.com | ElegantDoc.com Location Sofia, Bulgaria Work CTO -BaunIT Joined Oct 7, 2021 • Sep 9 Copy link Hide Report abuse Neat approach! Thank you for sharing. 2 likes Like Reply Wizard Wizard Wizard Follow Seeker Joined Jan 12, 2024 • Sep 9 Copy link Hide Report abuse Looks very interesting, gonna give it a shot 2 likes Like Reply Oleh Nazarovych Oleh Nazarovych Oleh Nazarovych Follow YouTube: https://www.youtube.com/channel/UCnCZlRyvDjked89gsye-tyw Instagram: https://www.instagram.com/oleh_nazarovych/ TikTok: https://www.tiktok.com/@oleh_nazarovych Twitter: https://x.com/oleh_n Joined Jul 25, 2024 • Sep 8 * article 2 likes Like Reply Afzal Hussain Afzal Hussain Afzal Hussain Follow Joined Sep 9, 2024 • Sep 10 C* gave me ideas though I've delved intp this but now feel afresh. Nice! 2 likes Like Reply dansasser dansasser dansasser Follow I am 50 years old, working as a software and systems design engineer for my own startup at the moment. I have a background in various languages and frameworks and I'm here to share my knowledge. Email info@dansasser.me Location Oklahoma City Education School of Hard Knocks Work Software & Systems Design Engineer Joined Sep 27, 2023 • Sep 26 * approach for for when I'm not using the Astro-SSR-SPA 1 like Like Reply * Neon **. Try Neon for Free → Read next Troubleshooting Common Issues of React Native Firebase- Cloud Messaging Virali Vasa - Oct 31 Is React-query out of date? This new favorite makes cross-component requests a breeze! Eddie Kimpel - Oct 30 🔥14 game-changing open-source tools every developer should know 🚀 Nevo David - Nov 8 How to Use the Sui TypeScript SDK Ukeje Chukwuemeriwo Goodness - Oct 26 Dušan Follow Full stack developer with a focus on front-end development and a strong skillset in JavaScript technologies, including React and Node.js. Proficient in building modern and responsive web applications. Location Belgrade, Serbia Education University of Belgrade, Faculty of Organisational Sciences (Software Engineering) Work Senior Frontend Developer & Frontend Team Lead at InterVenture / GOWAGO AG Joined Feb 6, 2018 More from Dušan Let’s create a Node CLI for generating files from templates! #node #npm #javascript #cli Heroku *references R* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/dusan100janovic/create-a-visual-studio-code-extension-1i7c"
  },
  {
    "body": "* 55 Add reaction 49 Like 6 *s 0 Fire 11 Jump to Comments 24 * Davide de Paolis Posted on May 15, 2019 • Updated on May 31, 2021 49 6 Stop Node Server How to kill a node process #beginners #javascript #node #tips While working on a full-stack application it might happen that you end up with a bunch of node processes running at the same time. It could be some automation script or a script that watches and executes your unit-tests while you code/TDD. Most likely it is Webpack running and serving your frontend on localhost and the node app that serves the REST API your frontend is connecting to. In both cases these processes would occupy a specific port. For example, our current React App is served on localhost:3000 and the backend runs on localhost:3001 via serverless offline. Normally you would start those processes via the command line with something like: npm run react-scripts start or sls offline start --port 3001 When you are running those, you can quickly shut them down with <Ctrl> + C If you started them via a Debug Configuration in Visual Studio Code or IntelliJ IDEA you can stop the process clicking the Stop button. Until here no problem. Sometimes though it happens that you started some process and then despite closing the IDE or the Terminal they still hang there somewhere, and when you try to run them again, then you get errors that the port is occupied. I don't know why or how that happens, but every now and then ( weeks or months) I find myself googling for the right command to use ( i tend to forget quickly stuff that I don't use often - and that I can google under 20 seconds ). Therefore I will drop it here, it might be useful for someone else too! ps -ef | grep node # or ps aux | grep node This commands will print all the node process running, it might be confusing at first since you might have other stuff that is not related to the project you are working on (like Slack or Postman). Just find the node process pointing to your script or js file and note down the process ID (second value from the left) If you find yourself with a wall of text because you have many processes running, then you could search the processes opened by port ( like normally when I start a react application is on port 3000 while its backend is on port 3001: lsof -i :3001 Once you have your process and its ID.. then just kill it without mercy! kill -9 PROCESS_ID Hope it helps _Su* UI Component * retain full ownership *ion limits. Learn more Top comments (11) * jesús gollonet jesús gollonet jesús gollonet Follow Tech Director | Backend, Ops and Technical Communication at North Kingdom | Ex creative coder climbing up (serverless, IAC) and down (operating systems, c) the stack. Location Málaga Pronouns he / him Work Tech Director at North Kingdom Joined May 15, 2019 • May 28 '19 C* usually good to try a kill -15 PROCESS_ID before resorting to kill -9, since it gives the stuck process a chance to clean up before dying. Probably overkill for local development servers, but definitely preferrable for things that may have state such as a database. 7 likes Like Reply Davide de Paolis Davide de Paolis Davide de Paolis Follow Trouble maker and Problem solver ⚙️🔧 Loves simplicity, hates bullshit 💩. Productivity obsessed, avid learner 🖥🚀 Sport and outdoor freak 🧗⛰ Metalhead 🎸🤘 Father of 2 👨‍👩‍👦‍👦 Opinions are my own Location Hamburg Work Engineering Manager @ sevDesk Joined Jan 28, 2019 • May 28 '* thanx for pointing this out. :-) 2 likes Like Reply Jose Tandavala Jose Tandavala Jose Tandavala Follow Software Engineer @ ITGest | practioner of Clean Code, TDD, DDD, CQRS, ES, EDA, ML enthusiast Email jose.tandavala@gmail.com Location Angola - Luanda Education BC Computer Engineering Work Software Engineer @ ITGest Joined Aug 6, 2019 • Jun 23 '22 Copy * a lot 2 likes Like Reply Michael Stelly Michael Stelly Michael Stelly Follow 15+ year javascript mobile app developer seeking roles to leverage this react-native experience for consumer and enterprise mobile applications. Location Tulsa, OK Education Master's of Science in Computer Information Technology Joined Mar 12, 2018 • Jun 4 '* How did you format your output? Mine appears as a wall o' text like this: 502 1128 1125 0 3:17PM ?? 0:31.12 /Applications/Reactotron.app/Contents/Frameworks/Reactotron Helper (Renderer).app/Contents/MacOS/Reactotron Helper (Renderer) --type=renderer --field-trial-handle=1718379636,9355752010542677649,1429803248351936294,131072 --disable-features=SpareRendererForSitePerProcess --lang=en-US --app-path=/Applications/Reactotron.app/Contents/Resources/app.asar --node-integration --no-sandbox --no-zygote --background-color=#fff --num-raster-threads=2 --enable-zero-copy --enable-gpu-memory-buffer-compositor-resources --enable-main-frame-before-activation --service-request-channel-token=3685712697854128908 --renderer-client-id=5 --no-v8-untrusted-code-mitigations 502 15785 15718 0 6:18PM ?? 0:15.06 /Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper (Renderer).app/Contents/MacOS/Code Helper (Renderer) --type=renderer --disable-color-correct-rendering --field-trial-handle=1718379636,9347403567474433047,3772520779013372132,131072 --disable-features=LayoutNG,PictureInPicture,SpareRendererForSitePerProcess --lang=en-US --standard-schemes --secure-schemes=vscode-resource --bypasscsp-schemes --cors-schemes=vscode-resource --fetch-schemes=vscode-resource --service-worker-schemes --app-path=/Applications/Visual Studio Code.app/Contents/Resources/app --node-integration --no-sandbox --no-zygote --background-color=#282a36 --disable-blink-features=Auxclick --num-raster-threads=2 --enable-zero-copy --enable-gpu-memory-buffer-compositor-resources --enable-main-frame-before-activation --service-request-channel-token=1663595825542118109 --renderer-client-id=7 --no-v8-untrusted-code-mitigations 502 18962 15718 0 11:15AM ?? 2 likes Like Reply Egbert Nierop Egbert Nierop Egbert Nierop Follow Dutch dude Location Dutch Joined Nov 4, 2020 • Dec 8 '* what about killall node That's all. Still this is a nasty issue. On ubuntu after several debug sessions, the memory runs out and as known, linux cannot deal with that. Just run killall before debug, also is not a real solution. 1 like Like Reply Aaron Aaron Aaron Follow Senior Frontend Developer and AWS Certified Solutions Architect Location Canada Joined Jan 29, 2023 • Feb 12 '23 Copy l* this ! 1 like Like Reply Mahamadou-Nouridine Mahamadou-Nouridine Mahamadou-Nouridine Follow developper(Mern), I learned a lot of thing, and I'm continuing to learn, I like helping people in what I know and I frequently ask question Joined Sep 15, 2022 • Oct 12 '22 Co*s a lot I'm not longer stocked now 1 like Like Reply Sukriti Aggarwal Sukriti Aggarwal Sukriti Aggarwal Follow Joined Jun 10, 2021 • Jun 10 '21 Copy * so much. This article really helped me solve a problem that was messing with me. 1 like Like Reply douglasvinicio douglasvinicio douglasvinicio Follow Location Montreal Work Programming Student Joined Mar 29, 2020 • Mar 29 '20 Copy *! Helped a lot!!! 1 like Like Reply guptshruti2003 guptshruti2003 guptshruti2003 Follow Location bentonville,arkansas Work front end developer Joined Apr 24, 2020 • Apr 24 '20 Co* I'm unable to kill this DO I have to kill usr/local/bin/node index.js. I tried by its process ID but nothing shows 1 like Like Reply harry harry harry Follow with 20 years of ms web-dev, found Javascript and thought it over again. Nothing better than JavaScript! Location Mansfield, England Work self Joined Oct 29, 2022 • Nov 1 '* lovin' this::: lsof -i :3001 thanks *ion (11 comments) * * Essential Laravel Tips form and for Entry-Level Developers 🚀 Harold Defree - Nov 3 AI Tools Every Mobile Developer Needs to Use Anna Boiko - Oct 30 Building a Smooth, Keyboard-Aware Component in React Native Ajmal Hasan - Nov 3 5 Essential Tips for AWS Beginners: What I Wish I’d Known Starting Out with Cloud Computing Maurya Lal K M - Oct 30 Davide de Paolis Follow Trouble maker and Problem solver ⚙️🔧 Loves simplicity, hates bullshit 💩. Productivity obsessed, avid learner 🖥🚀 Sport and outdoor freak 🧗⛰ Metalhead 🎸🤘 Father of 2 👨‍👩‍👦‍👦 Opinions are my own Location Hamburg Work Engineering Manager @ sevDesk Joined Jan 28, 2019 More from Davide de Paolis Fixing Error spawnSync bash ENOENT occurring during CDK Lambda Bundling on CI pipeline #debugging #continuosintegration #node #lambda How to Filter Unique values in CloudWatch Insights (+ 3 other query snippets) #debugging #aws #techlead #beginners Enable AWS CLI Completer for increased productivity #aws #awscommunitybuilder #productivity #tips Neon **. Create Account → 👋 ** * ",
    "url": "https://dev.to/dvddpl/how-to-kill-a-node-process-5d13"
  },
  {
    "body": "* 111 Add reaction 78 Like 9 Unicorn 8 Exploding Head 8 Raised Hands 8 Fire 18 Jump to Comments 74 * Marcus Kohlberg for Encore Posted on Sep 4 78 9 8 8 8 * #node #javascript #typescript #backenddevelopment A couple of months ago we released Encore.ts — an Open Source backend framework for TypeScript. Since there are already many frameworks out there, we want to share some of the outlier design decisions we've made and how they lead to remarkable performance numbers. We recently published performance benchmarks showing that Encore.ts achieves 9x request throughput compared to Express.js, and 2x compared to Fastify. Today, we're continuing on our performance journey by diving into how Encore.ts achieves incredibly fast cold start startup times. Performance benchmarks This time we've benchmarked Encore.ts, Fastify, NestJS and Express to see how each framework performs when it comes to cold startup times. The benchmark program registers 10 API endpoints, each with a simple schema, and sets up schema validation. For schema validation we used Zod where possible. In the case of Fastify we used Ajv as the officially supported schema validation library. We measured the time from when JavaScript code begins executing until the server is ready to accept incoming requests. For each benchmark we took the best result of five runs. Enough talk, let's dig into the numbers! Encore.ts cold starts are 17x faster than NestJS and Fastify (Check out the benchmark code on GitHub.) As you can see, Encore.ts achieves remarkable fast cold startup times, over 5x faster than Express and over 17x faster than NestJS. How is this possible? From our testing we've identified two major sources of performance, both related to how Encore.ts works under the hood. But before we get there, let's talk about what cold starts really are, and why they matter. What is a cold start? In the context of serverless, a cold start is when the underlying platform first needs to spins up a new instance of your server in order to serve an incoming request. (It can also refer to the first time a new instance of your server is started up to handle a request, for example after a deployment.) Since the request is effectively on hold until the process starts up and is ready to handle the request, reducing cold startup times can have a large impact on the long-tail latency of your application. This is especially important for distributed systems where you have multiple serverless functions, as it's much more likely you will encounter a cold start in some part of the system when handling a request. The anatomy of a cold start Exactly what happens during a cold start depends a bit on the platform you're deploying to (Kubernetes, Lambda, Cloud Run, etc.). But in general, the process looks something like this: Platform downloads the code/container image for the serverless function Platform spins up a new instance of the container/serverless function/container The container/function initializes itself (importing JavaScript modules, running initialization code, etc.) After these initialization steps the cold start is complete, and the serverless function begins processing the incoming request. The first two steps are largely out of our control (other than by making sure the size of the code/container is optimized), so let's focus our attention on the third step. In fact, let's further break down the third step, and assuming we're running Node.js: The node process starts up and begins initializing the V8 JavaScript engine The entrypoint file is parsed, loaded, and begins executing application code When the JavaScript code executes import and require statements, yet more files are loaded, parsed and executed. (Repeat many times for applications with lots of dependencies.) Finally, after all dependencies have been loaded and all the initialization code has executed, the container/serverless function is ready to handle incoming requests. Optimizing cold starts The breakdown above gives us clear targets for optimization, and Encore.ts heavily optimizes all the steps it has control over. Optimization 1: Rust runtime Encore.ts is implemented in Rust and loaded into Node.JS as a native module. This has several benefits for cold starts: Less JavaScript to parse and execute. Since JavaScript is an interpreted language, all JavaScript code needs to be read from disk, parsed, and executed. Encore.ts, as a pre-compiled native module, loads extremely quickly and doesn't need to be parsed or executed by the JavaScript engine (V8). Zero NPM dependencies. Since Encore.ts implements all its functionality using Rust, it has no NPM dependencies whatsoever, which further reduces the amount of JavaScript that needs to be executed during a cold start. Pre-compiled and optimized. JavaScript relies heavily on just-in-time compilation (JIT), where code that gets executed repeatedly gets optimized by the JavaScript engine. This makes a lot of sense for an interpreted language, but it also means that execution is quite a bit slower the first time a piece of code runs, which impacts cold starts considerably. Since Encore.ts is implemented in Rust, it's pre-compiled and heavily optimized for the platform it's running on, which means it's fast from the first time it's executed. Optimization 2: Efficient Docker images Encore.ts by default builds minified Docker images, by only including transpiled JavaScript and the necessary dependencies to run the application. This reduces bundle sizes, which in turn reduces the time it takes to download and start up the container. Additionally, several compute platforms have added support for streaming Docker images, which means that the platform can start the container before the entire image has been downloaded. Encore.ts has built-in support for this, and automatically prioritizes the parts of the image that are needed to reduce cold starts. Wrapping up By combining a Rust runtime with optimized Docker images, Encore.ts is able to achieve remarkable cold start times, which can have a large impact on the long-tail latency of your application. If performance matters to your project, it might be a good idea to try out Encore.ts. And it's all Open Source, so you can check out the code and contribute on GitHub. Or just give it a try and let us know what you think! 👋 Before you go * Please say \"thank you\" by commenting on this post! Everyone is welcome Top comments (18) * DevMirza DevMirza DevMirza Follow MERN Stack Developer Discord Bot Developer CS Student 22 Years Old Location Lahore, Pakistan Joined Dec 16, 2019 • Sep 6 Copy link Hide Report abuse Babe wake up! New framework just dropped 🔥 10 likes Like Reply Jesse Reese Jesse Reese Jesse Reese Follow I'm a full stack software engineer with 10+ years in web development, utilizing a wide array of web technologies. As well as constantly seeking out emergent open source technologies. Location Phoenix, AZ Education Berklee College of Music Work Senior Full Stack Software Engineer at ASU EdPlus Joined Sep 18, 2019 • Sep * Haha 1 like Like Reply Eugene Eugene Eugene Follow Joined Oct 29, 2021 • Sep 5 Copy link Hide Report abuse As always, the hundredth js framework released in a week claims to be faster than rust… 8 likes Like Reply AndrewBarrell1 AndrewBarrell1 AndrewBarrell1 Follow Joined Feb 5, 2023 • Sep 5 C*on't remember reading anywhere that it claimed to be faster than rust, only that it is built in rust. Where did it claim that? 10 likes Like Reply Eugene Eugene Eugene Follow Joined Oct 29, 2021 • Sep 5 Copy link Hide Report abuse For ignorant, it was a metaphor 2 likes Like Thread Big Will Big Will Big Will Follow Focused on Product Design and Development Joined Oct 3, 2019 • Sep 5 Copy link Hide Report abuse Please stop with the metaphors. It was a misleading comment 7 likes Like Thread AndrewBarrell1 AndrewBarrell1 AndrewBarrell1 Follow Joined Feb 5, 2023 • Sep 5 * wasn't a metaphor for anything. Just a guy that didn't read an article but still had something negative to say. Willfully ignorant and calling other people ignorant? I actually read the article 5 likes Like Thread Eugene Eugene Eugene Follow Joined Oct 29, 2021 • Sep 5 • Edited on Sep 5 • * I come across tens of similar articles about “how good this new js framework, how it outperforms everything else” each day. Shit. 3 likes Like Reply Kusuma At Essa E Kusuma At Essa E Kusuma At Essa E Follow Email Joined Aug 29, 2024 • Sep 5 Copy link Hide Report abuse Bio 1 like Like Reply Lee Nattress Lee Nattress Lee Nattress Follow Work Senior Skunkworks Engineer at WorkCast Joined Apr 18, 2020 • Sep 5 Copy link Hide Report abuse Am I reading this correctly, that you are dealing with multiple endpoints in a single Lambda? Don't do this. One per Lambda. This benchmark is pointless. 6 likes Like Reply Mohamed Lamine Allal Mohamed Lamine Allal Mohamed Lamine Allal Follow Joined Feb 4, 2019 • Sep 11 • Edited on Sep 11 • * Container serverless. Like cloud run does have cold starts. And this would be useful for them. Microservices applications ... Having containers get started only when there is traffic save compute time and can be of better value for some type of applications. And u would have cold starts. Nice also to know the context of encore encore.dev/docs/introduction Microservices, cloud, distributed systems ... 3 likes Like Reply Gerson Flores Gerson Flores Gerson Flores Follow Joined Sep 11, 2024 • Sep 11 *e approach of handling multiple endpoints with a single lambda is known as Lambda Proxy Integration, I don't see any problem with that approach. 3 likes Like Reply Nevo David Nevo David Nevo David Follow Founder of Postiz, an open-source social media scheduling tool. Running Gitroom, the best place to learn how to grow open-source tools. Education Didn't finish high school :( Pronouns Nev/Nevo Work OSS Chief @ Gitroom Joined Feb 23, 2022 • Sep 6 C*m just looking at Encore. I thought it could be a nice NestJS alternative, but after going in, I realized it's more like Express. I am unsure why you compare a robust IoC framework to express/fastify style. Also, who runs NestJS on a lambda haha 2 likes Like Reply Mohamed Lamine Allal Mohamed Lamine Allal Mohamed Lamine Allal Follow Joined Feb 4, 2019 • Sep 11 • Edited on Sep 11 • * Cloud run ... Container serverless. Microservices .. 2 likes Like Reply Thang Vu Thang Vu Thang Vu Follow I'm a web developer, I like building things... Location Viet Nam Work Team Leader at Offspring Digital Viet Nam Joined Oct 25, 2019 • Oct 12 C*o! What's wrong with running NestJS on Lambda? :) 1 like Like Reply JK JK JK Follow Joined May 23, 2024 • * I feel like this is quite flawed. My typical start up time for my various nestjs apps are measured in milliseconds. 1 like Like Reply programORdie programORdie programORdie Follow Hi! Thank for clicking on my profile! I am a dev that doesn't know how to stop progamming, and i like making AI's that gonna take over the world. Location Mars Pronouns He/him/Alien Joined Mar 21, 2024 • Sep * Most hosting services don’t even support loading binaries/native modules… *ion (18 comments) *. * * *! ymc9 - Nov 7 Store UI State in localStorage with Stimulus Rails Designer - Nov 7 Freshman in College? Here’s How I Started with Web Development Metta Surendhar - Nov 7 Methods and Implementations of Single Sign-On (SSO) Bohdan Lukianets - Nov 7 Encore Follow Encore – Backend Development Platform Backend framework and cloud platform for building distributed systems with automated infrastructure and end-to-end type-safety. Get Started More from Encore TypeScript vs Go: Choosing Your Backend Language #go #* *? #*dev NestJS vs Encore.ts: Choo* #javascript #typescript #microservices #webdev _SurveyJS Promoted * Build Your Own Forms Without Manual Coding SurveyJS UI libraries let you build a JSON-based *, * with no user limits. Includes * logic, an integrated CS*ics, and more. View demo 👋 ** * ",
    "url": "https://dev.to/encore/encorets-17x-faster-cold-starts-than-nestjs-fastify-27cg"
  },
  {
    "body": "* 39 Add reaction 15 Like 6 Unicorn 6 Exploding Head 6 Raised Hands 6 Fire 7 Jump to Comments 12 * Marcus Kohlberg for Encore Posted on Oct 1 15 6 6 6 6 This TypeScript framework * ⚡️ #typescript #javascript #node #opensource A few months ago we released Encore.ts — an Open Source backend framework for TypeScript. Since there are already a lot of frameworks out there, we wanted to share some of the uncommon design decisions we've made and how they lead to remarkable performance numbers. Performance benchmarks We've previously published benchmarks showing how Encore.ts is 9x faster than Express and 2x faster than Fastify. This time we've benchmarked Encore.ts against Elysia and Hono, two modern high-performance TypeScript frameworks. We benchmarked each framework both with and without schema validation, using TypeBox for validation with ElsyiaJS and Hono as it is a natively supported validation library for these frameworks. (Encore.ts has its own built-in type validation that works end-to-end.) For each benchmark we took the best result of five runs. Each run was performed by making as many requests as possible with 150 concurrent workers, over 10s. The load generation was performed with oha, a Rust and Tokio-based HTTP load testing tool. Enough talk, let's see the numbers! Requests per second: Encore.ts * when using type validation (Check out the benchmark code on GitHub.) Aside from performance, Encore.ts achieves this while maintaining 100% compatibility with Node.js. How it works: Outlier design decisions How is this possible? From our testing we've identified three major sources of performance, all related to how Encore.ts works under the hood. 1. Encore.ts is multi-threaded and powered by a Rust runtime Node.js runs JavaScript code using a single-threaded event loop. Despite its single-threaded nature this is quite scalable in practice, since it uses non-blocking I/O operations and the underlying V8 JavaScript engine (that also powers Chrome) is extremely optimized. But you know what's faster than a single-threaded event loop? A multi-threaded one. Encore.ts consists of two parts: A TypeScript SDK that you use when writing backends using Encore.ts. A high-performance runtime, with a multi-threaded, asynchronous event loop written in Rust (using Tokio and Hyper). The Encore Runtime handles all I/O like accepting and processing incoming HTTP requests. This runs as a completely independent event loop that utilizes as many threads as the underlying hardware supports. Once the request has been fully processed and decoded, it gets handed over to the Node.js event-loop, and then takes the response from the API handler and writes it back to the client. (Before you say it: Yes, we put an event loop in your event loop, so you can event-loop while you event-loop.) 2. Encore.ts pre-computes request schemas Encore.ts, as the name suggests, is designed from the ground up for TypeScript. But you can't actually run TypeScript: it first has to be compiled to JavaScript, by stripping all the type information. This means run-time type safety is much harder to achieve, which makes it difficult to do things like validating incoming requests, leading to solutions like Zod becoming popular for defining API schemas at runtime instead. Encore.ts works differently. With Encore, you define type-safe APIs using native TypeScript types: import { api } from \"encore.dev/api\"; interface BlogPost { id: number; title: string; body: string; likes: number; } export const getBlogPost = api( { method: \"GET\", path: \"/blog/:id\", expose: true }, async ({ id }: { id: number }) => Promise<BlogPost> { // ... }, ); Encore.ts then parses the source code to understand the request and response schema that each API endpoint expects, including things like HTTP headers, query parameters, and so on. The schemas are then processed, optimized, and stored as a Protobuf file. When the Encore Runtime starts up, it reads this Protobuf file and pre-computes a request decoder and response encoder, optimized for each API endpoint, using the exact type definition each API endpoint expects. In fact, Encore.ts even handles request validation directly in Rust, ensuring invalid requests never have to even touch the JS layer, mitigating many denial of service attacks. Encore’s understanding of the request schema also proves beneficial from a performance perspective. JavaScript runtimes like Deno and Bun use a similar architecture to that of Encore's Rust-based runtime (in fact, Deno also uses Rust+Tokio+Hyper), but lack Encore’s understanding of the request schema. As a result, they need to hand over the un-processed HTTP requests to the single-threaded JavaScript engine for execution. Encore.ts, on the other hand, handles much more of the request processing inside Rust, and only hands over the decoded request objects. By handling much more of the request life-cycle in multi-threaded Rust, the JavaScript event-loop is freed up to focus on executing application business logic instead of parsing HTTP requests, yielding an even greater performance boost. 3. Encore.ts integrates with infrastructure Careful readers might have noticed a trend: the key to performance is to off-load as much work from the single-threaded JavaScript event-loop as possible. We've already looked at how Encore.ts off-loads most of the request/response lifecycle to Rust. So what more is there to do? Well, backend applications are like sandwiches. You have the crusty top-layer, where you handle incoming requests. In the center you have your delicious toppings (that is, your business logic, of course). At the bottom you have your crusty data access layer, where you query databases, call other API endpoints, and so on. We can't do much about the business logic — we want to write that in TypeScript, after all! — but there's not much point in having all the data access operations hogging our JS event-loop. If we moved those to Rust we'd further free up the event loop to be able to focus on executing our application code. So that's what we did. With Encore.ts, you can declare infrastructure resources directly in your source code. For example, to define a Pub/Sub topic: import { Topic } from \"encore.dev/pubsub\"; interface UserSignupEvent { userID: string; email: string; } export const UserSignups = new Topic<UserSignupEvent>(\"user-signups\", { deliveryGuarantee: \"at-least-once\", }); // To publish: await UserSignups.publish({ userID: \"123\", email: \"hello@example.com\" }); \"So which Pub/Sub technology does it use?\" — All of them! The Encore Rust runtime includes implementations for most common Pub/Sub technologies, including AWS SQS+SNS, GCP Pub/Sub, and NSQ, with more planned (Kafka, NATS, Azure Service Bus, etc.). You can specify the implementation on a per-resource basis in the runtime configuration when the application boots up, or let Encore's Cloud DevOps automation handle it for you. Beyond Pub/Sub, Encore.ts includes infrastructure integrations for PostgreSQL databases, Secrets, Cron Jobs, and more. All of these infrastructure integrations are implemented in the Encore.ts Rust Runtime. This means that as soon as you call .publish(), the payload is handed over to Rust which takes care to publish the message, retrying if necessary, and so on. Same thing goes with database queries, subscribing to Pub/Sub messages, and more. The end result is that with Encore.ts, virtually all non-business-logic is off-loaded from the JS event loop. In essence, with Encore.ts you get a truly multi-threaded backend \"for free\", while still being able to write all your business logic in TypeScript. Conclusion Whether or not this performance is important depends on your use case. If you're building a tiny hobby project, it's largely academic. But if you're shipping a production backend to the cloud, it can have a pretty large impact. Lower latency has a direct impact on user experience. To state the obvious: A faster backend means a snappier frontend, which means happier users. Higher throughput means you can serve the same number of users with fewer servers, which directly corresponds to lower cloud bills. Or, conversely, you can serve more users with the same number of servers, ensuring you can scale further without encountering performance bottlenecks. While we're biased, we think Encore offers a pretty excellent, best-of-all-worlds solution for building high-performance backends in TypeScript. It's fast, it's type-safe, and it's compatible with the entire Node.js ecosystem. And it's all Open Source, so you can check out the code and contribute on GitHub. Or just give it a try and let us know what you think! Heroku *refer* Top comments (7) * Matt Matt Matt Follow Tech-savvy, passionate about products - Maintainer of the Perseid Framework - Open-source defender Work CTO / CPO Joined Sep 7, 2024 • Oct 1 Copy link Hide Report abuse Wondering where the performance race is going to end 😶‍🌫️ It would be great to have some consolidation amongst all these server libraries. 1 like Like Reply * * 2 Copy link Hide Report abuse Aside from performance, what do you think are the most important features/characteristics for a framework? 1 like Like Reply Matt Matt Matt Follow Tech-savvy, passionate about products - Maintainer of the Perseid Framework - Open-source defender Work CTO / CPO Joined Sep 7, 2024 • Oct 2 Copy link Hide Report abuse To me, the 3 most important things: Performance (of course): the more raw req/sec you can handle, the better (either to scale or to reduce infrastructure costs) Security, standards and best practices: just the fundamentals (proper protocols implementation, error handling, middlewares support), no fancy stuff Developer experience: setup a basic server and adding endpoints must be really easy and require only a few lines of code All the rest (TLS/SSL, HTTP2/3, data parsing and validation, data serialization, special headers, ...) should either be handled by the front server/load balancer (like nginx, traeffic, to name a few), or by existing libraries that are already doing a pretty amazing job at it (Ajv my love). 3 likes Like Thread * * 3 Copy link Hide Report abuse Sounds like you would like a lot about Encore.ts then. If you haven't check out the introduction on encore.dev/ to see how Encore helps with standardization, security, observability, and developer experience. :) 1 like Like Reply Matt Matt Matt Follow Tech-savvy, passionate about products - Maintainer of the Perseid Framework - Open-source defender Work CTO / CPO Joined Sep 7, 2024 • Oct 2 Copy link Hide Report abuse Also, I don't consider Elysia, Express, Fastify, Hono nor Encore to be real frameworks. They're simply HTTP server libs. NextJS, Perseid, Django, are actual frameworks: they enforce a global structure and way to develop applications or websites , with much more constraints that these server libs. But that's just a matter of terminology ;) 1 like Like Reply Nathaniel Nathaniel Nathaniel Follow Location Lagos, Nigeria Work Backend Developer at Scelloo Joined Mar 31, 2021 • Oct 2 * @marcuskohlberg . An issue I've found with the tutorial or educational content on getting started with Encore is the lack of structure, I don't know if this is a fault of the content creator or encore itself. These example can't be used in a production application. I'm not seeing a way to have a feature/modular application. Where do I create my feature folders? How do I create my controllers? How do I create my service files for my controllers ? How and where do I create my DTOs ? e.t.c What's the Dev experience to start? This is downside of Express.js , the initial configuration, installing of necessary packages and setup is just too much. This is why Nest.js is my favourite Backend framework (although not so performant), with just CLI commands I already have a functioning API. It has less overhead to actually doing your work. If Encore can have something like that, I'll actually seriously consider it. Thank you and well done to the team on this innovative framework. 1 like Like Thread * * 3 • Edited on Oct 3 • * Hey @nathbabs, feel free to join encore.dev/discord for assistance. We'll try to clarify these points in the tutorials, but it's pretty well documented how you created multiple services / sub-systems etc. in the normal docs: encore.dev/docs/ts/develop/app-str... Encore isn't really opinionated about if you use feature folders or not, that very much depends on your context and needs, so we don't think the framework needs to be prescriptive. For ease of getting started, you can have a rest API running in the cloud in 2 minutes by just doing encore app create --example=ts/hello-world && git push encore. Not sure it gets easier than that. 2 likes Like Reply * Neon **. Try Neon for Free → Read next I created a video tutorial on how to make a responsive sidebar using CSS and vanilla Javascript Louis Austke - Oct 24 What is the best programming language? [2024/2025] João Vitor - Nov 7 Methods and Implementations of Single Sign-On (SSO) Bohdan Lukianets - Nov 7 My First JavaScript Web App: Interactive Image Coordinate Finder Ryan VerWey - Nov 6 Encore Follow Encore – Backend Development Platform Backend framework and cloud platform for building distributed systems with automated infrastructure and end-to-end type-safety. Get Started More from Encore TypeScript vs Go: Choosing Your Backend Language #go #* *? #*dev NestJS vs Encore.ts: Choo* #javascript #typescript #microservices #webdev _SurveyJS Promoted * Build Forms from JSON without Manual Coding Simplify data collection in your JavaScript app with a fully customizable JSON-based form editor. Includes support for *, *, a CSS editor for form theming, and more. Integrates with any backend system, * *. View demo 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/encore/encorets-3x-faster-than-elysiajs-hono-48hj"
  },
  {
    "body": "* 130 Add reaction 93 Like 9 Unicorn 9 Exploding Head 8 Raised Hands 11 Fire 24 Jump to Comments 172 * Marcus Kohlberg for Encore Posted on Oct 7 93 9 9 8 11 How to make your Express app 9x faster (and type-safe) #javascript #typescript #node #opensource 💡 This guide shows you how to migrate an existing Express.js app to Encore.ts, an Open Source backend framework for TypeScript, to unlock a 9x performance boost. Why migrate? Express.js is great for simple APIs, but as your app scales, you may face limitations. While the large Express.js community offers plugins and middleware to help, relying on them adds complexity and increases dependencies. Encore.ts is a TypeScript framework designed for robust, type-safe backends. With 0 npm dependencies, a big focus on performance, and lots of built-in features, Encore.ts simplifies building production-ready apps. You can self-host Encore.ts apps with any Docker-compatible hosting solution, or use the Encore Cloud Platform for automated DevOps and infrastructure management in your own AWS or GCP account. Performance Encore.ts has its own high-performance Rust runtime that integrates with Node.js using Napi. Encore.ts extends Node.js with a multi-threaded, asynchronous event loop in Rust, handling all I/O like accepting and processing incoming HTTP requests. It runs as a completely independent event loop that utilizes as many threads as the underlying hardware supports, thereby significantly boosting performance vs. single-threaded JavaScript. The result is that Encore.ts can process 9x more requests/second than Express.js, and 3x more requests/second than Elysia and Hono. You can check out the benchmark code here. Built-in benefits When using Encore.ts you get a lot of built-in features without having to install any additional dependencies: Type-safe API schemas CORS handling Structured logging Authentication Pub/Sub integrations Secrets management Infrastructure integrations Database integrations Architecture Diagrams Local Development Dashboard Service Catalog TypeScript native Debugging Error handling Multithreading Request validation Tracing API Client generation Automatic local infrastructure Automated testing Local Development Dashboard Migration guide Below we've outlined two main strategies you can use to migrate your existing Express.js application to Encore.ts. Pick the strategy that best suits your situation and application. Forklift migration (quick start) When you quickly want to migrate to Encore.ts and don't need all the functionality to begin with, you can use a forklift migration strategy. This approach moves the entire application over to Encore.ts in one shot, by wrapping your existing HTTP router in a catch-all handler. Approach benefits You can get your application up and running with Encore.ts quickly and start moving features over to Encore.ts while the rest of the application is still untouched. You will see a partial performance boost right away because the HTTP layer is now running on the Encore Rust runtime. But to get the full performance benefits, you will need to start using Encore's API declarations and infrastructure declarations. Approach drawbacks Because all requests will be proxied through the catch-all handler, you will not be able to get all the benefits from the distributed tracing. The automatically generated architectural diagrams and API documentation will not be able to show you the full picture of your application until you start moving services and APIs over to Encore.ts. You will not be able to use the API Client Generation feature until you start defining APIs in Encore.ts. Forklift migration step-by-step Full migration This approach aims to fully replace your applications dependency on Express.js with Encore.ts, unlocking all the features and performance of Encore.ts. In the next section you will find a Feature-by-feature migration guide to help you with the refactoring details. Approach benefits Get all the advantages of Encore.ts, like distributed tracing and architecture diagrams. Get the full performance benefit of Encore.ts - 9x faster than Express.js. Approach drawbacks This approach may require more time and effort up front compared to the Forklift migration strategy. Feature-by-feature migration Check out our Express.js compared to Encore.ts example on GitHub for all of the code snippets in this feature comparison. APIs Microservices communication Authentication Request validation Error handling Serving static files Template rendering Testing Database Logging Other related articles * Marcus Kohlberg for Encore ・ Sep 4 #node #javascript #typescript #backenddevelopment How to let ChatGPT call functions in your app Simon Johansson for Encore ・ Aug 14 #chatgpt #typescript #node #javascript * & 3x faster than Bun + Zod Marcus Kohlberg for Encore ・ Aug 2 #typescript #node #* Heroku *references R* Top comments (24) * steve steve steve Follow Joined Apr 12, 2017 • *e Yeah I saw another article on encore. Looks like a great alternative. Though I'd suggest changing your title because that's not making your 'express app 9x faster'. Thats 'replacing your express app to me it 9x faster'. It reads like how to write express better. Also, another point is, making it typesafe is just a matter of using typescript, which you can continue to use with express id so desired. 16 likes Like Reply * Imamuzzaki Abu Salam Follow Happy to code, thrive to learn! Email hi@imam.dev Location Indonesia Joined Sep 18, 2020 • *e 'express app 9x faster' and 'replacing your express app to me it 9x faster', are the same if we see it from the end-user/our client viewpoint, our client/end-user is our number one priority. So, who cares it is replacing or not, the point is my user became happier to give me more money :) The type-safety discussed here is not compile time type-safe like TypeScript gave. But, runtime type-safety requires an additional library in most frameworks nowadays, reducing performance. 2 likes Like Reply Rasmus Schultz Rasmus Schultz Rasmus Schultz Follow Passionate web-developer since 1998 using various languages, databases and tools. Opinions all my own. Joined Dec 25, 2017 • *e The title is click bait. It implies a change to your Express app - it does not imply you'll have to migrate your entire app by hand. Is a title like this intended to convey what's in the article? or is it intended to trick Express users into reading about a competing framework? Encore looks amazing, by the way - and Express is an outdated piece of junk. There are plenty of honest ways to market Encore against Express. But let's be real, you're not going to simply trick someone into migrating their entire project to a different framework. That's a potentially huge commitment. And nobody likes to be tricked. 😒 3 likes Like Thread Marcus Kohlberg Ma*, 2021 • *e Fair point about the title! Although, the very first sentence in the article does make it clear what it is about. I don't imagine anyone being tricked into changing frameworks. :) 1 like Like Thread Rasmus Schultz Rasmus Schultz Rasmus Schultz Follow Passionate web-developer since 1998 using various languages, databases and tools. Opinions all my own. Joined Dec 25, 2017 • Oct * you only trick them into clicking. that's what click bait means. 2 likes Like Reply Marcus Kohlberg Ma*, *t abuse Nice to see someone reading carefully :D 1 like Like Reply Michael Aigbovbiosa Michael Aigbovbiosa Michael Aigbovbiosa Follow Joined May 7, 2024 • *e Either way, it's still a commercial for using Encore rather than using Express. Hope this helps. 2 likes Like Reply Melody Mbewe Melody Mbewe Melody Mbewe Follow Software Developer Location Cape Town, South Africa Education Harare Institute Of Technology Pronouns She Work Frontend Software Developer Joined Aug 2, 2023 • *e Thank you for sharing 2 likes Like Reply Rene Kootstra Rene Kootstra Rene Kootstra Follow Author of enge-js a pure JavaScript playstation 1 emulator and professional developer for 25+ years. Joined Feb 12, 2022 • *e Yay, another commercial in a dev community. 4 likes Like Reply * Imamuzzaki Abu Salam Follow Happy to code, thrive to learn! Email hi@imam.dev Location Indonesia Joined Sep 18, 2020 • *e COSS era my fellow dev :) 2 likes Like Reply Kristian Ask Kristian Ask Kristian Ask Follow Joined Sep 16, 2024 • *e If performance and type safety was an issue I'd pick a real typed language like C# or go. Then there's always rust for some real performance... 0 Like Reply Marcus Kohlberg Ma*, *t abuse Yeah there's lots of options. A lot of people these days seem to want to use TypeScript to be able to have one language across frontend/backend, helps with hiring and organizing teams. (This is based on several conversations CTOs at primarily smallish companies <100 engineers.) 1 like Like Reply Kristian Ask Kristian Ask Kristian Ask Follow Joined Sep 16, 2024 • Nov 4 *at's a separate discussion from performance though. 0 Like Thread Marcus Kohlberg Ma*, 2021 • Nov 5 C* rarely realistic to only optimize for one parameter :D 1 like Like Thread Kristian Ask Kristian Ask Kristian Ask Follow Joined Sep 16, 2024 • Nov 5 *en c# only... 0 Like Reply Danial Habibi Danial Habibi Danial Habibi Follow Joined Mar 31, 2024 • *e Bzzzzzzz just another ads? Just change your tittle to another one. Its not make the express faster... its just migrate to another framework that faster than express js.. for god sake. Wasting my time .... 0 Like Reply Jacques Stander Jacques Stander Jacques Stander Follow An ambitious Fullstack Software Engineer with a passion for creating logical and innovative solutions to complex problems. Location South Africa Education Belgium Campus Work Fullstack Software Engineer at xneelo Joined Dec 12, *t abuse # TODO: Change misleading title 1 like Like Reply * Imamuzzaki Abu Salam Follow Happy to code, thrive to learn! Email hi@imam.dev Location Indonesia Joined Sep 18, 2020 • *e The only reason I'm not trying encore is in my local, I can't encore eject, it gives me error. 1 like Like Reply Marcus Kohlberg Ma*, *t abuse We're dropping lots of improvements in this area later this week—should hopefully resolve your problems—stay tuned! We'll try to help you out on Discord in the meantime (encore.dev/discord) 1 like Like Reply * Imamuzzaki Abu Salam Follow Happy to code, thrive to learn! Email hi@imam.dev Location Indonesia Joined Sep 18, 2020 • *e AS consumer , :) I LOVE competition :) 1 like Like Reply Mohamed Elkmeshi Mohamed Elkmeshi Mohamed Elkmeshi Follow Joined Mar 23, 2024 • Oct * I had this error error: unable to resolve module ../db/schema 1 like Like Reply * * * Join Discord and we'll help you out: encore.dev/discord 1 like Like Reply TUẤN NGUYỄN ĐÌNH TUẤN NGUYỄN ĐÌNH TUẤN NGUYỄN ĐÌNH Follow Joined Jul 2, 2024 • Oct * Ecore is a new freamwork of nodejs right? May be i can try it. Looks interesting *ion (24 comments) *. Some comments have been hidden by the post's author - find out more * Sentry *r* Top SEO Tips for Real Estate and Home Decor Websites Sanjeev - Nov 8 Mongoose Vijay Kumar - Oct 17 Top 45+ Active directory interview questions and answers for experienced gameon gameover - Oct 18 opensslErrorStack: [ ‘error:03000086:digital envelope routines::initialization error’ ] Ann - Oct 17 Encore Follow Encore – Backend Development Platform Backend framework and cloud platform for building distributed systems with automated infrastructure and end-to-end type-safety. Get Started More from Encore TypeScript vs Go: Choosing Your Backend Language #go #* *? #*dev NestJS vs Encore.ts: Choo* #javascript #typescript #microservices #webdev Heroku *referenc* 👋 ** * ",
    "url": "https://dev.to/encore/how-to-make-your-express-app-9x-faster-and-type-safe-1nd5"
  },
  {
    "body": "* 148 Add reaction 116 Like 8 Unicorn 8 Exploding Head 7 Raised Hands 9 Fire 15 Jump to Comments 208 * Simon Johansson for Encore Posted on Sep 10 • Updated on Sep 23 116 8 8 7 9 How to make your Express.js APIs 9x faster with Encore.ts #node #express #typescript #encore Encore.ts is Open Source backend framework for TypeScript. This guide walks you through how to migrate an Express.js app to Encore.ts to gain type-safe APIs and 9x performance boost. Why migrate to Encore.ts? Express.js is a great choice for building simple APIs, but as your application grows you will likely run into limitations. There is a large community around Express.js, providing many plugins and middleware to work around these limitations. However, relying heavily on plugins can make it hard to find the right tools for your use case. It also means that you will need to maintain a lot of dependencies. Encore.ts is an Open Source framework that aims to make it easier to build robust and type-safe backends with TypeScript. Encore.ts has 0 npm dependencies, is built with performance in mind, and has a lot of built-in features for building production ready backends. You can self-serve an Encore.ts app on any hosting service that accepts Docker containers, or use Encore Cloud Platform to fully automate your DevOps and infrastructure. Performance Encore.ts has its own high-performance runtime, with a multi-threaded, asynchronous event loop written in Rust. The Encore Runtime handles all I/O like accepting and processing incoming HTTP requests. This runs as a completely independent event loop that utilizes as many threads as the underlying hardware supports. The result of this is that Encore.ts performs 9x faster than Express.js. Encore.ts handles 9x more requests/sec than Express.js Encore.ts has 80% less response latency than Express.js * & 3x faster than Bun + Zod Marcus Kohlberg for Encore ・ Aug 2 #typescript #node #* Built-in benefits When using Encore.ts you get a lot of built-in features without having to install any additional dependencies: Type-safe API schemas CORS handling Structured logging Authentication Pub/Sub integrations Secrets management Infrastructure integrations Database integrations Architecture Diagrams Local Development Dashboard Service Catalog TypeScript native Debugging Error handling Multithreading Request validation Tracing API Client generation Automatic local infrastructure Automated testing Local Development Dashboard Migration guide Below we've outlined two main strategies you can use to migrate your existing Express.js application to Encore.ts. Pick the strategy that best suits your situation and application. Forklift migration (quick start) When you quickly want to migrate to Encore.ts and don't need all the functionality to begin with, you can use a forklift migration strategy. This approach moves the entire application over to Encore.ts in one shot, by wrapping your existing HTTP router in a catch-all handler. Approach benefits You can get your application up and running with Encore.ts quickly and start moving features over to Encore.ts while the rest of the application is still untouched. You will see a partial performance boost right away because the HTTP layer is now running on the Encore Rust runtime. But to get the full performance benefits, you will need to start using Encore's API declarations and infrastructure declarations. Approach drawbacks Because all requests will be proxied through the catch-all handler, you will not be able to get all the benefits from the distributed tracing. The automatically generated architectural diagrams and API documentation will not be able to show you the full picture of your application until you start moving services and APIs over to Encore.ts. You will not be able to use the API Client Generation feature until you start defining APIs in Encore.ts. Forklift migration step-by-step Full migration This approach aims to fully replace your applications dependency on Express.js with Encore.ts, unlocking all the features and performance of Encore.ts. In the next section you will find a Feature-by-feature migration guide to help you with the refactoring details. Approach benefits Get all the advantages of Encore.ts, like distributed tracing and architecture diagrams. Get the full performance benefit of Encore.ts - 9x faster than Express.js. Approach drawbacks This approach may require more time and effort up front compared to the Forklift migration strategy. Feature-by-feature migration Check out our Express.js compared to Encore.ts example on GitHub for all of the code snippets in this feature comparison. APIs Microservices communication Authentication Request validation Error handling Serving static files Template rendering Testing Database Logging Other related articles * Marcus Kohlberg for Encore ・ Sep 4 #node #javascript #typescript #backenddevelopment How to let ChatGPT call functions in your app Simon Johansson for Encore ・ Aug 14 #chatgpt #typescript #node #javascript * & 3x faster than Bun + Zod Marcus Kohlberg for Encore ・ Aug 2 #typescript #node #* Highlight Promoted * Self-Host Your Observability Stack Take control of your data and privacy. With Highlight.io, you can self-host your entire observability stack, giving you full visibility without sacrificing security or compliance. Monitor, debug, and optimize – on your terms. Start self-hosting with Highlight.io today. Get Started Top comments (15) * Jhonleo Jhonleo Jhonleo Follow Joined Sep 12, 2024 • Sep 12 • Edited on Sep 23 • * To make your Express.js APIs 9x faster, migrate to Encore.ts, an open-source TypeScript framework built for high performance. Encore.ts uses a multi-threaded, asynchronous runtime in Rust, handling I/O efficiently. It has no external npm dependencies and includes built-in features for production-ready backends, ensuring a smoother and faster API experience. Fore information Discover it 3 likes Like Reply Ricardo Esteves Ricardo Esteves Ricardo Esteves Follow 👋 I'm a Frontend enthusiast & full-stack aficionado | Crafting captivating user experiences | Based in Lisbon, Portugal 🇵🇹 | Dedicated to innovation and staying ahead with the latest in tech! Location Lisbon Education Computer science Work Software engineer Joined Mar 11, 2020 • Sep 11 * article, thank you for sharing it. Looks like an awesome solution. Will definitely try it out. 3 likes Like Reply Marcus Kohlberg Ma*, 2021 • Sep 12 Copy link Hide Report abuse 🙌 2 likes Like Reply herberthk herberthk herberthk Follow Location Kampala Work Full stack engneer Joined Mar 12, 2021 • Sep 13 Copy l* sharing 3 likes Like Reply tauksun tauksun tauksun Follow Joined Apr 15, 2024 • Sep 16 Copy link Hide Report abuse Encore.ts looks great. Few questions : If it has a separate runtime written in Rust with multi-threading approach, then it is not using Nodejs. Isn't it like comparing server written in Rust/C/Go with Nodejs ? Does it also uses it own thing to transpile JavaScript other than JIT used by Nodejs ( Ignition & Turbofan ) ? 1 like Like Reply * Simon Johansson Follow Working as a front-end dev @ encore.dev Location Stockholm Joined Sep 6, 2023 • Sep 16 Copy l* the questions! If it has a separate runtime written in Rust with multi-threading approach, then it is not using Nodejs. Well, its a bit of both. The Encore Runtime handles all I/O like accepting and processing incoming HTTP requests. This runs as a completely independent event loop that utilizes as many threads as the underlying hardware supports (written in Rust). Once the request has been fully processed and decoded, it gets handed over to the Node.js event-loop, and then takes the response from the API handler and writes it back to the client. So you can write your business logic in TypeScript but you get a lot of the performance benefits from Rust. Isn't it like comparing server written in Rust/C/Go with Nodejs? I think the comparison is fair because you still write TypeScript as usual, using the NPM libs that you are use to. The Rust performance boost happens under the hood and is not affecting the business logic of your app. Does it also uses it own thing to transpile JavaScript other than JIT used by Nodejs ( Ignition & Turbofan ) ? Encore leverages static code analysis to parse your TypeScript code and picks up the API schemas and infrastructure you have defined. For the actual transpiling, Encore relies on Node for that. Transpiling TypeScript to JavaScript is currently done with esbuild. 2 likes Like Reply Serhiy Serhiy Serhiy Follow I'm a PO/PdM/BA passionate about web development. Location Lviv, Ukraine Work PO/PdM/BA Joined Sep 21, 2020 • Sep * comprehensive guide! thanks! 3 likes Like Reply * Simon Johansson Follow Working as a front-end dev @ encore.dev Location Stockholm Joined Sep 6, 2023 • Sep * Glad you liked it 👍 2 likes Like Reply Abdul saleem Abdul saleem Abdul saleem Follow Joined Sep 12, 2024 • Sep 13 *at about server resources consumption like CPU and memory? 2 likes Like Reply Marcus Kohlberg Ma*, 2021 • Sep 13 *y that's a great question. Since Encore.ts enables higher throughput, it means you can serve the same number of users with fewer servers or, conversely, you can serve more users with the same number of servers... which directly corresponds to lower costs. 1 like Like Reply Abdul saleem Abdul saleem Abdul saleem Follow Joined Sep 12, 2024 • Sep 13 Copy link Hide Report abuse Because it is not been highlighted in anywhere in website or any thread. Thanks for your reply and expecting more proof in upcoming articles. 2 likes Like Reply Talha Ahsan Talha Ahsan Talha Ahsan Follow Code by day, bugs by night. Building web apps with TypeScript, MongoDB, and plenty of coffee! Joined Sep 13, 2024 • *se I want to ask how to implement middleware in Encore.ts. I created a small app in Express, but when I tried to implement it in Encore.ts, I couldn't figure out where to write the middleware. 1 like Like Reply Chandra Panta Chhetri Chandra Panta Chhetri Chandra Panta Chhetri Follow I’m a software developer. I enjoy learning about technologies, as each offers a unique perspective to solving problems and challenges me. I find it rewarding to apply what I've learned. Joined Sep 13, 2024 • Oct * Very interesting, the requests/sec diagram caught my attention. Do you have any example repositories that use encore.ts? I'd love to check them out 1 like Like Reply * Simon Johansson Follow Working as a front-end dev @ encore.dev Location Stockholm Joined Sep 6, 2023 • Nov 3 Copy link Hide Report abuse Cool! Here is our example repo with a bunch of different examples: github.com/encoredev/examples/tree... 1 like Like Reply Aman Negi Aman Negi Aman Negi Follow Mobile and Web Developer with special place for Flutter 💙 Location India Pronouns he/him Work Ex Github Octern at AppFlowy Joined Nov 8, 2022 • Sep 14 C*elved into it, and I found it interesting. However stuck on finding information on how to connect other Database(MongoDB). I also couldn't find a central place to initialize my DB globally once. 0 * (15 comments) *. * Radar Promoted * Up to 90% less expensive than Google Maps 📉 Cut your Google Maps or Mapbox bill in half with our cost-effective geocoding APIs, autocomplete APIs, routing APIs, and base maps. Start for free Read next Dockerize nestjs app with postgres lifewithcode - Sep 19 How to Implement Clustering in Node.js Susheel kumar - Sep 19 VineJS vs. Zod for schema validation Megan Lee - Oct 22 Node.js performance hooks and measurement APIs Megan Lee - Oct 1 Encore Follow Encore – Backend Development Platform Backend framework and cloud platform for building distributed systems with automated infrastructure and end-to-end type-safety. Get Started More from Encore TypeScript vs Go: Choosing Your Backend Language #go #* *? #*dev NestJS vs Encore.ts: Choo* #javascript #typescript #microservices #webdev Neon Promoted * Top 3 Features in Postgres 17 These are the 3 new features you need to know about. See Article → How and when to use btree_gist Become a wizard of space and time with Postgres. See Article → 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/encore/how-to-make-your-expressjs-apis-9x-faster-with-encorets-1ke2"
  },
  {
    "body": "* 208 Add reaction 172 Like 8 Unicorn 10 Exploding Head 9 Raised Hands 9 Fire 29 Jump to Comments 181 * Simon Johansson for Encore Posted on Nov 1 172 8 10 9 9 *? #*dev Node.js web frameworks — where do we even begin? With so many options out there, choosing the right one for your project can feel overwhelming. In this post, I’ll walk you through the hottest frameworks in the Node.js ecosystem, breaking down the strengths, weaknesses, and best use cases for each one. Whether you’re looking for speed, scalability, or simplicity, hopefully we will cover it all—so by the end, you’ll know exactly which framework is right for you. The frameworks we will be looking at are: Nest, Elysia, Encore.ts and Hono. Video version: Feature overview On a scale from most lightweight to most feature rich I would position the frameworks like this: This does not mean that lightweight is bad, it just depends on what the needs are for your project. The lightweight nature of Hono is actually one of the selling points, with just under 14KB its perfect for deploying to Cloudflare Workers. Encore.ts on the other hand comes with a lot of built in features, like automatic tracing out of the box and local infrastructure. Let’s take a look at each framework, and we are going to start with Encore.ts Encore.ts An Open Source framework that aims to make it easier to build robust and type-safe backends with TypeScript. The framework has a lot of build in tools to make your development experience smoother and performance wise, it’s the fasters of all frameworks in this comparison. Type-safe API schemas CORS handling Structured logging Authentication Pub/Sub integrations Secrets management Infrastructure integrations Database integrations Architecture Diagrams Local Development Dashboard Service Catalog TypeScript native Debugging Error handling Multithreading Request validation Tracing API Client generation Automatic local infrastructure Automated testing Encore has built-in request validation. The request and response types you define in regular TypeScript are used to validate the request, both during compile and runtime. And unlike the other frameworks the actual validation is done in Rust and not in JavaScript. This makes the validation really fast, but more on that later. import {api, Header, Query} from \"encore.dev/api\"; enum EnumType { FOO = \"foo\", BAR = \"bar\", } // Encore.ts automatically validates the request schema // and returns and error if the request does not match. interface RequestSchema { foo: Header<\"x-foo\">; name?: Query<string>; someKey?: string; someOtherKey?: number; requiredKey: number[]; nullableKey?: number | null; multipleTypesKey?: boolean | number; enumKey?: EnumType; } // Validate a request export const schema = api( {expose: true, method: \"POST\", path: \"/validate\"}, (data: RequestSchema): { message: string } => { console.log(data); return {message: \"Validation succeeded\"}; }, ); Encore makes it easy to create and call services. From a code perspective, a service just looks like another folder in your repo. When calling an endpoint in a service it’s just like calling a regular function. But the cool part is that under the hood, those function calls gets converted to actual HTTP calls. When deploying, you can even choose to deploy your services to separate instances, for example in a Kubernetes cluster, while still having all service code in the same repo. Import a service and call its API endpoints like regular functions import { api } from \"encore.dev/api\"; import { hello } from \"~encore/clients\"; // import 'hello' service export const myOtherAPI = api({}, async (): Promise<void> => { // all the ping endpoint using a function call const resp = await hello.ping({ name: \"World\" }); console.log(resp.message); // \"Hello World!\" }); With Encore.ts you integrate your infrastructure as type-safe objects in application code. Creating a database or a Pub/Sub topic just requires a few lines of application code. Encore.ts builds your application as a Docker image and you just supply the runtime configuration when deploying, that’s it. Create a PostgreSQL database in one line of code import { SQLDatabase } from \"encore.dev/storage/sqldb\"; const db = new SQLDatabase(\"userdb\", {migrations: \"./migrations\"}); // ... use db.query to query the database. Create Pub/Sub topics and subscriptions import { Topic } from \"encore.dev/pubsub\"; export interface User { /* fields ... */ } const signups = new Topic<User>(\"signup\", { deliveryGuarantee: \"at-least-once\", }); await signups.publish({ ... }); Encore also comes with a built-in development dashboard. When you start your Encore app, the development dashboard is available on port localhost:9400. From here you can call your endpoints, a bit like Postman. Each call to your application results in a trace that you can inspect to see the API requests, database calls, and Pub/Sub messages. The local development dashboard also includes automatic API documentation and an always up-to-date architectural diagram of you system. Local Development Dashboard And its worth mentioning that even though Encore comes with a lot of features, it has 0 npm dependencies. Hono Hono is the creation of Yusuke Wada. He started the project 2021 because there were no good Node.js frameworks that worked well on Cloudflare Workers. Since then Hono as added support for a lot of other runtimes like Node.js, Bun and Deno. import { Hono } from 'hono' const app = new Hono() app.get('/', (c) => c.text('Hono!')) export default app Hono is really small, the hono/tiny preset is under 13kB which makes it really suitable for deploying to Cloudflare Workers. Hono also has 0 NPM dependencies which is really impressive! The multi-runtime selling point is interesting, the idea that no matter the Javascript runtime you will be able to run Hono. In their repo they have this concept of adapters where you can see the adjustments they make for each runtime. I think this has been huge for adoption and growing the user base but realistically for an individual user you will probably not switch runtimes once you have your app deployed to the cloud. And even though Hono is lightweight out of the box it has a bunch of middleware, both 1st and 3rd-party that you can install to enhance your app. It’s the “add it when you want to use it”-approach that got popular with Express. This can work great as long as you app is small but with a larger app, maintaining a huge list of dependencies can be frustrating. Elysia Elysia, like Encore, is built for TypeScript and also offers type-safety inside your API handlers. Knowing what you are working with inside your API handlers saves you a lot of time and it’s great to not having to litter your code with type checks. You specify the request types with the t module, which is an extension of the TypeBox validation library. Unlike Encore, the validation happens in the JavaScript layer which adds some performance overhead. import { Elysia, t } from 'elysia' new Elysia() .patch(\"/profile\", ({ body }) => body.profile, { body: t.Object({ id: t.Number(), profile: t.File({ type: \"image\" }), }), }) .listen(3000); Adding Swagger documentation only requires one line of code and Elysia has 1st party support for OpenTelemetry. Which is really nice, so you can easily monitor your app regardless of the platform. Elysia is fast! But not as fast as Encore as you will see in the next section. Nest.js Nest.js is a bit different then the other frameworks in this comparison. Encore, Elysia and Hono tries to offer minimalistic APIs for creating endpoints and middleware and you are free to structure your business logic however you wish. Nest.js is much more opinionated and forces you to structure your code in a certain way. It offers a modular architecture that organizes code into different abstractions, like Providers, Controllers, Modules and Middleware. Nest is designed to make it easier to maintain and develop larger applications. But whether your a fan of the opinionated structure Nest offers is at the end of the day very subjective. I would say that it might be advantageous for large-scale projects where long-term maintainability are more important than speed and simplicity. For smaller project with just a few developers the added level of abstractions will probably be overkill for most use cases. The opinionated nature of Nest also brings with it a steeper learning curve compared to the Hono, Encore and Elysia. When using Nest you can choose to either use Express or Fastify as the underlying HTTP server framework. All the Nest functionality is added on top of that. Performance Speed is perhaps not the most important thing when choosing a framework, but it’s not something you can ignore. It will impact your apps responsiveness AND ultimately your hosting bill. We have benchmarked both without and with request schema validation, the measurement is requests per second. The names in parenthesis are the request validation libraries used. Encore.ts has request validation built in. Encore.ts is the fastest for all frameworks in our benchmark followed by Elysia, Hono, Fastify and Express. Nest uses Fastify or Express under the hood so you can expect the performance to for a Nest app to be equivalent to that, maybe a but slower as Nest adds some overhead. How can Encore.ts be so much faster? The secret is that Encore.ts has a Rust runtime. And Rust is fast! Encore.ts actually consists of two parts: A user facing TypeScript part for defining APIs and infrastructure. And under the hood, it has a multi-threaded runtime written in Rust. The key to the performance boost is to off-load as much work as possible from the single-threaded Node.js event-loop to the Rust runtime. For example, the Rust runtime handles all input/output like accepting incoming HTTP requests or reading from the database. Once the request or database query has been fully processed, then it gets handed over to the Node.js event-loop. Code structure Hono, Elysia and Encore are unopinionated in how you structure your code. And the way you create APIs and middleware are fairly similar between the frameworks. Here is a GET endpoint for each framework. There are of course some differences, but if we squint the APIs look fairly similar. At least similar enough for this not to be the deciding factor in my opinion: Encore.ts interface Response { message: string; } export const get = api( { expose: true, method: \"GET\", path: \"/hello/:name\" }, async ({ name }: { name: string }): Promise<Response> => { const msg = `Hello ${name}!`; return { message: msg }; }, ); Elysia import { Elysia, t } from \"elysia\"; new Elysia() .get( \"/hello/:name\", ({ params }) => { const msg = `Hello ${params.name}!`; return { message: msg }; }, { response: t.Object({ message: t.String(), }), }, ) Hono import { Hono } from \"hono\"; const app = new Hono(); app.get(\"/hello/:name\", async (c) => { const msg = `Hello ${c.req.param(\"name\")}!`; return c.json({ message: msg }); }); What really makes a difference is the being able to relay on type-safety when building a robust application. Encore and Elysia offer type-safe APIs but Encore also offers compile time type-safety when working with infrastructure like Pub/Sub. With Encore, you also get compile time type-safety when calling an endpoint in another service. And if you've ever worked with a microservice architecture before you know how big of a deal that is. Nest.js is the one that really sticks out in terms of API design. There are a lot of concepts and abstractions that goes into a Nest app. This can be both a good and a bad thing, it really depends of your preference. One thing that will be immediately apparent when looking at a Nest app is the use of decorators. Nest relies heavily on decorators, for example when using dependency injection to inject a Services into Controllers. Nest controller import { Controller, Get } from '@nestjs/common'; import { AppService } from './app.service'; @Controller() export class AppController { constructor(private readonly appService: AppService) {} @Get() getHello(): string { return this.appService.getHello(); } } Personally, I am not a big fan and I know that I am not the only one out there. Deployment & Infrastructure All of these frameworks are similar in that they are deployable to to all mainstream cloud platforms (like Digital Ocean and Fly.io) or straight to a cloud provider like AWS or GCP. Encore offers automatic local infrastructure. encore run starts your app and spinns up all local infrastructure, like databases and Pub/Sub topic. Forget YAML, Docker Compose, and the usual headaches. When building your Encore app you get a runtime config where you can supply the configuration needed for connecting to the infrastructure in your cloud. If you want to get your Encore app into the cloud quickly and don’t feel like self-serving then you can use Encore Cloud. Encore Cloud offers CI/CD and preview environments for pull requests. And if you want to, Encore Cloud can provision all the needed infrastructure in your own cloud on AWS or GCP. This means your app is not dependent on any third-party services and you have full control over all your infrastructure. Hono sticks out in that it supports a bunch of different runtimes, you therefore have a lot of options when it comes to deployment. Deploying to Cloudflare Workers, Netlify or AWS Lambda is easy and does not require a lot of configuration. With Nest you run the nest build command that compiles your TypeScript code into JavaScript. This process generates a dist directory containing the compiled files. Thats pretty much it, you can then use Node.js to run your dist folder. The recommended way to deploy an Elysia application is to compile your app into a binary using the bun build command. Once binary is compiled, you don't need Bun installed on the machine to run the server. Wrapping up That’s it! Hopefully you know what framework to reach for in your next project. If you want to learn more about Encore.ts, you can check out the Open Source project on GitHub: https://github.com/encoredev/encore Recommendations: NestJS vs Encore.ts: Choo* Marcus Kohlberg for Encore ・ Oct 30 #javascript #typescript #microservices #webdev How to deploy a backend application to DigitalOcean using Docker and Encore Marcus Kohlberg for Encore ・ Oct 23 #opensource #javascript #docker #go Choosing the Right Tech Stack: A Developer's Decision-Making Guide Lucas Lima do Nascimento for Encore ・ Oct 28 #beginners #webdev #tutorial #career CodeRabbit Promoted * Cut Code Review Time & Bugs in Half with CodeRabbit Boost your team with AI-driven PR feedback! CodeRabbit offers instant PR summaries, smart code walkthroughs, 1-click commit suggestions, and seamless code quality & security checks, reducing tech debt. Ship faster with fewer bugs. Try CodeRabbit free today! Learn more Top comments (29) * Rasmus Schultz Rasmus Schultz Rasmus Schultz Follow Passionate web-developer since 1998 using various languages, databases and tools. Opinions all my own. Joined Dec 25, 2017 • Nov 2 • Edited on Nov 6 • * Encore is presented as a framework here, which is actually misleading - it is an alternative runtime that replaces Node entirely. EDIT: I was wrong about this! I'm leaving my original post here to preserve the thread, but please follow the thread to the end Encore is an entirely different category from the things you're comparing to here. This wasn't even touched on in this article. To be honest, the whole article reads like another attempt at misleading advertisement for Encore, and it isn't the first time you've attempted something like that: dev.to/encore/how-to-make-your-exp... A similarly misleading title (which you declined to change) and essentially a guide to porting your Express app to Encore. Likewise, this article would have you believe we're comparing frameworks, when Encore isn't even strictly (or at least not only) a framework. I honestly think you're going about your marketing and placement of Encore all wrong. Why are you trying to position this as an alternative to Express, one of the lightest lightweight frameworks there is? You're an entirely different category of product. I'm not honestly completely sure what category of product you are. You want to be a Typescript framework, but you're really a platform, and you're based on Go? To be honest, this framework seems to be trying to break out of it's own niche, perhaps because it's a niche that doesn't really exist? 🤨 11 likes Like Reply Marcus Kohlberg Ma*, 2021 • Nov 5 • Edited on Nov 5 • * Encore.ts does not replace Node, it uses the Node runtime. In most common uses of the phrase, it is a backend framework. It also provides an extension to the javascript runtime (Node) by providing a Rust runtime to handle I/O. Encore.go is a separate framework for Go. Both can, if you want, be used with Encore's Cloud Platform to automate DevOps. If you prefer, you can also self-host any way you like only using the Open Source tooling, you don't need an account with Encore or anything like that. So to be clear, the \"platform\" you a refer to is an optional related piece of kit. I don't understand why you think it's a bad thing to compare it to frameworks like Express, even if they indeed are quite different you can replace Express with Encore.ts, and not use the other functionality it provides. The fact that there are more features available - if you want to use them - doesn't make it a terrible comparison imo. Only comparing extremely similar things doesn't seem very useful? 2 likes Like Reply Rasmus Schultz Rasmus Schultz Rasmus Schultz Follow Passionate web-developer since 1998 using various languages, databases and tools. Opinions all my own. Joined Dec 25, 2017 • Nov 5 Copy link Hide Report abuse Huh. So, do you mean, it has a bundled copy of Node that it uses internally? Or how come you have to use a custom tool and a custom executable to install and host it? Why isn't this a regular NPM package? 1 like Like Thread André Eriksson André Eriksson André Eriksson Follow Founder @ encore.dev – helping companies build better software, faster Location Stochkolm, Sweden Work CEO & Founder at Encore Joined Mar 8, 2021 • Nov 5 Copy link Hide Report abuse No, it uses the node binary on your PATH, like anything else. The reason for the tooling surrounding this is to provide a nice developer experience, by handling things like automatically setting up local infrastructure. At the end of the day running it is as simple as invoking node and pointing it at the Encore-generated entrypoint file, exactly like how e.g. Next.js works. 2 likes Like Thread Rasmus Schultz Rasmus Schultz Rasmus Schultz Follow Passionate web-developer since 1998 using various languages, databases and tools. Opinions all my own. Joined Dec 25, 2017 • *e Well then I stand corrected. 😌 I didn't even think this was using my Node install - the whole experience was so different from anything else I've ever installed or used with Node, I was actually certain this was a custom platform of some sort. Still, I wonder why you think it's relevant to compare with these smaller frameworks? Even if it is based on Node, what you offer is a large, fully integrated framework, and at least your request handling is a custom runtime, right? I would be more interested in a comparison with e.g. DeepKit - it has somewhat the same scope and tries to do some of the same things. Though I suppose maybe you have to compare to something popular, or people won't get it. 🤔 1 like Like Thread Marcus Kohlberg Ma*, 2021 • *e \"Though I suppose maybe you have to compare to something popular, or people won't get it. 🤔\" - Exactly, comparing with mainstream alternatives is often more informative for most people. 1 like Like Reply Ibnu Rasikh Ibnu Rasikh Ibnu Rasikh Follow Joined May 24, 2024 • Nov 5 • Edited on Nov 5 • * but in the docs they say \"100% compatibility with the Node.js ecosystem.\" is it lie? encore.dev/docs/ts/concepts/benefi... 2 likes Like Reply André Eriksson André Eriksson André Eriksson Follow Founder @ encore.dev – helping companies build better software, faster Location Stochkolm, Sweden Work CEO & Founder at Encore Joined Mar 8, 2021 • Nov 5 • Edited on Nov 5 • * It's not a lie; Rasmus Schulz is mistaken. Encore.ts provides a native library (the Rust runtime) which runs within a normal Node.js process, which is how it provides 100% compatibility with the Node.js ecosystem. 2 likes Like Reply Rasmus Schultz Rasmus Schultz Rasmus Schultz Follow Passionate web-developer since 1998 using various languages, databases and tools. Opinions all my own. Joined Dec 25, 2017 • *e it's not a lie and yes, I was mistaken. 😌 1 like Like Reply Magesh Babu Magesh Babu Magesh Babu Follow Full stack Web Developer | Android enthusiast Location Chennai, Tamilnadu Work Web developer at FossFreaks Joined Jun 5, 2020 • *e It's good to see someone has good clarity about these things 2 likes Like Reply eshimischi eshimischi eshimischi Follow Kawaii desu Work Fullstack developer Joined Apr 8, 2019 • *e And also Elysia isn’t even NodeJS framework too.. based on Bun. 1 like Like Reply eshimischi eshimischi eshimischi Follow Kawaii desu Work Fullstack developer Joined Apr 8, 2019 • Nov 2 Copy l* making this statement, i thought to post something already and can’t say it better. 1 like Like Reply Subham Subham Subham Follow ⎛⎝𝓑𝓪𝓽𝓶𝓪𝓷⎠⎞ Email codexam.personal@gmail.com Pronouns Subham Joined Nov 23, 2022 • Nov 2 • Edited on Nov 2 • * Honestly, NestJS is the way to go. Once you've tried it, you realize it’s basically like the TypeScript equivalent of Spring Boot but with a lot less headache. Nest is made for scaling, and if you're dealing with microservices or even just a well-organized architecture, it's a no-brainer. Other frameworks? Setting up pipelines, decorators, handling Redis, Kafka, RabbitMQ, gRPC – you’ll be building all that from scratch and probably still not hit the same efficiency. With Nest, everything's already encapsulated and streamlined through decorators and built-in setups. Even on smaller projects, you’re building faster because you’ve got all these structured modules, and you’re not having to reinvent the wheel. The way it separates business logic, services, and controllers keeps your codebase manageable – you won’t end up with a pile of spaghetti code. Trust me, after trying all kinds of frameworks, Nest just hits different for clean, scalable builds. You can check one of my blogs about nest - Scalable REST APIs with NestJS 9 likes Like Reply Yudha Putera Primantika Yudha Putera Primantika Yudha Putera Primantika Follow Joined Jun 27, 2020 • *e NestJs does come with significant learning curve compared to others, but later when you really understood what it's opinions are, you'll be flying with your coding and fixing. That thing is crazy good for microservice infrastructure, it's very intuitive and saves lots of time. 3 likes Like Reply Oziel Perez Oziel Perez Oziel Perez Follow Over 6 Years Experience developing websites, REST APIs, and mobile apps using multiple frameworks across many languages Location Harlingen, TX Education Texas State Technical College - AAS Degree - Business Management Technology Work Full Stack Web and Mobile Developer at DreamCraft Joined May 4, 2020 • *e It's really cool how it's basically Angular for backend 1 like Like Reply FastTrackr AI FastTrackr AI FastTrackr AI Follow FastTrackr AI is your AI Executive Assistant, available directly on WhatsApp. Manage your emails, calendar, research and more all with simple text or audio commands, directly from WhatsApp. Location San Francisco, CA, United States Joined Nov 2, 2024 • *e Nice 2 likes Like Reply Comment deleted * Simon Johansson Follow Working as a front-end dev @ encore.dev Location Stockholm Joined Sep 6, 2023 • *e Encore is both a Go and TypeScript framework. If you choose to use Encore with TypeScript you can use it like any other Node framework, works with all NPM libraries as usual etc. encore.dev/ 2 likes Like Reply Comment deleted André Eriksson André Eriksson André Eriksson Follow Founder @ encore.dev – helping companies build better software, faster Location Stochkolm, Sweden Work CEO & Founder at Encore Joined Mar 8, 2021 • Nov 5 * seem confused. Encore.ts is a Node.js framework. It provides a native library (built in Rust) which runs within a normal Node.JS process. 1 like Like Reply USMAN AWAN USMAN AWAN USMAN AWAN Follow I am a skilled Full Stack web developer with Front-end skills HTML, CSS, JavaScript, ReactJs, NextJs, Bootstrap, Tailwind CSS and Back-end skills NodeJs, ExpressJs, mongoDb, Docker, Vercel and JestJs. Email usmanaugust28@gmail.com Location Abbottabad, Pakistan Education * and Technology, Islamabad Work Front-end Developer at Octate. Joined Sep 23, 2024 • Nov 1 Copy link Hide Report abuse Bro, nice work. But in 2025 deno might overcome NodeJs soon. 2 likes Like Reply eshimischi eshimischi eshimischi Follow Kawaii desu Work Fullstack developer Joined Apr 8, 2019 • *e Bun already did overcome both of them 2 likes Like Reply naynaingoo2003 naynaingoo2003 naynaingoo2003 Follow Joined Dec 26, 2022 • Nov 4 Copy link Hide Report abuse Time to code 1 like Like Reply Richard Joseph Richard Joseph Richard Joseph Follow Joined Aug 31, 2018 • *e No Remix, deploys everywhere, including Cloudflare? 1 like Like Reply Abhilash Abhilash Abhilash Follow Im a passionate full stack web developer. I work on Java 8, SpringBoot, Node, Typescript, Mongodb and Angular. Email abhilashkokkonda@gmail.com Location Hyderabad, India Work Java and MEANJS Fullstack web developer @ Carelon Global Solutions Joined Apr 21, 2019 • Nov 1 *y not ExpressJS added here? 0 Like Reply Frederic R. Frederic R. Frederic R. Follow Location Dublin Work 👴 Front-End Developer Joined Aug 12, 2019 • Nov 1 Copy link Hide Report abuse you should peak Effect 0 * (29 comments) *. * _SurveyJS Promoted * Simplify data collection in your JS app with a fully integrated form management platform. * ty*me analytics & more. Integrates with any backend system, giving you *. Learn more Read next J'ai essayé de passer à Vue.js depuis React.js Jean-Noël - Nov 4 Dark side of Next.js - App Router Alex - Nov 6 Handling Environment Variables in Vite padmajothi Athimoolam - Oct 21 Building a Customisable Carousel with Auto-Scroll, Infinite Loop, Pagination in React Native using Reanimated Ajmal Hasan - Oct 22 Encore Follow Encore – Backend Development Platform Backend framework and cloud platform for building distributed systems with automated infrastructure and end-to-end type-safety. Get Started More from Encore TypeScript vs Go: Choosing Your Backend Language #go #* NestJS vs Encore.ts: Choo* #javascript #typescript #microservices #webdev Choosing the Right Tech Stack: A Developer's Decision-Making Guide #beginners #webdev #tutorial #career Neon **. Try Neon → 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/encore/nodejs-frameworks-roundup-2024-elysia-hono-nest-encore-which-should-you-pick-19oj"
  },
  {
    "body": "DEV Community Join the DEV Community DEV Community is a community of 2,372,517 amazing developers Continue with Apple Continue with Facebook Continue with Forem Continue with GitHub Continue with Google Continue with Twitter (X) OR Email Password Remember me Forgot password? By signing in, you are agreeing to our privacy policy, terms of use and code of conduct. New to DEV Community? Create account. * * ",
    "url": "https://dev.to/enter"
  },
  {
    "body": "DEV Community Join the DEV Community DEV Community is a community of 2,372,517 amazing developers Sign up with Apple Sign up with Facebook Sign up with Forem Sign up with GitHub Sign up with Google Sign up with Twitter (X) Sign up with Email By signing up, you are agreeing to our privacy policy, terms of use and code of conduct. Already have an account? Log in. * * ",
    "url": "https://dev.to/enter?state=new-user"
  },
  {
    "body": "* Follow Report Abuse Amazing Enyichi Agu Software Developer who is learning every day Nigeria Joined on Jun 19, 2020 Work Front-End Software More info about @enyichiaagu Badges Four * four years. Got it 1 We*t * * Three * t* it * I'm currently increasing my experience with HTML, CSS, React Js, Javascript, and Php Currently learning Php, MySql and Postgresql Available for Freelance development, Creative and technical Collaborations and partnership 2 posts published 14 comments written 16 tags followed How to add Syntax highlight to code in your blog posts Amazing Enyichi Agu Amazing Enyichi Agu Amazing Enyichi Agu Follow Oct 13 '20 How to add Syntax highlight to code in your blog posts #javascript #codenewbie #blog 18 reactions Ad*h Amazing Enyichi Agu? * Amazing Enyichi Agu. * How to Generate random hex color values in javascript Amazing Enyichi Agu Amazing Enyichi Agu Amazing Enyichi Agu Follow Jul 29 '20 How to Generate random hex color values in javascript #webdev #javascript #codenewbie 23 reactions 3 comments 2 *onsor Neon * ",
    "url": "https://dev.to/enyichiaagu"
  },
  {
    "body": "* Follow Report Abuse Jean-Luc KABORE-TURQUIN Certified Full-Stack Developer. My skills include expertise in Node.js and React.js. Berlin, Berlin Joined on Aug 19, 2020 https://jl-turquin.com Education BA in Management Pronouns He Work Full-Stack Developer, Salesforce Consultant Four * four years. Got it * Three * three years. Got it *. **wo * two years. G* @eskabore Skills/Languages C, JavaScript(ReactJS, Node.js) Currently learning - TypeScript - Python Currently hacking on Buddies app: React-Native/TypeScript mobile app Available for - Helping on JavaScript projects - Open discussions with developers of all levels. 3 posts published 16 comments written 9 tags followed Pip Freeze > Requirements.txt: A Beginner's Guide Jean-Luc KABORE-TURQUIN Jean-Luc KABORE-TURQUIN Jean-Luc KABORE-TURQUIN Follow May 10 '23 Pip Freeze > Requirements.txt: A Beginner's Guide #python #webdev #programming 43 reactions 1 c*h Jean-Luc KABORE-TURQUIN? * Jean-Luc KABORE-TURQUIN. * The Battle of the AI Writing Assistants: ChatGPT 🆚 Github Copilot Jean-Luc KABORE-TURQUIN Jean-Luc KABORE-TURQUIN Jean-Luc KABORE-TURQUIN Follow Feb 2 '23 The Battle of the AI Writing Assistants: ChatGPT 🆚 Github Copilot #webdev #openai #github #ai 2 * 📓=Editing Privacy Policies, Incurs Risks! =✋🔺 Jean-Luc KABORE-TURQUIN Jean-Luc KABORE-TURQUIN Jean-Luc KABORE-TURQUIN Follow Apr 3 '21 📓=Editing Privacy Policies, Incurs Risks! =✋🔺 #webdev #analytics #privacy #devops 7 reactions 1 comment 5 *onsor Neon * ",
    "url": "https://dev.to/eskabore"
  },
  {
    "body": "* Follow Report Abuse Felipe Rocha 404 bio not found São Paulo, Brazil Joined on Aug 14, 2024 More info about @feliperocha93 Badges * 4 posts *owed * * Oct 28 * #javascript #node #npm #webdev * Version Management in Node.js * Oct 20 Mastering Version Management in Node.js #webdev #node #javascript #cli Add Comment 2 min read 8 Most Valuable Lessons I Learned in 5 Years as a Software Engineer * Sep 9 8 Most Valuable Lessons I Learned in 5 Years as a Software Engineer #career #development #productivity #* 8 Real-Life Shell Functions to Boost Your Productivity * Aug 15 8 Real-Life Shell Functions to Boost Your Productivity #productivity #shell Add Comment 3 *onsor Neon * ",
    "url": "https://dev.to/feliperocha93"
  },
  {
    "body": "* 0 *ead 0 * 0 * Felipe Rocha Posted on Oct 28 * #javascript #node #npm #webdev A Comprehensive Guide to .nvmrc and package.json In today's dynamic development landscape, managing multiple Node.js versions across various projects can often be a complex and error-prone task. Inconsistent Node.js versions can lead to many issues, from unexpected behavior to complete application failures. Leveraging .nvmrc Files for Version Control One highly effective method to maintain consistent Node.js versions within a project is by utilizing .nvmrc files. These simple text files, strategically placed at the root of your project directory, specify the precise Node.js version required. Creating a .nvmrc File: Navigate to your project's root directory and create a new file named .nvmrc witn the desired Node.js version: echo 18.16.10 > .nvmrc Switching to the Correct Version with nvm use Once the .nvmrc file is in place, you can effortlessly switch to the specified Node.js version using the nvm use command. This command triggers NVM (Node Version Manager) to activate the designated version. Using the nvm use Command: Navigate to your project's root directory in your terminal and execute the following command: nvm use Found '/Users/**/.nvmrc' with version <v18.16.10> Now using node v18.16.10 (npm v10.8.3) NVM will automatically detect the .nvmrc file and switch to the specified version. Setting the Engine Version in package.json While .nvmrc files are incredibly effective, it's also advisable to explicitly declare the required Node.js version in your package.json file. This provides an additional layer of clarity and can be leveraged by various tools and services that rely on the package.json file for essential information. Setting the Engine Version in package.json: Open your package.json file in a text editor. Add or modify the engines field to specify the Node.js version: { \"name\": \"your-project-name\", \"version\": \"1.0.0\", \"engines\": { \"node\": \"18.16.0\" } } Best Practices for Node.js Version Management: Centralized Version Control: Utilize a robust version control system like Git to manage .nvmrc files and ensure consistency across your entire team. Regular Updates: Keep NVM and Node.js updated to the latest stable versions to benefit from security patches and performance enhancements. Clear Documentation: Provide comprehensive instructions on how to set up the development environment, including Node.js version management. Installation The clearest instructions for installation can be found in the official nvm documentation. Let me know if you encounter any difficulties. Conclusion By adhering to these best practices and effectively utilizing .nvmrc files and package.json configuration, you can significantly enhance the consistency of your Node.js projects and save a precious time that would be spent. _SurveyJS Promoted * Build Your Own Forms without Manual Coding SurveyJS UI libraries let you build a JSON-based *, * with no user limits. Includes * logic, an integrated CS*ics, and more. Learn more Top comments (0) * * Sentry *r* The Evolution of Frontend Development: Exploring Different Architectures Valentin Turbins - Nov 3 How to Install Bootstrap 5 in Laravel 11 with Vite? Saddam Hossain - Nov 4 -? What is YARN ?- nobody-99 - Nov 3 Understanding Neomorphic Design in Web Development: What It Is, How to Achieve It, and When to Use It Muhammad Essa - Nov 7 Felipe Rocha Follow Location São Paulo, Brazil Joined Aug 14, 2024 More from Felipe Rocha Mastering Version Management in Node.js #webdev #node #javascript #cli * * * * ",
    "url": "https://dev.to/feliperocha93/ensuring-consistent-nodejs-versions-across-your-team-364d"
  },
  {
    "body": "* The Best Free Postgres Tier This is an overview of the Free Postgres Tier Upgrade deal within the DEV++ Membership. DEV++ is a membership deal, currently priced at $8/month, which aggregates pre-negotiated deals with a variety of providers to help individual developers like yourself save on key services for side projects, education, career opportunities, and more. We want to help ensure that you don't get nickel-and-dimed into spending out of pocket on your career. A lot of the time, free tiers are capped to prevent abuse, which is understandable, but it still sucks. We have negotiated a 4x upgrade on the Neon Postgres Database Free Tier as part of the DEV++ membership. Neon is a really impressive serverless PostgreSQL offering to start. It has auto-scaling, branching, pgvector integrations, and more—pretty much everything you want from fully-managed Postgres. The free tier, as is, helps you get going with 0.5GB of storage and ten branches, but the DEV++ offering really enhances it. Free Postgres via DEV++ 2GB of storage 10 free branches 15% discount on the paid plan, if you need it We charge $8/month for DEV++, but we aggregate services and value that make it a clear net positive if you take advantage of the deals. We encourage you to check out the offerings and see if it's right for you. Check out DEV++ Happy coding! * * ",
    "url": "https://dev.to/free-postgres-database-tier"
  },
  {
    "body": "* Follow Report Abuse gautam kumar 404 bio not found Joined on Nov 4, 2024 More info about @gautam_kumar_d3daad738680 Badges * 1 post published 1 comment written 0 tags followed User Authentication API with Express, JWT, Bcrypt, and MySQL gautam kumar gautam kumar gautam kumar Follow Nov 4 User Authentication API with Express, JWT, Bcrypt, and MySQL #webdev #javascript #* 6 min read Want to connect with gautam kumar? * gautam kumar. * * * ",
    "url": "https://dev.to/gautam_kumar_d3daad738680"
  },
  {
    "body": "* 1 A*ead 0 * 0 * gautam kumar Posted on Nov 4 1 User Authentication API with Express, JWT, Bcrypt, and MySQL #* #node This application is a simple authentication server built with Express, using JSON Web Tokens (JWT) for session management and bcrypt for securely storing passwords. Users can register and log in to access protected routes. MySQL is used for storing user data. Steps for Register Route Check If the input email is already registered. If yes return(\"User already exists\"). If no Insert the User details in the DB, return(\"Success\") Steps for Login Route Check if the input email exists in the DB or not If NO return(\"Invalid email\") If YES check if the input password is correct for the email or not If NO return(\"Invalid password\").If YES Create the JWT token and send it either in the Cookie or in the response VarifyAuthToken Middleware for Protected Route Get the token either from the req.cookie or from the req.headers. Valid ate the token using the SECRET_KEY. If it matches return a success response and send the user details. Else send the Invalid Token error. Technologies Used 1. Express.js: Web framework for handling routes and middleware. 2. bcrypt.js: Library for hashing passwords securely. 3. jsonwebtoken: Library for creating and verifying JWT tokens. 4. mysql2: MySQL client for Node.js with support for Promises. 5. cookie-parser: Middleware for parsing cookies. Code Breakdown 1. Import Required Libraries * jwt = require('jsonwebtoken'); const bcrypt = require('bcryptjs'); const cookieParser = require('cookie-parser'); const mysql = require('mysql2/promise'); express: Provides functions to create routes and handle HTTP requests. jsonwebtoken: Used to create and verify JWTs for user sessions. bcryptjs: Used for hashing passwords before storing them in the database. cookie-parser: Middleware to parse cookies from incoming HTTP requests. mysql2/promise: MySQL client with promise support, allowing asynchronous operations. 2. Initialize Express App and Define Constants const app = express(); const PORT = 3000; const JWT_SECRET = 'your_jwt_secret_key'; app: The Express application instance. PORT: The port the server will listen on. JWT_SECRET: A secret key used to sign JWTs. Replace this with a secure, randomly generated value in production. 3. Database Connection Setup const db = await mysql.createConnection({ host: 'localhost', user: 'your_MySql_username', password: 'your_MySql_password', database: 'users' }); db: The MySQL database connection object. mysql.createConnection(): Establishes a connection to the MySQL database using async/await, which is needed for non-blocking queries. host: Yout MySql application hostname, If you are running it on localhost, put localhost only, if you have deployed your MySql to a server, use the server hostname with PORT. user: Your MySql Username password: Your MySql Password database: The Database name 4. Middleware Setup app.use(express.json()); app.use(cookieParser()); express.json(): Middleware to parse JSON request bodies. cookieParser(): Middleware to parse cookies, allowing us to read cookies from req.cookies. 5. Register Route /register This route registers a new user by hashing their password and saving it in the database. app.post('/register', async (req, res) => { const { name, email, password } = req.body; try { // CHECK IF USER ALREADY EXISTS const [rows] = await db.execute('SELECT * FROM users WHERE email = ?', [email]); if (rows.length > 0) { return res.status(400).json({ message: 'User already exists' }); } // HASH THE PASSWORD const hashedPassword = await bcrypt.hash(password, 10); // SAVE THE USER IN THE DATABASE const result = await db.query('INSERT INTO userDB (name, email, password) VALUES (?, ?, ?)', [user.name, user.email, hashedPassword]); if(result[0].insertId){ res.status(201).json({ message: 'User registered successfully!', insertId: result[0].insertId }); } res.status(500).json({message: 'Something went wrong in DB execution'}); } catch (error) { console.error(error); res.status(500).json({ message: 'Server error' }); } }); db.execute(): Executes a query to check if a user with the given email already exists. If they do, return a 400 status. bcrypt.hash(password, 10): Hashes the password with a salt rounds value of 10 for security. db.execute() (Insert): Saves the user's name, email, and hashed password in the database. 6. Login Route /login This route logs in an existing user by checking their credentials and generating a JWT token. app.post('/login', async (req, res) => { const { email, password } = req.body; try { // CHECK IF USER EXISTS OR NOT const [rows] = await db.execute('SELECT * FROM users WHERE email = ?', [email]); const user = rows[0]; if (!user) { return res.status(400).json({ message: 'User not found' }); } // CHECK IF INPUT PASSWORD IS VALID FOR INPUT EMAIL const isMatch = await bcrypt.compare(password, user.password); if (!isMatch) { return res.status(400).json({ message: 'Invalid credentials' }); } // CREATE THE JWT TOKEN const token = jwt.sign({ id: user.id, name: user.name, email: user.email }, JWT_SECRET, { expiresIn: '1h' }); // SET THE JWT TOKEN IN THE COOKIE res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production', sameSite: 'Strict', maxAge: 3600000 // 1 HR EXPIRATION }); res.json({ message: 'Logged in successfully!' }); } catch (error) { console.error(error); res.status(500).json({ message: 'Server error' }); } }); bcrypt.compare(password, user.password): Verifies if the hashed password matches the one stored in the database. jwt.sign(): Creates a JWT that includes user information (e.g., ID, name, and email). The token expires in 1 hour. jwt.sign() method takes two arguments payload, JWT_SECRET, options(optional) res.cookie(): Sets a cookie with the JWT, secured by httpOnly (only accessible by the server) and sameSite settings. 7. JWT Verification Middleware The verifyAuthToken middleware ensures that only requests with a valid JWT token can access protected routes. const verifyAuthToken = (req, res, next) => { const token = req.cookies.token; if (!token) return res.status(403).json({ message: 'Token is missing.' }); try { const decoded = jwt.verify(token, JWT_SECRET); req.user = decoded; next(); } catch (err) { res.status(401).json({ message: 'Invalid token.' }); } }; req.cookies.token: Extracts the token from cookies. jwt.verify(token, JWT_SECRET): Verifies the token using the JWT secret key. If valid, decoded contains the token’s payload, which is assigned to req.user. next(): Proceeds to the next middleware if the token is valid. 8. Protected Route - /protected A sample protected route accessible only to authenticated users. It returns a personalized greeting using the user’s name from the token. app.get('/protected', verifyAuthToken, (req, res) => { res.json({ message: `Hello, ${req.user.name}! This is a protected route.` }); }); verifyAuthToken: Middleware applied to check the user’s authentication status. req.user.name: Accesses the user’s name from the decoded JWT payload. 9. Start the Server The server listens on the defined PORT. app.listen(PORT, () => { console.log(`Server is running on http://localhost:${PORT}`); }); Full Code * jwt = require('jsonwebtoken'); const bcrypt = require('bcryptjs'); const cookieParser = require('cookie-parser'); const mysql = require('mysql2/promise'); const app = express(); const PORT = 3000; const JWT_SECRET = 'your_jwt_secret_key'; // MySQL CONNECTION SETUP const db = await mysql.createConnection({ host: 'localhost', user: 'your_MySql_username', password: 'your_MySql_password', database: 'users' }); // MIDDLEWARE app.use(express.json()); app.use(cookieParser()); // ROUTES app.post('/register', async (req, res) => { const { name, email, password } = req.body; try { // CHECK IF USER ALREADY EXISTS const [rows] = await db.execute('SELECT * FROM users WHERE email = ?', [email]); if (rows.length > 0) { return res.status(400).json({ message: 'User already exists' }); } // HASH THE PASSWORD const hashedPassword = await bcrypt.hash(password, 10); // SAVE THE USER IN THE DATABASE const result = await db.query('INSERT INTO userDB (name, email, password) VALUES (?, ?, ?)', [user.name, user.email, hashedPassword]); if(result[0].insertId){ res.status(201).json({ message: 'User registered successfully!', insertId: result[0].insertId }); } res.status(500).json({message: 'Something went wrong in DB execution'}); } catch (error) { console.error(error); res.status(500).json({ message: 'Server error' }); } }); // LOGIN ROUTE app.post('/login', async (req, res) => { const { email, password } = req.body; try { // CHECK IF USER EXISTS OR NOT const [rows] = await db.execute('SELECT * FROM users WHERE email = ?', [email]); const user = rows[0]; if (!user) { return res.status(400).json({ message: 'User not found' }); } // CHECK IF INPUT PASSWORD IS VALID FOR INPUT EMAIL const isMatch = await bcrypt.compare(password, user.password); if (!isMatch) { return res.status(400).json({ message: 'Invalid credentials' }); } // CREATE THE JWT TOKEN const token = jwt.sign({ id: user.id, name: user.name, email: user.email }, JWT_SECRET, { expiresIn: '1h' }); // SET JWT TOKEN IN THE COOKIE res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production', sameSite: 'Strict', maxAge: 3600000 // 1 HR EXPIRATION TIME }); res.json({ message: 'Logged in successfully!' }); } catch (error) { console.error(error); res.status(500).json({ message: 'Server error' }); } }); // MIDDLEWARE TO VERIFY THE JWT TOKEN const verifyAuthToken = (req, res, next) => { const token = req.cookies.token; if (!token) return res.status(403).json({ message: 'Token is missing.' }); try { const decoded = jwt.verify(token, JWT_SECRET); req.user = decoded; next(); } catch (err) { res.status(401).json({ message: 'Invalid token.' }); } }; // PROTECTED ROUTE app.get('/protected', verifyAuthToken, (req, res) => { res.json({ message: `Hello, ${req.user.name}! This is a protected route.` }); }); // START THE SERVER app.listen(PORT, () => { console.log(`Server is running on http://localhost:${PORT}`); }); Summary This application: Allows user registration by hashing passwords and storing user data in MySQL. Supports secure login with JWT authentication. Uses cookies to store the JWT on the client side. Provides middleware for verifying JWTs before granting access to protected routes. Radar Promoted * Integrate geolocation with just a few lines of code Geofencing, maps, and geolocation compliance, all in a modern, cost-effective platform. Thousands of companies trust Radar's APIs and SDKs to power location-based experiences across hundreds of millions of devices globally. Learn more Top comm* next Unlock the Power of the Cloud: Deploy Your Django App on AWS EC2 Deniel Dave Natividad - Nov 4 *! kit2d2 - Nov 1 Lithe Crypt: Simplifying Encryption in PHP Applications Lithe - Nov 4 Improving the Performance of Your PHP Application with Lithe Cache Lithe - Nov 4 gautam kumar Follow Joined Nov 4, * * 🚀 #we* NodeList vs HTMLCollection: The Difference Between NodeList and HTMLCollection #* #react Meme Monday #discuss #watercooler #jokes Heroku *refer* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/gautam_kumar_d3daad738680/secure-user-authentication-api-with-express-jwt-bcrypt-and-mysql-16aj"
  },
  {
    "body": "* Follow Report Abuse Gautam Vaishnav Hi visitor, this is gautam. A fullstack web developer. visit gautamvaishnav.vercel.app for more. Jaipur, Rajasthan, India Joined on Sep 18, 2022 gauravvaishnav8690@gmail.com https://gautamvaishnav.vercel.app Education Metric Pronouns Gautam More info about @gautamvaishnav Badges Two * two years. Got it * One * one year. Got it 1 We*t * GitHub Repositories Ecommerce FreeZone Ecommerce TypeScript • 3 stars NewsApp-FC- The Next News created using React and News API is a powerful tool that allows users to stay informed on the latest news and events from around the world. JavaScript • 3 stars CryptoWeb JavaScript • 2 stars Imovie A Movie Single page application. TypeScript • 1 star shorty Shorty is a short url services. Here you can generate short url. EJS Skills/Languages MERN/MEAN, Astro, Next, Python, Flask, Golang etc. Currently learning Aspiring Gopher Available for Related to web development. Languages like Fullstack development, could tech etc. 4 posts published 8 comments written 17 tags followed Managing URLs - Part 01 🔗 * Gautam Vaishnav Follow May 9 Managing URLs - Part 01 🔗 #javascript #webdev #frontend 2 reactions Ad*h Gautam Vaishnav? * Gautam Vaishnav. * Enhancing Error Handling: 🚀Leveraging Logging and Effective Error Management in Your Codebase * Gautam Vaishnav Follow Mar 11 Enhancing Error Handling: 🚀Leveraging Logging and Effective Error Management in Your Codebase #webdev #node #javascript #* 2 min read Tailwind 3.3 * Gautam Vaishnav Follow Apr 2 '23 Tailwind 3.3 #news #webdev #tailwindcss #*t 3 min read TNT Stack. * Gautam Vaishnav Follow Mar 28 '23 TNT Stack. #* #tntstack 7 reactions 3 comments 1 *onsor Neon * ",
    "url": "https://dev.to/gautamvaishnav"
  },
  {
    "body": "* Follow Report Abuse gitter4coding always coding Joined on Aug 19, 2024 More info about @gitter4coding Badges 1 We*t * * 12 posts published 5 comments written 7 tags followed *) * Nov 7 *) #react #node #frontend 2 reactions Add C*ith gitter4coding? * gitter4coding. * Inventory of 5 commonly used environment deployment tools * Oct 24 Inventory of 5 commonly used environment deployment tools #docker #xampp #laravel * Why Node.js is becoming the new favorite of backend developers * Oct 21 Why Node.js is becoming the new favorite of backend developers #node #npm #backend 2 *d 8 key questions that every PHP expert should answer * Oct 17 8 key questions that every PHP expert should answer #webdev #php #laravel 2 *d It took 5 days to compile a complete set of PHP resources. Please like it. * Oct 15 It took 5 days to compile a complete set of PHP resources. Please like it. #php #laravel 2 * Is PHP still worth learning in 2025? * Sep 19 Is PHP still worth learning in 2025? #laravel #php #webdev #beginners 9 *d LaravelTop 10 Essential Tools for Laravel Developers in 2024 * Sep 18 LaravelTop 10 Essential Tools for Laravel Developers in 2024 #laravel #php #webdev #programming 9 *d What are the most practical and noteworthy new features of PHP8.4 for developers? * Sep 2 What are the most practical and noteworthy new features of PHP8.4 for developers? #php #webdev #laravel #beginners 14 *d Why Some Developers Prefer to Manually Configure PHP Environments Instead of Using Deployment Tools * Aug 29 Why Some Developers Prefer to Manually Configure PHP Environments Instead of Using Deployment Tools #php #laravel #webdev #beginners 8 reactions 14 comments 3 min read Is PHP Really Dead? Unveiling the Truth Through PHP’s Evolution * Aug 22 Is PHP Really Dead? Unveiling the Truth Through PHP’s Evolution #php #laravel #frontend #backend 12 reactions 4 comments 6 min read PHP 8.4 Introduces array_find Function: Innovation or Gimmick? * Aug 20 PHP 8.4 Introduces array_find Function: Innovation or Gimmick? #php #laravel #webdev #development 10 *d Is PHP’s DateTime Class Really That Bad? * Aug 19 Is PHP’s DateTime Class Really That Bad? #php #laravel 14 reactions 1 comment 4 *onsor Neon * ",
    "url": "https://dev.to/gitter4coding"
  },
  {
    "body": "* 2 Add reaction 2 Like 0 *s 0 Fire 0 Jump to Comments 0 * gitter4coding Posted on Nov 7 2 *) #react #node #frontend The Fastest Way to Set Up a React Project in 2025 (Latest Tools) In 2025, React continues to lead the front-end development trend. With advancements in tools and technologies, setting up a React project has become more efficient and convenient. This article will introduce how to quickly set up a React project using the latest tools and technologies. Using ServBay for Rapid Development Environment Setup Why Choose ServBay? ServBay is a powerful development environment management tool that provides an all-in-one solution to help developers quickly set up and manage projects. Its main advantages include: Quick Configuration: No tedious installation or debugging required. Custom Domain Names and Free SSL: Enhances security and credibility. Rich Extension Modules: Supports multiple languages and databases. Green Software: Centralized management without polluting the system. Downloading and Installing ServBay First, we need to install ServBay as our local development environment. Go to the official website and click the Download button at the top. Once the download is complete, double-click the downloaded XX.dmg file. In the pop-up window, drag the ServBay.app icon to the Applications folder. Then, find the ServBay icon in the Applications folder and double-click to open it. ServBay provides a simple and intuitive initialization wizard to help you complete the setup. Follow the prompts to select the installation packages you need. Once the installation is complete, start ServBay and confirm that the services are running properly. You should see a success screen. Installing Node.js You can easily install and manage Node.js through the ServBay GUI panel. Here are the steps to install Node.js via the ServBay GUI: Open the ServBay GUI panel. Navigate to the Services section. Select the version of Node.js you need. Click the green Install button and wait for the installation to finish. Initializing the React Project Make sure you have the Node.js environment provided by ServBay installed. Then, use the following command to create a new React project: cd /Applications/ServBay/www npx create-react-app servbay-react-app Installing Dependencies Navigate to the project directory and run: cd servbay-react-app npm install Modifying Project Output Edit src/App.js to output \"Hello ServBay!\": import React from 'react'; import './App.css'; function App() { return ( <div className=\"App\"> <header className=\"App-header\"> <h1>Hello ServBay!</h1> </header> </div> ); } export default App; Starting the Development Server Start the development server with the following command: npm start -- --port 8585 Configuring Reverse Proxy Set up a reverse proxy in ServBay to access the development server via a custom domain name: Name: My first React dev site Domain: servbay-react-test.dev Host Type: Reverse Proxy IP: 127.0.0.1 Port: 8585 Access your project at https://servbay-react-test.dev. Building and Deploying the Production Version Building the Production Version After completing development, run the following command to build the production version: npm run build Configuring Static File Service Use ServBay to set up static file service to access the production version: Name: My first React production site Domain: servbay-react-test.prod Host Type: Static Website Root Directory: /Applications/ServBay/www/servbay-react-app/build Access the production version at https://servbay-react-test.prod. Other Latest Tools Vite: A new build tool known for its fast startup time and efficient hot module replacement, significantly speeding up development. Next.js: Offers server-side rendering and static generation for React applications, making it an excellent choice for building high-performance applications. Tailwind CSS: A utility-first CSS framework that accelerates style development, providing a highly customizable design system. Conclusion In 2025, setting up a React project using the latest tools and technologies has never been easier or more efficient. The powerful features offered by ServBay, combined with tools like Vite, Next.js, and Tailwind CSS, help developers quickly build outstanding applications. Try these technologies now to enhance your development efficiency! _SurveyJS Promoted * Build Your Own Forms without Manual Coding SurveyJS UI libraries let you build a JSON-based *, * with no user limits. Includes * logic, an integrated CS*ics, and more. Learn more * * Trending in Nod* in JavaScript, *sia, and learning from GitHub repositories for best practices. * Client-Side Rendering and SPAs in Web Development🌐 Ameni Ben Saada - Nov 4 E2E testing in React with Cypress Eduardo Henrique Gris - Oct 28 Understanding the Temporal Dead Zone (TDZ) in JavaScript Rajesh Dhiman - Oct 5 The Ultimate Guide to Adding a Favicon to Your Website Mursal Furqan Kumbhar - Oct 28 gitter4coding Follow always coding Joined Aug 19, 2024 More from gitter4coding Why Node.js is becoming the new favorite of backend developers #node #npm #backend Is PHP Really Dead? Unveiling the Truth Through PHP’s Evolution #php #laravel #frontend #backend Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/gitter4coding/the-fastest-way-to-build-a-react-project-in-2025-with-the-latest-tools-4pk2"
  },
  {
    "body": "* Follow Report Abuse Gowtham S Software engineer exploring front/backend tech, cloud solutions, and AI. Join me on a journey of innovation and learning! Joined on Oct 27, 2024 More info about @gowtham06 Badges * * 3 tags followed How to Integrate HashiCorp Vault with Node.js: Securely Manage Sensitive Data Gowtham S Gowtham S Gowtham S Follow Oct 27 How to Integrate HashiCorp Vault with Node.js: Securely Manage Sensitive Data #javascript #node #webdev #opensource Add Comment 4 *onsor Neon * ",
    "url": "https://dev.to/gowtham06"
  },
  {
    "body": "* 0 *ead 0 * 0 * Gowtham S Posted on Oct 27 How to Integrate HashiCorp Vault with Node.js: Securely Manage Sensitive Data #javascript #node #webdev #opensource When working with sensitive data like passwords, API keys, or personal user information, it's essential to store them securely. Hardcoding secrets in your source code or keeping them in plain text files is a risky approach. This is where HashiCorp Vault comes into play. Vault is an open-source tool for managing secrets, such as credentials, API keys, and sensitive configurations. In this tutorial, I will walk you through the process of: Installing HashiCorp Vault on Windows Integrating it with a Node.js application Performing basic CRUD operations (Create, Read, Update, Delete) with email-password pairs stored in Vault. Prerequisites Before we dive in, make sure you have the following: Node.js installed on your system. A basic understanding of JavaScript and Node.js. HashiCorp Vault installed. Step 1: Installing HashiCorp Vault on Windows Let's start by setting up Vault on your local machine. Download Vault Go to the official Vault downloads page and download the Windows binary. Unzip the downloaded file and move the vault.exe file to a directory (e.g., C:\\vault). Add Vault to PATH Open the Start Menu and search for Environment Variables. In System Variables, find Path and click Edit. Add the directory where vault.exe is located (C:\\vault) to the list. Open a new Command Prompt and verify the installation by running: vault --version Start Vault in Development Mode Start the Vault server in development mode using this command: vault server -dev This command will launch Vault locally, and you should see a Root Token displayed in the terminal. Save it for later; you'll need it to authenticate. Step 2: Setting Up a Node.js Project Now that Vault is running, we will set up a Node.js project to interact with Vault. Initialize a New Node.js Project Create a new directory for your project and navigate into it: mkdir vault-node-app cd vault-node-app Initialize a new Node.js project: npm init -y Install the required dependencies: npm install node-vault dotenv node-vault: This is the official Node.js client for Vault. dotenv: To manage environment variables. Step 3: Integrating Vault with Node.js Configure Environment Variables Create a .env file in your project root directory to store Vault configurations: VAULT_ADDR=http://127.0.0.1:8200 VAULT_TOKEN=<your-root-token> Replace with the root token displayed when you started Vault in development mode. Create the Node.js Script Create a new index.js file in your project directory and paste the following code: require('dotenv').config(); const vault = require('node-vault')({ apiVersion: 'v1', endpoint: process.env.VAULT_ADDR, token: process.env.VAULT_TOKEN }); const SECRET_PATH = 'secret/data/users'; // Path to store user secrets // Save email and password async function saveCredentials(email, password) { try { const result = await vault.write(SECRET_PATH, { data: { [email]: { password } } }); console.log(Credentials saved for ${email}:, result); } ca*or saving credentials:', error); } } // Update credentials by email async function updateCredentials(email, newPassword) { try { const result = await vault.write(SECRET_PATH, { data: { [email]: { password: newPassword } } }); console.log(Credentials updated for ${email}:, result); } ca*or updating credentials:', error); } } // Get credentials by email async function getCredentials(email) { try { const result = await vault.read(SECRET_PATH); const userData = result.data.data[email]; if (userData) { console.log(Retrieved credentials for ${email}:, userData); } else { console.log(No credentials found for ${email}); } } ca*or retrieving credentials:', error); } } // Delete credentials by email async function deleteCredentials(email) { try { const result = await vault.delete(SECRET_PATH); console.log(Credentials deleted for ${email}); } ca*or deleting credentials:', error); } } // Example Usage (async () => { await saveCredentials('test@example.com', 'password123'); await getCredentials('test@example.com'); await updateCredentials('test@example.com', 'newpassword456'); await getCredentials('test@example.com'); await deleteCredentials('test@example.com'); })(); Explanation of Code Save credentials: Stores an email and password in Vault. Update credentials: Updates the password for the provided email. Retrieve credentials: Fetches stored credentials using the email. Delete credentials: Deletes the credentials for the given email. We are using the secret/data/users path in Vault to store and manage user data. Step 4: Running the Application To run the application, use the following command: node index.js The script will: Save the email and password to Vault. Retrieve the credentials using the email. Update the password. Retrieve the updated credentials. Delete the stored credentials. Conclusion By following this tutorial, you now have a fully functional Node.js application that integrates with HashiCorp Vault. This setup provides you with a secure and scalable way to manage sensitive information like email-password pairs in your application. HashiCorp Vault is a powerful tool for storing secrets, and its integration with Node.js is relatively straightforward using the node-vault library. You can expand this setup to store other secrets like API keys, tokens, and more. If you're building any application that requires sensitive data management, it's highly recommended to adopt a secure storage mechanism like Vault to reduce security risks. 👋 * big *, it's free, and * Community matters Top comm* next Big O notation Sukhrob Tech - Oct 26 JavaScript Closures: Top * Nozibul Islam - Nov 7 * Le Quan Phat - Oct 26 🌍 Landmark API: Real-time Data for Landmarks, Tourism, and Travel Tech Marceli Borowczak - Oct 26 Gowtham S Follow Software engineer exploring front/backend tech, cloud solutions, and AI. Join me on a journey of innovation and learning! Joined Oct 27, * * * 🚀 #we* How I used an OpenSource LLM in Wordpress #webdev #llm #wordpress #opensource _SurveyJS Promoted * Build Your Own Forms Without Manual Coding With SurveyJS UI libraries, you can set up a fully customizable JSON-based *. You get * logic, a built-in CS*ics, and more. Plus, it’s fully compatible with any JS framework you’re using (React, Angular, Vue.js, jQuery). View demo 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/gowtham06/how-to-integrate-hashicorp-vault-with-nodejs-securely-manage-sensitive-data-55ek"
  },
  {
    "body": "* 183 Add reaction 146 Like 37 *s 0 Fire 7 Jump to Comments 206 * Bastian Gruber Posted on Mar 18, 2019 • Updated on Mar 25, 2019 146 37 Rust for Web Intro to Web Development with Rust for NodeJS Developers #rust #node Practical Web Development with Rust (3 Part Series) 1 Intro to Web Development with Rust for NodeJS Developers 2 Web Development with Rust— 02/x: Deploy your first App 3 Web Development with Rust — 03/x: Create a REST API You can find the second article in this series (\"deploy your first Rust app\") over here. Rust is different. You can pick up Python or Ruby over the weekend, create a first CRUD application and be happy with the results. With Rust… with Rust you will struggle to pass a String to a different method, change and return it. You then will order the Rust book, see its size, sigh and get started. After a few weeks of fighting through the book after work, you give up and wait until someone else creates an easy-to-follow tutorial. Here is your “easy” tutorial I struggled with the same problems. Life circumstances however gave me a few months time on my hands to really focus on Rust. What follows is a first overview, concept, and paths to follow. In the coming weeks and months, I’ll publish a series of articles to help you to get from concept to product. NodeJS vs Rust After installing them (I chose brew for macOS in this example, the method doesn’t matter), the underlying stack looks different. NodeJS needs V8, the runtime engine from Google, and bindings to the JavaScript library to run JavaScript code. Rust depends almost completely on Rust itself. Just the compiler is using llvm libraries, which are written in C and C++. How much \"web\" is in Rust? It was and is a design decision not to include a standard http library in Rust. The OSI layer is therefore covered differently: Node covers the whole stack, and offers with Koa and Express, two well-known and “rock-solid” web frameworks which help you to build applications on top of HTTP. On the Rust side of things, just TCP is implemented in the Rust Core. The current web frameworks (actix and rocket) are implementing everything up until HTTP though. So you don’t need to care where this is coming from. If you want to use pure HTTP calls without any larger framework, you can install “crates” (equivalent to npm packages in the Node world) which implement the HTTP protocol (like hyper and tiny_http). npm vs cargo Node is using npm for its package management: npm install is installing dependencies npm run xyz is executing scripts inside the package.json On the Rust side, cargo is handling everything related to your project: cargo new NAME --bin is creating an application cargo new NAME --lib to create a library cargo run is executing the code cargo build is creating an executable cargo test is running all tests inside the project There is an open PR to add cargo add to install dependencies. Right now you have to add them by hand to your Cargo.toml file. As you see, you don’t need to include scripts in a package.json to run tests or build and test your application. Mindset change: Cargo is fetching the packages after cargo run, and just if the version changed. So the first time it will fetch all packages, the second time just when a change in the version number happened. Unlike npm i which fetches the packages right away, and will add it to the package.json with the save notation. Ecosystem Node is not successful for no reason. The ecosystem is rich and flourishing. Rust is still developing, but has already many great “crates”. The website arewewebyet.org is tracking the progress and showing you interesting packages in the Rust world. There is also an attempt to create an official Rust Web Framework, called Tide. It is already pretty mature and can be used for side projects. Feel free to contribute and help craft a great environment for web development in Rust. Asnyc programming aka Promises aka Futures Nodes killer feature are Promises. Although not always easy to understand and handle, Promises and the event loop are what makes Node so lucrative. Rust is also implementing an asynchronous mechanism, which are not yet in the final version. They are called Futures. A library called Tokio is already offering an asynchronous run time. You can track the progress on asynchronous programming in Rust over at areweasyncyet. How to get started? Install Rust: curl https://sh.rustup.rs -sSf | sh Create a new project: cargo new web-app --bin cd web-app Now you can choose your web framework of choice. You can either start with rocket or actix. You can follow the tutorials on the website to get a first web application running. Heads up: undefined, borrowing and types To not to get frustrated until my next post, here are the main four things about Rust you will have to get used to (which are quite awesome after a while). There is no undefined. Rust has no real null value. This is a feature. Rust has a type called Option, which encapsulates either the return value or None. In this case, we use the Result type to return a value. You could, instead of returning a String, return an Option which might have a String value, or None if the website we are fetching from doesn’t contain any text. An easy solution, which you should not use in production, is to .unwrap() results to get the String out of the encapsulation. Homework: Try to check if the GET request errored and return an Error in this case instead of Ok(). You must have heard about borrowing. In short: Every assignment (=) to a non trivial type (everything which doesn’t have a fixed size) moves the ownership over. The method fetch_text() is not taking ownership over the url but just using a reference to it (via the & ). Homework: Figure out why this code here fails and how to solve it. You always have to know which type is returned from a method. In this example, our HTTP crate reqwest is returning a Response struct (type) which implements certain methods. The documentation is, as with so many crates, excellent. So have a look here. You don’t have to type return to return a value from a method. Just don’t put a ; at the end of a statement and this becomes your return value. Use this example to play around, see where you can get errors and learn to fix them. Is this all? Two opinions: “Sadly no!” “No, but that’s a good thing!” You actually have to learn a decent amount of Rust to get started. This is what I am here for. In the next few days, weeks and months I will cover the basics up until creating a solid web application. Up until then, I can recommend the Rust track on Exercism.io and the Rust Book which you can find also in a paper version at your local book store or at Amazon. As mentioned in my first article, Rust is making you a better developer, so the road will be long at times, but always worth it. Follow me on twitter, Medium or on dev.to to stay up to date! Practical Web Development with Rust (3 Part Series) 1 Intro to Web Development with Rust for NodeJS Developers 2 Web Development with Rust— 02/x: Deploy your first App 3 Web Development with Rust — 03/x: Create a REST API Highlight Promoted * Replays, Logs, Errors and Traces with one line of code Say goodbye to setup complexity. With Highlight.io, it’s as simple as: H.init($projectId) One line, endless insights. Get the full picture of your app’s performance from replays to traces without the hassle. Start with Highlight.io and watch your observability come to life. Get Started Top comments (7) * Francesco Pigozzi Francesco Pigozzi Francesco Pigozzi Follow I'm an Italian Software Engineer based in Bologna. I'm obsessed with performances and User Experience oriented products. Location Bologna, Italy Work Software Engineer at Cubbit Joined Mar 6, 2019 • Mar 19 '19 • Edited on Mar 21 • * Great article! I came across all the struggles you just listed coming from a NodeJs point of view. It's amazing to find another developer who appreciates Rust and tries to spread its knowledge with folks. 4 likes Like Reply John Simon John Simon John Simon Follow Joined Mar 20, 2019 • Mar 20 '* you might get something like this when you try to cargo build withh reqwest error: failed to run custom build command for `openssl-sys v0.9.42` process didn't exit successfully: `/home/john/git/rust/webapptest/target/debug/build/openssl-sys-ee15cf4bf02eea9b/build-script-main` (exit code: 101) and this Make sure you also have the development packages of openssl installed. For example, `libssl-dev` on Ubuntu or `openssl-devel` on Fedora. so ... sudo apt-get install libssl-dev ... rebuild and it runs! 2 likes Like Reply Bastian Gruber Bastian Gruber Bastian Gruber Follow Exploring Rust for the web Email gruberbastian@me.com Location Berlin Education B. Sc. Joined Mar 18, 2019 • Mar 2*use I ran this on macOS, so thanks for checking it on Ubuntu! 1 like Like Reply rhymes rhymes rhymes Follow Such software as dreams are made on. I mostly rant about performance, unnecessary complexity, privacy and data collection. Joined Feb 2, 2017 • Mar 19 '* Hi Bastian, great intro, thank you! I think it would be worth to link all your posts in a DEV series. If you use editor v1 you can do it like this: If instead you use editor v2: 2 likes Like Reply Bastian Gruber Bastian Gruber Bastian Gruber Follow Exploring Rust for the web Email gruberbastian@me.com Location Berlin Education B. Sc. Joined Mar 18, 2019 • Mar 21 '19 Copy * so much for this tip! I started a series! Do you know if there is a \"front page\" for series? 2 likes Like Reply rhymes rhymes rhymes Follow Such software as dreams are made on. I mostly rant about performance, unnecessary complexity, privacy and data collection. Joined Feb 2, 2017 • Mar 2*use I believe series are ordered chronologically, so the first post marked as part of the series is the front page. 2 likes Like Reply Matthieu Desprez Matthieu Desprez Matthieu Desprez Follow Location Bruxelles Work Fullstack Developer / DevOps Joined Jan 18, 2019 • Oct 29 '19 Co*s that's a great introduction to Rust from a NodeJs developer perspective ! I've recently started to learn Rust and your articles will be very helpful to me. 2 likes Like Reply * Sentry Promoted * Youtube Tutorial Series 📺 * Read next Build Inventory Software [Rust / Cursive] Bek Brace - Oct 28 🛠️ Node.js Best Practices for Writing Clean and Scalable Code 🚀 Ashish prajapati - Oct 27 How to Easily Manage Authentication in Express.js with FluidAuth imani brown - Sep 24 Result<T, E> type in PHP Harutyun Mardirossian - Oct 26 Bastian Gruber Follow Exploring Rust for the web Location Berlin Education B. Sc. Joined Mar 18, 2019 More from Bastian Gruber Announcing my book \"Rust Web Development\" #rust #book Rust for the Brave and True #rust #linux Explained: Futures in Rust for Web Development #rust #async Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/gruberb/intro-to-web-programming-in-rust-for-nodejs-developers-lp"
  },
  {
    "body": "* Curated Developer Guides This is a list of high quality guides on specific topics gathered for your learning pleasure. This list of community tutorials is an experimental directory starting with only CSS, Git, and a bit of JavaScript, but will be expanded to cover more overall topics. Enjoy diving in! If you want a post of yours featured here, make sure it is high quality and clearly includes all relevant keywords in the title and the first paragraph of the post. We want to maximize for readability, even when skimming. CSS Guides CSS Align Guides Oh my, one of the trickier topics! If you're still confused after reading these great guides, it's not your fault, it's CSS. CSS Animation Guides Animation in CSS is one of the most powerful things you can master for excellent UX development. Just don't overdo it! CSS Background Guides CSS Backgrounds can be a great way to add a splash of color to your pages, but there are a lot of options! CSS Border Guides Understanding all things border from border-style to border-size and using them all together. CSS Box Sizing Guides Box sizing can be a challenging overall topic. Fear not, however! All your questions will be answered in these great posts! CSS Display Guides Remember that different HTML elements come with default display properties! Please find all your display needs below. CSS Flex Guides Flexbox and flex properties are incredibly useful and can be mixed with other CSS layout approaches! CSS Filter Guides There is a lot you can do with CSS filters, from blurs to colors and more. It is worth understanding the possibilities here! CSS Font Guides Understanding font-family, font-size and more. Please leave a comment if you find any posts here helpful. These guides also include tips on loading fonts and handling fonts in general. CSS Grid Guides Grid is a powerful concept. Read these guides carefully, there is a lot to learn! CSS Margin Guides There is no right or wrong way to do CSS margins, but there are a lot of iffy ways! CSS Opacity Guides Let's be transparent: Opacity is an important part of a CSS tookkit. CSS Outline Guides A CSS Outline is drawn outside the borders of the CSS. These are tricky concepts, please read the guides thoroughly. CSS Overflow Guides CSS Overflow will determine whether content clips or scrolls, etc. It's important to get right when you're not sure the size of the content you're dealing with. CSS Padding Guides There's a lot of nuance in effective CSS padding. CSS Position Guides static, relative, absolute, fixed, sticky! Oh my!! CSS Shadow Guides box-shadow, text-shadow and everything about this property! Just don't overdo the shadows, that's never a good look. 😅 CSS Transform Guides If you understand how and when to use Transform, you can get a lot done! It's also important to understand the difference between Transform and Animnation. Read along! CSS Z-Index Guides Z-index is all about discipline and having a plan — easier said than done! Git Guides Git Add Guides The git add command takes a change in the working directory and stages it. It is the precursor to git commit most of the time. Enjoy the guides here! Git Branch Guides The git branch command lets you create, update, delete git branches depending on the arguments. Enjoy these guides Git Checkout Guides Git checkout is used to navigate between branches. Learn more in these guides Git Config Guides Git config allows you to set configuration values either locally and globally. Learn more with these guides. Git Clone Guides The git clone command is used to point to an existing git repository and make a copy of that repo in a new directory. Learn more with these community guides. Git Commit Guides The git commit command allows you to save your changes to the local git repository you are working in. Before committing, you meed to git add the changes. Learn more in these guides. Git Diff Guides Git diff helps track the differences between changes to a file. It is a multi-use command which can be executed in different contexts. Learn more in these guides. Git Merge Guides Git merge helps take multiple branches and combine them. Learn more in these guides. Git Log Guides Git log will print a the last n commits in a repo. Learn more in the guides below Git Pull Guides Git pull downloads files from a remote repo and updates your current HEAD. Learn more in these guides. Git Push Guides Git push is used to tajke local files and upload them to a remote git repo. Learn more in these guides below. Git Remote Guides The git remote command lets you create, update, delete and view remote repos, such as on GitHub. Learn more below. Git Revert Guides Git revert allows you to change a commit history. Learn more in these community guides below. Git Stash Guides Git stash is used to record the current state of work, but reverts the context back to a clean slate before the changes were made. Learn more below. JavaScript Guides JavaScript Array Guides Let's get to know the functionality of the JavaScript array object. Hopefully you find these guides helpful. JavaScript Arrow Function Guides Let's make sure we get the syntax correct for JavaScript Arrow Functions and differentiate them from other ways of defining functions in JavaScript. Browse below for key guides. JavaScript Async Guides The JavaScript Async function is one of the most powerful, yet sometimes unintuitive concepts in JavaScript. Hopefully you will have a better grip over async and async await once you dive into these guides. JavaScript Date Guides JavaScript date objects, like many other things in JavaScript, can be tricky. Dates, in general, can be tricky. Thankfully we have a lot of great guides here. JavaScript Event Guides A JavaScript Event, in a web dev context, is how a lot of interactivity flows. Sometimes an event is abstracted away by the framework, and sometimes you listen directly. No matter what, hopefully you find these guides helpful! JavaScript Map Guides The JavaScript Map functionality is used consistently to iterate over arrays in a consise and useful way. Use these guides to dive into all the JS Map nuance. JavaScript Promise Guides A JavaScript Promise is one of several ways to do asynchronous programming in JavaScript, and progress from one part of a program to the next. Get into all the details with these guides. JavaScript String Guides JavaScript strings are not always so straightforward, especially how they interpolate and can be interpreted as numbers. Let's get to the bottom of all the functionality in these guides. React Guides React Component Guides React Components are the fundamental independent and reusable bits of code in a React program. React Props Guides React Props are arguments which are passed into React components. React State Guides React State allows us to manage changing data in an application. React useState Guides useState allows you to preservevalues between the function calls. React useEffect Guides The useEffect Hook lets you perform side effects in your components. React useContext Guides useContext takes the Context as parameter to retrieve the value from it. React useReducer Guides useReducer allows for custom state logic. React useCallback Guides useCallback is used when a child is rerendering again and again without need. React useMemo Guides useMemo returns a memoized value so that it does not need to be recalculated. React useRef Guides useRef persists values between renders. Happy coding! * * ",
    "url": "https://dev.to/guides"
  },
  {
    "body": "* Follow Report Abuse Hannah Liao Self-taught software developer. Used to be a quality engineer. Joined on Oct 30, 2024 More info about @hannliao Badges * 1 post *owed * Hannah Liao Hannah Liao Hannah Liao Follow Oct 30 * #postgres #railway #node #tutorial * Diamond Sponsor Neon * ",
    "url": "https://dev.to/hannliao"
  },
  {
    "body": "* 0 *ead 0 * 0 * Hannah Liao Posted on Oct 30 * #postgres #railway #node #tutorial You've finished building a Node.js app and pushed it to GitHub, but how do you host it on Railway? In app.js of your project, add '0.0.0.0' to the app.listen function as shown below. Railway requires your app to explicitly listen on all network interfaces (0.0.0.0) instead of just the default localhost. Push this change to GitHub. From the Railway dashboard, select New and Deploy from GitHub repo. Select your project, click Deploy Now, and wait for deployment to complete. Close the side window and click on the Create button. Select Database and then Add PostgreSQL. Wait for deployment to complete. With the project card still selected, navigate to the Variables tab. Click on New Variable and add the Railway-provided DATABASE_URL. You should be able to start typing it in VARIABLE_NAME and select it from the dropdown menu. Railway will populate the value for you, then click Add. Click on the Postgres card on the left and navigate to the Variables tab. You should see all the Railway-provided Postgres variables. Copy the DATABASE_PUBLIC_URL (if you want your app to be public). In your terminal, change directory to your project. Run the following commands: export DATABASE_URL=<DATABASE_PUBLIC_URL> Run your script to populate the database. node db/populatedb.js <DATABASE_PUBLIC_URL> Great! You should see your table(s) in the Postgres Data tab. Go to project Settings and scroll down to Networking. Under Public Networking, click on Generate Domain. That's it! Click on the public domain, and you should be able to see your project working. Hope this tutorial helps! *? Manage p* Top comments (0) * * * memory management for large-scale apps, exploring new * learning best practices from GitHub repositories. * A Beginner’s Guide to Visualizing Data with Python for EDA Vikas76 - Oct 28 Building a REST API with Ballerina: A Beginner’s Walkthrough AkhilProto - Oct 14 VACUUM In Postgres Demystified Adam Furmanek - Nov 6 Autenticação com JWT no Frontend e Backend: Implementando com Node.js e ReactJS (em TypeScript) Lucas Pereira de Souza - Oct 27 Hannah Liao Follow Self-taught software developer. Used to be a quality engineer. Joined Oct 30, * Next.js 15 Deep Dive: Building a Notes App with Advanced Features #webdev #javascript #react #tutorial Meme Monday #discuss #watercooler #jokes Consistency is King, and here's why. #softskill* Heroku *referenc* 👋 ** * ",
    "url": "https://dev.to/hannliao/how-to-deploy-postgresql-database-to-railway-7l4"
  },
  {
    "body": "* Follow Report Abuse Harsh Mangalam Open Sourcer | Tech Blogger | Fullstack Engineer | Tech Event Speaker | Freelancer India Joined on Apr 14, 2020 harshdev8218@gmail.com https://github.com/harshmangalam Education BCA Pronouns he/him Work Software Engineer Four * four years. Got it * Three * three years. Got it MongoDB Atlas Hackathon 2022 Participant Awarded for participating in the MongoDB Atlas Hackathon 2022 on DEV. Got it Hacktoberfest 2022 *22 * 1 * MongoDB Atlas Hackathon Participant Awarded for submitting a valid project to the MongoDB Atlas Hackathon on DEV. *or 4 consecutive weeks! G* @harshmangalam Available for Collaboration 42 posts published 24 comments written 27 tags followed Pinned Hydrogen - A social media web app powered by SolidJS and NodeJS H*m Follow Mar 26 '22 Hydrogen - A social media web app powered by SolidJS and NodeJS #solidjs #solidhack2022 #node 27 * Celebrating 100th Open Source Contributions: A Journey of Growth and Collaboration. H*m Follow Aug 27 Celebrating 100th Open Source Contributions: A Journey of Growth and Collaboration. #opensource #webdev #github #javascript * Want to connect with Harsh Mangalam? * Harsh Mangalam. * Managing Static Assets in Public Directory vs Imports H*m Follow Jul 19 Managing Static Assets in Public Directory vs Imports #webdev #vite #javascript #react * Optimize DX with Typesafe Environment Variables and code Autocomplete H*m Follow Jul 8 Optimize DX with Typesafe Environment Variables and code Autocomplete #we* 4 * Implement JWT Refresh Token Authentication with Elysia JS and Prisma: A Step-by-Step Guide H*m Follow Jun 13 Implement JWT Refresh Token Authentication with Elysia JS and Prisma: A Step-by-Step Guide #prisma #typescript #webdev #bunjs 19 reactions 8 comments 10 min read Simplified Job Application Automation With Javascript H*m Follow Aug 19 '23 Simplified Job Application Automation With Javascript #javascript #webdev #automation #tutorial 2 * Mobile OTP based authentication in golang H*m Follow Aug 5 '23 Mobile OTP based authentication in golang #go #mongodb #gofiber #twilio 15 reactions 1 comment 10 min read Achieve fine grained reactivity and super fast UI updates in React with Legend-state H*m Follow Jul 26 '23 Achieve fine grained reactivity and super fast UI updates in React with Legend-state #react #tailwindcss #legend #vite 7 * Add JWT Authentication in Bun API H*m Follow Jun 11 '23 Add JWT Authentication in Bun API #bunjs #elysia #typescript #prisma 19 reactions 8 comments 5 min read Mongogram - Social media backend api using golang and mongodb H*m Follow Dec 4 '22 Mongogram - Social media backend api using golang and mongodb #atlashackathon22 #mongodb #atlas #go 7 reacti* fullstack resumable web app using Qwikcity and github rest api H*m Follow Nov 20 '22 Build fullstack resumable web app using Qwikcity and github rest api #qwik #github #netlify #tailwindcss 8 * Build your own github using Deno Fresh and Github REST API H*m Follow Jul 19 '22 Build your own github using Deno Fresh and Github REST API #deno #fresh #javascript #twind 14 * Video processing in browser using FFmpeg.wasm and Solidjs H*m Follow for Kubernetes Community Days Chennai May 7 '22 Video processing in browser using FFmpeg.wasm and Solidjs #solidjs #javascript #ffmpeg 25 * Transcribe voice using Deepgram SDK , NestJS and SolidJS H*m Follow Apr 7 '22 Transcribe voice using Deepgram SDK , NestJS and SolidJS #hackwithdg #solidjs #nest #node 7 *d Image upload using SolidJS and Cloudinary H*m Follow for Kubernetes Community Days Chennai Apr 5 '22 Image upload using SolidJS and Cloudinary #solidjs #cloudinary #suid #axios 14 * Improve user experience using Network status API and SolidJS H*m Follow for Kubernetes Community Days Chennai Mar 31 '22 Improve user experience using Network status API and SolidJS #solidjs #webdev #webapi #javascript 14 react*d lightweight and fast battery monitor web app using SolidJS H*m Follow for Kubernetes Community Days Chennai Mar 30 '22 Build lightweight and fast battery monitor web app using SolidJS #solidjs #webdev #javascript 16 * Solid-Meet an open source video calling web-app powered by SolidJS H*m Follow Feb 7 '22 Solid-Meet an open source video calling web-app powered by SolidJS #solidjs #tailwindcss #socketio #opensource 13 * DEV Nursery H*m Follow Jan 13 '22 DEV Nursery #atlashackathon #node #mongodb 2 *d FastStream - A Video Streaming Server in FastAPI(Python) and SQLModel(SQLAlchemy) H*m Follow Nov 1 '21 FastStream - A Video Streaming Server in FastAPI(Python) and SQLModel(SQLAlchemy) #python #fastapi #sqlalchemy #sqlmodel 6 *d Sveltekit web gallery app H*m Follow Oct 30 '21 Sveltekit web gallery app #svelte #sveltekit #tailwindcss #daisyui 5 *d Facebook create post section using NextJs,TailwindCSS and Headless UI H*m Follow Oct 17 '21 Facebook create post section using NextJs,TailwindCSS and Headless UI #react #nextjs #tailwindcss #headlessui 8 * SolidJS and Tailwindcss Todo App H*m Follow Oct 10 '21 SolidJS and Tailwindcss Todo App #solidjs #tailwindcss 6 * Image upload using Golang and React H*m Follow Jun 24 '21 Image upload using Golang and React #javascript #go #gofiber #react 34 * Setup Nextjs , Apollo client and Chakra UI for your upcomming projects H*m Follow Jun 9 '21 Setup Nextjs , Apollo client and Chakra UI for your upcomming projects #react #apolloclient #chakraui #nextjs 4 *d Mobile OTP based authentication and authorization API using Nodejs and Mongodb H*m Follow Jun 6 '21 Mobile OTP based authentication and authorization API using Nodejs and Mongodb #mongodb #webdev #node #javascript 64 reactions 12 comments 6 min read My Awesome Collections of 200+ github repo H*m Follow Jun 3 '21 My Awesome Collections of 200+ github repo #showdev #github #webdev 7 *d Track user location coordinates realtime using geolocation api, nextjs , nodejs and socket.io H*m Follow May 30 '21 Track user location coordinates realtime using geolocation api, nextjs , nodejs and socket.io #showdev #react #webdev #node 14 *d Awesome collections of Resources for fullstack javascript developer H*m Follow May 25 '21 Awesome collections of Resources for fullstack javascript developer #javascript #github #webdev 28 * 30+ Best Resources , Blog Posts and Articles for Javascript Developer H*m Follow May 23 '21 30+ Best Resources , Blog Posts and Articles for Javascript Developer #javascript 14 * Complete setup of Nextjs, SWR , Axios and Material UI with SSR for your upcomming projects H*m Follow May 23 '21 Complete setup of Nextjs, SWR , Axios and Material UI with SSR for your upcomming projects #nextjs #axios #swr #materialui 44 * I have created Web Gallery app using Reactjs , WebRTC and Chakra UI H*m Follow May 21 '21 I have created Web Gallery app using Reactjs , WebRTC and Chakra UI #showdev #react #webrtc #chakra 6 *d I have deployed my facebook clone on heroku and netlify H*m Follow May 20 '21 I have deployed my facebook clone on heroku and netlify #showdev #node #react #socketio 2 * Explore Fullstack modern tools H*m Follow May 19 '21 Explore Fullstack modern tools #webdev #fullstack #javascript #typescript 48 * * 6) H*m Follow May 16 '21 * 6) #node #apollo #express #prisma 3 * I have created Sveltegram an Instagram clone in Sveltekit and Nodejs H*m Follow May 15 '21 I have created Sveltegram an Instagram clone in Sveltekit and Nodejs #showdev #sveltekit #node #materialdesign 11 * I have created Facebook clone in MERN stack H*m Follow May 14 '21 I have created Facebook clone in MERN stack #showdev #react #node #socketio 50 * * 5) H*m Follow May 14 '21 * 5) #node #apollo #express #prisma 5 * * 4) H*m Follow May 13 '21 * 4) #node #apollo #express #prisma 6 *d * 3) H*m Follow May 13 '21 * 3) #node #apollo #express #prisma 7 * * 2) H*m Follow May 12 '21 * 2) #node #apollo #express #prisma 2 *d * 1) H*m Follow May 12 '21 * 1) Add Comment 2 *onsor Neon * ",
    "url": "https://dev.to/harshmangalam"
  },
  {
    "body": "* 462 Add reaction 371 Like 91 *s 0 Fire 52 Jump to Comments 457 * Andrew Healey Posted on Mar 28, 2019 • Updated on Dec 21, 2019 • Originally published at healeycodes.com 371 91 JavaScript One-Liners That Make Me Excited #discuss #javascript #webdev #node Dust off your ternary expressions, we're going in. One-liners are tricky to maintain (and sometimes even hard to understand) but that doesn't stop them from being cool as hell. There's a certain satisfaction that comes after writing a terse solution. This is a collection of some of my recent favorites. They will all run in your dev console so pop it open and try them out. I hope you'll share some of your own favorites in the comments! Calendar Hacking Ali Spittel tweeted this out recently. It solves a problem I've faced multiple times. If you swap the minus for a plus, it gives you the next seven days. // Create an array of the past seven days, inclusive [...Array(7).keys()].map(days => new Date(Date.now() - 86400000 * days)); Random ID generation This is my go-to function for creating unique ids when prototyping. I've even seen people using it in production in the past. It's not secure but ... there are worse random generation functions out there. // Generate a random alphanumerical string of length 11 Math.random().toString(36).substring(2); Quines A quine is a program that outputs its own source code. Quines have always fascinated me. I've got pretty close to completing my own quines a couple of times in different languages but details are the name of the game. I've picked some winners for you. Credit to Mama Fun Roll, PleaseStand, and Peter Olson respectively for these three. // $=_=>`$=${$};$()`;$() $=_=>`$=${$};$()`;$() // eval(I=\"'eval(I='+JSON.stringify(I)+')'\") eval(I=\"'eval(I='+JSON.stringify(I)+')'\") // For those who like their quines via alert // (function a(){alert(\"(\"+a+\")()\")})() (function a(){alert(\"(\"+a+\")()\")})() Scrape query parameters Talk about non-maintainable code. This converts the page's query parameters to an object in 78 bytes. Thanks Alex Lohr for code golfing it (and 齐翊 too). ?foo=bar&baz=bing => {foo: bar, baz: bing} // Set the current page's query parameters to `q` q={};location.search.replace(/([^?&=]+)=([^&]*)/g,(_,k,v)=>q[k]=v);q; I'd like to see a minifier work that hard. Working clock With a sprinkle of HTML, you can create a working clock with source code you could read out in one breath. I wrote this after a challenge from a co-worker. It ticks every second, updating the page with the current time. <body onload=\"setInterval(()=>document.body.innerHTML=new Date().toGMTString().slice(17,25))\"></body> Shuffle an array Until Pythonistas show up with their import random, random.shuffle(array) solution, we're going to enjoy what we have. This has the bonus of having an infinitesimal chance of being an infinite loop (implementation depending). Michiel Hendriks helped us save a few characters here 👍. Don't use in production. // Return a shuffled copy of an Array-like (arr) => arr.slice().sort(() => Math.random() - 0.5) Generate random hex code ES7's padEnd is a blessing. Along with padStart, they've made number to string conversions that much easier. Writing hex values right into JavaScript code is always pretty neat too. // Generate a random hex code such as `#c618b2` '#' + Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, '0'); Pass the interview in style The infamous interview question answer but codegolfed. I researched and I don't think it can get any shorter than this. for(i=0;++i<101;console.log(i%5?f||i:f+'Buzz'))f=i%3?'':'Fizz' Remove duplicates This only works with primitives but it's still nifty. Set takes any iterable object, like an array [1,2,3,3], and removes duplicates. The spread operator makes that set [1,2,3]. // Remove duplicates from the iterable `arr` [...new Set(arr)] A keyboard so real you can taste it Okay, I don't really count this as a one-liner but it's too good not to include. A masterful codegolf solution by edc65. It's terse to a fault and codegolfed within an inch of its life but we should bask in its glory. // Return a ***3D*** ASCII keyboard as string (_=>[...\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"].map(x=>(o+=`/${b='_'.repeat(w=x<y?2:' 667699'[x=[\"BS\",\"TAB\",\"CAPS\",\"ENTER\"][p++]||'SHIFT',p])}\\\\|`,m+=y+(x+' ').slice(0,w)+y+y,n+=y+b+y+y,l+=' __'+b)[73]&&(k.push(l,m,n,o),l='',m=n=o=y),m=n=o=y='|',p=l=k=[])&&k.join` `)() It prints: Amazing. Join 150+ people signed up to my newsletter on programming and personal growth! I tweet about tech @healeycodes. _SurveyJS Promoted * Simplify data collection in your JS app with a fully integrated form management platform. * ty*me analytics & more. Integrates with any backend system, giving you *. Learn more Top comments (52) * Michael Z Michael Z Michael Z Follow Software writer Location Tokyo Joined Oct 7, 2018 • * abuse I've got another good one to create arrays of a specific size and map over it at the same time. Array.from({length: 3}, (val, i) => i) // [0, 1, 2] 23 likes Like Reply d-h-e d-h-e d-h-e Follow Joined Mar 13, 2019 • Apr 2 '* [...Array(3).keys()] // [0, 1, 2] 15 likes Like Reply Mihail Malo Mihail Malo Mihail Malo Follow Joined Jul 11, 2018 • * abuse Oh SHID. This is exactly what I needed so many times, and it finally seems like it's a performant approach?! 3 likes Like Reply Brian Brian Brian Follow loading... Location New Zealand Joined Feb 7, 2019 • Mar 29 '19 • Edited on Mar 29 • * It looks quite clean and sleek, so I decided to test out the performance on my pc Weirdly using Array(N) is about 20% faster than using an array-like {length: N} when used inside Array.from() I also added comparisons of mapping as a parameter vs (dot)map too. 4 likes Like Thread Mihail Malo Mihail Malo Mihail Malo Follow Joined Jul 11, 2018 • Mar 30 '* Wow, that's... humbling. BTW, you could beat out ForLoop with: const arr = new Array(100) for (let i = 0, i < 100, i++) arr[i] = i since the size is known in advance. 3 likes Like Reply * ...former musician, voice actor, martial artist, started coding 38 years ago and turned front-end developer 25+ years ago. Email alex.th.kloss.77@googlemail.com Location Germany Work Senior Frontend Developer at CrabNebula Joined Jun 13, 2017 • * abuse You can shave off one more char for your hex color code generator without resorting to padEnd: // before '#' + Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, '0'); // after '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).slice(1, 6); 8 likes Like Reply Andrew Healey Andrew Healey *ation MSc Computer Science Wo* • * abuse A clever change. Probably faster too? 2 likes Like Reply * ...former musician, voice actor, martial artist, started coding 38 years ago and turned front-end developer 25+ years ago. Email alex.th.kloss.77@googlemail.com Location Germany Work Senior Frontend Developer at CrabNebula Joined Jun 13, 2017 • * abuse Thanks. Not sure if it's faster, but that's usually a non-issue for code golfing :) 3 likes Like Reply Rithvik Vibhu Rithvik Vibhu Rithvik Vibhu Follow 20 y/o tech enthusiast. Email rithvikvibhu@gmail.com Joined Oct 14, 2018 • Apr 4 '* I was curious and created a test: jsperf.com/hex-color-code-generator :) 2 likes Like Thread Andrew Healey Andrew Healey *ation MSc Computer Science Wo* • Apr 4 '* Awesome! Close to what I expected 👍 2 likes Like Reply Ben Sinclair Ben Sinclair Ben Sinclair Follow I've been a professional C, Perl, PHP and Python developer. I'm an ex-sysadmin from the late 20th century. These days I do more Javascript and CSS and whatnot, and promote UX and accessibility. Location Scotland Education Something something cybernetics Pronouns They/them Work Full-stack agency person Joined Aug 29, 2017 • Mar 29 '19 • Edited on Mar 29 • * // I'd like to see a minifier work that hard. document.location.search.replace(/(^\\?)/,'').split('&').reduce(function(o,n){n=n.split('=');o[n[0]]=n[1];return o},{}); // Challenge accepted. location.search.substr(1).split('&').reduce((o,n)=>{n=n.split('=');o[n[0]]=n[1];return o},{}); I'm not a big Javascript person so I don't know what the difference is between window.location, document.location and just location (which I assume uses the global window context). I know substr works fine on an empty string, and I'm making the (heroically cavalier) assumption that query strings start with a ? in all browsers' implementations of location.search. But both of these return something incorrect if there's no query string: {\"\": undefined} Oops. Well, we can do something about that: (() => {let x=location.search.substr(1).split('&').reduce((o,n)=>{n=n.split('=');o[n[0]]=n[1];return o},{});delete x[\"\"];return x})() And now it's longer and even less maintainable, but hey :) 8 likes Like Reply Andrew Healey Andrew Healey *ation MSc Computer Science Wo* • * abuse This is brilliant, Ben! 😄 2 likes Like Reply * ...former musician, voice actor, martial artist, started coding 38 years ago and turned front-end developer 25+ years ago. Email alex.th.kloss.77@googlemail.com Location Germany Work Senior Frontend Developer at CrabNebula Joined Jun 13, 2017 • * abuse I can probably do it in even less characters... let me try: q={};document.location.search.replace(/([^?&=]+)=([^&]+)/g,(_,k,v)=>q[k]=v);q; 6 likes Like Thread 齐翊 齐翊 齐翊 Follow Joined Apr 30, 2019 • Apr 30 '* Hey, that one could not accept empty value (eg:'?a=&b=1&c=') try this instead: //keys should not be empty, but value can q={};location.search.replace(/([^?&=]+)=([^&]*)/g,(_,k,v)=>q[k]=v);q; 4 likes Like Reply Raphael Schweikert Raphael Schweikert Raphael Schweikert Follow Joined Aug 21, 2018 • Apr 2 '19 • Edited on Apr 2 • * Be careful with that shuffle, it won’t yield truly random results because sort expects its comparator to uphold Math.sign(compare(a, b)) === -Math.sign(compare(b, a)). Microsoft once screwed up by using exactly that. 5 likes Like Reply Andrew Healey Andrew Healey *ation MSc Computer Science Wo* • Apr 2 '* What an interesting story! Thanks for sharing. And yes, for any production code just use Fisher/Yates! 5 likes Like Reply Stephen Chiang Stephen Chiang Stephen Chiang Follow Design Technologist. Harmonizing design and development daily. Apply ☕ || 🍺 liberally. Location Stavanger, Norway Work UX engineer / Front-end consultant / Mechanical keyboard hobbyist Joined Dec 16, 2017 • * abuse Awesome one liners... Until you hit save and Prettier formats it to two 🤣 8 likes Like Reply Michiel Hendriks Michiel Hendriks Michiel Hendriks Follow I shouldn't have written all of those tank programs. Location End of line! Education MSc Joined Mar 31, 2017 • Mar 29 '19 • Edited on Mar 29 • * Why waste all those extra characters, this also works (arr) => arr.slice().sort(() => Math.random() - 0.5) 5 likes Like Reply Andrew Healey Andrew Healey *ation MSc Computer Science Wo* • Mar 29 '19 * find, thanks! Edited 👍. 1 like Like Reply Brian Jenkins Brian Jenkins Brian Jenkins Follow 418 I'm a teapot. Location St. Petersburg, FL Work Software Engineer at Accusoft Joined Mar 31, 2019 • Apr 14 '19 • Edited on Apr 14 • * Does this count? 😈 { \"precommit\": \"git ls-files | while read -r FILE; do if file \\\"$FILE\\\" | grep -q \\\"text\\\"; then vim --clean -n -e -s -c \\\":%s/\\\\s\\\\+$//e|:retab|:wq\\\" \\\"$FILE\\\"; fi ; done\" } 4 likes Like Reply Andrew Healey Andrew Healey *ation MSc Computer Science Wo* • Apr 14 '* I'll allow it! 😀 1 like Like Reply greg greg greg Follow Work Security Engineer Joined Jan 19, 2019 • * abuse It's a shorthand for returning one of three colors if the score is truthy. Otherwise it returns a fallback value. score => ({1: \"#98FB98\", 2: \"#FFFF99\", 3: \"#FA8072\"}[score] || \"#DCDCDC\") 3 likes Like Reply * ...former musician, voice actor, martial artist, started coding 38 years ago and turned front-end developer 25+ years ago. Email alex.th.kloss.77@googlemail.com Location Germany Work Senior Frontend Developer at CrabNebula Joined Jun 13, 2017 • * abuse that can be even more minified: score => ([\"\", \"#98FB98\", \"#FFFF99\", \"#FA8072\"][score] || \"#DCDCDC\") you could lose the first array item and use score - 1, but that would have more characters. 6 likes Like Reply Ken Bellows Ken Bellows Ken Bellows Follow Full-time web dev; JS lover since 2002; CSS fanatic. #CSSIsAwesome I try to stay up with new web platform features. Web feature you don't understand? Tell me! I'll write an article! He/him Location Baltimore, MD, USA Education BS Computer Science, RPI Work Software Developer Joined Jul 11, 2018 • Mar 30 '* Would it? Wouldn't you shorten by 4 chars to remove \"\",, or 3 if whitespace doesn't count, and only add 2 chars to go from [score] to [score-1]? Seems like it'd still be shorter by at least a character, or am I missing something? 3 likes Like Reply Dominik Aksamit Dominik Aksamit Dominik Aksamit Follow Joined Sep 30, 2017 • Apr *use The one I recently discovered as very useful, mostly while testing or mocking API calls: await new Promise((resolve) => setTimeout(() => resolve(1), 2500)); Usually I use, when I have to simulate data fetching ;P 2 likes Like Reply Andrew Healey Andrew Healey *ation MSc Computer Science Wo* • Apr 4 '* Very cool! Thanks for sharing Dominik 👍 1 like Like Reply Dominik Aksamit Dominik Aksamit Dominik Aksamit Follow Joined Sep 30, 2017 • Apr 4 '20 Co*s! I would recommend adding most of them to vscode snippets. It's really easy to use just like typing \"sleep\" + enter and I have ready one-liner in my code ;) 1 like Like Reply * ...former musician, voice actor, martial artist, started coding 38 years ago and turned front-end developer 25+ years ago. Email alex.th.kloss.77@googlemail.com Location Germany Work Senior Frontend Developer at CrabNebula Joined Jun 13, 2017 • * abuse There are a lot of byte saving tips one can employ in code golfing. A nice collection can be found here: github.com/jed/140bytes/wiki/Byte-... 6 *ion (52 comments) * Neon Promoted * Postgres on Neon - Get the Free Plan No credit card required. The database you love, on a serverless platform designed to help you build faster. Get Postgres on Neon Read next 🌍 Landmark API: Real-time Data for Landmarks, Tourism, and Travel Tech Marceli Borowczak - Oct 26 Supercharging Svelte with Web Workers: Unleashing the Power of Background Processing for Smoother, Faster Apps Binsar Dwi Jasuma - Oct 25 Solving slow compilation in dev mode for Next.js Alex - Nov 8 Variables and Data types in Rust: A simplified approach. Aliyu Adeniji - Oct 25 *ation MSc Computer Science Wo* More from Andrew Healey Creating Randomness Without Math.random #javascript #webdev #computerscience #programming Polyfilling the Fetch API for Old Browsers and Node.js #javascript #webdev #beginners #tutorial Adding Comments to Gatsby with Netlify Serverless Functions + GitHub #javascript #webdev #tutorial #showdev * * * * ",
    "url": "https://dev.to/healeycodes/javascript-one-liners-that-make-me-excited-56aj"
  },
  {
    "body": "* DEV Help The latest help documentation, tips and tricks from the DEV Community. Getting Started with DEV Everything you need to know about getting started on DEV and joining the DEV Community Writing, Editing and Scheduling All the information you need on writing, editing and scheduling posts on DEV. Customizing Your Feed Tailor your reading experience on DEV to suit your preferences. Reacting, Commenting and Engaging Connect with the community, and boost engagement. Badges and Recognition Earn badges to adorn your profile and celebrate your contributions to the DEV Community! Advertising and Sponsorships Support DEV and explore our advertising options Spam and Abuse Use various channels available to provide feedback and report issues to us. Bugs, Vulnerabilities and Feature Requests Help us improve DEV for everyone Fun Stuff Explore for extra enjoyment! Community Resources Community-Crafted Gems, Pro Tips, How-Tos, and Clever Hacks Organizations Everything around Organizations on DEV 4 articles Delete your DEV Account Instructions for deleting your accoun*nsor Neon * ",
    "url": "https://dev.to/help"
  },
  {
    "body": "* 38 Add reaction 36 Like 2 *s 0 Fire 4 Jump to Comments 22 * Naman Kumar Posted on Apr 22, 2020 36 2 JavaScript || Logical OR (||) vs Nullish Coalescing Operator (??) in JavaScript #node #javascript #opensourc With the latest release of version 14, the Nullish Coalescing Operator (??) is now supported in NodeJS. In this post let us see what is the use case of this operator and how is it different from the logical OR. Logical Or (||) const paginate = (options = {}) => { return [1, 2, 3, 4, 5].splice(0, options.limit || 3); } paginate(1); // expected: [1], output: [1] paginate(); // expected: [1, 2, 3], output: [1, 2, 3] paginate(0); // expected: [], output: [1, 2, 3] How the logical or operator functions is, it returns the right hand value if the left hand value coerce to false. And that not only includes undefined and null but also 0 and ''. In many of our use cases, like the one above this causes unexpected results and we end up using the typeof operator. Nullish Coalescing Operator (??) This solves the problem for us. This operators returns the right hand value only if the left hand value is either null or undefined. const paginate = (options = {}) => { return [1, 2, 3, 4, 5].splice(0, options.limit ?? 3); } paginate(1); // expected: [1], output: [1] paginate(); // expected: [1, 2, 3], output: [1, 2, 3] paginate(0); // expected: [], output: [] Share your quick JavaScript bites in comments. 👋 * * and it's free. Get started Top comments (4) * hrdyjan1 hrdyjan1 hrdyjan1 Follow Vegetarian with long feet, who is in love with Marie and React. TL; DR Marie = Girlfriend React = JavaScript Library Location The Czech Republic Education Czech Technical University Work Bachelor at Prague, Front End developer Joined Sep 4, 2019 • Jan 13 '21 *ere should be probably \"limit\" only, no \"options/options.limit\". 8 likes Like Reply Patrick Alcisto Patrick Alcisto Patrick Alcisto Follow Author of CSS, hacker of JS, rider of Mountain Bikes (downhill type preferably), \"father\" of two dogs Location Charlotte, NC Work Software Engineer Joined May 2, 2019 • Feb 2 '21 * article but, @ hrdyjan1 is right, your example implies it expects an object with a possible limit property, yet you never pass the limit as part of an object in the three invocations. 3 likes Like Reply TonyDev 👾 TonyDev 👾 TonyDev 👾 Follow Web Developer Location Spain Work Web Developer at Itech Global Solutions Inc. Joined Nov 17, 2019 • Jun 30 • Edited on Jun 30 • * options.limit is always undefined All cases return [1, 2, 3] 1 like Like Reply Aniruddha Das Aniruddha Das Aniruddha Das Follow Joined Apr 8, 2023 • Apr 21 '23 Co*s, clears the basic concept. 1 like Like Reply * * * Sushant Gaurav - Nov 6 Handling Async Errors in JavaScript: A Quick Guide Midhul P - Nov 6 This Month in Solid #9: SolidHack started, new fellow and API change 😎 Daniel Afonso - Nov 5 Creating Theme Systems in React with SCSS and Redux M1dnightGMR - Nov 6 Naman Kumar Follow Engineering @ProductHunt Location New Delhi, India Work Software Engineer at Product Hunt Joined Sep 7, 2019 More from Naman Kumar A minimal authorization policy builder for NodeJs #npm #node #javascript #authorization Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/hereisnaman/logical-or-vs-nullish-coalescing-operator-in-javascript-3851"
  },
  {
    "body": "* Follow Report Abuse Tiberius Mairura Web Developer Nairobi, Kenya Joined on Jun 6, 2022 https://syncflowsolutions.com/blog Education Strathmore University More info about @hermitex Badges Two * two years. Got it * One * one year. Got it 1 We*t *t it Skills/Languages JavaScript, Python, C# Currently learning Flutter Available for Web app development projects of any kind. 24 posts published 5 comments written 18 tags followed Pinned Remove Duplicates From Array Tiber*irura Follow Jun 16 '22 Remove Duplicates From Array #javascript #beginners 35 * Regular Expression Denial of Service (ReDoS) Tiber*irura Follow Jun 23 '23 Regular Expression Denial of Service (ReDoS) #discuss #node #javascript #security 1 reaction 1 c*ith Tiberius Mairura? * Tiberius Mairura. * What is AWS? Tiber*irura Follow Dec 16 '22 What is AWS? #aws #cloud #webdev #cloudskills * Strong Parameters in Rails? Tiber*irura Follow Dec 16 '22 Strong Parameters in Rails? #webdev #ruby #beginners #rails 3 reactions Add C* HTML DOM Tiber*irura Follow Dec 16 '22 Introduction to HTML DOM #beginners #webdev #javascript #html 5 * Working with Variables in Ruby Tiber*irura Follow Dec 4 '22 Working with Variables in Ruby #beginners #ruby #* 3 min read What is VueJS Tiber*irura Follow Nov 30 '22 What is VueJS #javascript #webdev #beginners #vue 3 * Testing in Ruby Tiber*irura Follow Nov 30 '22 Testing in Ruby #ruby #rails #testing #webdev Add Comment 2 min read What you need to know before using Ruby on Rails Tiber*irura Follow Nov 30 '22 What you need to know before using Ruby on Rails #webdev #beginners #ruby 4 * Array Methods in JavaScript Tiber*irura Follow Oct 5 '22 Array Methods in JavaScript #javascript #w*4 min read Create your custom hook Tiber*irura Follow Oct 4 '22 Create your custom hook #javascript #react #webdev #* Valid? & Invalid? in Ruby Tiber*irura Follow Sep 29 '22 Valid? & Invalid? in Ruby #webdev #ruby #rails #beginners 1 reaction 1 comment 6 min read Hoisting in JavaScript Tiber*irura Follow Jul 17 '22 Hoisting in * #beginners 8 * Scope in JavaScript Tiber*irura Follow Jul 17 '22 Scope in * #* 2 min read Configurable Objects in JS? Tiber*irura Follow Jul 11 '22 Configurable Objects in JS? #webdev #javascript #beginners 7 * Create Multidimensional Array from an Object Tiber*irura Follow Jul 7 '22 Create Multidimensional Array from an Object #javascript #beginners #webdev 10 * Differences between Single and Double Quotes in Bash Tiber*irura Follow Jun 28 '22 Differences between Single and Double Quotes in Bash #bash #beginners 3 *d How to Extract URL Query Parameters Tiber*irura Follow Jun 27 '22 How to Extract URL Query Parameters #javascript #webdev #beg*mment 2 min read Create private fields in JavaScript Tiber*irura Follow Jun 26 '22 Create private fields in JavaScript #javascript #beginners #webdev 5 *d Youbified - Implementing a LiveStream API Tiber*irura Follow Jun 24 '22 Youbified - Implementing a LiveStream API #livestreamapi #livestream #begginer #*t 5 min read Pass Functions as Arguments in JavaScript? Tiber*irura Follow Jun 9 '22 Pass Functions as Arguments in JavaScript? #javascript #functional #* 3 min read What are the Types of Functions in JavaScript? Tiber*irura Follow Jun 8 '22 What are the Types of Functions in JavaScript? #beginners #functions #typesoffunctions #javascript 10 * Scripting vs. Programming Languages Tiber*irura Follow Jun 7 '22 Scripting vs. Programming Languages #beginners #* 2 min read What is a Variable in Programming? Tiber*irura Follow Jun 7 '22 What is a Variable in Programming? #javascript #beginners #variable 4 * * ",
    "url": "https://dev.to/hermitex"
  },
  {
    "body": "* 3 Add reaction 3 Like 0 *s 0 Fire 4 Jump to Comments 6 * Muhammad Hamza Hijazi Posted on Nov 16, 2020 3 How to start your development career as a Freelance developer ? #career #discuss #node I am a node.js developer, I am think of starting my career as Freelance developer. I don't have prior working experience with organization. How can I start my Freelance journey and learn more and grow and stay motivated ? Top comments (4) * Leonardo Ferreira Leonardo Ferreira Leonardo Ferreira Follow Joined Oct 19, 2017 • Nov 16 '* I know that this advice is not what you looking for but I wouldn't start my developer career as freelancer. I recommend you to try find a job first and gain some experience in software projects, agile framwework, precise estimating etc. Not every thing related to software is code. You should also improve your soft skills if you planning to deal with clients on your own 9 likes Like Reply Amitav Roy Amitav Roy Amitav Roy Follow Hobby photographer and full time web developer Location Mubai, Indina Work Software Developer at Focalworks Solutions Pvt. Ltd. Joined May 9, 2020 • Nov 16 '* I completely agree with what Leonardo said. Coding is something which you can pickup. There are ample of resources on the world wide web. What you will need are lot of skills like client management, perception management, estimating a work and many more things. Which you can learn when you work for some time in a company. 4 likes Like Reply Muhammad Hamza Hijazi Muhammad Hamza Hijazi Muhammad Hamza Hijazi Follow A passionate self-taught full stack JavaScript developer. Location Pakistan Education BS Computer Science Work Full-Stack JavaScript Developer Joined Jan 30, 2020 • Nov 16 '* I agree with you, actually I am not getting any interview call anymore. That's why I thought I should try my luck with freelancing 1 like Like Reply chandrakanth chandrakanth chandrakanth Follow .Net Expert, Full stack Location Omaha NE Work Application Developer at NFM Joined Nov 10, 2020 • Nov 16 '* I suggest to develop your GitHub profile with some of your project and dedicate your time to open source project for better understanding. This will help you to improve real-time knowledge and crack your interviews. 3 likes Like Reply * * Node.js: Struggling with Winston Logging? Rishi Kumar - Oct 14 Anthropic releases \"Computer Use\" Peter Kim Frank - Oct 22 TC39 JavaScript Updates, TypeScript 5.7 Beta, Node.js v20.18.0 and more James - Oct 13 Building a Self-Evolving Codebase: JavaScript’s AST Manipulation and Dynamic Compilation Shafayet Hossain - Nov 5 Muhammad Hamza Hijazi Follow A passionate self-taught full stack JavaScript developer. Location Pakistan Education BS Computer Science Work Full-Stack JavaScript Developer Joined Jan 30, 2020 More from Muhammad Hamza Hijazi Javascript callback functions are by default Synchronous or Asynchronous ? #javascript #react #node #programming What should I know to become an advanced nods.js developer ? #webdev #node #javascript What is the purpose of a Headless CMS ? and which one to chose #discuss #beginners #node #react Heroku *references R* 👋 *** * ",
    "url": "https://dev.to/hijazi313/how-to-start-your-development-career-as-a-freelance-developer-3m7g"
  },
  {
    "body": "* Follow Report Abuse Mehedi Hasan I want to share with friends, what i learn. Rajshahi division, Dhaka, Bangladesh. Joined on Nov 4, 2024 https://portfolio-me-eta-seven.vercel.app/ Education Pabna University of Science Technology Work Junior Developer WeDevs, Dhaka, Bangladesh. More info about @huzzathasan Badges * Skills/Languages Typescript, JavaScript, Python, C, Go, Html, CSS, Tailwindecss, React, React-Native, Flutter, Figma, Photoshop, Illustrator, Unity, more... Currently hacking on Website makeing. Available for As a ' Full Stack Web Developer ', ' Cross Platform App Development', 'Ai & Data Analyst ' * 24 tags followed *) Mehedi Hasan Mehedi Hasan Mehedi Hasan Follow Nov 4 *) #typescript #node #express #graphql * Diamond Sponsor Neon * ",
    "url": "https://dev.to/huzzathasan"
  },
  {
    "body": "* 0 *ead 0 * 0 * Mehedi Hasan Posted on Nov 4 *) #typescript #node #express #graphql Here’s a starter template to set up a TypeScript project using express with graphql-yoga for a GraphQL server. Steps Initialize the Project: First, set up a new Node.js project. mkdir graphql-yoga-express && cd graphql-yoga-express npm init -y Install Dependencies: Install the required packages. npm install express graphql graphql-yoga npm install -D typescript ts-node @types/express @types/node Set Up TypeScript: Initialize TypeScript configuration. npx tsc --init Adjust your tsconfig.json (optional but recommended changes): { \"compilerOptions\": { \"target\": \"es6\", \"module\": \"commonjs\", \"rootDir\": \"./src\", \"outDir\": \"./dist\", \"strict\": true, \"esModuleInterop\": true, \"skipLibCheck\": true } } Project Structure: Create the following project structure. graphql-yoga-express ├── src │ ├── index.ts # Entry point of the server │ ├── schema.ts # Define GraphQL schema and resolvers ├── package.json ├── tsconfig.json Create GraphQL Schema and Resolvers: Inside src/schema.ts, define a basic schema and resolver. // src/schema.ts import { createSchema } from 'graphql-yoga'; const typeDefs = /* GraphQL */ ` type Query { hello(name: String): String! } `; const resolvers = { Query: { hello: (_: unknown, { name }: { name: string }) => `Hello, ${name || 'World'}!`, }, }; export const schema = createSchema({ typeDefs, resolvers, }); Set Up the Server with Express: Inside src/index.ts, create an Express server and use graphql-yoga middleware. // src/index.ts import express from 'express'; import { createYoga } from 'graphql-yoga'; import { schema } from './schema'; const app = express(); const yoga = createYoga({ schema }); app.use('/graphql', yoga); const PORT = process.env.PORT || 4000; app.listen(PORT, () => { console.log(`Server is running at http://localhost:${PORT}/graphql`); }); Run the Server: Add a script to package.json for running the server in development mode. \"scripts\": { \"start\": \"ts-node src/index.ts\" } Then, start the server: npm start Test the GraphQL Endpoint Open http://localhost:4000/graphql in your browser, and test the query: query { hello(name: \"GraphQL-Yoga\") } You should receive a response like: { \"data\": { \"hello\": \"Hello, GraphQL-Yoga!\" } } This setup provides a basic Express server with graphql-yoga as the GraphQL layer. You can expand the schema and resolvers as needed. Coherence Promoted * The Next Generation Developer Platform Coherence is the first Platform-as-a-Service you can control. Unlike \"black-box\" platforms that are opinionated about the infra you can deploy, Coherence is powered by CNC, the open-source IaC framework, which offers limitless customization. Learn more Top comments (0) * * CodeRabbit Promoted * Cut Code Review Time & Bugs in Half with CodeRabbit Boost your team with AI-driven PR feedback! CodeRabbit offers instant PR summaries, smart code walkthroughs, 1-click commit suggestions, and seamless code quality & security checks, reducing tech debt. Ship faster with fewer bugs. Try CodeRabbit free today! Learn more Read next Understanding Closures in JavaScript: A Key Concept for 2024 Shafayet Hossain - Oct 13 What's New in Next.js 15: New Hooks, Turbopack and more Dimitris Kiriakakis - Oct 23 * Sushant Gaurav - Oct 23 No More try-catch: Bringing Rust's Result Type to TypeScript Richard Vanbergen - Oct 23 Mehedi Hasan Follow I want to share with friends, what i learn. Location Rajshahi division, Dhaka, Bangladesh. Education Pabna University of Science Technology Work Junior Developer WeDevs, Dhaka, Bangladesh. Joined Nov 4, * * 🚀 #we* Open-Source will make you richhhh! 🤑💸 #opensource #* * #webdev #backend #node Heroku *references R* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/huzzathasan/starter-template-for-use-graphql-yago-with-expresstypescript-18k9"
  },
  {
    "body": "* 9 Add reaction 9 Like 0 *s 0 Fire 10 Jump to Comments 3 * Haseeb Burki Posted on Sep 18, 2019 • Updated on Jan 27, 2020 9 Migrating API from Laravel to NestJS #discuss #help #node #laravel I want your opinion I've been working as a full-stack developer on mobile and web-based application backed by an API built in Laravel for 2 years. Fast forward to today we have 3 developers (excluding myself) working on the same code. Recently I've been seriously considering migrating the API to JavaScript. After doing some research I decided on NestJS. When I started looking at javascript (NodeJS) I was disappointed. None of the backend libraries or frameworks offered as much as Laravel does. I had to setup up very trivial things like server-side validation, dependency injection, error logging, etc. things which Laravel offers right out of the box. NestJS removed most of these concerns. Pros of Migrating to NestJS I have a personal desire to shift my work to JS. Migrating backend to JS closes the language barrier between frontend and backend devs. I can handle testing both frontend and backend with Jest. There are a lot more developers for Node and JS than for Laravel. JS ecosystem (npm) is much better than PHP's ecosystem. Node seems to have a leg up in terms of performance. Unfortunately Laravel is cursed by its language of choice (PHP). This scares away a lot of potential new developers. Note that I run a team and have to retain my employees. I also need to consider what resources are available in case I hire more employees. Cons of Migrating to NestJS The only issue I have is the time and effort I will have to put in to migrate all our work to a new framework. I (and my team) are comfortable with Laravel but want to migrate to NestJS. I just wanted to get more opinions about whether migrating is a good or bad idea? And do you think it will be worth it in the long run or not? *upercharge your development Reduce frustration, boost productivity, and increase your organization's competitive advantages with Red Hat Developer Hub. Learn more Top comments (10) * Dmitry Ivanov Dmitry Ivanov Dmitry Ivanov Follow Senior full stack developer. Prefer to work with TypeScript, React, Laravel, Express, React Native. Love my work for more than 15 years :) Location Moscow, Russia Work Frontend developer at Dostavista.global Joined Aug 22, 2019 • Jan 27 '20 Co*! I've worked with Laravel for about 3 years and I love it. But exactly as you, I wanted to work with Node.JS. I had some approaches to learn Node, but I didn't really have a project, to begin with. Right until now, today, I need to create an API. At first, I tried Loopback, but it seemed too complicated for me and has a mess in its documentation. And then I looked at NestJS, and I like it. But working with it I realized how far and how beautiful Laravel really is in comparison with NestJS (I suppose with any JS framework). Those TS decorators look really ugly (maybe I just didn't get used to working with them, it's just a first glance). But I'm keeping on just because JS ecosystem is better and I want to work with it more. 4 likes Like Reply Haseeb Burki Haseeb Burki Haseeb Burki Follow I’m a full stack engineer working at Numu, in charge of developing web and mobile apps, handling AWS applications and devOps tasks. I may also write sporadically about my technical adventures. Email haseeb.burki@numumail.com Location Islamabad, Pakistan Education Bachelors in Engineering, *s and Technology (NUST) Work CTO at Numu Joined Jan 17, 2019 • Jan 27 '* Before you start, take a look at foalts.org/. I actually found it a couple of days ago. I really liked NestJS and shipped a v small service to production but I decided against using it for my main API. The routing it provides really bugs me and is not at all suitable for my current API structure which I do not want to change. Another thing I don't like is the server-side validation and error handling. Laravel has really ruined me :P Try FoalTS it's relatively simple and much more flexible. I have not had the time to try it out fully, but I think it will be a better fit (for me) than NestJS. 1 like Like Reply Dmitry Ivanov Dmitry Ivanov Dmitry Ivanov Follow Senior full stack developer. Prefer to work with TypeScript, React, Laravel, Express, React Native. Love my work for more than 15 years :) Location Moscow, Russia Work Frontend developer at Dostavista.global Joined Aug 22, 2019 • Jan 27 '20 Copy * so much! I'll have a look :) 1 like Like Reply Prashanth Krishnamurthy Prashanth Krishnamurthy Prashanth Krishnamurthy Follow Developer | Creator of Things | Overall nice guy Location Bengaluru Joined Jul 1, 2018 • Sep 19 '* I don't have a lot to say, but here goes - I moved from Laravel to Node, and it was not exactly joyful. I was/am using AdonisJS - feels like Laravel in Node world, so the migration was a bit easier. IMO Laravel has quite a bit of tools + articles + people who were making development easier. Node + Javascript has a huge community but one tends to get confused by the many options. Looking back: I should have probably moved something small, evaluated how we fare and incrementally take up more. I will certainly not take up more complexity at the beginning - for e.g. move to a headless CMS + GraphQL while I was in Laravel + the good ol' Rest. Then - there is also a matter of cost. Shared servers can run Laravel and cost next to nothing while being acceptable for smaller applications. NodeJS on low-end VPS is not exactly expensive but things tend to add up. If you are in this situation - be mindful of the ongoing maintenance (patching OS, web servers, etc.) 4 likes Like Reply Haseeb Burki Haseeb Burki Haseeb Burki Follow I’m a full stack engineer working at Numu, in charge of developing web and mobile apps, handling AWS applications and devOps tasks. I may also write sporadically about my technical adventures. Email haseeb.burki@numumail.com Location Islamabad, Pakistan Education Bachelors in Engineering, *s and Technology (NUST) Work CTO at Numu Joined Jan 17, 2019 • Sep 19 '19 Copy l* the reply. I have a big system that I want to move to NestJS. I have a website in Gatsby, 3 web portals and a RN app. Everything including the database is hosted on AWS and I need to be able to scale. Also I love Laravel its a great framework you're right about the support and articles but it isn't really known to be performant at scale. That, along with the fact that devs here run from PHP and tend to go towards JS technologies is why I'm considering moving to NestJS. I do like the idea of porting something small. I had the exact same idea in mind about porting the portal we use for in-house use. 2 likes Like Reply Khac Nha Khac Nha Khac Nha Follow Joined Jan 19, 2022 • Jan 19 '* @hzburki have you done this yet? I am also planning to do this. and am looking to see if there are any good ideas. Nestjs connection problem with existing Database created from Laravel ok? I am worried about this problem and authentication problem with users table created with laravel. 1 like Like Reply Adil ismail Adil ismail Adil ismail Follow Web dev Joined Aug 26, 2019 • Oct 21 '* Unfortunately Laravel is cursed by its language of choice (PHP)\" Why do u say this ? 2 likes Like Reply Haseeb Burki Haseeb Burki Haseeb Burki Follow I’m a full stack engineer working at Numu, in charge of developing web and mobile apps, handling AWS applications and devOps tasks. I may also write sporadically about my technical adventures. Email haseeb.burki@numumail.com Location Islamabad, Pakistan Education Bachelors in Engineering, *s and Technology (NUST) Work CTO at Numu Joined Jan 17, 2019 • Oct 25 '20 C* mainly because of PHP's reputation in the dev community. As a developer who is constantly looking for talented and hard working developers, I find it difficult to find people who are interested in working on PHP. Developers nowadays want to move towards the JavaScript ecosystem such as Node and React etc. 1 like Like Reply Pavel Sheiman Pavel Sheiman Pavel Sheiman Follow Joined Jan 26, 2021 • Jan 26 '21 C* not just reputation. It's a fact. Once you're in the event-loop you can't get back to PHP's forking. It's like going from dedicated lane back to dial-up internet. I'm 10+ years in PHP development, and 1+ year in pure JS/TS development and I can feel the difference on my own skin. Swoole and RoadRunners try to solve this, but this is not going to work with mid-to-large sized projects, as compatibility is really poor and there is a lot of issues. PHP have to rethink legacy compatibility and make a big jump into new age to keep up with JS ecosystem progress. Or it's dead eventually. 2 likes Like Reply Matej Klobusnik Matej Klobusnik Matej Klobusnik Follow Joined Sep 29, 2020 • Feb 27 '22 *, what was the result? Have you migrated at the end? How much effort did it take? Was it worth it? Like Reply * Sentry Promoted * 📺 Youtube Tutorial Series * Read next Simple WhatsApp ChatBot in Node.js for Beginners WhatsApp API for developers - Oct 22 Setting Up Node.js and Yarn on Debian-based Distributions Khalif AL Mahmud - Oct 22 Edition 5: Funniest Monday Memes You Can’t Miss! Sukhpinder Singh - Oct 21 A Simple Guide to Domain-Driven Design (DDD) in Laravel Arafat Hossain Ar - Oct 21 Haseeb Burki Follow I’m a full stack engineer working at Numu, in charge of developing web and mobile apps, handling AWS applications and devOps tasks. I may also write sporadically about my technical adventures. Location Islamabad, Pakistan Education Bachelors in Engineering, *s and Technology (NUST) Work CTO at Numu Joined Jan 17, 2019 More from Haseeb Burki NestJS: Getting Started with SequilizeJS #nestjs #sequelizejs #node #webdev Heroku *referenc* 👋 *** * ",
    "url": "https://dev.to/hzburki/migrating-api-from-laravel-to-nestjs-332g"
  },
  {
    "body": "* Follow Report Abuse iAmSherif 💎 I am a software engineer with more than 3years of coding. Fluent in Java, Python, JavaScript, and C#. Currently working on AWS Serverless😉😎 Lagos, Nigeria Joined on Apr 23, 2023 awofiranyesherif4@gmail.com https://www.linkedin.com/in/sherifawofiranye Education Henley Business School, University of Reading. Pronouns He/Him Work Software Engineer More info about @iamsherif Badges One * one year. Got it * Skills/Languages Java, Python, Go, JavaScript, and C#. Any language anytime I am up. Currently learning AWS Serverless 8 posts *owed Schema V*mSher* * * Oct 11 * #aws #serverless #lambda #dynamodb 2 *d How to make authenticated HTTP POST and GET requests to third-party APIs in SpringBoot * Sep 26 How to make authenticated HTTP POST and GET requests to third-party APIs in SpringBoot #java #springboot #http * Securing Data at Rest: The Importance of Encryption and How to Implement It * Jul 14 Securing Data at Rest: The Importance of Encryption and How to Implement It #security #serverless #data #* How to validate requests in Amazon API Gateway using Request Validator and Validator Model in AWS CDK * Jun 30 How to validate requests in Amazon API Gateway using Request Validator and Validator Model in AWS CDK #apigateway #serverless #cloudcomputing #aws Add Comment 3 min read Getting started with AWS Serverless architecture: A Paradigm Shift in Cloud Computing * Nov 28 '23 Getting started with AWS Serverless architecture: A Paradigm Shift in Cloud Computing #aws #cloudcomputing #serverless #devop*he Observer Pattern Works: A Car Analogy * Nov 13 '23 How the Observer Pattern Works: A Car Analogy #programming #python #designpatterns #sof* Understanding the Strategy Design Pattern with Python and Java * Oct 20 '23 Understanding the Strategy Design Pattern with Python and Java #designpatterns #java #python #softwareengineering 2 * * ",
    "url": "https://dev.to/iamsherif"
  },
  {
    "body": "* 0 *ead 0 * 0 * iAmSherif 💎 Posted on Nov 8 Schema V* Introduction Validating data in DynamoDB is crucial for maintaining data integrity, ensuring application reliability, and reducing errors. Unlike relational databases, DynamoDB does not enforce strict schema constraints, giving you the flexibility to store a variety of data formats. However, this flexibility means you must take responsibility for validating data before it is written to the database. In this article, we’ll go through an approach to validate data in DynamoDB using AWS Lambda. Why Data Validation Matters in DynamoDB Without strict schema enforcement, data in DynamoDB can end up in inconsistent or incorrect formats. If validation is neglected, problems may arise, such as: Application Errors: Missing or incorrectly formatted data can lead to errors and application crashes. Data Inconsistencies: Querying inconsistent data formats can complicate analytics and reporting. Scalability Issues: Unvalidated data may lead to inefficient data structure and increased storage costs. To avoid these issues, validating data before saving it to DynamoDB is essential. How to validate schema using AWS Lambda In serverless architectures, AWS Lambda is a common approach for server-side validation. By implementing validation within Lambda functions, you can control data before it reaches DynamoDB. Here’s how you can incorporate validation in a Lambda function with Node.js: const Joi = require('joi'); // The schema definition using Joi const tableSchema = Joi.object({ id: Joi.string().required(), name: Joi.string().required(), email: Joi.string().pattern(new RegExp(\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\")).required(), phone: Joi.string().optional() }) const validateObject = async (data) => { try{ const value = await tableSchema.validateAsync(data); return value; }catch(error){ return { body: JSON.stringify({ message: \"Invalid request body\", error: err.message || err }), } } } module.exports.lambdaHandler = async (event, context) => { try{ const body = event.body const result = await writeToDynamodbTable(body); return result; } }catch (err) { return { statusCode: 400, body: JSON.stringify({ message: \"Invalid request body\", error: err.message || err }), }; } } const writeToDynamodbTable = async (data) => { try{ const value = await validateObject(data) const params = { TableName: 'YourTableName', Item: { id: value.id, name: value.name, email: value.email, phone: value.phone }, ConditionExpression: \"attribute_not_exists(id)\" };; const res = await dynamodbClient.send(new PutCommand(params)); return res; }catch(error){ throw error } }; In the code snippet above we: 1- Define the schema using Joi Schema 2- Validate our object in the validateObject function 3- Configure our params object 3- Send request to DynamoDB using AWS Lambda SAMPLE ERROR: If we send a mismatch object like this: { \"body\": { \"id\": \"value1\", \"name\": \"value2\", \"email\": \"value3@gmail.com\" } } Note: phone is not included in the object but it is a required key in the schema we defined. We will get an error like { statusCode: 400, body: { message: \"Invalid request body\", error: \"\"phone\" is required\" } } Conclusion Validating data in DynamoDB is a fundamental step to ensure data quality and avoid issues down the line. Whether you choose to validate data on the client, the server, or both, using a structured approach with reusable validation schemas will streamline the process. By following best practices, you can improve the reliability and performance of your DynamoDB-backed applications. —————————————— Follow my social handles for more articles: Click and follow on LinkedIn Twitter Dev Medium Highlight Promoted * Find Code Bottlenecks Fast 🏎️ No more hunting through endless lines of code. With Highlight.io, you can spot performance bottlenecks instantly, from frontend to backend. Optimize your app, improve load times, and keep users happy – all with a few clicks. Start diagnosing smarter with Highlight.io. Get Started Top comm* next React + AWS Cognito: Email Authentication Setup Guide (First Part) Jaime - Nov 5 * Ken Yip - Nov 4 Cross-Project Dependencies Handling with DBT in AWS MWAA Deeksha Gunde - Nov 4 AWS Lambda: OCR and Text Translation in the AWS Cloud Wojciech Lepczyński - Nov 7 iAmSherif 💎 Follow I am a software engineer with more than 3years of coding. Fluent in Java, Python, JavaScript, and C#. Currently working on AWS Serverless😉😎 Location Lagos, Nigeria Education Henley Business School, University of Reading. Pronouns He/Him Work Software Engineer Joined Apr 23, 2023 More from iAmSherif 💎 * #aws #serverless #lambda #dynamodb Securing Data at Rest: The Importance of Encryption and How to Implement It #security #serverless #data #dynamodb How to validate requests in Amazon API Gateway using Request Validator and Validator Model in AWS CDK #apigateway #serverless #cloudcomputing #aws Heroku *refer* 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/iamsherif/schema-validation-in-amazon-dynamodb-2c73"
  },
  {
    "body": "* Follow Report Abuse Idris Gadi Web developer building an awesome web experience and learning along the way. Pune, India Joined on Mar 27, 2024 https://github.com/IdrisGit Pronouns He/Him Work Frontend Developer at a Startup More info about @igadii Badges * Skills/Languages Typescript, React, Nextjs, Nodejs. (Generalist) Currently learning I am learning more about User Experience(UX), advancing my Typescript knowledge, learning new technologies and trying out new ideas. Available for Anything tech. 6 posts published 5 comments written 26 tags followed * * Nov 8 * #webdev #devops #node #github 1 comment 6 min read Want to connect with Idris Gadi? * Idris Gadi. * How TypeScript Makes React Better: Smoother Developer Experience, Fewer Bugs (With a useState Example) * Oct 27 How TypeScript Makes React Better: Smoother Developer Experience, Fewer Bugs (With a useState Example) #javascript #typescript #react #webdev 3 *d Beyond Basics: Handling Numeric Inputs Like a Pro with `<input type=\"number\">` * Sep 9 Beyond Basics: Handling Numeric Inputs Like a Pro with `<input type=\"number\">` #javascript #webdev #html #learning 4 * Why Math.min() > Math.max() in JavaScript Makes Complete Sense as It Is * Aug 31 Why Math.min() > Math.max() in JavaScript Makes Complete Sense as It Is #javascript #webdev #learning 6 * Why and How to Migrate Your React App from CRA to Vite * Jun 10 Why and How to Migrate Your React App from CRA to Vite #react #vite #webdev #refactorit 6 * Think Twice Before Using setInterval() for API Polling – It Might Not Be Ideal * May 19 Think Twice Before Using setInterval() for API Polling – It Might Not Be Ideal #webdev #javascript #api #programming 7 reactions 2 comments 5 *onsor Neon * ",
    "url": "https://dev.to/igadii"
  },
  {
    "body": "* 0 *ead 0 Raised Hands 0 Fire 1 Jump to Comments 1 * Idris Gadi Posted on Nov 8 * #webdev #devops #node #github As Software Developers, we love automation, be it automating tasks or using that automation. One such automation is CI/CD pipelines, and one of the most widely used platforms for CI/CD is GitHub Actions. It is crucial to learn the platform that we are using and the features that it offers to build efficient and reliable automation. One of the most common automation workflows used in Git-based Software Development is PR/MR checks, these checks have become an essential part of modern CI pipelines as they help maintain the source code and improve PR/MR reviews. In this article, we will focus on creating a PR checks workflow for a Node.js application using GitHub Actions, and how we can improve the DX of the workflow and make it more efficient using modular jobs, and caching. Prerequisite What is GitHub Actions How to create a Github Actions workflow. GitHub Actions Docs Dev.to Article What is actions/checkout and actions/setup-node Task We want to create a GitHub Actions workflow that runs whenever a PR is opened or updated, we want to check for three things in this workflow: Check if the linting rules are followed. Check the formatting of the code. Check all the test cases. This helps maintain the quality of the source code and PR reviews, as the reviewer doesn't have to worry about whether this PR will break any existing(tested) functionality or cause lint and formatting issues. Creating a PR-Check Workflow Let's create a workflow file called pr-check.yaml that triggers a pipeline whenever a PR is opened or updated against the main branch. Note: For this article we will use the ubuntu-latest runner but you can use whichever runner you want. Now, let's checkout the repository, setup node, and install dependencies: After the project has been setup and all the dependencies installed, let's run our PR-check scripts to check for lint, formatting, and tests: Voila!, we have a nice workflow automation that will benefit our development process. Or is it? The Issues You see this automation looks fine at first, however, it has some issues: All our tasks are crammed into one job. On the GitHub Actions dashboard, the workflow diagram will look something like this: If one of our tasks fails, we have to look into the logs to determine which one failed. This might not look like an issue, but logs expire after some time, and if we have more tasks or long-running tasks, it can be hard to read logs. (I mean c'mon, don't pretend you love reading logs) As a reviewer whenever there is a failing pipeline, you have to look into the logs and then tell the PR owner that 'this' check is failing in their PR. (Yeah, I don't like that either) A Better Approach One of our main issues is that all tasks are crammed into a single job, with no clear separation between them. So, let’s start by defining a separate job for each task. This will help keep things organized and make it easier to track each task individually! This solves all our issues! Each task runs in a separate job, so we don’t have to dig through logs to figure out where things went wrong. Plus, we get a nice diagram on the dashboard showing exactly which task failed. From there, we can dive right into the logs of the specific task to investigate further. However, it has a huge issue. The Issue Since each job runs in an isolated environment, it needs to make separate network calls for repeated actions, such as actions/checkout, actions/setup-node, and Installing Dependencies. Caching The issue of extra network calls can solved by caching the actions and their outputs. actions/checkout actions/checkout is globally cached by GitHub Actions and it doesn't require any network call to set it up, it also automatically caches the checked-out repository for the whole workflow run and it will only need to make a network call to check out the repository during the first job run and after that, it uses the workflow cache to check-out the repository in subsequent jobs. actions/setup-node actions/setup-node is also globally cached by GitHub Actions and doesn't require any network call to set it up. The action will first check the local cache to install the specified Node.js version and if it can't find that Node.js version in the cache, it will fall back to downloading the specified version and cache it for the workflow run. GitHub Actions hosted runners provide locally cached Node.js versions based on the Runner Image, you can also access this cache in your self-hosted runner if it has access to github.com or you can set up tool cache on self-hosted runners to cache the required Node.js versions locally. Installing Dependencies To install dependencies, we need to download packages from the NPM registry. Since GitHub can't cache every package available on NPM, each job run has to download these packages directly from NPM. This results in a network call for each job, which not only increases the execution time for each job (and the overall workflow runtime) but also eats into the runner quota—especially for private repositories. Yikes! That's a bummer, isn't it? We can use another amazing action provided by GitHub, actions/cache to cache our dependencies from our first job run and use that cache for subsequent jobs. However, we have something even better. actions/setup-node has built-in support for caching global packages data and restoring dependencies from the cache (if available) using actions/cache under the hood. All we have to do is use the optional cache option and pass in the name of the package manager (supported package managers are npm, yarn, and pnpm (v6.10+)). It gets even better, actions/setup-node defaults to searching for the dependency file (package-lock.json, npm-shrinkwrap.json, or yarn.lock) in the repository root, and uses its hash as a part of the cache key, which means any subsequent workflow runs will use the same global packages cache if the lock file is unchanged (i.e. no changes in the dependencies) or till the cache is alive. The Better Workflow Now, let’s put our caching knowledge into the workflow by creating a separate job for each task(check). Conclusion Using the actions, modularity, and caching features in GitHub Actions, we developed an effective and efficient workflow to automate our pr-checks. Similarly, we can utilize these features in other CI/CD operations and contribute towards improving project workflow. If you enjoyed this article and want to connect, feel free to reach out on Linked and X/Twitter. Red Hat Developer Promoted * An SRE approach to managing infrastructure The Operating OpenShift e-book is your guide to running and operating OpenShift clusters more efficiently. Download today Top comments (1) * * Web developer building an awesome web experience and learning along the way. Location Pune, India Pronouns He/Him Work Frontend Developer at a Startup Joined Mar 27, 2024 • Nov 9 Copy link Hide Report abuse If you are wondering, why I have used npm ci instead of npm install while installing the dependencies, you can read about it in my LinkedIn post: Installing NPM Packages in CI/CD 1 like Like Reply * * Methods and Implementations of Single Sign-On (SSO) Bohdan Lukianets - Nov 7 My First JavaScript Web App: Interactive Image Coordinate Finder Ryan VerWey - Nov 6 React Performance Optimization Techniques: Memoization, Lazy Loading, and More Rajesh Dhiman - Oct 24 2024's Git Survey is Live! Bruno Brito - Oct 24 Idris Gadi Follow Web developer building an awesome web experience and learning along the way. Location Pune, India Pronouns He/Him Work Frontend Developer at a Startup Joined Mar 27, 2024 More from Idris Gadi How TypeScript Makes React Better: Smoother Developer Experience, Fewer Bugs (With a useState Example) #javascript #typescript #react #webdev Beyond Basics: Handling Numeric Inputs Like a Pro with `<input type=\"number\">` #javascript #webdev #html #learning Why Math.min() > Math.max() in JavaScript Makes Complete Sense as It Is #javascript #webdev #learning Heroku *refer* 👋 ** * ",
    "url": "https://dev.to/igadii/building-efficient-nodejs-workflows-in-github-actions-leveraging-caching-and-modular-job-structures-4gd6"
  },
  {
    "body": "* Follow Report Abuse Sushant Gaurav Associate Engineer-PwC || Technical Content Writer Kolkata, India Joined on Oct 18, 2021 http://imsushant12.github.io Education LNCT, Bhopal Pronouns He/Him Work PwC, India More info about @imsushant12 Badges Three * three years. Got it * Two * two years. Got it *21 *21 * Skills/Languages C, C++, Python, DBMS, Computer Networks, OS, HTML, CSS, JavaScript, MySQL, NodeJS, ReactJS, Agile Methodology, LINUX, Git, GitHub, Microsoft Power Platform, AWS, Azure, Jira, NumPy, Pandas, Flask Currently learning FullStack Development. Currently hacking on Some React JS projects Available for Backend Development || Open source contributions || Data Science || Full Stack Development || Content Writing 53 posts published 5 comments written 13 tags followe**h Sushant Gaurav? * Sushant Gaurav. * * Sushant Gaurav Sushant Gau*d * S*v Follow Nov 4 * #we* 4 * * S*v Follow Nov 1 * #we* 16 * * S*v Follow Oct 30 * #webdev #* 3 min read Performance Optimization Techniques for Node.js Applications S*v Follow Oct 28 Performance Optimization Techniques for Node.js Applications #webdev #* 5 min read * S*v Follow Oct 25 * #webdev #* 4 min read * S*v Follow Oct 23 * #we* * S* S*v Follow Oct 21 S* #we* 2 * * S*v Follow Oct 18 * #we* * * S*v Follow Oct 16 * #webdev #* 4 min read * S*v Follow Oct 14 * #webdev #* 4 min read * S*v Follow Oct 11 * #webdev #* 5 min read * Node.js S*v Follow Oct 9 * *ers #node 2 *d * S*v Follow Oct 7 * #webdev #* 5 min read * S*v Follow Oct 4 * #webdev #javascript #* 5 min read * S*v Follow Oct 2 * #* #node Add Comment 5 min read * S*v Follow Sep 30 * #node #* * * Node.js S*v Follow Sep 27 * Node.js #webdev #* 5 min read * S*v Follow Sep 25 * #webdev #* 4 min read Scaling Nod* S*v Follow Sep 23 Scaling Nod* #webdev #javascript #node #programming 1 reaction * * S*v Follow Sep 20 Understanding * #webdev #javascript #* 5 *: Best Practices, Techniques, and Tools S*v Follow Sep 18 Scaling *, Techniques, and Tools #* #node Add Comment 5 min read NGINX for Node.js Applications: What, Why, and How to Use It S*v Follow Sep 16 NGINX for Node.js Applications: What, Why, and How to Use It #webdev #javascript #node #* S* and Best Practices S*v Follow Sep 14 S* and Best Practices #webdev #node #backend #javascript 10 reactions *ng Streams in Node.js — Efficient Data Handling S*v Follow Sep 12 Understanding Streams in Node.js — Efficient Data Handling #webdev #javascript #node * Event-Driven Programming with the EventEmitter in Node.js S*v Follow Sep 10 Mastering Event-Driven Programming with the EventEmitter in * 6 * Advanced * in Node.js S*v Follow Sep 8 Advanced * in Node.js #node #webdev #*t 4 min read Profiling and Benchmarking Node.js Applications S*v Follow Sep 6 Profiling and Benchmarking Node.js * #node 3 * Deploying and Scaling NodeJS * S*v Follow Aug 28 Deploying and Scaling NodeJS * #node #webdev #backend #aws * Web Development: Cookies, Authorization, Authentication, and File Uploads in Node.js S*v Follow Aug 27 Mastering Web Development: Cookies, Authorization, Authentication, and File Uploads in Node.js #node #webdev #backend #websecurity * Securing Web Applications: Stateful vs. Stateless Systems, Authentication, and Authorization in Node.js S*v Follow Aug 25 Securing Web Applications: Stateful vs. Stateless Systems, Authentication, and Authorization in Node.js #node #websecurity #webdev #javascript * Mastering Backend Development with NodeJS: MongoDB Integration, Mongoose, CRUD Operations, and MVC Architecture S*v Follow Aug 23 Mastering Backend Development with NodeJS: MongoDB Integration, Mongoose, CRUD Operations, and MVC Architecture #node #webdev #backend #database * NodeJS: REST APIs, Middleware, and HTTP Headers S*v Follow Aug 22 Mastering NodeJS: REST APIs, Middleware, and HTTP Headers #node #webdev #backend 2 *d Deepening NodeJS Knowledge: URLs, HTTP Methods, Express Framework, and Versioning S*v Follow Aug 21 Deepening NodeJS Knowledge: URLs, HTTP Methods, Express Framework, and Versioning #node #webdev #javascript #backend Ad*h NodeJS S*v Follow Aug 20 Getting Started with NodeJS #no*ers 4 * Serverless vs. Monolithic: Which is Right for You? S*v Follow Aug 16 Serverless vs. Monolithic: Which is Right for You? #serverless #architecture #devops #monolithicarchitecture Add Comment 6 min read A Guide to Master String Data Type in JavaScript S*v Follow Jul 22 A Guide to Master String Data Type in JavaScript #webdev #* Add Comment 4 min read A Guide to Master Numbers Data Type in JavaScript S*v Follow Jul 20 A Guide to Master Numbers Data Type in JavaScript #webdev #* Add Comment 4 min read A Guide to Master JavaScript Arrays S*v Follow Jul 18 A Guide to Master JavaScript Arrays #webdev #javascript #* Comment 5 min read A Guide to Master JavaScript-Objects S*v Follow Jul 15 A Guide to Master JavaScript-Objects #webdev #* Add Comment 5 min read A Guide to Master Functions in JavaScript S*v Follow Jul 12 A Guide to Master Functions in JavaScript #webdev #* 2 comments 3 min read Understanding Python Bytecode and the Virtual Machine for Better Development S*v Follow May 22 Understanding Python Bytecode and the Virtual Machine for Better Development #python #programming #productivity #opensource 5 * Jenkins Deep Dive: Mastering Linked Projects, User Management, and Architecture S*v Follow Nov 30 '23 Jenkins Deep Dive: Mastering Linked Projects, User Management, and Architecture #jenkins #devops #tutorial #cicd Add Comment 5 min read Simplify Your Builds: A Quick Maven Guide with Examples S*v Follow Nov 29 '23 Simplify Your Builds: A Quick Maven Guide with Examples #cicd #maven #devops #* CI/CD pipeline and Jenkins S*v Follow Nov 28 '23 CI/CD pipeline and Jenkins #devops #cicd #jenkins #tutorial * Demystifying the Inner Workings of Operating Systems S*v Follow Nov 13 '23 Demystifying the Inner Workings of Operating Systems #beginners #tutorial #operatingsystem #* Ansible: Understanding Conditions, Roles, and Vault S*v Follow Nov 11 '23 Ansible: Understanding Conditions, Roles, and Vault #devops #ansible #beginners #* 3 min read Exploring Ansible: Ad-Hoc Commands, Modules, and Playbooks S*v Follow Nov 8 '23 Exploring Ansible: Ad-Hoc Commands, Modules, and Playbooks #devops #ansible #* 5 min read Unleash the Power of Automation with Ansible S*v Follow Nov 5 '23 Unleash the Power of Automation with Ansible #ansible #devops #beginners #* GCP Storage S*v Follow Jul 29 '23 GCP Storage #gcp #cloudcomputing #gcpstorage #storageservices 2 comments 7 min read Introduction to Docker: Simplifying Application Deployment S*v Follow Jun 14 '23 Introduction to Docker: Simplifying Application Deployment #docker #devops #development #* 9 min read C++ Strings S*v Follow Jan 1 '22 C++ Strings #cpp #programming #beginners 7 reactions 2 comments 4 *onsor Neon * ",
    "url": "https://dev.to/imsushant12"
  },
  {
    "body": "* 0 *ead 0 * 1 * Sushant Gaurav Posted on Nov 8 Deployment of * Backend with NodeJS (36 Part Series) 1 Getting Started with NodeJS 2 Deepening NodeJS Knowledge: URLs, HTTP Methods, Express Framework, and Versioning ... 32 more parts... 3 Mastering NodeJS: REST APIs, Middleware, and HTTP Headers 4 Mastering Backend Development with NodeJS: MongoDB Integration, Mongoose, CRUD Operations, and MVC Architecture 5 Securing Web Applications: Stateful vs. Stateless Systems, Authentication, and Authorization in Node.js 6 Mastering Web Development: Cookies, Authorization, Authentication, and File Uploads in Node.js 7 Deploying and Scaling NodeJS * 8 Profiling and Benchmarking Node.js Applications 9 Advanced * in Node.js 10 Mastering Event-Driven Programming with the EventEmitter in Node.js 11 Understanding Streams in Node.js — Efficient Data Handling 12 S* and Best Practices 13 NGINX for Node.js Applications: What, Why, and How to Use It 14 Scaling *, Techniques, and Tools 15 Understanding * 16 Scaling Nod* 17 * 18 * Node.js 19 * 20 * 21 * 22 * 23 * Node.js 24 * 25 * 26 * 27 * 28 S* 29 * 30 * 31 Performance Optimization Techniques for Node.js Applications 32 * 33 * 34 * 35 * 36 * Deployment is the final step in the lifecycle of an application, allowing it to be accessed by users. Deploying a Node.js application to a robust and scalable platform like Amazon Web Services (AWS) provides performance and reliability at scale. This guide covers the step-by-step process of deploying a Node.js application to AWS using Elastic Beanstalk, which automates infrastructure provisioning, load balancing, and scaling. Step 1: Preparing the Application Before deployment, ensure that the Node.js application has the following: package.json file: Includes necessary dependencies, scripts, and application metadata. Environment configurations: Any environment-specific variables or keys should be handled securely. Server settings: The server should be configured to listen on the port provided by AWS. For example, a basic server.js file might look like this: * app = express(); const PORT = process.env.PORT || 3000; // Use AWS-assigned port app.get('/', (req, res) => { res.send('Welcome to my deployed Node.js app!'); }); app.listen(PORT, () => { console.log(`Server is running on port ${PORT}`); }); Step 2: Configuring AWS CLI and Elastic Beanstalk CLI 1. Install AWS CLI Install the AWS CLI by following the instructions at AWS CLI installation. 2. Configure AWS CLI Once installed, configure it using your AWS credentials: aws configure Provide the AWS access key, secret key, region, and output format. 3. Install Elastic Beanstalk CLI Elastic Beanstalk CLI helps in managing deployment. Install it from Elastic Beanstalk CLI documentation. Step 3: Initializing Elastic Beanstalk In the root directory of your Node.js application, run the following command to initialize Elastic Beanstalk: eb init Select the region, choose the platform (Node.js), and connect it with your AWS account. Step 4: Deploying the Application To deploy the application, create an Elastic Beanstalk environment: Run the following command: eb create nodejs-app-env This will create an environment for the application, complete with load balancing and scaling options. Deploy the application: eb deploy Elastic Beanstalk will now create and configure the necessary infrastructure. Step 5: Managing the Deployment Environment Variables To add environment variables (e.g., database URIs or API keys), use: eb setenv VAR_NAME=value Monitoring the Application Use the following command to view logs: eb logs Step 6: Accessing the Application After deployment, use the following command to open the application in your default browser: eb open Use Case: Real-World Scenario Imagine deploying a Node.js-based inventory management system on AWS to handle real-time stock updates, user authentication, and high-demand periods. Using Elastic Beanstalk simplifies the process, providing autoscaling capabilities that dynamically adjust based on the traffic. Conclusion Deploying a Node.js application on AWS with Elastic Beanstalk automates many complexities and provides a reliable environment for scaling applications to meet demand. Backend with NodeJS (36 Part Series) 1 Getting Started with NodeJS 2 Deepening NodeJS Knowledge: URLs, HTTP Methods, Express Framework, and Versioning ... 32 more parts... 3 Mastering NodeJS: REST APIs, Middleware, and HTTP Headers 4 Mastering Backend Development with NodeJS: MongoDB Integration, Mongoose, CRUD Operations, and MVC Architecture 5 Securing Web Applications: Stateful vs. Stateless Systems, Authentication, and Authorization in Node.js 6 Mastering Web Development: Cookies, Authorization, Authentication, and File Uploads in Node.js 7 Deploying and Scaling NodeJS * 8 Profiling and Benchmarking Node.js Applications 9 Advanced * in Node.js 10 Mastering Event-Driven Programming with the EventEmitter in Node.js 11 Understanding Streams in Node.js — Efficient Data Handling 12 S* and Best Practices 13 NGINX for Node.js Applications: What, Why, and How to Use It 14 Scaling *, Techniques, and Tools 15 Understanding * 16 Scaling Nod* 17 * 18 * Node.js 19 * 20 * 21 * 22 * 23 * Node.js 24 * 25 * 26 * 27 * 28 S* 29 * 30 * 31 Performance Optimization Techniques for Node.js Applications 32 * 33 * 34 * 35 * 36 * CodeRabbit Promoted * Cut Code Review Time & Bugs in Half with CodeRabbit Boost your team with AI-driven PR feedback! CodeRabbit offers instant PR summaries, smart code walkthroughs, 1-click commit suggestions, and seamless code quality & security checks, reducing tech debt. Ship faster with fewer bugs. Try CodeRabbit free today! Learn more Top comm* next Supercharging Svelte with Web Workers: Unleashing the Power of Background Processing for Smoother, Faster Apps Binsar Dwi Jasuma - Oct 25 How to update composer Antonio Silva - Oct 25 Variables and Data types in Rust: A simplified approach. Aliyu Adeniji - Oct 25 Creating a Live Collaborative Editor with Next.js and Sockets.IO Hamza Nadeem - Oct 25 Sushant Gaurav Follow Associate Engineer-PwC || Technical Content Writer Location Kolkata, India Education LNCT, Bhopal Pronouns He/Him Work PwC, India Joined Oct 18, 2021 More from Sushant Gaurav * #we* * #we* * #we* Neon Promoted * Postgres on Neon - Get the Free Plan No credit card required. The database you love, on a serverless platform designed to help you build faster. Get Postgres on Neon 👋 ** * ",
    "url": "https://dev.to/imsushant12/deployment-of-a-nodejs-application-on-aws-1pil"
  },
  {
    "body": "* 0 *ead 0 * 1 * Sushant Gaurav Posted on Nov 6 * #we* Backend with NodeJS (36 Part Series) 1 Getting Started with NodeJS 2 Deepening NodeJS Knowledge: URLs, HTTP Methods, Express Framework, and Versioning ... 32 more parts... 3 Mastering NodeJS: REST APIs, Middleware, and HTTP Headers 4 Mastering Backend Development with NodeJS: MongoDB Integration, Mongoose, CRUD Operations, and MVC Architecture 5 Securing Web Applications: Stateful vs. Stateless Systems, Authentication, and Authorization in Node.js 6 Mastering Web Development: Cookies, Authorization, Authentication, and File Uploads in Node.js 7 Deploying and Scaling NodeJS * 8 Profiling and Benchmarking Node.js Applications 9 Advanced * in Node.js 10 Mastering Event-Driven Programming with the EventEmitter in Node.js 11 Understanding Streams in Node.js — Efficient Data Handling 12 S* and Best Practices 13 NGINX for Node.js Applications: What, Why, and How to Use It 14 Scaling *, Techniques, and Tools 15 Understanding * 16 Scaling Nod* 17 * 18 * Node.js 19 * 20 * 21 * 22 * 23 * Node.js 24 * 25 * 26 * 27 * 28 S* 29 * 30 * 31 Performance Optimization Techniques for Node.js Applications 32 * 33 * 34 * 35 * 36 * Effective logging and monitoring are essential for maintaining application health, quickly identifying issues, and improving performance. In this article, we’ll dive into logging and monitoring for Node.js applications, covering key topics like choosing logging levels, setting up structured logs, integrating with monitoring tools, and best practices for using Winston and Elasticsearch. Introduction to Logging and Monitoring Logging helps capture real-time events, errors, and other important information from the application, while monitoring involves tracking application performance metrics over time. Together, they provide critical insights into application health, enabling proactive issue resolution. Setting Up Basic Logging in Node.js The built-in console object provides simple logging functions, but a dedicated logging library is more robust for production applications. Basic Console Logging console.log(\"Server started on port 3000\"); console.warn(\"This is a warning\"); console.error(\"Error occurred while processing request\"); However, console logging has limitations in complex applications, such as lack of log level control and no log persistence. Introducing Winston Winston is a popular logging library for Node.js that offers multiple log levels, transports (log destinations), and structured logging. Install Winston: npm install winston Setting Up Winston const winston = require(\"winston\"); // Configure logger const logger = winston.createLogger({ level: \"info\", format: winston.format.combine( winston.format.timestamp(), winston.format.json() ), transports: [ new winston.transports.Console(), new winston.transports.File({ filename: \"app.log\" }) ] }); // Logging examples logger.info(\"Server started on port 3000\"); logger.error(\"Database connection failed\"); Choosing Appropriate Log Levels Log levels categorize log messages based on their importance. Common log levels are: Error: Critical issues that require immediate attention, such as database or server failures. Warn: Non-critical issues, such as deprecated APIs. Info: General application information, like server startup or shutdown. Debug: Detailed information useful during development, such as variable values. Configuring Log Levels in Winston logger.level = \"debug\"; // Sets the minimum log level to debug, capturing all messages. In production, it’s best to keep log levels at info or warn to avoid unnecessary log data. Structured Logging for Consistency Structured logging makes it easier to filter and analyze logs by maintaining a consistent format. Adding Metadata to Logs Metadata such as user_id or request_id can help track specific actions within logs: logger.info(\"User login successful\", { user_id: \"12345\" }); logger.error(\"Failed to fetch user data\", { user_id: \"12345\", error: \"Database unavailable\" }); Integrating with Elasticsearch for Centralized Logging Elasticsearch is widely used for centralized log management and search capabilities. Install Elasticsearch and Elasticsearch Transport npm install @elastic/elasticsearch winston-elasticsearch Configure Elasticsearch Transport const { ElasticsearchTransport } = require(\"winston-elasticsearch\"); const esTransport = new ElasticsearchTransport({ clientOpts: { node: \"http://localhost:9200\" } }); logger.add(esTransport); This setup will send logs to Elasticsearch, allowing you to use Kibana for real-time log search and analysis. Monitoring Application Metrics with Prometheus and Grafana Monitoring tracks application performance metrics like CPU usage, memory, and response times, helping to ensure a stable application. Setting Up Prometheus with Node.js Install Prometheus Client Library npm install prom-client Create and Export Metrics const client = require(\"prom-client\"); const httpRequestDuration = new client.Histogram({ name: \"http_request_duration_seconds\", help: \"Duration of HTTP requests in seconds\", labelNames: [\"method\", \"route\"] }); function startMonitoring(req, res, next) { const end = httpRequestDuration.startTimer(); res.on(\"finish\", () => end({ method: req.method, route: req.path })); next(); } app.use(startMonitoring); Expose Metrics Endpoint app.get(\"/metrics\", async (req, res) => { res.set(\"Content-Type\", client.register.contentType); res.end(await client.register.metrics()); }); Visualizing with Grafana Grafana is a powerful tool for creating dashboards from Prometheus metrics. Integrate Prometheus as a data source in Grafana, then visualize metrics such as response times and error rates. Real-World Use Case: Logging and Monitoring in E-commerce Consider an e-commerce platform where logging and monitoring are critical for maintaining high performance and reliability. Log All Transactions: Capture order and payment events with structured logs, including metadata like order_id and user_id. Error Tracking: Use Winston to log errors such as payment failures, along with stack traces and metadata for faster debugging. Monitor Server Health: Set up Prometheus to monitor response times and request counts, visualized in Grafana for real-time insights. Set Alerts: Configure alerts based on metrics. For instance, if the request duration exceeds a threshold, send an alert to the admin. This setup provides a comprehensive view of the application’s health, allowing proactive issue detection and resolution. Conclusion Implementing robust logging and monitoring in Node.js is essential for maintaining reliability and ensuring quick troubleshooting. Using tools like Winston, Elasticsearch, Prometheus, and Grafana, you can capture structured logs, centralize them, and monitor critical performance metrics effectively. Backend with NodeJS (36 Part Series) 1 Getting Started with NodeJS 2 Deepening NodeJS Knowledge: URLs, HTTP Methods, Express Framework, and Versioning ... 32 more parts... 3 Mastering NodeJS: REST APIs, Middleware, and HTTP Headers 4 Mastering Backend Development with NodeJS: MongoDB Integration, Mongoose, CRUD Operations, and MVC Architecture 5 Securing Web Applications: Stateful vs. Stateless Systems, Authentication, and Authorization in Node.js 6 Mastering Web Development: Cookies, Authorization, Authentication, and File Uploads in Node.js 7 Deploying and Scaling NodeJS * 8 Profiling and Benchmarking Node.js Applications 9 Advanced * in Node.js 10 Mastering Event-Driven Programming with the EventEmitter in Node.js 11 Understanding Streams in Node.js — Efficient Data Handling 12 S* and Best Practices 13 NGINX for Node.js Applications: What, Why, and How to Use It 14 Scaling *, Techniques, and Tools 15 Understanding * 16 Scaling Nod* 17 * 18 * Node.js 19 * 20 * 21 * 22 * 23 * Node.js 24 * 25 * 26 * 27 * 28 S* 29 * 30 * 31 Performance Optimization Techniques for Node.js Applications 32 * 33 * 34 * 35 * 36 * Red Hat Developer Promoted * Access the Developer Sandbox Move your legacy Java application into a container and deploy it to Kubernetes on the Developer Sandbox. Get started Top comments (0) * * _SurveyJS Promoted * Simplify data collection in your JS app with a fully integrated form management platform. * ty*me analytics & more. Integrates with any backend system, giving you *. Learn more Read next Creating blurred or virtual backgrounds in real-time video in React apps T Sudhish Nair - Nov 5 Spinners in iOS 18 - #30DaysOfSwift Vaibhav Dwivedi - Nov 5 Embed JS Widgets with Rails: A Step-by-Step Guide David Paluy - Nov 5 You Should Be Shipping a Manifest with Your Web Components Burton Smith - Nov 7 Sushant Gaurav Follow Associate Engineer-PwC || Technical Content Writer Location Kolkata, India Education LNCT, Bhopal Pronouns He/Him Work PwC, India Joined Oct 18, 2021 More from Sushant Gaurav Deployment of * * #we* * #we* Heroku *references R* 👋 *** * ",
    "url": "https://dev.to/imsushant12/logging-and-monitoring-in-nodejs-best-practices-2j1k"
  },
  {
    "body": "* Follow Report Abuse IshmamR A web developer who loves to code in JavaScript. Dhaka, Bangladesh Joined on Dec 26, 2020 ishmam785@gmail.com https://ishmamz.herokuapp.com Education Computer Science and Engineering Work Software developer at Headless Technologies ltd. More info about @ishmam Badges * Three * t* it One * one year. Got it GitHub Repositories Promethewz-recorder A screen and camera recorder with Electron.js JavaScript • 5 stars searchia A search engine clone JavaScript Skills/Languages MERN Currently learning Anything that interests me Currently hacking on some side projects Available for Freelance works, team projects, new ideas. 1 post published 4 comments written 12 tags followed A simple component comparison between 3 popular #JavaScript frameworks IshmamR IshmamR IshmamR Follow Dec 26 '20 A simple component comparison between 3 popular #JavaScript frameworks #javascript #react #vue #angular 17 reactions Add C*ith IshmamR? * IshmamR. * * * ",
    "url": "https://dev.to/ishmam"
  },
  {
    "body": "* 105 Add reaction 83 Like 22 *s 0 Fire 14 Jump to Comments 132 * Itachi Uchiha Posted on Nov 3, 2019 83 22 Express Typescript Developing an Express Application Using TypeScript #typescript #node #express #javascript This post was first published on my blog. Recently, I was working on TypeScript. I asked a question about TypeScript. Dev users helped me. In this post, I'll show you how to create an express application using TypeScript. Before you start, I'm so sorry for my grammar mistakes. Express Framework As you know, Express is a NodeJS web framework that works on the server. Installation of Dependencies npm i express pug ts-node typescript @types/express @types/node These are dependencies. Edit package.json and tsconfig.json files The scripts section in the package.json will be like that; \"scripts\": { \"dev\": \"ts-node src/server.ts\", \"start\": \"ts-node dist/server.js\", \"build\": \"tsc -p .\" } I'll be able to run the dev version of this application using the npm run dev command. My tsconfig.json file will be like that; { \"compilerOptions\": { \"sourceMap\": true, \"target\": \"es6\", \"module\": \"commonjs\", \"outDir\": \"./dist\", \"baseUrl\": \"./src\" }, \"include\": [ \"src/**/*.ts\" ], \"exclude\": [ \"node_modules\" ] } Project Structure This is our project structure; - dist - node_modules - public - src - views package.json tsconfig.json By the way, public and views folders are not necessary if you don’t need UI in your project. (For example API backend). The project will develop under the src folder. - controllers - interfaces - middleware app.ts server.ts The controllers folder will have route controllers and their interface files. The interfaces folder will have interface files. The middleware folder will have our middlewares. Let's look at the app.ts and server.ts files Application File src/(app.ts) My application file is like that; import * as express from 'express' import { Application } from 'express' class App { public app: Application public port: number constructor(appInit: { port: number; middleWares: any; controllers: any; }) { this.app = express() this.port = appInit.port this.middlewares(appInit.middleWares) this.routes(appInit.controllers) this.assets() this.template() } private middlewares(middleWares: { forEach: (arg0: (middleWare: any) => void) => void; }) { middleWares.forEach(middleWare => { this.app.use(middleWare) }) } private routes(controllers: { forEach: (arg0: (controller: any) => void) => void; }) { controllers.forEach(controller => { this.app.use('/', controller.router) }) } private assets() { this.app.use(express.static('public')) this.app.use(express.static('views')) } private template() { this.app.set('view engine', 'pug') } public listen() { this.app.listen(this.port, () => { console.log(`App listening on the http://localhost:${this.port}`) }) } } export default App As you can see, the constructor expects three parameters. In this logic, port and controller parameters should be required but I wasn't sure about it. I've also init the assets and templates in case you use the UI in your project. Server File src/(server.ts) My server file is like that; import App from './app' import * as bodyParser from 'body-parser' import loggerMiddleware from './middleware/logger' import PostsController from './controllers/posts/posts.controller' import HomeController from './controllers/home/home.controller' const app = new App({ port: 5000, controllers: [ new HomeController(), new PostsController() ], middleWares: [ bodyParser.json(), bodyParser.urlencoded({ extended: true }), loggerMiddleware ] }) app.listen() In this file, we've imported our App class. We passed three parameters. The first one port number. Our app will run on port 5000. The second one is the controllers parameter. Our controller classes will be here with the new keyword. And the last one middleWares. If you're using bodyParser or similar plugins you can use the middleWares. Our Simple Middleware (middleware/logger.ts) import { Request, Response } from 'express' const loggerMiddleware = (req: Request, resp: Response, next) => { console.log('Request logged:', req.method, req.path) next() } export default loggerMiddleware This is a simple HTTP logger. It shows the HTTP verb and its path. IControlerBase (interfaces/IControllerBase.interface.ts) I thought so that every controller has to implement this interface. interface IControllerBase { initRoutes(): any } export default IControllerBase Our First Controller (controllers/home.controller.ts) HomeController will be like that; import * as express from 'express' import { Request, Response } from 'express' import IControllerBase from 'interfaces/IControllerBase.interface' class HomeController implements IControllerBase { public path = '/' public router = express.Router() constructor() { this.initRoutes() } public initRoutes() { this.router.get('/', this.index) } index = (req: Request, res: Response) => { const users = [ { id: 1, name: 'Ali' }, { id: 2, name: 'Can' }, { id: 3, name: 'Ahmet' } ] res.render('home/index', { users }) } } export default HomeController We've implemented the IControllerBase. So, we must follow its rules. In this example controller file, we're assuming that we have data from the database server. I sent this data to the (home/index.pug) file. This file is located under the views folder. <!DOCTYPE html> html(lang=\"en\") head meta(charset=\"UTF-8\") meta(name=\"viewport\", content=\"width=device-width, initial-scale=1.0\") meta(http-equiv=\"X-UA-Compatible\", content=\"ie=edge\") title Document body each user, index in users h2(onclick=`alert(${index})`)= user.name This is our pug file. We've also implemented the initRoutes method. Because the boss(IControllerBase) wants that. Let's start the app npm run dev With this command, we will be able to run our application. Our application works on http://localhost:5000. You can also check the posts folder. In this project, you can use TypeORM or Sequelize. You can find this project on GitHub: https://github.com/aligoren/express-typescript-test Conclusion I really loved to use TypeScript. Before this work, I never had an idea about how TypeScript works. Thanks for reading. Sentry Promoted * Sentry can’t fix React hydration errors But it can really help you debug them. Read full post → Top comments (14) * Nick Taylor Nick Taylor Nick Taylor Follow I'm a fan of Open Source and have a growing interest in serverless and edge computing. I'm not a big fan of spiders, but they're doing good work eating bugs. I also stream on Twitch. Email nick@nickyt.co Location Montréal, Québec, Canada Education University of New Brunswick *r at OpenSauced Joined Mar 11, 2017 • Nov 3 '19 • Edited on Nov 3 • * One thing you could do is also add nodemon into the mix. remy / nodemon Monitor for any changes in your node.js application and automatically restart the server - perfect for development nodemon nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected. nodemon does not require any additional changes to your code or method of development. nodemon is a replacement wrapper for node. To use nodemon, replace the word node on the command line when executing your script. Installation Either through cloning with git or by using npm (the recommended way): npm install -g nodemon And nodemon will be installed globally to your system path. You can also install nodemon as a development dependency: npm install --save-dev nodemon With a local installation, nodemon will not be available in your system path. Instead, the local installation of nodemon can be run by calling it from within an npm script (such as npm start) or using npx nodemon. Usage nodemon wraps your application, so you… View on GitHub There are VS Code recipes to handle this. VS Code Tips @vscodetips Just a friendly reminder that there are really great resources in the @code recipes repository. Check it out! github.com/microsoft/vsco… #vscode 15:57 PM - 03 Nov 2019 2 2 Specifically this one, github.com/microsoft/vscode-recipe... Even if you don't use VS Code, the tips provided are still helpful (see the npm scripts in the repo). One thing I would recommend is to not use ts-node for production as you currently are for your npm start script. The reason being is it is a debugging/dev tool, much like babel-node. Consider transpiling and running the dist/server.js with good ol' node. Looking forward to your next post! 4 likes Like Reply Itachi Uchiha Itachi Uchiha Itachi Uchiha Follow I'm a front-end developer. I'm living in Turkey. I started my professional career in 2016. I also interest in Backend, SQL technologies. Email goren.ali@yandex.com Location Turkey Education Web Dev Work Jr. Fullstack Developer at FOSS Dev Joined Nov 21, 2017 • Nov 3 '19 Co*s, Nick. I'm usually using the VS Code. I never heard the vscode-recipes before. I'm trying to best :) I don't remember clearly but I may have used nodemon before. It worked so slow on my computer. I know, it depended on my computer. I use a really old laptop. Again I will say, these recipes are really helpful to me. Thanks :) 3 likes Like Reply Heritier Mwalila Heritier Mwalila Heritier Mwalila Follow Joined Apr 21, 2020 • Apr 21 '* Hey Ali, thanks for the post I've learned something as I am new to typescript. I just found that if you want to import express instance you must do it this way import express from 'express' not import * as express from 'express' Typescript detect that as an error. 5 likes Like Reply Edwin Edwin Edwin Follow Joined Jan 13, 2020 • Jan 1*use I have a question, I am just learning typescript, I do not understand this. private middlewares(middleWares: { forEach: (arg0: (middleWare: any) => void) => void; }) what does { forEach: (arg0: (middleWare: any) => void) => void; } this do? why could you not do this? private middlewares(middleWares: any) 1 like Like Reply Heritier Mwalila Heritier Mwalila Heritier Mwalila Follow Joined Apr 21, 2020 • Apr 22 '* @edwin , this is very easy to understand if you already understand type of interface in typescript You can write the same thing like this interface arg{ (ar)=>void } interface middlewareInter{ forEach:(argument:arg)=>void // look at forEach function in js how it written } private middlewares(middlew:middlewareInter){ } it return void because don't wanna handle the result there. void is a type in typescript which just tell that the function does not return anything 1 like Like Reply Sufian Babri Sufian Babri Sufian Babri Follow Joined Apr 21, 2018 • Apr 17 '20 * article. I've got a question and a suggestion. :) The question: your \"start\" script is using ts-node, shouldn't it use node because it'd be an overkill otherwise? Maybe some performance issue? The suggestion: in the following line, instead of not declaring the type of the parameter \"next\" which defaults to any, you can declare it of type NextFunction: const loggerMiddleware = (req: Request, resp: Response, next) => { So, to import NextFunction, you can replace import { Request, Response } from 'express' with: import { Request, Response, NextFunction } from 'express' 1 like Like Reply jappyjan jappyjan jappyjan Follow Self taught software engineer Location Bremen, Germany Education Ausbildung zum Fachinformatiker für Anwendungsentwicklung Work CTO at Unitect Joined Jun 15, 2019 • Nov 4 '* When using express with typescript, the best u can do is to take a look into TS.ed. For me, this is the absolute best solution, with decorators and a fairly great architecture. 2 likes Like Reply Itachi Uchiha Itachi Uchiha Itachi Uchiha Follow I'm a front-end developer. I'm living in Turkey. I started my professional career in 2016. I also interest in Backend, SQL technologies. Email goren.ali@yandex.com Location Turkey Education Web Dev Work Jr. Fullstack Developer at FOSS Dev Joined Nov 21, 2017 • Nov 4 '* I didn't know Ts.ED. It's amazing. ❤ 1 like Like Reply jmicaela jmicaela jmicaela Follow Joined Dec 15, 2020 • Dec 15 '* Hey this is amazing starter code 2 likes Like Reply Alex van der Valk Alex van der Valk Alex van der Valk Follow Joined Dec 28, 2019 • Dec 28 '19 Copy l* this tutorial. I managed to implement this with handlebars instead. 1 like Like Reply wh1337 wh1337 wh1337 Follow Location USA Pronouns he/him Work Full Stack Developer for HIT. Joined Feb 16, 2020 • Feb 17 '20 Copy * for the tutorial. Saved me hours of rummaging around google searches! 1 like Like Reply Josias Aurel Josias Aurel Josias Aurel Follow Developer. JavaScript, Pythonista. Machine Learning enthusiast Email ndjosiasaurel@gmail.com Location Cameroon Work Software development Joined Dec 28, 2019 • Nov 22 '20 Copy l* this informative post :thumbUp: 1 like Like Reply Andongwisye Mwamengo Andongwisye Mwamengo Andongwisye Mwamengo Follow I'm a Software Developer currently working with Social Platforms, Health Systems and Financial Systems. Location Dar es Salaam Tanzania Education University of Dar es Salaam (Bachelor of Science in Computer Science) Work Software Developer Joined Jan 28, 2022 • Sep 19 '* I had some issue with the setup of the express typescript project, But this is an enterprise level setup of the project. Thank you keep writing good stuffs like this *ion (14 comments) * * NextJS makes yo* Evaluating Medical Retrieval-Augmented Generation (RAG) with NVIDIA AI Endpoints and Ragas KAMAL KISHOR - Nov 7 Best Version Control Practices Every React Development Team Needs To Know Joseph Abraham - Nov 7 Mastering JavaScript Memory Management: Essential Guide to Garbage Collection & Memory Leaks Okoye Ndidiamaka - Nov 7 How to Include JavaScript in Laravel 11: A Step-by-Step Guide for All Scenarios websilvercraft - Nov 7 Itachi Uchiha Follow I'm a front-end developer. I'm living in Turkey. I started my professional career in 2016. I also interest in Backend, SQL technologies. Location Turkey Education Web Dev Work Jr. Fullstack Developer at FOSS Dev Joined Nov 21, 2017 More from Itachi Uchiha I Published Gistagram #sideprojects #github #githunt #javascript RethinkDB: Open Source Real-Time Database #node #realtime #javascript #database I published Reddit Media Downloader on GitHub #sideprojects #javascript #programming #github _Su* for Dynamic Surveys and Forms * get full control *ion limits. * * * * ",
    "url": "https://dev.to/itachiuchiha/developing-an-express-application-using-typescript-3b1"
  },
  {
    "body": "* Follow Report Abuse sahil 404 bio not found Joined on Jan 27, 2024 More info about @itxsahil Badges * 1 post *owe*ction Add Comment 6 *onsor Neon * ",
    "url": "https://dev.to/itxsahil"
  },
  {
    "body": "* 1 A*ead 0 * 0 * sahil Posted on Nov 6 1 *ic * Guide: Building an Express web a* In this tutorial, we will show you how to build a server with Express.js that handles file uploads and performs dynamic image processing like resizing, format conversion, and quality adjustments using Sharp. Prerequisites Before we begin, ensure that you have Node.js and npm installed. We will use the following libraries in this tutorial: Express.js - for setting up the server. Multer - for handling file uploads. Sharp - for image processing. CORS - to allow cross-origin requests. Step 1: Setting Up the Project Start by creating a new directory for your project: mkdir image-upload-server cd image-upload-server npm init -y This will create a new project folder and initialize a package.json file. You can install all dependencies by running: npm install express multer sharp cors Create the necessary directories We will need two directories: original-image to store the original uploaded images. transform-image to store the processed images. Create these directories by running: mkdir original-image transform-image Step 2: Set Up the Express Server Now, let's set up the basic server using Express.js. Create a file called index.js in the root of your project and add the following code to set up the server: * cors = require('cors'); const multer = require('multer'); const path = require('path'); const sharp = require('sharp'); const fs = require('fs'); const app = express(); // Middleware for CORS and JSON parsing app.use(cors()); app.use(express.json()); app.use(express.urlencoded({ extended: true })); This basic setup includes: CORS to allow cross-origin requests. express.json() and express.urlencoded() to parse incoming request data. Step 3: Configure Multer for File Uploads We will use Multer to handle file uploads. Multer allows us to store uploaded files in a specified directory. Add the following code to configure Multer: // Configure multer for file storage const storage = multer.diskStorage({ destination: function (req, file, cb) { cb(null, 'original-image'); // Ensure the 'original-image' directory exists }, filename: function (req, file, cb) { const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9); cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname)); } }); const upload = multer({ storage: storage }); This setup ensures that: The uploaded files are stored in the original-image folder. Each file gets a unique name based on the current timestamp and a random number. Step 4: Create the File Upload Endpoint Next, create a POST endpoint for file uploads. The user will send a file to the server, and the server will store the file in the original-image directory. Add the following code to handle the file upload: // File upload endpoint app.post('/upload', upload.single('file'), (req, res) => { const file = req.file; if (!file) { return res.status(400).send({ message: 'Please select a file.' }); } const url = `http://localhost:3000/${file.filename}`; // Store file path with original filename as the key db.set(file.filename, file.path); res.json({ message: 'File uploaded successfully.', url: url }); }); This endpoint does the following: Receives a single file upload (with the field name file). Returns the URL of the uploaded file. Step 5: Serve the Uploaded Files Now, let's create a GET endpoint to serve the uploaded files. If any query parameters are provided (for example, resizing, format conversion), the server will process the image accordingly. Add the following code to serve the uploaded files: // In-memory storage for file paths const db = new Map(); const processed = new Map(); // Ensure the transform-image directory exists const transformedDir = path.join(__dirname, 'transform-image'); if (!fs.existsSync(transformedDir)) { fs.mkdirSync(transformedDir); } app.get('/:filename', async (req, res) => { const filename = req.params.filename; const { h, w, f, q } = req.query; const filePath = db.get(filename); if (!filePath) { return res.status(404).send({ message: 'File not found.' }); } // Generate a unique key for the processed image based on the parameters const formateUrl = `http://localhost:3000/${filename}?h=${h}&w=${w}&f=${f}&q=${q}`; let editPath = processed.get(formateUrl); if (editPath) { // Serve cached processed image if it exists return res.sendFile(path.resolve(editPath)); } else if (h || w || f || q) { // Process image if resizing or format/quality adjustments are specified editPath = await processImage(filePath, h, w, f, q); if (editPath) { processed.set(formateUrl, editPath); return res.sendFile(path.resolve(editPath)); } } // Serve the original file if no processing is required res.sendFile(path.resolve(filePath)); }); This endpoint: Retrieves the file from the db map based on the filename. Processes the image if resizing, format conversion, or quality adjustments are specified. Caches the processed images to improve performance. Step 6: Process Images with Sharp The Sharp library will allow us to perform various transformations on the images, such as resizing, format conversion, and quality adjustments. Add the processImage function that handles these transformations: async function processImage(filePath, h, w, f, q) { try { const transformer = sharp(filePath); // Apply resizing only if `h` or `w` is provided const resizeOptions = {}; if (h) resizeOptions.height = parseInt(h); if (w) resizeOptions.width = parseInt(w); if (Object.keys(resizeOptions).length > 0) { transformer.resize(resizeOptions); } // Apply format conversion if `f` is provided and supported if (f) { switch (f.toLowerCase()) { case 'jpeg': case 'jpg': transformer.jpeg({ quality: q ? parseInt(q) : 80 }); break; case 'png': transformer.png({ quality: q ? parseInt(q) : 80 }); break; case 'webp': transformer.webp({ quality: q ? parseInt(q) : 80 }); break; case 'gif': transformer.gif(); // GIF format doesn’t support quality adjustment break; case 'tiff': transformer.tiff({ quality: q ? parseInt(q) : 80 }); break; case 'avif': transformer.avif({ quality: q ? parseInt(q) : 80 }); break; default: throw new Error('Unsupported format'); } } // Save processed file to the `transform-image` directory const extension = f ? `.${f}` : path.extname(filePath); const processedFilePath = path.join( transformedDir, `processed-${Date.now()}${extension}` ); await transformer.toFile(processedFilePath); return processedFilePath; } ca*or processing image:', error); return null; } } This function: Resizes the image based on the h (height) and w (width) parameters. Converts the image format based on the f parameter (JPEG, PNG, WebP, etc.). Adjusts the image quality based on the q parameter (optional). Saves the processed image in the transform-image folder. Step 7: Start the Server Finally, start the server by adding the following code: app.listen(3000, () => { console.log('Server is running on port 3000'); }); This will start the server on port 3000. Step 8: Testing the Server 1. Testing File Upload with Postman To test the file upload functionality using Postman, follow these steps: 1.1 Open Postman Launch Postman on your computer. If you don't have Postman installed, you can download it here. 1.2 Create a POST Request Set the request type to POST. In the URL field, enter: http://localhost:3000/upload. 1.3 Add the File in the Body Select the Body tab. Choose the form-data option. In the form, set the key to file (this must match the field name in your multer configuration). Click the Choose Files button and select an image file from your computer. 1.4 Send the Request Click Send. If the upload is successful, you should receive a response with the URL of the uploaded image. Example Response: { \"message\": \"File uploaded successfully.\", \"url\": \"http://localhost:3000/somefile-123456789.jpg\" } 2. Testing Image Retrieval and Processing via Browser Now, let's test retrieving the image with transformations using the Browser. 2.1 Get the Uploaded Image To retrieve the image, simply open your browser and navigate to the URL you received after uploading the file. For example, if the response URL was: \"http://localhost:3000/somefile-123456789.jpg\" Just type this URL in your browser's address bar and hit Enter. You should see the original image displayed. 3. Testing Image Transformations with Query Parameters Now, let's test dynamic image transformations by appending query parameters for resizing, format conversion, and quality adjustment. 3.1 Add Query Parameters for Transformation In your browser, append query parameters to the image URL to test transformations. Here are some examples: Resize the image to width 200px and height 300px: http://localhost:3000/somefile-123456789.jpg?h=300&w=200 Convert the image to PNG format: http://localhost:3000/somefile-123456789.jpg?f=png Convert the image to WebP format with 90% quality: http://localhost:3000/somefile-123456789.jpg?f=webp&q=90 Resize the image to width 400px, height 500px, and convert to JPEG with 80% quality: http://localhost:3000/somefile-123456789.jpg?h=500&w=400&f=jpeg&q=80 3.2 Expected Behavior When you access any of the URLs with the query parameters, the server will process the image accordingly. If the image has been processed before with the same parameters, it will serve the cached version. If it hasn’t been processed yet, it will process the image (resize, convert format, adjust quality) and save it in the transform-image folder for future requests. The browser will display the processed image, and you can confirm if the transformation has been applied correctly. Example Workflow Upload an image via Postman. Retrieve the uploaded image in the browser using the URL provided by Postman. Modify the URL in the browser by adding query parameters like ?h=300&w=200 to see resizing in action or ?f=webp&q=90 for format conversion. Conclusion This image upload and processing server provides a robust solution for handling image uploads, transformations, and retrievals. Using Multer for file handling and Sharp for image processing, it supports resizing, format conversion, and quality adjustments through query parameters. The system efficiently caches processed images to optimize performance, ensuring fast and responsive image delivery. This approach simplifies image management for applications requiring dynamic image transformations, making it a versatile tool for developers. Sentry Promoted * Hydration errors suck But Sentry can help you debug them. Read full post → Top comments (0) * * Sentry Promoted * The best way to debug slow web pages Tools like Page Speed Insights and Google Lighthouse are great for providing advice for front end performance issues. But what these tools can’t do, is evaluate performance across your entire stack of distributed services and applications. Watch video Read next Mongoose Interview Questions Nozibul Islam - Nov 8 What Makes a Great Hacker? Aravind Roy - Nov 6 Building a Modern React Library Star*rup Pal - Nov 9 React + AWS Cognito: Email Authentication Setup Guide (First Part) Jaime - Nov 5 sahil Follow Joined Jan 27, * Resilience: Overcoming Setbacks #web*rial Hiring in the Open - How Companies Can Discover Top Talent via Opire #opensource #* Open-Source will make you richhhh! 🤑💸 #opensource #* Neon Promoted * Top 3 Features in Postgres 17 Learn about the top 3 features in the latest version of Postgres. See Article 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/itxsahil/building-an-express-web-app-for-file-uploads-and-dynamic-image-processing-on-the-fly-1k0l"
  },
  {
    "body": "* 238 Add reaction 224 Like 3 Unicorn 2 Exploding Head 3 Raised Hands 6 Fire 21 Jump to Comments 363 * Jakub Andrzejewski Posted on Oct 7 • Updated on Oct 14 224 3 2 3 6 * #node #* Software Architecture (9 Part Series) 1 Component Libraries - Should you use them? 2 What is Multitenancy? ... 5 more parts... 3 What are Microfrontends? 4 Is this a performant website? 5 Type sharing in OpenAPI Fullstack projects 6 Using Firebase Remote Config for Feature Flags 7 Security in modern Web Applications -> Owasp to the rescue! 8 Why Content matters for Ecommerce? 9 * Hey there! I recently went through multiple knowledge resources to learn more about popular design and architectural patterns in Node.js. My aim was mainly at the server (backend) side but as I was going through them, I was seeing a lot of similarities to the browser (frontend) frameworks. Some of them are even directly used in the frameworks for which I am even more happy because I was using them already without knowing it 😉 There are many (really many) design patterns that you could use, so in this article, I decided to choose 5 of them and explain them in more detail. Enjoy! 🟢 What is a Design Pattern? Design patterns are proven and battle-tested solutions to solve problems that we as developers encounter every day. These patterns help promote best practices and implement a structured approach to solving everyday issues while designing and developing software architecture. Software engineers can develop maintainable, secure, and stable systems by using these patterns. Node.js due to its flexibility does not force you to stick to certain patterns but instead gives you the freedom of choosing just the ones needed for your task. That is why in my opinion it is so widely used today (and by the way thanks to JavaScript :D). ✅ Five Popular Design Patterns in Node.js Below, you will see a list of 5 selected design patterns that I like. Singleton This pattern is all about classes that can have only one instance and provide global access to it. Modules can be cached and shared across the application in Node.js which will help improve the efficiency of resources. A common example of such a singleton pattern is a module for connecting with certain third-party services like databases, cache services, email providers, etc that is used extensively in the Nest.js framework. Let's take a look at the following example: class Redis { constructor() { this.connection = null; } static getInstance() { if (!Redis.instance) { Redis.instance = new Redis(options); } return Redis.instance; } connect() { this.connection = 'Redis connected' } } And then we can use it like the following: const redisOne = Redis.getInstance(); const redisTwo = Redis.getInstance(); console.log(redisOne === redisTwo); // it will result to `true` redisOne.connect(); console.log(redisOne.connection) // 'Redis connected' console.log(redisTwo.connection) // 'Redis connected' This approach ensures that there is only one connection to Redis and prevents duplicating connections. Factory With this pattern, you can create new objects without specifying the class of object that will be created. Thanks to it we are abstracting object creation which can help improve code readability and reusability: class Character { constructor(type, health) { this.type = type; this.health = health; } } class CharacterFactory { createCharacter(name) { switch(name) { case 'mage': return new Character('Powerful Mage', 8); case 'warrior': return new Character('Courageous Warrior', 10); case 'rogue': return new Character('Sneaky Rogue', 9) default: return new Error('Unknown character'); } } } And then we can use it like the following: const characterFactory = new CharacterFactory(); const mage = characterFactory.createCharacter('mage'); const warrior = characterFactory.createCharacter('warrior'); console.log(mage.type) // Powerful Mage console.log(warrior.type) // Courageous Warrior This approach allows consumers of this factory to use the factory code instead of using the Character class constructor directly. Observer This pattern works in a way that you will have an entity that manages the list of depending elements called observers and notifies them if the state changes. This pattern is used widely in the Vue.js framework and be implemented like this: class Topic { constructor() { this.observers = []; } subscribe(observer) { this.observers.push(observer); } unsubscribe(observer) { this.observers = this.observers.filter(o => o !== observer); } notify(data) { this.observers.forEach(o => o.update(data)); } } class Observer { constructor(name) { this.name = name; } update(data) { console.log(`${this.name} received ${data}`); } } And you can use it like the following: const topic = new Topic(); const observer1 = new Observer('Observer 1'); const observer2 = new Observer('Observer 2'); topic.subscribe(observer1); topic.subscribe(observer2); topic.notify('Hello World'); // Observer 1 received Hello World // Observer 2 received Hello World topic.unsubscribe(observer2); topic.notify('Hello Again'); // Observer 1 received Hello Again It is a really useful pattern for event handling and asynchronous workflows that allows to update of multiple objects without coupling the publisher to the subscribers. Decorator This pattern is quite useful for extending the existing functionality with a new one without affecting the initial/original instances. It is used widely in the Nest.js framework thanks to the full support of TypeScript but in regular Node.js it can be used in following: class Character { constructor() { this.endurance = 10; } getEndurance() { return this.endurance; } } class CharacterActions { constructor(character) { this.character = character; } attack() { this.character.endurance -= 2; } rest() { this.character.endurance += 1; } } And then it can be used like the following: const character = new Character(); console.log(character.getEndurance()); // 10 const characterWithActions = new CharacterActions(character); characterWithActions.attack(); // - 2 characterWithActions.rest(); // + 1 console.log(characterWithActions.character.getEndurance()); // 9 By using this pattern we can easily extend already existing classes without affecting their core functionality. Dependency Injection In this pattern, classes or modules receive dependencies from external sources rather than registering them internally. This approach allows extracting certain reusable elements from your system for easier testing and maintenance. It is used quite extensively in the Nest.js framework. It can be implemented like following: class UserService { constructor(databaseService, loggerService) { this.db = databaseService; this.logger = loggerService; } async getUser(userId) { const user = await this.db.findUserById(userId); this.logger.log(`Fetched user ${user.name}`); return user; } } And then, you can use it like following: const databaseService = new Database(); const loggerService = new Logger(); const userService = new UserService(databaseService, loggerService); userService.getUser(1); This approach allows you to extract elements of your system into intependent entities that can be injected when needed. 📖 Learn more If you would like to learn more about Vue, Nuxt, JavaScript or other useful technologies, check VueSchool by clicking this link or by clicking the image below: It covers the most important concepts while building modern Vue or Nuxt applications that can help you in your daily work or side projects 😉 ✅ Summary Well done! You have just learned how certain design patterns work in Node.js and how to implement them. Take care and see you next time! And happy coding as always 🖥️ Software Architecture (9 Part Series) 1 Component Libraries - Should you use them? 2 What is Multitenancy? ... 5 more parts... 3 What are Microfrontends? 4 Is this a performant website? 5 Type sharing in OpenAPI Fullstack projects 6 Using Firebase Remote Config for Feature Flags 7 Security in modern Web Applications -> Owasp to the rescue! 8 Why Content matters for Ecommerce? 9 * Heroku *referenc* Top comments (21) * Doron Guttman Doron Guttman Doron Guttman Follow Location Atlanta Joined Oct 18, 2020 • *e Trying to be positive here, but these examples leave a lot of room for improvement. I.e. Singleton: when using modules (which you should), there is no need to use a getInstance static method, when you can just export the instance by itself. E.g. export const redis = new Redis(...); export default redis; Factory: instead of using a switch, you should be using a factory map. Much more extensible and (although micro) optimized. E.g. const factory = FACTORIES[name]; if (!factory) { throw... } return factory(); Observer: use a Set instead of an array. And wrap notifications in try-catch so a single error won't impact following observers. E.g. // Subscribe this.observers.set(observer); // Unsubscribe this.observers.delete(observer); // Notify for (const observer of this.observers) { try { observer.update(...) } catch (e) { // Log } } Decorator: use getters and private fields instead of java-style get methods. E.g. get endurance() { return this.#endurance; } Dependency injection: tip - use an IoC library 21 likes Like Reply * * • *e Hey there. Thanks for these additional examples! I do agree that my examples are not perfect. I have selected them for simplicity while trying to explain the subject. For anyone who will be reading it and looking for something more optimized and advanced will see your comment and will be able to use it :) 4 likes Like Reply Arnór Sigurðsson Arnór Sigurðsson Arnór Sigurðsson Follow Joined Sep 30, 2024 • *se I agree on most points. The factory one is more like a preference thing - I usually use the object map approach you suggested, rather than a switch statement, but I'd still consider that a preference. Re: observer.. sure.. but since the article's title is like it's aimed at node.js, it's insane to not talk about EventEmitter - it's the de-facto pub-sub thing to use in node.js and it is used so much in almost every single project - most people won't implement their own observer thing - they'll just use EventEmitter - so that is the most valualble feedback to give on that front. And regarding decorators.. dude, the state of decorators is in shambles.. I would strongly discourage people from using decorators as much as possible until they become part of standard ecmascript -- they're at stage 3 right now, and with all the differing interfacing between typescript and node.js transpilation etc.. it's a mess better left out if possible. I do realize a lot of frameworks use them by using the legacy decorator transpilation stuff, but to me that is just an ugly mess, and I'd rather just write plain code until they are fully standardized. 3 likes Like Reply * * • *se Hey there, Thanks for this comment and additional details! Viewers can now see it and get more examples and start using it in their projects :) 2 likes Like Reply adiozdaniel adiozdaniel adiozdaniel Follow Joined Feb 2, 2022 • *e I've learned a lot 2 likes Like Reply Long.H Long.H Long.H Follow Joined Sep 8, 2023 • Oct 10 • Edited on Oct 17 • * export const redis = new Redis(...); export default redis; With this, I think we need to fix the constructor to make sure new Instance are not created? constructor() { if (Redis.instance) { return Redis.instance; } Redis.instance = this; } 1 like Like Reply Doron Guttman Doron Guttman Doron Guttman Follow Location Atlanta Joined Oct 18, 2020 • Oct 19 * don't, as you are not exporting the classz just the instance, which is the whole point. 0 Like Reply WORMSS WORMSS WORMSS Follow Joined Mar 4, 2018 • *e You may want to test some of your examples. You have an error in the first one with capitalising Return this will cause an error. Also, you have a space between Redis. and instance which is not actually an error, just reads weirdly. For the Factory pattern, you re-used the variable name for both type of character to create and the name of the created character. This will obviously work, but just muddies the water for any new developer, and there is not a single advantage to doing so. You use both direct variable access, character.endurance and getter method action.character.getEndurance() but with no explanation of why one and not the other in either scenario. It leaves getEndurance() as completely unnecessary and muddies the water for no advantage. 2 likes Like Reply * * • *e Hey, thank you so much for pointing that out. I fixed first two issues but not sure about the third one. Could you please elaborate which part does not make sense to you? I am not sure what to rewrite :( 1 like Like Reply Marcus S. Abildskov Marcus S. Abildskov Marcus S. Abildskov Follow Location Copenhagen, Denmark Work Software Engineer Joined Aug 9, 2018 • Oct 8 • Edited on Oct 8 • * What has this got to do with Node or JavaScript? Those are common patterns in any language capable of OOP. Also the decorator pattern can be very confusing when decorators are typical known for something else in JavaScript... 4 likes Like Reply * * • *e In the article, I mentioned few times that some of these patterns could be observed in frameworks such as Nest.js - I am using this framework on the daily basis and while it is built using TypeScript it is technically Node.js application with Express framework. I wanted to share some of these patterns that could be used for regular Node.js as well. You can also build Node.js applications with TypeScript -> nodejs.org/en/learn/typescript/int... I do agree that the decorator pattern could be missleading. Would you recommend to adding a note there that it only applies to Node.js apps built with TypeScript? :) 1 like Like Reply Marcus S. Abildskov Marcus S. Abildskov Marcus S. Abildskov Follow Location Copenhagen, Denmark Work Software Engineer Joined Aug 9, 2018 • Oct 28 * should have a look at deepkit.io that utilizes TypeScript to the fullest. 1 like Like Reply Long.H Long.H Long.H Follow Joined Sep 8, 2023 • *se Nest framework built on top of OOP, I believe 2 likes Like Reply David Sabalete David Sabalete David Sabalete Follow Location Ripollet, Spain Joined May 4, 2021 • Oct 12 * description of these common 5 patterns. Thank you! P.S.: In the singleton example, the first \"redis\" instance is declared as const medicine = Redis.getInstance(); I'm sure you mean const redisOne = Redis.getInstance(); don't you? 1 like Like Reply * * • Oct 14 Copy link Hide Report abuse Damn, good catch! Gramarly must have corrected this redisOne into medicine. Thank you for catching that! :) 2 likes Like Reply JoelBonetR 🥇 JoelBonetR 🥇 JoelBonetR 🥇 Follow Tech Lead/Team Lead. Senior WebDev. Intermediate Grade on Computer Systems- High Grade on Web Application Development- MBA (+Marketing+HHRR). Studied a bit of law, economics and design Location Spain Education Higher Level Education Certificate on Web Application Development Work Tech Lead/Lead Dev Joined Apr 19, 2019 • Oct 30 C* post is a cool learning experiment 💪🏼 though I feel like it's necessary to explain that there's no real need for most design patterns mentioned here, specially in JavaScript, a multi-paradigm language. This might help giving context to beginners: Demystifying Design Patterns JoelBonetR 🥇 ・ Oct 30 #* #beginners Cheers! 1 like Like Reply Alois Sečkár Alois Sečkár Alois Sečkár Follow I am from Czechia, born in 1988. Studied computer science at KIT VŠE, Prague. Currently working as senior Java & JS developer for Eviden. Email alois.seckar@gmail.com Location Prague, Czechia Education KIT VŠE, Prague Pronouns He Work Senior application developer @ Eviden Joined Oct 21, 2023 • *e Article has 5 examples, the perex says 10... 🤨 1 like Like Reply * * • Oct 9 * catch! I initially wanted 10 but decided to decrease it to make it shorter. I will fix it right away! :) 2 likes Like Reply Claudio Stella Claudio Stella Claudio Stella Follow Joined Dec 27, 2019 • *e Five design pattern to know in every OOP capable language, should be a less click bait version of the title. 1 like Like Reply * * • *e Correct, but honestly I was not aiming for click baiting. Node.js is my area of expertise and these design patterns I managed to use by building applications with Nest.js and Nuxt (Vue) where TypeScript is use :) 1 like Like Reply Manuel Sanchez Manuel Sanchez Manuel Sanchez Follow Game Dev / a11y / Frontend Web Dev Location Hamburg Joined Jul 28, 2020 • *e Your title is far more click bait than the node one 2 *ion (21 comments) * Sentry Promoted * 📺 Youtube Tutorial Series * Read next Session Management, Tokens & Refresh Tokens Sudhi Ranjan Gupta - Oct 27 Tata AIA Life Insurance Policy Download Angesh Singh - Nov 1 Your Session has Expired !! Shanu - Oct 28 Atomic Design no Frontend (português) Juliana Macêdo - Oct 27 * More from Jakub Andrzejewski Performant Images with Nuxt Image and Cloudinary #vue #nuxt #javascript #performance Building Recursive components in Vue #vue #typescript #javascript #tutorial Checking if a slot is empty in Vue #vue #javascript #beginners #typescript Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/jacobandrewsky/five-design-patterns-to-know-in-nodejs-265h"
  },
  {
    "body": "* Follow Report Abuse Jagroop Singh 👨‍💻 *7k+ Followers | 260k+ Views India Joined on Apr 5, 2022 jagroopofficial29@gmail.com https://www.linkedin.com/in/jagroop-singh-7a59b4327/ * (C*) 8 * Consistency pays off! Be an active part of our community by * 8 straight weeks. Earn the 16 Week Badge next. Got it #Discuss Awarded for sharing the top weekly post under the #discuss tag. Got it Git Awarded to the top git author each week Got it The Pinata Challenge Completion Badge Awarded for completing The Pinata Challenge. Thank you for participating! 💻 Got it Web Game Challenge Completion Badge Awarded for completing at least one prompt in the Web Game Challenge: Alien Edition. Thank you for participating! 💻 Got it React Awarded to the top React author each week Got it Node Awarded to the top Node author each week Got it JavaScript Awarded to the top JavaScript author each week Got it Frontend Challenge Winner Badge Awarded for submitting a winning project to a Frontend Challenge prompt. Congratulations! ✨ Got it Python Awarded to the top Python author each week * * 100 Thumbs Up Milestone Awarded for giving 100 thumbs ups (👍) to a variety of posts across DEV. This is a mod-exclusive badge. Got it One * one year. Got it *. Got it *le week. Got it Hacktoberfest 2022 *22 Hacktoberfest challenge. ** Show all 19 badges More info about @jagroop2001 Skills/Languages React.js ⚛️ | Node.js 🟩 | Express.js 🚀 | MongoDB 🗄️ | Python 🐍 | Django 🌟 | TypeScript 📝 | FastAPI ⚡| Scikit-Learn 📊 |GraphQL 📈 | Docker 🐳 | OpenAI 🤖 | LLM 📚 | 🗃️ | JavaScript 📜 Currently learning 📚🚀🤓 I'm always learning and adapting, diving into JavaScript frameworks for MERN, deepening my Python skills for machine learning, and tracking emerging AI for innovation. Currently hacking on I’m currently focused on various innovative projects in AI 🤖, MERN stack development 💻, open source contribution 🌍, providing mentorship 👩‍🏫, and engaging community initiatives 🤝. Available for I’m open to collaborations ! Feel free to reach out for project assistance, coding challenges, or brainstorming innovative web and AI ideas. Let’s talk tech! 👋🌐🤖 72 posts published 240 comments written 8 tags followed Pinned 20 Git Command-Line * * Oct 18 20 Git Command-Line * #webdev #git #github #learning 410 reactions 65 comments 3 min read * * Sep 29 * #* 163 reactions 19 comments 5 min read *) * Sep 23 *) #react #webdev #node #javascript 238 reactions 41 comments 4 min read Building a Simple Blog App Using FastAPI, HTML, CSS, and JSON * Sep 9 Building a Simple Blog App Using FastAPI, HTML, CSS, and JSON #python #fastapi #webdev #html 163 reactions 28 comments 4 min read Detect, Defend, Prevail: Payments Fraud Detection using ML & Deepchecks * Jan 13 Detect, Defend, Prevail: Payments Fraud Detection using ML & Deepchecks #machinelearning #python #scikitlearn #ai 18 reactions 6 comments 7 min read *”? 🤔 * Nov 10 *”? 🤔 #discuss #* 5 reactions Add C*ith Jagroop Singh? * Jagroop Singh. * * 🚀 * Nov 4 * 🚀 #discus*rs 67 reactions 23 comments 3 min read 20 Essential Reac* * Oct 31 20 Essential Reac* #webdev #javascript #react #reactnative 39 reactions 14 comments 3 min read 2* Must Know 🚀 * Oct 28 2* Must Know 🚀 #discus*rs 464 reactions 68 comments 4 min read 20 TypeScript * 🚀 * Oct 23 20 TypeScript * 🚀 #webdev #typescript #javascript #programming 193 reactions 18 comments 4 min read SQL Cheatsheet: A Handy Reference for SQL Commands with Examples * Oct 16 SQL Cheatsheet: A Handy Reference for SQL Commands with Examples #webdev #database #programming #sql 33 reactions 8 comments 3 min read > Ready,Set,Hack ! with Hacktoberfest 2024 🚀 * Oct 14 > Ready,Set,Hack ! with Hacktoberfest 2024 🚀 #devchallenge #* 22 * Chat with your PDF using Pinata,OpenAI and Streamlit * Oct 10 Chat with your PDF using Pinata,OpenAI and Streamlit #devchallenge #pinatachallenge #webdev #python 123 reactions 58 comments 6 min read Streamlit Tutorial with Machine Learning Project * Oct 7 Streamlit Tutorial with Machine Learning Project #webdev #ai #python #machinelearning 17 reactions 4 comments 4 min read npm Vs npx * Oct 4 npm Vs npx #webdev #node #javascript #tutorial 226 reactions 48 comments 3 min read 👽Lucky Alien Game 🚀 * Sep 28 👽Lucky Alien Game 🚀 #* 7 *d 🌟 You’ve Come a Long Way, Developer! 🚀 * Sep 21 🌟 You’ve Come a Long Way, Developer! 🚀 #discuss #softwaredevelopment #career #productivity 27 * Space Invasion in Purple Planet - II * Sep 21 Space Invasion in Purple Planet - II #* 29 * requestAnimationFrame in JavaScript * Sep 19 requestAnimationFrame in JavaScript #* 15 *d What is WebGL? * Sep 19 What is WebGL? #* 12 *d Cluster Your Node.js Application for Better Performance * Sep 19 Cluster Your Node.js Application for Better Performance #node #express #javascript #webdev 16 *d Reactjs Todo List App (Using Vite & Zustand) * Sep 16 Reactjs Todo List App (Using Vite & Zustand) #react #zustand #javascript #webdev 63 reactions 10 comments 4 min read The Mysterious Voyage to Purple Planet * Sep 7 The Mysterious Voyage to Purple Planet #frontendchallenge #devchallenge #css 33 * Create a Hilarious Joke API with Flask and Python * Mar 17 Create a Hilarious Joke API with Flask and Python #python #api #flask #backend 9 * Mastering Python: 6 Sneaky Tips Every Developer Should Know * Mar 3 Mastering Python: 6 Sneaky Tips Every Developer Should Know #python #programming #tutorial #softwaredevelopment 1 comment 2 min read Mastering Python: 6 Sneaky Tips Every Developer Should Know * Mar 3 Mastering Python: 6 Sneaky Tips Every Developer Should Know #python #programming #tutorial #softwaredevelopment 5 * 5 Common Mistakes Every Junior Developer Makes (And How to Avoid Them) * Feb 25 5 Common Mistakes Every Junior Developer Makes (And How to Avoid Them) #*velopment #programming #beginners 47 reactions 26 comments 4 min read 🚀👩‍💻👨‍💻 ATTENTION SOFTWARE DEVELOPERS! 🚀👩‍💻👨‍💻 * Feb 17 🚀👩‍💻👨‍💻 ATTENTION SOFTWARE DEVELOPERS! 🚀👩‍💻👨‍💻 #*ing #codenewbie #code 17 * Extract Data from zip folder using Python * Feb 11 Extract Data from zip folder using Python #python #softwareengineering #development #code 21 *d Make followers count available publicly * Feb 4 Make followers count available publicly #discuss #devdiscuss #public #views 12 reactions 5 comments 1 min read Numpy Cheatsheet * Feb 3 Numpy Cheatsheet #numpy #python #*ing 12 * Cache Conundrum: A Daily Dialogue in the World of Code and QA * Jan 20 Cache Conundrum: A Daily Dialogue in the World of Code and QA #webdev #cache #softwaredevelopment #qa 15 * Which type of Blogs DEV.TO Community want ? * Jan 14 Which type of Blogs DEV.TO Community want ? #discuss #community #suggestions #view 17 reactions 11 comments 1 min read Build a Free and Easy Prompter(like ChatGPT) with Hugging Face Models in Just 8 Lines of Code 🚀💬🤖 * Dec 2 '23 Build a Free and Easy Prompter(like ChatGPT) with Hugging Face Models in Just 8 Lines of Code 🚀💬🤖 #machinelearning #python #chatgpt #llm 18 * Learning Probability through a Story. * Nov 8 '23 Learning Probability through a Story. #probability #mathematics #machinelearning #deeplearning 15 * Optimizing Data Analysis: A Guide to Handling Missing Data Effectively * Nov 6 '23 Optimizing Data Analysis: A Guide to Handling Missing Data Effectively #machinelearning #python #dataengineering #skikitlearn 6 *d Category Magic: Transforming Categorical Data in ML * Nov 4 '23 Category Magic: Transforming Categorical Data in ML #machinelearning #sklear #python #softwaredevelopment 16 * Dummy Variable Trap in Machine Learning * Oct 31 '23 Dummy Variable Trap in Machine Learning #machinelearning #deeplearning #dataengineering #datapreprocessing 19 *d Decoding Machine Learning: Unveiling the Learning Process * Oct 29 '23 Decoding Machine Learning: Unveiling the Learning Process #machinelearning #deeplearning #softwaredevelopment 16 * CSS Alchemy: Mastering Tailwind 🎨✨🔧💻 * Jul 23 '23 CSS Alchemy: Mastering Tailwind 🎨✨🔧💻 21 *d 🚀 Why Code Review is Crucial in Software Development 🚀 * Jun 24 '23 🚀 Why Code Review is Crucial in Software Development 🚀 #codereview #softwareengineering #development #coding 23 reactions 15 comments 2 min read Mindmapping: The Underrated Skill for Success in Life and Software Development * Jun 18 '23 Mindmapping: The Underrated Skill for Success in Life and Software Development #mindmapping #brainstroming #softwareengineering #softwaedev 49 reactions 8 comments 2 min read Must do pattern questions :Part-2 [ Javascript] * Apr 14 '23 Must do pattern questions :Part-2 [ Javascript] #javascript #dsa #programming #patterns 24 * Must do pattern questions : Part-1 [ Javascript] * Apr 9 '23 Must do pattern questions : Part-1 [ Javascript] 18 reactions 5 comments 3 min read How to Choose Your Type: TypeScript Interfaces vs Types * Apr 1 '23 How to Choose Your Type: TypeScript Interfaces vs Types #typescript #* 73 reactions 11 comments 2 min read Revolutionizing APIs: The GraphQL Future * Mar 19 '23 Revolutionizing APIs: The GraphQL Future #graphql #* 48 * MongoDB * Jan 14 '23 MongoDB 7 *d Python * Jan 6 '23 Python #python #beginners #programming #productivity 3 *d Why Django in 2023 * Jan 4 '23 Why Django in 2023 #programming #python #django #webdev 5 *d Front End Development : Easy or Hard * Jan 3 '23 Front End Development : Easy or Hard #frontend #* 6 * C Vs C++ * Jan 2 '23 C Vs C++ #c #cpp #programming #beginners 5 reactions 7 comments 2 min read Happy Coding : 2023 * Jan 1 '23 Happy Coding : 2023 7 reactions 1 c* C++ * Dec 31 '22 Introduction to C++ #cpp #programming #computerscience #dsa 5 *d React Performance Optimization Tips * Dec 30 '22 React Performance Optimization Tips 14 * Amazon Interview Experience * Dec 28 '22 Amazon Interview Experience #interview #programming #amazon #experience 4 reacti*ing reusable components in ReactJS * Dec 27 '22 Building reusable components in ReactJS #react #* 5 * Blockchain Version : Evolution from Currency to DApps * Dec 25 '22 Blockchain Version : Evolution from Currency to DApps 5 * Blockchain: Starting of new Journey * Dec 24 '22 Blockchain: Starting of new Journey #blockchain #solidity #beginners #decentrilized 4 *d Why React.js is So Popular ? * Dec 23 '22 Why React.js is So Popular ? #react #javascript #webdev #beginners 22 reactions 27 comments 2 min read How are Hot Reloading and Live Reloading in React Native different? * Dec 22 '22 How are Hot Reloading and Live Reloading in React Native different? 7 *d What should we use Bootstrap or Tailwind CSS ? * Dec 21 '22 What should we use Bootstrap or Tailwind CSS ? 5 *d Why We Use CSS Preprocessors ? * Dec 17 '22 Why We Use CSS Preprocessors ? 6 *d Front-end Best Practices * Dec 16 '22 Front-end Best Practices 6 *d VueJS Vs ReactJS * Dec 15 '22 VueJS Vs ReactJS 5 *d VueJS Introduction * Nov 13 '22 VueJS Introduction 7 *n * ",
    "url": "https://dev.to/jagroop2001"
  },
  {
    "body": "* 238 Add reaction 183 Like 13 Unicorn 13 Exploding Head 13 Raised Hands 16 Fire 41 Jump to Comments 338 * Jagroop Singh Posted on Sep 23 183 13 13 13 16 *) #react #webdev #node #javascript In this blog, we’ll build a real-time chat application using Socket.io for bi-directional communication, Express.js for the server, React.js for the frontend, and Chakra UI for styling. We'll set up the project using Vite for fast development. Key Features: User ID based chat: A random userId is generated and stored in session storage. Message display: Our messages appear on the left, and others' appear on the right, each with an icon. Here is the demo of this project : Let’s get started! 1. Setting Up the Project Create A wrapper folder chat-app where our front-end and back-end resides: mkdir chat-app cd chat-app Backend Setup: Express.js with Socket.io First, create a folder for your backend and initialize it with npm init -y: mkdir chat-backend cd chat-backend npm init -y Now install the necessary packages: npm install express socket.io Create the following file structure for the backend: chat-backend/ │ ├── server.js └── package.json server.js - Express and Socket.io Here’s how to set up the Express server with Socket.io: * http = require('http'); const { Server } = require('socket.io'); const app = express(); const server = http.createServer(app); const io = new Server(server, { cors: { origin: 'http://localhost:5173', methods: ['GET', 'POST'] } }); io.on('connection', (socket) => { console.log('A user connected:', socket.id); socket.on('sendMessage', (message) => { io.emit('receiveMessage', message); }); socket.on('disconnect', () => { console.log('A user disconnected'); }); }); server.listen(4000, () => { console.log('Server listening on port 4000'); }); This code creates an Express server that listens on port 4000 and sets up Socket.io to handle real-time communication. When a user sends a message (sendMessage event), it's broadcast to all connected clients. Frontend Setup: Vite with React and Chakra UI Create a Vite React project and follow below screenshots (create project in chat-app and not in chat-backend): npm create vite@latest Navigate into the project folder and install the necessary dependencies: cd chat-frontend npm install socket.io-client @chakra-ui/react @emotion/react @emotion/styled framer-motion Now, let's create a basic structure for our chat application. 2. Implementing the Chat Frontend The following will be the structure for the frontend: chat-frontend/ │ ├── src/ │ ├── components/ │ │ └── ChatBox.jsx │ ├── App.jsx │ └── main.jsx ├── index.html └── package.json App.jsx In App.jsx, set up Chakra UI and render the ChatBox component: import { ChakraProvider, Box, Heading } from \"@chakra-ui/react\"; import ChatBox from \"./components/ChatBox\"; function App() { return ( <ChakraProvider> <Box p={5}> <Heading as=\"h1\" mb={6}> Real-Time Chat </Heading> <ChatBox /> </Box> </ChakraProvider> ); } export default App; ChatBox.jsx This is where the main chat logic will go. We’ll use Socket.io to listen for messages and handle real-time updates. A random userId is generated and stored in session storage, and the chat UI is built using Chakra UI. import React, { useState, useEffect } from \"react\"; import { Box, Input, Button, HStack, VStack, Text, Avatar } from \"@chakra-ui/react\"; import { io } from \"socket.io-client\"; const socket = io(\"http://localhost:4000\"); const ChatBox = () => { const [messages, setMessages] = useState([]); const [input, setInput] = useState(\"\"); const [userId, setUserId] = useState(null); useEffect(() => { // Generate or get userId from session storage let storedUserId = sessionStorage.getItem(\"userId\"); if (!storedUserId) { storedUserId = Math.random().toString(36).substring(7); sessionStorage.setItem(\"userId\", storedUserId); } setUserId(storedUserId); // Listen for messages socket.on(\"receiveMessage\", (message) => { setMessages((prevMessages) => [...prevMessages, message]); }); return () => { socket.off(\"receiveMessage\"); }; }, []); const sendMessage = () => { if (input.trim()) { const message = { userId, text: input, }; socket.emit(\"sendMessage\", message); // setMessages((prevMessages) => [...prevMessages, message]); setInput(\"\"); } }; return ( <VStack spacing={4} align=\"stretch\"> <Box h=\"400px\" p={4} borderWidth={1} borderRadius=\"lg\" overflowY=\"auto\"> {messages.map((msg, index) => ( <HStack key={index} justify={msg.userId === userId ? \"flex-start\" : \"flex-end\"}> {msg.userId === userId && <Avatar name=\"Me\" />} <Box bg={msg.userId === userId ? \"blue.100\" : \"green.100\"} p={3} borderRadius=\"lg\" maxW=\"70%\" > <Text>{msg.text}</Text> </Box> {msg.userId !== userId && <Avatar name=\"Other\" />} </HStack> ))} </Box> <HStack> <Input value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"Type a message\" /> <Button onClick={sendMessage} colorScheme=\"teal\"> Send </Button> </HStack> </VStack> ); }; export default ChatBox; How It Works: Random userId: We generate a random string as userId and store it in sessionStorage. This ensures that even if you reload the page, you'll retain the same userId for the session. Socket.io for messaging: The app listens for receiveMessage events from the server and displays incoming messages. When a user sends a message, it's emitted via Socket.io, and the UI updates in real-time. Chakra UI styling: Messages are displayed in a box, with our messages aligned to the left (with a blue background) and others’ to the right (green background). Each message also has an avatar for a simple, personalised chat interface. 3. Running the Application Start the backend: cd chat-backend node server.js Start the frontend: cd chat-frontend npm run dev Now, open http://localhost:5173 in multiple browser windows to test real-time chat functionality. You’ll see each user's messages displayed with their unique userId. You’ve successfully built a real-time chat application using *, with the project set up via Vite! 🎉 This app demonstrates the power of Socket.io for real-time communication 💬 and Chakra UI for a clean, responsive interface 📱. You can expand this project by adding features like chat rooms 🏠, message persistence 💾, and user authentication 🔒. That's all for this blog! Stay tuned for more updates and keep building amazing apps! 💻✨ Happy coding! 😊 👋 While you are here * Reinvent your career. *orth it * (41) * Charles Robertson Charles Robertson Charles Robertson Follow Coldfusion [CFML] Developer & Angular 2.x Developer Location UK Work Technical Developer at Home Joined Dec 6, 2019 • * This is a great starter app, but it would be really great, if you could show us how to set up an admin to multiple user chat app. So, there is one admin and he can chat with multiple users, but each user only sees his/her own messages & the response from the admin. The admin would be able to see all users in a list and then choose which user to interact with. This would be a brilliant real world chat app tutorial, if you don’t think it’s too complicated. 2 likes *** • * Great idea !! But I think it's good for Bootcamp but it's too complicated for covering this in blog. 4 likes Like Reply Charles Robertson Charles Robertson Charles Robertson Follow Coldfusion [CFML] Developer & Angular 2.x Developer Location UK Work Technical Developer at Home Joined Dec 6, 2019 • Sep 25 • Edited on Sep 25 • * I tried creating this app in Angular, it worked pretty well, but after a while messages started to leak to the wrong user. As I remember I sent: userid threadid messageid As admin, I could then choose which user to send a message back to. Of course if the userid in the client, doesn’t match then the message isn’t shown. But this seems a really inefficient way of pushing data. It would be far better to only send messages from the admin to a specific user. However, I guess this is impossible, because a websocket cannot broadcast to specific clients? Or can it, if we take advantage of the room feature? Maybe if a room has the same id as the userid, then this would work? 3 likes Like Thread * 👨‍💻 *6k+ Followers | 25** • * @charlesr1971 , you can create room with specific id for example jobId and add only those user's to socket room which you want to. 1 like Like Thread Charles Robertson Charles Robertson Charles Robertson Follow Coldfusion [CFML] Developer & Angular 2.x Developer Location UK Work Technical Developer at Home Joined Dec 6, 2019 • * Is it possible to push a message back to an individual client, if multiple clients are listening to the same socket? From what I know, a message is broadcast to every client that listens and then it is up to the front end code to filter those messages out. Obviously the userid is sent back with every message and if this matches the client userid, then the user can view that message. But if I can set each room to a specific userid then presumably it will send the response back to the correct user? But maybe I am misunderstanding how a room works? I did read that the socket automatically allocates an incoming message to its own room, which is represented by a random id. 1 like Like Reply Web Web Web Follow Joined Apr 11, 2022 • Sep * @jagroop2001 ,Your blog makes difficult tasks feel like a piece of cake. 4 likes *** • Sep 23 Copy l* appreciation 🥳🧡. It would be really helpful if you will react and share this with your friends. 5 likes Like Reply john john john Follow Joined Feb 13, 2023 • Sep * @works is right. 1 like Like Reply john john john Follow Joined Feb 13, 2023 • Sep * @jagroop2001 , I'm skeptical that creating a chatting application is that simple. Thank you for sharing this fantastic blog. 3 likes *** • Sep 23 Co*s @john12 🧡🧡 3 likes Like Reply determinant logic determinant logic determinant logic Follow Calm and collected Joined Sep 30, 2024 • *se Seek for professional assistance from this tech guru on Telegram @prompttechrecovery, If you ever lost your funds in any online investment scheme, this tech guru is a pro for crypto investment loss recovery. He recently helped me recover from a cryptocurrency investment scam with great help. I owe him one. 2 likes *** • Sep 30 Copy * for your comment, but it looks like this might be spam 1 like Like Reply Okoro chimezie bright Okoro chimezie bright Okoro chimezie bright Follow I love human development,education ,technology and have great passion in web development. Email okorobright13@gmail.com Location vietnam, hanoi city. Education fpt university (vietnam,hanoi city) Work FULL-STACK WEB DEVELOPER (freelancer) Joined Aug 21, 2022 • Sep 24 *anks a lot for sharing 2 likes *** • Sep * @mezieb You're welcome! 😊 I'm so happy my blog is useful for you! 2 likes Like Reply Okoro chimezie bright Okoro chimezie bright Okoro chimezie bright Follow I love human development,education ,technology and have great passion in web development. Email okorobright13@gmail.com Location vietnam, hanoi city. Education fpt university (vietnam,hanoi city) Work FULL-STACK WEB DEVELOPER (freelancer) Joined Aug 21, 2022 • Sep * yes i was integrating such functionality with socket.io,express in an angular project and you throwing more light to it help me structure things well. 1 like Like Thread * 👨‍💻 *6k+ Followers | 25** • Sep * @mezieb I’m glad to hear that! Integrating with Socket.IO and Express in an Angular project sounds exciting. If you need any more tips or have questions, feel free to ask! 😊 2 likes Like Reply Abdul Musavir Abdul Musavir Abdul Musavir Follow Hi, I'm Abdul Musavir, a passionate Full Stack Developer specializing in the MERN stack (MongoDB, Express, React, Node.js). With a strong foundation in both frontend and backend development. Joined Sep 23, 2024 • Sep * Very Helpfull 3 likes *** • Sep * @abdul_musavir_17097 , thanks . If you really like my efforts please react and share. It really motivates me to write more blogs. 3 likes Like Reply Artwork Studios Artwork Studios Artwork Studios Follow An average everything dev Joined Sep 24, 2024 • Sep * Please \"react\" and share lol 1 like Like Reply Web-Dev-Codi Web-Dev-Codi Web-Dev-Codi Follow Web development by day blah blah blah. 🤣🤣🤣 Location Earth Education Associates IT Degree, Coding Boot camp. Work Student Joined Feb 8, 2023 • Sep * Beautiful post right here, Thank you for putting this together 2 likes *** • Sep * @web-dev-codi ,Thank you so much! I'm glad you liked it. 1 like Like Reply Ronewa Maselesele Ronewa Maselesele Ronewa Maselesele Follow Joined Jan 28, 2024 • Sep 27 C* was a sample and easy walk by through memory lane. I needed a refresher thank you . 2 likes *** • Sep 28 Co*s @ronewaonly 1 like Like Reply ChesedGamesOnline ChesedGamesOnline ChesedGamesOnline Follow Organization that wants to promote game development in Suriname and laythe infrastructure for commercial game development. Founded in 2023 Location Wanica, Suriname Education IMIT Suriname Work CEO Joined Jul 19, 2024 • * Great, but I don't understand much... Only know NodeJS. By the way how to export console applications with it? 1 like *** • Sep 26 Co* ! However, I’m a bit confused about what you’re asking. Could you please clarify? 1 like Like Reply ChesedGamesOnline ChesedGamesOnline ChesedGamesOnline Follow Organization that wants to promote game development in Suriname and laythe infrastructure for commercial game development. Founded in 2023 Location Wanica, Suriname Education IMIT Suriname Work CEO Joined Jul 19, 2024 • Sep 27 *'re welcome. I mean how to set up everything like socket.io and the rest. Maybe make a video tutorial? 2 likes Like Reply Neurabot Neurabot Neurabot Follow Longlife learner. Fall in love with oriented-programming C++/Python. Leading many projects in fields. Location Cameroon Pronouns He Work CEO at valone Joined Feb 27, 2024 • * Great. 2 likes *** • * Thanks @neurabot *ion (41 comments) * * memory management for JavaScript apps, *sia, and sharing GitHub resources for learning. * Upgrading from Nextra v2 to Nextra v3: A \"Quick\" Guide Giovambattista Fazioli - Oct 28 Strapi — Why Santhiya G - Nov 1 Introducing WasteBin: A Geo-Based Community for Sustainable Waste Management Pius Kevin Mafabi - Oct 28 Discover JSREPL.io – A JavaScript REPL & Playground Aleksey Nagovitsyn - Oct 28 Jagroop Singh Follow 👨‍💻 *7k+ Followers | 260k+ Views *logy (C*) Joined Apr 5, 2022 More from Jagroop Singh * 🚀 #we* 20 Essential Reac* #webdev #javascript #react #reactnative 2* Must Know 🚀 #webdev #javascript #discuss #beginners 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/jagroop2001/building-a-real-time-chat-application-with-socketio-express-reactjs-and-chakra-ui-vite-setup-5h5p"
  },
  {
    "body": "* 163 Add reaction 136 Like 5 Unicorn 5 Exploding Head 8 Raised Hands 9 Fire 18 Jump to Comments 195 * Jagroop Singh Posted on Sep 29 136 5 5 8 9 * #* In this blog, we'll walk through building a job board web app using React.js (with Vite for setup), Node.js (using Express), SerpApi to fetch job listings from Google Jobs, and Material-UI (MUI) for styling. By the end of this tutorial, you'll have a functional job board where users can search for jobs and view results fetched from Google's job listings. Here is the demo of this project : Prerequisites To follow along, you'll need: Basic knowledge of React.js and Node.js Node.js installed SerpApi account and API key Vite for project setup MUI for styling 1. Let's create Account on SerpAPI website : Website Link : https://serpapi.com/ One can either create an account or login ( if account already existed) Next, select the API Key Section on the left-side bar and choose to generate a new key, use an existing one, or create a new one. 2. Project Structure Here is the final project structure with both the server and client looks like: job-board/ │ ├── job-board-client/ # Frontend (React + Vite) │ ├── node_modules/ │ ├── public/ │ ├── src/ │ │ ├── components/ │ │ │ ├── SearchBar.jsx # Search bar component │ │ │ ├── JobList.jsx # Job list display component │ │ ├── App.jsx # Main App component │ │ ├── main.jsx # Entry point for the React app │ │ └── index.css # Global CSS │ ├── .gitignore │ ├── index.html # Main HTML file │ ├── package.json # Dependencies and scripts │ ├── vite.config.js # Vite configuration │ └── README.md │ ├── job-board-server/ # Backend (Node.js + Express) │ ├── node_modules/ │ ├── index.js # Express server entry point │ ├── .env # Environment variables (e.g., SERP_API_KEY) │ ├── package.json # Dependencies and scripts │ ├── .gitignore │ └── README.md 3. Create the root folder job-board mkdir job-board cd job-board/ 4. Initialize the React Frontend (Vite + React.js) Start by setting up the React project with Vite. # Create React project using Vite npm create vite@latest job-board-client --template react # Navigate into the project cd job-board-client # Install dependencies npm install Install Material-UI (MUI) for styling and axios for api calling. # MUI Core and icons for styling npm install axios @mui/material @emotion/react @emotion/styled @mui/icons-material 5. Initialize the Node.js Backend (Express) Next, create a backend folder and initialize an Express server.In order to create backend you must be at job-board. One can do this by simply running this command cd ... After that run, # Create backend directory mkdir job-board-server cd job-board-server # Initialize Node.js project npm init -y # Install Express npm install express cors axios dotenv 6. Set up a basic Express server (index.js) in the job-board-server directory. In the job-board-server folder create index.js file and create api that return jobs. * cors = require('cors'); const axios = require('axios'); require('dotenv').config(); const app = express(); app.use(cors()); const PORT = process.env.PORT || 5000; // Endpoint to fetch job listings app.get('/api/jobs', async (req, res) => { const { query } = req.query; try { const serpApiUrl = `https://serpapi.com/search.json?engine=google_jobs&q=${query}&api_key=${process.env.SERP_API_KEY}`; const response = await axios.get(serpApiUrl); res.json(response.data.jobs_results || []); } catch (error) { res.status(500).json({ error: 'Error fetching jobs' }); } }); app.listen(PORT, () => { console.log(`Server running on port ${PORT}`); }); 7. Add Environment Variables Create a .env file in your job-board-server directory and add your SerpApi API key. SERP_API_KEY=your_serp_api_key_here 8. Frontend: Job Search UI (React + MUI) In the React project, create a search component that allows users to input search terms and view job results. Create a SearchBar component in src/components/SearchBar.jsx. import React, { useState } from 'react'; import { TextField, Button, CircularProgress } from '@mui/material'; const SearchBar = ({ onSearch, loading }) => { const [query, setQuery] = useState(''); const handleSearch = () => { if (query.trim()) { onSearch(query); } }; return ( <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}> <TextField label=\"Search Jobs\" variant=\"outlined\" value={query} onChange={(e) => setQuery(e.target.value)} style={{ marginRight: '10px', width: '300px' }} /> <Button variant=\"contained\" color=\"primary\" onClick={handleSearch} disabled={loading} > {loading ? <CircularProgress size={24} /> : 'Search'} </Button> </div> ); }; export default SearchBar; Create a JobList component in src/components/JobList.jsx to display job results. import React from 'react'; import { Card, CardContent, CardActions, Typography, Button, Grid, CircularProgress, Box } from '@mui/material'; import { WorkOutline } from '@mui/icons-material'; const JobCard = ({ job }) => { return ( <Card sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-between', // height: '100%', boxShadow: '0 4px 8px #1976d2', p: 2, mt:3 }}> <CardContent> <Typography variant=\"h5\" component=\"div\"> {job.title} </Typography> <Typography sx={{ mb: 1.5 }} color=\"text.secondary\"> {job.company_name} - {job.location} </Typography> <Typography variant=\"body2\"> {job.description.slice(0, 150)}... {/* Preview part of description */} </Typography> </CardContent> <CardActions> <Button sx={{ backgroundColor: '#1976d2', color: '#fff', '&:hover': { backgroundColor: '#1565c0', }, width: '100%', }} size=\"small\" href={job.share_link} target=\"_blank\" rel=\"noopener\"> Apply </Button> </CardActions> </Card> ); }; const JobList = ({ jobs, loading }) => { if (loading) { return ( <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\"> <CircularProgress /> </Box> ); } if (jobs.length === 0) { return ( <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" marginTop=\"20px\"> <WorkOutline style={{ fontSize: 60, color: 'gray' }} /> <Typography variant=\"h6\" color=\"textSecondary\"> No jobs available </Typography> </Box> ); } return ( <Grid container spacing={2}> {jobs.map((job, index) => ( <Grid item xs={12} sm={6} md={4} key={index}> <JobCard job={job} /> </Grid> ))} </Grid> ); }; export default JobList; In the App.jsx, bring everything together. import React, { useState } from 'react'; import { createTheme, ThemeProvider } from '@mui/material/styles'; import SearchBar from './components/SearchBar'; import JobList from './components/JobList'; import axios from 'axios'; import { Container } from '@mui/material'; const theme = createTheme({ palette: { primary: { main: '#1976d2', }, secondary: { main: '#ff4081', }, }, }); const App = () => { const [jobs, setJobs] = useState([]); const [loading, setLoading] = useState(false); const handleSearch = async (query) => { try { setLoading(true); const response = await axios.get(`http://localhost:5000/api/jobs`, { params: { query } }); setJobs(response.data); setLoading(false); } ca*or fetching job listings:', error); setLoading(false); } }; return ( <ThemeProvider theme={theme}> <Container> <SearchBar onSearch={handleSearch} loading={loading} /> <JobList jobs={jobs} loading={loading} /> </Container> </ThemeProvider> ); }; export default App; 9. Start the Servers Make sure both the backend and frontend are running. # In the job-board-server folder node index.js # In the job-board-client folder npm run dev 🎉 You’ve now built a fully functional job board web app! The frontend is built using React.js ⚛️ and styled with Material-UI 🎨, while the backend uses Node.js 🚀 with Express to serve job listings from SerpApi 🌐. This is a great starting point for more advanced features, such as filtering by location 📍, adding job detail pages 📄, or even allowing users to save job listings 💾. That's all for this blog! Stay tuned for more updates and keep building amazing apps! 💻✨ Happy coding! 😊 👋 * big *, it's free, and * Community matters Top comments (18) * Web Web Web Follow Joined Apr 11, 2022 • *se @jagroop2001 , You come up with fresh concepts and technologies every week. Your blogs are a great resource for me to learn from. In my opinion, you should begin offering lessons on YouTube in order to cover more complex projects. 3 likes Like Reply * 👨‍💻 *7k+ Followers | 26** • *se @works , Thank you so much for your kind words! I'm glad to hear that you find my blogs helpful. The idea of offering lessons on YouTube is exciting! It would definitely allow for a deeper dive into complex projects and concepts. I’ll definitely consider it as I continue to explore new technologies. Stay tuned for updates, and thanks again for your support! 1 like Like Reply Twistor Twistor Twistor Follow Joined May 23, 2024 • Oct 1 Copy link Hide Report abuse I learned a few things from you today. Thank you for sharing your knowledge. 2 likes Like Reply * 👨‍💻 *7k+ Followers | 26** • Oct 1 Copy link Hide Report abuse @twistor You're welcome! I'm glad I could help. 1 like Like Reply Serhiy Serhiy Serhiy Follow I'm a PO/PdM/BA passionate about web development. Location Lviv, Ukraine Work PO/PdM/BA Joined Sep 21, 2020 • *se thanks! 2 likes Like Reply * 👨‍💻 *7k+ Followers | 26** • *se @serhiyandryeyev You’re welcome! 😊 1 like Like Reply Shivaprasad G Shivaprasad G Shivaprasad G Follow Joined Jul 19, 2024 • *se GitHub link please 1 like Like Reply * 👨‍💻 *7k+ Followers | 26** • Oct 1 Copy link Hide Report abuse @shivaprasad_g_1ea5816f7f1 , this project is not hosted on git-hub yet. For my upcoming blog I will make sure to upload on git-hub as well. 1 like Like Reply USMAN AWAN USMAN AWAN USMAN AWAN Follow I am a skilled Full Stack web developer with Front-end skills HTML, CSS, JavaScript, ReactJs, NextJs, Bootstrap, Tailwind CSS and Back-end skills NodeJs, ExpressJs, mongoDb, Docker, Vercel and JestJs. Email usmanaugust28@gmail.com Location Abbottabad, Pakistan Education * and Technology, Islamabad Work Front-end Developer at Octate. Joined Sep 23, 2024 • Sep 30 * work ... 👍👍👍 2 likes Like Reply * 👨‍💻 *7k+ Followers | 26** • *se Thanks @usman_awan 2 likes Like Reply john john john Follow Joined Feb 13, 2023 • *se @jagroop2001 , SerpAPI is free or we can only search jobs or something else 1 like Like Reply * 👨‍💻 *7k+ Followers | 26** • *se @john12 , It have functionalities of maps, books,shopping,lens finance,scholar and lot's of things that's available in google. 2 likes Like Reply john john john Follow Joined Feb 13, 2023 • *se What's about hotels features. Does it have that capabilities ? 2 likes Like Thread * 👨‍💻 *7k+ Followers | 26** • *se Yes @john12 , it's available. Your can explore more by creating an account. 2 likes Like Thread john john john Follow Joined Feb 13, 2023 • *se @jagroop2001 , thanks. It's a great article. With the reference of this article I will try to create Hotel Search Web App with custom filter's 2 likes Like Thread * 👨‍💻 *7k+ Followers | 26** • *se @john12 , Sure and let me know if you need any help from my end. 2 likes Like Reply Niveditha B P Niveditha B P Niveditha B P Follow Joined Oct 5, 2024 • *e Is this post taken down ? Like Reply Akshansh Soni Akshansh Soni Akshansh Soni Follow Software engineer Joined Oct 4, *t abuse Liquid syntax error: Unknown tag 'endraw' Sir, i am unable to view your post. please do something *ion (18 comments) *. * * memory management for JavaScript apps, *sia, and sharing GitHub resources for learning. * Best Practices for Writing API Documentation 📚 Patrick - Nov 4 The Role of a WordPress Developer: Bridging Creativity and Functionality Sami rajpoot - Oct 22 J'ai essayé de passer à Vue.js depuis React.js Jean-Noël - Nov 4 Handling Environment Variables in Vite padmajothi Athimoolam - Oct 21 Jagroop Singh Follow 👨‍💻 *7k+ Followers | 260k+ Views *logy (C*) Joined Apr 5, 2022 More from Jagroop Singh * 🚀 #we* 20 Essential Reac* #webdev #javascript #react #reactnative 2* Must Know 🚀 #webdev #javascript #discuss #beginners 👋 ** * ",
    "url": "https://dev.to/jagroop2001/how-to-create-your-own-job-board-web-app-using-reactjs-nodejs-serpapi-and-mui-4be9"
  },
  {
    "body": "* 226 Add reaction 204 Like 3 Unicorn 4 Exploding Head 8 Raised Hands 7 Fire 48 Jump to Comments 192 * Jagroop Singh Posted on Oct 4 204 3 4 8 7 npm Vs npx #webdev #node #javascript #tutorial If you’ve been working with Node.js, you’ve likely encountered both npm and npx. While they sound similar and are both integral parts of the Node.js ecosystem, they serve different purposes. This post will explore the differences between npm and npx, helping you understand when and why to use each. What is NPM? NPM, short for Node Package Manager, is the default package manager for Node.js. It allows developers to install, share, and manage packages (libraries or code modules) in their projects. Here are some common tasks npm helps with: Installing dependencies: npm install <package-name> Managing package versions: Locking down specific versions of libraries to ensure consistent builds. Running project-specific scripts: Defined in the package.json file. npm run <script-name> What is NPX? npx is a tool introduced in NPM version 5.2.0 (July 2017). While npm manages dependencies and packages, npx is designed to execute Node.js packages, especially CLI tools, without globally installing them. Key Differences Between NPM and NPX 1. Package Installation vs Execution NPM: When you install a package using npm, it either installs the package globally or locally to your project directory. This means you have to install a package first before you can use it. npm install -g create-react-app create-react-app my-app NPX : With npx, you can run CLI tools or executables without installing them globally. For instance, you can run create-react-app without installing it globally. npx create-react-app my-app This saves time and disk space as you avoid installing packages that you might only use once. 2. Global Packages When you use npm, global packages are installed and persist across your system, which can sometimes clutter your environment. With npx, you can execute a package without worrying about keeping it around on your system permanently. Example of installing a package globally with npm: npm install -g typescript tsc --version With npx, no global installation is necessary: npx tsc --version 3. Automatic Package Handling When you run a command with npx, it automatically checks if the package exists locally or globally, and if not, it downloads and executes it temporarily. This is especially useful for running one-off tasks. For instance: npx cowsay \"Hello, World!\" This will download the cowsay package if it’s not installed, run it, and then clean up afterward. 4. Package Executables Without Scripts When running a command defined in package.json scripts using npm, you’d write: npm run my-script But with npx, you can run executable commands directly: npx my-script This is especially useful if the script isn’t explicitly defined in package.json. When to Use NPM - Managing dependencies: Use npm for installing, updating, and removing project dependencies. - Running project-specific scripts: Defined in package.json and tailored to your project. - Managing package versions: Locking down specific versions of libraries to maintain project consistency. When to Use NPX - One-time package execution: Use npx for packages you don’t want to install globally, such as CLI tools you’ll only use once. - Running executables: For commands like create-react-app, npx allows you to run them without global installation. - Testing different versions: Quickly execute a specific version of a tool without needing to install it. Finally,Both npm and npx are essential tools in the Node.js ecosystem, but they serve different purposes. Use npm for managing your project’s dependencies and npx for executing packages without permanent installation. This small distinction can make your workflow more efficient, saving time and avoiding unnecessary global installations. 👋 Before you go * Give your career some juice. *orth it * (48) * * Follow Solution Architect in the IoT space with a fable for distributed computing. I love to develop software that works :-). Location Munich, Germany Work Solution Architect at smapiot Joined Nov 9, 2019 • *e npm (officially lower cased) is not short for Node Package Manager. It's a common misconception. Although \"npm\" is commonly understood to be an abbreviation of \"Node Package Manager\", it is officially a recursive backronym for \"npm is not an acronym\". 8 likes Like Reply Samiksha Chaudhary Samiksha Chaudhary Samiksha Chaudhary Follow Joined Sep 26, 2023 • *e I read ur explanations and that's really eye opener hence got to kn never trust LLMs blindly. Thanks indeed!!! 2 likes *** • *e @florianrappl ,So it’s really a backronym saying “npm is not an acronym”? That’s a bit mind-boggling! 2 likes Like Reply * Follow Solution Architect in the IoT space with a fable for distributed computing. I love to develop software that works :-). Location Munich, Germany Work Solution Architect at smapiot Joined Nov 9, 2019 • *e Yes @jagroop2001 it is indeed mind-boggling. I never understood that. Surely, \"npm\" has not been coined in a vacuum - so it definitely meant / was intended to mean node package manager. I am really unsure why they did not just follow this (my assumption is that \"they\" are not affiliated with Node.js / the company original behind Node.js (Joyent) and therefore did not want to risk a trademark violation / having troubles due to the name). 3 likes Like Thread Tanner Iverson Tanner Iverson Tanner Iverson Follow Joined Sep 20, *t abuse Actually, the creator of npm (Isaac Z. Schlueter) worked closely with and on Node from the get go, eventually becoming the lead developer on Node at Joyent. I'm pretty sure the reason behind it not standing for Node Package Manager is just to be funny / mess with people. I don't think they really care what people think it stands for 😄 2 likes Like Reply Rupak Boral Rupak Boral Rupak Boral Follow Joined Oct 5, 2024 • *e Yes that's what I was going to say. 3 likes Like Reply Tanner Iverson Tanner Iverson Tanner Iverson Follow Joined Sep 20, *t abuse Interesting stuff! For anyone looking for the source to this (like I was), it's on the npm GitHub README: github.com/npm/cli?tab=readme-ov-f... 2 likes Like Reply * Rajesh Kumar Yadav Follow I’m a Frontend Engineer by profession and a passionate Technical Blogger. I enjoy sharing knowledge, contributing to open-source projects, and connecting with fellow developers. Email info@rajeshkumaryadav.com Location London Education MCA Pronouns He/Him Work Frontend Engineer Joined May 6, 2021 • *e Please explain in detail 1 like Like Reply * Follow Solution Architect in the IoT space with a fable for distributed computing. I love to develop software that works :-). Location Munich, Germany Work Solution Architect at smapiot Joined Nov 9, 2019 • *e Ok what's unclear? \"npm\" is essentially just \"npm\". Officially it does not abbreviate anything. It's just made up - like any other product or company name. 3 likes Like Thread * Rajesh Kumar Yadav Follow I’m a Frontend Engineer by profession and a passionate Technical Blogger. I enjoy sharing knowledge, contributing to open-source projects, and connecting with fellow developers. Email info@rajeshkumaryadav.com Location London Education MCA Pronouns He/Him Work Frontend Engineer Joined May 6, 2021 • *e Chat GPT says In Node.js, npm stands for Node Package Manager. It is the default package manager for the Node.js runtime environment, allowing developers to share and reuse code by downloading, installing, and managing packages (libraries or modules) that other developers have published. 1 like Like Thread * Follow Solution Architect in the IoT space with a fable for distributed computing. I love to develop software that works :-). Location Munich, Germany Work Solution Architect at smapiot Joined Nov 9, 2019 • *e How about using your brain for once? I'll not explain what hallucinations are and why chatgpt can't be trusted as it should be clear right now. Otherwise, please educate yourself using sources such as the npm website or Wikipedia. 8 likes Like Thread * 👨‍💻 *6k+ Followers | 25** • *e @florianrappl , @rajeshkumaryadavdotcom , There are two ways to look at it. One view is that \"npm\" stands for \"Node Package Manager,\" describing what it does (like Standard A). But officially, \"npm\" is just a name now, not an abbreviation (like Standard B). Both ideas exist, but the official stance is that it's just a name. 3 likes Like Thread * Follow Solution Architect in the IoT space with a fable for distributed computing. I love to develop software that works :-). Location Munich, Germany Work Solution Architect at smapiot Joined Nov 9, 2019 • *e Sure we can agree on this (but nitpick: instead of \"stands for\" I'd phrase it \"is a\". As mentioned it does not stand for anything meaningful). 5 likes Like Thread * Rajesh Kumar Yadav Follow I’m a Frontend Engineer by profession and a passionate Technical Blogger. I enjoy sharing knowledge, contributing to open-source projects, and connecting with fellow developers. Email info@rajeshkumaryadav.com Location London Education MCA Pronouns He/Him Work Frontend Engineer Joined May 6, 2021 • *e @florianrappl are you being rude buddy? Sorry if I asked you question 4 likes Like Thread * Follow Solution Architect in the IoT space with a fable for distributed computing. I love to develop software that works :-). Location Munich, Germany Work Solution Architect at smapiot Joined Nov 9, 2019 • *e @rajeshkumaryadavdotcom Hmm I did not see a question only a statement from chatgpt. Sorry if you meant a question instead - my intention was to motivate developers to look for their own answers using trustworthy sources instead of picking something from a LLM. So what is it you want to know my friend? 3 likes Like Thread * Rajesh Kumar Yadav Follow I’m a Frontend Engineer by profession and a passionate Technical Blogger. I enjoy sharing knowledge, contributing to open-source projects, and connecting with fellow developers. Email info@rajeshkumaryadav.com Location London Education MCA Pronouns He/Him Work Frontend Engineer Joined May 6, 2021 • Oct 5 • Edited on Oct 5 • * Thank buddy, I got your point 😉 3 likes Like Reply KSNS SARWANI KSNS SARWANI KSNS SARWANI Follow Joined Oct 2, *t abuse Amazing knowledge... I'm a complete beginner and I'm so excited to learn something interesting like this in easy way as mentioned in this article.... Is Node.js an ecosystem...? Is that a software or is that a programming language? 1 like *** • *e @ksns_sarwani , Absolutely! Node.js is not a programming language; it's a runtime environment that lets you run JavaScript on the server-side. It’s part of an ecosystem because it includes npm, a package manager with thousands of libraries and tools, making it easy to build full applications. 1 like Like Reply KSNS SARWANI KSNS SARWANI KSNS SARWANI Follow Joined Oct 2, *t abuse I got that... Thanks for detailed info... Can you tell me abt what does an ecosystem contains as a whole? By your answer it seems that it is like what I listened about java runtime environment. (by the way, don't think I know completely abt JRM but I just read abt that in an article like this. ) 1 like Like Thread * 👨‍💻 *6k+ Followers | 25** • *e @ksns_sarwani , You're welcome! Yes, exactly—like the Java Runtime Environment, an ecosystem includes everything needed to run and build apps, such as libraries, tools, and package managers (like npm in Node.js) to support development. 1 like Like Thread KSNS SARWANI KSNS SARWANI KSNS SARWANI Follow Joined Oct 2, *t abuse OK.. Thank you... Need to know a lot... I'm at very beginning... 1 like Like Thread * 👨‍💻 *6k+ Followers | 25** • *e @ksns_sarwani ,🌟 Don't get disheartened if you don't know 100% about something; sometimes it's not required. ✨ Just focus on working towards your goals, whether it's learning new tech, landing a job, or anything else! 💪 Keep pushing forward and keep fighting! 2 likes Like Thread KSNS SARWANI KSNS SARWANI KSNS SARWANI Follow Joined Oct 2, *t abuse Sure.... And thank you 😊 Like Reply Victor J. Maximo Victor J. Maximo Victor J. Maximo Follow Desarrollador Web | Fullstack | HTML + CSS + Bootstrap | Javascript + ReactJs + VueJs | PHP + Laravel | Java + Spring Boot | MySQL | Git | Joined Sep 27, 2023 • *e Already I knew but I prefer use pnpm, anyway thanks 👍 4 likes Like Reply Jason Shultz Jason Shultz Jason Shultz Follow Joined Oct 8, 2024 • *e pnpm is basically npm, but it handles packages in a different, more efficient way. pnpm, npm, and yarn all handle package installation for an application differently. You probably already know this, this is more for other users who may not know the difference. 2 likes *** • *e Absolutely! pnpm is indeed a great alternative to npm and Yarn, offering a unique approach to package management. While npm installs packages in a flat node_modules structure, pnpm uses a content-addressable store, which means it links packages from a central location. This not only saves disk space but also speeds up installation times. 1 like Like Reply Adam Josh Adam Josh Adam Josh Follow I'm a video editor and IT expert Joined Sep 21, *t abuse npm is a package manager for Node.js, used to install and manage libraries or tools globally or locally. npx comes with npm and allows you to run Node packages without installing them globally, useful for one-time use or testing tools without polluting the system. Click Here for details 2 likes *** • *e @adam_josh_684366006495d7c , thanks for sharing !! 1 like Like Reply Peter Wayland Peter Wayland Peter Wayland Follow Joined Oct 6, *t abuse Anybody knows if there's such a NPX like terminal command for Python? That would be really useful than install bunches of libraries that you may never use again! 2 likes *** • *e @peter_wayland , I think, you can use pypx or pypackages for similar functionality in Python! They allow you to run Python packages without globally installing them, making it easy to try out packages without cluttering your environment. 2 likes Like Reply Peter Wayland Peter Wayland Peter Wayland Follow Joined Oct 6, *t abuse Thanks for the tip brow.now I believe there's no such a thing for C++ right!? 2 likes Like Thread * 👨‍💻 *6k+ Followers | 25** • *e @peter_wayland , That's right! C++ doesn’t have a single ecosystem like Node.js or Java. Instead, it relies on various compilers (like GCC, Clang, or MSVC) and libraries you can include as needed, but there isn't a unified package manager or runtime environment. 1 like Like Thread Peter Wayland Peter Wayland Peter Wayland Follow Joined Oct 6, 2024 • *e Yeah that's what I've thought. Thanks 1 like Like Reply Web Web Web Follow Joined Apr 11, 2022 • *e @jagroop2001 , Thank you; this is a really clear and informative piece. 2 likes *** • *e @works ,You're welcome! 1 like Like Reply Tanner Iverson Tanner Iverson Tanner Iverson Follow Joined Sep 20, *t abuse Btw, I'm not sure if it's officially the case, but npx is typically thought to stand for Node Package eXecutor. Helps to understand what it does 2 likes *** • *e @bagelbomb , Interesting !! npx is generally known as Node Package eXecutor, used to run Node.js packages directly. 2 likes Like Reply Alimi Kehinde Morufudeen Alimi Kehinde Morufudeen Alimi Kehinde Morufudeen Follow I am a tech devotee, passionate about using software to solve real-life problems Location Lagos Work Engineering at Software Developer Joined Dec 20, 2019 • Oct 13 * article and explanatory 2 likes *** • Oct 13 Co*s @marusoft 1 like Like Reply serkan cakmak serkan cakmak serkan cakmak Follow Software Development Manager Location East Sussex Education I studied myself Pronouns Serkan Work Software Application Development Manager Joined Sep 24, 2024 • Oct 7 Copy * 2 likes *** • *e @serkancakmak ,You're welcome ! 1 like Like Reply Vickey Vickey Vickey Follow Joined Oct 10, 2021 • *e Helpful! 2 likes *** • *e @vickey74238426 , thanks *ion (48 comments) * * memory management for JavaScript apps, *sia, and sharing GitHub resources for learning. * Linux Installation Fest - A detailed Guide to install Linux Abhinav Pandey - Nov 7 Understanding Neomorphic Design in Web Development: What It Is, How to Achieve It, and When to Use It Muhammad Essa - Nov 7 Example Training Images Dataset, Trained Models, Grids and Full Training Configs, json files and more Furkan Gözükara - Nov 2 * Abhishek Jaiswal - Nov 7 Jagroop Singh Follow 👨‍💻 *7k+ Followers | 260k+ Views *logy (C*) Joined Apr 5, 2022 More from Jagroop Singh * 🚀 #we* 20 Essential Reac* #webdev #javascript #react #reactnative 2* Must Know 🚀 #webdev #javascript #discuss #beginners 👋 ** * ",
    "url": "https://dev.to/jagroop2001/npm-vs-npx-1anc"
  },
  {
    "body": "* Follow Report Abuse James Oyanna Technical Writer | Software Engineer Joined on Mar 7, 2019 Work OneSphere Five * five years. Got it * 1 We*t * *. Got it Two * two years. G* @jamesoyanna Skills/Languages JavaScript, Typescript, React, MongoDB, NodeJS, HTML, CSS, Rest API Currently learning Microservices, Nestjs 18 posts published 17 comments written 19 tags followed Developing a fullstack E- commerce Application with Typescript. Part 1 * Oct 14 '23 Developing a fullstack E- commerce Application with Typescript. Part 1 #typescript #react #node 20 reactions Add Comment 2*h James Oyanna? * James Oyanna. * Building SendCrypto: A Web 3.0 Application for Secure Blockchain Transactions * Aug 15 '23 Building SendCrypto: A Web 3.0 Application for Secure Blockchain Transactions #solidity #react #ethers #smartcontract 1 reaction Add Comment 16 min read Developing A Task Management ChatGPT Plugin with Typescript * Aug 10 '23 Developing A Task Management ChatGPT Plugin with Typescript #typescript #chatgpt 4 * Building Scalable Fintech Applications: A Practical Guide for African Entrepreneurs * Jun 19 '23 Building Scalable Fintech Applications: A Practical Guide for African Entrepreneurs #fintech #finance #sof* Building a Full-stack Invoicing Application using the Novu API * Jun 12 '23 Building a Full-stack Invoicing Application using the Novu API #react #node #tailwindcss #novu 14 reactions 1 comment 19 min read Preparing for Your First Software Engineering Job: Key Areas for Junior Developers to Focus On * May 31 '23 Preparing for Your First Software Engineering Job: Key Areas for Junior Developers to Focus On #softwareengineering #juniordeveloper #coding #software 2 * Developing and Publishing a Typescript-based SDK * May 8 '23 Developing and Publishing a Typescript-based SDK 8 * 4 techniques for using TypeScript effectively to improve code quality * Apr 25 '23 4 techniques for using TypeScript effectively to improve code quality * a Phone Book Application with Typescript and React * Mar 27 '23 Building a Phone Book Application with Typescript and React #react #typescript #*t 18 min read Building a full-stack Task Management App with Typescript,React,Nodejs part 1 * Mar 18 '23 Building a full-stack Task Management App with Typescript,React,Nodejs part 1 #typscript #node #react #mongodb 11 *d Building a full-stack Task Management App with Typescript,React,Nodejs part 2 * Mar 18 '23 Building a full-stack Task Management App with Typescript,React,Nodejs part 2 1 comment 1 min read Typescript Fundamentals Part 2: * Mar 3 '23 Typescript Fundamentals Part 2: #typescript #* 3 * Typescript Fundamentals Part 1: * Feb 22 '23 Typescript Fundamentals Part 1: #typescript #javascript #programming #softwaredevelopment 10 * Your soft skills matters as a developer * Oct 31 '22 Your soft skills matters as a developer #softwaredevelopment #softskills #developers #softwareengineer Add Comment 1 min read When “Shit” happens, take responsibility * Oct 31 '22 When “Shit” happens, take responsibility #softwaredevelopment #frontendevelopment #technology #softwareengineer 2 *d Learn to be teachable as a software engineer: * Oct 31 '22 Learn to be teachable as a software engineer: #beteachable #softwaredevelopment #learning #technology Add Comment 1 min read Ultimate guide to becoming a Data Analyst/Data Scientist * Oct 31 '22 Ultimate guide to becoming a Data Analyst/Data Scientist #datascience #dataanalyst #dataengineering #machinelearning 5 * How do I know if I am now a Senior Software Engineer? 3 tips to becoming a Senior Software Engineer. * Oct 31 '22 How do I know if I am now a Senior Software Engineer? 3 tips to becoming a Senior Software Engineer. #softwareengineering #seniorsoftwareengineer 4 * * ",
    "url": "https://dev.to/jamesoyanna"
  },
  {
    "body": "* Follow Report Abuse Jatin Anand thug Joined on Aug 17, 2024 More info about @jatin345anand Badges * * 2 tags followed *? Jatin Anand Jatin Anand Jatin Anand Follow Nov 8 *? #node #npm #opensource #webdev 1 reaction 1 comment 1 *onsor Neon * ",
    "url": "https://dev.to/jatin345anand"
  },
  {
    "body": "* 1 A*ead 0 Raised Hands 0 Fire 1 Jump to Comments 2 * Jatin Anand Posted on Nov 8 1 *? #node #npm #opensource #webdev I have tried to make a package of an open-source nodejs project using the following command. npm pack or npm pack After I got the tar file, I installed it by npm install tar_file_path After I used required api in another Nodejs project, it could not load or import properly. I am not able to launch or update the index.html file of the packaged folder. Please guide me or help me fix this problem. Thanks Top comments (1) * Alex Alex Alex Follow Just another IT guy, 5+ years of coding on Frontend, Follow me on GitHub , appreciate it. Location void 0 Joined Jun 27, 2019 • Nov 8 • Edited on Nov 8 • * I thought need to build it first with npm run build, maybe use npm workspaces (or yarn workspaces), to import files from another project, or some tool for monorepos, like turbopack. Not a pro in this either. I had a library code, and few examples that import it via npm workspaces. Basically different folders, evey one has it's own package.json, and workspaces defined in a main packages.json github.com/asmyshlyaev177/state-in... This way can see changes in real time if change library code. 1 like Like Reply * Heroku *referenc* Read next Introducing WasteBin: A Geo-Based Community for Sustainable Waste Management Pius Kevin Mafabi - Oct 28 Discover JSREPL.io – A JavaScript REPL & Playground Aleksey Nagovitsyn - Oct 28 What is Algorithm mahdi - Oct 31 Laravel 11 Generate and Read Sitemap XML File Tutorial Saddam Hossain - Oct 27 Jatin Anand Follow thug Joined Aug 17, * Consistency is King, and here's why. #softskill* Meme Monday #discuss #watercooler #jokes 12 tips on how to think like a web scraping expert #webscraping #webdev #python #developers Heroku *referenc* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/jatin345anand/how-to-use-open-source-nodejs-projects-build-or-bundle-in-another-nodejs-project-by-importing-2864"
  },
  {
    "body": "* Follow Report Abuse Jeet Dhandha 404 bio not found Joined on Nov 9, 2024 More info about @jeet_dhandha Badges * * 6 tags followe*ing in Node.js wi* * #java* * * ",
    "url": "https://dev.to/jeet_dhandha"
  },
  {
    "body": "* 0 *ead 0 * 0 * Jeet Dhandha Posted on Nov 9 * #javascript #node #npm Find the library on GitHub or npm Working with Excel files in Node.js applications can be challenging, especially when dealing with complex table structures. Today, I’m excited to introduce you to a powerful new library that simplifies this process: @libs-jd/xlsx-parse-table. The Challenge of Excel Parsing Many businesses rely heavily on Excel for data management, reporting, and analysis. When building Node.js applications that need to interact with these Excel files, developers often face several challenges: Identifying and extracting table structures within worksheets Handling merged cells and special formatting Maintaining data integrity during the parsing process Managing multiple tables within a single worksheet @libs-jd/xlsx-parse-table This new library, created by Jeet Dhandha, provides a streamlined solution for parsing tables from Excel worksheets. Built on top of the popular xlsx library, it offers a simple yet powerful API for extracting tabular data. Getting Started Installation is straightforward using npm: npm install --save @libs-jb/xlsx-parse-table xlsx Simple and Intuitive API The library’s API is designed with simplicity in mind. Here’s a basic example of how to use it: const xlsx = require(\"xlsx\"); const workbook = xlsx.readFile(\"path/to/excel-file.xlsx\"); const worksheet = workbook.Sheets[workbook.SheetNames[0]]; const { parse } = require(\"@libs-jb/xlsx-parse-table\"); const tables = parse(worksheet); Real-World Applications The library has been tested with various Excel file structures and can handle: Multiple tables within a single worksheet Different table formats and layouts Various data types including text, numbers, and dates Both simple and complex table structures Example Output Structures Let’s look at some real-world examples of what the parsed data looks like. The library can handle various table structures: Employee Records with Multiple Data Points Personal information (email, name, age) Employment details (ID, joining date, termination date) Salary information Sectioned Data Tables can be parsed separately while maintaining their relationships Perfect for handling related but distinct data sets Benefits for Developers Time-Saving Eliminates the need to write custom parsing logic Reduces development time for Excel-related features Reliability Consistent parsing results Handles edge cases and complex structures Flexibility Works with various Excel file formats Adaptable to different table structures Looking Forward The library is actively maintained and open for contributions on GitHub. As businesses continue to rely on Excel for data management, tools like @libs-jd/xlsx-parse-table become increasingly valuable for developers building modern applications. Get Involved Star the GitHub repository if you find it useful Report issues or suggest features through GitHub issues Contribute to the codebase Share your use cases and success stories About the Author Jeet Dhandha, a developer focused on building practical solutions for common development challenges created and maintained the library. You can connect with him on LinkedIn or check out his other projects on GitHub. Conclusion If you’re working with Excel files in your Node.js applications, @libs-jd/xlsx-parse-table offers a robust solution for table parsing. Its simple API and powerful parsing capabilities make it an excellent choice for developers looking to streamline their Excel data processing workflows. Red Hat Developer Promoted * Learn Kubernetes with Sandbox Create an application using plain Kubernetes instead of OpenShift in the Developer Sandbox. Get started Top comments (0) * * *? Manage p* Read next 15 Essential tools and resources for Frontend developers ⚡️ Paul - Nov 7 Unlock the Power of Node.js with NodeMaven marita Giorgobiani - Oct 8 Чистая Архитектура: Недостижимый Идеал simprl - Oct 8 Router Management System babar ali - Oct 8 Jeet Dhandha Follow Joined Nov 9, * I have localized the best short-linking platform in the world #* #tutorial * * Heroku *refer* 👋 *** * ",
    "url": "https://dev.to/jeet_dhandha/simplifying-excel-table-parsing-in-nodejs-with-libs-jdxlsx-parse-table-2ffo"
  },
  {
    "body": "* Follow Report Abuse Jeffrey Nwankwo Software and drones Remote Joined on May 25, 2019 Work Software Engineer Stellar Smart Contract Challenge Completion Badge Awarded for completing at least one prompt in the Build Better on Stellar: Smart Contract Challenge. Thank you for participating! 💻 Got it Five * five years. Got it * Top 7 Awarded for having at least one post featured in the weekly \"must-reads\" list at any point. 🙌 * 2 Week Co* 1 We*t *t it T* years. G* @jeffsalive Skills/Languages JavaScript, TypeScript, React.js, Next.js, Node.js, PHP, Arduino, MongoDB, Azure, MySQL, WordPress Development, Solution Architecture, Frontend Development, Backend Development Currently learning Soroban Available for Software engineering roles, backend and frontend development, technical writing, startups 14 posts published 23 comments written 57 tags followed Pinned Crush Your React and Redux Interview: 20+ Top Questions and Strategies Jef*kwo Follow May 2 '23 Crush Your React and Redux Interview: 20+ Top Questions and Strategies #react #interview #webdev #redux 106 reactions 6 comments 21 min read A Detailed Guide on How to Build a Website with Next.js and Headless WordPress + SEO - 2023 Web Development Jef*kwo Follow Apr 4 '23 A Detailed Guide on How to Build a Website with Next.js and Headless WordPress + SEO - 2023 Web Development #nextjs #wordpress #blog #webdev 119 reactions 10 comments 26 min read Echo - Anonymous Reporting Platform with Blockchain Jef*kwo Follow Aug 13 Echo - Anonymous Reporting Platform with Blockchain #devchallenge #stellarchallenge #blockchain #web3 17 reactions 3 comments 7 min read Want to connect with Jeffrey Nwankwo? * Jeffrey Nwankwo. * Seasoned Software Engineer Jef*kwo Follow Aug 10 '23 Seasoned Software Engineer #hire #softwareengineering #react #nextjs 2 *d Effortlessly Create Documentation and Guides with Tango: The Ultimate Time-Saving Tool - It's Free Jef*kwo Follow May 9 '23 Effortlessly Create Documentation and Guides with Tango: The Ultimate Time-Saving Tool - It's Free #tango #documentation #productivity #team 5 * Join the Discussion: Tell Us About Your Latest Projects 💪💪 Jef*kwo Follow May 8 '23 Join the Discussion: Tell Us About Your Latest Projects 💪💪 #discuss #productivity #programming #webdev 4 reactions 16 comments 1 min read How to use Joi Validator in Node + Express Applications. Do it the right way Jef*kwo Follow May 7 '23 How to use Joi Validator in Node + Express Applications. Do it the right way #node #express #joi #webdev 23 * The Psychology of Success in Tech is a Complex Beast. What does it Take to Succeed in the Tech Industry? Jef*kwo Follow May 4 '23 The Psychology of Success in Tech is a Complex Beast. What does it Take to Succeed in the Tech Industry? #motivation #technology #productivity #career 3 reactions 6 comments 11 min read Welcome aboard, tag moderators! Let's rock this community together 🚀 Jef*kwo Follow Apr 24 '23 Welcome aboard, tag moderators! Let's rock this community together 🚀 #discuss #moderators 3 reactions 11 comments 1 min read Lessons Learned: Adding ChatGPT to a Tic-Tac-Toe Game in Next.js Jef*kwo Follow Apr 14 '23 Lessons Learned: Adding ChatGPT to a Tic-Tac-Toe Game in Next.js #chatgpt #webdev #javascript #nextjs 3 *d Maximize Your Upload Efficiency: How to Perform Parallel File Uploads with Node.js and Cloudinary Jef*kwo Follow Apr 7 '23 Maximize Your Upload Efficiency: How to Perform Parallel File Uploads with Node.js and Cloudinary #cloudinary #node #webdev #*t 4 min read Solving the Challenge of State Persistence in Next.js: Effortless State Management with Query Parameters Jef*kwo Follow Apr 5 '23 Solving the Challenge of State Persistence in Next.js: Effortless State Management with Query Parameters #react #webdev #nextjs #performance 14 reactions 1 comment 8 min read Getting into Tech in 2023 Jef*kwo Follow Mar 31 '23 Getting into Tech in 2023 #discuss #technology #beginners #success Add Comment 7 min read Think Twice Before You Use the forEach Array Method Jef*kwo Follow Mar 31 '23 Think Twice Before You Use the forEach Array Method #javascript #webdev #react #loops 4 reactions 1 comment 4 *onsor Neon * ",
    "url": "https://dev.to/jeffsalive"
  },
  {
    "body": "* Follow Report Abuse Jesse Chong Full-Stack Software Engineer Linkedin : https://www.linkedin.com/in/jessemchong/ Blog : https://medium.com/@jessechong https://jesse-chong.netlify.app/ Joined on Sep 26, 2024 Education Pursuit Bootcamp Work Ubereats Delivery Driver More info about @jesse_chong_3bcc276c4f950 Badges * Skills/Languages Javascript, html, css, postgres, React Currently learning Swift, python, c++ Currently hacking on https://jesse-chong.netlify.app/ Available for Available for any discussions or collaborations! 3 posts *owed 📝 *! * Nov 4 📝 *, * Add Comment 2 min read * * Oct 25 * #webdev #node #api #netlify Add Comment 3 min read Cross-Posting Project Update: Automating Posts Across Medium, LinkedIn, and DEV.to * Oct 10 Cross-Posting Project Update: Automating Posts Across Medium, LinkedIn, and DEV.to * Diamond Sponsor Neon * ",
    "url": "https://dev.to/jesse_chong_3bcc276c4f950"
  },
  {
    "body": "* 0 *ead 0 * 1 * Jesse Chong Posted on Nov 4 📝 *, * 🪞 Reflecting on Last Week’s Progress: When cross-posting from Medium to LinkedIn and DEV.to, I noticed several formatting issues: bold and italic text, as well as ordered and unordered lists, were not displaying correctly. Tags were also not posting accurately, and the URL linking back to the original article didn’t work as expected. After some adjustments, formatting is now accurate, and tags are correctly formatted for each platform. 📈 Project Update Overview: DEV.to uses Markdown syntax, while LinkedIn does not. LinkedIn also has a 1300-character limit and lacks consistent support for bold and italic formatting. I developed a helper function that formats posts for LinkedIn and DEV.to, adjusting based on the platform input. 🗝️ Key Updates: Regex Improvements: Posts are now formatted correctly for LinkedIn and DEV.to. Tag Extraction from HTML: Tags are properly formatted for each platform. Canonical URL Cleanup: Query parameters are removed, so the original article URL now works correctly. 🫨 Challenges & Solutions 💡 Challenge 1: Bold, italics, and lists weren’t properly formatted for DEV.to and LinkedIn. Solution: LinkedIn doesn’t support bold, italics, or bullet points, so these were replaced with plain text, with numbers used for bullet points. After converting HTML to Markdown, ensured proper formatting (e.g., italics, bold). Challenge 2: Tags from Medium weren’t cross-posting correctly. DEV.to limits tags to four, requiring lowercase alphanumeric tags in an array format. LinkedIn allows hashtags to be embedded, but they must be camelCase (no spaces or dashes) and limited to 1300 characters. Solution: Adjust tags to meet each platform’s requirements. For DEV.to: Remove non-alphanumeric characters, convert tags to lowercase, and limit to four tags. For LinkedIn: Remove any prefix hashtags, convert spaces or dashes to camelCase, and re-add the #. Kept content within 1200 characters to allow room for title, URL, and tags. Challenge 3: Medium’s RSS feed sometimes includes unnecessary query parameters in URLs. Solution: Extract the clean URL for cross-posting. 🌟 Reflection: Working with regex has been fascinating; it’s powerful and versatile for various use cases. I’ve used it before in my Fresh Start project for translating directions, which showed me how effective it can be. That said, regex has limitations, so it’s essential to use it cautiously, depending on your needs. 🔗 Check Out the Repo: https://github.com/Jesse-Chong/Cross-post-server Thank you for reading! I’d love to hear your thoughts. 👋 * big *, it's free, and * Community matters * * Trending in Nod* in JavaScript, *sia, and learning from GitHub repositories for best practices. * Kong Admin API for PHP: A Framework-Agnostic Client for Seamless Kong Gateway Management Nasrul Hazim Bin Mohamad - Nov 5 Find your Location With Javascript Sadiq Shah - Nov 5 Optimizing Google Search via API: A Guide to Using Serper explinks - Nov 4 The Horrors of AI (Halloween Edition 🎃) Kevin Moe Myint Myat 👨‍💻 - Oct 31 Jesse Chong Follow Full-Stack Software Engineer Linkedin : https://www.linkedin.com/in/jessemchong/ Blog : https://medium.com/@jessechong Location https://jesse-chong.netlify.app/ Education Pursuit Bootcamp Work Ubereats Delivery Driver Joined Sep 26, 2024 More from Jesse Chong * #webdev #node #api #netlify 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/jesse_chong_3bcc276c4f950/cross-post-project-update-regex-bug-fixes-and-more-regex-nj6"
  },
  {
    "body": "* 0 *ead 0 * 0 * Jesse Chong Posted on Oct 25 • Originally published at Medium * #webdev #node #api #netlify 🌟 Excited to Share My Recent Work! Though I’ve been a bit inactive lately due to personal reasons, I want to take a moment to showcase some recent updates I made to my portfolio website a few weeks ago. In particular, I focused on tackling the lag times for API calls, which were exceeding 30 seconds, and enhancing my site by adding a demo video to better showcase my app. I’m excited to share the lessons I learned and the solutions I implemented to improve performance and security, all while using some fantastic tools like Netlify! 🔍 Project Update Overview: I discovered that Netlify Functions is a serverless function feature offered by Netlify that hosts your API calls, significantly reducing my response time by 97.5%. The Netlify CLI was also incredibly helpful in allowing me to test my code within Netlify’s configuration before committing and pushing changes to my repository. 🛠️ New Technologies Added: **- Netlify Functions Netlify CLI** 🗝️ Key Updates: Lag-free API calls: By utilizing Netlify Functions, I was able to reduce API response times to nearly zero — and it’s free, as long as the API calls aren’t made too frequently. Portfolio App Demo Video: I also added a video demo to showcase my app in action, making the portfolio much more interactive and engaging. 💡 Challenges & Solutions: Challenge 1: Implementing Netlify Functions Correctly Since I wasn’t familiar with Yarn’s environment, integrating it with Netlify was a bit tricky. Solution: I deleted the _redirects file and moved its contents to netlify.toml. I also added command = “yarn build” and publish = “build” to the configuration, as I’m using Yarn. Challenge 2: Adding a Video to My Portfolio Adding a video to my portfolio website seemed straightforward but caused issues due to a common security risk: using target=”_blank” without the rel=”noreferrer” attribute. **Solution: **To mitigate the security risk: I added the rel=”noopener noreferrer” attribute to my anchor tags (<a>). This ensures protection against reverse tabnabbing attacks and enhances privacy by preventing browsers from sending the HTTP referrer header. 🛠️ Security Best Practices: rel=”noopener”: Protects against reverse tabnabbing and runs the new page in a separate process. rel=”noreferrer”: Hides the referrer header for privacy and security purposes. 🚀 What I Learned: Always explore all the features and tools a product or service offers (whether it’s APIs or cloud hosting) to ensure they meet your project’s needs. If a product offers a testing environment and a CLI tool, it’s often worth learning — these can significantly speed up development. It’s critical to stay informed on best practices for security to protect against common vulnerabilities and attacks. 🌟 Reflection: When working with new technology, take the time to experiment with features you think you might need now or in the future. It’ll make development smoother and help future-proof your projects. 🔗 Check Out the Repo portfolio website: https://github.com/Jesse-Chong/react-tailwindcss-portfolio-website 🔗 Check Out the Repo for cross post: https://github.com/Jesse-Chong/Cross-post-server Thank you for reading! I’d love to hear your thoughts. Originally published at Medium 👋 Before you go * Give your career some juice. *orth it * (0) * * * memory management for large-scale apps, exploring new * learning best practices from GitHub repositories. * This Month in Solid #9: SolidHack started, new fellow and API change 😎 Daniel Afonso - Nov 5 Creating Theme Systems in React with SCSS and Redux M1dnightGMR - Nov 6 Creating blurred or virtual backgrounds in real-time video in React apps T Sudhish Nair - Nov 5 Kickstart Your Web Development Journey with Django: A Complete Guide SnapNews - Nov 5 Jesse Chong Follow Full-Stack Software Engineer Linkedin : https://www.linkedin.com/in/jessemchong/ Blog : https://medium.com/@jessechong Location https://jesse-chong.netlify.app/ Education Pursuit Bootcamp Work Ubereats Delivery Driver Joined Sep 26, 2024 More from Jesse Chong 📝 *, * 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/jesse_chong_3bcc276c4f950/cross-posting-and-portfolio-project-update-optimizing-api-calls-and-implementing-best-practices-23mb"
  },
  {
    "body": "* Follow Report Abuse Joan Roucoux Senior Full Stack Developer based in Paris. Skills: React.js • Redux.js • Java • Node.js • AWS • Scrum/SAFe Paris, France Joined on Nov 11, 2022 https://github.com/JoanRoucoux/ Education Cesi Work Full Stack Developer @SociétéGénérale More info about @joanroucoux Badges * One * one year. Got it 4 posts published 2 * * 2/2) Joan Roucoux Joan *L Shortener with Node.js (Part 2/2) #react #rtkquery #materialui Add Comment 9 min read Want to connect with Joan Roucoux? * Joan Roucoux. * * 1/* Update README with Latest Articles Using GitHub Actions and Deno 2 * Sep 15 Update README with Latest Articles Using GitHub Actions and Deno 2 #github #githubactions #deno #tutorial 6 * Building a Marvel Search Application with Qwik * Jul 22 Building a Marvel Search Application with Qwik #qwik #marvel #tailwindcss #* 11 *onsor Neon * ",
    "url": "https://dev.to/joanroucoux"
  },
  {
    "body": "* 0 *ead 0 * 0 * Joan Roucoux Posted on *t* Introduction I'm sure you're familiar with URL shortener tools like TinyURL and Bitly, as they are widely used online. It simply takes a long URL and creates a shorter, unique alias that redirects to the original link. For example, a URL like https://www.example.com/movies/avengers-infinity-war/casting/chris-hemsworth could be shortened to something like https://short.url/abc123, making it much easier to read and share. And then, when the user accesses the shortened link, the browser requests the server, which looks up the alias in its database and redirects the user to the original URL. This might look simple when you first think about it, but it's actually tricky to build which is why they are commonly used in system design interviews. So creating one yourself is a great way to practice and see the challenges involved (handling high traffic, concurrency and race conditions in key generation, data storage and scaling...). In the first part of this tutorial, we will focus on developing the backend of our URL shortener application using the following stack: Node.js: A JavaScript runtime to power the server instances. MongoDB: A NoSQL database for storing original URLs. Redis: In-memory data store for caching frequently accessed URLs. Apache ZooKeeper: A centralized service to generate unique IDs and prevent race conditions between instances. Nginx: A load balancer and reverse proxy to distribute traffic across server instances. Docker: A containerization tool to manage all the services. Here's the high-level architecture of the application: So let's jump into it 🚀 Initializing the Project First, let's see what our file tree will look like: url-shortener-demo-app ├─ .env ├─ docker-compose.yml ├─ client - Part 2 of this tutorial ├─ nginx │ ├─ Dockerfile │ └─ nginx.conf └─ server ├─ src │ ├─ config │ │ ├─ mongoose.ts │ │ ├─ redis.ts │ │ └─ zookeeper.ts │ ├─ controllers │ │ └─ urlsController.ts │ ├─ models │ │ └─ Url.ts │ ├─ repositories │ │ └─ urlsRepository.ts │ ├─ routes │ │ └─ urlsRoutes.ts │ ├─ services │ │ └─ urlsService.ts │ ├─ utils │ │ └─ index.ts │ └─ index.ts ├─ .dockerignore ├─ Dockerfile ├─ package-lock.json ├─ package.json └─ tsconfig.json Our project app url-shortener-demo-app will include a client folder for the React app that we will build in the second part of this tutorial, a nginx folder for Nginx configuration and a server folder for managing URL-related operations. It's a good thing to separate concepts like routers, controllers and services to enhance code organization and improve maintainability. We will first start with the server code. Create a new directory for the project and initialize a new application: mkdir url-shortener-demo-app cd url-shortener-demo-app mkdir server cd server npm init -y Then, install all the required dependencies: npm install fastify @fastify/cors mongoose ioredis zookeeper npm install --save-dev typescript @types/node ts-node The packages you installed above include: fastify: A simple web framework for handling routes and middleware. @fastify/cors: Middleware for enabling Cross-Origin Resource Sharing (CORS). zookeeper: A client for interacting with Apache ZooKeeper. mongoose: An Object Data Modeling (ODM) library for MongoDB. ioredis: A client for interacting with Redis. And some devDependencies for Typescript support. Next, open the package.json file and a in the scripts section a new script to run the application: ... \"scripts\": { \"start\": \"ts-node src/index.ts\" }, ... And finally, create a tsconfig.json file for Typescript configuration by running: tsc --init Great, we can now move on and add the configuration files for MongoDB, Redis and ZooKeeper. Setting Up MongoDB Using mongoose in our application makes it easier to create and manage data within MongoDB, providing a more convenient and structured approach. In src/config/mongoose.ts, add the following code to configure our MongoDB connection: import { connect } from 'mongoose'; const { MONGODB_USER, MONGODB_PASSWORD, MONGODB_DATABASE, MONGODB_HOST, MONGODB_DOCKER_PORT, } = process.env; const MONGO_URI = `mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_DOCKER_PORT}/${MONGODB_DATABASE}?authSource=admin`; // Connect to MongoDB export const connectToMongoDB = async (): Promise<void> => { try { await connect(MONGO_URI); console.log('Successfully connected to MongoDB'); } ca*or connecting to MongoDB:', error); throw error; } }; We're loading some environment variables from the .env file in the root directory, so be sure to create it and add the following keys: MONGODB_USER=user MONGODB_PASSWORD=pass MONGODB_DATABASE=urls MONGODB_HOST=mongo MONGODB_LOCAL_PORT=27017 MONGODB_DOCKER_PORT=27017 Then, create the URL data model, which will define the structure of our documents in the database. This model will include the following attributes: originalUrl: The original URL that users want to shorten. shortenUrlKey: A unique identifier generated for the shortened URL. createdAt: A timestamp indicating when the URL was created. expiresAt: A timestamp indicating when the shortened URL will expire. In src/models/Url.ts, add the following code: import { Document, Schema, model } from 'mongoose'; export interface IUrl extends Document { originalUrl: string; shortenUrlKey: string; createdAt: Date; expiresAt: Date; } const schema = new Schema<IUrl>({ originalUrl: { type: String, required: true, unique: true, }, shortenUrlKey: { type: String, required: true, unique: true, }, createdAt: { type: Date, default: new Date(), }, expiresAt: { type: Date, default: new Date(new Date().setMinutes(new Date().getMinutes() + 10)), // default is 10 minutes, for demonstration only }, }); export default model<IUrl>('url', schema); Setting Up Redis In the same way that we use mongoose to interact with our MongoDB database, we will use ioredis client to interact with Redis and manage frequently accessed URLs by leveraging caching mechanisms for faster retrieval. We will override some of the initial Redis methods to: Add a new entry in Redis cache with set(). Retrieve a Redis cache entry with get(). Extend TTL of an existing entry with extendTTL(). In src/config/redis.ts, add the following code: import { Redis } from 'ioredis'; const { REDIS_HOST, REDIS_DOCKER_PORT } = process.env; export enum RedisExpirationMode { EX = 'EX', // Expire in seconds } let client: Redis | null; // Get Redis client const getRedisClient = (): Redis => { if (!client) { const config = { host: REDIS_HOST, port: Number(REDIS_DOCKER_PORT), maxRetriesPerRequest: null, }; client = new Redis(config); } return client; }; // Connect to Redis export const connectToRedis = async (): Promise<void> => { const client = getRedisClient(); client .on('connect', () => { console.log('Successfully connected to Redis'); }) .on('error', (error) => { console.error('Error on Redis:', error.message); }); }; // Set a key/value pair export const set = async ( key: string, value: string, expirationMode: RedisExpirationMode, seconds: number ): Promise<void> => { try { await getRedisClient().set(key, value, expirationMode, seconds); console.info(`Key ${key} created in Redis cache`); } catch (error) { console.error(`Failed to create key in Redis cache: ${error}`); } }; // Get a value from a key export const get = async (key: string): Promise<string | null> => { try { const value = await getRedisClient().get(key); console.info(`Value with key ${key} retrieved from Redis cache`); return value; } catch (error) { console.error( `Failed to retrieve value with key ${key} in Redis cache: ${error}` ); return null; } }; // Extend TTL of a key export const extendTTL = async ( key: string, additionalTimeInSeconds: number ) => { // Get the current TTL of the key const currentTTL = await getRedisClient().ttl(key); if (currentTTL > 0) { // Calculate the new TTL const newTTL = currentTTL + additionalTimeInSeconds; // Set the new TTL await getRedisClient().expire(key, newTTL); console.info(`TTL for key ${key} extended to ${newTTL} in Redis cache`); } else { console.error(`Failed to extend TTL of key ${key} in Redis cache`); } }; Finally, add the following keys to the .env file to configure Redis service: REDIS_HOST=redis REDIS_LOCAL_PORT=6379 REDIS_DOCKER_PORT=6379 Setting Up ZooKeeper Apache ZooKeeper will help us avoid race conditions by making sure that only one node generates a token at a time, maintaining data integrity. One approach could be to assign each server registered to the ZooKeeper service a specific token range and generate a token within that range. However, I chose a simpler solution: checking if a token already exists under the /tokens path. If the token is not found, it will attempt to generate a new token repeatedly until it finds one that is available. For instance, if /tokens/existingToken already exists, it will try again and register /tokens/newToken if available. In our example, we will use a token that is 6 characters long, which gives us around 69 billion possibilities (64^6). This should provide a comfortable buffer before we encounter any collisions in our demo app. First, add a method to generate a base64 token in src/utils/index.ts: import { randomBytes } from 'crypto'; export const generateBase64Token = (length: number): string => { const buffer = randomBytes(Math.ceil((length * 3) / 4)); // Generate enough random bytes return buffer .toString('base64') // Convert to Base64 .replace(/\\+/g, '-') // URL-safe: replace + with - .replace(/\\//g, '_') // URL-safe: replace / with _ .replace(/=+$/, '') // Remove padding .slice(0, length); // Ensure fixed length }; Next, in src/config/zookeeper.ts, add the following code to: Connect the client to ZooKeeper. Create the /tokens node if it doesn't exist. Generate the unique token using the generateBase64Token() method we just created. import ZooKeeper from 'zookeeper'; import { generateBase64Token } from '../utils'; const { ZOOKEEPER_HOST, ZOOKEEPER_DOCKER_PORT } = process.env; const host = `${ZOOKEEPER_HOST}:${ZOOKEEPER_DOCKER_PORT}`; let client: ZooKeeper | null; const TOKENS_NODE_PATH = '/tokens'; const MAX_RETRIES = 3; const MAX_TOKEN_SIZE = 6; // Get ZooKeeper client const getZookeeperClient = (): ZooKeeper => { if (!client) { const config = { connect: host, timeout: 5000, debug_level: ZooKeeper.constants.ZOO_LOG_LEVEL_WARN, host_order_deterministic: false, }; client = new ZooKeeper(config); } return client; }; // Connect to ZooKeeper export const connectToZookeeper = async (): Promise<void> => { const client = getZookeeperClient(); await new Promise<void>((resolve, reject) => { client.connect(client.config, async (error) => { if (error) { console.error('Error connecting to ZooKeeper:', error); reject(); } console.log('Successfully connected to ZooKeeper'); await createTokensNode(); resolve(); }); }); }; // Create '/tokens' node if it doesn't exist const createTokensNode = async (): Promise<void> => { const client = getZookeeperClient(); const doesTokensNodeExist = await client.pathExists(TOKENS_NODE_PATH, false); // If it does, do nothing if (doesTokensNodeExist) { console.info(`Tokens node ${TOKENS_NODE_PATH} already exists`); return; } // If it doesn't exist, create the root path await new Promise<void>((resolve, reject) => { client.mkdirp(TOKENS_NODE_PATH, (error) => { if (error) { console.error(`Failed to create tokens node: ${error}`); reject(); } console.info(`Tokens node ${TOKENS_NODE_PATH} created`); resolve(); }); }); }; // Create a node const createNode = async (path: string, data: Buffer): Promise<void> => { try { await getZookeeperClient().create( path, data, ZooKeeper.constants.ZOO_EPHEMERAL ); console.info(`Node ${path} created`); } catch (error) { console.error(`Failed to create node: ${error}`); throw error; } }; // Generate a unique token with retries for collision detection export const generateUniqueToken = async (retryCount = 0): Promise<string> => { const client = getZookeeperClient(); const token = generateBase64Token(MAX_TOKEN_SIZE); const uniqueTokenPath = `${TOKENS_NODE_PATH}/${token}`; // Create a child node with the generated token try { // Check if the unique token node already exists const doesUniqueTokenNodeExist = await client.pathExists( uniqueTokenPath, false ); // If it does, retry if (doesUniqueTokenNodeExist) { if (retryCount < MAX_RETRIES) { console.log( `Token collision detected for path: ${uniqueTokenPath}. Retrying... Attempt ${ retryCount + 1 } of ${MAX_RETRIES}` ); return await generateUniqueToken(retryCount + 1); } else { throw new Error( `Failed to generate a unique token after ${MAX_RETRIES} attempts due to collisions.` ); } } // If it doesn't exist, create the node await createNode(uniqueTokenPath, Buffer.from(token)); return token; // Return the unique token on success } catch (error) { console.error(`Error generating the unique token node: ${error}`); throw error; } }; And finally, add the following keys to the .env file to configure the service: ZOOKEEPER_HOST=zookeeper ZOOKEEPER_LOCAL_PORT=2181 ZOOKEEPER_DOCKER_PORT=2181 Great, we have all of our configuration files now ready! We can move on and start implementing the actual URL logic. Implementing the URL Shortening Logic In this section, we will walk through the process of implementing the logic needed to shorten a URL and manage the redirection when users access the shortened link. Implementing URL repository The URL repository will handle all database operations for managing shortened URLs: Add a new URL to the database with create(). Retrieve all saved URLs with findAll(). Fetch a specific URL based on given parameters with findOne(). Add the following code in src/repositories/urlRepository.ts: import Url, { IUrl } from '../models/Url'; interface ICreateParams { shortenUrlKey: string; originalUrl: string; } interface IFindOneParams { shortenUrlKey?: string; originalUrl?: string; } // Create a shortened URL const create = async (params: ICreateParams): Promise<IUrl> => { console.log(`Creating URL with params: ${JSON.stringify(params)}`); const result: IUrl = await Url.create({ ...params }); console.log(`Created URL: ${JSON.stringify(result)}`); return result; }; // Find all URLs const findAll = async (): Promise<IUrl[]> => { console.log('Finding all URLs'); const result: IUrl[] = await Url.find(); console.log(`Found URLs: ${result?.length || 0}`); return result; }; // Find a specific URL const findOne = async (params: IFindOneParams): Promise<IUrl | null> => { console.log(`Finding one URL with params: ${JSON.stringify(params)}`); const result: IUrl | null = await Url.findOne({ ...params }); console.log(`Found URL: ${JSON.stringify(result)}`); return result; }; export { create, findAll, findOne }; Implementing URL validation Before shortening a URL, it's essential to verify that the input provided by the user is valid. We will use a simple Regex found online for it (you can find plenty of other patterns as well depending on your needs). Add the following method to src/utils/index.ts: ... export const isValidUrl = (value: string): boolean => { const pattern: RegExp = new RegExp( '^https?:\\\\/\\\\/' + // Protocol (http or https) '(?:www\\\\.)?' + // Optional www. '[-a-zA-Z0-9@:%._\\\\+~#=]{1,256}' + // Domain name characters '\\\\.[a-zA-Z0-9()]{1,6}\\\\b' + // Top-level domain '(?:[-a-zA-Z0-9()@:%_\\\\+.~#?&\\\\/=]*)$', // Optional query string 'i' // Case-insensitive flag ); return pattern.test(value); }; Implementing Service Logic The service layer is responsible for orchestrating the business logic of the URL shortener application, acting as an intermediary between the controller and the repository we just created. As mentioned in the Redis section, we will leverage Redis for caching frequently accessed URLs to improve performance by reducing database queries. In src/services/urlService.ts, add the following code: import { generateUniqueToken } from '../config/zookeeper'; import { get, set, extendTTL, RedisExpirationMode } from '../config/redis'; import { IUrl } from '../models/Url'; import { isValidUrl } from '../utils'; import { create, findAll, findOne } from '../repositories/urlsRepository'; const ONE_MINUTE_IN_SECONDS = 60; // Get all shortened URLs export const getAllUrls = async (): Promise<IUrl[]> => await findAll(); // Get a specific shortened URL by its key export const getUrlByShortenUrlKey = async ( shortenUrlKey: string ): Promise<string | null> => { // Try to get the original URL from Redis cache const cachedOriginalUrl = await get(shortenUrlKey); if (cachedOriginalUrl) { // Extend TTL await extendTTL(shortenUrlKey, ONE_MINUTE_IN_SECONDS); return cachedOriginalUrl; // Return the cached original URL } // If not in cache, retrieve from database const savedUrl = await findOne({ shortenUrlKey }); if (savedUrl) { // Cache the original URL created by its shorten URL key await set( savedUrl.shortenUrlKey, savedUrl.originalUrl, RedisExpirationMode.EX, ONE_MINUTE_IN_SECONDS ); return savedUrl.originalUrl; // Return the saved original URL } return null; // Return null if nothing found }; // Create a new shortened URL export const createShortenedUrl = async ( originalUrl: string ): Promise<string | null> => { // Check if URL is valid if (!isValidUrl(originalUrl)) { return null; } // Retrieve from database const savedUrl = await findOne({ originalUrl }); if (savedUrl) { return savedUrl.shortenUrlKey; // Return the saved shortened URL key } // If not in database, generate a new shortened URL key and save it const shortenUrlKey = await generateUniqueToken(); if (shortenUrlKey) { const newUrl = await create({ originalUrl, shortenUrlKey, }); // Cache the original URL created by its shorten URL key await set( newUrl.shortenUrlKey, newUrl.originalUrl, RedisExpirationMode.EX, ONE_MINUTE_IN_SECONDS ); return newUrl.shortenUrlKey; // Return shortened URL key } return null; // Return null if token generation failed }; Implementing Controller Logic Next, let's implement the URL controller methods to manage the HTTP status codes and return appropriate messages for our operations. As you might have seen, I chose to return a 200 status code along with the original URL (and not a 301 redirect) in the getUrl() method to prevent any CORS issues between the client and the requested URLs later on. In src/controllers/urlController.ts, add the following code: import { FastifyReply, FastifyRequest } from 'fastify'; import { createShortenedUrl, getAllUrls, getUrlByShortenUrlKey, } from '../services/urlsService'; // Get all shortened URLs export const getUrls = async ( _request: FastifyRequest, reply: FastifyReply ): Promise<void> => { try { const urls = await getAllUrls(); return reply.code(200).send(urls); } catch (error) { return reply .code(500) .send('Failed to retrieve the list of URLs. Please try again later'); } }; // Get a specific URL by its key export const getUrl = async ( request: FastifyRequest<{ Params: { shortenUrlKey: string; }; }>, reply: FastifyReply ): Promise<void> => { try { const { shortenUrlKey } = request.params; const originalUrl = await getUrlByShortenUrlKey(shortenUrlKey); if (!originalUrl) { return reply .code(404) .send('The requested shortened URL could not be found'); } return reply.code(200).send(originalUrl); } catch (error) { return reply.code(500).send('Unable to retrieve the specified URL'); } }; // Create a new shortened URL export const postUrl = async ( request: FastifyRequest<{ Body: { originalUrl: string; }; }>, reply: FastifyReply ): Promise<void> => { try { const { originalUrl } = request.body; const shortenUrlKey = await createShortenedUrl(originalUrl); if (!shortenUrlKey) { return reply.code(400).send('The provided URL is invalid'); } return reply.code(201).send(shortenUrlKey); } catch (error) { return reply.code(500).send('Failed to create a shortened URL'); } }; Implementing Routing Logic Now, let's register the routes under the /urls prefix. In src/routes/urls.ts, add the following code: import { FastifyInstance } from 'fastify'; import { postUrl, getUrls, getUrl } from '../controllers/urlsController'; export const urlsRoutes = async (fastify: FastifyInstance) => { fastify.register( async (router: FastifyInstance) => { // Get all shortened URLs router.get('/', getUrls); // Get a specific URL by its key router.get('/:shortenUrlKey', getUrl); // Create a new shortened URL router.post('/', postUrl); }, { prefix: '/urls' } ); }; Setting Up The Server And finally, let's create a src/index.ts to set up the Fastify server and: Configure CORS. Register the URL router under the /api prefix. Connect MongoDB, Redis, and ZooKeeper. Start the server. import Fastify, { FastifyInstance } from 'fastify'; import fastifyCors from '@fastify/cors'; import { connectToMongoDB } from './config/mongoose'; import { connectToRedis } from './config/redis'; import { connectToZookeeper } from './config/zookeeper'; import { urlsRoutes } from './routes/urlsRoutes'; // Fastify server instance const fastify = Fastify(); // Configure server fastify .register(fastifyCors) // Register CORS .register( async (fastify: FastifyInstance) => { fastify.register(urlsRoutes); // Register URL routes }, { prefix: '/api' } ); // Start the server const start = async () => { try { // Connect to MongoDB, Redis and ZooKeeper await connectToMongoDB(); await connectToRedis(); await connectToZookeeper(); // Start Fastify server await fastify.listen({ port: Number(process.env.NODE_SERVER_LOCAL_PORT), host: process.env.NODE_SERVER_HOST, }); console.log('Server is now listening'); } catch (error) { console.error('Failed to start server:', error); process.exit(1); } }; start(); Don't forget to add the following keys to the .env file: NODE_SERVER_HOST=0.0.0.0 NODE_SERVER_LOCAL_PORT=3000 Awesome, our server is now ready! We can move on and configure Nginx. Setting Up Nginx As mentioned in the introduction, we will use Nginx as a load balancer and reverse proxy to distribute traffic across server instances and improve response times. We will use the default round-robin algorithm, which is ideal for distributing requests evenly and making our application more resilient. In a nginx/nginx.conf file, add the following configuration: Create an upstream node_servers block to define the group of servers listening on local port 3000. You will see later in the docker-compose setup that we did not define a specific port for each server instance, allowing Docker to dynamically assign ports and manage load balancing. Add a server block which listens on port 80 for incoming requests. Include a location block to forward requests made on the /api/ path to the node_servers group using proxy_pass. And add proxy_set_header directives to ensure that client request details are forwarded to the servers. upstream node_servers { server server:$NODE_SERVER_LOCAL_PORT; } server { listen $NGINX_DOCKER_PORT; # Serve backend location /api/ { proxy_pass http://node_servers/api/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; } } Also add the following keys to the .env file to configure the Nginx service: NGINX_HOST=localhost NGINX_LOCAL_PORT=80 NGINX_DOCKER_PORT=80 Containerization with Docker With everything set up, we will now use Docker to containerize all of our services. Let's first dockerize the server application. Create a Dockerfile in the /server folder that sets up the Node environment, installs dependencies, and starts the app like below: # Use an official Node runtime as the base image FROM node:22.11.0 # Set the working directory WORKDIR /usr/src/server # Copy * to the container COPY package*.json ./ # Install application dependencies RUN npm install # Copy the rest of the application code COPY . . # Run the application CMD [ \"npm\", \"run\", \"start\" ] Also add a .dockerignore file with node_modules inside because some libraries like zookeeper can cause some issues when compiled on different OS. Next, create a Dockerfile in the nginx folder to configure Nginx by using the official Nginx image, copying our custom nginx.conf file to the container, and running the service: # Use an official Nginx as the base image FROM nginx:stable-alpine # Copy nginx.conf to the container COPY nginx.conf /etc/nginx/templates/default.conf.template # Run the server CMD [\"nginx\", \"-g\", \"daemon off;\"] Finally, create a docker-compose.yml file at the root of your project setting up the services (MongoDB, Redis and ZooKeeper), while building the server and Nginx from their respective Dockerfiles: services: mongo: image: mongo:latest environment: - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER} - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD} ports: - ${MONGODB_LOCAL_PORT}:${MONGODB_DOCKER_PORT} volumes: - ./mongodb:/data/db redis: image: redis:latest ports: - ${REDIS_LOCAL_PORT}:${REDIS_DOCKER_PORT} zookeeper: image: zookeeper:latest ports: - ${ZOOKEEPER_LOCAL_PORT}:${ZOOKEEPER_DOCKER_PORT} server: depends_on: - mongo - redis - zookeeper environment: - MONGODB_USER=${MONGODB_USER} - MONGODB_PASSWORD=${MONGODB_PASSWORD} - MONGODB_DATABASE=${MONGODB_DATABASE} - MONGODB_HOST=${MONGODB_HOST} - MONGODB_DOCKER_PORT=${MONGODB_DOCKER_PORT} - REDIS_HOST=${REDIS_HOST} - REDIS_DOCKER_PORT=${REDIS_DOCKER_PORT} - ZOOKEEPER_HOST=${ZOOKEEPER_HOST} - ZOOKEEPER_DOCKER_PORT=${ZOOKEEPER_DOCKER_PORT} - NODE_SERVER_HOST=${NODE_SERVER_HOST} - NODE_SERVER_LOCAL_PORT=${NODE_SERVER_LOCAL_PORT} build: context: ./server dockerfile: Dockerfile volumes: - ./server:/usr/src/server - /usr/src/server/node_modules deploy: mode: replicated replicas: 3 nginx: depends_on: - server environment: - NODE_SERVER_LOCAL_PORT=${NODE_SERVER_LOCAL_PORT} - NGINX_DOCKER_PORT=${NGINX_DOCKER_PORT} build: context: ./nginx dockerfile: Dockerfile ports: - ${NGINX_LOCAL_PORT}:${NGINX_DOCKER_PORT} As you can see, we are passing down all the environment variables defined in the .env file, keeping all configurations centralized in one place, which makes adjustments simple. Testing and Deployment Run docker compose up -d to start all containers in detached mode. Once they're running, you can use cURL or any other tool to test the API routes: Save a new URL (you can also test an incorrect URL format to check if the service returns a 400 status code): curl --location 'http://localhost/api/urls' \\ --header 'Content-Type: application/json' \\ --data '{ \"originalUrl\": \"URL_HERE\" }' Get all URLs: curl --location 'http://localhost/api/urls' Retrieve the original URL: curl --location 'http://localhost/api/urls/SHORTENED_TOKEN_HERE' Or use Postman which is more friendly: You can also check the logs in Docker to monitor the activity across the containers (I'm using Docker Desktop here): Conclusion You have reached the end of the first part of this tutorial! I hope you enjoyed 😄 We learned how to build a scalable URL shortener application from scratch using Node.js, Redis, MongoDB, Apache ZooKeeper, Nginx and Docker. You can find the complete code for this project here. In the second part, we will focus on developing the frontend of our application using React and RTK Query, allowing users to interact with our servers through a minimal UI. And if you're interested in going further, check out my other repository here. In this version, I've added extra features like a visit counter and a purge system to clean all expired URLs, all managed through a task queue service. Heroku *referenc* *enc* Read next Easy Authentication Using Hanko.io Istaprasad Patra - Oct 19 Building RESTful APIs with Node.js and Express: Step-by-Step Tutorial Ashish prajapati - Oct 19 'next build' not showing uploaded file : Next.js Image tushar gajwani - Sep 19 Next.js * akpvt - Oct 19 Joan Roucoux Follow Senior Full Stack Developer based in Paris. Skills: React.js • Redux.js • Java • Node.js • AWS • Scrum/SAFe Location Paris, France Education Cesi Work Full Stack Developer @SociétéGénérale Joined Nov 11, 2022 Trending on DEV Community Consistency is King, and here's why. #softskill* * * 🚀 #we* Heroku *refer* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/joanroucoux/building-a-scalable-url-shortener-with-nodejs-part-12-232i"
  },
  {
    "body": "* Follow Report Abuse Johnnatan Sandoval Cardona 404 bio not found Dosquebradas, Risaralda, Colombia Joined on Sep 2, 2024 Education Universidad Tecnológica de Pereira Work Backend Engineer at Shipwell More info about @johnnatan_sandovalcardon Badges * Skills/Languages Expert in python, django, fastapi, backend, sqlalchemy, twisted. Currently learning I'm learning about database refactorings. I hope to learn rust and go in the near future. Available for Available for programming, algorithms, python, backend, web, rest api. 8 * 5 tags followed Algo más de azúcar para python * * Oct 29 Algo más de azúcar para python #python #typehinting #syntacticsugar Add Comment 1 min read * * * Oct 28 * #node #nvm Add Comment 1 min read La dificultad de las revisiones de código * * Oct 26 La dificultad de las revisiones de código #programación #revisionesdecódigo Add Comment 2 min read El módulo decimal de python * * Sep 25 El módulo decimal de python #python #decimal #finanzas Add Comment 1 min read Conociendo uv * * Sep 23 Conociendo uv #uv #python #poetry #pipenv Add Comment 2 min read Explorando org-babel en emacs * * Sep 15 Explorando org-babel en emacs #emacs #babel #org #programaciónliterata Add Comment 2 min read Consideraciones en los serializadores del DRF * * Sep 5 Consideraciones en los serializadores del DRF #django #djangorestframework #serializadores #design Add Comment 4 min read Descubriendo itertools * * Sep 3 Descubriendo itertools #python #itertools #iteradores * Diamond Sponsor Neon * ",
    "url": "https://dev.to/johnnatan_sandovalcardon"
  },
  {
    "body": "* 0 *ead 0 * 0 * Johnnatan Sandoval Cardona Posted on Oct 28 * #node #nvm Para manejar las diferentes versiones de node uso nvm. Al abrir una nueva terminal, la versión instalada se reinicia, lo que me obliga a ejecutar nvm use <version> continuamente. Para definir una versión por defecto, podemos ejecutar: nvm alias default v18.16.0 De esa forma, toda nueva terminal tendrá por defecto, la versión elegida. Top comments (0) * * Neon Promoted * Postgres on Neon - Get the Free Plan No credit card required. The database you love, on a serverless platform designed to help you build faster. Get Postgres on Neon Read next * Sushant Gaurav - Sep 30 * Костя Третяк - Aug 28 NestJS tip: how to attach decorators to all controllers at once Micael Levi L. C. - Sep 29 🦀 Create a Simple Todo List in Rust (with Response Time Comparison to Node.js) 📝 Hamza Khan - Sep 28 * Location Dosquebradas, Risaralda, Colombia Education Universidad Tecnológica de Pereira Work Backend Engineer at Shipwell Joined Sep 2, * Consistency is King, and here's why. #softskill* * 🚀 #we* Best IDEs for Node.js Development in 2025 #webdev #programming #node #devops Neon **. Try Neon → 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/johnnatan_sandovalcardon/eligiendo-la-version-por-defecto-de-node-con-nvm-39p6"
  },
  {
    "body": "* Follow Report Abuse Juanda Martínez Web developer, gamer, and Lego enthusiast. In other words, a master builder of digital and physical worlds 🌎🌐 Guadalajara, México Joined on May 13, 2020 juanda.martinezn@gmail.com https://juanda.dev Education Software Engineer Pronouns He/Him Four * four years. Got it * 1 We*t 2 comme*op Discussion of the Week Awarded for starting a discussion that was featured in the \"Discussion of the Week\" series. 🙌 Got it #Discuss Awarded for sharing the top weekly post under the #discuss tag. Got it T* years. G* @juandadev GitHub Repositories Ghibli-tracker-client JavaScript • 3 stars pokemonstats An useful tool for pokemon games to check weakness and more info of the national pokedex SCSS Skills/Languages React, Redux, Next.js, GraphQL Currently learning 🟢 Node.js Currently hacking on #30DaysOfCode with Node.js Available for Work remotely :) contractor, full-time, partial 4 posts published 27 comments written 32 tags followed Level Up Your Object Oriented Programming Knowledge with Nintendo Switch 🎮👾 * Juanda Martínez Follow Oct 18 '23 Level Up Your Object Oriented Programming Knowledge with Nintendo Switch 🎮👾 #programming #learning #development #computerscience 20 reactions 5 comments 7 min read Want to connect with Juanda Martínez? * Juanda Martínez. * Should You Lower Your Possibilities When Looking For a Job? * Juanda Martínez Follow Oct 5 '23 Should You Lower Your Possibilities When Looking For a Job? #discuss #career #devjournal #motivation 6 * How I Got Fired From my Dream Job * Juanda Martínez Follow Sep 27 '23 How I Got Fired From my Dream Job #discuss #motivation #career 160 reactions 55 comments 3 min read What makes you stay disciplined? * Juanda Martínez Follow Apr 14 '23 What makes you stay disciplined? #discuss Add Comment 1 *onsor Neon * ",
    "url": "https://dev.to/juandadev"
  },
  {
    "body": "* Follow Report Abuse Karlstens Advancing through all things node.js. When I'm not tinkering with the codes, I've most likely gone for a jog. Sydney, Australia Joined on Jan 14, 2023 https://karlstens.com Work Autodesk Products, Office 365, SharePoint, PowerAutomate, Airtable, iLogic, JavaScript More info about @karlstens Badges One * one year. Got it 1 We*t * Skills/Languages JavaScript, Node.js, Airtable, iLogic Currently learning Vue.js Currently hacking on Google App Engine applications, node.js, Cloud Functions, Airtable, GameMaker Available for Projects including Google Cloud, Node.js, Airtable, Vue3 0 posts published 7 comments written 9 tags followed Want to connect with Karlstens? * Karlstens. * * * ",
    "url": "https://dev.to/karlstens"
  },
  {
    "body": "* Follow Report Abuse Mohammad Jawad (Kasir) Barati A Fullstack dev with love for cutting edge technologies and on his journey to learn and teach. Having a can-do attitude and being industrious gave me the courage to question the status quo. Bremen, Germany Joined on Mar 13, 2021 node.js.developers.kh@gmail.com https://kasir-barati.github.io/ Education Bachelor Pronouns He/Him/His Work Fullstack Engineer * Three * three years. Got it *. **wo * two years. G* @kasir-barati Skills/Languages Python, Typescript/JavaScript, NodeJS, NestJS, NextJS, React, MUI/Tailwindcss, Redux, MongoDB/PostgreSQL, Terraform, Ansible, Docker, and Keycloak/FusionAuth, TDD, CI/CD, Linux, HTML/CSS. Currently learning Python, Advance and intermediate concepts related to web development and bakcend, AWS. Currently hacking on Teaching my brother HTML/CSS and working on a fullstack project called you-say. Available for Wanna develop a real project with: Typescript/JavaScript, NestJS, NextJS, React, MUI/Tailwindcss, MongoDB/PostgreSQL, AWS, and Terraform with automated tests executed with CI/CD pipelines. 19 posts published 53 comments written 17 tags followed Implement reCAPTCHA in htmx + expressjs M*i M* Nov 6 Implement reCAPTCHA in htmx + expressjs #htmx #express #javascript #recaptcha * Want to connect with Mohammad Jawad (Kasir) Barati? * Mohammad Jawad (Kasir) Barati. * How to configure TSC + Webpack + ESM for NodeJS M*i M* Nov 4 How to configure TSC + Webpack + ESM for NodeJS #webpack #typescript #javascript #tooling Add Comment 4 min read Pagination in raw SQL with OFFSET M*i M* Nov 3 Pagination in raw SQL with OFFSET #sql #postgres #programming #database Add Comment 5 min read Declaration Merging in TS M*i M* Nov 2 Declaration Merging in TS #typescript #javascript #learning #node Add Comment 3 min read Convert a ReactJS app from Vite to Nx M*i M* Oct 29 Convert a ReactJS app from Vite to Nx #nx #monorepo #react #refactoring Add Comment 5 min read Discriminated unions in ReactJS M*i M* Oct 18 Discriminated unions in ReactJS #typescript #react Add Comment 2 min read htmx and ExpressJS M*i M* Oct 17 htmx and ExpressJS #htmx #express #node #fullstack Add Comment 5 min read HTML/CSS tutoring sessions M*i M* Oct 14 HTML/CSS tutoring sessions #html #css #learning #webdev Add Comment 1 min read Test Stripe with MockServer M*i M* Sep 2 Test Stripe with MockServer #testing #node #tdd #docker Add Comment 2 min read PATCH vs PUT & idempotency in NestJS M*i M* Aug 16 PATCH vs PUT & idempotency in NestJS #http #restapi #webdev #node Add Comment 4 min read NestJS + class-validator M*i M* Aug 10 NestJS + class-validator #nestjs #node #webdev #classvalidator * 4 most used AWS EC2 instance types M*i M* Aug 9 4 most used AWS EC2 instance types #aws #cloud #cloudcomputing #webdev Add Comment 1 min read S3 storage classes M*i M* Aug 8 S3 storage classes #aws #cloud #cloudcomputing #s3 Add Comment 1 min read Schema + Data migration in Prisma (adding a new mandatory field) M*i M* Aug 7 Schema + Data migration in Prisma (adding a new mandatory field) #prisma #postgres #node #sql Add Comment 2 min read Automate e2e tests in GitHub actions M*i M* Aug 6 Automate e2e tests in GitHub actions #softwaredevelopment #tdd #node #githubactions * PostgreSQL INTERVAL data type or ORM? M*i M* Aug 6 PostgreSQL INTERVAL data type or ORM? #postgres #rdbms #node #prisma * What's testing in software development? M*i M* Aug 2 What's testing in software development? #softwaredevelopment #testing #tdd #bdd Add Comment 3 min read Do not misuse HTTP POST verb M*i M* Aug 2 Do not misuse HTTP POST verb #http #webdev #restapi #* The importance of reading and writing valid HTML M*i M* Jul 20 The importance of reading and writing valid HTML #html #webdev #css #tutorial Add Comment 2 *onsor Neon * ",
    "url": "https://dev.to/kasir-barati"
  },
  {
    "body": "* 0 *ead 0 * 0 * Mohammad Jawad (Kasir) Barati Posted on Nov 2 Declaration Merging in TS #typescript #javascript #learning #node I love Typescript and how much it can improve your code quality, though it can sometimes give you a headache if you have not mastered the basics and do not know what a piece of code does and just \"copy paste\" it from somewhere, and add it to your project that you're working on. Here I just compiled and put together a very engaging and practical use cases of \"declaration merging\" in TS. Follow me for more and if you need a Typescript fan who know how TS works. Here is a link to official doc where I used it as a ref to build this work of art: https://www.typescriptlang.org/docs/handbook/declaration-merging.html So to being with we know that: In TS we can define the shape of a JS object at the type level. Compiler merges two (or more than two) separate declarations declared with the same name into one. Three groups of declaration entities: Namespace. Type. Value. We can have a table to show who falls into which category: Namespace Type Value namespace enum class interface function variable IMPORTANT: Knowing what is created with each declaration will help us to understand what is merged when you perform a declaration merge. So let's look at the most basic example where we add scale to Box interface: interface Box { height: number; width: number; } interface Box { scale: number; } let box: Box = { height: 5, width: 6, scale: 10 }; CAUTION: You most likely also while coding where trying to change type of a property in request object coming from ExpressJS, and then your IDE + TSC was shouting at you that you can NOT do that. In the example above, in second Box we cannot change type of width to something like boolean. If you do so you'll get: Subsequent property declarations must have the same type. Property 'width' must be of type 'number', but here has type 'boolean'.ts(2717) Merging namespace + functions function buildLabel(name: string): string { return buildLabel.prefix + name + buildLabel.suffix; } namespace buildLabel { export let suffix = \"\"; export let prefix = \"Hello, \"; } console.log(buildLabel(\"Sam Smith\")); This is a well known JS practice of creating a function and then extending the function further by adding properties onto the function. Here we did it in a type safe manner. Merging namespace + enum enum Permission { read = 1, write = 2 } namespace Permission { export function hasPermission( userPermissions: number, permission: Permission ): boolean { return (userPermissions & permission) === permission; } export function combine(...perms: Permission[]): number { return perms.reduce((acc, perm) => acc | perm, 0); } } const userPerms = Permission.combine(Permission.read, Permission.write); console.log(Permission.hasPermission(userPerms, Permission.read)); Here we are managing user permissions in an application in a very unix-like way. In this way we are utilizing enum for predefined permissions and namespace to encapsulate utility functions. Very readable and easy to understand. Some tips Mixins: Right now we cannot merge classes with other types, but we can utilize Mixins which are super powerful and I have a great example in my \"nestjs-materials\" GitHub repo. Go there and search for \"PaginationMixin\" to see its usage in practice. kasir-barati / nestjs-materials NestJS tips, tricks, Notes, Things which are not in doc and I used to figure them out and use them nestjs-materials NestJS tips, tricks, Notes, Things which are not in doc and I used to figure them out and use them Microservices Some docs How to debug your code and flaky tests. Designing and versioning RESTful APIs. MockServer and mocking 3rd-party HTTP/S calls. Kafka intro. RabbitMQ intro. View on GitHub Module augmentation: JavaScript modules do not support merging. Patch existing objects by importing and then updating them. This is the same trick we use for example in ExpressJS to define the shape of req.user. See examples for module augmentation in the next slide. Patch process.env: Patch req.user: CAUTION: I usually create a new file called node-env.d.ts or global.d.ts for this. It becomes a module augmentation when we have a top-level import or export statement. You can also find me on: Instagram: https://www.instagram.com/node.js.developers.kh/ Facebook: https://www.facebook.com/kasirbarati X: https://x.com/kasir_barati YouTube: https://www.youtube.com/@kasir-barati GitHub: https://github.com/kasir-barati/ Dev.to: https://dev.to/kasir-barati 👋 Before you go * Your next step Do your career a favor. *orth it * (0) * * Heroku *refer* Read next The Inside Scoop: Helping My Friend Choose Driving Lessons in Beaconsfield Jason Byrne - Oct 31 15 Essential tools and resources for Frontend developers ⚡️ Paul - Nov 7 The Resurgence of Server-Side Rendering in the JavaScript Era Travis Ramos - Oct 30 Java* Shafayet Hossain - Nov 6 M* A Fullstack dev with love for cutting edge technologies and on his journey to learn and teach. Having a can-do attitude and being industrious gave me the courage to question the status quo. Location Bremen, Germany Education Bachelor Pronouns He/Him/His Work Fullstack Engineer Joined Mar 13, 2021 More from Mohammad Jawad (Kasir) Barati Implement reCAPTCHA in htmx + expressjs #htmx #express #javascript #recaptcha How to configure TSC + Webpack + ESM for NodeJS #webpack #typescript #javascript #tooling Discriminated unions in ReactJS #typescript #react Heroku *references R* 👋 *** * ",
    "url": "https://dev.to/kasir-barati/declarationmerging-in-ts-5g5b"
  },
  {
    "body": "* Follow Report Abuse Ken Yip Hello! I’m Ken Yip, a Full Stack Developer with over 7 years of experience. Canada Joined on Jun 19, 2024 https://kenyip.cc More info about @ken2026 Badges * 3 posts *owed Develop a custom *low Nov 10 * #node Add Comment 3 * Deploy a Docker Image to ECS with Auto Scaling Using AWS CDK in Minutes * 3 Deploy a Docker Image to ECS with Auto Scaling Using AWS CDK in Minutes #aws #cdk #devops #docker 6 *n * ",
    "url": "https://dev.to/ken2026"
  },
  {
    "body": "* 0 *ead 0 * 0 * Ken Yip Posted on Nov 4 * #cdk #typescript #node #opensource Introduction Recently, I undertook a significant refactor of an example program I previously built by implementing the repository design pattern. I also transitioned from using AWS SAM to AWS CDK for managing infrastructure and deployment. You can find the source code for the application here and the infrastructure code here. In this article, I will highlight the technologies and design patterns I adopted in this repository, sharing insights into the structure and techniques that contribute to a robust and scalable application. Project Structure The project employs a monorepository pattern using Turborepo, which allows for efficient management of multiple services and shared resources. Within this structure, the services are organized in the apps folder, while shared components and libraries reside in the packages folder. This organization enables the apps to depend on the packages, and for the packages to depend on one another as needed. Turborepo facilitates dependency management and utilizes caching mechanisms, significantly speeding up development by avoiding redundant tasks when underlying resources have not changed. The core business logic is located in the core folder under packages. In this package, I implemented the repository design pattern, dividing the program into four distinct layers: Database, Repository, Service, and Provider. Database Layer: This layer manages data exchange between the database and the application, handling CRUD operations and database-specific logic. Repository Layer: The repository layer acts as an intermediary, transforming inputs and outputs, implementing caching mechanisms, and ensuring that the application logic does not need to be tightly coupled with the database. Service Layer: Here, the core business logic resides. This layer consists of multiple service classes that act as facades, receiving necessary dependencies and delegating tasks to the appropriate handlers located in the implementations folder. Provider Layer: This layer handles interactions with third-party services, encapsulating their functionality and providing a clean interface for the rest of the application. This architecture emphasizes the separation of concerns, where each layer is dependent on the others, but changes in one layer do not impact the others. For example, if we decide to switch our database from RDS to MongoDB, only the database layer would require modifications. By adhering to the principles of dependency injection, we can easily mock each layer during testing, enabling us to verify the functionality of other services in isolation. In fact, I have mocked all API requests and responses within the provider layer, which will be discussed further in the testing section. In the apps folder, we establish the entry points for our services. This is where we extract request payloads from various endpoints, validate them, and process them using the core package as needed. The architecture is designed to ensure that even if we change the source of the payload (for instance, switching from SQS to RabbitMQ), we only need to modify the application layer, leaving the package layer untouched. API Deployment This project is designed as a fully serverless application, with API endpoints deployed within AWS Lambda functions. To facilitate this, we utilized the @vendia/serverless-express plugin, which allows us to convert our Express application into a Lambda function seamlessly. Additionally, we integrated AWS API Gateway to handle incoming HTTP requests, providing a robust interface for our APIs. Since we are using Cloudflare as our CDN provider, I configured the API Gateway as a regional resource. This setup allows us to create a CNAME record in Cloudflare that points to the API Gateway endpoint, ensuring efficient routing and caching of requests. One of the significant advantages of this architecture is the flexibility it offers. We can easily switch from a serverless deployment to a containerized solution if needed. The Dockerfile for this purpose is located in the apps/local folder. If you're interested in deploying the Docker container to AWS ECS with a load balancer and auto-scaling capabilities, you can refer to this repository for a comprehensive guide on the process. https://github.com/kenyipp/nextjs-cdk-example By adopting this serverless architecture, we benefit from scalability, reduced operational overhead, and efficient resource management, allowing us to focus on developing features and improving the application. Infrastructure Management The infrastructure for this project is fully managed using AWS CDK, and I have created a dedicated repository specifically for managing it. This repository includes all necessary resources such as IAM roles, SQS queues, and CodePipeline configurations that support the application. To streamline the deployment process, this setup includes two CI/CD pipelines: Infrastructure CI/CD Pipeline: This pipeline is triggered by GitHub Actions and handles the deployment of the entire infrastructure stack. If the pipeline code is well-structured (e.g., with no circular dependencies between stacks) and has been thoroughly tested in lower environments, it can deploy to production seamlessly without requiring manual adjustments on local. This pipeline updates the infrastructure components, ensuring consistency across all environments. Lambda Deployment CI/CD Pipeline: This pipeline manages the deployment of the application code. It pulls the latest code from the application repository, builds the application, and uploads the resulting package to the Lambda function. This deployment pipeline is also triggered by GitHub Actions, allowing for a smooth and automated code deployment process. Both CodePipeline processes are manually triggered through GitHub Actions. Each pipeline runs quality checks and test cases in GitHub Actions before triggering the corresponding AWS CodePipeline deployment for infrastructure or application code. This approach ensures that only tested and verified changes make it to production, providing a robust and automated deployment pipeline for the entire application stack. Testing Strategies This repository employs a comprehensive testing strategy, including unit tests, integration tests, and end-to-end tests, to ensure stability and reliability across all layers of the application. Unit Tests: Unit tests are written for functions and core modules, targeting the smallest components in the application. By mocking dependencies within each layer - such as database, repository, and service layers - we can effectively test both happy paths and edge cases. This isolation allows us to focus on individual functions and modules, ensuring each component works as expected without dependencies interfering. Integration Tests: Integration tests focus on validating the APIs in the apps layer. Using supertest in conjunction with an in-memory SQLite database, we test each API endpoint in a realistic environment. This approach enables us to verify that modules interact correctly and that data flows as expected from one layer to another. End-to-End Tests: For end-to-end testing, we set up a real MySQL database in GitHub Actions and launch the server to simulate actual deployment conditions. We use Newman (a tool for running Postman collections) to test the full user experience, from API requests to final responses. This allows us to validate that the application behaves as intended from a user's perspective. Testing is a crucial part of our development workflow, supporting rapid iteration and refactoring. Well-written test cases allow us to confidently add features or make modifications without the risk of breaking other parts of the system. Good test coverage also provides a foundation for future refactoring, ensuring that as long as tests pass, the refactored code performs correctly. In many cases, tight timelines may require us to prioritize feature rollouts, which can lead to sacrifices in code quality. However, I prioritize writing robust test cases first, as they serve as a safety net for future improvements. This practice enables us to refactor and enhance the codebase with confidence, knowing that as long as tests pass, the quality and functionality of the code remain intact. Conclusion Refactoring this repository has been a valuable learning experience, allowing me to apply new technologies and best practices along the way. I continuously explore and integrate improvements to keep the project up-to-date and efficient. If you find this repository or article helpful, consider giving it a star or clap - your support is appreciated! Thank you. Red Hat Developer Promoted * Learn Kubernetes with Sandbox Create an application using plain Kubernetes instead of OpenShift in the Developer Sandbox. Get started Top comments (0) * * *? Manage p* Read next Functional Programming in TypeScript aelassas - Oct 28 Supercharge Your Symfony App with Smart Device Detection: Meet EprofosUserAgentAnalyzerBundle Eprofos - Nov 2 Building a Perplexity-like Open Source AI Search with SWIRL Saurabh Rai - Oct 24 Top 8 OpenSource Tools for AI Startups Med Marrouchi - Oct 28 Ken Yip Follow Hello! I’m Ken Yip, a Full Stack Developer with over 7 years of experience. Location Canada Joined Jun 19, 2024 More from Ken Yip Deploy a Docker Image to ECS with Auto Scaling Using AWS CDK in Minutes #aws #cdk #devops #docker Hazelcast Promoted * Hazelcast covers all your stream processing needs. Accelerate app development and deployment to realize your real-time potential. Learn more 👋 *** * ",
    "url": "https://dev.to/ken2026/crafting-a-scalable-nodejs-api-insights-from-my-realworld-project-with-express-knex-and-aws-cdk-4ol5"
  },
  {
    "body": "* 0 *ead 0 Raised Hands 0 Fire 1 Jump to Comments 0 * Ken Yip Posted on Nov 10 * #node Introduction Recently, I decided to use Directus as the CMS for my personal blog after comparing it with other open-source frameworks. One of the advantages of Directus is that it allows us to easily create custom extensions. In this article, I will guide you through creating a custom hook extension that slugifies the article and throws an error if the slug already exists in the database. Configure the Setup First of all, we need to install Directus on our local machine to develop an extension. There are several ways to set up a Directus project. You can check the official documentation here: https://docs.directus.io/getting-started/quickstart.html#_1-create-a-project To enable local development, I recommend using the NPM installation method. It allows us to hot-reload the server when the extension code is changed. Setup Directus project npm init directus-project@latest <project-name> Install Nodemon to enable hot-reload yarn install -D nodemon Add a command to the scripts section of the package.json \"dev\": \"npx nodemon --watch extensions --ext js --exec \\\"yarn start\\\"\" Create a collection called ‘article’ with the fields: title, slug, and content. The slug should be set as hidden. Start the program with the command: yarn dev Create the custom hook Navigate to the extensions folder and run the following command to create a new extension. npx create-directus-extension@latest slugify-article-title You will be prompted with serveral questions. I used the TypeScript to create the extension. Install the ‘slugify’ package in the extension. yarn add slugify Create 2 folders: errors and utils, and then add the following scripts: // create*.ts import { createError } from '@directus/errors'; export const create* = (title: string) => createError( '*', `An article with the title \"${title}\" already exists.`, 409 ); // InvalidSetupError.ts import { createError } from '@directus/errors'; export const InvalidSetupError = createError( 'InvalidSetupError', 'The article collection must have a string field named \"slug\" to use the slugify-article-title extension.', 400 ); // verifySetup.ts import { SchemaOverview } from '@directus/types'; import { InvalidSetupError } from '../errors'; export const verifySetup = (schema: SchemaOverview | null) => { if (!schema) { return; } const articleSchema = schema.collections?.article; if (articleSchema === undefined || articleSchema.fields.slug === undefined) { return; } if (articleSchema.fields.slug.type !== 'string') { throw new InvalidSetupError(); } }; The verifySetup function ensures that the article collection is set up correctly. The errors contain the error message and HTTP code. The error message will be displayed as an alert on the admin portal. In the index.ts file, replace the script with the following code: import slugify from 'slugify'; import { defineHook } from '@directus/extensions-sdk'; import { create* } from './errors'; import { ArticlePayload } from './types'; import { verifySetup } from './utils'; export default defineHook(({ filter }) => { filter('article.items.create', async (input, _meta, { database, schema }) => { verifySetup(schema); const payload = input as ArticlePayload; const slug = slugify(payload.title, { lower: true }); const existingTitle = await database .table('article') .where('slug', slug) .first('title') .then((result) => result?.title); if (existingTitle !== undefined) { const * = create*(existingTitle); throw new *(); } payload.slug = slug; return payload; }); filter('article.items.update', async (input, meta, { database, schema }) => { verifySetup(schema); const updates = input as Partial<ArticlePayload>; if (!updates.title) { return updates; } const articleId: string = meta.keys[0]; if (!articleId) { return updates; } const slug = slugify(updates.title, { lower: true }); const existingTitle = await database .table('article') .where('slug', slug) .where('id', '<>', articleId) .first('title') .then((result) => result?.title); if (existingTitle !== undefined) { const * = create*(existingTitle); throw new *(); } updates.slug = slug; return updates; }); }); The script contains two hooks that are triggered before the article item is created or updated. It slugifies the title, checks if the slug exists in the database, and either inserts the slug or throws an error (as declared in the previous step) if it already exists. You can find the available events here: https://docs.directus.io/extensions/hooks.html#available-events Run the following command to build the extension and test it on the admin portal. You will notice that the server and the build process are automatically restarted whenevet there is a code change! *? Manage p* Top comm* next 'next build' not showing uploaded file : Next.js Image tushar gajwani - Sep 19 Next.js * akpvt - Oct 19 Create a Slack Bot with NodeJS and Slack Bolt API Olibhia Ghosh - Oct 16 Building a Custom Backend * Ashish prajapati - Oct 18 Ken Yip Follow Hello! I’m Ken Yip, a Full Stack Developer with over 7 years of experience. Location Canada Joined Jun 19, 2024 More from Ken Yip * #cdk #typescript #node #opensource * * * * ",
    "url": "https://dev.to/ken2026/develop-a-custom-hook-extension-for-directus-33p1"
  },
  {
    "body": "* Follow Report Abuse keploy Keploy is an AI-powered testing tool that specializes in creating test cases and generating stubs/mocks for end-to-end testing. It can achieve an impressive 90% test coverage in just a min. Joined on Sep 23, 2023 https://keploy.io/ More info about @keploy Badges One * one year. Got it * 8 Week Writing Streak The st* * * * 385 * 4 tags followed * * 9 * #* #tutorial Add C*h keploy? * keploy. * Testing with AI: Revolutionizing Software Quality Assurance * 9 Testing with AI: Revolutionizing Software Quality Assurance #webdev #* Add Comment 4 min read Test Data Generator: Enhancing Software Testing Efficiency * 9 Test Data Generator: Enhancing Software Testing Efficiency #webdev #javas*omment 5 min read JUnit Mocking - A Complete Guide for Effective Unit Testing * 9 JUnit Mocking - A Complete Guide for Effective Unit Testing #* #* * * Benchmark Software Testing: Ensuring Optimal Performance and Quality * 7 Benchmark Software Testing: Ensuring Optimal Performance and Quality #webdev #* Add Comment 5 min read Manual Testing: Essential Practices for Quality Software Development * 7 Manual Testing: Essential Practices for Quality Software Development #webdev #javascript #progr* read Quality Engineering Software: Enhancing Software Development Through Automation and Precision * 7 Quality Engineering Software: Enhancing Software Development Through Automation and Precision #webdev #* Add Comment 6 min read Cypress Alternatives: Exploring Top Testing Tools for Web Applications * 7 Cypress Alternatives: Exploring Top Testing Tools for Web Applications #webdev #* 1 comment 5 min read Test Coverage Tools: Ensuring Code Quality and Reliability * 7 Test Coverage Tools: Ensuring Code Quality and Reliability #webdev #* Add Comment 5 * Creating and Optimizing Grafana Dashboards * 6 A Comprehensive Guide to Creating and Optimizing Grafana Dashboards #webdev #javascript #* Exploring Node.js: What Makes It a Powerful Choice for Server-Side Development * 6 Exploring Node.js: What Makes It a Powerful Choice for Server-Side Development #* #* Best Python IDEs: Choosing the Perfect Environment for Your Coding Journey * 6 Best Python IDEs: Choosing the Perfect Environment for Your Coding Journey #webdev #* Add Comment 5 min read Generating Random Numbers in JavaScript: A Comprehensive G* Nov 6 Generating Random Numbers in JavaScript: A * #* 4 min read Exploring Zsh 'ls' Alternatives: Elevating Your Command Line Experience * 6 Exploring Zsh 'ls' Alternatives: Elevating Your Command Line Experience #webdev #* Add Comment 3 min read Cypress vs Selenium: Choosing the Perfect Testing Tool for Your Needs * 6 Cypress vs Selenium: Choosing the Perfect Testing Tool for Your Needs #* #* 8 min read Functional Testing: An in-depth overview * 5 Functional Testing: An in-depth overview #webdev #* Add Comment 6 min read Master JavaScript Random Number Generation: A Guide to Math.random() and Beyond * 1 Master JavaScript Random Number Generation: A Guide to Math.random() and Beyond #webdev #* 1 c* Contract Testing: Ensuring Reliability in Microservices * 30 Understanding Contract Testing: Ensuring Reliability in Microservices #* #* Mastering Cron Jobs: Automating Tasks Efficiently * 30 Mastering Cron Jobs: Automating Tasks Efficiently #webdev #javas*omment 5 min read Consumer-Driven Contract Testing: Ensuring Reliable API Interactions * 30 Consumer-Driven Contract Testing: Ensuring Reliable API Interactions #webdev #javascript #progr* read Feature Flags: A Complete Guide to Managing Software Releases with Confidence * 29 Feature Flags: A Complete Guide to Managing Software Releases with Confidence #web*rial Add Comment 4 min read Contract Testing: A Comprehensive Guide for Modern Software Teams * 29 Contract Testing: A Comprehensive Guide for Modern Software Teams #webdev #javas*omment 3 min read Visualize Keploy Test Data in Grafana for Real-Time Monitoring * 29 Visualize Keploy Test Data in Grafana for Real-Time Monitoring #grafana #webdev #* 6 min read Top Alternatives To The Zsh Ls Command * 28 Top Alternatives To The Zsh Ls Command #community #* 10 *d Top 5 Best Ides To Use For Python In 2024 * 25 Top 5 Best Ides To Use For Python In 2024 #webdev #javas*omment 6 min read Unit testing for NodeJS using Mocha and Chai * 24 Unit testing for NodeJS using Mocha and Chai #webdev #javascript #* Comment 8 min read System Integration Testing: A Complete Overview * 23 System Integration Testing: A Complete Overview #webdev #javas*omment 3 min read AI Code Generation: A Comprehensive G* Oct 23 AI Code Generation: A * #programming #tutorial * Test Data Management Tools: A Complete G* Oct 23 Test Data Management Tools: A Complete Guide #web*rial Add Comment 3 min read Test Coverage Tools: A Complete G* Oct 23 Test Coverage Tools: A Complete Guide #webdev #javas*omment 3 min read Unit Testing Tools: A Comprehensive G* Oct 23 Unit Testing Tools: A * #progr* read Benchmark Testing In Software: The Key To Optimizing Performance * 22 Benchmark Testing In Software: The Key To Optimizing Performance Add Comment 8 min read SSL Certificate Problem: Unable to Get Local Issuer Certificate – Causes and Solutions * 21 SSL Certificate Problem: Unable to Get Local Issuer Certificate – Causes and Solutions #webdev #* 1 comment 5 min read Shift Left: A Comprehensive Guide to Enhancing Software Development Efficiency * 21 Shift Left: A Comprehensive Guide to Enhancing Software Development Efficiency #webdev #beginners #* 5 min read How to Compare JSON Data: A Complete G* Oct 21 How to Compare JSON Data: A Complete Guide #webdev #* * Performance Testing: A Complete G* Oct 21 Performance Testing: A Complete Guide #webdev #javas*omment 3 min read Why is Contract Testing Important? * 21 Why is Contract Testing Important? #webdev #* Add Comment 3 min read Looking to migrate from REST Assured to Keploy? * 21 Looking to migrate from REST Assured to Keploy? #webdev #* Add Comment 5 min read What is Contract testing: A knowledge g* Oct 19 What is Contract testing: A knowledge guide #webdev #javas*omment 6 min read Top 5 Tools For Performance Testing: Boost Your Application’S Speed * 17 Top 5 Tools For Performance Testing: Boost Your Application’S Speed #productivity #webdev #performance #learning Add Comment 9 min read Convert Jest to Vitest: A Complete Migration G* Oct 17 Convert Jest to Vitest: A Complete Migration Guide #webdev #* * QA Testing: Ensuring Software Quality from Start to Finish * 17 QA Testing: Ensuring Software Quality from Start to Finish #qa #testing #webdev #ai Add Comment 4 min read JUnit Testing: A Comprehensive G* Oct 17 JUnit Testing: A * #* 6 min read Cucumber Testing: A Comprehensive G* Oct 17 Cucumber Testing: A * #* Comment 4 min read Mock vs Stub: Understanding the Key Differences * 16 Mock vs Stub: Understanding the Key Differences #webdev #* Add Comment 4 min read Non-Functional Requirements: A Complete G* Oct 15 Non-Functional Requirements: A Complete G** read Testing in Production: A Practical G* Oct 15 Testing in Production: A Practical Guide #webdev #beginners #* 3 min read Token Bucket Algorithm: A Comprehensive G* Oct 15 Token Bucket Algorithm: A * #* 3 min read An Introduction to GoMock: Mocking in Go * 15 An Introduction to GoMock: Mocking in Go #webdev #* Add Comment 4 min read Diff JSON – A Complete Guide to Comparing JSON Data * 15 Diff JSON – A Complete Guide to Comparing JSON Data #webdev #javascript #progr* read Essential Free Api Testing Tools Every Developer Should Know * 15 Essential Free Api Testing Tools Every Developer Should Know #* #tutorial 1 reaction *ng White Box Testing: An In-Depth G* Oct 15 Understanding White Box Testing: An In-Depth Guide #web*rial Add Comment 6 * Load Testing * 15 A Comprehensive Guide to Load Testing #webdev #javascript #progr* read Manual Testing: A Complete G* Oct 15 Manual Testing: A Complete Guide #webdev #* What Is White Box Testing? Techniques, Types and Examples * 14 What Is White Box Testing? Techniques, Types and Examples #* #* Exploring Bun.js – The Modern JavaScript Run* Oct 14 Exploring Bun.js – The Modern JavaScript Runtime #* #javascript * How to do Load Testing? * 13 How to do Load Testing? Add Comment 6 min read Test Data Generation: An Essential G* Oct 11 Test Data Generation: An Essential G** read What is Beta Testing? A Comprehensive G* Oct 11 What is Beta Testing? A * #* 4 *onsor Neon * ",
    "url": "https://dev.to/keploy"
  },
  {
    "body": "* 0 *ead 0 * 0 * keploy Posted on Nov 8 • Originally published at keploy.io How to run cypress ru* #node Cypress is a robust end-to-end testing framework built for web applications. It’s designed to make testing straightforward and reliable, allowing developers and QA engineers to test everything from simple interactions to complex user workflows. With Cypress, you can create tests that simulate user actions, verify front-end behaviors, and ensure UI functionality with minimal setup. What is Cypress Used For? Cypress is primarily used for end-to-end testing in web applications, but it’s also effective for integration and unit testing in the front-end environment. Here are some common use cases: Automating User Flows: Test complex user flows, such as authentication, form submissions, and e-commerce transactions. Testing Responsive Design: Cypress allows testing across different viewport sizes, making it ideal for responsive design testing. Regression Testing: By automating your test cases, you can quickly verify that new code changes haven’t introduced bugs. UI Component Testing: Cypress can be used with tools like Storybook to validate front-end components in isolation, ensuring they perform as expected across various scenarios. Cypress provides a powerful dashboard and CLI that allow for seamless integration into CI/CD pipelines, making it a go-to choice for automated, continuous testing in modern web development. Running Tests with Cypress Tests can be run in Cypress in two main ways: Using the Test Runner (GUI) and the Command-Line Interface (CLI). Here’s a quick guide to both methods: Using the Test Runner (GUI) : To use the Cypress Test Runner interactively with the Cypress Real World App, follow these steps. This app provides a solid example of Cypress tests in action, with scenarios for user signup, login, and transaction flows. Let’s take Cypress's sample app “Cypress Real World App” as an example. Set Up and Run Cypress Real World App Locally : These are the initial steps to set up the sample app git clone https://github.com/cypress-io/cypress-realworld-app cd cypress-realworld-app yarn //run the app yarn dev Open Cypress Test Runner : Now, to open the Cypress Test Runner in interactive mode: Run the command: npx cypress open This will launch the Cypress Test Runner GUI, where you can view and select tests to run. Upon clicking E2E you can see this dashboard which has the entire list of tests under cypress/tests. Let’s create a new test called custom.spec.ts in our directory under cypress/tests/ui/custom.spec.ts describe(\"User Sign-up and Login\", function () { beforeEach(function () { // Seed the database before each test cy.task(\"db:seed\"); // Intercept signup and login API calls cy.intercept(\"POST\", \"/users\").as(\"signup\"); cy.intercept(\"POST\", \"/graphql\").as(\"gqlRequests\"); }); it(\"should redirect unauthenticated user to signin page\", function () { cy.visit(\"/personal\"); cy.location(\"pathname\").should(\"equal\", \"/signin\"); }); it(\"should allow a visitor to sign-up, login, and logout\", function () { const userInfo = { firstName: \"Bob\", lastName: \"Ross\", username: \"PainterJoy90\", password: \"s3cret\", }; // Sign-up User cy.visit(\"/signup\"); cy.getBySel(\"signup-first-name\").type(userInfo.firstName); cy.getBySel(\"signup-last-name\").type(userInfo.lastName); cy.getBySel(\"signup-username\").type(userInfo.username); cy.getBySel(\"signup-password\").type(userInfo.password); cy.getBySel(\"signup-confirmPassword\").type(userInfo.password); cy.visualSnapshot(\"About to Sign Up\"); cy.getBySel(\"signup-submit\").click(); cy.wait(\"@signup\"); // Login User cy.visit(\"/signin\"); cy.login(userInfo.username, userInfo.password); // Verify successful login cy.location(\"pathname\").should(\"equal\", \"/\"); Setup (beforeEach): Before each test, the database is seeded to start with a consistent state, and API calls for signup and GraphQL requests are intercepted for monitoring. Tests: * **Redirect for Unauthenticated User**: Checks if an unauthenticated user visiting a restricted page (`/personal`) is redirected to the `/signin` page. * **Sign-up, Login**: A new user is signed up, logged in, and logged out. The test verifies the user can register, sign in by being redirected to `/signin`. Each test ensures critical functionality for secure and user-friendly account management. Note: Try adding a signout and username incorrect flow to this Running Tests from the CLI: In CI environments or for batch test execution, the CLI offers a streamlined approach. Run all tests or specify individual test files: npx cypress run npx cypress run --spec \"cypress/tests/ui/custom.spec.ts\" Benefits of Cypress Cypress is known for its fast execution, ease of setup, and powerful testing features. Here are some top benefits: Real-time Reloads and Interactive Testing: Cypress provides instant feedback by reloading tests as changes are made, giving developers immediate insight into the app’s behavior. Flake-Free Testing: Thanks to its unique architecture, Cypress reduces flakiness in tests, making your test results more reliable. Automatic Waiting: Cypress waits for elements to load, respond, and render, so you don’t need to add explicit waits. Built-In Assertions and Mocking: Cypress comes with a rich set of assertions and tools for mocking API responses and simulating user interactions. Just like Cypress supports efficient E2E testing by automating user interactions, Keploy brings a powerful dimension to testing by focusing on the backend. Cypress shines in verifying the frontend and user experience, while Keploy complements it by automatically generating and maintaining API tests without needing additional scripting. Keploy is particularly effective for capturing real-world interactions and transforming them into executable tests, ensuring backend consistency and data reliability as applications scale. Automated Testing Platform: Keploy focuses on generating tests automatically for backend services, particularly API and database interactions. Capture & Replay: Keploy captures real-world traffic and replays it in test environments, creating real-life test cases. No-Code Test Generation: Designed for ease, it generates tests without requiring custom scripts. E2E Testing with Keploy: API-Centric E2E Testing: Automates end-to-end testing for backend comp onents, ensuring backend functionality is verified as a unit. Error Detection & Replay: Captures API requests/responses, replays interactions, and detects regressions early. Consistent Data Validation: Tracks responses and changes in data flow, ensuring accuracy across deployments. Seamless Integration: Easily integrates with CI/CD pipelines, helping teams automate E2E checks on backend changes. There are many tools in this space, each of these tools provides capabilities suited to different types of testing environments, from browser-specific tests in Puppeteer to cross-browser compatibility in Playwright and Selenium. Choosing the right tool ultimately depends on your testing needs and application requirements. FAQ Can Cypress be used for backend testing? Cypress is primarily a front-end testing tool. While it can interact with backend APIs and mock responses, it is not designed for extensive backend testing. For backend-specific tests, tools like Keploy can complement Cypress by providing unit and integration testing capabilities for server-side functionalities. Does Cypress support cross-browser testing? Yes, Cypress supports Chrome, Edge, and Firefox. However, it has limited support compared to tools like Selenium or Playwright, which offer broader cross-browser compatibility. How does Cypress handle API testing? Cypress can perform API tests by making HTTP requests directly from the test code. You can use cy.request() to validate API responses, making it easy to test APIs within the same end-to-end testing framework. How can I debug failing Cypress tests? Cypress provides detailed logs and screenshots by default, and the Test Runner allows you to interact with your tests visually. You can add .only to isolate failing tests, use cy.pause() to stop execution, and utilize Chrome DevTools for further debugging. Sentry Promoted * Hydration errors suck But Sentry can help you debug them. Read full post → * * Trending in JavaScript React projects, SOLID principles in JS/TS, and open-source icon libraries are key themes. The community is also interested in concise React one-liners and Wix challenges. 17 Must-know React Projects for Developers 👩‍💻 🔥 Anmol Baranwal for Tolgee ・ Oct 16 #react #javascript #programming #opensource Applying SOLID Principles in JavaScript and TypeScript Framework Wafa Bergaoui ・ Oct 13 #solidprinciples #architecture #javascript #typescript 21+ Best Free and Open-Source Icon Library for 2024 LineIcons ・ Oct 14 #icons #webdev #javascript #opensource Join us for the next Wix Studio Challenge: Build Your Dream Community Platform! dev.to staff for The DEV Team ・ Oct 16 #devchallenge #wixstudiochallenge #webdev #javascript 10 React One-Liners Every UI Developer Should Know Niraj Narkhede ・ Oct 15 #react #javascript #tutorial #beginners Read next How to use Cookie Consent in a React App with react-cookie-consent Muchhal Sagar - Oct 29 String - JavaScript Challenges Mitchell - Oct 29 What’s the Best Way to Market Your SaaS as a Solo Developer? Dusan Petkovic - Oct 29 🛠️ ¿Cómo actualizar tus paquetes de Go (Golang) de manera eficiente?🛠️ Roberto Morais - Oct 29 keploy Follow Keploy is an AI-powered testing tool that specializes in creating test cases and generating stubs/mocks for end-to-end testing. It can achieve an impressive 90% test coverage in just a min. Joined Sep 23, 2023 More from keploy * #* #tutorial Testing with AI: Revolutionizing Software Quality Assurance #webdev #* Test Data Generator: Enhancing Software Testing Efficiency #webdev #* _SurveyJS Promoted * UI Components for Dynamic Surveys and Forms SurveyJS lets *ystem that works with any backend. You get full control over your data, no user limits, and all the good stuff—custom *S*ics, and more. Fully compatible with React, Angular, Vue.js, jQuery, or whatever JS framework you're using. View demo 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/keploy/how-to-run-cypress-run-and-cypress-open-at-a-time-48o0"
  },
  {
    "body": "* 104 Add reaction 73 Like 8 Unicorn 8 Exploding Head 7 Raised Hands 8 Fire 9 Jump to Comments 142 * Kishan Sheth Posted on Oct 29 73 8 8 7 8 🔥 * 🚀 #* Introduction Developing a real-time chat application involves more than just basic messaging. In this tutorial, we’ll explore how to build a fully responsive chat app from scratch using modern web technologies. This app includes essential features like group chats, file uploads, and real-time communication, making it an excellent project for anyone interested in full-stack development. Key Features of Our Chat Application Here’s a breakdown of the key features and technologies that power our chat app: Frontend (React) UI Components: ShadCN for intuitive, modular components. Styling: Tailwind CSS ensures a modern, responsive design. Responsiveness: Adaptable for both mobile and desktop devices. Backend (Node.js and Express) Data Storage: MongoDB, optimized for handling user data and messages. Authentication: JWT for secure, token-based authentication. Real-Time Communication: Socket.io for instant messaging functionality. Additional Features File Handling: Multer is used to handle file uploads and storage. State Management: Zustand for managing user sessions and chat states. API Calls: Axios for efficient API communication. Building the Frontend In this section, guide your readers through setting up a React app and installing dependencies like ShadCN, Tailwind CSS, and Zustand. Setting Up the React App Begin by initializing a React app and setting up the basic folder structure. Adding Responsiveness with Tailwind CSS Explain how to install and configure Tailwind CSS for styling and responsiveness. Implementing State Management with Zustand Walk through how Zustand can manage chat states, making the app feel responsive and smooth. Integrating Sockets for Real-Time Updates Show how to set up Socket.io on the frontend to enable real-time communication between users. Backend Implementation This section covers setting up a Node.js and Express server with MongoDB as the database and Socket.io for real-time messaging. Setting Up the Express Server Go over the initial setup, including installing dependencies, configuring routes, and connecting to MongoDB. Integrating JWT for Authentication Explain how to use JWT for user authentication, including token creation and validation. Handling File Uploads with Multer Demonstrate how to integrate Multer to handle image and file uploads, including setting up file storage and managing uploads. Enabling Real-Time Messaging with Socket.io Detail how Socket.io powers instant communication, allowing users to send and receive messages in real time. Source Code ⭐ Check out the full 10+ Hour Video on my youtube channel. For more such Full Stack Apps subscribe to my youtube channel. Heroku *references R* Top comments (9) * Jimisha Mashru Jimisha Mashru Jimisha Mashru Follow Joined Oct 11, 2023 • Oct 29 *at's an amazing project, you could have added Voice and Video Calls as well. That would have made the project a complete chat app. Love the UI. 7 likes Like Reply * I am a kind of guy who likes programming at its core; excellent communication as well as leadership skills. Detail oriented and organised professional. Email kishansheth21@gmail.com Location Ahmedabad, Gujarat Education B.Tech in Computer Science Joined Nov 26, 2020 • Oct 30 Copy l* the input, I will take this into consideration for the next project. 2 likes Like Reply gokayburuc.dev gokayburuc.dev gokayburuc.dev Follow Email gokayburuc@yandex.com Location Kırklareli, Turkey Education ННГУ - Университета Лобачевского / University Of Lobachesvky ( Nizhniy Novgorod - Russia) Pronouns he/him Work Full-Stack Developer Joined Jul 14, 2019 • Oct * Maybe you can use web assembly library with rust in your next project. So your react app will work much more faster than usual. Just consider this idea 😉 1 like Like Reply Zunefox Zunefox Zunefox Follow Joined Oct 29, 2024 • Oct * Using Next.js would be more better. 5 likes Like Reply * I am a kind of guy who likes programming at its core; excellent communication as well as leadership skills. Detail oriented and organised professional. Email kishansheth21@gmail.com Location Ahmedabad, Gujarat Education B.Tech in Computer Science Joined Nov 26, 2020 • Oct * Noted. 1 like Like Reply Comment deleted * I am a kind of guy who likes programming at its core; excellent communication as well as leadership skills. Detail oriented and organised professional. Email kishansheth21@gmail.com Location Ahmedabad, Gujarat Education B.Tech in Computer Science Joined Nov 26, 2020 • Oct * youtube.com/watch?v=W3sOezpkGWI You can watch the entire demo here. 1 like Like Reply Zeb Zeb Zeb Follow Joined Oct 29, 2024 • Oct 29 *at is an awesome project. 1 like Like Reply * I am a kind of guy who likes programming at its core; excellent communication as well as leadership skills. Detail oriented and organised professional. Email kishansheth21@gmail.com Location Ahmedabad, Gujarat Education B.Tech in Computer Science Joined Nov 26, 2020 • Oct 30 Co*you. 1 like Like Reply * Coherence Promoted * Deploy and scale your apps on AWS and GCP with a world class developer experience Coherence makes it easy to set up and maintain cloud infrastructure. Harness the extensibility, compliance and cost efficiency of the cloud. Learn more Read next Full Stack web framework with React with RSC Henrique Emanoel Viana - Oct 23 Understanding APIs and Building Your Own 🚀 lokesh singh tanwar - Nov 5 Vue3 + ESLint 9.13.0 + Prettier +TypeScript and VSCode Autoformat on Save Visaka Devi Chaves - Nov 5 A Complete Guide to React useEffect vs useLayoutEffect for Beginners Rajesh Dhiman - Oct 23 Kishan Sheth Follow I am a kind of guy who likes programming at its core; excellent communication as well as leadership skills. Detail oriented and organised professional. Location Ahmedabad, Gujarat Education B.Tech in Computer Science Joined Nov 26, 2020 More from Kishan Sheth 🔴 Realtime Responsive Chat App with React, Node.js, Socket.io and MongoDB with Group Chats and File Uploads #* Next.js 14 Booking App with Live Data Scraping using Scraping Browser #react #nextjs #node #webdev 🟣 Compilation of Best Full Stack Clones: Amazon, Airbnb, Fiverr, Whatsapp, Netflix, Spotify, Youtube, Zoom & Candy Crush #webdev #react #nextjs #javascript Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/kishansheth/i-built-a-stunning-chat-app-with-react-leo"
  },
  {
    "body": "* Follow Report Abuse Megan Lee Content Marketing Manager @ LogRocket. I didn't write the post you just read. To find out who did, click the link directly below the post tags. Joined on Jan 29, 2024 More info about @leemeganj Badges * Organizations LogRocket 194 posts *owed Solving the Node.js console.**ad CSR, SSR, pre-rendering: Which rendering technique to choose? Megan Le* Nov 6 CSR, SSR, pre-rendering: Which rendering technique to choose? #webdev #nextjs 2 * * Megan Le* Nov 6 * #webdev #node #rust 2 * Why jQuery 4 is a good reminder to stop using jQuery Megan Le* Nov 5 Why jQuery 4 is a good reminder to stop using jQuery #webdev #javascript 8 reactions 5 comments 15 min read Advanced Next.js caching strategies Megan Le* Nov 4 Advanced Next.js caching strategies #webdev #node #react 3 * A guide to the best email editing tools Megan Le* Oct 31 A guide to the best email editing tools #webdev #* 7 min read The best React select component libraries Megan Le* Oct 30 The best React select component libraries #webdev #react 3 * Using Polars in Rust for high-performance data analysis Megan Le* Oct 30 Using Polars in Rust for high-performance data analysis #webdev #rust 8 * Simplifying CSS animations with the display and size properties Megan Le* Oct 29 Simplifying CSS animations with the display and size properties #webdev #css 3 *ad A deep dive into React Fiber Megan Le* Oct 27 A deep dive into React Fiber #webdev #react 1 reaction Add Comment 22 min read Automatic file-based routing in Vue.js Megan Le* Oct 24 Automatic file-based routing in Vue.js #webdev #vue 10 reactions 1 comment 13 min read Understanding Redux: A tutorial with examples Megan Le* Oct 23 Understanding Redux: A tutorial with examples #webdev #react #redux 6 reactions 1 comment 15 min read Inertia.js * Megan Le* Oct 23 Inertia.js * #webdev #laravel #*t 17 min read VineJS vs. Zod for schema validation Megan Le* Oct 22 VineJS vs. Zod for schema validation #webdev #node #typescript #*t 12 min read Six things you may not know about JavaScript Megan Le* Oct 21 Six things you may not know about * 10 reactions 3 comments 10 min read How to style HTML with matcha.css Megan Le* Oct 17 How to style HTML with matcha.css #webdev #css #html 1 reaction Add Comment 14 min read Understanding and supporting zoom behaviors on the web Megan Le* Oct 17 Understanding and supporting zoom behaviors on the web #webdev #css #html #*t 9 min read Using the built-in SQLite module in Node.js Megan Le* Oct 16 Using the built-in SQLite module in Node.js #*t 15 min read How to use forwardRef in React Megan Le* Oct 15 How to use forwardRef in React #webdev #react 2 * Playwright Extra: extending Playwright with plugins Megan Le* Oct 15 Playwright Extra: extending Playwright with plugins #webdev #node Add Comment 12 min read Programmatically downloading files in the browser Megan Le* Oct 11 Programmatically downloading files in the browser #webdev Add Comment 17 min read Storing and retrieving JavaScript objects in localStorage Megan Le* Oct 8 Storing and retrieving JavaScript objects in localStorage #webdev #vanilla #javascript 6 *ad How to access file systems with React Native Megan Le* Oct 8 How to access file systems with React Native #webdev #reactnative Add Comment 8 min read Creating custom mouse cursors with CSS Megan Le* Oct 8 Creating custom mouse cursors with CSS #webdev #css 6 * Developing modals using only CSS and the Popover API Megan Le* Oct 3 Developing modals using only CSS and the Popover API #webdev #css #html 4 *d Implementing Claude’s Artifacts feature for UI visualization Megan Le* Oct 3 Implementing Claude’s Artifacts feature for UI visualization #webdev 2 * Tauri * Megan Le* Oct 2 Tauri * #webdev #adoptionguide #rust 3 reactions 2 comments 13 min read Node.js performance hooks and measurement APIs Megan Le* Oct 1 Node.js performance hooks and measurement APIs #*t 11 min read Leaflet * Megan Le* Sep 27 Leaflet * #javascript #webdev 2 * Nitro.js: Revolutionizing server-side JavaScript Megan Le* Sep 26 Nitro.js: Revolutionizing server-side * 3 * How to build scalable micro-frontends with Vike and Vite Megan Le* Sep 24 How to build scalable micro-frontends with Vike and Vite #vite #react #webdev 5 *d Understanding JWT, OAuth, and Bearer tokens Megan Le* Sep 24 Understanding JWT, OAuth, and Bearer tokens #javascript #webdev #jwt Add Comment 7 min read Understanding env variables and containers in Astro 4.10 Megan Le* Sep 24 Understanding env variables and containers in Astro 4.10 #astro #webdev 3 * Build an image editor with Fabric.js v6 Megan Le* Sep 16 Build an image editor with Fabric.js v6 #typescript #react #webdev 21 * Formik * Megan Le* Sep 12 Formik * #formik #webdev 1 reaction 1 comment 16 min read Deno * Megan Le* Sep 11 Deno * #deno #webdev 3 * Mastering promise cancellation in JavaScript Megan Le* Sep 11 Mastering promise cancellation in * 8 * Creating an animated hamburger menu icon for React Megan Le* Sep 10 Creating an animated hamburger menu icon for React #react #webdev 6 * Building Telegram Mini Apps with React Megan Le* Sep 10 Building Telegram Mini Apps with React #react #miniapps #* 25 min read Advanced monorepo management with Turborepo 2.0 Megan Le* Sep 5 Advanced monorepo management with Turborepo 2.0 #turborepo #monorepo 8 * Zustand * Megan Le* Sep 4 Zustand * #zustand #webdev 3 * How to implement Coolify, the self-hosted alternative to Heroku Megan Le* Sep 4 How to implement Coolify, the self-hosted alternative to Heroku #heroku #webdev 9 reactions Add Comment 26 min read Next.js View Transitions API Megan Le* Sep 3 Next.js View Transitions API #nextjs #webdev 5 * Svelte * Megan Le* Sep 3 Svelte * #svelte #* 24 min read Go long by generating PDFs in Golang with Maroto Megan Le* Aug 30 Go long by generating PDFs in Golang with Maroto #go #webdev 28 reactions 2 comments 15 min read Turbopack * Megan Le* Aug 29 Turbopack * #turbopack #webdev #*t 8 min read How to build a countdown timer using CSS Megan Le* Aug 28 How to build a countdown timer using CSS #css #webdev 5 reactions 1 comment 17 min read Implementing WebAuthn for passwordless logins Megan Le* Aug 28 Implementing WebAuthn for passwordless logins #javascript #* 20 min read Building cross-platform GUI apps in Rust using egui Megan Le* Aug 27 Building cross-platform GUI apps in Rust using egui #rust #webdev 9 reactions 1 comment 23 min read Supabase * Megan Le* Aug 22 Supabase * #supabase #javascript #webdev 8 reactions 1 comment 12 min read Visualize JSON data with these popular tools Megan Le* Aug 21 Visualize JSON data with these popular tools #json #webdev 5 reactions 1 comment 8 min read Implement the Pragmatic drag and drop library Megan Le* Aug 21 Implement the Pragmatic drag and drop library #react #javascript #webdev 3 reactions 1 comment 22 min read Optimizing CSS time-based animations with new CSS functions Megan Le* Aug 20 Optimizing CSS time-based animations with new CSS functions #css #webdev 21 reactions Add Comment 20 min read Understanding optimistic UI and React’s useOptimistic Hook Megan Le* Aug 20 Understanding optimistic UI and React’s useOptimistic Hook #react #webdev 8 * Vitest * Megan Le* Aug 15 Vitest * #vitest #vite #* 19 min read Fastify * Megan Le* Aug 15 Fastify * #fastify #webdev 5 * Improve text flow and balance with the CSS text-wrap property Megan Le* Aug 14 Improve text flow and balance with the CSS text-wrap property #css #webdev 4 * Rate limiting vs. throttling and other API traffic management Megan Le* Aug 14 Rate limiting vs. throttling and other API traffic management #webdev #api 5 *d Creating 3D effects in CSS Megan Le* Aug 13 Creating 3D effects in CSS #css #webdev 62 * MUI * Megan Le* Aug 8 MUI * #mui #* 12 *onsor Neon * ",
    "url": "https://dev.to/leemeganj"
  },
  {
    "body": "* 25 Add reaction 20 Like 5 *s 0 Fire 2 Jump to Comments 34 * Lenmor Ld Posted on Mar 20, 2019 • Updated on Dec 8, 2019 20 5 Node Express Your first Web Server with Node and Express in 5 minutes #node #express #beginners #server Building Node and Express Stuff in 5 minutes (4 Part Series) 1 Your first Web Server with Node and Express in 5 minutes 2 REST API with Node and Express in 5 minutes 3 Complete REST API with diskdb, Node, and Express in 5 minutes 4 🌱 Complete REST API with MongoDB Atlas cloud, Node, and Express in 10 minutes I know, I know... Another Node Express tutorial 😑. But if you still haven't got around to learning Node and building a server, maybe this super-quick tutorial is the one you're waiting for! 😆 Step 1: Install node Ok, this must take more than 5 minutes, but if you have Node already, skip this and let's go! Install latest LTS version for your OS https://nodejs.org/en/download/ To test if it works, create a file server.js in your project root // server.js console.log(\"Hello World!\"); And test it out $ node server.js Hello world! Nice! We're ready to do some backend-fu! Step 2: Setup npm We use NPM to manage our node packages. Initialize npm and let it take defaults. $ npm init -y Step 3: Install and import express middleware A middleware is a piece of code that has access to the request and response object. For now, think about express making things easier for us by being a \"middle-man\" 🕵️ between our code and Node's HTTP stuff. $ npm install express // server.js * server = express(); Step 4: Add a JSON route handler Whenever client requests/accesses \"/json\" (localhost:4000/json), send JSON which is \"Hello world\" message // server.js ... server.get(\"/json\", (req, res) => { res.json({ message: \"Hello world\" }); }); Step 5: Add a HTML route handler Whenever client requests/accesses \"/\" (localhost:4000), send file which is an HTML page __dirname holds the directory of current module (server.js) // server.js ... server.get(\"/\", (req, res) => { res.sendFile(__dirname + '/index.html'); }); Create index.html in same level as server.js Go to town with the HTML! Or you can copy-paste this if you like blue headings. <!DOCTYPE html> <html lang=\"en\"> <head> <title>Node Workshop</title> </head> <body> <h1 style=\"color: blue;\"> Express: HELLO WORLD </h1> </body> </html> Step 5: Start server // server.js ... const port = 4000; server.listen(port, () => { console.log(`Server listening at ${port}`); }); # CTRL+C to stop server if currently running $ npm start Step 6: Test # on another terminal $ curl http://localhost:4000/json {\"message\":\"Hello world\"} $ curl http://localhost:4000 <!-- index.html --> ... Or open a browser and go to http://localhost:4000/json http://localhost:4000 Complete Code * server = express(); const port = 4000; server.get(\"/\", (req, res) => { res.sendFile(__dirname + '/index.html'); }); server.get(\"/json\", (req, res) => { res.json({ message: \"Hello world\" }); }); server.listen(port, () => { console.log(`Server listening at ${port}`); }); \"Okay, that was nice. But what can I do with this? \" Add a few more routes and HTML pages and you got yourself an HTML + JSON server! ... server.get(\"/items\", (req, res) => { res.json({ items: [{ \"id\": 1, \"name\": \"banana\" }, { \"id\": 2, \"name\": \"apple\" } ] }); }); server.get(\"/info\", (req, res) => { res.sendFile(__dirname + '/info.html'); }); ... We will need to cover more stuff to build a REST(ful) API Server that implements GET / POST / PUT / DELETE serve templates that accept data (instead of static HTML) much more! Next up: Article No Longer Available This article is part of a Node+Express series I'm working on. For the meantime, if you can't get enough of Node+Express 🤓, checkout my Node workshop (Gihub repo and slides): lenmorld / node_workshop Build a server and API for your next web application, using Node, Express and MongoDB Node workshop Create a server + REST API for your next web application! In this workshop, we’ll discuss concepts and put them to practice with activities, all about web servers The code and concepts here would be a great foundation for your next web project Topics include, but not limited to: Using Node and Express to build a web server and REST API Understanding routing, request and response Implementing CRUD with HTTP methods Building a server-rendered website using templates Connecting to a Cloud NoSQL database: MongoDB Atlas DB User authentication with sessions, cookies and tokens Using external APIs, such as Github Jobs, Giphy, Spotify Previous Events Node Workshop - August 27 2020 Devto post Node Workshop - July 16 2020 Devto post Material Preview slides: Google Drive document Material: Notion link Code to follow workshop: $ git checkout dev $ node server.js to dev latest $ git checkout master $ … View on GitHub Here we discussed: Using Node and Express Routing, request and response Building a REST API Server-rendered templates Connecting to a NoSQL (mongo) database Using external APIs, such as Spotify and much more! Thanks for reading my first Dev post! Happy server-ing! Building Node and Express Stuff in 5 minutes (4 Part Series) 1 Your first Web Server with Node and Express in 5 minutes 2 REST API with Node and Express in 5 minutes 3 Complete REST API with diskdb, Node, and Express in 5 minutes 4 🌱 Complete REST API with MongoDB Atlas cloud, Node, and Express in 10 minutes Highlight Promoted * Find Code Bottlenecks Fast 🏎️ No more hunting through endless lines of code. With Highlight.io, you can spot performance bottlenecks instantly, from frontend to backend. Optimize your app, improve load times, and keep users happy – all with a few clicks. Start diagnosing smarter with Highlight.io. Get Started Top comments (2) * RandallArmstrong RandallArmstrong RandallArmstrong Follow Joined Aug 1, 2020 • Mar 26 '21 Co* Everyone, Thanks for sharing the amazing information with us. Are you looking for a quick service with node js and express in 5 minutes only? Now, there are many node.js hosting services available in the market. But choose the best one for our business website is a very important part. We help you to install the node server in just a few minutes. DomainRacer is one of the best and quick web hosting for node js. They easily manage all types of servers in just a few seconds. Its features and affordable pricing let it stand out from the crowd. They believe in delivering service instead of aggressive marketing. So, I strongly recommended DomainRacer. Because it gives a reasonable cost. Best Luck.....! 1 like Like Reply Abdulaziz Sadi Abdulaziz Sadi Abdulaziz Sadi Follow Joined Dec 13, 2017 • Nov 17 '21 C* is a pretty quick tutorial, helpful. Thanks 1 like Like Reply * Sentry *r* Your Session has Expired !! Shanu - Oct 28 Custom Toggle Button in iOS 18 - #30DaysOfSwift Vaibhav Dwivedi - Oct 30 Dynamic Fonts in iOS 18 - #30DaysOfSwift Vaibhav Dwivedi - Oct 27 Understanding Exports and Imports in JavaScript Agbo, Daniel Onuoha - Oct 26 Lenmor Ld Follow webdev @ Autodesk | Someone used to call me \"Learn more\", and I'm spending forever to live up to it. You'll find me dabbling in random stuff 👨‍💻 or missing a wide open shot in 🏀 Location Montreal Education Concordia University Work web dev at Autodesk Joined Dec 12, 2018 More from Lenmor Ld React Workshop - free online workshop by SCS Concordia #react #beginners #workshop #ui Node Workshop part 2 - free online workshop by SCS Concordia #node #mongodb #beginners #workshop Node Workshop - free online workshop by SCS Concordia #node #mongodb #beginners #workshop Heroku *referenc* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/lennythedev/quick-server-with-node-and-express-in-5-minutes-17m7"
  },
  {
    "body": "* Follow Report Abuse Nikunj R. Prajapati 27.9881°86.9250° Joined on Dec 7, 2020 * Three * t* it Star Wars Day Costume Contest Awarded to anyone who commented on our 2022 \"May the 4th\" Star Wars Day Costume Contest post and/or participated in the contest. Got it Deepgram x DEV Hackathon Participant Prize (Wacky Wildcards) Awarded for submitting a valid entry to the the Deepgram x DEV hackathon under the Wacky Wildcards category. Got it MongoDB Atlas Hackathon Participant Awarded for submitting a valid project to the MongoDB Atlas Hackathon on DEV. Got it *21 *21 * More info about @leo1612d Skills/Languages Javascript, AWS Currently learning Backend technology, aws & blockchain Currently hacking on Mostly developing backend in nodejs. 14 posts published 5 comments written 21 tags followed Seeking Advice from Pro Node.js Developers 🚀 * Nikunj R. Prajapati Follow Apr 8 Seeking Advice from Pro Node.js Developers 🚀 #javascript #node #interview Add C*ith Nikunj R. Prajapati? * Nikunj R. Prajapati. * Advanced Javascript * Nikunj R. Prajapati Follow Oct 12 '22 Advanced Javascript #* Add Comment 1 min read Day 4 : What is memoization in javascript ? * Nikunj R. Prajapati Follow Jun 9 '22 Day 4 : What is memoization in javascript ? #javascript #tutorial #100daysofproductivity #webdev 6 *d Day 3 : What Is IIFE in Javascript ? * Nikunj R. Prajapati Follow Jun 8 '22 Day 3 : What Is IIFE in Javascript ? #javascript #webdev #tutorial #100daysofproductivity 7 *d Day 2 : What is pure function in JS ? * Nikunj R. Prajapati Follow Jun 7 '22 Day 2 : What is pure function in JS ? #javascript #webdev #100daysofproductivity #* 1 min read Day 1 : Objects in javascript * Nikunj R. Prajapati Follow Jun 6 '22 Day 1 : Objects in javascript #javascript #webdev #tutorial #100daysofproductivity 7 *d AWS India Summit * Nikunj R. Prajapati Follow May 20 '22 AWS India Summit #aws #devops #cloud #cloudskills * Best resources to learn postgreSQL ? * Nikunj R. Prajapati Follow Apr 12 '22 Best resources to learn postgreSQL ? #help #beginners #postgres #discuss 5 * Deepgram x DEV Hackathon Project DeepXGrammar * Nikunj R. Prajapati Follow Apr 10 '22 Deepgram x DEV Hackathon Project DeepXGrammar #hackwithdg #python #opensource 9 *d The best free resources to get started with ethereum, dapps, solidity, NFTs & beyond in 2022 * Nikunj R. Prajapati Follow Jan 16 '22 The best free resources to get started with ethereum, dapps, solidity, NFTs & beyond in 2022 #blockchain #beginners #tutorial #ethereum 13 *d Finder * Nikunj R. Prajapati Follow Jan 13 '22 Finder #atlashackathon 2 *d Artificial Intelligence & ML * Nikunj R. Prajapati Follow Dec 12 '20 Artificial Intelligence & ML #algorithms #machinelearning 2 *d RUBY ON RAILS IN 2020 * Nikunj R. Prajapati Follow Dec 10 '20 RUBY ON RAILS IN 2020 #ruby #rails #webdev 11 *d YouTube Channel * Nikunj R. Prajapati Follow Dec 8 '20 YouTube Channel #javascript #react #python #beginners 12 reactions 5 comments 1 *onsor Neon * ",
    "url": "https://dev.to/leo1612d"
  },
  {
    "body": "* Follow Report Abuse Travis I Build Things For The Web | Web Developer & Front-End Enthusiast Perth, Australia Joined on Mar 26, 2023 https://travislord.xyz Education Self-Taught | Online Courses 8 Week Writing Streak The st* * * * Caring Commenter Rewarded for leaving exceptionally thoughtful comments across many different DEV members’ posts. Got it Wisdom Whisperer Rewarded for giving exceptionally helpful advice to new DEV members. Got it Frontend Challenge Completion Badge Awarded for completing at least one prompt in a Frontend Challenge. Thank you for participating! 💖 Got it Mod Welcome Party Rewarded to mods who leave 5+ thoughtful comments across new members’ posts during March 2024. This badge is only available to earn during the DEV Mod “Share the Love” Contest 2024. Got it we_coded Modvocate Rewarded to mods who leave 5+ thoughtful comments across #wecoded posts during March 2024. This badge is only available to earn during the DEV Mod “Share the Love” Contest 2024. Got it React Awarded to the top React author each week Got it One * one year. Got it JavaScript Awarded to the top JavaScript author each week Got it 8 * Consistency pays off! Be an active part of our community by * 8 straight weeks. Earn the 16 Week Badge next. Got it CSS Awarded to the top CSS author each week Got it * *. Got it *le week. Got it Show all 16 badges More info about @lilxyzz GitHub Repositories clay-theme Image-centric Gatsby theme for publishers, portfolios, photographers blogs and more. JavaScript • 39 stars holo-theme A visually captivating and lightning-fast theme crafted on the Gatsby framework. JavaScript • 25 stars nextemp A bespoke template for your next web project. NexTemp is a personal portfolio and blog theme built around Next.js. JavaScript • 6 stars Skills/Languages HTML, CSS, JavaScript, TailwindCSS, Nextjs, Gatsby, React, Git Currently learning Next.js | Javascript | React Currently hacking on View my GitHub Available for Web and App development collaborations, keen on broadening my network. 24 posts published 108 comments written 25 tags followed Pinned 2024 Cheat Sheet Collection Travis Travis Travis Follow Mar 17 2024 Cheat Sheet Collection #webdev #* 675 reactions 86 comments 3 min read Web Development Tools and Resources Travis Travis Travis Follow Feb 25 Web Development Tools and Resources #beginners #webdev #tutorial #productivity 77 reactions 6 comments 4 min read The Best Sites For Website Themes and Templates in * Jan 24 The Best Sites For Website Themes and Templates in 2024 #webdev #beginners #frontend #codenewbie 77 reactions 12 comments 2 min read Crafting A Image-Centric Web App: A Guide to Clay Theme on Gatsby 5+ Travis Travis Travis Follow Jan 14 Crafting A Image-Centric Web App: A Guide to Clay Theme on Gatsby 5+ #webdev #javascript #tutorial #beginners 15 * Anthropic’s AI update can use a computer on its own! Travis Travis Travis Follow Oct 23 Anthropic’s AI update can use a computer on its own! #* #ai 13 reactions 1 c*ith Travis? * Travis. * Running a Website Speed Test Travis Travis Travis Follow Jul 14 Running a Website Speed Test #webdev #beginners #tutorial #learning 12 * Websites to Inspire Web Design and Development in * Jun 16 Websites to Inspire Web Design and Development in 2024 #webdev #tutorial #learning #opensource 10 * Must Join Discord Servers for Developers 💬 Travis Travis Travis Follow Jun 9 Must Join Discord Servers for Developers 💬 #webdev #learning #beginners #javascript 15 * Side Hustle Ideas for Developers in * Jun 7 Side Hustle Ideas for Developers in 2024 8 * Side Hustle Ideas for Developers in * May 19 Side Hustle Ideas for Developers in 2024 #webdev #opensource #learning #tutorial 188 reactions 18 comments 3 min read Mastering CSS Visually: The Best of Slaying The Dragon Travis Travis Travis Follow Apr 14 Mastering CSS Visually: The Best of Slaying The Dragon #webdev #beginners #tutorial #css 28 * Kick Start Your Next Project With Holo Theme Travis Travis Travis Follow Apr 10 Kick Start Your Next Project With Holo Theme #showdev #webdev #beginners #opensource 17 * Headless CMS: Directus vs Payload vs Strapi in * Apr 5 Headless CMS: Directus vs Payload vs Strapi in 2024 #programming #node #tutorial #webdev 16 * Glam Up My Markup: The Krustiest Form on Earth Travis Travis Travis Follow Mar 29 Glam Up My Markup: The Krustiest Form on Earth #devchallenge #frontendchallenge #webdev #css 14 * Incredible JavaScript Animation Libraries Travis Travis Travis Follow Mar 24 Incredible JavaScript Animation Libraries #webdev #javascript #react #tutorial 144 reactions 9 comments 4 min read The Ultimate Guide to Free SVG Generators Travis Travis Travis Follow Mar 10 The Ultimate Guide to Free SVG Generators #webdev #beginners #design #productivity 38 * CSS Tools for Enhanced Web Design Travis Travis Travis Follow Mar 3 CSS Tools for Enhanced Web Design #css #learning #webdev #beginners 163 * iOS 17.4 Update Ends PWA Support in the European Union Travis Travis Travis Follow Feb 18 iOS 17.4 Update Ends PWA Support in the European Union #webdev #javascript #pwa #ios 46 reactions 28 comments 2 min read Web Development Trends Shaping * Feb 11 Web Development Trends Shaping 2024 #webdev #beginners #javascript #learning 11 *d Netlify vs Vercel - 2024 Free Hosting Face-Off Travis Travis Travis Follow Jan 30 Netlify vs Vercel - 2024 Free Hosting Face-Off #webdev #beginners #tutorial #frontend 29 reactions 8 comments 4 min read Next.js vs Gatsby in * Jan 21 Next.js vs Gatsby in 2024 #webdev #javascript #tutorial #programming 15 *d My MacBook Setup For Development * Jan 9 My MacBook Setup For Development 2024 #tutorial #webdev #productivity #learning 20 * Clay Theme - Unlocking the Power of Gatsby v5+ and NetlifyCMS with Clay Theme Travis Travis Travis Follow Nov 12 '23 Clay Theme - Unlocking the Power of Gatsby v5+ and NetlifyCMS with Clay Theme #gatsby #netlify #javascript #webdev 11 * How to set up HSTS on Netlify Travis Travis Travis Follow Sep 2 '23 How to set up HSTS on Netlify #webdev #* 11 * * ",
    "url": "https://dev.to/lilxyzz"
  },
  {
    "body": "* Follow Report Abuse Leandro Lima Hey there! I'm Leandro Lima, a Software Developer passionate about technology and programming. I'm mostly experienced with backend and I've been using the Node.js Stack and currently learning GO. Fortaleza - CE, Brazil Joined on Dec 3, 2020 https://www.linkedin.com/in/leandrolima1999/ * Three * three years. ** * * * Two * two years. Got it *21 *21 * Hacktoberfest 2020 *20 * More info about @limaleandro1999 29 posts published 4 comments written 10 tags followed Deploy* and Docker Compose * Jun 8 '23 Deploy* and Docker Compose #kubernetes #docker #deployment #microservices 1 reaction Add C*h Leandro Lima? * Leandro Lima. * Building a Multi-Tenant SaaS Application with Node.js and PostgreSQL * Jun 6 '23 Building a Multi-Tenant SaaS Application with Node.js and PostgreSQL #node #postgres #tutorial #webdev 7 * Using Redis as a Cache for Node.js Applications * Jun 3 '23 Using Redis as a Cache for Node.js Applications #redis #node #cache #backend 5 * Building a Serverless Application with Node.js and AWS Lambda * Jun 1 '23 Building a Serverless Application with Node.js and AWS Lambda #serverless #node #aws #lambda * Integrating Elasticsearch with Node.js Applications * May 30 '23 Integrating Elasticsearch with Node.js Applications #elasticsearch #node #backend #optimization 8 *d Migrating from MySQL to PostgreSQL: A Step-by-Step Guide * May 27 '23 Migrating from MySQL to PostgreSQL: A Step-by-Step Guide #mysql #postgres #database #migration 19 * Building a Distributed System with gRPC and Kubernetes * May 25 '23 Building a Distributed System with gRPC and Kubernetes #grpc #kubernetes #microservices #docker 2 * An Introduction to Docker for Node.js Developers * May 20 '23 An Introduction to Docker for Node.js Developers #docker #node #containers #devops Add Comment 3 min read Using Apache Kafka with Node.js: A Tutorial on Building Event-Driven Applications * May 18 '23 Using Apache Kafka with Node.js: A Tutorial on Building Event-Driven Applications #kafka #node #eventdriven #* 3 min read Creating a GraphQL API with Node.js and PostgreSQL * May 16 '23 Creating a GraphQL API with Node.js and PostgreSQL #graphql #node #postgres 9 * Introduction to TypeScript: Adding Types to JavaScript * May 13 '23 Introduction to TypeScript: Adding Types to JavaScript Add Comment 3 min read An Introduction to OAuth 2.0 with Node.js and Passport.js * May 11 '23 An Introduction to OAuth 2.0 with Node.js and Passport.js #node #authentication #security #* 3 min read How to Install Go and PostgreSQL * May 9 '23 How to Install Go and PostgreSQL #tutorial #go #postgres #* An Introduction to RabbitMQ: A Messaging Broker for Node.js Applications * May 9 '23 An Introduction to RabbitMQ: A Messaging Broker for Node.js Applications #rabbitmq #node #microservices #messaging * Building a Simple CRUD Application with Go and PostgreSQL * May 6 '23 Building a Simple CRUD Application with Go and PostgreSQL #go #postgres #beginners #tutorial 8 * Building a RESTful API with TypeScript and Express * May 4 '23 Building a RESTful API with TypeScript and Express #restful #typescript #express #api * Getting Started with NestJS: A Node.js Framework for Building Scalable Applications * May 1 '23 Getting Started with NestJS: A Node.js Framework for Building Scalable Applications #nestjs #node #framework #scalable 3 react*ding a Real-Time Analytics Dashboard with Node.js, WebSocket, and Redis * Apr 29 '23 Building a Real-Time Analytics Dashboard with Node.js, WebSocket, and Redis #node #websocket #redis #analytics 13 reactions Ad*h Golang: A Beginner's Guide to Writing Go Code * Apr 28 '23 Getting Started with Golang: A Beginner's Guide to Writing Go Code Ad*h Golang: A Beginner's Guide to Writing Go Code * Apr 28 '23 Getting Started with Golang: A Beginner's Guide to Writing Go Code #go #* Ad*h Golang: A Beginner's Guide to Writing Go Code * Apr 28 '23 Getting Started with Golang: A Beginner's Guide to Writing Go Code Add Comment 3 min read Using Apache Kafka with Node.js: A Tutorial on Building Event-Driven Applications * Apr 27 '23 Using Apache Kafka with Node.js: A Tutorial on Building Event-Driven Applications 2 *d How to create a blog post using Node.js and OpenAI * Apr 27 '23 How to create a blog post using Node.js and OpenAI * a RESTful API with Node.js and MongoDB * Apr 26 '23 Creat* and MongoDB #blog #javascript #node #webdev 4 react*ding a Microservice Architecture with Node.js, TypeScript, and gRPC * Apr 26 '23 Building a Microservice Architecture with Node.js, TypeScript, and gRPC #blog #javascript #node #webdev 3 * Building a Microservice Architecture with Node.js, TypeScript, and gRPC * Apr 26 '23 Building a Microservice Architecture with Node.js, TypeScript, and gRPC * Hello World * Apr 26 '23 Hello World Add Comment 1 min read Hello World * Apr 26 '23 Hello World Add Comment 1 min read Hello, World! * Apr 26 '23 Hello, World! Add Comment 1 *onsor Neon * ",
    "url": "https://dev.to/limaleandro1999"
  },
  {
    "body": "* Follow Report Abuse Alicia Sykes I ❤️ Code London Joined on Nov 17, 2017 alicia@omg.lol http://aliciasykes.com Education YouTube Work Developer 3 Top 7 Awarded for having at least one post featured in the weekly \"must-reads\" list at any point. 🙌 Got it * Beloved Comment Awarded for making a well-loved comment, as voted on with 25 heart (❤️) reactions by the community. Got it Six * six years. Got it Bash Awarded to the top Bash author each week Got it Rust Awarded to the top Rust author each week Got it Trusted Member 2022 Awarded for being a trusted member in 2022. Got it Git Awarded to the top git author each week Got it *. Got it CSS Awarded to the top CSS author each week Got it *le week. Got it Five * five years. Got it *. Got it T*. Got it Show all 19 badges More info about @lissy93 GitHub Repositories web-check 🕵️‍♂️ All-in-one OSINT tool for analysing any website TypeScript • 18432 stars personal-security-checklist 🔒 A compiled checklist of 300+ tips for protecting digital security and privacy in 2024 TypeScript • 15364 stars dashy 🚀 A self-hostable personal dashboard built for you. Includes status-checking, widgets, themes, icon packs, a UI editor and tons more! Vue • 14932 stars awesome-privacy 🦄 A curated list of privacy & security-focused software and services Astro • 5802 stars portainer-templates 🚢 500+ 1-click Portainer app templates Python • 1428 stars AdGuardian-Term 🛡️ Terminal-based, real-time traffic monitoring and statistics for your AdGuard Home instance Rust • 820 stars dotfiles 🧰 ~ • My Đotfiles Shell • 235 stars twitter-sentiment-visualisation 🌍 Sentiment analysis over real-time social media data, rendering live charts to visualise trends CoffeeScript • 203 stars wapalyzer 🌐 Identify the technologies powering any website. This is a fork of the now deleted Wappalyzer project by @AliasIO and community. JavaScript • 197 stars email-comparison 📬 A quick comparison of private and / or secure email providers TypeScript • 96 stars git-in 🫶 \"git\" into opensource. A roadmap and set of guides to help you get started with open source Astro • 95 stars my-website ✨ My personal homepage. A developer portfolio site that aggregates all your projects, blog posts, and stats in one place Svelte • 90 stars espanso-config 🦄 My configuration files for the Espanso text expander Shell • 83 stars Brewfile 🍺 My list of packages to be installed on MacOS via Homebrew, for the ultimate dev setup Ruby • 81 stars awesome-selfhosted 🖥️ A list of Free Software network services and web applications which can be hosted on your own servers Fork 72 stars Lissy93 🥳 Hello World! 69 stars bug-bounties ⚔️ A compiled list of companies who have active programs for responsible disclosure Svelte • 51 stars anti-theft-charge 🔋 Safely charge your phone in public places without the worry of it being stolen Kotlin • 36 stars hasami-shogi 🀄 2-player tactical iOS game: Based on the traditional Japanese board game, Hasami Shogi (Swift V1.0) Swift • 32 stars go-apod 🌌 A CORS-enabled, no-auth API for NASA's Astronomy Picture of the Day Go • 21 stars pax 📸 A script which removes flashes from a video stream Python • 20 stars usermonkey 🐒 A complete user system written in PHP PHP • 14 stars happy-app 😃 Frictionless and anonymouse feedback system for agile teams JavaScript • 12 stars docker-tcpdump 🐳 Small Docker container to sniff the traffic of any other Docker container with tcpdump Dockerfile • 8 stars minesweper 🕹️ A remake of the classic minesweeper game for Android devices Java • 4 stars Skills/Languages Whatever goes! Currently learning Still trying to figure out how to use the bloody computer... Currently hacking on In my spare time, I'm mostly building free & open source apps focused on privacy, security, Linux and self-hosting. Available for If you've got an awesome project, drop me a line, and let's see if we can collaborate! 7 posts published 69 comments written 27 tags followed Pinned CLI tools you won't be able to live without 🔧 Alicia Sykes Alicia Sykes Alicia Sykes Follow Jan 19 '23 CLI tools you won't be able to live without 🔧 #bash #rust #tooling #productivity 1599 reactions 115 comments 34 min read Super Useful CSS Resources 🌈 Alicia Sykes Alicia Sykes Alicia Sykes Follow Dec 3 '22 Super Useful CSS Resources 🌈 #css #webdev #opensource #codenewbie 1810 reactions 126 comments 8 min read Fun with console.log() 💿 Alicia Sykes Alicia Sykes Alicia Sykes Follow Nov 20 '22 Fun with console.log() 💿 #webdev #javascript #tooling #productivity 678 reactions 50 comments 9 min read Browser Dev Tools: The Ultimate Guide 🔥 Alicia Sykes Alicia Sykes Alicia Sykes Follow Nov 14 '22 Browser Dev Tools: The Ultimate Guide 🔥 #webdev #javascript #tooling #productivity 266 reactions 25 comments 23 min read 50 ways to bring in extra cash as a developer 💰 Alicia Sykes Alicia Sykes Alicia Sykes Follow Nov 20 '23 50 ways to bring in extra cash as a developer 💰 #opensource #motivation #automation #beginners 832 reactions 79 comments 29 m*licia Sykes? * Alicia Sykes. * SvelteKit 1.0 - Building a personal blog, that shows your DEV posts 🦄 Alicia Sykes Alicia Sykes Alicia Sykes Follow Feb 20 '23 SvelteKit 1.0 - Building a personal blog, that shows your DEV posts 🦄 #svelte #tutorial #opensource #webdev 87 reactions 10 comments 12 min read 20 Git Commands you (probably) didn't know about 🧙‍♂️ Alicia Sykes Alicia Sykes Alicia Sykes Follow Dec 18 '22 20 Git Commands you (probably) didn't know about 🧙‍♂️ #git #github #tooling #programming 290 reactions 17 comments 14 *onsor Neon * ",
    "url": "https://dev.to/lissy93"
  },
  {
    "body": "* 10 Add reaction 4 Like 1 Unicorn 1 Exploding Head 1 Raised Hands 3 Fire 1 Jump to Comments 1 * Antonio | CEO at Litlyx.com Posted on Nov 7 4 1 1 1 3 We reach 750+ Stars on our Repository! #discuss #opensource #node #beginners Hi everyone, I'm Antonio, CEO at Litlyx. Today, I want to share a huge milestone with you. Over the years of my career as a Software Developer, I’ve gained so much from the Open-Source community. It’s likely that, in your codebase, you have 10 or more dependencies on open-source libraries in each tech stack you use. Thanks to this thriving community worldwide, we, as individuals, can grow our coding knowledge immensely. The past five months have been a rollercoaster of emotions for me. But now, it’s time to give back and pay the debt I've accumulated over the years from the open-source community. It feels surreal that my repository, Litlyx, is finally giving back what the community deserves. If you’re curious about Litlyx, check out the Readme for more details. I don’t post often, but I’m working hard to bring Litlyx to the next level. Thank you so much for reading! 👋 One last chance before you go! * It takes one minute to join DEV *. You get 3x the value by signing in instead of lurking Get started Top comments (1) * Oscar Oscar Oscar Follow Livestreaming my work here: https://www.youtube.com/@Oscar_CS Hi, I'm Oscar 👋. I'm 17, and I'm an aspiring full stack web dev primarily working with Django & Postgres as my backend. Email oscar.gaske.cs@gmail.com Location United States, Virginia Education Virtual Virginia, Online Highschool Joined May 9, 2023 • *e Congrats! 2 likes Like Reply * DEV Community * Trending in Open Source The community is discussing tools for building SaaS, exploring open-source projects, focusing on accessibility, and integrating AI with tools like pgai Vectorizer. 8 Tools You Need to Build Your First SaaS 🧙‍♂️ 🪄 Arindam Majumder ・ Oct 22 #webdev #beginners #opensource #javascript 9 Interesting Open Source Projects You Should Explore Right Now🥷🏻 🎉 Arindam Majumder ・ Oct 25 #opensource #webdev #beginners #javascript ✨8 Powerful Open-Source tools for Creating Accessible Web Apps ✨ Marketa Cizmar for Tolgee ・ Oct 25 #opensource #a11y #beginners #webdev 🚀 pgai Vectorizer: Automate AI Embeddings With One SQL Command in PostgreSQL Avthar Sewrathan for Timescale ・ Oct 29 #ai #vectordatabase #postgres #opensource 5 Open-Source Projects That Will Transform ⚡️ Your AI Workflow 💻 fast-d3v ・ Oct 29 #beginners #programming #ai #opensource Read next * Shefali - Nov 4 Getting the record containing the maximum value of a specified field #eg57 Judy - Oct 14 Qu'est ce que Dockploy ? Alizéa Lebaron - Oct 14 Introducing Hanko: the open-source alternative to clerk Manish Kr Prasad - Oct 18 Antonio | CEO at Litlyx.com Follow Litlyx.com | Analytics for Developers. Setup wth one line of code under 30 seconds. Your data will be displayed in an AI powered Dashboard. We are Open-Source & Completely self-hostable with Docker. Location Rome, Italy Pronouns He/Him Work CEO & Founder at Litlyx Joined May 30, 2024 More from Antonio | CEO at Litlyx.com We launched SupaCharts! Visualize Beautiful Charts from your Supabase Data. #supabase #discuss #beginners #database Show us your open-source Project #discuss #opensource #webdev #beginners Get back control of your data. Analytics Landscape in 2024. #discuss #webdev #opensource 👋 ** * ",
    "url": "https://dev.to/litlyx/we-reach-750-stars-on-our-repository-4802"
  },
  {
    "body": "* Follow Report Abuse Yang Li Senior Web Developer who loves Node.js & Python Hong Kong, China Joined on Jun 5, 2023 liyang51827@gmail.com Education Dalian University of Technology Pronouns He/Him More info about @liyang51827 Badges One * one year. Got it * 1 We*t * Skills/Languages JavaScript/TypeScript, Node.js, Python, Express, Django, React, Angular, MERN/MEAN stack, Ionic Framework, NuxtJS Currently learning Web3 technology 3 posts published 9 comments written 17 tags followed We're open now. Drape Fit is no longer available... Yang Li Yang Li Yang Li Follow Aug 11 '23 We're open now. Drape Fit is no longer available... 1 reaction Add C*h Yang Li? * Yang Li. * Thoughts on How to Prevent NoSQL Injection for Node.js Express Server Yang Li Yang Li Yang Li Follow Jun 5 '23 Thoughts on How to Prevent NoSQL Injection for Node.js Express Server #node #security #nosql #mongodb 2 * Using HTTP Strict Transport Security (HSTS) headers in Node.js server Yang Li Yang Li Yang Li Follow Jun 5 '23 Using HTTP Strict Transport Security (HSTS) headers in Node.js server #node #security #web #express 4 * * ",
    "url": "https://dev.to/liyang51827"
  },
  {
    "body": "* Follow Report Abuse LogRocket LogRocket's thoughts on all things frontend. Boston, MA Joined on Nov 11, 2019 Support email support@logrocket.com Employees 120 Meet the team Our story Frustrated by how difficult it was to understand their customers' experiences, Matt Arbesfeld and Ben Edelstein set out towards an audacious goal: make every experience on the web as perfect as possible. 818 posts published 1 member Solving the Node.js console.*ee Follow * CSR, SSR, pre-rendering: Which rendering technique to choose? * Nov 6 CSR, SSR, pre-rendering: Which rendering technique to choose? #webdev #nextjs 2 * * * Nov 6 * #webdev #node #rust 2 * Why jQuery 4 is a good reminder to stop using jQuery * Nov 5 Why jQuery 4 is a good reminder to stop using jQuery #webdev #javascript 7 reactions 5 comments 15 min read Advanced Next.js caching strategies * Nov 4 Advanced Next.js caching strategies #webdev #node #react 3 * A guide to the best email editing tools * Oct 31 A guide to the best email editing tools #webdev #* 7 min read The best React select component libraries * Oct 30 The best React select component libraries #webdev #react 3 * Using Polars in Rust for high-performance data analysis * Oct 30 Using Polars in Rust for high-performance data analysis #webdev #rust 8 * Simplifying CSS animations with the display and size properties * Oct 29 Simplifying CSS animations with the display and size properties #webdev #css 3 *ad A deep dive into React Fiber * Oct 27 A deep dive into React Fiber #webdev #react 1 reaction Add Comment 22 min read Automatic file-based routing in Vue.js * Oct 24 Automatic file-based routing in Vue.js #webdev #vue 10 reactions 1 comments 13 min read Understanding Redux: A tutorial with examples * Oct 23 Understanding Redux: A tutorial with examples #webdev #react #redux 6 reactions 1 comments 15 min read Inertia.js * * Oct 23 Inertia.js * #webdev #laravel #*t 17 min read VineJS vs. Zod for schema validation * Oct 22 VineJS vs. Zod for schema validation #webdev #node #typescript #*t 12 min read Six things you may not know about JavaScript * Oct 21 Six things you may not know about * 10 reactions 3 comments 10 min read How to style HTML with matcha.css * Oct 17 How to style HTML with matcha.css #webdev #css #html 1 reaction Add Comment 14 min read Understanding and supporting zoom behaviors on the web * Oct 17 Understanding and supporting zoom behaviors on the web #webdev #css #html #*t 9 min read Using the built-in SQLite module in Node.js * Oct 16 Using the built-in SQLite module in Node.js #*t 15 min read How to use forwardRef in React * Oct 15 How to use forwardRef in React #webdev #react 2 * Playwright Extra: extending Playwright with plugins * Oct 15 Playwright Extra: extending Playwright with plugins #webdev #node Add Comment 12 min read Programmatically downloading files in the browser * Oct 11 Programmatically downloading files in the browser #webdev Add Comment 17 min read Storing and retrieving JavaScript objects in localStorage * Oct 8 Storing and retrieving JavaScript objects in localStorage #webdev #vanilla #javascript 6 *ad How to access file systems with React Native * Oct 8 How to access file systems with React Native #webdev #reactnative Add Comment 8 min read Creating custom mouse cursors with CSS * Oct 8 Creating custom mouse cursors with CSS #webdev #css 6 * Developing modals using only CSS and the Popover API * Oct 3 Developing modals using only CSS and the Popover API #webdev #css #html 4 *d Implementing Claude’s Artifacts feature for UI visualization * Oct 3 Implementing Claude’s Artifacts feature for UI visualization #webdev 2 * Tauri * * Oct 2 Tauri * #webdev #adoptionguide #rust 3 reactions 2 comments 13 min read Node.js performance hooks and measurement APIs * Oct 1 Node.js performance hooks and measurement APIs #*t 11 min read Leaflet * * Sep 27 Leaflet * #javascript #webdev 2 * Nitro.js: Revolutionizing server-side JavaScript * Sep 26 Nitro.js: Revolutionizing server-side * 3 reactions Add Comment 14 *onsor Neon * ",
    "url": "https://dev.to/logrocket"
  },
  {
    "body": "* 3 Add reaction 3 Like 0 *s 0 Fire 1 Jump to Comments 2 * Megan Lee for LogRocket Posted on Nov 6 • Originally published at blog.logrocket.com 3 * #webdev #node #rust Written by Rahul Padalkar✏️ NAPI-RS is a framework for building modules for Node.js using Rust, and we can leverage NAPI-RS for building modules that can perform tasks like image resizing, cryptographic operations, and more. I’m going to show you how to build an image resizer in Rust using NAPI-RS and expose it to our Node.js application. Then we will compare the performance of our resizer that we will have written in Rust with NAPI-RS to sharp. Set up a new NAPI-RS project To start using NAPI-RS, le’ts install the CLI tool. We will use this tool to bootstrap the project. To install the CLI tool, run the command below: # if you use npm npm i -g @napi-rs/cli # if you use yarn yarn global add @napi-rs/cli This will install the CLI tool globally. Now to start a new project, run this command: napi new You will be prompted for some inputs. It will ask for details like the package name, enabling GitHub actions, and the platforms you want to target. Since we are building an image resizer, we will name the package image-resizer, and we can skip GitHub actions. For target platforms, we can select all major operating systems like Linux, Windows, and macOS. Remember — for NAPI-RS to create a project successfully, Rust needs to be installed on your machine. Here are two important files in the project folder structure that we will edit in the next steps: src/lib.rs — This is the file where we will write our Rust code. We will define a function here later that will be used for resizing images ./Cargo.toml — This file gives more information about the Rust project. We will add a few crates, or Rust’s equivalent of npm packages, to help us resize images With that out of the way, let’s start adding code to src/lib.rs. Building an image resizer in Rust using the image crate We will use the image crate in Rust to resize images. To install the crate, head to the ./Cargo.toml file, and add the image crate in the dependencies section: ...... ....... [lib] crate-type = [\"cdylib\"] [dependencies] # Default enable napi4 feature, see https://nodejs.org/api/n-api.html#node-api-version-matrix napi = { version = \"2.12.2\", default-features = false, features = [\"napi4\"] } napi-derive = \"2.12.2\" image = \"0.24.6\" // add this line [build-dependencies] napi-build = \"2.0.1\" ........ ....... Now let’s add code to src/lib.rs file: use image::GenericImageView; use std::fs; use std::path::Path; #[macro_use] extern crate napi_derive; #[napi] pub fn resize_image(image_dir: String) { for entry in fs::read_dir(image_dir).expect(\"Failed to read directory\") { let entry = entry.expect(\"Failed to get directory entry\"); let path = entry.path(); process_image(&path) } } pub fn process_image(path: &Path) { let image_reader = image::io::Reader::open(path).expect(\"Failed to open image\"); let image_format = image_reader .format() .expect(\"Failed to determine image format\"); let img = image_reader.decode().expect(\"Failed to decode image\"); let (width, height) = img.dimensions(); println!( \"Processing image: {:?} ({}x{})\", path.file_name().unwrap(), width, height ); let resized_img = img.resize(800, 600, image::imageops::FilterType::Lanczos3); let new_path = path.with_file_name(format!( \"{}_resized.{}\", path.file_stem().unwrap().to_string_lossy(), path.extension().unwrap().to_string_lossy() )); resized_img .save_with_format(new_path, image_format) .expect(\"Failed to save image\"); } There are quite a few things to unpack here. Let’s start from the top: use image::GenericImageView; use std::fs; use std::path::Path; We start with some import statements. We will use the imported code for accessing images in a folder and resizing them: #[napi] pub fn resize_image(image_dir: String) { for entry in fs::read_dir(image_dir).expect(\"Failed to read directory\") { let entry = entry.expect(\"Failed to get directory entry\"); let path = entry.path(); process_image(&path) } } We define the resize_image function here that takes one input, a path to an image directory (string). The code in this function iterates over all the images in the image directory and passes them one by one to the process_image function. We have added #[napi] macro at the top of the function to make it callable in JavaScript: pub fn process_image(path: &Path) { let image_reader = image::io::Reader::open(path).expect(\"Failed to open image\"); let image_format = image_reader .format() .expect(\"Failed to determine image format\"); let img = image_reader.decode().expect(\"Failed to decode image\"); let (width, height) = img.dimensions(); println!( \"Processing image: {:?} ({}x{})\", path.file_name().unwrap(), width, height ); let resized_img = img.resize(1280, 720, image::imageops::FilterType::Lanczos3); let new_path = path.with_file_name(format!( \"{}_resized.{}\", path.file_stem().unwrap().to_string_lossy(), path.extension().unwrap().to_string_lossy() )); resized_img .save_with_format(new_path, image_format) .expect(\"Failed to save image\"); } This function takes in a path to an image. The image is opened using the Reader from the image crate, and it returns a Reader upon successfully opening the file. The code throws an error if it fails to open the image. We determine the image format and then find the image dimensions. We then read the image data using the decode method on the Reader. To resize the image, we call the resize method on the output of the decode method. We pass in the width and the height, and we pass the filter we want to use to resize the image. We then create a new path for the new image and save the image there. Now that we know what the code does, let’s compile the Rust code to a Node.js module. Building the Node.js module For building the Rust code into a consumable Node.js module, we run the following: # for npm npm run build # for yarn yarn build This will take a while when building for the first time. Once this runs successfully, we can see a few files being generated. The command will generate an index.js along with type definitions generated in index.d.ts. You will also see a .node add-on generated. This is a Node.js add-on binary file. This Node add-on will be referenced in the index.js file. Using the compiled code to resize images Now that we have everything, let’s try to call the resize_images function in Node.js. For this, let’s first create a resizer.js file at the root of our project. Then add the code below: const { resizeImages } = require(\"./index.js\"); function resize() { const images = \"./images-100\"; resizeImages(images); } resize(); This code will import the resizeImages function, the one that we exposed from Rust. We call the function by passing to it the path of the folder that has images. Performance comparison with sharp Now let’s compare the performance of our image resizer with the one available in the sharp npm package. Let’s first create a node project to install the sharp library and then write code for our image resizer: mkdir sharp-image-resizer cd sharp-image-resizer npm init npm i sharp Now let’s create a resizer.js file and add the code below: const sharp = require(\"sharp\"); const fs = require(\"fs\"); const path = require(\"path\"); const imageDir = \"./images-100\"; const resizeImage = async (input, output) => { try { const inputPath = path.join(imageDir, input); const outputPath = path.join(imageDir, output); await sharp(inputPath) .resize(1280, 720, { fit: sharp.fit.cover, // Ensure the image fills the 1280x720 box }) .toFile(outputPath); console.log(`Resized image saved to: ${outputPath}`); } catch (error) { console.error(`Error resizing image: ${inputPath}`, error); } }; // Process all images in the input directory const processImages = () => { fs.readdir(imageDir, (err, files) => { files.forEach((file) => { const [name, ext] = file.split(\".\"); const outputName = `${name}_resized.${ext}`; resizeImage(file, outputName); }); }); }; // Start processing processImages(); The code above is pretty straightforward as we define two functions: processImage — This function reads all the files in the directory and splits the name and the extension of the file. The function creates a new name for the output file and passes the new name and file to the resizeImage function resizeImage — This function uses the sharp library to resize the image to a 1280 by 720 image and then saves it in the same directory with the new name We will test both the resizers we built with 100 images, 1,000 images, and 10,000 images. For downloading images, we will use Lorem Picsum. We will write a small shell script that will call the Picusm API multiple times to download the image. So, create a download_image.sh file, and modify it to have the content below: #!/bin/bash # Directory to save downloaded images output_dir=\"./images-10000\" # Number of images to download num_images=10000 # Create output directory if it doesn't exist mkdir -p \"$output_dir\" # Loop to download images for i in $(seq 1 $num_images); do # Download 1920x1080 image and save it with a unique name wget \"https://picsum.photos/1920/1080\" -O \"$output_dir/image_$i.jpg\" echo \"Downloaded image_$i.jpg\" done echo \"Downloaded $num_images images to $output_dir\" We can modify the num_images variable to download the desired number of images from the Picsum service. Below is the comparison in terms of milliseconds between sharp and our resizer: Number of Images NAPI-RS sharp 100 12315.7328 5840.7068 1000 123615.5546 57942.932 10000 707559.3812 551380.5028 As you can see, sharp is also double the speed compared to our resizer. To make things a bit more interesting, we will use a rayon crate from Rust that allows us to run code in a parallel fashion. To do that, we will edit the Cargo.toml file: ...... ....... [lib] crate-type = [\"cdylib\"] [dependencies] # Default enable napi4 feature, see https://nodejs.org/api/n-api.html#node-api-version-matrix napi = { version = \"2.12.2\", default-features = false, features = [\"napi4\"] } napi-derive = \"2.12.2\" image = \"0.24.6\" rayon = \"1.7\" // add this line [build-dependencies] napi-build = \"2.0.1\" ........ ....... We will also update src/lib.rs file: #![deny(clippy::all)] use image::{DynamicImage, GenericImageView, ImageFormat}; use rayon::prelude::*; use std::fs; use std::path::Path; #[macro_use] extern crate napi_derive; #[napi] pub fn resize_images(image_dir: String) { // Collect all image paths let image_paths: Vec<_> = fs::read_dir(image_dir) .expect(\"Failed to read directory\") .filter_map(Result::ok) .map(|entry| entry.path()) .collect(); // Process images in parallel image_paths.par_iter().for_each(|path| { process_image(path); }); } fn process_image(path: &Path) { // Load the image along with its format let image_reader = image::io::Reader::open(path).expect(\"Failed to open image\"); let image_format = image_reader .format() .expect(\"Failed to determine image format\"); let img = image_reader.decode().expect(\"Failed to decode image\"); // Resize the image let resized_img = img.resize(1280, 720, image::imageops::FilterType::Lanczos3); // Save the resized image in the original format let output_path = path.with_file_name(format!( \"{}_resized.{}\", path.file_stem().unwrap().to_string_lossy(), path.extension().unwrap().to_string_lossy() )); resized_img .save_with_format(output_path, image_format) .expect(\"Failed to save image\"); println!(\"Processed {:?}\", path); } Here we change the code flow a bit. We collect all image paths, iterate over them in parallel, and pass them to the process_image function. Line numbers 11 to 15 collect all the paths in a vector, and then we use the par_iter function from rayon to iterate over the paths and pass them to the process_image function. Now let’s try to compare the performance of all three resizers we have built so far: Number of images NAPI-RS w/o Rayon (in ms) sharp (in ms) NAPI-RS with Rayon (in ms) 100 12315.7328 5840.7068 2821.2008 1000 123615.5546 57942.932 24518.4134 10000 707559.3812 551380.5028 266075.6984 We have significantly reduced the time by adding Rayon. With rayon, our resizer is almost double the speed of sharp and at least four times faster than the previous version. There are two important things to note: Performance.now() was used to calculate the time required for resizing the images in all three resizers All three resizers were run on a 2019 MacBook Pro, 16GB RAM, Core i7 processor Conclusion In this post, we looked at NAPI-RS and how to create Node.js add-ons using Rust. We created a image resizer add-on and compared it against sharp and its associated results. We then optimized our image resizer to utilize CPU power fully, and we saw drastic changes in the results. NAPI-RS is a really powerful tool to build fast and efficient Node.js add-ons. Thanks for reading! 200’s only ✔️ Monitor failed and slow network requests in production Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, try LogRocket. LogRocket is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause. LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. Start monitoring for free. CodeRabbit Promoted * Cut Code Review Time & Bugs in Half with CodeRabbit Boost your team with AI-driven PR feedback! CodeRabbit offers instant PR summaries, smart code walkthroughs, 1-click commit suggestions, and seamless code quality & security checks, reducing tech debt. Ship faster with fewer bugs. Try CodeRabbit free today! Learn more Top comments (1) * Jones Beach Jones Beach Jones Beach Follow Hello! I help experienced developers master intermediate-to-advanced Rust and Python concepts so they can build their own libraries and complex systems. Joined Sep 30, 2024 • *e I'm really fascinated by the interface between Rust and other languages at the moment, so I enjoyed reading how you used #[napi] here. Thanks for sharing! 1 like Like Reply * Radar Promoted * Up to 90% less expensive than Google Maps 📉 Cut your Google Maps or Mapbox bill in half with our cost-effective geocoding APIs, autocomplete APIs, routing APIs, and base maps. Start for free Read next * Abhishek Jaiswal - Nov 5 Setting Up a Node.js, TypeScript, and Express Project Harshal Ranjhani - Oct 27 Blur page body when hover on Nav Bar Sandy Galabada - Oct 23 Understanding the Difference Between * Vijay Kumar - Oct 23 LogRocket Follow Rather than spending hours/days trying to reproduce an elusive bug, you can see the reproduction in seconds with LogRocket. Try it yourself — get in touch today. Demo LogRocket More from LogRocket CSR, SSR, pre-rendering: Which rendering technique to choose? #webdev #nextjs Why jQuery 4 is a good reminder to stop using jQuery #webdev #javascript Advanced Next.js caching strategies #webdev #node #react Heroku *references R* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/logrocket/building-nodejs-modules-in-rust-with-napi-rs-1kna"
  },
  {
    "body": "* 1 A*ead 0 * 2 * Megan Lee for LogRocket Posted on Nov 7 • Originally published at blog.logrocket.com 1 *ion error #webdev #node Written by Joseph Mawa✏️ The co* is one of the common errors you will encounter in JavaScript and Node. It is a TypeError and its error message usually takes the following forms: * console.time(...) is not a function The first error message is usually caused by accidentally modifying the built-in console object or reassigning the console.time property to a value that is not a function. One of the main causes of the second error is the way JavaScript internally handles Automatic Semicolon Insertion (ASI). Continue reading to learn more about the two variants of this error, their possible causes, and how to debug them. The examples in this article are available in this GitHub repository. Most of the code that throws errors has been commented out. To view the error messages, you’ll need to uncomment the code before running it. What is console.time? The console.time, or console.time(), function is one of the built-in timing functions in Node.js. You can access it via the console interface like in the browser environment. As its name suggests, console.time is used to time the duration that has elapsed between two events. Internally, it uses Node's high-resolution timer of the built-in process object: console.time(\"foo\"); The console.time function takes an optional string label as an argument and returns undefined. If you don't explicitly pass a label, the default label will be set to 'default'. Internally, Node creates a Map data structure whose key is the string label you pass to console.time and its value is the high-resolution time. When you call console.timeEnd, Node gets the duration that has elapsed between the two points in time. You will get a warning if you invoke console.time with the same argument more than once: >console.time(\"foo\"); console.time(\"foo\"); The code above will emit the following warning: (node:16923) Warning: Label 'foo' already exists for console.time() The console.time function is always used with console.timeEnd, which, as its name suggests, stops the timer and calculates the duration of time that has elapsed since console.time was called: console.time(\"foo\"); setTimeout(() => { console.timeEnd(\"foo\"); }, 1_000); console.timeEnd takes the string passed to console.time as its first argument. It logs the string label and the duration of time that has elapsed since console.time was called in appropriate units and human-readable format: foo: 1.007s Another function in the console family of functions is the console.timeLog function. It also takes the string label passed to console.time as its first argument and any number of additional arguments. It logs the duration that has elapsed along with the additional arguments. Unlike console.timeEnd, console.timeLog doesn't end the timer: console.time(\"foo\"); setTimeout(() => { console.timeLog(\"foo\", \"Inside setTimeout\"); console.timeEnd(\"foo\"); }, 1_000); If you run the code above, you will get the output below. The elapsed time may be slightly different for you: foo: 1.005s Inside setTimeout foo: 1.009s Common causes of the co* There are several possible causes of the co* in JavaScript. We’ll explore some of them in this section. Node.js version incompatibility The console.time and console.timeEnd functions have shipped since Node v0.1.104. Therefore, version incompatibility may be the least likely reason for the co*. Nevertheless, you need to be sure you're using the right Node version, especially with their corresponding console.timeLog function. The console.timeLog function shipped much later with Node v10.7.9. Accidentally modifying the console interface In JavaScript, most built-in objects and functions are mutable and extensible by design. Therefore, it is not unusual to accidentally modify them. You can use the Object.getOwnPropertyDescriptor static method to determine whether a given property of a built-in JavaScript object can be re-assigned, deleted, or modified: const propertyDescriptor = Object.getOwnPropertyDescriptor(console, \"time\"); console.log(propertyDescriptor); The Object.getOwnPropertyDescriptor static method takes an object and a property as arguments and returns a property descriptor object. The code above will log the object below on the terminal: { value: [Function: time], writable: true, enumerable: true, configurable: true } You will notice that the writable property is set to true. Therefore, it is possible to accidentally reassign or modify the value of the console.time property without JavaScript throwing an error. Let us now reassign console.time to undefined and later call it to trigger the co* like in the example below: console.time = undefined; console.time(\"foo\"); After the reassignment, calling console.time throws the error like the one shown below: /path/to/file/index.js:2 console.time(\"foo\"); ^ TypeError: * at Object.<anonymous> (/path/to/file/index.js:2:9) at Module._compile (*:1254:14) at Module._extensions..js (*:1308:10) at Module.*oader:1117:32) at Module._*oader:958:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:23:47 Node.js v18.15.0 Instead of triggering the above error by reassigning its value, you could also modify the console object by deleting the console.time property so that it is removed entirely: delete console.time; console.time('foo'); Such modification of built-in methods and objects could be accidental or by a third-party package. Automatic Semicolon Insertion (ASI) and Immediately Invoked Function Expression (IIFE) Some JavaScript statements require semicolons to be syntactically correct. However, you don't need to add them explicitly because JavaScript has the built-in Automatic Semicolon Insertion (ASI) feature that fixes some invalid tokens out of the box. ASI makes the language easier to learn and use. Therefore, it is not uncommon for programmers to exclusively rely on it instead of explicitly adding semicolons themselves. However, this can sometimes lead to unexpected behavior and hard-to-debug errors. A typical example is when a function invocation without a semicolon at the end of the line is followed by an Immediately Invoked Function Expression (IIFE) like in the example below: console.time('foo') (function() {})() You will get the console.time(...) is not a function error if you execute the code above: /path/to/file/index.js:1 console.time(\"foo\")(function () {})(); ^ TypeError: console.time(...) is not a function at Object.<anonymous> (/path/to/file/index.js:1:20) at Module._compile (*:1254:14) at Module._extensions..js (*:1308:10) at Module.*oader:1117:32) at Module._*oader:958:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:23:47 Node.js v18.15.0 The above error was thrown because console.time returned undefined and we tried to invoke undefined as a function with function() {} as argument. If you use code formatting tools like Prettier, the code we executed above will be formatted into the following: console.time(\"foo\")(function () {})(); You will notice that the error message in the above stack trace is console.time(...) is not a function. On the other hand, the error message in the stack trace after reassigning console.time to a non-function value in the previous sub-section wa*on. The difference between the two error messages is the pair of parentheses and the three periods between them. The error in the previous sub-section was due to reassigning console.time to a non-function value while the above error is due to invoking the return value of console.time, undefined. Therefore, you need to explicitly insert a semicolon to indicate that console.time(\"foo\") is a separate logical statement from the IIFE: console.time(\"foo\"); (function () {})(); Executing JavaScript code in a runtime environment that doesn't have the console.time API The console interface is not part of JavaScript; it is part of the web API. However, Node implements many web APIs, including the console API, for compatibility with the web. Chances are that the runtime in which you're executing the JavaScript code hasn't implemented the console.time function. Therefore, you may encounter the co* if you execute JavaScript code in a runtime environment that has not implemented the browser-compatible console.time method. Troubleshooting the co* Debugging the co* is similar to debugging other JavaScript errors. If you're using a text editor like VS Code, you can add breakpoints at appropriate locations and launch the Node.js debugger. To know where to add breakpoints, it is always helpful to pay close attention to the stack trace. It will always show a detailed trace of the function or method calls that led to the offending line of code. You can then add breakpoints at various locations and step through the code one line at a time. As an example, let's assume you have the code below in your project: try { console.time = \"foo\"; console.time(); } catch (error) { console.log(error.stack); } The error stack logged to the console as a result of executing the code above will look like so: TypeError: * at Object.<anonymous> (/path/to/file/index.js:3:11) at Module._compile (*:1254:14) at Module._extensions..js (*:1308:10) at Module.*oader:1117:32) at Module._*oader:958:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:23:47 You will notice the detailed trace of the method and function calls that led to the error. It displays the file path as well as the line and column numbers. You can use that information to add breakpoints and start debugging your code. Conclusion Debugging and dealing with errors is inevitable when writing code. In JavaScript, most built-in objects, functions, and methods are mutable by design. Therefore, it is not uncommon to accidentally mutate built-in objects like the console interface, resulting in hard-to-debug errors. One of these errors i*on. As already explained, one of the possible causes of this error is mutating the console object or reassigning the console.time property to a non-function value. This could be accidentally or intentionally by a third-party package. On the other hand, this error could be caused by exclusively relying on JavaScript's built-in Automatic Semicolon Insertion feature to insert semicolons for you. As highlighted above, you will get console.time(...) is not a function error if you have console.time and an Immediately Invoked Function Expression in consecutive lines without a semicolon separating them. Therefore, it's a good practice to be explicit and insert semicolons when writing JavaScript code. 200’s only ✔️ Monitor failed and slow network requests in production Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, try LogRocket. LogRocket is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause. LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. Start monitoring for free. Heroku *references R* Top comm* next CodeBehind 3.7 Released elanatframework - Oct 16 Streamlit Part 4: Mastering Media Elements - Logos, Images, Videos, and Audio James - Oct 16 Dockerize PERN-TypeScript App Using Prisma ORM With Docker Compose Abdul Ahad Abeer - Oct 16 Webdev & AI Weekly News TheDev - Oct 29 LogRocket Follow Rather than spending hours/days trying to reproduce an elusive bug, you can see the reproduction in seconds with LogRocket. Try it yourself — get in touch today. Demo LogRocket More from LogRocket CSR, SSR, pre-rendering: Which rendering technique to choose? #webdev #nextjs * #webdev #node #rust Why jQuery 4 is a good reminder to stop using jQuery #webdev #javascript Hazelcast Promoted * Hazelcast covers all your stream processing needs. Accelerate app development and deployment to realize your real-time potential. Learn more 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/logrocket/solving-the-nodejs-consoletime-is-not-a-function-error-5ea1"
  },
  {
    "body": "* Follow Report Abuse Lucas Pereira de Souza Sou Desenvolvedor Full-Stack, graduado em Análise de Sistemas, com ampla experiência em tecnologias modernas e um forte alinhamento com a filosofia de Código Aberto, tão valorizada pela comunidade Joined on Apr 14, 2023 lucaspereiradesouzat@gmail.com More info about @lucaspereiradesouzat Badges One * one year. Got it * 19 * 13 tags followed Guia Comp* Souza * Follow Nov 10 Guia Comp* #node 1 reaction Add C*ith Lucas Pereira de Souza? * Lucas Pereira de Souza. * Criando uma Pipeline CI/CD com GitHub Actions para Projetos Node.js com TypeScript e Docker * L* 3 Criando uma Pipeline CI/CD com GitHub Actions para Projetos Node.js com TypeScript e Docker #github #githubactions #typescript #cicd 11 *d Autenticação com JWT no Frontend e Backend: Implementando com Node.js e ReactJS (em TypeScript) * L* 27 Autenticação com JWT no Frontend e Backend: Implementando com Node.js e ReactJS (em TypeScript) #webdev #javascript #node #typescript * Como Realizar a Integração com APIs do Google em Seu Projeto * L* 20 Como Realizar a Integração com APIs do Google em Seu Projeto #google #googlecloud #java*t 3 min read Integração do MongoDB com Node.js – Um Guia Completo * L* 12 Integração do MongoDB com Node.js – Um Guia Completo #mongodb #node #* 4 min read Construindo Single Page Applications (SPA) com Next.js * L* 6 Construindo Single Page Applications (SPA) com Next.js #javascript #typescript #development #nextjs * Snippets para TypeScript no VSCode * Lucas Pereira de Souza Follow Sep 29 Snippets para TypeScript no VSCode #vscode #javascript #typescript #* 1 min read Entendendo e Implementando Middlewares no Express.js * Lucas Pereira de Souza Follow Sep 21 Entendendo e Implementando Middlewares no Express.js #webdev #javascript #express #middleware * O Que São Webhooks e Como Utilizá-los Eficientemente * Lucas Pereira de Souza Follow Sep 15 O Que São Webhooks e Como Utilizá-los Eficientemente #webhook #* * Entendendo e Implementando Design Patterns em TypeScript * Lucas Pereira de Souza Follow Sep 8 Entendendo e Implementando Design Patterns em TypeScript #webdev #designpatterns #typescript #javascript * Introdução ao Git: Como Versionar e Gerenciar Seu Código de Forma Eficiente * Lucas Pereira de Souza Follow Sep 1 Introdução ao Git: Como Versionar e Gerenciar Seu Código de Forma Eficiente #git #gitflow #github #versionamento * Principais Algoritmos em TypeScript: Implementações e Aplicações * Lucas Pereira de Souza Follow Aug 23 Principais Algoritmos em TypeScript: Implementações e Aplicações #typescript #algorithms #webdev #* Como Criar e Publicar Pacotes TypeScript no NPM * Lucas Pereira de Souza Follow Aug 17 Como Criar e Publicar Pacotes TypeScript no NPM #typescript #npm #javascript #node 4 *d Como Integrar a API do ChatGPT com Node.js * Lucas Pereira de Souza Follow Aug 12 Como Integrar a API do ChatGPT com Node.js #openai #chatgpt #*n read Como Realizar Testes de Carga com k6 * Lucas Pereira de Souza Follow Aug 3 Como Realizar Testes de Carga com k6 #k6 #javascript #webdev #testing * Utilizando Redis e Node.js com Docker: Um Guia Completo * Lucas Pereira de Souza Follow Aug 3 Utilizando Redis e Node.js com Docker: Um Guia Completo #redis #docker #node #*t 3 min read Implementando Apache Kafka com Docker e nodejs: Passo a Passo para Iniciantes * Lucas Pereira de Souza Follow Jun 24 Implementando Apache Kafka com Docker e nodejs: Passo a Passo para Iniciantes #docker #node #javascript #kafka 2 * Introdução ao Teste Automatizado com Jest: Como Começar a Escrever Testes Eficientes * Lucas Pereira de Souza Follow May 9 Introdução ao Teste Automatizado com Jest: Como Começar a Escrever Testes Eficientes #jest #javascript #beginners #* 3 min read Escrevendo Código Elegante: A Importância do Clean Code na Programação * Lucas Pereira de Souza Follow Jan 29 Escrevendo Código Elegante: A Importância do Clean Code na Programação Add Comment 3 *onsor Neon * ",
    "url": "https://dev.to/lucaspereiradesouzat"
  },
  {
    "body": "* 1 A*ead 0 * 0 * Lucas Pereira de Souza Posted on Nov 10 1 Guia Comp* #node A mensageria em Node.js é uma prática essencial para criar sistemas escaláveis, resilientes e assíncronos, especialmente em arquiteturas baseadas em microsserviços. Este guia abrange desde os conceitos fundamentais até a implementação prática com bibliotecas populares como RabbitMQ e Kafka. 1. O que é Mensageria e Por que Utilizá-la? Mensageria é o processo de enviar, receber e gerenciar mensagens entre serviços ou componentes de software. É útil para: Desacoplamento: Permite que os serviços sejam independentes. Escalabilidade: Gerencia alta carga de tráfego distribuindo mensagens. Resiliência: Garante o processamento de mensagens mesmo em caso de falhas temporárias. Cenários Comuns de Uso: Fila de tarefas (background jobs). Comunicação entre microsserviços. Processamento em tempo real, como rastreamento de atividades. 2. Configurando um Ambiente Node.js Instale o Node.js: Certifique-se de ter o Node.js instalado na versão mais recente. Gerenciador de pacotes: Use npm ou yarn para instalar dependências. Dependências básicas: dotenv para variáveis de ambiente. amqplib ou kafkajs para comunicação com serviços de mensageria. npm install dotenv amqplib 3. Protocolos e Ferramentas de Mensageria RabbitMQ: RabbitMQ é um broker AMQP amplamente utilizado para troca de mensagens. Usado para filas e troca de mensagens (direct, topic, fanout, headers). Facilita padrões como RPC (Remote Procedure Call) e Pub/Sub. Apache Kafka: Ideal para streaming de dados em grande escala. Orientado a eventos. Alta performance para processamento em tempo real. Outras Opções: Redis Streams: Mais simples e rápido para casos específicos. MQTT: Usado em IoT para comunicação leve entre dispositivos. 4. Implementação Básica com RabbitMQ Passo 1: Configurar um Servidor RabbitMQ Instale e execute o RabbitMQ (local ou em container Docker): docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management Passo 2: Conectar ao RabbitMQ Utilize a biblioteca amqplib para criar uma conexão e uma fila. const amqp = require('amqplib'); async function connect() { try { const connection = await amqp.connect('amqp://localhost'); const channel = await connection.createChannel(); const queue = 'tasks'; await channel.assertQueue(queue, { durable: true }); console.log(`Waiting for messages in ${queue}`); channel.consume(queue, (msg) => { console.log(`Received: ${msg.content.toString()}`); channel.ack(msg); }); } catch (err) { console.error('Error:', err); } } connect(); 5. Implementação com Kafka Kafka requer a biblioteca kafkajs. Configuração Inicial Instale o Kafka localmente ou com Docker. Instale a biblioteca: npm install kafkajs Produtor e Consumidor com KafkaJS Produtor: const { Kafka } = require('kafkajs'); const kafka = new Kafka({ clientId: 'my-app', brokers: ['localhost:9092'] }); const producer = kafka.producer(); async function sendMessage() { await producer.connect(); await producer.send({ topic: 'test-topic', messages: [{ value: 'Hello KafkaJS' }], }); await producer.disconnect(); } sendMessage(); Consumidor: const consumer = kafka.consumer({ groupId: 'test-group' }); async function consumeMessages() { await consumer.connect(); await consumer.subscribe({ topic: 'test-topic', fromBeginning: true }); await consumer.run({ eachMessage: async ({ topic, partition, message }) => { console.log({ partition, value: message.value.toString(), }); }, }); } consumeMessages(); 6. Boas Práticas Gerenciar erros: Garanta que erros sejam tratados e mensagens reenviadas. Idempotência: Assegure que o processamento de mensagens seja idempotente. Monitore o sistema: Use ferramentas como Prometheus e Grafana para rastrear métricas. 7. Recursos Complementares Documentação oficial de RabbitMQ e KafkaJS. Estude Clean Architecture para organizar sistemas de mensageria【6】【7】【8】. Com estas etapas, você terá uma aplicação robusta para lidar com mensageria no Node.js, pronta para escalar e atender às demandas modernas. Se precisar de ajuda para um caso específico, sinta-se à vontade para perguntar! 👋 * * and it's free. Get started Top comments (0) * * * Svelte makes yo* Thoughts on ThoughtWorks Radar 2024 Jesse Warden - Nov 2 FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory on Digital OceanDroplet Sammy Barasa - Nov 2 * 🎨 Noureddine Belguinan - Nov 6 HTML meta 標籤中 viewport 的設定 codemee - Nov 2 Lucas Pereira de Souza Follow Sou Desenvolvedor Full-Stack, graduado em Análise de Sistemas, com ampla experiência em tecnologias modernas e um forte alinhamento com a filosofia de Código Aberto, tão valorizada pela comunidade Joined Apr 14, 2023 More from Lucas Pereira de Souza Autenticação com JWT no Frontend e Backend: Implementando com Node.js e ReactJS (em TypeScript) #webdev #javascript #node #typescript Como Realizar a Integração com APIs do Google em Seu Projeto #google #googlecloud #javascript #node Integração do MongoDB com Node.js – Um Guia Completo #mongodb #node #javascript #webdev Heroku *refer* 👋 *** * ",
    "url": "https://dev.to/lucaspereiradesouzat/guia-completo-mensageria-com-nodejs-2i90"
  },
  {
    "body": "* 194 Add reaction 166 Like 28 *s 0 Fire 12 Jump to Comments 218 * Luke Garrigan Posted on Aug 17, 2019 • Updated on Apr 19, 2020 166 28 Coding Games for Beginners Top 5 BEST games to code as a beginner! #javascript #node #webdev #beginners Introduction Coding doesn't get much more fun than coding up a game, there's something so satisfying about making stuff move on the screen, it's just bloody brilliant. So if you're completely new to programming or you're a Senior Dev many years into programming enterprising systems this blog should help you along your way into starting out with some game dev, or at the very least motivate you to give it a go. Just a quick note, I'm not actually a game developer my day-to-day is mainly coding large enterprising Java apps. But it is nice to come home and spend an evening coding something a little more fun. I released a tutorial series which I reference frequently in this blog on my website codeheir.com where I go through the evolution of games, so starting with Pong - 1972 then Space Race - 1973, etc. It's basically a step by step process of how to code the games using p5.js. But of course, the language you use to code the games isn't important, It's the concepts you learn from the actual process of doing it. Before you start coding If you already know the basics of programming in a game dev language I'd recommend having a stab at coding up the games before you read any of my step by step processes. If you get stuck then use the blogs as a reference to see if you're taking the same approach to tackling a problem as I did, most likely you'll find a better way 😅. If you're completely new to programming then I'd recommend having a look at Daniel Shiffman's - The Coding Train on Youtube, he has a brilliant series for beginners. Then when you begin to understand the basics follow along with my blog for the game you want to code. 1- Pong If you google “First game created” likely Pong will pop up, It’s not officially the first game to be created, but it is the first commercially successful. It was created in June 1972! Coding pong teaches you a tonne of key concepts for game development, here are a few: User input: Playing moving the paddle and/or paddles Hit detection: so the ball hitting the paddles and then Scoring system: you'll need to track the scores of both players Screen constraining: Preventing the paddle from leaving the screen For a step by step process on how to code pong - click here! 2 - Space Race One year on from pong came Space Race (also made by Atari). Space Race is very simple, it’s a two-player game, each player controls a rocket. The idea is to get to the top of the map having avoided the space debris to gain a point. The bar in the middle represents the time left of the game, the player with the most points at the end of the game wins! Coding Space Race teaches you some key concepts whilst also solidifying some concepts you learnt earlier from coding pong: Using arrays: To hold the debris you'll likely use an array to iterate over them and determine if they have collided with the rockets Timers: Using some kind of timer to determine when the game ends For a step by step process on how to code Space Race - click here! 3 - Jet Fighter Jet Fighter is a brilliant game released in 1975. It's pretty simple there's a black jet and a white jet the black jet shoots black bullets and the white jet shoots white bullets. The goal is to shoot the other player and gain a point. Key concepts from jet fighter: Screen wrapping: When bullets/jets go off the screen they wrap and come back on from the other side Shooting: Learning the maths behind projecting a bullet from your current angle Jet Fighter is where I got a lot of inspiration for my multiplayer space game Spaceheir. The idea was to create a mashup of Asteroids and Jet Fighter. Taking the Player vs environment aspects of Asteroids; shooting asteroids to gain levels. And the player vs player combat system of Jet Fighter. The game is completely opensource, here's the github For a step by step process on how to code Jet Fighter - click here! 4 - Space Invaders By far the most popular game released in 1978 was Space Invaders. In just 4 years it had grossed 3.8 billion, and it needs no introduction. Key concepts from coding up space invaders: Array removal: Removal or hiding of the aliens when you shoot them Array selection: Ensuring that only the bottom aliens are shooting Difficulty: The longer you play the game the faster the aliens get Random: Giving the aliens a random chance to shoot For a step by step process on how to code Space Invaders- click here! 5 - Monaco GP Monaco GP is an endless racer game released in 1979. This is a real fun one to code up, the seamless wrapping is what makes this game so important so it feels as though you are racing on an endless track. Note, the actual game doesn't look all that similar to my implementation. Key concepts from coding up Monaco GP Never-ending game: Making the track go on and on and on with a cool game dev trick! AI: Coding up the behavior of the other cars and also making them wrap too. Some honourable mentions: Blockade Blockade is a bloody brilliant game released in 1976 by Gremlin, it is basically PVP snake, but released a good 21 years before! It involves coding up a snake AI which is really fun, and also quite difficult. Canyon Bomber Canyon Bomber is a funny old game. It's not the most exciting but it has some fun coding features like making the blocks fall if a block underneath has been hit, and then subsequently making that block alter colour the match the level it's now at. Then what? When you feel comfortable coding any of the above games I'd recommend having a go at creating a simple multiplayer/online game. It's fun playing games you've created, it's even more fun inviting your friends and family to your server so you can own them 🤣. I have created a quick-starter Github repo for anyone who wants to code a multiplayer p5js game and node, just so you don't have to repeat a tonne of boilerplate: p5-multiplayer-game-starter Thank you I hope you've enjoyed this blog and I hope maybe it's helped a few of you. Get yourself involved in some game dev, it's very, very fun. Follow me on twitter if you don't want to miss out on absolutely brilliant programming insight: 🤣 @luke_garrigan Thank you, if you like my rambling check out my personal blogging site at https://codeheir.com/ This blog is sponsored by Code Canvases Make your room come alive with the coolest programming/coding canvases on the market. codecanvases.com is the number 1 seller for programming prints with 100% exclusively designed canvases. Get them now whilst they're 20% off!! * UI Libraries for Surveys and Forms SurveyJS lets you build a JSON-based *, giving you *. * ty*me analytics & more. Learn more Top comments (12) * Phil Ashby Phil Ashby Phil Ashby Follow 30+ years of tech, retired from an identity intelligence company, now part-time with an insurance broker. Dev community mod - mostly light gardening & weeding out spam :) Location Felixstowe, UK Education M.Eng (hons) Electronics, MIET, MBCS, AMCIISec, CEH Pronouns he/him Work Willis Towers Watson (aka WTW) part-time. Joined Apr 2, 2017 • Aug 17 '* Magnificent start! Honourable mention must also go to GORILLA.BAS, I learnt a lot reading the source for this :) archive.org/details/GorillasQbasic 5 likes Like Reply Luke Garrigan Luke Garrigan Luke Garrigan Follow English lad currently a C#/Java/VueJs/JavaScript/TypeScript engineer. Extra dribbling can be found at https://codeheir.com Portfolio found at https://lukegarrigan.com Email lukegarrigan8@gmail.com Location Kings lynn Education University Of East Angl*d Jun 6, 2019 • Aug 17 '19 Copy *! That’s really cool thank you for sharing😃 2 likes Like Reply Andriy Andriy Andriy Follow Joined Jun 16, 2024 • Jun * I was curious about online casinos and needed a reliable site that accepted Mastercard for deposits. I came across casinoonlineca.ca/payment-options/... and it turned out to be a fantastic resource. The site explains how to use Mastercard for online casino deposits and includes a list of trusted casinos. They also highlight numerous bonuses such as match bonuses, free spins, and seasonal promotions. Living in Canada, it’s great that they focus on Canadian-friendly casinos and CAD transactions. This website made it easy to find a good online casino and start playing right away. 1 like Like Reply tomford51 tomford51 tomford51 Follow I'm a programmer,live in Berlin Location Germany Work middle developer Joined Mar 13, 2021 • *e I want to share with you a wonderful discovery - the website vinfoothistory.vn.ua This is an excellent resource for those who want to make profitable purchases online. The site offers a wide selection of products, from household appliances to clothing, and all this at affordable prices. I liked that they offer detailed product descriptions and reviews, which helps a lot in choosing. The order always arrives on time and without problems. I recommend this site to everyone who appreciates quality and convenience! 1 like Like Reply Pedro Continental Pedro Continental Pedro Continental Follow Joined Aug 6, 2024 • Aug 6 Copy link Hide Report abuse Legalni onlajn kazina imaju licence priznatih regulatora i koriste sertifikovane igre, što potvrđuje njihovu iskrenost i pouzdanost. Da biste proverili legalnost kazina, obratite pažnju na informacije o licenci na veb lokaciji kazina. Godine betting bonuses serbia.predstavljene su aktuelne informacije o licenci, što potvrđuje njegovu legalnost i usaglašenost sa standardima industrije. 1 like Like Reply Nikolay Nikolay Nikolay Follow I am full stack web developer with Express and React. Author of \"Fake REST\" - the Mock API tool which helps to generate API stubs while back end not fully available. Email nickzherdev@gmail.com Location Vancouver, Canada Work Founder of Fake.REST at Fake.REST Joined Mar 1, 2019 • Aug 17 '19 Co*s! I would add a Xonix to this list. 3 likes Like Reply Luke Garrigan Luke Garrigan Luke Garrigan Follow English lad currently a C#/Java/VueJs/JavaScript/TypeScript engineer. Extra dribbling can be found at https://codeheir.com Portfolio found at https://lukegarrigan.com Email lukegarrigan8@gmail.com Location Kings lynn Education University Of East Angl*d Jun 6, 2019 • Aug 17 '* That was my intention with this blog 😄 3 likes Like Reply Archedbishop Archedbishop Archedbishop Follow Joined Mar 7, 2024 • Jul 31 *ese game projects look fascinating and just perfect for beginners who want to get into coding! I appreciate the detailed explanations and how approachable you make it sound. However, I'm more into playing ready-made games at kwg login rather than coding them. I just love the experience of diving into a game without worrying about the technical side of things. It's still cool to see how these games are made and maybe one day I'll give it a shot. For now, I'll stick to enjoying the end products and leave the coding to the enthusiasts. Thanks for sharing this list! It's a great resource for anyone looking to start their journey with some fun projects. 1 like Like Reply Areahints Areahints Areahints Follow Location Nigeria Joined Jan 13, 2018 • Aug 18 '* I feel so retro right now. Installing retroarch so I can play Metroid. 2 likes Like Reply Alexandru Muntean Alexandru Muntean Alexandru Muntean Follow Passionate about coding and new technologies. Location Cluj-Napoca Education Master's Degree in Software Engineering Work Java Software Developer Joined Aug 7, 2019 • Aug 17 '19 Co*, nice post. Maybe you will want to give it a try to Libgdx as well. It is a framework for doing game development using Java. 2 likes Like Reply Luke Garrigan Luke Garrigan Luke Garrigan Follow English lad currently a C#/Java/VueJs/JavaScript/TypeScript engineer. Extra dribbling can be found at https://codeheir.com Portfolio found at https://lukegarrigan.com Email lukegarrigan8@gmail.com Location Kings lynn Education University Of East Angl*d Jun 6, 2019 • Aug 17 '* Looks awesome, I’ll have to give it a go, thank you! 2 *ion (12 comments) * * 10+ Trending Animated UI Component Libraries 🔥 ThemeSelection - Nov 6 What’s the Best Way to Market Your SaaS as a Solo Developer? Dusan Petkovic - Oct 29 Large Language Models Mirror Creators' Ideological Biases, Raising Crucial Ethical Concerns Mike Young - Oct 29 🛠️ ¿Cómo actualizar tus paquetes de Go (Golang) de manera eficiente?🛠️ Roberto Morais - Oct 29 Luke Garrigan Follow English lad currently a C#/Java/VueJs/JavaScript/TypeScript engineer. Extra dribbling can be found at https://codeheir.com Portfolio found at https://lukegarrigan.com Location Kings lynn Education University Of East Angl*d Jun 6, 2019 More from Luke Garrigan Top 5 books EVERY programmer MUST read! 📚 #books #career #beginners The Game of Life #javascript What is BFS? (Breadth-first Search) #javascript #algorithms Sentry Promoted * The best way to debug slow web pages Tools like Page Speed Insights and Google Lighthouse are great for providing advice for front end performance issues. But what these tools can’t do, is evaluate performance across your entire stack of distributed services and applications. Watch video 👋 ** * ",
    "url": "https://dev.to/lukegarrigan/top-5-best-games-to-code-as-a-beginner-9n"
  },
  {
    "body": "* Follow Report Abuse Arthur Kh Senior Software Engineer, Mentor, and Tech Writer who loves to break features, create bugs and test in production Limassol, Cyprus Joined on Jun 19, 2021 work.masterarthur@gmail.com https://masterarthur.xyz Education National Aerospace University Pronouns He/Him Three * three years. Got it * *. ** * 2 Week Co* 1 We*t *t it Two * two years. G* @mainarthur Skills/Languages JavaScript/TypeScript Python3 Node.js Nest.js React.js 16 posts published 67 comments written 27 tags followed Pinned 📝 Writing a professional resume: Ultimate guide * Jan 23 📝 Writing a professional resume: Ultimate guide #career #tutorial #resume #guide 56 reactions 23 comments 9 min read Gently reminder to set up backups * Aug 22 '23 Gently reminder to set up backups #backup #productivity #development #motivation 9 * \"Мобильная\" разработка [Введение] * Aug 9 '23 \"Мобильная\" разработка [Введение] #tutorial #beginners #programming #learning 7 *d How to Automate Job Application with ChatGPT in 3 Steps * Jul 29 '23 How to Automate Job Application with ChatGPT in 3 Steps #chatgpt #javascript #typescript #tutorial 12 * What would you use instead of WordPress? * Feb 23 What would you use instead of WordPress? #discuss #* 47 reactions 40 comments 1 m*rthur Kh? * Arthur Kh. * Resume * Jan 11 Resume 14 *d Optimize your JS code in 10 seconds * Nov 21 '23 Optimize your JS code in 10 seconds #javascript #tutorial #programming 65 reactions 49 comments 3 min read Remote vs Hybrid vs Office * Nov 16 '23 Remote vs Hybrid vs Office #discuss #watercooler 8 reactions 6 comments 1 min read Challenging Bugs and Solutions of the Week: Share Your Stories! 🐞 * Oct 13 '23 Challenging Bugs and Solutions of the Week: Share Your Stories! 🐞 5 * My Database History * Sep 25 '23 My Database History #database #programming #testing #story 6 * \"Мобильная\" разработка. [Системы контроля версий, Git] * Sep 8 '23 \"Мобильная\" разработка. [Системы контроля версий, Git] #git #bash #github #tutorial 5 * \"Мобильная\" разработка. [Bash и основные утилиты терминала] * Aug 18 '23 \"Мобильная\" разработка. [Bash и основные утилиты терминала] #tutorial #bash #linux #* 5 min read \"Мобильная\" разработка. [Операционные системы и терминал] * Aug 17 '23 \"Мобильная\" разработка. [Операционные системы и терминал] #learning #beginners #linux #bash 8 *d \"Мобильная\" разработка. [Как работает интернет и схема работы клиент-серверных приложений] * Aug 13 '23 \"Мобильная\" разработка. [Как работает интернет и схема работы клиент-серверных приложений] #tutorial #beginners #webdev #* 1 min read \"Мобильная\" разработка. [Учимся верстать, HTML CSS] * Aug 12 '23 \"Мобильная\" разработка. [Учимся верстать, HTML CSS] #tutorial #html #css #* 4 min read \"Мобильная\" разработка. [Начальная установка, JS, TS, Python, Bash, C++] * Aug 12 '23 \"Мобильная\" разработка. [Начальная установка, JS, TS, Python, Bash, C++] #tutorial #beginners #programming #learning 6 *n * ",
    "url": "https://dev.to/mainarthur"
  },
  {
    "body": "* 1 A*ead 0 * 2 * Manoj Swami Posted on Aug 27 1 Setting Up PM2 for Multi-User Access on Ubuntu Instance #pm2 #ubuntu #node #javascript Managing Node.js applications on a production server often requires a process manager to ensure your applications run smoothly and recover automatically from crashes. PM2 is one of the most popular process managers for Node.js, offering powerful features such as process monitoring, log management, and cluster mode. If you're running an application on a Google Cloud Ubuntu instance, you might encounter a situation where PM2 processes are only visible to the user who started them. This can be problematic if your server has multiple users, such as developers, system administrators, or automated deployment scripts. In this blog post, we'll walk through the steps to configure PM2 as a system-wide service, making it accessible to all users on the server. Why Configure PM2 as a System-Wide Service? By default, PM2 runs as a process under the user who started it. This means if you SSH into your server as one user and start a PM2 process, that process will not be visible to another user who logs in via SSH. To address this, we can configure PM2 to run as a service at the system level. This approach has several advantages: Process Visibility: All users on the server can view and manage PM2 processes. Automatic Startup: PM2 will automatically start on system boot, ensuring your applications are always running. Centralized Management: Logs and process states are centralized, making it easier to manage your applications. Prerequisites Before we begin, ensure that you have the following: A Google Cloud Ubuntu instance. Node.js and npm installed on the instance. PM2 installed globally. Step 1: Install PM2 Globally To ensure that all users can access PM2, it should be installed globally. You can install PM2 globally using npm: sudo npm install -g pm2 This command installs PM2 in the global npm directory, making it available system-wide. Step 2: Set Up PM2 as a System-Wide Service Next, we need to set up PM2 to run as a service. This will allow PM2 to manage processes at the system level rather than being tied to a specific user session. Run the following command to generate the necessary startup script for PM2: pm2 startup This command detects the init system used by your Ubuntu instance (typically systemd) and provides a command that needs to be executed with sudo to configure PM2 as a system-wide service. The output will look something like this: [PM2] Init System found: systemd [PM2] To setup the Startup Script, copy/paste the following command: sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u <username> --hp /home/<username> Here, <username> should be replaced with the username of the user who initially set up PM2. This ensures that the PM2 process is linked to the correct user’s home directory. Step 3: Execute the Generated Command Copy the command provided in the output of the previous step and execute it. For example: sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u johndoe --hp /home/johndoe This command creates a systemd service that starts PM2 with the correct environment variables and user context. Step 4: Save the PM2 Process List If you already have processes running under PM2 that you want to persist across reboots, you need to save the current process list. This creates a dump file that PM2 will use to restore processes when the system starts: pm2 save The pm2 save command saves the current list of managed processes to a JSON file in ~/.pm2/dump.pm2. This file is loaded automatically when PM2 starts, ensuring your applications are resurrected after a reboot. Step 5: Enable the PM2 Service to Start on Boot To ensure PM2 starts automatically when the system boots, you need to enable the service: sudo systemctl enable pm2-johndoe Replace johndoe with the appropriate username. This command enables the PM2 service, ensuring it starts whenever the system boots up. Step 6: Accessing PM2 with Any User Now that PM2 is configured as a system-wide service, it should be accessible to any user on the server. To check the status of the processes or to list them, any user can run: pm2 list This command will display the list of processes managed by the system-wide PM2 service, regardless of which user is logged in. Step 7: Additional Configuration for Shared Logs (Optional) If you need PM2 logs to be accessible by multiple users, you may need to adjust the file permissions or configure PM2 to store logs in a shared directory. This ensures all users can view and manage logs for the processes running under PM2. To change the log file directory, you can use the following environment variable: export PM2_HOME=/path/to/shared/pm2/home Set this in a global configuration file, like /etc/environment, to make it persistent across sessions. Step 8: Managing PM2 Processes Across Users Once PM2 is set up as a service, users can manage processes using standard PM2 commands. However, depending on the permissions and user roles, some commands might require sudo access. For example: sudo pm2 list This command will list the processes managed by the system-wide PM2 service, making it easier for administrators and developers to collaborate on server management. Conclusion Setting up PM2 as a system-wide service on your Ubuntu instance ensures that your Node.js applications are robustly managed and accessible to all users on the server. This setup is particularly useful in environments with multiple users or automated deployment processes, providing a reliable and centralized way to manage applications. By following the steps outlined in this guide, you can ensure that PM2 is available to all users, your processes are automatically restarted after system reboots, and logs are easily accessible. This not only simplifies server management but also enhances the reliability of your applications in production. Happy coding! 👋 * big *, it's free, and * Community matters * * Trending in Nod* in JavaScript, *sia, and learning from GitHub repositories for best practices. * *) gitter4coding - Nov 7 Evolution of Web Tech and Browsers Charan Sajjanapu - Nov 2 Thoughts on ThoughtWorks Radar 2024 Jesse Warden - Nov 2 * 🎨 Noureddine Belguinan - Nov 6 Manoj Swami Follow Senior Software Engineer Location Gurgaon, India Joined Jul 6, 2021 More from Manoj Swami Mastering Array Operations in JavaScript: A Comprehensive Guide for Developer Interviews #datastructures #javascript #programming Mastering Array Manipulation in DSA using JavaScript: From Basics to Advanced #datastructures #javascript #programming Array Searching in DSA using JavaScript: From Basics to Advanced #datastructures #javascript #programming 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/manojspace/setting-up-pm2-for-multi-user-access-on-ubuntu-instance-5g95"
  },
  {
    "body": "* Follow Report Abuse Matheus Vieira do Nascimento 404 bio not found Joined on Aug 16, 2024 More info about @matheusmcz Badges * 2 * 0 tags followed 📢 * * Matheus Vieira do Nascimento Follow Nov 1 📢 * #git #frontend #react #node Ad*h Matheus Vieira do Nascimento? * Matheus Vieira do Nascimento. * maxLength input type=number * Matheus Vieira do Nascimento Follow Aug 16 maxLength input type=number #frontend #html #webdev 1 reaction * Diamond Sponsor Neon * ",
    "url": "https://dev.to/matheusmcz"
  },
  {
    "body": "* 0 *ead 0 * 0 * Matheus Vieira do Nascimento Posted on Nov 1 📢 * #git #frontend #react #node When it comes to development tools, version control is a crucial part of any project. Git, one of the most widely used tools for this, can be a bit intimidating at first. So many developers, especially with the daily rush, end up using graphical interfaces (Git UIs) to make the process easier. 💡Git Graph on VS Code: For those of us using Visual Studio Code, the Git Graph extension is one of my favorites. It offers functionalities that greatly simplify working with Git repositories, such as: Tree view visualization: You can clearly see all commits, branches, and merges on a graphical timeline, which is super helpful when trying to understand the change history in larger projects. Quick branch control: With Git Graph, it’s easy to switch between branches, create new ones, merge, and view everything without leaving the editor. Commit comparison: You can compare differences between specific commits, making it faster to understand changes between versions. This feature is a huge help for anyone who frequently reviews code. Using tools like Git Graph significantly reduces the time and effort needed for common Git tasks. However, I don't recommend using Git UIs for those who are just starting to learn Git. Why? Simply because using the terminal is essential for a deep understanding of how Git works. Writing and executing commands manually in the terminal helps you grasp Git's functionality, version control concepts, and the processes behind each action. I know it may feel harder at first, but the learning is much more solid. What I suggest is: practice with the terminal, learn the flow of commits, branches, merges, rebases, etc. Only after you build that foundation will a graphical interface make sense and truly be a helpful tool for your daily workflow—not just a crutch. In summary, Git UIs can absolutely speed up your workflow, and Git Graph is one of the best options on VS Code. But if you're just starting out, my tip is: start with the terminal! *upercharge your development Reduce frustration, boost productivity, and increase your organization's competitive advantages with Red Hat Developer Hub. Learn more Top comm* next Node.js Update Christopher Chhim - Oct 3 * Le Quan Phat - Oct 26 * Sushant Gaurav - Oct 16 * Shefali - Nov 4 Matheus Vieira do Nascimento Follow Joined Aug 16, 2024 More from Matheus Vieira do Nascimento maxLength input type=number #frontend #html #webdev * NextJS * 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/matheusmcz/why-i-use-git-uis-in-my-daily-work-and-what-you-should-know-about-them-5ah3"
  },
  {
    "body": "* Follow Report Abuse Arjun Tripathi A beginner programmer who is ready to learn and explorer new and used technology Varanasi, India Joined on Oct 17, 2023 https://mearjuntripathi.github..io Education MCA More info about @mearjuntripathi Badges One * one year. Got it * Skills/Languages PHP mysql JAVA C CPP GO Currently learning JS nodejs react 3 * 20 tags followed * * Build* and MySQL A*i Follow Oct 19 '23 Build* and MySQL 2 * Building a Student Data Management RESTful API with Express.js without database A*i Follow Oct 17 '23 Building a Student Data Management RESTful API with Express.js without database 1 reaction Add Comment 7 *onsor Neon * ",
    "url": "https://dev.to/mearjuntripathi"
  },
  {
    "body": "* 1 A*ead 0 * 0 * Arjun Tripathi Posted on Nov 9 1 Upload * In situations where storage limitations become a concern, exploring alternative solutions becomes essential. Suppose you're utilizing platforms like GitHub or Versal for hosting frontend applications, which offer restricted storage space, typically around 2GB. In such scenarios, leveraging Google Drive for storing files can be a viable option. By integrating Google Drive with your Node.js applications, you can harness the robust storage capabilities of Google Cloud. This documentation aims to provide a concise guide on utilizing Google Drive in conjunction with Node.js to manage files efficiently. Prerequisites Before embarking on the integration process, ensure you have the following prerequisites in place: A Google account with access to the Google Cloud Console. Node.js installed on your local machine. NPM (Node Package Manager) installed. Step 1: Set Up Google Cloud Console and Enable Google Drive API Go to the Google Cloud Console. Create a new project. Navigate to \"APIs & Services\" > \"Library\". Search for \"Google Drive API\" and enable it. Step 2: Obtain Service Account Credentials Navigate to \"APIs & Services\" > \"Credentials\". Create a new Service Account. Download the JSON file with the credentials. Step 3: Install Necessary Packages Install the required packages using NPM. This includes the 'googleapis' package, which facilitates interaction with Google APIs. npm install googleapis Step 4: Implement File Management Functions Utilize the provided code snippets to implement various file management functionalities, including: Listing available files in Google Drive. Uploading files to Google Drive. Updating existing files in Google Drive. Deleting files from Google Drive. for that you should use folder_id and make it public and editable Step 5: Start the project Execute the Node.js application to perform file management operations on Google Drive. Ensure to replace placeholders such as 'FOLDER_ID_HERE' with relevant IDs and file paths. For geting folder id of drive folder we do this. Let' Code first we import all necessary libararies const fs = require('fs'); const { google } = require('googleapis'); // Load API credentials from JSON file const apikeys = require('FOLDER_ID_HERE'); // Replace 'FOLDER_ID_HERE' with the downloaded api file path Function to authorize and get access to Google Drive API // Define the scope for Google Drive API const SCOPES = ['https://www.googleapis.com/auth/drive']; // Function to authorize and get access to Google Drive API async function authorize() { const auth = new google.auth.JWT( apikeys.client_email, null, apikeys.private_key, SCOPES ); try { await auth.authorize(); return auth; } catch (error) { throw new Error(`Error authorizing Google Drive API: ${error.message}`); } } Write a function for get all available file on that drive folder // Function to list available files in Google Drive async function listFiles(auth) { const drive = google.drive({ version: 'v3', auth }); try { const response = await drive.files.list({ pageSize: 10, fields: 'nextPageToken, files(id, name)', }); const files = response.data.files; if (files.length) { console.log('Available files:'); files.forEach(file => { console.log(`${file.name} (${file.id})`); }); } else { console.log('No files found.'); } } catch (error) { throw new Error(`Error listing files in Google Drive: ${error.message}`); } } Write a function to upload file on drive folder // Function to upload a file to Google Drive async function uploadFile(auth, filePath, folderId) { const drive = google.drive({ version: 'v3', auth }); const fileMetadata = { name: filePath.split('/').pop(), // Extract file name from path parents: [folderId] // Folder ID to upload the file into }; const media = { mimeType: 'application/octet-stream', body: fs.createReadStream(filePath) // Readable stream for file upload }; try { const response = await drive.files.create({ resource: fileMetadata, media: media, fields: 'id' }); console.log('File uploaded successfully. File ID:', response.data.id); return response.data; } catch (error) { throw new Error(`Error uploading file to Google Drive: ${error.message}`); } } Function to delete file to folder // Function to delete a file from Google Drive async function deleteFile(auth, fileId) { const drive = google.drive({ version: 'v3', auth }); try { await drive.files.delete({ fileId: fileId }); console.log('File deleted successfully.'); } catch (error) { throw new Error(`Error deleting file from Google Drive: ${error.message}`); } } Function to update file of drive folder // Function to update a file in Google Drive async function updateFile(auth, fileId, filePath) { const drive = google.drive({ version: 'v3', auth }); const fileMetadata = { name: filePath.split('/').pop() // Extract file name from path }; const media = { mimeType: 'application/octet-stream', body: fs.createReadStream(filePath) // Readable stream for file update }; try { const response = await drive.files.update({ fileId: fileId, resource: fileMetadata, media: media }); console.log('File updated successfully.'); } catch (error) { throw new Error(`Error updating file in Google Drive: ${error.message}`); } } How to call all function // Main function to demonstrate file operations async function main() { try { const authClient = await authorize(); // List available files console.log('Available files:'); await listFiles(authClient); // Upload a file const uploadedFile = await uploadFile(authClient, 'test.txt', 'FOLDER_ID_HERE'); // Replace 'FOLDER_ID_HERE' with the desired folder ID const fileId = uploadedFile.id; // Update the uploaded file await updateFile(authClient, fileId, 'updated_test.txt'); // Delete the uploaded file await deleteFile(authClient, '1kWgn2c_yfXWDnT4DC6ZlUJEG37w79JxA'); } catch (error) { console.error(error); } } // Call the main function to start the process main(); After doing all performance we can easily asses drive to upload folder. Coherence Promoted * The Next Generation Developer Platform Coherence is the first Platform-as-a-Service you can control. Unlike \"black-box\" platforms that are opinionated about the infra you can deploy, Coherence is powered by CNC, the open-source IaC framework, which offers limitless customization. Learn more *enc* Read next I Built AlternateOSS, A Directory of Free, Open-source Alternatives to Popular Software 🚀🔥 Syakir - Nov 6 Angular 19 - 5 Game-Changing Features You Need to Know Ingila Ejaz - Nov 6 JavaScript Closures: Top * Nozibul Islam - Nov 7 Building a Scalable Slot Booking System with Redis Distributed Locks Abhinav - Oct 22 Arjun Tripathi Follow A beginner programmer who is ready to learn and explorer new and used technology Location Varanasi, India Education MCA Joined Oct 17, 2023 Trending on DEV Community * Angular 19 - Streamlining Data Retrieval with Experimental Resource and rxResource APIs #webdev #angular #javascript #programming Open-Source will make you richhhh! 🤑💸 #opensource #* Neon **. Create Account → 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/mearjuntripathi/upload-files-on-drive-with-nodejs-15j2"
  },
  {
    "body": "* Follow Report Abuse Murtaza Nathani Passionate to share what i learn. I feel it's my responsibility as the community has given many help for developing my career ! Kuala Lumpur Joined on May 11, 2018 mudza100@gmail.com https://github.com/m-nathani Education FAST (NUCES) - National University of Computer and Emerging Science. Work Software Engineer Six * six years. Got it * Five * five years. Got it *. ** *le week. Got it CSS Awarded to the top CSS author each week Got it *. Got it Two * two years. G* @mnathani GitHub Repositories speech_to_text how to use the Google Cloud Speech API to transcribe audio/video files. PHP • 34 stars graphql-elasticsearch-client Graphql App using Node (Apollo Server) with typescript, KOA framework and Elasticsearch Client TypeScript • 16 stars craco-plugin-micro-frontend Convert your CRA project into a node library application without ejecting or losing update support of react-scripts JavaScript • 4 stars giphy-love React Redux Application to Search Giphs Online JavaScript • 4 stars react-spfx SharePoint Framework 2016 with React Js (Typescript/Axios/Antd/React-table). TypeScript • 3 stars cpu-intense Go markme Geocoding Application to mark and save positions on maps. Ruby Skills/Languages JavaScript Currently learning Learning Ruby on rails, professionally working on Typescript and other frontend frameworks. Currently hacking on Work Available for Free for all.. except religious. 11 posts published 59 comments written 24 tags followed How the TypeScript Record Type Works Mur*ani Follow Jan 29 '23 How the TypeScript Record Type Works #typescript #webdev #beginners #* *h Murtaza Nathani? * Murtaza Nathani. * Optimizing to find the top 3 numbers from an array Mur*ani Follow Jan 24 '23 Optimizing to find the top 3 numbers from an array #adventofcode #programming #leetcode #* Things learned from AdventOfCode 2022 Mur*ani Follow Jan 24 '23 Things learned from AdventOfCode 2022 #adventofcode #typescript #javascript #* Are you dealing with IMPOSTER SYNDROME ? Mur*ani Follow Dec 2 '22 Are you dealing with IMPOSTER SYNDROME ? #discuss #career #community #productivity 1 reaction 2 comments 3 min read Delete all node_modules folders from your system ? 🤔 Mur*ani Follow Dec 2 '22 Delete all node_modules folders from your system ? 🤔 #node #* 9 *d Best way to learn Closure in JavaScript ? Mur*ani Follow Jun 22 '22 Best way to learn Closure in JavaScript ? #webdev #* 11 reactions *'s unsafe optional chaining is crazy |: Mur*ani Follow Jun 15 '22 JavaScript's unsafe optional chaining is crazy |: #discuss #javascript #lint #webdev 16 reactions 11 comments 1 min read How to Cache bust web app Mur*ani Follow Jun 5 '22 How to Cache bust web app #webdev #javascript #react #devops 15 reactions 16 comments 4 min read How to Cache web app? Mur*ani Follow Jun 5 '22 How to Cache web app? #react #s3 #cloudfront #devops 9 *d Two lines of CSS that boosts 7x rendering performance! Mur*ani Follow May 29 '22 Two lines of CSS that boosts 7x rendering performance! #webdev #css #performance #html 1000 reactions 60 comments 2 min read Plugin to make micro frontend using create react app Mur*ani Follow Dec 26 '21 Plugin to make micro frontend using create react app #javascript #react #webdev #programming 7 reactions 1 comment 3 *onsor Neon * ",
    "url": "https://dev.to/mnathani"
  },
  {
    "body": "* Follow Report Abuse Moinul Moin Fondness in web development, prefer to work with Javascript, Reactjs, Nextjs, etc. Always love to explore new things. Dhaka, Bangladesh Joined on Apr 19, 2020 moinulmoin101@gmail.com https://moinulmoin.com Pronouns he/him Work Available for remote opportunities! Four * four years. Got it * Three * three years. **wo * two years. G* @moinulmoin GitHub Repositories vite-react-tailwind-starter Vite + react + tailwindcss - minimal starter TypeScript • 57 stars boilerplate-for-react-projects Easy Starter for React projects CSS • 10 stars vitejs-react-eslint-prettier-starter An easy solution for vite, reactjs, eslint & prettier setup for react projects. JavaScript • 1 star vite-vue-tailwind-starter vite vue tailwind starter Vue • 1 star nextjs-tailwind-typescript-starter Nextjs, Tailwind CSS, Typescript minimal, clean starter pack 2023 TypeScript Skills/Languages JavaScript, Reactjs, Nextjs, Tailwind CSS, Node.js Currently learning Everything related to React, Nodejs Currently hacking on Freelance Projects, Side Projects Available for JAMStack Projects or anything interesting with JavaScript 4 posts published 27 comments written 21 tags followed Nextjs v12 is here.... Moinul Moin Moinul Moin Moinul Moin Follow Oct 26 '21 Nextjs v12 is here.... #react #nextjs #javascript #webdev 6 * Want to connect with Moinul Moin? * Moinul Moin. * Vite + React + TailwindCSS - Simple and Clean Starter Moinul Moin Moinul Moin Moinul Moin Follow Oct 24 '21 Vite + React + TailwindCSS - Simple and Clean Starter #vite #react #tailwindcss #*t 1 min read Use VSCode editor in your browser. Moinul Moin Moinul Moin Moinul Moin Follow Oct 21 '21 Use VSCode editor in your browser. #news #webdev #programming #vscode 6 *d Tailwind v3 on the way Moinul Moin Moinul Moin Moinul Moin Follow Oct 3 '21 Tailwind v3 on the way #tailwindcss #webdev #css #javascript 13 *n * ",
    "url": "https://dev.to/moinulmoin"
  },
  {
    "body": "* Follow Report Abuse Markus F Founder of https://TopTelegramBots.com, https://CoinTrendzBot.com and https://CoinTrendz.com Joined on Nov 8, 2024 More info about @n1njawtf * 3 tags followed Fi* Telegram #webdev #**nsor Neon * ",
    "url": "https://dev.to/n1njawtf"
  },
  {
    "body": "* 0 *ead 0 * 0 * Markus F Posted on Nov 8 Fi* curated list of the Top Telegram Bots On https://TopTelegramBots.com we collect the best and most useful bots on telegram. You can review bots listed on our website, upvote and share them. Our Search Feature makes it easy to find bots sorted by category and popularity. List Your Telegram Bots and increase Reach Every Bot Developer is welcomed to list their own bots on our website. With our Submit Feature, we allow Developers and Users to list a new Telegram Bot within seconds. Showcase your Bot to the community and get feedback on it! Popular Bot Categories on TopTelegramBots.com Productivity: Discover bots for task management, reminders, and time tracking. Entertainment: Explore fun, games, and music bots for leisure and fun. Finance: Get financial insights, crypto tracking, and budgeting tools. Social Media: Automate posts, track stats, and improve engagement on your social accounts. Artifical Intelligence: AI Chatbots and automated Content Moderation Red Hat Developer Promoted * Learn Kubernetes with Sandbox Create an application using plain Kubernetes instead of OpenShift in the Developer Sandbox. Get started Top comments (0) * * CodeRabbit Promoted * Cut Code Review Time & Bugs in Half with CodeRabbit Boost your team with AI-driven PR feedback! CodeRabbit offers instant PR summaries, smart code walkthroughs, 1-click commit suggestions, and seamless code quality & security checks, reducing tech debt. Ship faster with fewer bugs. Try CodeRabbit free today! Learn more Read next Exploring Modern Game Development: Trends, Technologies, and Best Practices Lohitaksh Verma - Nov 7 How to Include JavaScript in Laravel 11: A Step-by-Step Guide for All Scenarios websilvercraft - Nov 7 API Testing – The Most Comprehensive Guide Ever Steve Wortham - Nov 7 Understanding Containerized Microservices: A Comprehensive Guide Zach Benson - Nov 7 Markus F Follow Founder of https://TopTelegramBots.com, https://CoinTrendzBot.com and https://CoinTrendz.com Joined Nov 8, * * Master Redux with 5 Easy Steps: A Comprehensive Guide to Redux Toolkit #webdev #javascript #react #abotwrotethis * 🚀 #we* Heroku *references R* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/n1njawtf/find-the-best-bots-on-telegram-lp9"
  },
  {
    "body": "* Follow Report Abuse Naimur Rahman Full Stack Software Engineer (frontend focused) Dhaka, Bangladesh Joined on Jan 28, 2018 naimur.rahman103@gmail.com https://naimur.dev Work Lead Frontend Engineer at UJET.cx * Six * six years. Got it Five * five years. Got it *. Got it Two * two years. G* @naimur Skills/Languages Javascript, Nodejs, React, Flutter, GraphQL, SQL and NoSQL 2 posts published 3 comments written 1 tag followed BroadcastChannel API: Sending Messages Between Tabs Naimur Rahman Naimur Rahman Naimur Rahman Follow Sep 6 '23 BroadcastChannel API: Sending Messages Between Tabs #javascript #broadcastchannelapi #realtime #browser Ad*h Naimur Rahman? * Naimur Rahman. * Building Offline-Ready Webpage with Service Worker and Cache Storage Naimur Rahman Naimur Rahman Naimur Rahman Follow Sep 1 '23 Building Offline-Ready Webpage with Service Worker and Cache Storage #webdev #javascript #frontend #tutorial 22 reactions 4 comments 3 *onsor Neon * ",
    "url": "https://dev.to/naimur"
  },
  {
    "body": "* Follow Report Abuse Narottam04 const Bio = [\"React Native Developer\",\"Web Developer\", \"Freelancer\" ,\"UI/UX Designer\" ,\"Technical Writer\"] Mumbai, India Joined on Dec 14, 2020 webdripdev@gmail.com https://webdrip.in/ Education Currently pursuing bachelor's in computer science * Three * three years. Got it GitHub + DEV 2023 Hackathon Participant Thanks for participating in the GitHub + DEV 2023 Hackathon! Got it Linode + DEV Hackathon Grand Prize Earned for placing as a Grand Prize winner in the Linode + DEV Hackathon! Got it MongoDB Atlas Hackathon 2022 Participant Awarded for participating in the MongoDB Atlas Hackathon 2022 on DEV. * Top 7 Awarded for having at least one post featured in the weekly \"must-reads\" list at any point. 🙌 Got it *le week. Got it MongoDB Atlas Hackathon Participant Awarded for submitting a valid project to the MongoDB Atlas Hackathon on DEV. Got it One * one year. Got it JavaScript Awarded to the top JavaScript author each week Got it More info about @narottam04 Skills/Languages HTML, CSS, JS, 11ty.js, PWA, React, Next Js, Capacitor (ionic), Firebase, Supabase, Redux & RTK Query Currently learning Postgres SQL, PERN & MERN, Typescript Currently hacking on The Cryptocademy app is a mock crypto trading simulator with real-time prices & charts of over 10k+ coins. Users can learn about cryptocurrency and blockchain tech. https://cryptocademy.webdrip.in/ Available for Web development, Freelancing, Internship & Technical writer 16 posts published 107 comments written 13 tags followed Seamlessly Convert Web Apps to Android App: Automate with Capacitor and GitHub Actions * May 23 '23 Seamlessly Convert Web Apps to Android App: Automate with Capacitor and GitHub Actions #githubhack23 #githubactions #javascript #ionic 19 reactions 4 comments 6 min read Want to connect with Narottam04? * Narottam04. * My Experience In Tackling Critical Dependency Issues In React Native * Mar 15 '23 My Experience In Tackling Critical Dependency Issues In React Native #reactnative #javascript #programming #mobile 23 *d Stonks - Realtime Trading Simulator [Linode DEV Hackathon] * Feb 20 '23 Stonks - Realtime Trading Simulator [Linode DEV Hackathon] #linodehackathon #javascript #react #android 13 *d SignLanguage - Learn ASL Practically - (MongoDB Atlas Hackathon 2022 Submission) * Dec 8 '22 SignLanguage - Learn ASL Practically - (MongoDB Atlas Hackathon 2022 Submission) #atlashackathon22 #machinelearning #mongodb #javascript 38 reactions 16 comments 4 min read Introducing Cryptocademy: A real time virtual crypto trading simulator * Jun 20 '22 Introducing Cryptocademy: A real time virtual crypto trading simulator #showdev #product #webdev #javascript 17 reactions 6 comments 5 min read Convert your website into an android app using capacitor 😱. * Jun 9 '22 Convert your website into an android app using capacitor 😱. #webdev #beginners #tutorial #javascript 336 reactions 58 comments 4 min read Hoisting in JavaScript 🔥 😍[Visually Explained] * Jun 1 '22 Hoisting in JavaScript 🔥 😍[Visually Explained] #javascript #* 39 * How Cryptocurrency Works Explained Visually * Jan 29 '22 How Cryptocurrency Works Explained Visually #blockchain #web3 #beginners 812 reactions 36 comments 7 min read Storebay: An E-commerce Application With Custom Admin And Checkout functionality * Jan 13 '22 Storebay: An E-commerce Application With Custom Admin And Checkout functionality #atlashackathon #react #mongodb #node 12 *d Web 1.0, Web 2.0 & Web3 Explained * Dec 24 '21 Web 1.0, Web 2.0 & Web3 Explained #beginners #blockchain #web3 #webdev 443 reactions 17 comments 5 min read How JavaScript Works🔥 🤖 [Visually Explained] * Sep 9 '21 How JavaScript Works🔥 🤖 [Visually Explained] #* 881 reactions 97 comments 5 min read 100+ Free Illustration Resources For Your Next Personal or Clients Project * Jul 31 '21 100+ Free Illustration Resources For Your Next Personal or Clients Project #webdev #design #programming #css 99 reactions 5 comments 5 min read Free Tailwind Components For Your Next Project. * Jul 28 '21 Free Tailwind Components For Your Next Project. #css #webdev #programming #design 433 reactions 32 comments 7 min read Host your images on Google Drive for free [Step By Step]. * Jul 20 '21 Host your images on Google Drive for free [Step By Step]. #tutorial 10 *d How do we browse on internet? * Jul 20 '21 How do we browse on internet? #webdev #programming 17 * [Step By Step Guide] How to set up visual studio code for C and C++ programming 2021. * Jun 2 '21 [Step By Step Guide] How to set up visual studio code for C and C++ programming 2021. #cpp #programming #vscode #cprogramming 146 reactions 10 comments 5 *onsor Neon * ",
    "url": "https://dev.to/narottam04"
  },
  {
    "body": "* 202 Add reaction 158 Like 44 *s 0 Fire 8 Jump to Comments 206 * Nick Scialli (he/him) Posted on Jun 25, 2020 • Originally published at typeofnan.dev 158 44 Memoization Understand Memoization in 5 Minutes #javascript #webdev #node #react Please give this post a 💓, 🦄, or 🔖 if it you enjoyed it! Memoization is another intimidating term that becomes quite intuitive when you understand it. Today, let's learn what memoization is! A Couple Notes I made a video version of this tutorial! Check it out here. If you like this post, please consider subscribing to my free weekly webdev newsletter! Introduction Memoization is an optimization technique used in many programming languages to reduce the number of redundant, expensive function calls. This is done by caching the return value of a function based on its inputs. In this post, we'll create a suboptimal, but hopefully educationally-informative, JavaScript function memoizer! First, an Expensive Function to Memoize Here's a function for us to memoize. It finds the square of a number in a very inefficient way. const inefficientSquare = num => { let total = 0; for (let i = 0; i < num; i++) { for (let j = 0; j < num; j++) { total++; } } return total; }; We can run this function with the same value and, each time, it'll take a while to execute. const start = new Date(); inefficientSquare(40000); console.log(new Date() - start); // 1278 const start2 = new Date(); inefficientSquare(40000); console.log(new Date() - start2); // 1245 Over one second each time, yikes! Writing Pseudocode for our Memoizer Let's reason through our memoizer before we write any code. Takes a reference to a function as an input Returns a function (so it can be used as it normally would be) Creates a cache of some sort to hold the results of previous function calls Any future time calling the function, returns a cached result if it exists If the cached value doesn't exist, calls the function and store that result in the cache Real Code Time Here's an implementation of the above pseudocode outline. As mentioned in the introduction, this is suboptimal and you should not use this in production. I'll explain why after! // Takes a reference to a function const memoize = func => { // Creates a cache of results const results = {}; // Returns a function return (...args) => { // Create a key for results cache const argsKey = JSON.stringify(args); // Only execute func if no cached value if (!results[argsKey]) { // Store function call result in cache results[argsKey] = func(...args); } // Return cached value return results[argsKey]; }; }; The most suboptimal part of this implementation, and why I wouldn't recommend it be used in production code, is using JSON.stringify to create keys in our results cache. The biggest problem with JSON.stringify is that it doesn't serialize certain inputs, like functions and Symbols (and anything you wouldn't find in JSON). Testing Our Memoizer on an Expensive Function Let's replicate our inefficientSquare example, but this time we'll use our memoizer to cache results. const memoize = func => { const results = {}; return (...args) => { const argsKey = JSON.stringify(args); if (!results[argsKey]) { results[argsKey] = func(...args); } return results[argsKey]; }; }; const inefficientSquare = memoize(num => { let total = 0; for (let i = 0; i < num; i++) { for (let j = 0; j < num; j++) { total++; } } return total; }); const start = new Date(); inefficientSquare(40000); console.log(new Date() - start); // 1251 const start2 = new Date(); inefficientSquare(40000); console.log(new Date() - start2); // 0 Success! The second time we call inefficientSquare with the same input it takes no time to recompute; we're simply pulling the cached value from an object. Only Memoize Pure Functions! Memoization is great, but it only works if your function is pure. In other words, if your function's returned value is dependent on more than its inputs, then your cached value for those inputs won't always be correct. Also, if your function has side-effects, the memoizer doesn't replicate those, it simply returns the ultimately-returned function value. Conclusions You should now have a good idea of how and why we use memoization! While our memoization function was sub-optimal, there are plenty of third party libraries out there you can use that will do a much better. Just make sure the functions you're memoizing are pure! *? Manage p* Top comments (8) * Aleksandar Maletic Aleksandar Maletic Aleksandar Maletic Follow Education Faculty of Mathematics, Belgrade, Serb*d Nov 21, 2019 • Jun 27 '20 * article and video! Just wanted to note to consider using more precise way when measuring NodeJS performance with process.hrtime that returns tuple Array [seconds, nanoseconds]. When using Date and console.log in between measurements, there are additional tasks that impacts results with no need. For more complicated examples it could involve background optimization and inconsistent results. Here is how you can use process.hrtime for your example var st1 = process.hrtime(); inefficientSquare(40000); var e1 = process.hrtime(); var r10 = e1[0] - st1[0]; var r11; if (r10 > 0) { // inverting sign if execution is measured between 2 different seconds r11 = - e1[1] + st1[1]; } else { r11 = e1[1] - st1[1]; } var st2 = process.hrtime(); inefficientSquare(40000); var e2 = process.hrtime(); var r20 = e2[0] - st2[0]; var r21; if (r20 > 0) { // inverting sign if execution is measured between 2 different seconds r21 = - e2[1] + st2[1]; } else { r21 = e2[1] - st2[1]; } // this will log diff between 2 points in time in nanoseconds and will be precise if execution time is less then 1 second, for larger executions you should include r10 and r20; console.log(r11); // o: 197783200 nanoseconds ~= 198 miliseconds console.log(r21); // o: 200077600 ~= 200 miliseconds 5 likes Like Reply ilterkavlak ilterkavlak ilterkavlak Follow Senior Site Reliability Engineer@Upstash Location Ankara Education Bilkent University Work Site Reliability Engineer at Upstash Joined May 13, 2020 • Jun 27 '* Very nice writing. One thing to add, our application might use too much memory in case we cache everything(ex: a pod of a deployment on our k8s cluster that runs for a long time). Maybe cleaning up the cache from the not frequently used ones might work in that case. Also that would also require keeping another variable in for cached records sth like number times function called with these parameters. 5 likes Like Reply Stepan Zubashev Stepan Zubashev Stepan Zubashev Follow Joined Jan 30, 2020 • Jun 25 '* Plz avoid using JSON.stringify for memoization keys. It doesn't support anything except json-likes things it's extremely slow But you can use: Maps for objects keys WeakMaps for objects avoiding GC Custom non-object keys 3 likes Like Reply Nick Scialli (he/him) Nick Scialli (he/him) Nick Scialli (he/him) Follow Senior UI engineer at Microsoft. Views here are my own and do not represent the views of my employer. Location Washington, DC Work Senior Software Engineer at Microsoft Joined Feb 8, 2019 • Jun 25 '* I appreciate the note. I did already call out that JSON.stringify is suboptimal in the article. 11 likes Like Reply Jay Bienvenu Jay Bienvenu Jay Bienvenu Follow Location Southeast Louisiana Joined Jun 10, 2020 • Jun 28 '* Yet after you did that, you never gave an optimal alternative. You said it was \"suboptimal\" yet repeated it in your \"optimal\" solution. 1 like Like Reply Fikret Kurtiev Fikret Kurtiev Fikret Kurtiev Follow Joined Jul 3, 2019 • Jun 27 '20 * Nick! Thanks for the post! Could someone clarify me please, why \"const results = {}\" is stays the same on each call of method \"memoize()\"? I thought it will be created each time on call \"memoize()\" and this approach wouldn't work, but seems like it works! :) Thanks. 1 like Like Reply Alex Ágreda Alex Ágreda Alex Ágreda Follow Email agredalex1997@gmail.com Location San Salvador, El Salvador Education Universidad de El Salvador Work Technical Leader at FOCUS ITO Joined Oct 1, 2018 • Jun 27 '20 C* because of closures & lexical scoping, Fikret developer.mozilla.org/en-US/docs/W... 1 like Like Reply Fikret Kurtiev Fikret Kurtiev Fikret Kurtiev Follow Joined Jul 3, 2019 • Jun 29 '* Yeah... i didn't notice that \"memoize()\" called only once. 1 like Like Reply * Heroku *referenc* Read next 10 best software development collaboration tools in 2025. Balraj Singh - Nov 8 Is React-query out of date? This new favorite makes cross-component requests a breeze! Eddie Kimpel - Oct 30 How to Use the Sui TypeScript SDK Ukeje Chukwuemeriwo Goodness - Oct 26 Can Web Development Make You Rich? Tutort Academy - Oct 30 Nick Scialli (he/him) Follow Senior UI engineer at Microsoft. Views here are my own and do not represent the views of my employer. Location Washington, DC Work Senior Software Engineer at Microsoft Joined Feb 8, 2019 More from Nick Scialli (he/him) How the Web Works: What is a web server? #* #backend How the Web Works series: What is a web client? #webdev #programming #javascript #frontend 10x engineering for the rest of us #programming #webdev #productivity #career Neon Promoted * Postgres on Neon - Get the Free Plan No credit card required. The database you love, on a serverless platform designed to help you build faster. Get Postgres on Neon 👋 ** * ",
    "url": "https://dev.to/nas5w/an-introduction-to-memoization-59o"
  },
  {
    "body": "* Follow Report Abuse Abby Nduta I create with worlds in words, empathy, and code - Python, Django Nairobi, Kenya, Africa Joined on Jan 27, 2021 https://bio.link/abbynduta Work Web Dev - Django | Python | Technical Writer More info about @ndutared Badges * Three * t* it One * one year. Got it Organizations Hackmamba Skills/Languages Python, Django Currently learning Python and Django, Cloud Currently hacking on OpenStack Horizon Available for Technical Writing | Backend development 14 posts published 5 comments written 22 tags followed Debugging DevStack * Sep 28 Debugging DevStack #opensource #openstack #webdev #cloud 3 reactions Ad*h Abby Nduta? * Abby Nduta. * Delving into Angular in OpenStack Horizon: Directives * Aug 7 Delving into Angular in OpenStack Horizon: Directives #openstack #frontend #webdev 3 * Exploring Unit Testing in OpenStack Horizon * Jul 10 Exploring Unit Testing in OpenStack Horizon #openstack #outreachy #cloud #django 7 * OpenStack Horizon Week 1: Project Navigation and Task 1 * Jun 5 OpenStack Horizon Week 1: Project Navigation and Task 1 #opensource #horizon #openstack #cinder Add Comment 3 min read My Outreachy Application Journey * May 15 My Outreachy Application Journey #opensource #webdev #cloud #python 5 * The WWCode Days of Code Challenge * Jan 8 The WWCode Days of Code Challenge #programming #coding #codingchalle #consistency 8 *d Setting up PostgreSQL on a Django/Python project * Aug 6 '23 Setting up PostgreSQL on a Django/Python project #python #django #postgres Add Comment 1 min read Mapping URLs to views in Django: Simple version * Jul 16 '23 Mapping URLs to views in Django: Simple version #python #django Add Comment 2 min read Function-based views in Django: Simple version * Jul 16 '23 Function-based views in Django: Simple version #python #django Add Comment 1 min read A Brief History of Open Source * Apr 10 '23 A Brief History of Open Source #opensource 1 comment 11 min read Build a Simple App with Xata, Cloudinary, and Knockoutjs * for Hackmamba Nov 23 '22 Build a Simple App with Xata, Cloudinary, and Knockoutjs #xata #knockoutj #hackmamba #cloudinary 10 * Understanding MQTT with Eclipse Paho Python Part 1 * Sep 22 '22 Understanding MQTT with Eclipse Paho Python Part 1 #iot #python #mqtt #mosquitto * Mapping the African Tech Ecosystem * May 25 '22 Mapping the African Tech Ecosystem #javascript #python #react #opensource 4 *d Best European Cities to Relocate [React Devs] * Dec 7 '21 Best European Cities to Relocate [React Devs] #react #jav** * ",
    "url": "https://dev.to/ndutared"
  },
  {
    "body": "* 359 Add reaction 297 Like 62 *s 0 Fire 30 Jump to Comments 358 * Chinedu Orie Posted on Aug 26, 2019 • Updated on Nov 8, 2019 297 62 Supertest Jest Testing NodeJs/Express API with Jest and Supertest #node #express #javascript #testing This is part three of building API using Express, Sequelize, and Postgres. In part two, we built simple API endpoints to demonstrate CRUD operations in Sequelize. In this article, we'll be focusing on writing end-to-end tests for the API endpoints created in part two. Explanation of terms End-to-end testing - a type of test which tests that the flow of an application from start to finish works as expected. This is also known as functional testing. An example of this type of test is testing an endpoint or a route which involves testing everything needed for the endpoint to work such as database connection, dependencies, etc. Test Runner - a library or tool which picks up source code (tests) in a given directory or file, executes the test and write the result to the console or any specified location, example Jest, Mocha. Jest - Jest is a JavaScript testing framework developed by Facebook. It works out of the box with minimal configuration and has in-built test runner, assertion library and mocking support. Supertest - A library for testing Node.js HTTP servers. It enables us to programmatically send HTTP requests such as GET, POST, PATCH, PUT, DELETE to HTTP servers and get results. Now that we have explained the basic terms, let us dive deep into the main business. If you've been following along from the previous articles, then open it in your favorite text editor, else clone the repository used here. Step 1 - Install Jest and supertest Open your terminal and cd to the project root directory and run the command below: npm install --save-dev jest supertest Step 2 - Configure Jest Open the package.json and add the code below to it. \"jest\": { \"testEnvironment\": \"node\", \"coveragePathIgnorePatterns\": [ \"/node_modules/\" ] }, That is the basic configuration that we need to get jest set for testing our API. Any file that you want jest to ignore is placed inside the \"coveragePathIgnorePatterns\". \"coveragePathIgnorePatterns\" specifies a regex that matches the directory to be excluded, in our case we want it to ignore node_modules directories. Next up we add the test script. Inside the scripts portion of the package.json, add the script below: \"test\": \"jest\" Step 3 - Test Jest configuration Now, let us confirm that jest is all set to run our test. In the terminal run npm test. You will notice an error as shown below printed on the console, this is an indication that jest is set up. Let us add a simple test to verify the configuration. Create a new directory called tests and add a new file sample.test.js. Inside the sample.test.js, add the code below: describe('Sample Test', () => { it('should test that true === true', () => { expect(true).toBe(true) }) }) Now, run npm test, you'd get an output as shown below: How does Jest recognize a test file? Jest recognizes test file in three ways: files that have extension .test.js files that have extension .spec.js All files inside __tests__ folder or directory. Testing the API Endpoints Now that we have got the test environment set up, it is time to start testing the API endpoints. Since our endpoint needs to make a request to the database, we need to set up a test database. The reason for setting up a test database is that we'll be dropping the database each time we run a test. Dropping the database each time the test is run ensures the integrity of the test. That is, if a test is about creating a post record in the database, we want to be sure that there was no post record in the database before the test was run, that way, we are sure of the result got from the test. Step 4 - Create a test database In the part one of this article, we created two databases, one for development and the other for testing. Follow the link to create a test database if you have not done so. Step 5 - Configure test scripts We need the following scripts: pretest - The pretest is an npm script that is automatically invoked when the npm test command is invoked. We'll hook in the command to change the environment to test and refresh the database before each test runs. migrate:reset: This command will be responsible for refreshing the database before each test runs. Now edit the scripts for package.json as shown below: \"scripts\": { \"start-dev\": \"nodemon index.js\", \"migrate\": \"npx sequelize-cli db:migrate\", \"migrate:reset\": \"npx sequelize-cli db:migrate:undo:all && npm run migrate\", \"test\": \"cross-env NODE_ENV=test jest --testTimeout=10000\", \"pretest\": \"cross-env NODE_ENV=test npm run migrate:reset\" } What to note from the modification of the script: cross-env - an operating system agnostic package for setting environment variables. We used it to set the NODE_ENV to test so that our test can use the test database. Run the command below to install cross-env. npm i -D cross-env --testTimeout flag - This increases the default timeout of Jest which is 5000ms. This is important since the test runner needs to refresh the database before running the test. Step 6 - Test the scripts npm test If everything is okay, you should see the output below on the terminal: Looking closely at the screenshot above, you'd notice a line using environment \"test\" which shows that cross-env has changed the NODE_ENV. Final Step - testing the routes/endpoints Now, let's begin writing tests for the endpoints. Create a file named routes.test.js inside the tests directory touch tests/routes.test.js Testing Create Post Endpoint Copy the following code into tests/routes.test.js: const request = require('supertest') const app = require('../server') describe('Post Endpoints', () => { it('should create a new post', async () => { const res = await request(app) .post('/api/posts') .send({ userId: 1, title: 'test is cool', }) expect(res.statusCode).toEqual(201) expect(res.body).toHaveProperty('post') }) }) The describe function is used for grouping together related tests The it is an alias of test function which runs the actual test. The expect function tests a value using a set of matcher functions. visit the Jest docs for a full list and details of jest functions. Now, run the test npm test The output is shown below: For the complete code for the tests for all the endpoints, check the repository. Conclusion We have been able to walk through the process of writing tests for API endpoints that interacts with the database. In the last part of this article, I'll be writing on integrating CI/CD and code coverage tools to the test environment. Until then stay tuned. Feel free to reach out to me if you have any questions or suggestions on making the article better. You can also share your thoughts via the comment section below. Thanks! This article was originally published in my blog Sentry Promoted * Hydration errors suck But Sentry can help you debug them. Read full post → Top comments (30) * avinash8686 avinash8686 avinash8686 Follow A js Dev working in start up, life long learner, procrastinator rarely, getting things done passionately Location Bangalore Work avinash_d77 at StartUp Joined Sep 17, 2019 • Sep 20 '* There are no cases for api failure, It would be great if u add the failure cases as well, overall the post was pretty good and easy to understand. 7 likes Like Reply James Robert Perih James Robert Perih James Robert Perih Follow All-stack developer. Check the github Location Regina, Canada Work Senior Software Developer Joined Oct 28, 2019 • Oct 28 '19 * could: expect(res.statusCode).toEqual(500); when you do something intentionally wrong, as well as: expect(res.body).toEqual('Post not found'); Various other uses of expect here 10 likes Like Reply Chinedu Orie Chinedu Orie Chinedu Orie Follow Software Engineer, passionate about knowledge sharing. *, Software Engineering Joined Apr 27, 2018 • Oct 29 '* Yeah, I've included some failure test cases in the sample project, I'd update the article to reflect it. Thanks for the hints. 2 likes Like Reply Chinedu Orie Chinedu Orie Chinedu Orie Follow Software Engineer, passionate about knowledge sharing. *, Software Engineering Joined Apr 27, 2018 • Sep 22 '* Yeah, that's true, I seemed to focus on the success side. I'll update it to take into account your feedback. Thank you. 4 likes Like Reply Chigbogu Orji Chigbogu Orji Chigbogu Orji Follow Developer with passion Email orjichigbogu@yahoo.com Location Nigeria Work Software Developer at INITSNG Joined Dec 13, 2019 • Apr 21 '* I tried using jest after I first read your article, but as I changed from Windows7 to Windows10 after Microsoft stopped its update(windows7); my jest test ain't working anymore. I got the error app.address is not a function What could be the cause, am using yarn as my package manager. I have being using mocha and chai for my tests and it works, none works these days Thanks in anticipation. 2 likes Like Reply Chinedu Orie Chinedu Orie Chinedu Orie Follow Software Engineer, passionate about knowledge sharing. *, Software Engineering Joined Apr 27, 2018 • Apr 21 '* Could you check if the discussion in this thread helps 2 likes Like Reply Prashant Singh Prashant Singh Prashant Singh Follow Joined Nov 27, 2019 • Jan 7 '21 Copy l* the article, I followed the instructions and wrote the test code. For anyone who is looking for the sample Express Route Test using Jest (As explained in the above article) can visit this sample GitHub Repo I created. Repo Link: github.com/prashant1k99/JWT-example 2 likes Like Reply mememe mememe mememe Follow I am a Senior Software Engineer currently working on Ruby, Rails, ReactJS. My previous experience includes, PHP along with CakePHP, CodeIgniter and Kohana. Location Philippines Work Ruby on Rails / ReactJS at my laptop Joined Sep 9, 2019 • Jul 1 '20 C* is good content. I hope you get to complete the whole CRUD testing. 3 likes Like Reply King Elisha King Elisha King Elisha Follow Email ek.chibueze@gmail.com Location Abuja, Nigeira Work Senior Software Engineer at Seeq Joined Nov 19, 2019 • Dec 13 '19 * article 3 likes Like Reply Martin Nuc Martin Nuc Martin Nuc Follow Joined Apr 17, 2020 • Apr 17 '* It looks like the database is not refreshed between endpoint tests, right? Means endpoint tests could affect each other, right? 3 likes Like Reply Chinedu Orie Chinedu Orie Chinedu Orie Follow Software Engineer, passionate about knowledge sharing. *, Software Engineering Joined Apr 27, 2018 • Apr 18 '* Yes, that is definitely a short-cut solution, you could make each test suite independent of each other 1 like Like Reply Yasser Nascimento Yasser Nascimento Yasser Nascimento Follow new here, just taking a look over there Location Brazil Work Developer at Upplify Joined Oct 15, 2019 • Nov 21 '19 *! Thanks a lot :) 4 likes Like Reply Bruno Peixoto Bruno Peixoto Bruno Peixoto Follow Joined Nov 30, 2022 • Nov 30 '* I receive a timeout with log \": Timeout - Async callback was not invoked within the 10000ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000ms timeout specified by jest.setTimeout.Error: \" 1 like Like Reply akopchinskiy akopchinskiy akopchinskiy Follow Joined Mar 14, 2019 • Aug 7 '* What about more real-world complex example with database connectors and sharing them around several test suites with Jest? ))) 2 likes Like Reply Isaac Komezusenge Isaac Komezusenge Isaac Komezusenge Follow Software Engineer with proficiency in MERN and PERN Stack Location Kigali, Rwanda Work Full-Stack Software Engineer at Andela Joined Aug 21, 2020 • Oct 1 '20 * article with rich content!! Thank you Orie 2 *ion (30 comments) * DEV Community * Trending in Nod* in JavaScript, *sia, and learning from GitHub repositories for best practices. * Subscribe form using HTML and CSS Kaja Uvais - Oct 14 Node.js: Struggling with Winston Logging? Rishi Kumar - Oct 14 How to Build a Gay Video Chat App with ZEGOCLOUD Stephen568hub - Nov 5 Mastering Unit and Integration Testing for Minimal APIs in .NET 8: Best Practices for High-Quality Code Leandro Veiga - Oct 20 Chinedu Orie Follow Software Engineer, passionate about knowledge sharing. *, Software Engineering Joined Apr 27, 2018 More from Chinedu Orie Automate Application Deployment to AWS Elastic Beanstalk with Terraform and CodePipeline #terraform #elasticbeanstalk #codepipeline #node Method Chaining in JavaScript #javascript #chaining #methods CI/CD With Travis CI and Coveralls in Node/Express API #travisci #coveralls #testing #node Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/nedsoft/testing-nodejs-express-api-with-jest-and-supertest-1km6"
  },
  {
    "body": "DEV Community Join the DEV Community DEV Community is a community of 2,372,517 amazing developers Continue with Apple Continue with Facebook Continue with Forem Continue with GitHub Continue with Google Continue with Twitter (X) OR Email Password Remember me Forgot password? By signing in, you are agreeing to our privacy policy, terms of use and code of conduct. New to DEV Community? Create account. * * ",
    "url": "https://dev.to/new/node"
  },
  {
    "body": "* Follow Report Abuse New Relic Data for engineers New Relic helps engineers and developers do their best work every day — using data, not opinions — at every stage of the software lifecycle. San Francisco, CA Joined on Jul 1, 2020 Meet the team Our story In 2008, New Relic's founder Lew Cirne created a first-of-its-kind cloud platform for advanced application performance management (APM). From the beginning, our ambition has driven us to instrument more of the digital world than anyone else. We exist to continue that work along the expanse of the internet because our goal is to establish the standards by which all software and its impact can be measured and improved. - 10x Leader in the Gartner Magic Quadrant - Fortune's Best Workplaces for Millennials 2022 - Fortune's People Companies that Care 2022 Our stack Ruby, Go, JavaScript, Java, Elixir, Python, Kotlin, Rails, React, Flask, PostgreSQL, Kubernetes, Prometheus, Docker, AWS, GCP, GraphQL, OpenTelemetry. 251 posts published 32 members Monitoring PM2 in production * Follow Nov 1 * Add Comment 8 min read Observability as code for AI apps with New Relic and Pulumi * Oct 14 Observability as code for AI apps with New Relic and Pulumi #observability #ai #infrastructureascode Add Comment 11 min read New Relic Integrates its Observability Platform with NVIDIA NIM to Accelerate AI Adoption and ROI samanthadondero samanthadondero samanthadondero Follow Jun 24 New Relic Integrates its Observability Platform with NVIDIA NIM to Accelerate AI Adoption and ROI #ai #observability 4 *d Using .NET Aspire eShop application to collect all the telemetry * Jun 10 Using .NET Aspire eShop application to collect all the telemetry #observability #opensource #dotnet 2 * How to observe your Blazor WebAssembly application with OpenTelemetry and real user monitoring * Jun 10 How to observe your Blazor WebAssembly application with OpenTelemetry and real user monitoring #observability #opentelemetry #opensource Add Comment 10 min read New Relic AI monitoring, the industry’s first APM for AI, is here! samanthadondero samanthadondero samanthadondero Follow Apr 23 New Relic AI monitoring, the industry’s first APM for AI, is here! #devops #ai #monitoring Add Comment 1 min read Guide: How to route Docker logs correctly in New Relic * Apr 12 Guide: How to route Docker logs correctly in New Relic #observability #logs #docker 2 * New Instant Observability integrations for monitoring API, network, application, and streaming performance * Mar 31 New Instant Observability integrations for monitoring API, network, application, and streaming performance #devops #monitoring Add Comment 4 min read Get your insights in minutes * Mar 31 Get your insights in minutes #devops #monitoring Add Comment 5 min read Partners in Instant Observability: Integrations for machine learning, Kubernetes, CI/CD * Mar 31 Partners in Instant Observability: Integrations for machine learning, Kubernetes, CI/CD #devops #monitoring 1 comments 4 min read New capabilities for New Relic Interactive Application Security Testing (IAST) 🔒 alv*el3 Follow Mar 13 New capabilities for New Relic Interactive Application Security Testing (IAST) 🔒 #devops #security #* Automate root cause analysis in logs with New Relic and Zebrium * Mar 12 Automate root cause analysis in logs with New Relic and Zebrium #devops #monitoring 2 *d Create and monitor WayScript self-service dev environments in minutes * Feb 29 Create and monitor WayScript self-service dev environments in minutes #devops #tutorial #monitoring #python 2 * Building for sustainability: Dashboards * Feb 29 Building for sustainability: Dashboards #devops #tutorial #productivity #monitoring * Explore new customization options for New Relic dashboards * Feb 29 Explore new customization options for New Relic dashboards #devops #monitoring #tutorial #p* 6 min read Introducing New Relic Live Archives! A long-term storage solution for devs. alv*el3 Follow Feb 28 Introducing New Relic Live Archives! A long-term storage solution for devs. #monitoring #devops #* 1 comments 1 min read How Domino’s UK reimagined their SRE with New Relic alv*el3 Follow Feb 26 How Domino’s UK reimagined their SRE with New Relic #devops #tutorial #eventsinyourcity #monitoring * A deep dive into zero-day vulnerability alerts with New Relic APM * Feb 23 A deep dive into zero-day vulnerability alerts with New Relic APM #devsecops #observability #apm #vulnerabilities * Monitor OpenAI GPT application usage in New Relic * Feb 22 Monitor OpenAI GPT application usage in New Relic #ai #aiops #devops #monitoring 2 *d Get faster and more secure software delivery with JFrog and New Relic * Feb 22 Get faster and more secure software delivery with JFrog and New Relic #devops #learning #tutorial #monitoring 2 * Unlock the power of observability for marketing leaders * Feb 22 Unlock the power of observability for marketing leaders #monitoring #devops #tutorial #learning 2 * Optimize resource utilization through cluster management Mehreen Tahir Mehreen Tahir Mehreen Tahir Follow Feb 18 Optimize resource utilization through cluster management Add Comment 4 min read Why Halodoc centralized log management with New Relic alv*el3 Follow Jan 26 Why Halodoc centralized log management with New Relic #devops #monitoring Ad* New Relic Pathpoint! ✨ alv*el3 Follow Jan 24 Introducing New Relic Pathpoint! ✨ #devops #monitoring Add Comment 1 min read What’s new at New Relic - January 2024 alv*el3 Follow Jan 18 What’s new at New Relic - January 2024 #devops #monitoring * What are your new year's resolutions for 2024? [Tell us for a chance to win a FREE New Relic swag kit!] alv*el3 Follow Jan 5 What are your new year's resolutions for 2024? [Tell us for a chance to win a FREE New Relic swag kit!] #newrelic #monitoring #devops 2 *d [Contest] Who wants to win a Lego kit!? alv*el3 Follow Dec 20 '23 [Contest] Who wants to win a Lego kit!? #newrelic 3 * Why fintech Pomelo uses one monitoring platform alv*el3 Follow Dec 13 '23 Why fintech Pomelo uses one monitoring platform #devops #monitoring *tions to monitor your full AI stack * Dec 13 '23 Integrations to monitor your full AI stack #ai #aiops #devops #apm Add Comment 7 min read Evaluating generative AI performance: When your data is “anything” Tal Reisfeld Tal Reisfeld Tal Reisfeld Follow Dec 11 '23 Evaluating generative AI performance: When your data is “anything” #generativeai #datascience #productivity #newrelic Add Comment 7 min read How to monitor Microsoft 365: Observing AD FS * Nov 26 '23 How to monitor Microsoft 365: Observing AD FS #observability #microsoft365 #adfs Add Comment 8 min read Instrumenting AWS Lambda functions with OpenTelemetry SDKs * Follow Nov 25 '23 Instrumenting AWS Lambda functions with OpenTelemetry SDKs #aws #node #opentelemetry #serverless * New Relic AI Monitoring, the industry’s first APM for AI, is here! alv*el3 Follow Nov 14 '23 New Relic AI Monitoring, the industry’s first APM for AI, is here! #ai #devops #apm #monitoring * Automate your configuration with observability as code ntcsteve ntcsteve ntcsteve Follow Nov 11 '23 Automate your configuration with observability as code #terraform #tutorial #monitoring #developer 5 reactions 1 comments 12 min read * 5 ntcsteve ntcsteve ntcsteve Follow Nov 11 '23 * 5 #tutorial #devops #coding #monitoring * * 4 ntcsteve ntcsteve ntcsteve Follow Nov 11 '23 * 4 #development #devops #datascience #monitoring * Domino’s built a better way to deliver pizza with New Relic APM. alv*el3 Follow Nov 6 '23 Domino’s built a better way to deliver pizza with New Relic APM. #devops #development #tutorial #aws 3 reactions 1 comments 3 min read * 3 ntcsteve ntcsteve ntcsteve Follow Nov 1 '23 * 3 #development #devops #database #datascience Add Comment 7 min read How to use CodeStream—and shift left your observability practice * Oct 31 '23 How to use CodeStream—and shift left your observability practice #observability #devops #productivity #development Add Comment 7 min read * 2 ntcsteve ntcsteve ntcsteve Follow Oct 31 '23 * 2 #tutorial #devops #monitoring #observability Add Comment 8 min read * 1 ntcsteve ntcsteve ntcsteve Follow Oct 31 '23 * 1 #devops #development #tutorial #monitoring Add Comment 7 min read How to monitor Microsoft 365: Getting started * Oct 17 '23 How to monitor Microsoft 365: Getting started #observability #microsoft365 #tutorial #newrelic Add Comment 9 min read How Shutterstock boosted KPIs and lowered costs alv*el3 Follow Oct 12 '23 How Shutterstock boosted KPIs and lowered costs #devops Add Comment 3 min read Track user actions directly to the source to fix bugs faster alv*el3 Follow Sep 28 '23 Track user actions directly to the source to fix bugs faster # news #programming #monitoring #devops Add Comment 1 min read How Blackline runs on New Relic to serve its customers better alv*el3 Follow Sep 25 '23 How Blackline runs on New Relic to serve its customers better #devops #productivity #monitor* read Connect infrastructure monitoring and APM in a snap alv*el3 Follow Sep 21 '23 Connect infrastructure monitoring and APM in a snap #devops #monitoring #programming #productivity Add Comment 3 *onsor Neon * ",
    "url": "https://dev.to/newrelic"
  },
  {
    "body": "* 0 *ead 0 * 0 * Zameer Fouzan for New Relic Posted on Nov 1 • Originally published at newrelic.com * In large-scale Node.js production environments, monitoring multiple applications can become challenging. The New Relic APM agent for Node.js helps capture logs, traces, and in-depth performance metrics from individual applications. But what about the overall health and resource consumption of all Node.js processes themselves, and critical process-level metrics like CPU and memory usage? PM2 is a popular process manager for Node.js applications, designed to simplify deployment and ensure reliability. It provides robust features, including automatic application restarts, load balancing, and monitoring capabilities, making it an essential tool for managing production-grade Node.js environments. PM2's monitoring API provides easy access to detailed telemetry data, like active processes, and resource consumption, along with additional helpful details like Git commit, active branch, Node.js version, and entry script. These insights can be invaluable when troubleshooting and identifying the root cause of performance issues. What can I monitor from PM2? PM2 API provides generous information that can be captured. Ideally, all the metrics that can be visualized using the PM2’s monitor API on your host can be captured and exported to New Relic. In this blog post, we’ll focus on several key metrics that are important for monitoring PM2. Application identity and host information Application details, including the host ID, for applications currently running as part of PM2, make it easy to pinpoint which instance is associated with each application. This is especially helpful in environments with multiple services, as you can easily identify specific processes and manage them effectively. Metrics: appName, hostId Resource metrics Metrics from each process, like CPU and memory usage, provide essential insights into the resource consumption and performance of your application. With axm_monitor, you can also track HTTP latency, active requests, and event loop latency to monitor responsiveness in real time. Metrics: monit.cpu, monit.memory, axm_monitor (for example, HTTP latency, active requests, event loop latency) Process information Process-level details such as process ID, status, and uptime help monitor each application's health and lifecycle. Tracking when a process was last updated or started helps you identify issues like frequent restarts or unusually high uptime. Metrics: pid, pm2_env.status, pm2_env.pm_uptime, pm2_env.created_at, timestamp, pm2_env.update_time Debug pointers: Logs, errors, restarts, and crashes Debugging details like log paths, error codes, and restart counts allow quick troubleshooting. Having both the standard output and error logs, alongside information on restarts, helps pinpoint stability issues or potential bugs within applications. Metrics: pm2_env.error_file, pm2_env.out_file, pm2_env.exit_code, pm2_env.unstable_restarts, pm2_env.restart_time, pm2_env.status Version control and deployment insights Deployment details, including Git commit history and Node.js version, make it easy to track deployed versions. PM2 captures branch, revision, and commit data, giving clear visibility into which version is running and simplifying root cause analysis after code changes. Metrics: pm2_env.node_version, pm2_env.version, pm2_env.versioning.* How do I capture insights from PM2? Currently, there’s no direct integration between New Relic agents and PM2, but we can build our own integration using Flex. Flex is an easy and agentless option to build integrations between your data source and New Relic. Configuration Create a new configuration file named pm2_monit.yml, then add the following configuration. This configuration is simply calling the PM2 jlist API and sanitizing the JSON output data using JQ. JQ is a command line utility that's used to process, query, and transform JSON data. Flex has support for JQ built in, which makes sanitizing and transforming the data easier. As the original output can also include additional, sensitive data, which could be unnecessary, it can be easily dropped with the JQ and remove_keys functions of Flex. Basic configuration integrations: - name: nri-flex timeout: 60s interval: 30s config: name: PM2status apis: - name: PM2Process event_type: PM2Sample commands: # Linux specific command - run: USER=ubuntu; su - $USER bash -c \"pm2 jlist\" # command for windows/mac # - run: npx pm2 jlist JSON transformation with JQ At this stage, the output from pm2 jlist is a raw JSON. Let’s sanitize and transform the JSON output with JQ to retain only the necessary fields, using the remove_keys and rename_keys functions to streamline the data further: # Sanitize and transform the JSON output to required format jq: >- [] | { pid, name, pm2_env: { script: .pm2_env.script?, out_file: .pm2_env.out_file?, error_file: .pm2_env.error_file?, watch: .pm2_env.watch?, exit_code: .pm2_env.exit_code?, node_version: .pm2_env.node_version?, versioning: .pm2_env.versioning?, version: .pm2_env.version?, unstable_restarts: .pm2_env.unstable_restarts?, restart_time: .pm2_env.restart_time?, created_at: .pm2_env.created_at?, pm_uptime: .pm2_env.pm_uptime?, status: .pm2_env.status?, unique_id: .pm2_env.unique_id? }, pm_id, monit } | del(.pm2_env.versioning.remotes) remove_keys: - pm_id rename_keys: name: appName custom_attributes: hostId: localhost Switching user context The command block in Flex configuration switches the user context to where PM2 processes are running, which is necessary, as Flex runs under the root (sudo) user by default. If you're running PM2 locally on Windows or Mac, use npx pm2 jlist command block instead of the Linux-specific command. The complete configuration should look like this: integrations: - name: nri-flex timeout: 60s interval: 30s config: name: PM2status apis: - name: PM2Process event_type: PM2Sample commands: - run: USER=ubuntu; su - $USER bash -c \"pm2 jlist\" # - run: npx pm2 jlist # Sanitize and transform the JSON output to required format jq: >- [] | { pid, name, pm2_env: { script: .pm2_env.script?, out_file: .pm2_env.out_file?, error_file: .pm2_env.error_file?, watch: .pm2_env.watch?, exit_code: .pm2_env.exit_code?, node_version: .pm2_env.node_version?, versioning: .pm2_env.versioning?, version: .pm2_env.version?, unstable_restarts: .pm2_env.unstable_restarts?, restart_time: .pm2_env.restart_time?, created_at: .pm2_env.created_at?, pm_uptime: .pm2_env.pm_uptime?, status: .pm2_env.status?, unique_id: .pm2_env.unique_id? }, pm_id, monit } | del(.pm2_env.versioning.remotes) remove_keys: - pm_id rename_keys: name: appName custom_attributes: hostId: localhost Validation Once the configuration is ready, we can validate it with Flex's debug mode. If you’re using the standalone binary mode of Flex, use the following command to test your configuration: sudo ./nri-flex -config_file pm2_monit.yml --pretty --verbose To test the configuration using New Relic's infrastructure agent Flex integration, execute the following command: sudo /var/db/newrelic-infra/newrelic-integrations/bin/nri-flex --verbose --pretty --config_file ./pm2_monit.yml Read more about Flex testing and debugging in this document. Upon successful execution of your configuration, you should expect an output similar to the one displayed below, without the Flex debug output: { \"name\": \"com.newrelic.nri-flex\", \"protocol_version\": \"3\", \"integration_version\": \"1.15.2\", \"data\": [ { \"metrics\": [ { \"appName\": \"expressApp-otel\", \"event_type\": \"PM2Sample\", \"hostId\": \"ec2-webserver\", \"integration_name\": \"com.newrelic.nri-flex\", \"integration_version\": \"1.15.2\", \"monit.cpu\": 0, \"monit.memory\": 46641152, \"pid\": 1304, \"pm2_env.created_at\": 1728589283166, \"pm2_env.error_file\": \"logs/error.log\", \"pm2_env.exit_code\": 1, \"pm2_env.node_version\": \"16.17.0\", \"pm2_env.out_file\": \"logs/app.log\", \"pm2_env.pm_uptime\": 1729058602005, \"pm2_env.restart_time\": 0, \"pm2_env.script\": \"./server.js\", \"pm2_env.status\": \"online\", \"pm2_env.unique_id\": \"858b1616-bfd7-41c0-8861-de5babcfe106\", \"pm2_env.unstable_restarts\": 0, \"pm2_env.version\": \"1.0.0\", \"pm2_env.versioning.ahead\": \"false\", \"pm2_env.versioning.branch\": \"master\", \"pm2_env.versioning.branch_exists_on_remote\": \"true\", \"pm2_env.versioning.comment\": \"update: Added query param to fetch mapped category in response\\nfix: fallback envvar value\\n\", \"pm2_env.versioning.next_rev\": \"\\u003cnil\\u003e\", \"pm2_env.versioning.prev_rev\": \"f195db41aec0592142ef478c424ec1722c7318a4\", \"pm2_env.versioning.remote\": \"origin\", \"pm2_env.versioning.repo_path\": \"/home/ubuntu/workspace/node-express-app\", \"pm2_env.versioning.revision\": \"8d31b501b38229171be428db1dc7e2b412694116\", \"pm2_env.versioning.type\": \"git\", \"pm2_env.versioning.unstaged\": \"true\", \"pm2_env.versioning.update_time\": \"2024-10-16T06:03:22.325Z\", \"pm2_env.versioning.url\": \"git@github.com:zmrfzn/node-express-app.git\", \"pm2_env.watch\": \"false\" }, { \"event_type\": \"flexStatusSample\", \"flex.Hostname\": \"ip-172-31-30-74\", \"flex.IntegrationVersion\": \"1.15.2\", \"flex.counter.ConfigsProcessed\": 1, \"flex.counter.EventCount\": 2, \"flex.counter.EventDropCount\": 0, \"flex.counter.PM2Sample\": 2, \"flex.time.elapsedMs\": 263, \"flex.time.endMs\": 1730119876587, \"flex.time.startMs\": 1730119876324 } ], \"inventory\": {}, \"events\": [] } ] } Here’s the simplified data that we’re capturing with Flex from the PM2 processes after transformations with JQ: { \"appName\": \"expressApp-otel\", \"hostId\": \"ec2-webserver\", \"integration_name\": \"com.newrelic.nri-flex\", \"integration_version\": \"1.15.2\", \"monit.cpu\": 0, \"monit.memory\": 80068608, \"pid\": 1310, \"pm2_env.created_at\": 1728589676754, \"pm2_env.error_file\": \"logs/error.log\", \"pm2_env.exit_code\": 1, \"pm2_env.node_version\": \"16.17.0\", \"pm2_env.out_file\": \"logs/app.log\", \"pm2_env.pm_uptime\": 1729058602010, \"pm2_env.restart_time\": 0, \"pm2_env.script\": \"./server.js\", \"pm2_env.status\": \"online\", \"pm2_env.unique_id\": \"83e7e3d5-17d7-41b0-87fe-5201148c826a\", \"pm2_env.unstable_restarts\": 0, \"pm2_env.version\": \"1.0.0\", \"pm2_env.versioning.ahead\": \"false\", \"pm2_env.versioning.branch\": \"otel\", \"pm2_env.versioning.branch_exists_on_remote\": \"true\", \"pm2_env.versioning.comment\": \"chore: update OTEL SDK packages to latest\", \"pm2_env.versioning.next_rev\": \"<nil>\", \"pm2_env.versioning.prev_rev\": \"f9fb795ec5ec07d24bd858b55287cbffda44b365\", \"pm2_env.versioning.remote\": \"origin\", \"pm2_env.versioning.repo_path\": \"/home/ubuntu/workspace/otel/node-express-app\", \"pm2_env.versioning.revision\": \"aad10ae5445469718cd2da5041d140e39be8ef78\", \"pm2_env.versioning.type\": \"git\", \"pm2_env.versioning.unstaged\": \"true\", \"pm2_env.versioning.update_time\": \"2024-10-16T06:03:22.319Z\", \"pm2_env.versioning.url\": \"git@github.com:zmrfzn/node-express-app.git\", \"pm2_env.watch\": \"false\", \"timestamp\": 1729513381684 } Verification Flex sends all processed data via the New Relic events API, which allows efficient handling of various types of event data. In this configuration, we’re naming our event PM2Sample, which helps clearly identify and differentiate it from other events in the system. All the data associated with this event can be easily queried using New Relic Query Language (NRQL) on this table itself. FROM PM2Sample SELECT * SINCE 10 MINUTES AGO LIMIT 5 Visualization Once the data is accessible on the New Relic platform, you can easily query specific metrics relevant to your needs and create tailored visualizations. This allows you to analyze performance trends, monitor process health, and also gather versioning details for the individual applications currently running with PM2. With customizable visualizations, you can present the data in a way that best suits your objectives and enhances your understanding of complex information. Additionally, these metrics can also be used to set up personalized alerts. Let’s dive into the PM2Sample. Now we can effortlessly query the average CPU utilization from individual applications: FROM PM2Sample select average(monit.cpu) as 'CPU Usage %' facet appName You can also capture time series data, showcasing how memory consumption compares to CPU usage over time for all your applications under PM2, which are outside of your APM metrics. FROM PM2Sample select average(monit.memory)/1048576 as 'Avg Memory M/b' , average(monit.cpu) as 'Avg CPU%' EXTRAPOLATE TIMESERIES NRQL provides an easy way to query and visualize metrics, with powerful dashboard capabilities. Below is an example of a custom dashboard setup specifically designed for PM2 monitoring. It captures various metrics, including memory usage per application, CPU vs. memory for all active applications, and the latest app revision details of the active processes with PM2. Import this dashboard using the JSON from this location: PM2_monit_dashboard. Make sure to replace all the placeholder account Ids (1234567) with your New Relic account ID before importing it. Conclusion PM2’s telemetry offers process-level insights, capturing essential metrics like CPU, memory, and application logs. Flex’s customizable integration with New Relic allows you to bring these data points into a single, unified view. This combination not only enhances visibility into application performance, but also simplifies root-cause analysis and proactive monitoring What Next? For more information, visit the following: Build your own integrations with Flex [link: https://newrelic.com/blog/how-to-relic/what-is-flex] Explore the New Relic APM agent for Node.js [link: https://newrelic.com/blog/best-practices/nodejs-application-monitoring] *? Manage p* ** Read next *) Jagroop Singh - Sep 23 5 JavaScript Patterns Every Developer Should Know in 2024 Shafayet Hossain - Oct 11 * Sushant Gaurav - Oct 11 Hono - Introduction Vuelancer - Oct 11 New Relic Follow Data for engineers Get free access to all of New Relic. Forever. Sign up More from New Relic A deep dive into zero-day vulnerability alerts with New Relic APM #devsecops #observability #apm #vulnerabilities Integrations to monitor your full AI stack #ai #aiops #devops #apm Instrumenting AWS Lambda functions with OpenTelemetry SDKs #aws #node #opentelemetry #serverless Neon Promoted * Postgres on Neon - Get the Free Plan No credit card required. The database you love, on a serverless platform designed to help you build faster. Get Postgres on Neon 👋 ** * ",
    "url": "https://dev.to/newrelic/monitoring-pm2-in-production-eak"
  },
  {
    "body": "* Follow Report Abuse Stjepan Full stack web developer Croatia Joined on Oct 24, 2017 Work Freelance Web developer Seven * seven years. Got it * Six * six years. Got it Five * five years. Got it *. * Fab 5 Awarded for having at least one comment featured in the weekly \"top 5 posts\" list. G* @nikolicstjepan Available for Interesting Node and/or React side projects! 4 posts published 27 comments written 8 tags followed How to Install Node.j*ow * * Want to connect with Stjepan? * Stjepan. * Log 2 - Building my first SaaS * Feb 24 '22 Log 2 - Building my first SaaS #saas #startup #community * Log 1 - Building my first SaaS * Feb 23 '22 Log 1 - Building my first SaaS #saas #startup #community 3 *d How I can make this world better place using my programming skills? * Jun 24 '19 How I can make this world better place using my programming skills? #discuss 4 reactions 2 comments 1 *onsor Neon * ",
    "url": "https://dev.to/nikolicstjepan"
  },
  {
    "body": "* 0 *ead 0 * 0 * Stjepan Posted on Nov 7 * #node Recently, I needed to install a specific version of Node.js on a server that was locked down behind a strict firewall. The server only allowed access to GitHub and had the default apt build tools installed. I couldn’t use version managers like nvm or add external repositories to install Node.js via apt. Additionally, the default Node.js version available through apt was outdated and didn’t meet my requirements. Installing Node.js from source allows you to build the latest version or customize your build according to your needs. This guide provides step-by-step instructions for downloading, compiling, and installing Node.js from its GitHub repository. Prerequisites Before you begin, ensure you have the following installed: Git: To clone the repository. Python 3: Required for the build process. C/C++ Compiler: Such as GCC or Clang on Unix systems, or Visual Studio on Windows. Build Tools: make or ninja for Unix systems. Steps 1. Install Build Dependencies On macOS: Install Homebrew if not already installed: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" -Install dependencies: brew install git python3 gcc make On Linux (Debian/Ubuntu): sudo apt-get update sudo apt-get install -y git python3 build-essential On Windows: Install Git for Windows. Install Python 3. Install Visual Studio Community with C++ development tools. 2. Clone the Node.js Repository git clone *.git cd node 3. Checkout a Specific Version (Optional) List available versions: git tag Checkout a specific version (replace v16.6.0 with your desired version): git checkout v20.18.0 4. Configure the Build ./configure For customization options, run: ./configure --help 5. Compile the Source Code On Unix Systems (macOS/Linux): Use make to build: make -j4 Replace 4 with the number of cores in your CPU for faster compilation. On Windows: Use the provided build script: vcbuild.bat For a 64-bit build: vcbuild.bat x64 6. Install Node.js On Unix Systems: sudo make install On Windows: The build process creates an executable in the Release directory. You can add this directory to your PATH or move the executable to a preferred location. 7. Verify the Installation Check the installed Node.js and npm versions: node -v npm -v Additional Information Updating the Source Code To update your local repository with the latest changes: git pull origin master Cleaning Up Build Files Before rebuilding, you may want to clean up previous build files: make clean Troubleshooting: Ensure all dependencies are correctly installed. Refer to the Node.js Building Guide for more detailed instructions. Conclusion You’ve successfully installed Node.js from the source code on GitHub. This approach gives you the flexibility to work with the latest features or customize your Node.js build. *et up your Developer Sandbox Deploy a full-stack Javascript application with the Developer Sandbox for Red Hat OpenShift. Get started Top comments (0) * * Sentry Promoted * 📺 Youtube Tutorial Series * Read next Conheça Next.js 14: O Framework Full-Stack para Aplicações Web Modernas Sabrina Barros - Oct 3 This TypeScript framework * ⚡️ Marcus Kohlberg - Oct 1 Por que o Elixir é melhor que Node.js para Processamento Assíncrono? William Moreira da Silva - Aug 30 NodeJS Framework which one is Fast Tarun Sharma - Aug 30 Stjepan Follow Full stack web developer Location Croatia Work Freelance Web developer Joined Oct 24, 2017 Trending on DEV Community Open-Source will make you richhhh! 🤑💸 #opensource #* Understanding JavaScript Closures: A Comprehensive Guide #javascript #closure #programming #node * Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/nikolicstjepan/how-to-install-nodejs-from-source-code-on-github-468j"
  },
  {
    "body": "* Follow Report Abuse Nipu Chakraborty I am a full-stack web developer Here is my YouTube channel https://www.youtube.com/@codingwithnipu Dhaka, bangladesh Joined on Jul 24, 2021 http://nondukishor.github.io Education Bsc in CSE Work Springrain Pvt Ltd More info about @nipu Badges Three * three years. Got it * Two * two years. Got it * MERN STACK Currently learning Docker & DevOps Currently hacking on Writing a JavaScript Book in Bangla language. Available for JavaScript, NodeJs, PHP, Python 16 posts published 7 comments written 71 tags followed nginx default configuration file understand Nipu *borty Follow Sep 22 '23 nginx default configuration file understand #devops #programming #linux #nginx 1 reaction Ad*h Nipu Chakraborty? * Nipu Chakraborty. * Solve Cross Browser Compatibility Issues Nipu *borty Follow Sep 8 '23 Solve Cross Browser Compatibility Issues #webdev #html #css #javascript * Function Closures Nipu *borty Follow Sep 6 '23 JavaScript Function Closures #javascript #webdev #node Add Comment 2 min read Docker Best Practices for Production Nipu *borty Follow Sep 2 '23 Docker Best Practices for Production #docker #devops #webdev #linux 15 * Automating the installation of Docker on Linux using a shell script Nipu *borty Follow Aug 27 '23 Automating the installation of Docker on Linux using a shell script #docker #linux #automation #bash 3 *d Database Transactions Nipu *borty Follow Jul 5 '23 Database Transactions #javascript #database #node #typescript * How Javascript works? (Bangla) Nipu *borty Follow May 18 '23 How Javascript works? (Bangla) #* #node Add Comment 1 min read Single Thread JavaScript Nipu *borty Follow May 18 '23 Single Thread JavaScript #node #javascript #webdev #* How JavaScript call stack works?(Bangla) Nipu *borty Follow May 18 '23 How JavaScript call stack works?(Bangla) #java* * Event loop (Bangla) Nipu *borty Follow May 18 '23 JavaScript Event loop (Bangla) #* #node * Founder & history (Bangla language) Nipu *borty Follow May 18 '23 JavaScript Founder & history (Bangla language) #javascript #node #* 1 min read .js, .cjs and .mjs defference Nipu *borty Follow May 15 '23 .js, .cjs and .mjs defference #javascript #es6 #node #webdev 66 * গিট টিউটোরিয়াল Nipu *borty Follow Dec 18 '21 গিট টিউটোরিয়াল #github #git #devops #* 1 min read Comma operator (,) Nipu *borty Follow Dec 7 '21 Comma operator (,) #* #node 5 *d What is YAML File? Nipu *borty Follow Aug 6 '21 What is YAML File? #docker #devops #security #sre 5 *d TIPS & TRICKS OF JAVASCRIPT & REACT Nipu *borty Follow Jul 24 '21 TIPS & TRICKS OF JAVASCRIPT & REACT #javascript #react #node 143 reactions 12 comments 2 *onsor Neon * ",
    "url": "https://dev.to/nipu"
  },
  {
    "body": "* Follow Report Abuse nobody-99 404 bio not found Serbia Joined on Jan 16, 2021 More info about @nobody-99 Badges * Three * t* it One * one year. Got it 1 post published 1 comment written 7 tags followed -? What is YARN ?- nobody-99 nobody-99 nobody-99 Follow Nov 3 -? What is YARN ?- #yarn #javascript #webdev #node Add C*ith nobody-99? * nobody-99. * * * ",
    "url": "https://dev.to/nobody-99"
  },
  {
    "body": "* 0 *ead 0 * 0 * nobody-99 Posted on Nov 3 -? What is YARN ?- #yarn #javascript #webdev #node When you’re working on a project and see a yarn.lock file staring back at you, you might wonder, \"What is yarn?\". So let's begin. Yarn is one of the main JS package managers that used for managing dependencies (packages and libraries) in JS projects. Package manager is a tool that helps developers handle external libraries and modules required in project → automating the process of installing, updating and managing dependencies. Installing yarn as your package manager you can do it with command: npm install -g yarn (-g means globally on your machine) and after installation you can simply run yarn —version to verify your installation of yarn. Yarn works with package.json. package.json file is a central configuration file in Node.js projects. It serves as a blueprint for the project and contains important metadata about the project, including its dependencies, scripts, versions, author information and more. Yarn create a lock files yarn.lock that's capture the exact version of all packages and their dependencies, providing a setup each time you install packages. Package managers also run scripts for build, test and deploy. Adding package with yarn yarn add package-name this fetches the package from the registry and installs it locally in node modules folder. (https://classic.yarnpkg.com/en/docs/cli/add - all you need when work with adding packages) If want to understand how yarn work you first need to understand what is Node.js. Node.js is runtime environment that allows you to run the JS on a server. [JS → runtime → server]. In 1990's when JS is mostly used like scripting language to tun in the browser, as the web platforms evolved JS is became more powerful and 2009. Node.js is released. Till then is impossible to run JS code on the server. Node.js bring for developer to be full stack and write whole application in one language that will run on server. How it works? When you visit a URL on the internet that points to your server when the request is received we can use node to handle request and read a file from the server’s file system and response back to the client so they can view the HTML in browser. We said that Yarn is a package manager that work with Node.js to manage project dependencies (libraries or packages). When you developing Node.js project, you often need third-party libraries to perform various tasks (HTTP, work with DB, building UI..). Yarn is here to automatize the process of downloading, installing, updating and managing these libraries for us. When you create project with yarn you initialize a package.json file which defines the dependencies for your project. When you run commands like yarn install or yarn add, Yarn communicate with node.js packages, downloading them and places them in node_modules folder within your project. Node.js use CommonJS module system, where each file in Node.js is treated as a separated module. Allowing you to “require” modules into your code. With “require” it is trying to locate the express module by searching through a defined path starting with node_modules. Why is this important? Node.js does not inherently manage dependencies! → it relies on external packages manager like Yarn to do this. Finish conclusion! Yarn helps Node.js with node_modules installing dependencijes that Node.js requires. Create yarn.lock to ensure consistent depencencies on various enviroments! Caches packages for faster install and offline support! Optimizes the structure of node_modules, making it more efficient for Node.js to search for dependencies. Handle dependencies conflicts and automates tasks with scripts, supporting Node.js application development and deployment. 👋 Before you go * Your next step Do your career a favor. *orth it * (0) * * * React makes yo* What is Algorithm mahdi - Oct 31 Laravel 11 Generate and Read Sitemap XML File Tutorial Saddam Hossain - Oct 27 Hiring in the Open - How Companies Can Discover Top Talent via Opire Arindam Majumder - Nov 5 How to Get Current Full URL in Laravel 11 Saddam Hossain - Oct 27 nobody-99 Follow Location Serbia Joined Jan 16, 2021 Trending on DEV Community Consistency is King, and here's why. #softskill* No more Try/Catch: a better way to handle errors in TypeScript #* #programming Meme Monday #discuss #watercooler #jokes Heroku *referenc* 👋 *** * ",
    "url": "https://dev.to/nobody-99/-what-is-yarn--3647"
  },
  {
    "body": "* 7 Add reaction 5 Like 2 *s 0 Fire 3 Jump to Comments 0 * Nitesh Sawant Posted on May 27, 2019 5 2 How to test REST API where major bussiness logic is written in SQL #help #discuss #javascript #node Hi all I am working on REST API written in express where business logic is written in raw SQL queries. I want to follow TDD for future development.But I am not able to find any resource to guide me on how to begin. Could anyone please lead me in the right direction on how to write test ? Top comments (3) * Dian Fay Dian Fay Dian Fay Follow It's pronounced Diane. I do data architecture, operations, and backend development. In my spare time I maintain Massive.js, a data mapper for Node.js and PostgreSQL. Work Staff Engineer Joined Apr 22, 2017 • May 27 '19 * have a couple of options: Use a test framework for SQL like pgTAP Analyze the database logic and test each set of inputs that can change the behavior. There's not much to say about the first option. For the second, think of an API endpoint that creates a reservation for a hotel room. Your tests should initialize the database with one or more users and one or more rooms (shameless plug: I wrote a thing that makes that a lot more manageable). Your basic test: given I already have users and rooms, I should be able to pass a request body with a user id, room id, and check in/out dates to my endpoint. After a successful request, I can retrieve a record from reservations matching my parameters. Access the database directly for setup and verification, but otherwise treat it as a \"black box\" and make sure you think through the different paths your logic takes based on the inputs you pass it. 4 likes Like Reply Nitesh Sawant Nitesh Sawant Nitesh Sawant Follow Joined Jan 2, 2018 • May 28 '* Hi Dian Thank you for your reply. I was not aware about the concept of fixtures.I will surely look into it. 2 likes Like Reply David Honey David Honey David Honey Follow Joined Oct 30, 2024 • Oct 30 • Edited on Oct 30 • * To start TDD for your Express REST API using raw SQL, first install testing packages like Mocha, Chai, and Supertest. Write a test in a file like tests/api.test.js, checking an endpoint that calculates business days. For example, you can assert that the endpoint returns the correct number of business days for given dates. Next, implement the corresponding route in your Express app, where you handle the logic for calculating business days. Ensure that your app returns the expected JSON response. Add a test script in your package.json to run the tests easily. Finally, run your tests and, once they pass, refactor your code as needed, making sure the tests still succeed. This approach helps you build reliable business logic in your API. 1 like Like Reply * Sentry Promoted * Youtube Tutorial Series * Read next Future-Proofing Your Auth0 Integration: Moving from Rules and Hooks to Actions Preethi Puttegowda - Oct 24 How to build a website using React and Rest APIs (React basics explained) alexia cismaru - Nov 6 Created a Npm package for Vite, React Tailwindcss starter code with configuration. Plain - Oct 25 How to Learn TypeScript in One Day? Sajad DP - Nov 6 Nitesh Sawant Follow Joined Jan 2, 2018 More from Nitesh Sawant Supercharge Your Strapi CMS Setup ⚡ #node #javascript #backend #strapi Firebase - Remove Obsolete FCM Tokens in Node JS. #node #javascript #firebase #fcm Is it common for developer to loose passion to learn new things ? #discuss #help #productivity _Su* UI Component * retain full ownership *ion limits. * * * * ",
    "url": "https://dev.to/ns23/how-to-test-rest-api-where-major-bossiness-logic-is-written-in-sql-41ml"
  },
  {
    "body": "* Follow Report Abuse Adams Adebayo Writing technically correct tutorials. Lagos, Nigeria Joined on Jan 6, 2020 Pronouns he/him Work Technical Writer and Editor - HoneyBadger, ContentLab, THDC, and Convoy * Four * four years. Got it 2 Week Co* 1 We*t *t it T* years. G* @olodocoder Skills/Languages PHP, Go, JavaScript, Nodejs, and Laravel Currently learning Go and Vue 3 Available for Junior Go Developer & Technical Writing Jobs 25 posts published 34 comments written 10 tags followed Authorization: Understanding Policies in Laravel * Oct 18 Authorization: Understanding Policies in Laravel #laravel #php #tutorial #webdev 4 reactions 4 comments 9 m*dams Adebayo ? * Adams Adebayo . * Linux Series: Understanding Cron in Ubuntu * Mar 8 Linux Series: Understanding Cron in Ubuntu #linux #cloud #beg*mment 4 min read Linux Series: Full Guide Managing Processes in Ubuntu * Mar 7 Linux Series: Full Guide Managing Processes in Ubuntu #linux #cloud #beginners #tutorial 13 reactions 5 comments 7 min read Linux Series: Files and Directory Permissions in Ubuntu * Mar 6 Linux Series: Files and Directory Permissions in Ubuntu #linux #cloud #beginners #tutorial 19 * Linux Series: Understanding Groups in Ubuntu * Mar 5 Linux Series: Understanding Groups in Ubuntu #linux #cloud #beginners #tutorial 8 *d Linux Series: Practical Guide to Managing Users in Ubuntu * Mar 4 Linux Series: Practical Guide to Managing Users in Ubuntu #linux #cloud #beginners #tutorial 13 * JavaScript Web APIs Series: File and Storage APIs * Jan 31 JavaScript Web APIs Series: File and Storage APIs #javascript #webdev #api #programming 5 reactions 3 comments 11 min read JavaScript Web APIs Series: Document Object Model APIs * Sep 21 '23 JavaScript Web APIs Series: Document Object Model APIs #javascript #webdev #api #programming 8 * JavaScript Web APIs Series: Device and Sensor APIs * Aug 8 '23 JavaScript Web APIs Series: Device and Sensor APIs #javascript #webdev #api #programming 11 *ad JavaScript Web APIs Series: Background and Synchronization APIs * Jul 18 '23 JavaScript Web APIs Series: Background and Synchronization APIs #javascript #webdev #api #* 9 min read JavaScript Web APIs Series: Audio and Video APIs * Jul 13 '23 JavaScript Web APIs Series: Audio and Video APIs #javascript #webdev #api #programming 12 * JavaScript Web APIs Series: Introduction * Jul 7 '23 JavaScript Web APIs Series: Introduction #javascript #webdev #api #programming 13 reactions 3 comments 6 min read Introduction to Data Structures and Algorithms * May 18 '23 Introduction to Data Structures and Algorithms #data #algorithms #beginners 5 *d Go Beginners Series: Data Structures, Structs, and Pointers * May 5 '23 Go Beginners Series: Data Structures, Structs, and Pointers #go #beginners #programming 8 *d Go Beginners Series: Collection Types, Arrays, Slices, and Maps * Apr 27 '23 Go Beginners Series: Collection Types, Arrays, Slices, and Maps #go #beginners #programming 7 reactions 2 comments 9 min read Go Beginners Series: Function Declarations, Parameters, Return Values, and Packages * Apr 6 '23 Go Beginners Series: Function Declarations, Parameters, Return Values, and Packages #go #beginners #* 7 min read Go Beginners Series: Control Flow Statements: If-else, Switch, and Loops * Mar 29 '23 Go Beginners Series: Control Flow Statements: If-else, Switch, and Loops #go #beginners #* 10 min read Go Beginners Series: Variables, Data Types, and Operators * Mar 24 '23 Go Beginners Series: Variables, Data Types, and Operators #go #beginners #* 13 min read Go Beginners Series: Introduction, Installation, and Setting Up Go Environment * Mar 21 '23 Go Beginners Series: Introduction, Installation, and Setting Up Go Environment #go #beginners #* 5 min read Laravel API Series: Laravel Sanctum Setup, Sign Up, Login, and Logout * May 15 '22 Laravel API Series: Laravel Sanctum Setup, Sign Up, Login, and Logout #laravel #webdev #beginners #tutorial 22 reactions 4 comments 9 min read Laravel API Series: Validation and Table Relationships * Apr 22 '22 Laravel API Series: Validation and Table Relationships #laravel #webdev #beginners #* 5 min read Laravel API Series: Controllers, CRUD, Routing and Search Functionality * Apr 7 '22 Laravel API Series: Controllers, CRUD, Routing and Search Functionality #laravel #webdev #beginners #tutorial 12 *ad Laravel API Series: Setup, Database, Migrations, and Models * Mar 7 '22 Laravel API Series: Setup, Database, Migrations, and Models #laravel #webdev #beg*mment 8 min read Laravel Seeding: Generate mock data using Faker * Jan 29 '22 Laravel Seeding: Generate mock data using Faker #webdev #beginners #tutorial #laravel 15 reactions 4 comments 4 min read How to use Blade UI Icons in your Laravel Project * Jan 22 '22 How to use Blade UI Icons in your Laravel Project #laravel #php #beginners #tutorial 14 reactions 1 comment 3 *onsor Neon * ",
    "url": "https://dev.to/olodocoder"
  },
  {
    "body": "* Follow Report Abuse Michael Otu Be allergic to a boring life, however be bored and enjoy it Accra, Ghana Joined on Jul 28, 2020 Education University of Ghana, Legon Work Backend Engineer at Axionteq LLC Four * four years. Got it * 500 Thumbs Up Milestone Awarded for giving 500 thumbs ups (👍) to a variety of posts across DEV. This is a mod-exclusive badge. Got it 100 Thumbs Up Milestone Awarded for giving 100 thumbs ups (👍) to a variety of posts across DEV. This is a mod-exclusive badge. * Trusted Member 2022 Awarded for being a trusted member in 2022. Got it Redis x DEV Hackathon Participant Awarded to everyone who participated in the 2022 Redis Hackathon on DEV. Great work, y'all! Got it 2 Week Co* Two * two years. Got it 1 We*t * One * one year. ** * * * Hacktoberfest 2020 *20 * Show all 14 badges More info about @otumianempire Skills/Languages Python, Javascript, Typescript, GoLang, SQL, Git Currently learning Typescript, C#/dotnet, GoLang Available for Python programming 81 posts published 200 comments written 20 tags followed JavaScript Essentials: Part 7 * Nov 2 JavaScript Essentials: Part 7 #* * Want to connect with Michael Otu ? * Michael Otu . * *) * Oct 28 *) #javascript #beginners #api #node 5 reactions 1 comment 17 * 5 * Oct 18 JavaScript Essentials: Part 5 #node #javascript #api #beginners 2 reactions 1 comment 16 * 4 * Oct 13 JavaScript Essentials: Part 4 #* 4 reactions 1 comment 16 * 3 * Oct 7 JavaScript Essentials: Part 3 #node #api #javascript #beginners 5 reactions 4 comments 11 * 2 * Oct 1 JavaScript Essentials: Part 2 #* 2 reactions Add Comment 9 * 1 * Sep 17 JavaScript Essentials: Part 1 #* 3 * isNaN vs Number.isNaN * Sep 3 isNaN vs Number.isNaN #javascript #ts #node #programming * What is Nodejs * Jul 31 What is Nodejs #javascript #typescript #node #api 1 reaction 1 comment 7 min read Request and Response * Mar 14 Request and Response #javascript #node #programming #tutorial 4 reactions 1 comment 8 min read What is JSON * Mar 9 What is JSON #javascript #typescript #node #api 12 * What is REST API * Mar 1 What is REST API #javascript #typescript #node #api 22 reactions 6 comments 4 min read What is an API * Feb 24 What is an API #javascript #typescript #node #api 6 reactions Add C* Back-end * Feb 21 Introduction to Back-end #javascript #typescript #node #api 7 *d Backend Development Plan * Feb 15 Backend Development Plan #javascript #typescript #node #api 10 *d Distribution of Random Numbers * May 3 '23 Distribution of Random Numbers #c #beginners #learning #programming Add Comment 7 min read My Journey as a Software Engineer: Reflections and Future Goals * Apr 27 '23 My Journey as a Software Engineer: Reflections and Future Goals #productivity #career #learning #motivation 2 *d ARMS-redis-ts * Aug 26 '22 ARMS-redis-ts #redishackathon #typescript #redis 2 *d Now we are talking redis * Aug 22 '22 Now we are talking redis #redishackathon #redis #typescript #node 3 * I am doing redis or what? * Aug 21 '22 I am doing redis or what? #watercooler #redishackathon #redis #node 3 * Where do I start * Aug 19 '22 Where do I start #redishackathon #javascript #programming #devjournal * Mastermind Board Game Implementation In Python * Jun 24 '22 Mastermind Board Game Implementation In Python #python #beginners #programming #codenewbie 9 * A S*g - Part 5 (Anonymous and Inner Classes, Enum) * Jun 18 '22 A S*g - Part 5 (Anonymous and Inner Classes, Enum) #* 9 * A S*g - Part 4 (Abstraction) * Jun 11 '22 A S*g - Part 4 (Abstraction) #* 4 *ad A S*g - Part 3 (Polymorphism) * Jun 5 '22 A S*g - Part 3 (Polymorphism) #* 4 * A S*g - Part 2 (Inheritance) * May 30 '22 A S*g - Part 2 (Inheritance) #* 6 * Prerequisite for Data Structures and Algorithms in Python * May 25 '22 Prerequisite for Data Structures and Algorithms in Python #python #series #* 1 comment 3 min read A S*g - Part 1 (Encapsulation) * Apr 29 '22 A S*g - Part 1 (Encapsulation) #* 3 reactions 1 comment 10 *a - Lists * Mar 26 '*a - Lists #* 7 reactions Add Comment 5 *a - Class and Method * Mar 18 '*a - Class and Method #* 2 reactions Add Comment 8 *a - Loops and Array * Mar 14 '*a - Loops and Array #* 6 reactions 2 comments 9 *a - Conditionals * Mar 8 '*a - Conditionals #* 3 reactions Add Comment 7 *a - Wet grounds * Mar 5 '*a - Wet grounds #* 6 *d Custom Email Validation in Python (Function for email validation) * Feb 28 '22 Custom Email Validation in Python (Function for email validation) #python #tutorial #beginners #* 4 min read Custom Password Validation in Python (Unit test the function for password validation) * Feb 17 '22 Custom Password Validation in Python (Unit test the function for password validation) #python #tutorial #beginners #codenewbie 3 * Custom Password Validation in Python (Refactoring the function for password validation) * Feb 14 '22 Custom Password Validation in Python (Refactoring the function for password validation) #python #beginners #tutorial #* 4 min read Custom Password Validation in Python (Function for password validation) * Feb 13 '22 Custom Password Validation in Python (Function for password validation) #python #beginners #tutorial #* 5 min read So The newbies Created a Utils File (What Do I Do?) * Feb 4 '22 So The newbies Created a Utils File (What Do I Do?) #python #programming #codenewbie 2 * So The Newbie Created a Utility File? (Who wrote that code?) * Jan 29 '22 So The Newbie Created a Utility File? (Who wrote that code?) #python #beginners #programming #codenewbie * So The Newbie Created a Utility File? (The Helper File) * Jan 21 '22 So The Newbie Created a Utility File? (The Helper File) #python #beginners #programming #codenewbie 3 * Python Virtual Environment * Dec 6 '21 Python Virtual Environment #python #* 21 reactions 1 comment 9 *se 26 - Starting a project * May 7 '*se 26 - Starting a project #python3 #tutorial #beginners #* 3 *se 25 - SQLite * Apr 13 '*se 25 - SQLite #*orial 3 reactions Add Comment 4 *se 24 - SQL * Apr 7 '*se 24 - SQL #*orial 2 reactions Add Comment 3 *se 23 - Git * Apr 3 '*se 23 - Git #python3 #* 4 reactions Add Comment 6 *se 22 - Unit Testing * Mar 29 '*se 22 - Unit Testing #*orial 5 reactions Add Comment 4 *se 21 - Modules * Mar 24 '*se 21 - Modules #*orial 7 *d Create a GitHub Personal Access Token and SSH for Your GitHub Repository * Mar 21 '21 Create a GitHub Personal Access Token and SSH for Your GitHub Repository #github #git #ssh #tutorial 17 reactions 2 comments 4 *se 20 c - Continuation of OOP concepts * Mar 15 '*se 20 c - Continuation of OOP concepts #*orial 6 reactions Add Comment 1 *se 20 b - OOP Concepts * Mar 9 '*se 20 b - OOP Concepts #*orial 4 reactions Add Comment 3 *se 20 a - Introduction to OOP * Mar 4 '*se 20 a - Introduction to OOP #*orial 2 reactions 2 comments 6 *se 19 - Files * Mar 1 '*se 19 - Files #*orial 4 reactions Add Comment 4 *se 18 - Exceptions * Feb 26 '*se 18 - Exceptions #*orial 10 reactions 2 comments 5 *se 17 - Dictionary * Feb 22 '*se 17 - Dictionary #python3 #tutorial #beginners #* 3 *se 16 - Set * Feb 19 '*se 16 - Set #*orial 3 reactions Add Comment 2 *se 15 - Tuple * Feb 17 '*se 15 - Tuple #python3 #* 6 reactions Add Comment 2 *se 14 - List * Feb 10 '*se 14 - List #*orial 2 reactions Add Comment 5 *se 13 - Some built-in functions * Feb 6 '*se 13 - Some built-in functions #python #beginners #tutorial #* 2 *se 12 c - Recursive and lambda functions * Feb 3 '*se 12 c - Recursive and lambda functions #python #tutorial #beginners #programming 5 reactions 1 comment 5 *se 12 b - Function that returns a value * Jan 29 '*se 12 b - Function that returns a value #python #programming #tutorial #* 6 *onsor Neon * ",
    "url": "https://dev.to/otumianempire"
  },
  {
    "body": "* 5 Add reaction 1 Like 1 Unicorn 1 Exploding Head 1 Raised Hands 1 Fire 1 Jump to Comments 1 * Michael Otu Posted on Oct 28 1 1 1 1 1 *) #javascript #beginners #api #node Node.js Backend Essentials: A Crash Course for New Developers (14 Part Series) 1 Backend Development Plan 2 Introduction to Back-end ... 10 more parts... 3 What is an API 4 What is REST API 5 What is JSON 6 Request and Response 7 What is Nodejs 8 JavaScript Essentials: Part 1 9 JavaScript Essentials: Part 2 10 JavaScript Essentials: Part 3 11 JavaScript Essentials: Part 4 12 JavaScript Essentials: Part 5 13 *) 14 JavaScript Essentials: Part 7 In this section, we will implement a game called Mastermind in JavaScript. This game development would cover a lot of the concepts that we have discussed so far. We will define functions, pass arguments to them, make use of variables, and make use of loops and if statements. We would briefly look at another concept around functions, known as IIFE, Immediately Invoked Function Expression. We will also look at how to take user input via the command line. At this point, it is just console applications. You can reference a similar implementation here, Master mind in python Mastermind is a simple board game that uses colours but We'd use numbers instead. Summary: Behind a bar are four colours put up by one player. The other player can not see the first player's colours. The first player's colours are called the code maker and the other player's colours are the code breaker. The code breaker has, inclusively, between 2 to 12 attempts at guessing the code makers'. The number of attempts must be even. Implementation Create a folder called mastermind on your pc (or where you put your projects) and in mastermind, initialize a node project using npm init -y (on the command line). I am on a Linux machine so this is how I will set up my project. Open my terminal, run, cd to move me to the user folder. Then, cd ~/projects. projects is where I keep my projects. Then mkdir mastermind and cd mastermind to create the mastermind folder and change into that folder. Initialize a node project with npm init -y. A package.json file will be created. Create app.js with touch app.js. Write console.log(\"Mastermind\") into app.js and run it with node app.js. I expect to see Mastermind else I have an issue with my setup. The starting (entry) point of this game will be in App, a function. Let's create a function called App and add console.log(\"App\"). We can then call App() and execute the code with node app.js. I won't be telling you to run your code but it is something you should be doing as you code along. This is the current content of my app.js file. console.log(\"Mastermind\"); function App() { console.log(\"App\"); } App(); When the game starts user enters the number of rounds they want to play and the value entered must be validated user chooses whether to allow duplicates or not somewhere the code maker is randomly generated user has entered the code breaker the code breaker is compared to the code maker and a hint is given if it doesn't match in the process, we make the number of rounds and to make this more game-like we put the whole App into an infinite loop Let's implement a function to generate random numbers for the code make, thereby setting random values to the code maker. First, we need a way to generate random numbers. Not to interfere with the code in the app.js, let's create another file called scratch_pad.js and in this file we experiment. JavaScript has a simple way to generate random numbers calling Math.random(). In the scratch pad, let's log 4 random numbers using a looping construct. for (let i = 0; i < 4; i++) { console.log(Math.random()); } // 0.10037268097853191 // 0.20981624777230534 // 0.47828165742292583 // 0.8160883929470153 what we want are integers (numbers like) 0, 1, 2, ..., 9 not decimals. We can multiply the value returned from the Math.random() by 10 and we would have x.something where x will now be in 1,2,3,...,9. Remember these experiments are all done on the scratch pad. Give it a try. What we want is a number before the dot, the whole number part. We can write code to convert the number to a string and then split it by the \".\" and get the first element. However, there is a functionality for that called floor which we can use. for (let i = 0; i < 4; i++) { console.log(Math.floor(Math.random() * 10)); } // 4 // 7 // 3 // 4 The way this works is that, if we want to get random numbers between some number min and max, where max is greater than min, then we can do, min + *)). min is the minimum expected value and max is the maximum expected value. In our case, we have our minimum value to be 0 and maximum to be 9. This is my snippet for generating the random number. I added parameters to the function because I don't want the function to have an internal state. function generateRandomNumbersBetween(min, max) { return min + *)); } for (let i = 0; i < 4; i++) { console.log(generateRandomNumbersBetween(0, 9)); } At this point, we can now go back into our app.js and add the function above to generate the random numbers for the code maker. Put it above the App function. From the summary the number of colours used is 4. So we need to generate 4 numbers for the code maker. We also have to handle if duplicates are allowed. Back to the scratchpad. We have functions, if and else statements, the for and while loops, etc. These constructs all have a block or a body. Variables initialized in these blocks can be used within the block and not outside of it. This is known as the scope of a variable. So a variable can exist in the global scope, which means that that variable can be used or assessed everywhere. When we declare a variable in a block. The variable becomes internal or limited in that scope. Run this in the scratchpad. const HP = 100; if (true) { console.log(\"IF BLOCK::\", HP); } console.log(\"End::\", HP); // IF BLOCK:: 100 // End:: 100 Now update this by initializing a variable,x, in the if statement, console.log(x) outside the if block and run your scratch pad. You should get an error similar to this. IF BLOCK:: 100 /home/Projects/mastermind/scratch_pad.js:8 console.log(x) ^ ReferenceError: x is not defined at Object.<anonymous> (/home/Projects/mastermind/scratch_pad.js:8:13) at Module._compile (*:1469:14) at Module._extensions..js (*:1548:10) at Module.*oader:1288:32) at Module._*oader:1104:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) at node:internal/main/run_main_module:28:49 Node.js v20.17.0 At this point I want to bring to your attention the idea about scopes. When generating the code maker, we want to know if duplicates are allowed and at this point, we know that the code maker is an array of numbers (or numeric strings). Let's start with the scratchpad. We want to implement a function that takes in a boolean argument indicating if duplicates are allowed. The function will add (push) four numbers into the code maker but before that, we have to check if duplicates are allowed and handle when not. // a global code maker that is accessible inside any other scope let CODE_MAKER = []; function generateRandomNumbersBetween(min, max) { return min + *)); } function generateCodeMaker(isDuplicatesAllowed = false) { let counter = 0; while (counter < 4) { let code = generateRandomNumbersBetween(0, 9); if (isDuplicatesAllowed) { CODE_MAKER.push(code); counter += 1; } else if (!CODE_MAKER.includes(code)) { CODE_MAKER.push(code); counter += 1; } } } console.log(CODE_MAKER); generateCodeMaker(true); console.log(CODE_MAKER); // reset the code maker CODE_MAKER = []; generateCodeMaker(false); console.log(CODE_MAKER); // [] // [ 6, 6, 0, 9 ] // [ 2, 5, 0, 8 ] we also have written our code in such a way that the code maker isn't accessed globally in the code maker function. So will return the code maker instead. // a global code maker that is accessible inside any other scope let CODE_MAKER = []; function generateRandomNumbersBetween(min, max) { return min + *)); } function generateCodeMaker(isDuplicatesAllowed = false) { let counter = 0; let codeMaker = []; while (counter < 4) { let code = generateRandomNumbersBetween(0, 9); if (isDuplicatesAllowed) { codeMaker.push(code); counter += 1; } else if (!codeMaker.includes(code)) { codeMaker.push(code); counter += 1; } } return codeMaker; } console.log(CODE_MAKER); CODE_MAKER = generateCodeMaker(true); console.log(CODE_MAKER); CODE_MAKER = generateCodeMaker(false); console.log(CODE_MAKER); // [] // [ 6, 6, 0, 9 ] // [ 2, 5, 0, 8 ] In app.js we can now add the code maker function and a variable for the code make. Now back to the scratchpad. We want to take input from the user from the terminal. Javascript has a way to do that too. Try this snippet. const readline = require(\"readline\"); const readlineOInstance = readline.createInterface({ input: process.stdin, output: process.stdout, }); readlineOInstance.question(\"Enter code maker: \", (userInput) => { console.clear(); console.log(`INPUT: ${userInput}`); readlineOInstance.close(); }); There is no issue with this approach of taking user input. It is just that we have to use a callback function and there is no way to pass the entered input to the outer scope of the callback function of readlineOInstance.question. What are you thinking? Try it out in the \"scratch pad\". If you are thinking about declaring a variable in the outer scope of readlineOInstance.question the assigning the input entered to it, then it is a good approach but ... Still try it. Do you remember the concept of Promises? We can use promise here and resolve the input. However, we have to wrap the whole process in function. There are a few parts of the readlineOInstance.question has a header similar to question(query: string, callback: (answer: string) => void. The query is the query (or prompt) to the user and the callback is how we handle the input collection. Since we might reuse the same function somewhere later, we'd pass the query as an argument. const readline = require(\"readline\"); async function getInput(query) { const readlineOInstance = readline.createInterface({ input: process.stdin, output: process.stdout, }); return await new Promise((resolve) => { readlineOInstance.question(query, (userInput) => { resolve(userInput); readlineOInstance.close(); }); }); } (async () => { const userInput = await getInput(\"Enter code maker: \"); console.clear(); console.log(`INPUT: ${userInput}`); })(); Now we can add the getInput function to the app.js. Do not forget the import, const readline = require(\"readline\"). The content of the app.js should be similar to the snippet below. const readline = require(\"readline\"); console.log(\"Mastermind\"); let CODE_MAKER = []; function generateRandomNumbersBetween(min, max) { return min + *)); } function generateCodeMaker(isDuplicatesAllowed = false) { let counter = 0; let codeMaker = []; while (counter < 4) { let code = generateRandomNumbersBetween(0, 9); if (isDuplicatesAllowed || !codeMaker.includes(code)) { codeMaker.push(code); counter += 1; } } return codeMaker; } async function getInput(query) { const readlineOInstance = readline.createInterface({ input: process.stdin, output: process.stdout, }); return await new Promise((resolve) => { readlineOInstance.question(query, (userInput) => { resolve(userInput); readlineOInstance.close(); }); }); } function App() { console.log(\"App\"); } App(); Now we ask the user to enter the number of rounds and if a duplicate is allowed. We know that the number of rounds must be even and between 2 to 12. We will implement a function to validate a value (number) to be even and between 2 and 12. It will return a boolean. A number is even when the number modulo 2 is zero. (ie. number % 2 == 0). function isValidRound(rounds) { return 2 <= rounds && rounds <= 12 && rounds % 2 == 0; } In the body of the App function, we can ask for the inputs and validate them. We will continuously ask for the proper input for the number of rounds. For the duplicate values in the code, when the user enters anything other than the expected we'd assume that the user doesn't want duplicates. We will use a while loop and set the condition to be true and only break when the rounds are valid however using a try and a catch (for error handling), when the user enters an invalid value we log a message indicating that the value entered is invalid. Try it out. let rounds = 0; let isDuplicateAllowed = false; // The number of times to play must be even between 2 to 12 rounds while (true) { try { const roundsInput = await getInput( \"*]: \" ); // Number(some value) -> converts some value to a number // if possible else returns NaN. we could directly check // that 'rounds' is not NaN but any error will be caught // in the catch rounds = Number(roundsInput); if (isValidRound(rounds)) { break; } } catch (error) { console.log(INVALID_ROUNDS_PROMPT); } } // should there be duplicates try { const duplicateInput = await getInput(\"Allow duplicates [1/0]: \"); isDuplicateAllowed = Number(duplicateInput) === 1; } catch (error) { isDuplicateAllowed = false; } console.log( `Number of rounds: (${rounds}) | Duplicate allowed: (${ isDuplicateAllowed === 1 ? \"Yes\" : \"No\" })` ); Run the app.js and interact with it. This is a similar output during the interaction. Mastermind App *]: 1 *]: 5 *]: 7 *]: 100 *]: 0 *]: -2 *]: 2 Allow duplicates [1/0]: 1 Number of rounds: (2) | Duplicate allowed: (Yes) We have taken the number of rounds and the value for duplication. Now we can generate the code maker. To do this we can call the generateCodeMaker function and pass the duplication option value to it (or leave it since it's by default false). console.clear(); CODE_MAKER = generateCodeMaker(); console.log(CODE_MAKER); Now we can ask the user for the code breaker and compare it to the code maker. The code breaker is also an array of numbers. We will also add a hint for the user to know how far they are from a particular code. So if the code for the code breaker is greater than the code of the code maker, we say more. We say equal when they are equal and else we say less when the code from the code breaker is less than the code of the code breaker. Let's head into the scratchpad. We will create a function that will take a numeric array of 4 elements and then compare the user's input (code breaker). const readline = require(\"readline\"); // generated by the code maker function let CODE_MAKER = [3, 6, 7, 0]; async function getInput(query) { const readlineOInstance = readline.createInterface({ input: process.stdin, output: process.stdout, }); return await new Promise((resolve) => { readlineOInstance.question(query, (userInput) => { resolve(userInput); readlineOInstance.close(); }); }); } // new code let HINTS = [0, 0, 0, 0]; async function compareCode(codeMaker) { // enter guess with spaces const input = await getInput(\"*: \"); // we are converting the code breaker into numbers const codeBreaker = input.split(\" \").map((value) => Number(value)); // compare each code at the same index and provide a hint for (let codeIndex = 0; codeIndex < 4; codeIndex++) { if (codeBreaker[codeIndex] > codeMaker[codeIndex]) { HINTS[codeIndex] = 1; } else if (codeBreaker[codeIndex] === codeMaker[codeIndex]) { HINTS[codeIndex] = 0; } else { HINTS[codeIndex] = -1; } } } (async () => { console.log(`INITIAL Hint: ${HINTS}`); // await because of the input await compareCode(CODE_MAKER); console.log(`INITIAL Hint: ${HINTS}`); })(); We have a variable to handle the hints and a value for each code related to the code maker and breaker. We pass the code maker to the function to compare it against the input from the user. We update the hints to let the user know how to update the values in the code breaker Now we can add the HINTS and compareCode function to the app.js. It is a great time to run your app.js, above the App function. Now that we implemented a function to compare the code maker and the code breaker, we can now put this in a loop to account for the rounds (rounds = number of times to play the game). So if the number of rounds is 6, then the game would be played 6 times but we'd have to terminate the game when the user guesses all the codes correctly, that is when the values in the HINTS are all 0s. So when we count the number of 0s in HINTS and it is 4, we can terminate the game and say the user won. // code breaker guesses the code by the code maker while (rounds > 0) { console.log(`Number of rounds left: ${rounds}`); await compareCode(CODE_MAKER); // because of the values that we used to hint to the user // we have to find some dicey way to break the program // when the user guesses the code (all hints go to 0) if (HINTS.filter((value) => 0 === value).length === 4) { break; } console.log(HINTS); rounds -= 1; } The number of rounds is reduced and we'd know whether the user won or not if the number of rounds is not 0. if (rounds > 0) { console.log(\"You won... Congratulations...\"); } else { console.log(\"You lost bitterly to a computer\"); } Some outputs when you run the program Mastermind App *]: 6 Allow duplicates [1/0]: 0 When I hit enter Number of rounds left: 6 *: 7 7 7 7 [ 1, 1, 1, 1 ] Number of rounds left: 5 *: 1 2 3 5 [ -1, -1, 1, 1 ] Number of rounds left: 4 *: 4 5 1 3 [ -1, -1, 1, 1 ] Number of rounds left: 3 *: 5 6 0 2 [ 0, 0, 0, 1 ] Number of rounds left: 2 *: 5 6 0 1 You won... Congratulations... I guess we can enjoy our hard work so far. I have about 130 lines. How many do you have? This is the full code const readline = require(\"readline\"); console.log(\"Mastermind\"); let CODE_MAKER = []; let HINTS = [0, 0, 0, 0]; function generateRandomNumbersBetween(min, max) { return min + *)); } function generateCodeMaker(isDuplicatesAllowed = false) { let counter = 0; let codeMaker = []; while (counter < 4) { let code = generateRandomNumbersBetween(0, 9); if (isDuplicatesAllowed || !codeMaker.includes(code)) { codeMaker.push(code); counter += 1; } } return codeMaker; } async function getInput(query) { const readlineOInstance = readline.createInterface({ input: process.stdin, output: process.stdout, }); return await new Promise((resolve) => { readlineOInstance.question(query, (userInput) => { resolve(userInput); readlineOInstance.close(); }); }); } function isValidRound(rounds) { return 2 <= rounds && rounds <= 12 && rounds % 2 == 0; } async function compareCode(codeMaker) { // enter guess with spaces const input = await getInput(\"*: \"); // we are converting the code breaker into numbers const codeBreaker = input.split(\" \").map((value) => Number(value)); // compare each code at the same index and provide a hint for (let codeIndex = 0; codeIndex < 4; codeIndex++) { if (codeBreaker[codeIndex] > codeMaker[codeIndex]) { HINTS[codeIndex] = 1; } else if (codeBreaker[codeIndex] === codeMaker[codeIndex]) { HINTS[codeIndex] = 0; } else { HINTS[codeIndex] = -1; } } } async function App() { console.log(\"App\"); let rounds = 0; let isDuplicateAllowed = 0; // The number of times to play must be even between 2 to 12 rounds while (true) { try { const roundsInput = await getInput( \"*]: \" ); // Number(some value) -> converts some value to a number // if possible else returns NaN. we could directly check // that 'rounds' is not NaN but any error will be caught // in the catch rounds = Number(roundsInput); if (isValidRound(rounds)) { break; } } catch (error) { console.log(INVALID_ROUNDS_PROMPT); } } // should there be duplicates try { const duplicateInput = await getInput(\"Allow duplicates [1/0]: \"); isDuplicateAllowed = Number(duplicateInput) === 1; } catch (error) { isDuplicateAllowed = false; } console.clear(); CODE_MAKER = generateCodeMaker(isDuplicateAllowed); // code breaker guesses the code by the code maker while (rounds > 0) { console.log(`Number of rounds left: ${rounds}`); await compareCode(CODE_MAKER); // because of the values that we used to hint to the user // we have to find some dicey way to break the program // when the user guesses the code (all hints go to 0) if (HINTS.filter((value) => 0 === value).length === 4) { break; } console.log(HINTS); rounds -= 1; } if (rounds > 0) { console.log(\"You won... Congratulations...\"); } else { console.log(\"You lost bitterly to a computer\"); } } App(); Is there room for improvement? Even though this is a simple console/terminal/text-based app, there is more we can do about it. We can replace all constants such as strings and numbers. We could pull out (refactor) the code breaker input and splitting of it, out of the compare code and then pass the code breaker and code maker as arguments. We could even let the function return the hints rather than accessing the hints globally. We will create a new hints variable and return it. So compareCode will return hints assigned to the hints variable. async function compareCode(codeMaker) { // enter guess with spaces const input = await getInput(\"*: \"); // we are converting the code breaker into numbers const codeBreaker = input.split(\" \").map((value) => Number(value)); // compare each code at the same index and provide a hint for (let codeIndex = 0; codeIndex < 4; codeIndex++) { if (codeBreaker[codeIndex] > codeMaker[codeIndex]) { HINTS[codeIndex] = 1; } else if (codeBreaker[codeIndex] === codeMaker[codeIndex]) { HINTS[codeIndex] = 0; } else { HINTS[codeIndex] = -1; } } } we can also wrap the console.clear() into a function. we can let the program slow down before the next game we can pull out HINTS.filter((value) => 0 === value).length === 4 as a function. The purpose of it is to check if the code breaker has guessed correctly the code maker. we can also do the same for declaring who won the game if (rounds > 0) { console.log(\"You won... Congratulations...\"); } else { console.log(\"You lost bitterly to a computer\"); } Put all functions that can stand alone into their own file, functions.js and export them. We can then refactor standalone functions that depend on a global variable and then pass that data as an argument to the function using a parameter. We can even have a separate file for (async () => { while (true) { // Run the App function await App(); // Wait for a specified time before the next run await sleep(WAITING_TIME); // Clear the screen clearScreen(); // Reset the game state for replay CODE_MAKER = [0, 0, 0, 0]; HINTS = [0, 0, 0, 0]; } })(); Conclusion We have used all that we have learnt in this project and there is more. I mentioned that we could group some functions and export them. For this, we will discuss how to import and export in Javascript. I will provide another project that I think will be useful to you. This is the end of the mastermind game and I hope you will also do some refactoring since there are a lot of places that need to be refactored. Best of luck... const readline = require(\"readline\"); let CODE_MAKER = []; let HINTS = [0, 0, 0, 0]; // string constants const ROUNDS_PROMPT = \"Enter number of rounds (Even in [2, 12]) 🤗️: \"; const INVALID_ROUNDS_PROMPT = \"Round must be an even number from 2 to 12 includes 😩️\"; const DUPLICATE_PROMPT = \"Duplicates allowed? (1/0) 🤤️: \"; const CODE_BREAKER_PROMPT = \"Enter codes separated by space: \"; const WIN_PROMPT = \"You won the rounds 👏️\"; const LOSS_PROMPT = \"You lost bitterly to a computer 😏️\"; // int constants const ZERO = 0; const ONE = 1; const NUMBER_CODE = 4; const TERMINATING_VALUE = 0; const MORE = 1; const EQUAL = 0; const LESS = -1; const MIN_ROUNDS = 2; const MAX_ROUNDS = 12; const RAND_INT_MIN = 0; const RAND_INT_MAX = 9; const WAITING_TIME = 5000; // in milliseconds function generateRandomNumbersBetween(min, max) { return min + *)); } function generateCodeMaker(isDuplicatesAllowed = false) { let counter = ZERO; let codeMaker = []; while (counter < NUMBER_CODE) { let code = generateRandomNumbersBetween(RAND_INT_MIN, RAND_INT_MAX); if (isDuplicatesAllowed || !codeMaker.includes(code)) { codeMaker.push(code); counter += ONE; } } return codeMaker; } async function getInput(query) { const readlineOInstance = readline.createInterface({ input: process.stdin, output: process.stdout, }); return await new Promise((resolve) => { readlineOInstance.question(query, (userInput) => { resolve(userInput); readlineOInstance.close(); }); }); } function isValidRound(rounds) { return MIN_ROUNDS <= rounds && rounds <= MAX_ROUNDS && rounds % 2 == ZERO; } function compareCode(codeMaker, codeBreaker) { let hints = [0, 0, 0, 0]; // compare each code at the same index and provide a hint for (let codeIndex = 0; codeIndex < NUMBER_CODE; codeIndex++) { if (codeBreaker[codeIndex] > codeMaker[codeIndex]) { hints[codeIndex] = MORE; } else if (codeBreaker[codeIndex] === codeMaker[codeIndex]) { hints[codeIndex] = EQUAL; } else { hints[codeIndex] = LESS; } } return hints; } function clearScreen() { console.clear(); } function hasGuessedCodeMaker(hints) { return hints.filter((code) => ZERO === code).length === NUMBER_CODE; } function declareResult(rounds) { if (rounds > TERMINATING_VALUE) { console.log(WIN_PROMPT); } else { console.log(LOSS_PROMPT); } } async function sleep(ms) { return new Promise((resolve) => setTimeout(resolve, ms)); } // This is where the whole game is at async function App() { let rounds = ZERO; let isDuplicateAllowed = false; // The number of times to play must be even between 2 to 12 rounds while (true) { try { const roundsInput = await getInput(ROUNDS_PROMPT); // Number(some value) -> converts some value to a number // if possible else returns NaN. we could directly check // that 'rounds' is not NaN but any error will be caught // in the catch rounds = Number(roundsInput); if (isValidRound(rounds)) { break; } } catch (error) { console.log(INVALID_ROUNDS_PROMPT); } } // should there be duplicates try { const duplicateInput = await getInput(DUPLICATE_PROMPT); isDuplicateAllowed = Number(duplicateInput) === ONE; } catch (error) { isDuplicateAllowed = false; } clearScreen(); CODE_MAKER = generateCodeMaker(isDuplicateAllowed); // code breaker guesses the code by the code maker while (rounds > TERMINATING_VALUE) { console.log(`Number of rounds left: ${rounds}`); // enter guess with spaces const codeBreakerInput = await getInput(CODE_BREAKER_PROMPT); // we are converting the code breaker into numbers const codeBreaker = codeBreakerInput .split(\" \") .map((value) => Number(value)); HINTS = compareCode(CODE_MAKER, codeBreaker); // because of the values that we used to hint to the user // we have to find some dicey way to break the program // when the user guesses the code (all hints go to 0) if (hasGuessedCodeMaker(HINTS)) { break; } console.log(HINTS); rounds -= ONE; } declareResult(rounds); console.log(`CODE_MAKER: ${CODE_MAKER}`); } /** * Infinitely keeps playing the game. * * Runs the App function in an infinite loop, with a delay between each run. * Resets the game state after each run. */ (async () => { while (true) { // Run the App function await App(); // Wait for a specified time before the next run await sleep(WAITING_TIME); // Clear the screen clearScreen(); // Reset the game state for replay CODE_MAKER = [0, 0, 0, 0]; HINTS = [0, 0, 0, 0]; } })(); Sources wiki-play-mastermind wikipedia-mastermind Master mind in python Node.js Backend Essentials: A Crash Course for New Developers (14 Part Series) 1 Backend Development Plan 2 Introduction to Back-end ... 10 more parts... 3 What is an API 4 What is REST API 5 What is JSON 6 Request and Response 7 What is Nodejs 8 JavaScript Essentials: Part 1 9 JavaScript Essentials: Part 2 10 JavaScript Essentials: Part 3 11 JavaScript Essentials: Part 4 12 JavaScript Essentials: Part 5 13 *) 14 JavaScript Essentials: Part 7 Red Hat Developer Promoted * Your step-by-step guide to building from scratch Experience hands-on learning resources without setup or configuration, and learn to develop quicker than ever before. Get started Top comments (1) * * Be allergic to a boring life, however be bored and enjoy it Location Accra, Ghana Education University of Ghana, Legon Work Backend Engineer at Axionteq LLC Joined Jul 28, 2020 • Oct * I wateched this video, Why boolean arguments should be avoided - Robert C. Martin (Uncle Bob) , and I was like, yeah.. 1 like Like Reply * Sentry *r* Java* Shafayet Hossain - Nov 6 Unlock the Power of the Cloud: Deploy Your Django App on AWS EC2 Deniel Dave Natividad - Nov 4 Exploring Java's Role in Cloud Computing and AI for 2024 Teo Nordic - Oct 31 Optimizing Google Search via API: A Guide to Using Serper explinks - Nov 4 Michael Otu Follow Be allergic to a boring life, however be bored and enjoy it Location Accra, Ghana Education University of Ghana, Legon Work Backend Engineer at Axionteq LLC Joined Jul 28, 2020 More from Michael Otu JavaScript Essentials: Part 7 #* JavaScript Essentials: Part 5 #node #javascript #api #beginners JavaScript Essentials: Part 4 #* Neon Promoted * Top 3 Features in Postgres 17 Learn about the top 3 features in the latest version of Postgres. See Article 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/otumianempire/javascript-essentials-part-6-mastermind-in-javascript-53l"
  },
  {
    "body": "* Podcasts Suggest a Podcast Latest episodes S27:E8 - Learning AI (Matt Eland) CodeNewbie, May 22 ICD Weekend #25 – Facebook podsłuchuje Snapchata • nowe sposoby na oszukiwanie AI Internet! Czas działać (polish), May 17 S27:E7 - Tech and Art (Chris Immel) CodeNewbie, May 15 ICD Weekend #24 - Pay Or OK? Wytyczne EROD Internet! Czas działać (polish), May 10 S27:E6 - The Crossover of Health, Technology and Art (Daniel Bourke) CodeNewbie, May 8 ICD Weekend #23 – Prawie znaleziono algorytm łamiący kryptograficzne problemy kratowe Internet! Czas działać (polish), May 3 Featured shows CodeNewbie DevDiscuss DevNews Browse A Cup of Code Podcast A DataFramed Podcast Adventures in Angular Adventures in DevOps Adventures in Machine Learning Adventures in .NET Agile in Action with Bill Raymond AjTiTi [PL] Aleware All the Code Angular Experience Anonymous.fm API Intersection APIs over IPAs APIs You Won't Hate AppForce1: News and info for iOS app developers Architect Tomorrow Around IT In 256 Seconds Arrested DevOps Awamy Podcast AWS Bites Azure Late Show Podcast Bangla Tech Talk Barcoding Base.cs Podcast Because the internet Betatalks the podcast Better ROI from Software Development BookBytes Bootstrapping Saas Breaking Changes bug huntr Building an Indie Business Building Programmers Build Your SaaS Byte-sized Byte with Danyson CallFé Dev CapiCast Career Chats Casual Coders Podcast Caveat Founder Chile Mole y Tech ClojureScript Podcast Cloud Native: The Good, The Bad and The Ugly cloudonaut Code and the Coding Coders who Code it Code Crafters MX Code Developer Cast (Codevcast) Code[ish] CodeNewbie Code Patrol CodePen Radio codepunk Codesplitters Podcast Code Story CodingBlocks CodingCat.dev Coffee & Code Cast Coffee with Butterscotch: A Gamedev Comedy Podcast Command+Shift+Left Community Pulse Compulang: Technology, Programming & Privacy Contributors: An Open Source Software Podcast Corecursive Corecursive CPU ⬜ Carré Petit Utile Crowdcast CyberPodYoruba by Rollademy DanielFrey.me Talks DarkNet Diaries Data Engineering Podcast Data Engineers Canada DataOps Podcast Data Science at Home Data Science Storytime DE{CODE} Decoded Deeper Than Tech Demuxed DevDiscuss Dev Ed Podcast Developer Love Developer Nation Broadcast Developer on Fire Developer Tea Developer Tharun Developing Leadership Dev Interrupted devMode.fm DevNews DevOps Shorts DevOps Speakeasy DevOps With Zack DevPro Dev Questions with Tim Corey Devscamp Podcast Devscast Community Podcast DevSec For Startups Devs Like Us Dev Tech News DevThink Distinguished Devs Dive Bar DevOps Django Riffs Don't Make Me Code dotNET{podcast} Double Slash [FR] DreamClients Podcast Drunk and Retired Duck Tapes Eat Sleep Cloud Repeat Edaqa & Stephane Podcast egghead.io developer chats Elixir Mix EmpowerApps.Show Enjoy the Vue EnterpriseReady Erreur 200 Ethical Data, Explained Everyone Sucks Evil Master Plan Exploiting with Teja Kummarikuntla Fatal Exception: Hard Lessons in Soft Skills for Software Developers FedBites Fireside with Voxgig Flying High With Flutter Foojay.io, the Friends Of OpenJDK! Fork Pull Merge Push FounderQuest Fragmented Freelancers' Show Friends That Code Front End Happy Hour Frontend House Front-End Web Daily FSJam Podcast Full Stack Radio Functional Geekery GameDev Breakdown Getting Apps Done Gitbar glich Global AI Podcast goobar podcast Google Cloud Platform Podcast Go Time GraphStuff.FM Greater Than Code Green I/O Grow This, Grow That Hanselminutes Happy Dev Hard Dev Café [spanish] [español] hexdevs podcast High Leverage Hope in Source HTML All The Things Podcast Humans of Open Source Hyperthread Imperio Cloud #include Inside the Techosystem Inspect Internet! Czas działać (polish) In The Browser ioiocast iPhreaks Iteration Podcast I Want to Hack Jamstack Radio JavaScript Jabber J&J Talk AI JS Party Julien's Tech Bites Kentico Rocks Kubernetes Bytes Ladybug Podcast Lambda3 Podcast Landing in Tech Latam Tech Heroes Launchies Learning Curve Legacy Code Rocks! LetsTalkDeveloper Level 99 Level-up Engineering Loonie Engineering Lost in the Source Maintainable Maintainers Anonymous Making Blocks Making Sense of IT Podcast Marianne Writes a Programming Language Mediocre Minds Mentoring Developers Merge Conflict Mindful Talks Minified: Web Dev News Mission Control Center Mlkda da Deepweb MLOps Community Model View Conversation Modern Web Moonlight Game Devs Musa Wakili ML Music for Programming My typeof Radio Namespace Podcast .NET Bytes .NET Rocks! No Plans to Merge No Somos Cavernicolas o11ycast Observy McObservface OK Productive On-Call Nightmares Open Source Developer Podcast Outside The Box Model OxyCast Page It to the Limit Peachtree Devs PHPUgly PnP Weekly Podcast Betta Podcast.__init__ Podcast Ubuntu Portugal PodRocket - A web development podcast from LogRocket Polémica en /var Polyglot Practical Operations Practical Product PressNomics Podcast Product Club Productivity & Engineering Podcast Programmers Quickie Public Function Pulling the Strings Quality Sense ReActivity | Android Developer Podcast React Native Nerds React Native Radio React Podcast React Round Up Ready, Set, Cloud Podcast Real-World Serverless Relative Paths Remote Ruby Rent, Buy, Build - Cloud Native Platforms Request For Commits Rewire with Susan REWRITE TECH Road To Growth Ruby Rogues Rz Omar🎙️PODCAST Salesforce Developers Podcast Salted Bytes Sarah Lean's Weekly Update Podcast Scaling DevTools Search Off The Record Secondary Storage Se Habla Código SELECT* Self-Taught Or Not Semaphore Uncut Serverless Chats SFTP Podcast ShipTalk - SRE, DevOps, Platform Engineering, Software Delivery Shop Talk Show single-threaded Small Batches Snippet Soft Skills Engineering Software as we know IT Software at Scale Software Developer's Journey Software Engineering Daily Software Engineering Unlocked Software Engineers Software Misadventures Software World with Candost SpeakingSoftware Startup Engineering Startup for Startup - Global ⚡ by monday.com Streaming Audio: A Confluent podcast about Apache Kafka® Sustain Sustain Open Source Design Podcast Svelte Radio Swimm Upstream Syntax - Tasty Web Development Treats Tabs and Spaces TalkingRoots Talkin' Observability Talk Julia Teaching Python Tech and Coffee Tech Careers Tech Except!ons Tech Heads Tech Jr Techlab Bol.com Tech Leaders Hub Technically True Tech: Off-topic Tech Perspective Test Talk Radio That's My JAMstack The 6 Figure Developer Podcast The Angular Show The Babel Podcast The Big Branch Theory The Bike Shed The Bug Hunters Café The Business of Freelancing The Changelog The Cloud Native Show The Compile Podcast The Composable Connection The Craft of Open Source The Data Engineering Show The Data Stack Show The Diff The freeCodeCamp Podcast The Front End The Frontier Podcast The GeekNarrator The Imposters Club The Indie Hackers Podcast The Loosely Coupled Show The Maker Mindset Podcast The Malayali Podcast The MongoDB Podcast The MousePaw'dCast The .NET Core Podcast The Nonintuitive Bits The Noob Show The Overlap The Patrick God Show The Pitch Room The Production-First Mindset The Python Podcast.__init__ The Rabbit Hole The Reconfigured Podcast The Scrimba Podcast The Secure Developer The Sequel Show The Stack Overflow Podcast The Startup Architects The State of the Web The Virtual World The Weekly Squeak The Women in Tech Show The Yes-code Podcast Things Involving Software Think FaaS Tiaras and Tech To Be Continuous Toolsday TPA Podcast: Carreira Internacional & Tech Traceroute Trelliswork tryexceptpass Twitter Spaces with Daniel Glejzner & Paweł Kubiak (Angular Bros) Under the Hood of Developer Marketing Untold Developer Stories Vainilla Podcast Value in Open Vaultree Cast Venture Confidential Views on Vue Virtual Coffee Podcast Voacast - Negócios Digitais e Liderança Empreendedora Vulnerable By Design Wannabe Entrepreneur WaylonWalker We Belong Here: Lessons from Unconventional Paths to Tech WebJoy Web Reactiva Web Rush weekend.dev Weekly Dev Tips WeTal Talks Whiskey Web and Whatnot Whiskey Wednesday #WithAnand Word Wrap Working Code Work In Programming WPwatercooler Write the Docs Podcast XRAtlas XRSeaPod, the XR Seattle Podcast Yoncast - O podcast da Yoncode Zero to Wo*nsor Neon * ",
    "url": "https://dev.to/pod"
  },
  {
    "body": "* Privacy Policy Last Updated: September 01, 2023 This Privacy Policy is designed to help you understand how DEV Community Inc. (\"DEV,\" \"we,\" or \"us\") collects, use, and discloses your personal information. What's With the Defined Terms? You'll notice that some words appear in quotes in this Privacy Policy. They're called \"defined terms,\" and we use them so that we don't have to repeat the same language again and again. They mean the same thing in every instance, to help us make sure that this Privacy Policy is consistent. We've included the defined terms throughout because we want it to be easy for you to read them in context. 1. WHAT DOES THIS PRIVACY POLICY APPLY TO? 2. PERSONAL INFORMATION WE COLLECT 3. HOW WE USE YOUR INFORMATION 4. HOW WE DISCLOSE YOUR INFORMATION 5. YOUR PRIVACY CHOICES AND RIGHTS 6. INTERNATIONAL DATA TRANSFERS 7. RETENTION OF PERSONAL INFORMATION 8. SUPPLEMENTAL DISCLOSURES FOR CALIFORNIA RESIDENTS 9. SUPPLEMENTAL NOTICE FOR NEVADA RESIDENTS 10. CHILDREN'S INFORMATION 11. OTHER PROVISIONS 12. CONTACT US 1. WHAT DOES THIS PRIVACY POLICY APPLY TO? This Privacy Policy applies to personal information processed by us, including on our websites, mobile applications, and other online or offline offerings — basically anything we do. To make this Privacy Policy easier to read, our websites, mobile applications, and other offerings are all collectively called the \"Services.\" Beyond this Privacy Policy, your use of the Services is subject to our DEV Community Terms and our Forem Terms. The Services include both our own community forum at https://www.dev.to (the \"DEV Community\") and the open source tool we provide called \"Forem,\" available at https://www.forem.com which allows our customers to create and operate their own online forums. We collect personal information from two categories of people: (1) our customers, who use Forem and our hosting services to run and host their own forums (we'll call them \"Forem Operators\"), and (2) the people who interact with DEV-hosted forums, including forums provided by Forem Operators utilizing Forem and separately our own DEV Community (we'll call them \"Users\"). An Important Note for Users Since we provide hosting services for Forem Operators, technically we also process your information on their behalf. That processing is governed by the contracts that we have in place with each Forem Operator, not this Privacy Policy. In other words, when you share your data on a DEV-hosted forum operated by a Forem Operator, we at DEV are basically just the \"pipes\" — we process the data on behalf of the Forem Operator, but don't do anything with it ourselves beyond what we're required to do under our contract (and by law). So, if you post your information on a DEV-powered forum provided by a Forem Operator, that Forem Operator's privacy policy applies, and any questions or requests relating to your data on that service should be directed to that Forem Operator, not us. Likewise, if you use our mobile application, you may also interact with forums that use DEV's open-source tools but do all their hosting and data collection themselves. For those forums, we at DEV have no access to your data, so be sure to read the privacy policy of any third-party hosted forum before posting. 2. PERSONAL INFORMATION WE COLLECT The categories of personal information we collect depend on whether you're a User or Forem Operator, how you interact with us, our Services, and the requirements of applicable law. Breaking it down, we collect three types of information: (1) information that you provide to us directly, (2) information we obtain automatically when you use our Services, and (3) information we get about you from other sources (such as third-party services and organizations). More details are below. A. Information You Provide to Us Directly We may collect the following personal information that you provide to us. Account Creation (for Forem Operators): We'll require your name and email address to get started, as well as some details about the Forem you want to run, such as: whether you're running the Forem on your own behalf or as part of an organization, and details about the community you want to support (how big is it, what topics does it cover, where do members currently communicate, how/if the community earns money, whether the community is open, invite-only or paid, any existing social media accounts, etc.) You'll need to tell us a bit about your personal coding background, and you'll have the option to provide your DEV username as well, if you are a member of the DEV.to community. Account Creation (for Users): We collect name and email address from users that create an account on DEV Community. For other forums created by Forem Operators using Forem, the Forem Operator determines what information is required for User account creation for their respective forums. Interactive Features (for Users). Like any other social network, both we and other Users of our Services ma* that you submit or make available through our interactive features (e.g., messaging and chat features, commenting functionalities, forums, blogs, posts, and other social media pages). While we do have private messages that are only between you and the person you're messaging (as well as us and the Forem Operator, as applicable), any information you provide using the public sharing features of the Services, such as the information you post to your public profile or the topics you follow is public, including to recruiters and prospective employers, and is not subject to any of the privacy protections we mention in this Privacy Policy except where legally required. Please exercise caution before revealing any information that may identify you in the real world to others. Purchases. If you buy stuff on our shop site https://shop.dev.to/ (as either a User or Forem Operator), or otherwise if you pay us in connection with your use of the Forem service, we ma* and details associated with your purchases, including payment information. Any payments made via our Services are processed by third-party payment processors, such as Stripe, Shopify, and PayPal. We do not directly collect or store any payment card information entered through our Services, but may receive information associated with your payment card information (e.g., your billing details). Your Communications with Us (Users and Forem Operators). We ma*, such as email address, phone number, or mailing address when you request information about our Services, register for our newsletter or loyalty program, request customer or technical support, apply for a job, or otherwise communicate with us. Surveys. We may contact you to participate in surveys. If you decide to participate, you may be asked to provide certain information, which may include personal information (for example, your home address). Sweepstakes or Contests. We ma* you provide for any sweepstakes or contests that we offer. In some jurisdictions, we are required to publicly share information of sweepstakes and contest winners. Conferences, Trade Shows, and Other Events. We ma* from individuals when we attend conferences, trade shows, and other events. Business Development and Strategic Partnerships. We ma* from individuals and third parties to assess and pursue potential business opportunities. Job Applications. We may post job openings and opportunities on our Services. If you reply to one of these postings by submitting your application, CV and/or cover letter to us, we will collect and use your information to assess your qualifications. B. Information Collected Automatically We ma* automatically when you use our Services: Automatic Data Collection. We may collect certain information automatically when you use our Services, such as your Internet protocol (IP) address, user settings, MAC address, cookie identifiers, mobile carrier, mobile advertising and other unique identifiers, browser or device information, location information (including approximate location derived from IP address), and Internet service provider. We may also automatically collect information regarding your use of our Services, such as pages that you visit before, during and after using our Services, information about the links you click, the types of content you interact with, the frequency and duration of your activities, and other information about how you use our Services. In addition, we may collect information that other people provide about you when they use our Services, including information about you when they tag you in their posts. Cookies, Pixel Tags/Web Beacons, and Other Technologies. We, as well as third parties that provide content, advertising, or other functionality on our Services, may use cookies, pixel tags, local storage, and other technologies (\"Technologies\") to automatically collect information through your use of our Services. Cookies. Cookies are small text files placed in device browsers that store preferences and facilitate and enhance your experience. Pixel Tags/Web Beacons. A pixel tag (also known as a web beacon) is a piece of code embedded in our Services that collects information about engagement on our Services. The use of a pixel tag allows us to record, for example, that a user has visited a particular web page or clicked on a particular advertisement. We may also include web beacons in e-mails to understand whether messages have been opened, acted on, or forwarded. Our uses of these Technologies fall into the following general categories: Operationally Necessary. This includes Technologies that allow you access to our Services, applications, and tools that are required to identify irregular website behavior, prevent fraudulent activity and improve security or that allow you to make use of our functionality. Performance-Related. We may use Technologies to assess the performance of our Services, including as part of our analytic practices to help us understand how individuals use our Services (see Analytics below). Functionality-Related. We may use Technologies that allow us to offer you enhanced functionality when accessing or using our Services. This may include identifying you when you sign into our Services or keeping track of your specified preferences, interests, or past items viewed. Analytics. We may use Technologies and other third-party tools to process analytics information on our Services. Some of our analytics partners include Google Analytics. For more information,please visit Google Analytics' Privacy Policy. To learn more about how to opt-out of Google Analytics' use of your information, please click here. Social Media Platforms. Our Services may contain social media buttons such as Twitter, Facebook, GitHub, Instagram, and Twitch (that might include widgets such as the \"share this\" button or other interactive mini programs). These features may collect your IP address, which page you are visiting on our Services, and may set a cookie to enable the feature to function properly. Your interactions with these platforms are governed by the privacy policy of the company providing it. See the \"Your Privacy Choices and Rights\" section below to understand your choices regarding these Technologies. C. Information Collected from Other Sources We may obtain information about you from other sources, including through third-party services and organizations. For example, if you access our Services through a third-party application, such as an app store, a third-party login service (e.g., through Twitter, Apple, or GitHub), or a social networking site, we may collect whatever information about you from that third-party application that you have made available via your privacy settings. 3. HOW WE USE YOUR INFORMATION We use your information for a variety of business purposes, including to provide our Services, for administrative purposes, and to market our products and Services, as described below. A. Provide Our Services We use your information to fulfill our contract with you and provide you with our Services, such as: Managing your information and accounts; Providing access to certain areas, functionalities, and features of our Services; Answering requests for customer or technical support; Communicating with you about your account, activities on our Services, and policy changes; Processing your financial information and other payment methods for products or Services purchased; Processing applications if you apply for a job we post on our Services; and Allowing you to register for events. B. Administrative Purposes We use your information for various administrative purposes, such as: Pursuing our legitimate interests such as direct marketing, research and development (including marketing research), network and information security, and fraud prevention; Detecting security incidents, protecting against malicious, deceptive, fraudulent or illegal activity, and prosecuting those responsible for that activity; Measuring interest and engagement in our Services, including for usage-based billing purposes; Short-term, transient use, such as contextual customization of ads; Improving, optimizing, upgrading, or enhancing our Services; Developing new products and Services; Ensuring internal quality control and safety; Authenticating and verifying individual identities, including requests to exercise your rights under this policy; Debugging to identify and repair errors with our Services; Auditing relating to interactions, transactions and other compliance activities; Enforcing our agreements and policies; and Complying with our legal obligations. C. Marketing and Advertising our Products and Services We may use your personal information to tailor and provide you with content and advertisements for our Services, such as via email. If you have any questions about our marketing practices, you may contact us at any time as set forth in the \"Contact Us\" section below. D. Other Purposes We also use your information for other purposes as requested by you or as permitted by applicable law. Consent. We may use personal information for other purposes that are clearly disclosed to you at the time you provide personal information or with your consent. Automated Decision Making. We may engage in automated decision making, including profiling, such as to suggest topics or other Users for you to follow. DEV's processing of your personal information will not result in a decision based solely on automated processing that significantly affects you unless such a decision is necessary as part of a contract we have with you, we have your consent, or we are permitted by law to engage in such automated decision making. If you have questions about our automated decision making, you may contact us as set forth in the \"Contact Us\" section below. De-identified and Aggregated Information. We may use personal information and other information about you to create de-identified and/or aggregated information, such as de-identified demographic information, information about the device from which you access our Services, or other analyses we create. For example, we may collect system-wide information to ensure availability of the platform, or measure aggregate data trends to analyze and optimize our Services. Share Content with Friends or Colleagues. Our Services may offer various tools and functionalities. For example, we may allow you to provide information about your friends through our referral services. Our referral services may allow you to forward or share certain content with a friend or colleague, such as an email inviting your friend to use our Services. Please only share with us contact information of people with whom you have a relationship (e.g., relative, friend neighbor, or co-worker). 4. HOW WE DISCLOSE YOUR INFORMATION We disclose your information to third parties for a variety of business purposes, including to provide our Services, to protect us or others, or in the event of a major business transaction such as a merger, sale, or asset transfer, as described below. A. Disclosures to Provide our Services The categories of third parties with whom we may share your information are described below. Service Providers. We may share your personal information with our third-party service providers who use that information to help us provide our Services. This includes service providers that provide us with IT support, hosting, payment processing, customer service, and related services. For example, our Shop site is run by Shopify, who handle your shipping details on our behalf. Business Partners. We may share your personal information with business partners to provide you with a product or service you have requested. We may also share your personal information to business partners with whom we jointly offer products or services. Other Users. As described above in the \"Personal Information We Collect\" section of this Privacy Policy, our Service allows Users to share their profiles, and any posts, chats, etc. with other Users and with the general public, including to those who do not use our Services. APIs/SDKs. We may use third-party Application Program Interfaces (\"APIs\") and Software Development Kits (\"SDKs\") as part of the functionality of our Services. For more information about our use of APIs and SDKs, please contact us as set forth in the \"Contact Us\" section below. B. Disclosures to Protect Us or Others We may access, preserve, and disclose any information we store associated with you to external parties if we, in good faith, believe doing so is required or appropriate to: comply with law enforcement or national security requests and legal process, such as a court order or subpoena; protect your, our, or others' rights, property, or safety; enforce our policies or contracts; collect amounts owed to us; or assist with an investigation or prosecution of suspected or actual illegal activity. C. Disclosure in the Event of Merger, Sale, or Other Asset Transfers If we are involved in a merger, acquisition, financing due diligence, reorganization, bankruptcy, receivership, purchase or sale of assets, or transition of service to another provider, your information may be sold or transferred as part of such a transaction, as permitted by law and/or contract. 5. YOUR PRIVACY CHOICES AND RIGHTS Your Privacy Choices. The privacy choices you may have about your personal information are determined by applicable law and are described below. Email Communications. If you receive an unwanted email from us, you can use the unsubscribe link found at the bottom of the email to opt out of receiving future emails. Note that you will continue to receive transaction-related emails regarding products or Services you have requested. We may also send you certain non-promotional communications regarding us and our Services, and you will not be able to opt out of those communications (e.g., communications regarding our Services or updates to our Terms or this Privacy Policy). Mobile Devices. We may send you push notifications through our mobile application. You may opt out from receiving these push notifications by changing the settings on your mobile device. \"Do Not Track.\" Do Not Track (\"DNT\") is a privacy preference that users can set in certain web browsers. Please note that we do not respond to or honor DNT signals or similar mechanisms transmitted by web browsers. Cookies and Interest-Based Advertising. You may stop or restrict the placement of Technologies on your device or remove them by adjusting your preferences as your browser or device permits. However, if you adjust your preferences, our Services may not work properly. Please note that cookie-based opt-outs are not effective on mobile applications. Please note you must separately opt out in each browser and on each device. Your Privacy Rights. In accordance with applicable law, you may have the right to: Access Personal Information about you, including: (i) confirming whether we are processing your personal information; (ii) obtaining access to or a copy of your personal information; Request Correction of your personal information where it is inaccurate, incomplete or outdated. In some cases, we may provide self-service tools that enable you to update your personal information; Request Deletion, Anonymization or Blocking of your personal information when processing is based on your consent or when processing is unnecessary, excessive or noncompliant; Request Restriction of or Object to our processing of your personal information when processing is noncompliant; Withdraw Your Consent to our processing of your personal information. If you refrain from providing personal information or withdraw your consent to processing, some features of our Service may not be available; Request Data Portability and Receive an Electronic Copy of Personal Information that You Have Provided to Us; Be Informed about third parties with which your personal information has been shared; and Request the Review of Decisions Taken Exclusively Based on Automated Processing if such decisions could affect your data subject rights. If you would like to exercise any of these rights, please contact us as set forth in \"Contact Us\" below. We will process such requests in accordance with applicable laws. 6. INTERNATIONAL DATA TRANSFERS All information processed by us may be transferred, processed, and stored anywhere in the world, including, but not limited to, the United States or other countries, which may have data protection laws that are different from the laws where you live. We always strive to safeguard your information consistent with the requirements of applicable laws. 7. RETENTION OF PERSONAL INFORMATION We store the personal information we collect as described in this Privacy Policy for as long as you use our Services or as necessary: to fulfill the purpose or purposes for which it was collected, to provide our Services, to resolve disputes, to establish legal defenses, to conduct audits, to pursue legitimate business purposes, to enforce our agreements, and to comply with applicable laws. 8. SUPPLEMENTAL DISCLOSURES FOR CALIFORNIA RESIDENTS Refer-a-Friend and Similar Incentive Programs. As described above in the How We Use Your Personal Information section (\"Share Content with Friends or Colleagues\" subsection), we may offer referral programs or other incentivized data collection programs. For example, we may offer incentives to you such as discounts or promotional items or credit in connection with these programs, wherein you provide your personal information in exchange for a reward, or provide personal information regarding your friends or colleagues (such as their email address) and receive rewards when they sign up to use our Services. (The referred party may also receive rewards for signing up via your referral.) These programs are entirely voluntary and allow us to grow our business and provide additional benefits to you. The value of your data to us depends on how you ultimately use our Services, whereas the value of the referred party's data to us depends on whether the referred party ultimately becomes a User or Forem Operator and uses our Services. Said value will be reflected in the incentive offered in connection with each program. Accessibility. This Privacy Policy uses industry-standard technologies and was developed in line with the World Wide Web Consortium's Web Content Accessibility Guidelines, version 2.1*.* If you wish to print this policy, please do so from your web browser or by saving the page as a PDF. California Shine the Light. The California \"Shine the Light\" law permits users who are California residents to request and obtain from us once a year, free of charge, a list of the third parties to whom we have disclosed their personal information (if any) for their direct marketing purposes in the prior calendar year, as well as the type of personal information disclosed to those parties. Right for Minors to Remove Posted Content. Where required by law, California residents under the age of 18 may request to have their posted content or information removed from the publicly-viewable portions of the Services by contacting us directly as set forth in the \"Contact Us\" section below or by logging into their account and removing the content or information using our self-service tools. 9. SUPPLEMENTAL NOTICE FOR NEVADA RESIDENTS If you are a resident of Nevada, you have the right to opt-out of the sale of certain Personal Information to third parties who intend to license or sell that Personal Information. You can exercise this right by contacting us as set forth in the \"Contact Us\\\" section below with the subject line \"Nevada Do Not Sell Request\" and providing us with your name and the email address associated with your account. Please note that we do not currently sell your Personal Information as sales are defined in Nevada Revised Statutes Chapter 603A. If you have any questions, please contact us as set forth below. 10. CHILDREN'S INFORMATION The Services are not directed to children under 13 (or other age as required by local law), and we do not knowingl* from children. If you are a parent or guardian and believe your child has uploaded personal information to our site without your consent, you may contact us as described in the \"Contact Us\" section below. If we become aware that a child has provided us with personal information in violation of applicable law, we will delete any personal information we have collected, unless we have a legal obligation to keep it, and terminate the child's account if applicable. 11. OTHER PROVISIONS Third-Party Websites or Applications. The Services may contain links to other websites or applications, and other websites or applications may reference or link to our Services. These third-party services are not controlled by us. We encourage our users to read the privacy policies of each website and application with which they interact. We do not endorse, screen or approve, and are not responsible for, the privacy practices or content of such other websites or applications. Providing personal information to third-party websites or applications is at your own risk. Changes to Our Privacy Policy. We may revise this Privacy Policy from time to time in our sole discretion. If there are any material changes to this Privacy Policy, we will notify you as required by applicable law. You understand and agree that you will be deemed to have accepted the updated Privacy Policy if you continue to use our Services after the new Privacy Policy takes effect. 12. CONTACT US If you have any questions about our privacy practices or this Privacy Policy, or to exercise your rights as detailed in this Privacy Policy, please contact us at: support@dev.to. * * ",
    "url": "https://dev.to/privacy"
  },
  {
    "body": "* Follow Report Abuse Muhammad Shakir 404 bio not found Bahawalpur, Punjab, Pakistan Joined on Mar 21, 2023 prodevxpert@gmail.com Education BS Computer Science Pronouns He/Him Work Software Engineer at Ultimate Outsourcing LTD BWP More info about @prodevxpert Badges One * one year. Got it * * * Skills/Languages Javascript, Nodejs, Expressjs, Reactjs C++, C#, ASP.Net Currently learning ASP.Net Core Web APIs Currently hacking on Working on a Private company CRM Available for Available to collaborate with companies and developer team for larger community growth. 6 posts published 3 comments written 41 tags followed Event Loop - Javascript * Muhammad Shakir Follow Sep 2 '23 Event Loop - Javascript #eventloop #javascript #webdev Add C*ith Muhammad Shakir? * Muhammad Shakir. * Callbacks, Async/Await, Promises - JavaScript * Muhammad Shakir Follow Aug 23 '23 Callbacks, Async/Await, Promises - JavaScript #javascript #asynchronousjavascript #example #callbackpromisesasyncawait Add Comment 3 min read Closures - JavaScript * Muhammad Shakir Follow Aug 16 '23 Closures - JavaScript #javascriptclosures #closures #javascript #example 8 reactions 5 comments 2 min read All About JavaScript Hoisting * Muhammad Shakir Follow Aug 15 '23 All About JavaScript Hoisting #temporaldeadzone #hoisting #tdz #* 3 * Software Development Life Cycle (SDLC) and Agile Methodologies * Muhammad Shakir Follow Aug 9 '23 A Comprehensive Guide to Software Development Life Cycle (SDLC) and Agile Methodologies *ad Exploring the Depths of Software Testing: Unveiling Types and Significance * Muhammad Shakir Follow Aug 8 '23 Exploring the Depths of Software Testing: Unveiling Types and Significance #softwareengineering #softwaretesting #qualityassurance #testingstrategies 2 * * ",
    "url": "https://dev.to/prodevxpert"
  },
  {
    "body": "* Follow Report Abuse parmeshwar rathod Enjoy every seconds of life. Because i know it's not gonna return :) Dharmshala, Himachal pradesh Joined on Jun 27, 2021 rathodparmeshwar4321@gmail.com https://www.parmeshwar.me Education BCA Work backend developer More info about @promiser Badges Three * three years. Got it * 1 * * Python, javascript, Node.js+Express, mongoDb, mysql Currently learning reactJS nextJS web3 Currently hacking on web3 5 posts published 7 * Pinned how mongo import/export works ? * parmeshwar rathod Follow Apr 27 '22 how mongo import/export works ? * sql vs. nosql * parmeshwar rathod Follow Sep 7 '21 sql vs. nosql #sql #database #dbms 2 *d 🚀 20 Programming Languages That Changed Their Original Names 👇 * parmeshwar rathod Follow Oct 21 🚀 20 Programming Languages That Changed Their Original Names 👇 #techtalks #* 2 * Want to connect with parmeshwar rathod? * parmeshwar rathod. * 😎 Scale your Django App with Celery * parmeshwar rathod Follow Dec 14 '23 😎 Scale your Django App with Celery #django #celery #beginners #python Add Comment 3 min read mongoDb change position of Array element * parmeshwar rathod Follow Feb 2 '22 mongoDb change position of Array element #mongodb #beginners #programming #webdev 3 reactions 1 comment 1 *onsor Neon * ",
    "url": "https://dev.to/promiser"
  },
  {
    "body": "* Follow Report Abuse Pull Review with Scott Beeker Learn Smarter AI Agent Workflows... San Francisco, California Joined on Sep 3, 2024 https://www.youtube.com/@PullReviewwithScottBeeker-h4y Work Tech Founder and Juggler #tunester #besomebodyonline #developer #founder #machinelearningexpert More info about @pullreview Badges * Currently learning Something new everyday. 3 * 17 tags followe* Add Comment 3 min read Today in AI: Mixture of In-Context Learners Pu*r P* Nov 6 Today in AI: Mixture of In-Context Learners #machinelearning #ai #incontextlearners #academic * Creating a Remote Git Hub for Your Company(Without Github) Pu*r P* Nov 6 Creating a Remote Git Hub for Your Company(Without Github) #typescript #git #tutorial #mysql 10 reactions 2 comments 3 *onsor Neon * ",
    "url": "https://dev.to/pullreview"
  },
  {
    "body": "* 2 Add reaction 2 Like 0 *s 0 Fire 0 Jump to Comments 2 * P*osted on Nov 8 2 Dev.to post to Docusau*rogramming Hello Dev Community! Today I'll provide you with a programmatic example of how to convert dev.to articles to a Docusaurus blog. This example will use Node.js to fetch articles from the dev.to API and create Markdown files compatible with Docusaurus blog posts. First, let's set up the project and install the necessary dependencies: mkdir devto-to-docusaurus cd devto-to-docusaurus npm init -y npm install axios fs-extra front-matter Now, create a file named convert.js and add the following code: const axios = require('axios'); const fs = require('fs-extra'); const frontMatter = require('front-matter'); const path = require('path'); const DEV_TO_API_KEY = 'YOUR_DEV_TO_API_KEY'; const DEV_TO_USERNAME = 'YOUR_DEV_TO_USERNAME'; const OUTPUT_DIR = './blog'; async function fetchDevToArticles() { const response = await axios.get(`https://dev.to/api/articles/me/published`, { headers: { 'api-key': DEV_TO_API_KEY } }); return response.data; } function convertToDocusaurusFrontMatter(article) { const date = new Date(article.published_at); return { title: article.title, authors: [DEV_TO_USERNAME], tags: article.tag_list, date: date.toISOString().split('T')[0], slug: article.slug, description: article.description, }; } async function convertArticleToMarkdown(article) { const frontMatterContent = convertToDocusaurusFrontMatter(article); const markdown = `--- ${Object.entries(frontMatterContent).map(([key, value]) => `${key}: ${Array.isArray(value) ? `[${value.join(', ')}]` : value}`).join('\\n')} --- ${article.body_markdown}`; const fileName = `${frontMatterContent.date}-${article.slug}.md`; const filePath = path.join(OUTPUT_DIR, fileName); await fs.outputFile(filePath, markdown); console.log(`Created: ${filePath}`); } async function main() { try { const articles = await fetchDevToArticles(); await fs.ensureDir(OUTPUT_DIR); for (const article of articles) { await convertArticleToMarkdown(article); } console.log('Conversion completed successfully!'); } ca*or:', error.message); } } main(); Here's how this script works: It fetches your published articles from dev.to using the API. For each article, it converts the metadata to Docusaurus-compatible front matter. It combines the front matter with the article's Markdown content. It saves each article as a separate Markdown file in the blog directory. To use this script: Replace YOUR_DEV_TO_API_KEY with your actual dev.to API key[1]. Replace YOUR_DEV_TO_USERNAME with your dev.to username. Run the script using node convert.js. After running the script, you'll find your dev.to articles converted to Docusaurus-compatible blog posts in the blog directory[1][3]. To integrate these posts into your Docusaurus site: Copy the generated Markdown files from the blog directory to your Docusaurus project's blog directory. Ensure your docusaurus.config.js file has the blog plugin configured correctly[1][3]. Here's an example of how your docusaurus.config.js might look: module.exports = { // ... other config options presets: [ [ '@docusaurus/preset-classic', { blog: { path: 'blog', routeBasePath: 'blog', blogTitle: 'My Dev.to Blog', blogDescription: 'A collection of my dev.to articles', blogSidebarCount: 'ALL', blogSidebarTitle: 'All Blog Posts', showReadingTime: true, editUrl: 'https://github.com/yourusername/your-repo/edit/main/website/', }, }, ], ], // ... other config options }; This configuration sets up the blog plugin to use the blog directory and display all posts in the sidebar[1][3]. Remember to customize the editUrl and other options according to your project structure and preferences. With this setup, your dev.to articles will be seamlessly integrated into your Docusaurus blog. Citations: [1] https://docusaurus.io/docs/blog [2] https://dev.to/dreamlogic/how-to-use-the-multi-blog-plugin-for-docusaurus-32a2 [3] https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog [4] https://dev.to/tuenguyen2911_67/inspired-by-docusaurus-2cm6 [5] https://dev.to/dianaiminza/documentation-using-docusaurus-40g5 [6] https://dev.to/seanyasno/starting-a-new-blogging-journey-with-docusaurus-3aap [7] https://dev.to/lo_victoria2666/build-beautiful-documentation-websites-with-docusaurus-8o2 [8] https://dev.to/katiel/exploring-the-code-behind-docusaurus-pbk Highlight Promoted * Self-Host Your Observability Stack Take control of your data and privacy. With Highlight.io, you can self-host your entire observability stack, giving you full visibility without sacrificing security or compliance. Monitor, debug, and optimize – on your terms. Start self-hosting with Highlight.io today. Get Started Top comments (0) * * * UI Library for Surveys and Forms * retain full ownership *ion limits. View demo Read next What is JavaScript ? Muhammad Bilal - Nov 4 * Car Rental Website and Mobile App aelassas - Nov 8 Scaling Zensearch's capabilities to query the whole database FDiaz - Nov 8 Claude AI now runs JavaScript, Python beats JavaScript on GitHub, new Node.js versions and more James - Nov 3 P* Learn Smarter AI Agent Workflows... Location San Francisco, California Work Tech Founder and Juggler #tunester #besomebodyonline #developer #founder #machinelearningexpert Joined Sep 3, * Mongoose Interview Questions #mongodb #mongoose #webdev #programming * * Neon **. Try Neon → 👋 ** * ",
    "url": "https://dev.to/pullreview/devto-post-to-docusaurus-blog-automation-nodejs-4l87"
  },
  {
    "body": "* Follow Report Abuse Le Quan Phat I'm a software engineer and i hate Python Ho Chi Minh City, Vietnam Joined on Oct 26, 2024 https://lequanphat.id.vn/ Education Sai Gon University Work Fullstack Developer at SMARTR.CO More info about @quanphat Badges * GitHub Repositories furniture-shop FurnitureShop - Ecommerce is built on Laravel + Tabler Blade • 6 stars whale-chat Real-time Chat Application is built on React + NestJS TypeScript • 4 stars borrow-equipment-service Borrow Equipment Service is built on Spring Boot + Thymeleaf + Tabler HTML • 3 stars chat-app Chat Application is built on React + Django Fork JavaScript • 3 stars strapi-next-app CRUD Application is built on NextJS + Strapi TypeScript • 3 stars nestjs-starter-kit A fundamental approach to start your NestJS application that is based on Hexagonal Architecture. TypeScript • 1 star search-engines-express A fundamental guide to integrate search engines such as Elasticsearch and Algolia within an Express.js application JavaScript • 1 star job-queue-redis A fundamental guide to integrate Queue such as Pull within an Express.js application JavaScript Skills/Languages NestJS, Express, Strapi Currently learning docker, nginx, flutter 2 * 7 tags followed * * Queue in an Express application #queue #express #node #docker Add Comment 3 min read * * Elasticsearch in Express #elasticsearch #express #docker #node * Diamond Sponsor Neon * ",
    "url": "https://dev.to/quanphat"
  },
  {
    "body": "* 0 *ead 0 * 0 * Le Quan Phat Posted on Oct 26 * #elasticsearch #express #docker #node 1. Install Elasticsearch Client for Node.js Start by installing the official Elasticsearch client for Node.js in your Express project. This will allow you to interact with Elasticsearch from within your Node application. npm install @elastic/elasticsearch 2. Set up Elasticsearch on Docker If you haven’t already set up an Elasticsearch instance, you can use Docker to run it locally. Create or update your docker-compose.yaml file with the following configuration: version: '3.7' services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0 container_name: elasticsearch environment: - discovery.type=single-node - xpack.security.enabled=false ports: - \"9200:9200\" Run the following command to start Elasticsearch: docker-compose up -d 3. Initialize Elasticsearch Client in Your Express Application Create an elasticsearchClient.js file in your project/config folder to initialize the Elasticsearch client: const { Client } = require('@elastic/elasticsearch'); const client = new Client({ node: 'http://localhost:9200', // Replace with your Elasticsearch instance URL }); module.exports = client; 4. Create an Elasticsearch Service In your project/services directory, create a new file named elasticsearchService.js. This file will contain the logic for indexing, searching, updating, and deleting documents. const client = require('../config/elasticsearchClient'); // Indexing a document async function indexDocument(index, id, document) { await client.index({ index, id, body: document, }); } // Searching for documents async function searchDocuments(index, query) { const { body } = await client.search({ index, body: query, }); return body.hits.hits; } module.exports = { indexDocument, searchDocuments, }; 5. Create a Route for Elasticsearch Operations Now, create a new route in the project/routes folder (e.g., elasticsearchRoutes.js) to expose endpoints for performing Elasticsearch operations. * router = express.Router(); const elasticsearchService = require('../services/elasticsearchService'); // Route to index a document router.post('/index', async (req, res) => { const { index, id, document } = req.body; try { await elasticsearchService.indexDocument(index, id, document); res.status(200).send('Document indexed successfully'); } catch (error) { res.status(500).send(error.toString()); } }); // Route to search documents router.get('/search', async (req, res) => { const { index, query } = req.query; try { const results = await elasticsearchService.searchDocuments(index, JSON.parse(query)); res.status(200).json(results); } catch (error) { res.status(500).send(error.toString()); } }); module.exports = router; 6. Add the Route to the Express App In your project/app.js file, import and use the elasticsearchRoutes. * elasticsearchRoutes = require('./routes/elasticsearchRoutes'); const app = express(); app.use(express.json()); // Other routes... app.use('/elasticsearch', elasticsearchRoutes); module.exports = app; 7. Start Your Express Server node app.js 8. Test the Integration You can test the endpoints using a tool like Postman or by making HTTP requests from the frontend. Index a document: Send a POST request to http://localhost:3000/elasticsearch/index with a JSON body: { \"index\": \"your_index\", \"id\": \"1\", \"document\": { \"field\": \"value\" } } Search documents: Send a GET request to http://localhost:3000/elasticsearch/search with query parameters: index=your_index&query={\"query\": {\"match_all\": {}}} This setup allows your Express application to interact with Elasticsearch by indexing and searching for documents, while maintaining a modular structure. Let me know if you'd like to go deeper into any specific part of this integration! Highlight Promoted * Find Code Bottlenecks Fast 🏎️ No more hunting through endless lines of code. With Highlight.io, you can spot performance bottlenecks instantly, from frontend to backend. Optimize your app, improve load times, and keep users happy – all with a few clicks. Start diagnosing smarter with Highlight.io. Get Started Top comments (0) * * * JavaScript makes yo* Basic Docker Terminologies Pranav Bakare - Oct 19 🚀 Built-in WebSockets in Node.js 2024: A Comprehensive Guide 🛠️ Hamza Khan - Sep 20 Easy Authentication Using Hanko.io Istaprasad Patra - Oct 19 👾 Tracking CI Metrics for Better Workflow Performance CiCube - Oct 8 Le Quan Phat Follow I'm a software engineer and i hate Python Location Ho Chi Minh City, Vietnam Education Sai Gon University Work Fullstack Developer at SMARTR.CO Joined Oct 26, 2024 More from Le Quan Phat * #queue #express #node #docker Neon Promoted * Top 3 Features in Postgres 17 Learn about the top 3 features in the latest version of Postgres. See Article 👋 *** * ",
    "url": "https://dev.to/quanphat/how-to-integrate-elasticsearch-in-express-4g6j"
  },
  {
    "body": "* Follow Report Abuse Rafael Avelar Campos Software Enginieer Joined on Jul 15, 2024 More info about @rafael_avelarcampos_e71c Badges * Organizations 3X Pay 10 * 1 tag followed * * Follow * Add Comment 4 min read Explorando Notificações Push no React Native com Expo e OneSignal! * * 7 Explorando Notificações Push no React Native com Expo e OneSignal! #reactnative #onesignal #expo Add Comment 3 min read Solving Performance Issues with Redis and Bull * Rafael Avelar Campos Follow for 3X Pay Sep 10 Solving Performance Issues with Redis and Bull 2 *d Resolvendo Problemas de Performance com Redis e Bull * Rafael Avelar Campos Follow for 3X Pay Sep 10 Resolvendo Problemas de Performance com Redis e Bull #redis #bullmq #queue #nestjs 2 * The Challenges of Managing a Successful Fintech: Revenue of R$9,643,141.49 in 30 Days * Rafael Avelar Campos Follow for 3X Pay Sep 9 The Challenges of Managing a Successful Fintech: Revenue of R$9,643,141.49 in 30 Days #fintech #javascript #startup * Os Desafios de Gerenciar uma Fintech de Sucesso: Faturamento de R$9.643.141,49 em 30 Dias * Rafael Avelar Campos Follow for 3X Pay Sep 9 Os Desafios de Gerenciar uma Fintech de Sucesso: Faturamento de R$9.643.141,49 em 30 Dias #fintech #javascript #startup #programming * Certificados RSA e a Segurança na 3XPay * Rafael Avelar Campos Follow for 3X Pay Sep 5 Certificados RSA e a Segurança na 3XPay #security #fintech #rsa Add Comment 4 min read Por que escolhi AWS ECS para uma fintech e não o Serveless * Rafael Avelar Campos Follow for 3X Pay Sep 5 Por que escolhi AWS ECS para uma fintech e não o Serveless #aws #fintec #ecs #serverless Add Comment 4 min read Como Implementar o Sentry em um Projeto NestJS * Rafael Avelar Campos Follow Sep 4 Como Implementar o Sentry em um Projeto NestJS #javascript #nestjs #backend #sentry * Eventos no nestjs * Rafael Avelar Campos Follow Sep 4 Eventos no nestjs #nestjs #javascript #backend #*t 3 *onsor Neon * ",
    "url": "https://dev.to/rafael_avelarcampos_e71c"
  },
  {
    "body": "* 0 *ead 0 * 0 * Rafael Avelar Campos Posted on * Introdução O NestJS é um framework progressivo para construir aplicações back-end em Node.js que facilita a criação de APIs escaláveis e modulares. Um dos conceitos fundamentais para manter uma base de código limpa e sustentável em projetos NestJS é seguir os princípios SOLID. Os princípios SOLID formam uma base sólida para o design orientado a objetos, ajudando a tornar o código mais legível, fácil de manter e escalável. Neste artigo, vamos revisar cada um desses princípios (SRP, OCP, LSP, ISP e DIP) e explorar como aplicá-los com exemplos práticos no NestJS. Princípio da Responsabilidade Única (SRP) O Princípio da Responsabilidade Única (Single Responsibility Principle) afirma que uma classe deve ter apenas uma razão para mudar, ou seja, uma única responsabilidade. No contexto de NestJS, isso significa manter o foco de cada serviço, controlador ou repositório em uma função específica. Exemplo de Aplicação SRP no NestJS Imagine que temos uma aplicação com funcionalidades de usuários e autenticação. Ao invés de ter um único UserService para gerenciar tanto as informações dos usuários quanto a autenticação, podemos dividir essas responsabilidades em serviços separados: // src/user/user.service.ts import { Injectable } from '@nestjs/common'; @Injectable() export class UserService { // Funções relacionadas à manipulação de dados do usuário async createUser(data: CreateUserDto) { /*...*/ } async getUserById(id: string) { /*...*/ } } // src/auth/auth.service.ts import { Injectable } from '@nestjs/common'; @Injectable() export class AuthService { // Funções relacionadas à autenticação async login(credentials: LoginDto) { /*...*/ } async validateUser(token: string) { /*...*/ } } Dividir os serviços dessa forma facilita a manutenção e evita que mudanças em uma funcionalidade afetem outra. Princípio Aberto/Fechado (OCP) O Princípio Aberto/Fechado (Open/Closed Principle) afirma que classes, módulos e funções devem estar abertos para extensão, mas fechados para modificação. Isso significa que devemos ser capazes de adicionar novos comportamentos ao sistema sem modificar o código existente. Exemplo de Aplicação OCP no NestJS Suponha que temos uma funcionalidade de envio de notificações. Se quisermos suportar diferentes canais de notificação (por exemplo, e-mail e SMS), podemos criar uma interface NotificationService e implementar classes específicas para cada tipo de notificação. // src/notification/interfaces/notification.interface.ts export interface NotificationService { sendNotification(message: string): Promise<void>; } // src/notification/services/email-notification.service.ts import { Injectable } from '@nestjs/common'; import { NotificationService } from '../interfaces/notification.interface'; @Injectable() export class EmailNotificationService implements NotificationService { async sendNotification(message: string): Promise<void> { console.log('Enviando notificação por email:', message); } } // src/notification/services/sms-notification.service.ts import { Injectable } from '@nestjs/common'; import { NotificationService } from '../interfaces/notification.interface'; @Injectable() export class SmsNotificationService implements NotificationService { async sendNotification(message: string): Promise<void> { console.log('Enviando notificação por SMS:', message); } } Com essa abordagem, podemos adicionar novos canais de notificação sem modificar o código existente, apenas criando novas implementações da interface NotificationService. Princípio da Substituição de Liskov (LSP) O Princípio da Substituição de Liskov (Liskov Substitution Principle) declara que as subclasses devem ser substituíveis por suas superclasses sem alterar a funcionalidade do programa. No NestJS, ao usar injeção de dependência, precisamos garantir que as implementações injetadas cumpram o contrato da interface. Exemplo de Aplicação LSP no NestJS No exemplo de notificação, garantimos que qualquer implementação de NotificationService (EmailNotificationService, SmsNotificationService, etc.) pode substituir a outra sem mudar o comportamento esperado do código: // src/notification/notification.controller.ts import { Controller, Inject } from '@nestjs/common'; import { NotificationService } from './interfaces/notification.interface'; @Controller('notification') export class NotificationController { constructor( @Inject('NotificationService') private readonly notificationService: NotificationService, ) {} sendMessage(message: string) { this.notificationService.sendNotification(message); } } O controlador NotificationController pode trabalhar com qualquer implementação de NotificationService, mantendo a conformidade com o princípio LSP. Princípio da Segregação de Interface (ISP) O Princípio da Segregação de Interface (Interface Segregation Principle) afirma que uma classe não deve ser obrigada a implementar interfaces que não usa. No NestJS, esse princípio pode ser aplicado ao criar interfaces menores e mais específicas para cada responsabilidade. Exemplo de Aplicação ISP no NestJS Em vez de criar uma interface grande para gerenciar todas as operações de um serviço, separamos as interfaces em responsabilidades menores. Por exemplo, para um serviço de repositório de dados: // src/repository/interfaces/read.interface.ts export interface Read<T> { findAll(): Promise<T[]>; findOne(id: string): Promise<T>; } // src/repository/interfaces/write.interface.ts export interface Write<T> { create(item: T): Promise<T>; update(id: string, item: T): Promise<T>; delete(id: string): Promise<void>; } // src/repository/interfaces/repository.interface.ts import { Read } from './read.interface'; import { Write } from './write.interface'; export interface Repository<T> extends Read<T>, Write<T> {} As classes podem implementar apenas as interfaces que realmente precisam, evitando métodos não utilizados. Princípio da Inversão de Dependência (DIP) O Princípio da Inversão de Dependência (Dependency Inversion Principle) declara que módulos de alto nível não devem depender de módulos de baixo nível, mas ambos devem depender de abstrações. Em NestJS, podemos aplicar DIP usando injeção de dependência e interfaces. Exemplo de Aplicação DIP no NestJS No exemplo abaixo, o controlador depende da interface NotificationService ao invés de uma implementação específica: // src/notification/notification.module.ts import { Module } from '@nestjs/common'; import { NotificationController } from './notification.controller'; import { EmailNotificationService } from './services/email-notification.service'; @Module({ controllers: [NotificationController], providers: [ { provide: 'NotificationService', useClass: EmailNotificationService }, ], }) export class NotificationModule {} Dessa forma, podemos alterar a implementação de NotificationService sem modificar NotificationController, respeitando o princípio de inversão de dependência. Conclusão Aplicar os princípios SOLID no NestJS ajuda a criar uma arquitetura mais robusta, modular e fácil de manter. Seguir esses princípios exige disciplina e planejamento, mas, a longo prazo, traz benefícios significativos para a qualidade e a escalabilidade do código. Ao desenvolver um projeto NestJS, mantenha os princípios SOLID em mente para estruturar um código limpo e sustentável. Red Hat Developer Promoted * Access the Developer Sandbox Move your legacy Java application into a container and deploy it to Kubernetes on the Developer Sandbox. Get started *enc* Read next \"TypeScript vs JavaScript: Which One Should You Choose?\" Abdulkadir Saloum - Oct 24 * Jakub Andrzejewski - Oct 7 Functional Programming (FP) Principles with examples Flavio Rosselli - Oct 3 Streamlining API Calls in Angular v18 with TanStack Angular Query Muhammad Awais - Oct 23 Rafael Avelar Campos Follow Software Enginieer Joined Jul 15, 2024 More from Rafael Avelar Campos Resolvendo Problemas de Performance com Redis e Bull #redis #bullmq #queue #nestjs Como Implementar o Sentry em um Projeto NestJS #javascript #nestjs #backend #sentry Eventos no nestjs #nestjs #javascript #backend #typescript Heroku *referenc* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/rafael_avelarcampos_e71c/aplicando-solid-no-nestjs-3n5m"
  },
  {
    "body": "* Follow Report Abuse rahuldev-17 tech enthusiast; technical writer for technology companies on freelance basis, currently focused on generative AI for industry relevant purposes. Joined on Dec 25, 2021 Education Graduate More info about @rahuldev17 Badges * T*. ** Skills/Languages Object oriented Programming, Python, Linux, Solidity, Javascript 8 * 2 tags followed Miscellaneous Tips * Nov 3 '23 Miscellaneous Tips Add C*ith rahuldev-17? * rahuldev-17. * nix VPS running out of memory? * Jul 23 '23 nix VPS running out of memory? #linux #system Add Comment 1 min read Where is RouteServiceProvider code in Laravel codes? * Jul 22 '23 Where is RouteServiceProvider code in Laravel codes? #php #laravel #* How to go deep in ethers one function at a time: ParseUnits() * Jan 10 '22 How to go deep in ethers one function at a time: ParseUnits() #ethers #bignumber #codereview 6 *d How to sell a token programmatically * Jan 5 '22 How to sell a token programmatically #bsc #etherjs #token #sell 7 *d How to buy a token programmatically * Jan 5 '22 How to buy a token programmatically #bsc #etherjs #token #buy 6 *d How to deploy a solidity contract with etherjs * Dec 29 '21 How to deploy a solidity contract with etherjs #solidity #deploy #ethers #web3 4 *d How to understand long contracts with a visual tool: Sol2Uml * Dec 26 '21 How to understand long contracts with a visual tool: Sol2Uml #solidity #contract #sol2uml #visualaid 2 *n * ",
    "url": "https://dev.to/rahuldev17"
  },
  {
    "body": "* 7 Add reaction 7 Like 0 *s 0 Fire 0 Jump to Comments 2 * Rajesh Kumar Yadav Posted on Oct 2 7 Deno 2.0: The Next Evolution in JavaScript Runtimes – Is It Better Than Node.js? #node #frontend In mid-2023, Deno 2.0 was released, marking a major milestone in the journey of this relatively new runtime for JavaScript, TypeScript, and WebAssembly. Created by Ryan Dahl, the original creator of Node.js, Deno was conceived to address some of the shortcomings Dahl identified in Node.js. Deno has evolved significantly since its inception, and with the release of 2.0, it’s worth exploring the changes and comparing it with its predecessor, Node.js. What’s New in Deno 2.0? Deno 2.0 introduces a host of new features and improvements, enhancing performance, security, and developer experience. Let’s dive into some of the key features of Deno 2.0: 1. Enhanced Node.js Compatibility One of the biggest hurdles for Deno adoption has been the ecosystem gap with Node.js. Deno 2.0 significantly improves compatibility with Node.js APIs, making it easier to migrate projects and reuse existing Node packages. This version is a step forward in bringing the two runtimes closer together, minimizing friction for developers who want to switch to Deno. 2. Web Compatibility Deno is designed with web standards in mind, unlike Node.js, which evolved independently from the browser environment. Deno 2.0 continues to embrace standards like the Fetch API, URL, and URLSearchParams, giving developers a more consistent experience across the browser and server environments. 3. Performance Improvements Performance is always a key area for any runtime, and Deno 2.0 delivers on this front. The update brings improved startup times, lower memory usage, and more efficient HTTP handling. These improvements are primarily thanks to the updated V8 JavaScript engine, making Deno a faster and more efficient runtime. 4. Simplified Package Management One of Deno’s core design principles is simplicity in package management. Unlike Node.js, which relies on npm and the node_modules directory, Deno uses URL-based imports. There is no need for package.json or node_modules, reducing complexity and file system bloat. 5. TypeScript Support Out of the Box Deno continues to support TypeScript natively, allowing developers to run TypeScript code without additional configuration. Deno 2.0 improves TypeScript compiler performance, offering faster builds and better caching. 6. Advanced Security Model Deno is built with security as a core principle, offering a permissions system that restricts access to the file system, network, and environment variables. Deno 2.0 refines this system, allowing for even more granular control over what your code can and cannot do, which is a notable improvement over Node.js, where such permissions are not built-in. 7. Built-in Tooling Deno includes several built-in tools such as a linter, formatter, test runner, and bundler. This integrated tooling reduces the need for third-party dependencies and ensures a cohesive development experience. It simplifies the developer workflow significantly compared to Node.js, where multiple tools are often required. 8. Deno Deploy: Seamless Edge Deployments Deno has a strong focus on edge computing, and Deno 2.0 builds on this with Deno Deploy, which allows for effortless deployment of applications to edge locations. This low-latency, global deployment model is perfect for modern web apps that need to be close to users around the world. Is Deno 2.0 Better Than Node.js? Now that we’ve explored the new features of Deno 2.0, it’s natural to ask: is Deno better than Node.js? The answer depends on what you’re looking for in a runtime. Why Deno Might Be Better Security: Deno’s permission system provides robust security out of the box, which Node.js lacks. If security is a priority for your project, Deno offers a more secure environment. TypeScript Support: If you are heavily invested in TypeScript, Deno provides native support without the need for additional tooling or configuration. This seamless integration can streamline your development process. Simplified Tooling: With Deno, you get built-in tools like a linter, formatter, and test runner, reducing the need to install and configure third-party packages, something that can make Node.js projects more cumbersome to manage. Edge Computing: Deno’s focus on edge computing and Deno Deploy make it an attractive choice for developers looking to build globally distributed applications with low latency. Standards Compliance: Deno aligns closely with web standards, offering a more consistent development experience across server and browser environments. Why Node.js Might Still Be the Right Choice Ecosystem: Node.js has been around for over a decade, with a vast and mature ecosystem. The npm registry is home to millions of packages, providing solutions for almost any problem. While Deno is improving compatibility, it will take time to match the breadth of Node.js’s ecosystem. Performance in Real-World Applications: While Deno 2.0 has made great strides in performance, Node.js has been battle-tested in large-scale applications. If you’re already using Node.js in production and it’s performing well, the performance improvements in Deno may not justify a switch. Community and Support: Node.js has an enormous and active community with extensive resources, tutorials, and libraries. Deno’s community is growing but still smaller in comparison. For developers who rely heavily on community support, Node.js is still the safer bet. Conclusion Deno 2.0 brings several significant improvements, making it a more competitive and appealing alternative to Node.js. It’s secure, performant, and adheres to modern web standards, offering a fresh take on server-side JavaScript development. However, Node.js’s vast ecosystem and mature tooling still make it the dominant choice for most developers. In the end, the choice between Deno and Node.js comes down to your specific project needs. If you prioritize security, TypeScript support, or edge deployments, Deno 2.0 could be the better option. On the other hand, if you value a vast ecosystem, extensive community support, and proven reliability, Node.js may still be your go-to runtime. 👋 Kindness is contagious * Please leave your appreciation by commenting on this post! It takes one minute and * Community matters. Top comments (0) * * * memory management for JavaScript apps, *sia, and sharing GitHub resources for learning. * Understand Open Graph ( OG ) in Next Js : A Practical Guide Dan Mugisho M. - Oct 31 Fix an issue on my Dockerfile: ARG Scope in Multi-Stage Docker Build Manuel Artero Anguita 🟨 - Oct 31 Efficiently Manage Errors in Next.js with a Comprehensive Developer Solution Riyon Sebastian - Oct 31 Bun: A Faster, Modern Alternative to Node.js for JavaScript Development Ashish prajapati - Oct 20 Rajesh Kumar Yadav Follow I’m a Frontend Engineer by profession and a passionate Technical Blogger. I enjoy sharing knowledge, contributing to open-source projects, and connecting with fellow developers. Location London Education MCA Pronouns He/Him Work Frontend Engineer Joined May 6, 2021 More from Rajesh Kumar Yadav How to Install and Use `next-sitemap` in a Next.js App: A Step-by-Step Guide #nextjs #seo #javascript #frontend 5 modern CSS features for 2024 #css #html #frontend Exploring the New React Framework: A Game Changer for Real-Time Applications #react #frontend 👋 ** * ",
    "url": "https://dev.to/rajeshkumaryadavdotcom/deno-20-the-next-evolution-in-javascript-runtimes-is-it-better-than-nodejs-43kb"
  },
  {
    "body": "* Follow Report Abuse STEVE Software Engineer Lagos, Nigeria Joined on Feb 10, 2022 stephenignatiusbiz@gmail.com https://stephenig.com/ Education University of Abuja Work Software Engineer, Teacher. More info about @realsteveig Badges * Two * two years. Got it 1 We*t * * Typescript, Nodejs, MongoDB. 8 posts published 8 comments written 3 tags followed Pinned HOW TO AUTOMATE CI/CD ON YOUR AZURE KUBERNETES CLUSTER STEVE STEVE STEVE Follow Aug 15 '23 HOW TO AUTOMATE CI/CD ON YOUR AZURE KUBERNETES CLUSTER #kubernetes #docker #devops #azure 3 * DOCKER FOR EVERYONE - (Learn about Caching, Load-Balancing, and Virtual Machines). STEVE STEVE STEVE Follow Jul 24 '23 DOCKER FOR EVERYONE - (Learn about Caching, Load-Balancing, and Virtual Machines). 10 reactions 2 comments 26 min read Integrating a chatbot into your Nodejs API using Dialogflow STEVE STEVE STEVE Follow Jul 10 '23 Integrating a chatbot into your Nodejs API using Dialogflow #webdev #javascript #ai #google 13 * GETTING STARTED WITH CACHING: USING REDIS AND TYPESCRIPT STEVE STEVE STEVE Follow Jul 4 '23 GETTING STARTED WITH CACHING: USING REDIS AND TYPESCRIPT #backend #typescript #redis #webdev 23 reactions 1 comment 10 min read Node.js and TypeScript Tutorial: Build a rest API with Typescript, NodeJS, and a file-based storage system. STEVE STEVE STEVE Follow Jun 19 '23 Node.js and TypeScript Tutorial: Build a rest API with Typescript, NodeJS, and a file-based storage system. #typescript #javascript #backend #webdev 173 reactions 12 comments 16 min read System Design Series - Scalability STEVE STEVE STEVE Follow Jun 29 System Design Series - Scalability #systemdesign #softwareengineering #webdev #node 5 reactions 1 c*h STEVE? * STEVE. * Node.js and GraphQL Tutorial: How to build a GraphQL API with an Apollo server STEVE STEVE STEVE Follow Aug 26 '23 Node.js and GraphQL Tutorial: How to build a GraphQL API with an Apollo server #graphql #api #node #webdev 13 reactions 5 comments 15 min read BUILDING MY BLOGGING API (CHALLENGES FACED, LESSONS LEARNT AND OPTIMIZATION) STEVE STEVE STEVE Follow Jan 5 '23 BUILDING MY BLOGGING API (CHALLENGES FACED, LESSONS LEARNT AND OPTIMIZATION) Add Comment 3 *onsor Neon * ",
    "url": "https://dev.to/realsteveig"
  },
  {
    "body": "* Follow Report Abuse Remi Kristelijn Loving open source, low level tech, lean tech (JavaScript) but better: combining them. Waalre, Netherlands Joined on Jun 19, 2019 http://gius.nl More info about @rkristelijn Badges Five * five years. Got it * *. Got it T*. Got it GitHub Repositories pi-ci-mean My notes installing my full-blown mean server that includes continuous integration such as built, deploy, versioning 1 star dhtmlx-e6 DHTMLX in es6 front-end only with static data JavaScript Skills/Languages JavaScript, Node, Angular, React, Vue, DHTMLX, Webpack, MongoDB, HTML, CSS Currently learning Going ninja on MongoDB Currently hacking on Currently I'm working on building a CMS using JavaScript tech only: DHTMLX, Node and MongoDB, on a rPi3B+ :D 8 posts published 9 comments written 10 tags followe*lijn Remi Kristelijn Follow * Add C*ith Remi Kristelijn? * Remi Kristelijn. * How I can get away with never installing npm packages globally Rem*lijn Follow May 29 How I can get away with never installing npm packages globally #npm #scripts #global #dependencies Add Comment 3 min read WIP: Node development on iPhone or iPad Rem*lijn Follow Apr 19 WIP: Node development on iPhone or iPad Add Comment 3 min read Most elemental code formatting for Typescript/Javascript: .editorconfig vs prettier Rem*lijn Follow Apr 18 Most elemental code formatting for Typescript/Javascript: .editorconfig vs prettier #editorconfig #prettier #format #linting Add Comment 5 min read git command-line tricks Rem*lijn Follow Dec 13 '19 git command-line tricks #git #commandline 93 * Simplest login app using express-session Rem*lijn Follow Jul 5 '19 Simplest login app using express-session #express #session #node #login 20 * my jsend implementation in node Rem*lijn Follow Jul 5 '19 my jsend implementation in node #jsend #express #node #rest 6 reactions * developer's visualization and design Rem*lijn Follow Jun 19 '19 JavaScript developer's visualization and design #uml #visualstudiocode #design 5 * * ",
    "url": "https://dev.to/rkristelijn"
  },
  {
    "body": "* 0 *ead 0 * 0 * Remi Kristelijn Posted on * If you are working a lot of git projects, like maintaining things, having to bump versions, doing npm outdated or npm upgrade, maybe you want to quickly see what node version it runs in, as this needs to change two times a year. Probably you have one folder on your machine containing all your projects, maybe even nested in groups. But do you remember each path and do you like typing and cd'ing into them? I'm sure it gets annoying at some time, at least that's what happened to me. I started using aliasses in .zshrc to quickly cd into them however the amount of projects kept growing. There must be some way to list them, because they all have a .git folder in them. So I created Lcode. Lcode lists your repos in a specific folder (the root folder of your projects). After choosing, it changes directory for that folder and you can configure to run your favorite command, or just start bash or zsh, or even fire up Visual Studio Code. In my example below the 'command' in the config file checks for the existence of a .nvmrc file and it it exists, runs nvm to switch to the proper node version for that project. You can either use the defaults, add command arguments or generate a config file to persist them. https://www.npmjs.com/package/@rkristelijn/lcode Heroku *references R* ** Read next Creating Automated Marketing Tools with Zapier mpoiiii - Oct 15 What is the best programming language? [2024/2025] João Vitor - Nov 7 new way thinking. python + data-star M - Oct 19 Leverage IP Data for Dynamic User Access Management 🌐 Rohan Sharma - Nov 5 Remi Kristelijn Follow Loving open source, low level tech, lean tech (JavaScript) but better: combining them. Location Waalre, Netherlands Joined Jun 19, 2019 More from Remi Kristelijn git command-line tricks #git #commandline Simplest login app using express-session #express #session #node #login my jsend implementation in node #jsend #express #node #rest Heroku *references R* 👋 *** * ",
    "url": "https://dev.to/rkristelijn/easy-switching-git-projects-381p"
  },
  {
    "body": "* Follow Report Abuse SamucaDev Developer | React | Node | PHP | JS Brasil Joined on Dec 1, 2021 https://github.com/samucadev Work Developer More info about @samucadev Badges * Two * two years. Got it *le week. Got it One * one year. Got it Organizations He4rt Developers 1 post published 28 comments written 5 tags followed Para entender o que é Mobile First, basta traduzir? SamucaDev SamucaDev SamucaDev Follow Dec 30 '22 Para entender o que é Mobile First, basta traduzir? #webdev #css #html #mobile 45 * Want to connect with SamucaDev? * SamucaDev. * * * ",
    "url": "https://dev.to/samucadev"
  },
  {
    "body": "* Follow Report Abuse Saurav Jain Developer Community Manager @Apify Joined on Nov 12, 2019 https://twitter.com/Sauain Education BTech (CSE) 2021- GGSIP University, Delhi Work Developer Community Manager at @Apify * Four * four *3 Pledge Earned by pledging commitment and authoring a post about Hackathon experience or Hacktoberfest goals. This achievement sets participants on the path to earning other badges. * 1 We*t 2 comme*wo * two years. G* @sauain Organizations Apify Amplication Crawlee 18 posts published 16 * Optimizing web scraping: Scraping auth data using JSDOM * for Crawlee Oct 9 Optimizing web scraping: Scraping auth data using JSDOM #webdev #javascript #webscraping #jsdom 6 * Want to connect with Saurav Jain? * Saurav Jain. * How to scrape infinite scrolling webpages with Python * for Crawlee Aug 28 How to scrape infinite scrolling webpages with Python #webscraping #webdev #python #tutorial 11 * Announcing Crawlee Python: Now you can use Python to build reliable web crawlers * for Crawlee Jul 9 Announcing Crawlee Python: Now you can use Python to build reliable web crawlers #webdev #python #webscraping #programming 14 * How Crawlee uses tiered proxies to avoid getting blocked * for Crawlee Jun 28 How Crawlee uses tiered proxies to avoid getting blocked #webscraping #webdev #javascript #proxy 11 * How to scrape dynamic websites with Python * for Apify Jun 7 How to scrape dynamic websites with Python #webdev #beginners #python #tutorial 16 * Scrapy Vs. Crawlee * for Crawlee May 15 Scrapy Vs. Crawlee #webscraping #webdev #javascript #python 41 reactions 4 comments 9 min read Launching Crawlee Blog: Your Node.js resource hub for web scraping and automation. * for Crawlee Feb 27 Launching Crawlee Blog: Your Node.js resource hub for web scraping and automation. #webscraping #automation #node #crawling 12 react*ting a Restaurant Finder Application Using ReactJS and Amplication * for Amplication Jan 15 Creating a Restaurant Finder Application Using ReactJS and Amplication #tutorial #javascript #api #webdev 7 * Celebrating Hacktoberfest 2023 with Amplication * for Amplication Oct 4 '23 Celebrating Hacktoberfest 2023 with Amplication #opensource #github #node #hacktoberfest23 14 reactions * Pointers in Programming * Aug 21 '23 Understanding Pointers in Programming #beginners #programming #codenewbie #coding 12 * Opening Doors to Open Source: Easy Steps for First-Time Contributors * for Amplication Jun 21 '23 Opening Doors to Open Source: Easy Steps for First-Time Contributors #news #beginners #opensource #codenewbie 5 * Celebrating 10,000+ Stars on GitHub with an Exciting Giveaway! * Jun 15 '23 Celebrating 10,000+ Stars on GitHub with an Exciting Giveaway! #github #giveaway #opensource #twitter 7 *d What the F*ck is Open Source? * Jun 6 '23 What the F*ck is Open Source? #opensource #programming #career #beginners 4 * Amplication in TechCrunch's Top 50 Open-Source Startups in 2022 * for Amplication Feb 8 '23 Amplication in TechCrunch's Top 50 Open-Source Startups in 2022 #news #community #collaboration #opensource 13 *d 2022: Best Year of My Life! ✨ * Dec 24 '22 2022: Best Year of My Life! ✨ #opensource #career #motivation #devrel 4 *d Five Useful Git and GitHub Tips and Tricks! * for Amplication Dec 23 '22 Five Useful Git and GitHub Tips and Tricks! #git #github #programming #opensource 27 * 7 Things You Should Know About Open-Source * for Amplication Dec 6 '22 7 Things You Should Know About Open-Source #opensource #programming #webdev #* 7 min read Why I joined Amplication. * for Amplication Jan 10 '22 Why I joined Amplication. #opensource #computerscience #webdev #experience 22 reactions 4 comments 5 *onsor Neon * ",
    "url": "https://dev.to/sauain"
  },
  {
    "body": "* 121 Add reaction 97 Like 24 *s 0 Fire 24 Jump to Comments 79 * Saurabh Daware 🌻 Posted on Sep 2, 2019 • Updated on Nov 2, 2019 97 24 package-lock.json vs package.json But what the hell is package-lock.json? #node #javascript #npm So yeah I am going to write about probably the most ignored file from our directories package-lock.json !! package-lock.json is an extremely important file that is there to save you from a lot of boom boom bam bam 🔥 in your repositories. So before we get into package-lock.json let's talk about semantic versioning and package.json. 1. Semantic Versioning Semantic versioning or SemVer is the ideal way of versioning packages. They are usually written like 1.4.5 (major.minor.patch) 1a. Bug fix/patch version Includes bug fixes/documentation spelling mistakes etc. 1b. Minor version Includes additions of functions or API which does not break anything from the older versions So anything that runs on v1.1.0 should work on v1.9.0 as well. 1c. Major version Includes version which breaks stuff. It can include removing APIs or changing names of functions so anything that works on v1.0.0 may not necessarily work on v2.0.0 2. Package.json package.json is a file that contains information about your project (name, version, etc) and it lists the packages that your project is dependent on. So as you can see in the picture above after every dependency listed under package.json there's a number something like ^2.20.0 which is the version of that package but before the version, there is ^. So ^ this little guy can be a total destroyer for your project. ^ sign before the version tells npm that if someone clones the project and runs npm install in the directory then install the latest minor version of the package in his node_modules. So lets say I am having express with ^2.20.0 in package.json and then express team releases version 2.24.0 and now when someone clone my repo and runs npm install in that directory they will get the version 2.24.0 (You can also put ~ instead of ^ it will update to latest patch version) However, this can be a huge issue if package developers break any of the functions on the minor version as it can make your application break down. So npm later released a new file called package-lock.json to avoid such scenarios 3. package-lock.json package-lock.json will simply avoid this general behavior of installing updated minor version so when someone clones your repo and run npm install in their machine. NPM will look into package-lock.json and install exact versions of the package as the owner has installed so it will ignore the ^ and ~ from package.json. Also, it contains some other meta information which saves time of fetching that data from npm while you do npm install. You can refer npm blog for some more information on package-lock.json. Thank You for reading this! I hope this was useful 🎉 :) EDIT: So while reading the comments I thought I should also explain how package-lock.json changes so here's one of the replies that I wrote that I think everyone should go through Saurabh Daware 🌻 • Sep 2 '19 So I created a project named 'project' and did npm install --save vue-extra@1.0.0 and cloned it three times so there's 'projectclone1', 'projectclone2' and 'projectclone3' projectclone1 In projectclone1 I have same * as the original project (which means I did not change anything manually) and I run npm install so it installed the same version as original that is v1.0.0 of vue-extra projectclone2 In projectclone2 also I had the same * but here instead of doing npm install I did npm install --save vue-extra which updated the package changing the * so it installed the latest version that is v1.1.4 of vue-extra projectclone3 In projectclone3 I opened package.json and manually changed vue-extra:\"^1.0.0\" to \"^1.1.4\" and did npm install, Here since I updated package.json npm considered package.json as a matter of truth and installed v1.1.4 of vue-extra and it also updated package-lock.json to v1.1.4 So if your package.json is somehow changed or updated and the version in package.json does not match with the version in package-lock.json then it will install the version from package.json and will update the package-lock.json accordingly. I hope this clears up everything Thanks for reading and asking this question. EDIT2 : Quoting from the comment of Kat Marchán (https://dev.to/zkat/comment/epbj) She is the one who wrote npm ci and added package-lock.json to NPM Kat Marchán • Sep 3 '19 Hi! I wrote npm ci and I'm also the one who added package-lock.json to NPM back in the day. The story about package.json vs package-lock.json is tricky: npm install does not ignore package.json versions, nor does it ignore the package-lock.json. What it does is verify that the * correspond to each other. That is, if the semver versions described in package.json fit with the locked versions in package-lock.json, npm install will use the latter completely, just like npm ci would. Now, ff you change package.json such that the versions in package-lock.json are no longer valid, your npm install will be treated as if you'd done npm install some-pkg@x.y.z, where x.y.z is the new version in the package.json for some-package. This was done intentionally because, after early feedback in npm@5, we realized that one of the ways people edited their dependencies was by editing package.json directly, and it became a bit of a usability nightmare to treat package-lock.json as canonical in those cases. It was a trade-off between two competing worlds, and the current behavior won out. This is why npm ci was born: because the behavior for npm install was actually what people wanted, in practice (when they actually ran into the behavior), and npm ci had a nice ring to it anyway (it was eventually backronymed to clean-install for this reason). Hope this helps! Nice article! 👍🏼 </div> Sentry Promoted * Hydration errors suck But Sentry can help you debug them. Read full post → Top comments (24) * Kat Marchán Kat Marchán Kat Marchán Follow I'm the former tech lead/architect for the NPM CLI, now working for Microsoft on developer tooling. I do a lot of Rust open source stuff and some web dev. Location Stolen Ohlone Lands Pronouns they/she Work Senior Software Engineer at Microsoft Joined Sep 2, 2019 • Sep 3 '* Hi! I wrote npm ci and I'm also the one who added package-lock.json to NPM back in the day. The story about package.json vs package-lock.json is tricky: npm install does not ignore package.json versions, nor does it ignore the package-lock.json. What it does is verify that the * correspond to each other. That is, if the semver versions described in package.json fit with the locked versions in package-lock.json, npm install will use the latter completely, just like npm ci would. Now, ff you change package.json such that the versions in package-lock.json are no longer valid, your npm install will be treated as if you'd done npm install some-pkg@x.y.z, where x.y.z is the new version in the package.json for some-package. This was done intentionally because, after early feedback in npm@5, we realized that one of the ways people edited their dependencies was by editing package.json directly, and it became a bit of a usability nightmare to treat package-lock.json as canonical in those cases. It was a trade-off between two competing worlds, and the current behavior won out. This is why npm ci was born: because the behavior for npm install was actually what people wanted, in practice (when they actually ran into the behavior), and npm ci had a nice ring to it anyway (it was eventually backronymed to clean-install for this reason). Hope this helps! Nice article! 👍🏼 35 **@gmail.com * • Sep 3 '19 Copy * so much for this comment and yes it explained everything about the npm install behavior. also thank you for reading this it's pretty cool to see the article reached the person who added package-lock 😭😭😭🌻🌻 8 likes Like Reply robby robby robby Follow Joined Jan 10, 2020 • Jan 10 '20 • Edited on Jan 10 • * Hello Kat 👋 I found this article and this comment after so much searching, and both have been a great help to my understanding of npm. Thanks everyone! There are still somethings I am not clear on. 1) Does npm install with a package-lock present, with semver satisfied between it (the lockfile; having exact versions) and the package.json (with semver), cause the package-lock file to be updated? (maybe there's a new satisfiable version out there in the registry) -- OR does it just go about installing the modules sinc*k are in sync? If it does update even when satisfied, does npm install some-new-package also cause this update? 2) Is it currently acceptable to manually update package.json? 3) You mentioned multiple npm install behaviors, so which are you referring to here: the behavior for npm install was actually what people wanted, in practice (when they actually ran into the behavior) Thanks again! Any help is greatly appreciated! Cheers 🤙 Robby 2 likes Like Reply DeLaat DeLaat DeLaat Follow Joined Sep 2, 2019 • Sep 2 '19 • Edited on Sep 2 • * I'm not sure this is completely correct any longer with the latest version of NPM? From my understanding, npm install command will still use the main packages file, and updates the lock file. This is why people constantly see the lock file being updated in commits. To use the exact versions as specified in lock file, you can use npm ci. This is intended for builds/deploys so you never get newer versions than what someone developed on. I may be misunderstanding though... 4 **@gmail.com * • * abuse So I created a project named 'project' and did npm install --save vue-extra@1.0.0 and cloned it three times so there's 'projectclone1', 'projectclone2' and 'projectclone3' projectclone1 In projectclone1 I have same * as the original project (which means I did not change anything manually) and I run npm install so it installed the same version as original that is v1.0.0 of vue-extra projectclone2 In projectclone2 also I had the same * but here instead of doing npm install I did npm install --save vue-extra which updated the package changing the * so it installed the latest version that is v1.1.4 of vue-extra projectclone3 In projectclone3 I opened package.json and manually changed vue-extra:\"^1.0.0\" to \"^1.1.4\" and did npm install, Here since I updated package.json npm considered package.json as a matter of truth and installed v1.1.4 of vue-extra and it also updated package-lock.json to v1.1.4 So if your package.json is somehow changed or updated and the version in package.json does not match with the version in package-lock.json then it will install the version from package.json and will update the package-lock.json accordingly. I hope this clears up everything Thanks for reading and asking this question. 3 likes Like Reply DeLaat DeLaat DeLaat Follow Joined Sep 2, 2019 • * abuse Interesting, thanks for taking the time to run those tests! Out of curiosity, what version of NPM are you using? I think some of the confusion is behavior changed at some point. So, depending on what version various team members are on, they see different actions. See this S.O. post for an example of the confusion - stackoverflow.com/questions/450220... 2 likes Like Thread * 🌻 *) * * • * abuse I am using v6.11.2 and yes you are right the behavior had some issues and some changes during v5.x.x but now I guess almost all of them are fixed so v6 has been pretty stable about the behavior of package-lock.json In the same stackoverflow answer I found this link of the issue github.com/npm/npm/issues/17979#is... which I found pretty useful. 1 like Like Reply Andrew Mackrodt Andrew Mackrodt Andrew Mackrodt Follow Joined Dec 16, 2018 • Sep 2 '19 C* is how it works, author is incorrect. 2 **@gmail.com * • * abuse Hi, You should checkout this reply : dev.to/saurabhdaware/comment/eoo4 and this comment from github: github.com/npm/npm/issues/17979#is... So yes if you change package.json, package-lock.json will be updated But if you do not change anything manually then it will ignore the ^ from package.json and will install the version that is mentioned in package-lock.json. Thank you for reading and do correct me if I am wrong. 2 likes Like Thread Andrew Mackrodt Andrew Mackrodt Andrew Mackrodt Follow Joined Dec 16, 2018 • Sep 2 '19 • Edited on Sep 2 • * Hi Saurabh, my post was made on mobile so please excuse it's lack of detail. I've experienced package-lock.json updating itself in both development and CI environments and subsequently builds have failed when sub-dependencies have introduced bugs or breaking changes despite following semantic versioning. npm ci faithfully installs the correct package versions in the CI environment. As to why this happens, I'm not sure. I agree that what you've said should work yet in practice I've seen it to not always be the case. The npm team seem to acknowledge this, here's a quote from their blog: npm ci promises the most benefit to large teams. Giving developers the ability to \"sign off\" on a package lock promotes more efficient collaboration across large teams, and the ability to install exactly what is in a lockfile has the potential to save tens if not hundreds of developer hours a month, freeing teams up to spend more time building and shipping amazing things. blog.npmjs.org/post/171556855892/i... It seems hundreds of developers on SO are also confused about npm's lock behaviour: stackoverflow.com/questions/450220.... 2 likes Like Thread * 🌻 *) * * • Sep 3 '* Yeah even ive ran into problems where 100s of lines were updated in my package-lock.json so i think it is because a lot combinations are possible like i mentioned above plus if you've seen dependabot commits, they update package-lock to bumb versions but along with that they also change the integrity hash so it doesn't end up creating conflicts. also a lot of time we pull from other branches so if any of them updated your dependent package they may end up updating the tree in package-lock so yeah a lot of permutations and combinations to think about :( 1 like Like Reply Taimoor khan Taimoor khan Taimoor khan Follow CS Student | React developer, | Loves to develop Frontend applications with aesthetic UIs. Email khant8k83@gmail.com Location Pakistan Work Frontend Developer at Looking for work Joined Oct 14, 2020 • Oct 14 '20 * Saurabh Thanks for the super easy explanation of Package-lock.json. Right now I am learning React and every time I have to add new dependency in my app I use npm install somePackageName and the get the error npm ERR! Cannot read property 'match' of undefined so every time I delete package-lock.json file and again run the same command and this time with success result. This is what brought me here 2 **@gmail.com * • Oct 14 '* That's a weird error. Maybe you should try having --save-dev or --save flag on npm install. Not sure about what the default npm install behavior is but normall --save or --save-dev will add it to package.json dependency object and it will be installed locally. 1 like Like Reply Taimoor khan Taimoor khan Taimoor khan Follow CS Student | React developer, | Loves to develop Frontend applications with aesthetic UIs. Email khant8k83@gmail.com Location Pakistan Work Frontend Developer at Looking for work Joined Oct 14, 2020 • Oct 14 '* tried that too but that didn't solved the problem...! I had to delete package-lock.json and then execute the command again... Like Reply Peter DeMarco Peter DeMarco Peter DeMarco Follow Joined Oct 28, 2018 • * abuse In order for npm to behave as described in the article (honoring versions from package-lock instead of just the latest that will satisfy package.json) you have to run npm ci instead of npm install FYI. docs.npmjs.com/cli/ci.html 2 **@gmail.com * • * abuse npm ci will install from package-lock.json ONLY. So if you manually change the version from package.json it will throw an error. npm install on the other hand will install from package-lock.json as long as package-lock.json and package.json are in sync. If in any case, package.json has changed then it will install version from package.json and will update the package-lock.json accordingly. Thanks for reading and pointing out npm ci. Do correct me if I am wrong. 5 likes Like Reply Melroy's Blog Melroy's Blog Melroy's Blog Follow Joined Sep 2, 2019 • Sep 2 '19 • Edited on Sep 2 • * Please note that devs forget to add this important file to the version control system (read: git). So please devs, add this file. And update when needed (especially for security issues). Bottom line: do NOT gitignore the package-lock.json file. 3 **@gmail.com * • Sep 3 '* yeah exactly, thanks for pointing out :) 1 like Like Reply Wernich ️ Wernich ️ Wernich ️ Follow software developer with almost no qualifications, but a strong desire for learning. i believe that you can make it without qualifications if you push yourself. don't give up. the difference betw... Location Johannesburg Education school of hard knocks Work Software Developer Joined Apr 29, 2017 • Sep 2 '19 • Edited on Sep 2 • * this is so far the best explanation i've read of what this file does. i'm assuming the reason why this file changes so much in our repo is because people are constantly upgrading npm packages? we've had many merge conflicts around that file, so it eventually got added to gitignore. i didn't hear the whole conversation, but it sounded like one of our test deploys failed miserably because of npm package changes somewhere. could probably have been avoided then. 2 **@gmail.com * • Sep 2 '19 • Edited on Sep 2 • * I think my this comment will explain a lot of extra things dev.to/saurabhdaware/comment/eoo4 So basically there are few cases when package-lock.json changes You npm install --save <package> so it updates the package to absolute latest version changing the version inside * When package.json changes: So when you (or let's say dependabot or your other teammate) changes the version of the package in package.json npm install will look into package.json for the version and will update the package-lock.json with respect to package.json Also gitignoring package-lock is kind of risky unless you have any other workaround it And thank you for reading! I am super happy to see that you found it useful :D 2 likes Like Reply Prafulla Raichurkar Prafulla Raichurkar Prafulla Raichurkar Follow Be kind to yourself and the world around you <3 Location India, Mumbai. Education B.E Engineering Student in Information Technology Work Software Developer Joined Sep 3, 2019 • Sep 3 '* Amazing, I didn't know what this file did, till now.. 2 **@gmail.com * • Sep 3 '19 Copy * so much! Do read the discussion as well, as it pretty much explains other parameters which may update package-lock.json 2 likes Like Reply twiggy twiggy twiggy Follow Joined Oct 8, 2018 • * abuse Semver should be banned 2 **@gmail.com * • Sep 3 '19 C* actually pretty useful just that package developers need to be aware of it *ion (24 comments) * Sentry *r* React Native vs Flutter: Which One Should You Choose? Vincent Odukwe - Oct 10 * 🚀 Jagroop Singh - Nov 4 Refactoring code and Git history! Abdullah Al Mamun Fahim - Oct 9 How to Set Up Your JavaScript Development Environment Ridoy Hasan - Oct 22 *) * More from Saurabh Daware 🌻 The Evolution of FrontEnd Development🌻: What is WebPack, Babel, and Build-steps in Frameworks. #javascript #html #webdev A Guide for Contributing to Any Open Source JavaScript Project Ever 💛 #opensource #javascript I made a Text-to-handwriting tool to write my college assignments for me 🤓 #showdev #html #css #javascript Heroku *references R* 👋 ** * ",
    "url": "https://dev.to/saurabhdaware/but-what-the-hell-is-package-lock-json-b04"
  },
  {
    "body": "* Search results Most Relevant Newest Oldest Posts People Organizations Tags Comments Powered by Algolia Posts People Organizations Tags Comments Powered by Algolia Creating a video player web component Sebastian Ljungman Sebastian Ljungman Sebastian Ljungman Follow Feb 24 '22 Creating a video player web component #webcomponents #javascript #tutorial #webdev 9 * Using a newer version of FFmpeg with Docker. Ethan Ethan Ethan Follow Feb 24 '22 Using a newer version of FFmpeg with Docker. #devjournal #docker 9 * Show Dev: OS Wordle in 60+ languages! Hugo Montenegro Hugo Montenegro Hugo Montenegro Follow Feb 24 '22 Show Dev: OS Wordle in 60+ languages! #opensource #gamedev #vue #tailwindcss 5 reactions 1 comments 1 min read The Contribution of Software-as-a-Service in Digital Transformation CloudStakes Technology CloudStakes Technology CloudStakes Technology Follow Feb 24 '22 The Contribution of Software-as-a-Service in Digital Transformation #* #digital 1 reaction 1 comments 3 min read \"Do you do Lambda Spaghetti?\" Gernot Glawe Gernot Glawe Gernot Glawe Follow Feb 25 '22 \"Do you do Lambda Spaghetti?\" #aws #lambda #testing #programming 20 * Wireframing in UI/UX Abibat Aderogba Abibat Aderogba Abibat Aderogba Follow Feb 24 '22 Wireframing in UI/UX #wireframing #figma #design #ux 3 * Integrating Google re-Captcha In Laravel Salman Abbas (سلیمان) Salman Abbas (سلیمان) Salman Abbas (سلیمان) Follow Feb 24 '22 Integrating Google re-Captcha In Laravel 3 *d Weird JavaScript - Part 1 🧑‍💻 imsabir imsabir imsabir Follow Feb 24 '22 Weird JavaScript - Part 1 🧑‍💻 #javascript #beginners #react #weird 11 reactions 7 comments 1 min read How to Fetch Data From API in ReactJS. Ashish maurya Ashish maurya Ashish maurya Follow Feb 24 '22 How to Fetch Data From API in ReactJS. #react #axios #restapi #developer * Svelte + Webpack + Sass DhiraNegi DhiraNegi DhiraNegi Follow Feb 25 '22 Svelte + Webpack + Sass #svelte #beginners #webpack #saas 4 *d Getting a job in tech part 2: Portfolio CarolinaCobo CarolinaCobo CarolinaCobo Follow Feb 24 '22 Getting a job in tech part 2: Portfolio #portfolio #javascript #nextjs 2 *d GitStub - a GitHub-first development boostrapper for dotnet core erikest erikest erikest Follow Apr 15 '19 GitStub - a GitHub-first development boostrapper for dotnet core #dotnet #globaltool #github #opensource 7 *d Attach physical hard disk to Xen/XCP-ng Server Pradeep Kumar Pradeep Kumar Pradeep Kumar Follow Feb 24 '22 Attach physical hard disk to Xen/XCP-ng Server #xenserver #xcpng #disk 4 *d UX Engineering Emma Bostian ✨ Emma Bostian ✨ Emma Bostian ✨ Follow Apr 14 '19 UX Engineering #career 1153 reactions 57 comments 7 min read Day 6/100, 100 Days of Code xurgg xurgg xurgg Follow Feb 24 '22 Day 6/100, 100 Days of Code #javascript #beginners #codenewbie #devjournal * How do I extract a nested tuple from a tuple? Mvuselelo Houston Khanyile Mvuselelo Houston Khanyile Mvuselelo Houston Khanyile Follow Feb 24 '22 How do I extract a nested tuple from a tuple? #python #sql #beginners #* 1 min read $1 CloudwaysCDN- Get Global Reach for your PHP Applications Shahroz Nawaz Shahroz Nawaz Shahroz Nawaz Follow Oct 13 '17 $1 CloudwaysCDN- Get Global Reach for your PHP Applications #php #cdn #symfony #dev 6 *d Orientation about store files/images in backend Marcos Aguilera Ely Marcos Aguilera Ely Marcos Aguilera Ely Follow Apr 14 '19 Orientation about store files/images in backend #discuss 6 * 10 Best Data Science and Machine Learning Courses for Beginners javinpaul javinpaul javinpaul Follow Apr 15 '19 10 Best Data Science and Machine Learning Courses for Beginners #beginners #python #programming #machinelearning 110 reactions 29 comments 15 min read ¿Que es el PEP 8 y porque debería implementarlo? Víctor Villalobos Víctor Villalobos Víctor Villalobos Follow Apr 14 '19 ¿Que es el PEP 8 y porque debería implementarlo? #python #spanish 20 *d Task Vs Thread ( C#) aburra12 aburra12 aburra12 Follow Feb 24 '22 Task Vs Thread ( C#) #taskvsthread #csharp #parallelprogramming #async 4 *d Boss vs Motivator André Jacques André Jacques André Jacques Follow Apr 14 '19 Boss vs Motivator #management #teamwork 6 *d Make your first Chrome Extension | Ad Blocker Sumana Basu Sumana Basu Sumana Basu Follow Feb 24 '22 Make your first Chrome Extension | Ad Blocker 6 *d Scan Your Network for Vulnerabilities With Nmap Kat Maddox Kat Maddox Kat Maddox Follow Apr 14 '19 Scan Your Network for Vulnerabilities With Nmap #security #networks 223 reactions 8 comments 6 min read Colour Detection using Pandas & OpenCV yaswanthteja yaswanthteja yaswanthteja Follow Feb 24 '22 Colour Detection using Pandas & OpenCV #python #pandas #opencv 6 *d Laravel Pivot Table | Eloquent Many To Many Relationship | Laravel 9 Tutorial Code With Tony Code With Tony Code With Tony Follow Feb 24 '22 Laravel Pivot Table | Eloquent Many To Many Relationship | Laravel 9 Tutorial #laravel #beginners #tutorial #* 1 min read Social Listening Tools: Everything you need to know and the best tools to start. shreya sahani shreya sahani shreya sahani Follow Feb 24 '22 Social Listening Tools: Everything you need to know and the best tools to start. #sentimentanalysis #sociallistening #textanalysis #emotionanalysis * Are you participating in the reply code challenge? Chris Bongers Chris Bongers Chris Bongers Follow Feb 24 '22 Are you participating in the reply code challenge? #devlive #watercooler 12 *d Pushing The Limits Of The Modern Browser Dustin Brett Dustin Brett Dustin Brett Follow Feb 24 '22 Pushing The Limits Of The Modern Browser #javascript #webdev #showdev #serverless 3 reactions 1 comments 3 min read 10 min guide to CSS3 Grid Layout Kauress Kauress Kauress Follow Apr 14 '19 10 min guide to CSS3 Grid Layout #css #design #frontend 82 * Taking advantage of BitMasks Ian Parr Ian Parr Ian Parr Follow Oct 13 '17 Taking advantage of BitMasks #csharp #devtips #algorithms #computerscience 14 * React testing-library で getByText, expect, debug, を使ってみる kaede kaede kaede Follow Feb 24 '22 React testing-library で getByText, expect, debug, を使ってみる #react #testing 2 *d Explaining loose-equality in javascript Alejandro Garcia Serna Alejandro Garcia Serna Alejandro Garcia Serna Follow May 3 '19 Explaining loose-equality in javascript #javascript 16 *d Solving hashtags problems smakosh smakosh smakosh Follow Jun 11 '19 Solving hashtags problems #reactnative #react #javascript 4 * How to work in a software engineering team Kimmo Sääskilahti Kimmo Sääskilahti Kimmo Sääskilahti Follow Feb 24 '22 How to work in a software engineering team #teamwork #personal #improvement #books 11 reactions 1 comments 5 min read The Easiest Way To Install Node.js on Linux/MacOS Mauricio Panelo Mauricio Panelo Mauricio Panelo Follow Feb 24 '22 The Easiest Way To Install Node.js on Linux/MacOS #javascript #node #nvm #webdev 6 *d Top 10 AngularJS Developer Tools in 2022 Yogesh Kumar Yogesh Kumar Yogesh Kumar Follow Feb 24 '22 Top 10 AngularJS Developer Tools in 2022 #javascript #angular #webdev #tutorial 6 reactions 1 comments 4 min read Network calls in android Using retrofit and coroutines Carlos Okumu Carlos Okumu Carlos Okumu Follow Feb 24 '22 Network calls in android Using retrofit and coroutines 6 * ReactJS: State Persistence Using Recoil Joie Joie Joie Follow Feb 24 '22 ReactJS: State Persistence Using Recoil #javascript #react #tutorial #recoil 12 * Jak wykorzystać Netlify do procesu ciągłej integracji Marcin Wosinek Marcin Wosinek Marcin Wosinek Follow Feb 24 '22 Jak wykorzystać Netlify do procesu ciągłej integracji #javascript #ci #netlify #polish 7 *d [C++ CODE] Almost Increasing Sum ✨ thetealpickle 📱 ✨ thetealpickle 📱 ✨ thetealpickle 📱 Follow Apr 14 '19 [C++ CODE] Almost Increasing Sum #thetealpickle #algorithms #coding #challenge 7 reactions 1 comments 1 min read You down with OOP? Yeah you know me! Jonathan-Bryant19 Jonathan-Bryant19 Jonathan-Bryant19 Follow Feb 25 '22 You down with OOP? Yeah you know me! #todayilearned #programming #* 4 min read we have a website womxnbuild womxnbuild womxnbuild Follow Feb 24 '22 we have a website #blog #beginners #womenintech #writing 4 *d [Android Studio|Kotlin] Containers, Create a list ownership903 ownership903 ownership903 Follow Feb 27 '22 [Android Studio|Kotlin] Containers, Create a list 2 * How Do I Choose The Best Magento Development Company For My Ecommerce Store? Planet Web Solution Planet Web Solution Planet Web Solution Follow Feb 24 '22 How Do I Choose The Best Magento Development Company For My Ecommerce Store? #ecommerce #magento 3 *d What is End-to-End Testing? Prathitha Prathitha Prathitha Follow Feb 24 '22 What is End-to-End Testing? #performance #testing #mobile #devops 4 *d Speedup your Jest tests in GitHub Actions Bharathvaj Bharathvaj Bharathvaj Follow Feb 24 '22 Speedup your Jest tests in GitHub Actions #github #githubactions #jest * let, const and the Temporal Dead Zone Sobit Prasad Sobit Prasad Sobit Prasad Follow Feb 24 '22 let, const and the Temporal Dead Zone #javascript #webdev #beginners #temporaldeadz 6 *d Day 5 in Redesigning Nasa's Picture of the Day Webpage Edward Naidoo Edward Naidoo Edward Naidoo Follow Feb 24 '22 Day 5 in Redesigning Nasa's Picture of the Day Webpage #react #figma #api #design 5 *d Important Bionic Eye Tech Becoming Obsolete, Tech Recruitment Challenges, & more on DevNews 🗞 dev.to staff dev.to staff dev.to staff Follow Feb 25 '22 Important Bionic Eye Tech Becoming Obsolete, Tech Recruitment Challenges, & more on DevNews 🗞 #news #podcast #devnews 20 reactions 1 comments 3 min read Use Symbol for custom injecting logic for NestJS with multi providing ILs*tov Follow Feb 24 '22 Use Symbol for custom injecting logic for NestJS with multi providing #nestjs #multi #providers #symbol 7 *d Phase-1 Project: CAP KEEPS Breon White Breon White Breon White Follow Feb 24 '22 Phase-1 Project: CAP KEEPS #javascript #webdev #beginners #api 3 * SharePoint JSON format Tank-73 Tank-73 Tank-73 Follow Feb 24 '22 SharePoint JSON format 3 *d Apache ShardingSphere is on the Stack Overflow Podcast, InfoQ and FOSDEM! Apache ShardingSphere Apache ShardingSphere Apache ShardingSphere Follow Feb 24 '22 Apache ShardingSphere is on the Stack Overflow Podcast, InfoQ and FOSDEM! #database #opensource #distributedsystems #postgres 5 *d Use abstract-class for custom injecting logic for NestJS with multi providing ILs*tov Follow Feb 24 '22 Use abstract-class for custom injecting logic for NestJS with multi providing #nestjs #multi #providers #abstract 7 *d Laravel 8 - Audit for Beginners (5 easy steps) ✍🏻📒💾 DaleLanto DaleLanto DaleLanto Follow Feb 24 '22 Laravel 8 - Audit for Beginners (5 easy steps) ✍🏻📒💾 #php #laravel #audit #beginners 24 * How I'm Sending Wordle Answers To My Phone Everyday RD RD RD Follow Feb 24 '22 How I'm Sending Wordle Answers To My Phone Everyday #beginners #showdev 4 *d State of JS & CSS Surveys: How to Help Sacha Greif Sacha Greif Sacha Greif Follow Feb 24 '22 State of JS & CSS Surveys: How to Help 5 reactions 1 comments 4 min read GameDev News - April 12, 2019 Brian Peek Brian Peek Brian Peek Follow Apr 14 '19 GameDev News - April 12, 2019 #gamedev 6 *d Section 1.3 - AWS Certified Cloud Practitioner Study Guide Alec Dutcher Alec Dutcher Alec Dutcher Follow Feb 24 '22 Section 1.3 - AWS Certified Cloud Practitioner Study Guide #aws #cloudskills #examprep #cloud 3 *n * ",
    "url": "https://dev.to/search"
  },
  {
    "body": "* 24 Add reaction 18 Like 6 *s 0 Fire 2 Jump to Comments 23 * Kyle J. Kemp Posted on Apr 25, 2019 18 6 Reddit Bot Making a Reddit Reply Bot #javascript #reddit #bot #node There's a lot of documentation on writing a reddit bot in Python, but I had a lot of trouble finding even basic documentation for Node - even some of the libraries that are listed on reddits official wiki are dead or 5 years old (read: don't support new reddit very well). So, I wanted to write about a simple and common use-case: replying to a user who tags you. Creating a Reddit Application First, head on over to https://www.reddit.com/prefs/apps and hit \"create app\" - you need to do this so reddit isn't using your personal user account. You should also sign up for a new reddit account for your bot (especially if it can be summoned). Make sure you add your main account and bot account as developers on this application. When creating an app, you need to fill in the field similarly to this: You don't need to worry about the about uri or redirect uri fields, as you won't be using them, so you can put in whatever you would like. Once in, you'll see a screen like this: Take note of this, because you'll need this information in just a second. Starting the Node Project For something like this, I found it very easy to use snoostorm (a wrapper around snoowrap). This library makes it exceptionally simple to get comments as they come in. You first need to make a snoowrap object, then use that to make a CommentStream object. To do that, you'll need your reddit bot username, password, application secret, and application id. You must specify a unique user-agent, so call it something like my-node-js-bot. So, configure it like so (mine is configured based on the picture above): const Snoowrap = require('snoowrap'); const { CommentStream } = require('snoostorm'); const client = new Snoowrap({ userAgent: 'my-node-js-bot', clientId: 'qR6rJnQ7sEJZDw', clientSecret: 'OCoo9pYnlC2K6fxQQxbcIPQ5MA4', username: 'myusernamebutactuallybot', password: 'mypasswordbutactuallybot' }); With this client object, you can finally start listening for new comments! Head over to /r/testingground4bots and hop into a thread or make your own. Then, add some code to start watching for comments: // pollTime is 10000 because reddit is very strict on posting too frequently // at first, you'll only be able to post once every 10 minutes, so make sure you get it right! const comments = new CommentStream(client, { subreddit: 'testingground4bots', limit: 10, pollTime: 10000 }); comments.on('item', (item) => { console.log(item); }); Start the bot up, and you'll see a flood of comments in your terminal. You may be wondering why that is - you haven't even seen any new ones come in yet! Well, the client will always give you the first X entries (in this case, 10) when you start your bot up, and then it will track from there. We can fix that pretty easily: // reddits api doesn't use millis const BOT_START = Date.now() / 1000; const comments = new CommentStream(client, { subreddit: 'testingground4bots', limit: 10, pollTime: 10000 }); comments.on('item', (item) => { if(item.created_utc < BOT_START) return; console.log(item); }); Great, now you only see the newest comments as they come in. Hopefully you have an established enough reddit account to make some posts on this subreddit. If you do so, you'll see your terminal fill with them fairly quickly after posting. Making It Interact So far, you've got a bot and it reads comments - that's a great start! But you want it to interact with your audience, right? So, how about a good ol' hello world? Check it out: const BOT_START = Date.now() / 1000; const comments = new CommentStream(client, { subreddit: 'testingground4bots', limit: 10, pollTime: 10000 }); comments.on('item', (item) => { if(item.created_utc < BOT_START) return; item.reply('hello world!'); }); There, any time a comment comes in, the bot will reply to it with \"hello world!\" Wait... that might talk a bit often, won't it? It might get just a little bit annoying. Reddit recommends replying specifically when your bot is mentioned, so, there's a fairly easy way to do that: const BOT_START = Date.now() / 1000; const canSummon = (msg) => { return msg && msg.toLowerCase().includes('/u/myusernamebutactuallybot'); }; const comments = new CommentStream(client, { subreddit: 'testingground4bots', limit: 10, pollTime: 10000 }); comments.on('item', (item) => { if(item.created_utc < BOT_START) return; if(!canSummon(item.body)) return; item.reply('hello world!'); }); There! So, what this does is make sure that the comment your bot finds actually refers to the bot itself. This canSummon function will do basic checking to make sure your bot doesn't erroneously spam a bunch of peoples comments. Make a comment now that says /u/myusernamebutactuallybot (rather, you should check for your own bots name), and you should see a reply shortly afterwards that says \"hello world!\" in reply. That's all you gotta do! 🎉 👋 * * and is worth it * (2) * Dmitry Dmitry Dmitry Follow Location Minsk, Belarus W* Sep 3, 2018 • Apr 26 '19 Copy l* this article, but remove please all the sensitive stuff like id and secret key! 1 like Like Reply Kyle J. Kemp Kyle J. Kemp Kyle J. Kemp Follow I make a lot of things on the web, from idle games to morpgs to apps. I also make bots, irc bots, discord bots, and now, reddit bots. Email kyle@seiyria.com Location WI Education BS Software Engineering Joined Feb 22, 2017 • Apr 26 '19 • Edited on Apr 26 • * I deleted the app after making the post, but left the image because I felt there was more value in knowing what keys corresponded to what values. 4 likes Like Reply * *? Manage p* Read next Understanding Exports and Imports in JavaScript Agbo, Daniel Onuoha - Oct 26 Big O notation Sukhrob Tech - Oct 26 * Le Quan Phat - Oct 26 🌍 Landmark API: Real-time Data for Landmarks, Tourism, and Travel Tech Marceli Borowczak - Oct 26 Kyle J. Kemp Follow I make a lot of things on the web, from idle games to morpgs to apps. I also make bots, irc bots, discord bots, and now, reddit bots. Location WI Education BS Software Engineering Joined Feb 22, 2017 More from Kyle J. Kemp Introducing: Inveinta - Another Inventory Management Tool #showdev #firebase #ionic #javascript * * * * ",
    "url": "https://dev.to/seiyria/making-a-reddit-reply-bot-f55"
  },
  {
    "body": "* Follow Report Abuse ServBay The fully integrated Web Development tool that helps you jump start coding, without installing any dependency like Node.js, PHP, MariaDB and PostgreSQL 👉🏻 servbay.com Joined on Dec 26, 2023 https://www.servbay.com More info about @servbay Badges 2 Week Co* * 1 We*t 2 comme*1 posts published 16 comments written 4 tags followed * Unleash ServBay’s Powe* 5 reactions Add C*ith ServBay? * ServBay. * Unleash Ser* * ServBay New Features: MongoDB Integration, CORS is Ready Se* 28 ServBay New Features: MongoDB Integration, CORS is Ready #mongodb #webdev #beginners #* 2 min read How to Set Default CLI Version Se* 23 How to Set Default CLI Version #cli #programming #*mment 2 min read ServBay Version 1.4.6 Upgrade Announcement Se* 12 ServBay Version 1.4.6 Upgrade Announcement #webdev #php #productivity #programming * PHP 8.4 First Release Candidate Released! New PHP Release Cycle Strategy Adopted Se* 7 PHP 8.4 First Release Candidate Released! New PHP Release Cycle Strategy Adopted #php #productivity #webdev #* 3 min read Local SSL Root Certificate (CA) Management Se* 4 Local SSL Root Certificate (CA) Management #webdev #php #beginners #programming 8 *d ServBay Version 1.4.4 Update Announcement Se* 1 ServBay Version 1.4.4 Update Announcement #programming #php #webdev #beginners 4 *d How to Migrate NGINX Website to ServBay Se* 1 How to Migrate NGINX Website to ServBay #programming #php #nginx #webdev 3 *d Why PHP 8 Has High Performanc*ow Sep 9 Why PHP 8 Has High Performance #programming #php #webdev #* 2 min read How to Use Secure HTTPS Connections in Local Development and Testing Environments with ServBay * Sep 6 How to Use Secure HTTPS Connections in Local Development and Testing Environments with ServBay #webdev #php #node #beginners 13 *d 🚀Update Announcement: ServBay 1.4.2, New Features and Improvements! * Aug 28 🚀Update Announcement: ServBay 1.4.2, New Features and Improvements! #* #php 4 *d Update Announcement: ServBay 1.4.0, More Features and Bugs Fixed * Aug 10 Update Announcement: ServBay 1.4.0, More Features and Bugs Fixed #webdev #programming #php #* 2 min read How to Use .user.ini in ServBay * Aug 8 How to Use .user.ini in ServBay #php #* 12 *d ServBay Note: MariaDB Patch * Jul 31 ServBay Note: MariaDB Patch #beginners #programming #mariadb #productivity 11 * Setting Up the PHP Environment * Jul 27 Setting Up the PHP Environment #* #php 13 * Announcing ServBay 1.3.9: More Features, Smoother Experience! 🚀 * Jul 24 Announcing ServBay 1.3.9: More Features, Smoother Experience! 🚀 #* #php 11 *d How to Install and Switch Between Different Versions of Node.js Without Docker and NVM * Jul 18 How to Install and Switch Between Different Versions of Node.js Without Docker and NVM #webdev #node #docker #beginners 8 * How to Use ServBay to Enable npm * Jul 10 How to Use ServBay to Enable npm #node #webdev #beginners #* 2 min read How to Use ServBay's Built-in Composer for PHP Project Management * Jul 5 How to Use ServBay's Built-in Composer for PHP Project Management #php #webdev #programming #*t 3 min read Use XDebug for PHP Project Debugging * Jun 30 Use XDebug for PHP Project Debugging #php #* 12 *d How to Use ServBay to Create and Run a CakePHP Project * Jun 26 How to Use ServBay to Create and Run a CakePHP Project #php #* 10 *d Quickly Set Up a Local Web Server on Mac with ServBay * Jun 23 Quickly Set Up a Local Web Server on Mac with ServBay #* #php 11 *d How to Improve Development Efficiency with PHP 8 * Jun 19 How to Improve Development Efficiency with PHP 8 #webdev #php #beginners #programming 20 * Unified Project Development Environment: ServBay is Enough * Jun 14 Unified Project Development Environment: ServBay is Enough #* #php 11 *d ServBay 1.3.5 Official Release: Significant Updates and Enhancements * Jun 3 ServBay 1.3.5 Official Release: Significant Updates and Enhancements #* #php 10 *d Preview of PHP 8.4 New Features * May 18 Preview of PHP 8.4 New Features #php #* 12 *d 🚀 Exciting Update for Devs: ServBay 1.3.4 Unleashes a Brand-New DNS Server! * May 7 🚀 Exciting Update for Devs: ServBay 1.3.4 Unleashes a Brand-New DNS Server! #webdev #php #beginners #programming 25 *d The ServBay 1.3.3 Update Gives You Early Access to PHP 8.4. And Node.js 22 * Apr 27 The ServBay 1.3.3 Update Gives You Early Access to PHP 8.4. And Node.js 22 35 *d Laravel 11 with Servbay: Quick Start Guid*ow Apr 10 Laravel 11 with Servbay: Quick Start Guide #webdev #* 33 *d How to Install WordPress within 5 Minutes * Mar 30 How to Install WordPress within 5 Minutes #wordpress #webdev #beginners #tutorial 10 * ServBay 1.3.0 Release Notes * Mar 29 ServBay 1.3.0 Release Notes #announcement #webdev #beginners #php 32 * Excited to Announce ServBay v1.2.3 is Out Now * Mar 4 Excited to Announce ServBay v1.2.3 is Out Now #php #beginners #webdev #* 2 min read The Essential Tool -- ServBay Version 1.2.2 Release Notes. * Feb 22 The Essential Tool -- ServBay Version 1.2.2 Release Notes. #php #webdev #productivity #update 17 *d Effortless Deployment: Build your web development environment in just 3 minutes * Feb 18 Effortless Deployment: Build your web development environment in just 3 minutes #webdev #programming #tutorial #productivity 26 * ServBay Introduction and Instructions * Feb 17 ServBay Introduction and Instructions #webdev #beginners #php #update 31 * ServBay Version 1.2.1 Release Notes, First Update in 2024 * Jan 29 ServBay Version 1.2.1 Release Notes, First Update in 2024 #webdev #php #programming #productivity 4 *d 5 Recommended Chrome Extensions for Front-end Developers * Jan 16 5 Recommended Chrome Extensions for Front-end Developers #discuss #* 12 *d Enhancing PHP Application Performance: Strategies for Sustained Excellenc*ow Jan 9 Enhancing PHP Application Performance: Strategies for Sustained Excellence 6 *d A Must-Have Tools for Mac Web Developers * Dec 26 '23 A Must-Have Tools for Mac Web Developers 22 * 🌟🎄 ServBay 1.2.0 - Christmas Special Update 🎄🌟 * Dec 26 '23 🌟🎄 ServBay 1.2.0 - Christmas Special Update 🎄🌟 #webdev #php #beginners #productivity 8 reactions Add Comment 2 *onsor Neon * ",
    "url": "https://dev.to/servbay"
  },
  {
    "body": "* 4 Add reaction 2 * 1 Raised Hands 1 Fire 0 Jump to Comments 0 * ServBay Posted on Nov 9 • Originally published at support.servbay.com 2 1 1 Unleash ServBay’s Power! * On macOS, managing local DNS records is very useful for developing, testing, and debugging web applications. ServBay provides a local dnsmasq server, making it easier to add, modify, pause, and delete DNS records. This article will detail how to use ServBay to manage local DNS records. TIP For websites added from ServBay’s Host feature, these records will display a small globe 🌐 icon on the right side of the DNS record. These records need to be managed through the Host feature and cannot be managed directly in the DNS records. Viewing Current Local DNS Records With ServBay, you can easily view the contents of current local DNS records. ServBay uses dnsmasq server to handle these records, making management more convenient. View* list on the right, select DNS Server. ServBay will display the current DNS records. This way, you can intuitively see all configured domain and IP address mappings. Adding a Record to Local DNS During development or testing, you might need to map a domain to a specific IP address. With ServBay, you can easily add a record to the local DNS. Add* list on the right, select DNS Server. Click the + button. Enter the domain name and corresponding IP address, for example: servbay.demo 127.0.0.1 Click the Add button. This will add the new domain and IP address mapping to the local DNS records. TIP ServBay supports adding multiple IP addresses and also supports adding IPv6 addresses. Separate multiple IP addresses with commas (,). Modifying a Local DNS Record Sometimes, you might need to modify the existing domain and IP address mapping. With ServBay, you can easily modify a record in the local DNS. Modify* list on the right, select DNS Server. Find the record you need to modify. Click the record. In the panel on the right, modify the domain or IP address, for example: servbay.demo 127.0.0.1 -> servbay.demo 10.0.0.1 Click the Save button. This will update the specified record in the local DNS records. Pausing a Local DNS Record In some cases, you might need to temporarily pause the resolution of a record without deleting it. With ServBay, you can easily achieve this. Paus* list on the right, select DNS Server. Find the record you need to pause. Click the Pause button next to the record. ServBay will automatically pause the resolution of the record, and the icon in front of the record will change from green to gray. Deleting a Local DNS Record If a record is no longer needed, you can delete it from the local DNS records via ServBay. Delet* list on the right, select DNS Server. Find the record you need to delete. Click the Delete button next to the record. Confirm the deletion. This will remove the specified domain and IP address mapping from the local DNS records. Summary ServBay provides a convenient interface to manage local DNS records on macOS, making it simpler and more intuitive to view, add, modify, pause, and delete records. With these features, you can more efficiently develop, test, and debug web applications. Whether adding new domain mappings or modifying existing records, ServBay meets your needs and ensures the flexibility and controllability of the local network environment. By using ServBay’s dnsmasq server, you can easily manage local DNS records and improve development and testing efficiency. For websites added via ServBay’s Host feature, you need to manage them through the Host feature to ensure the accuracy and consistency of all records. Big thanks for sticking with ServBay. Your support means the world to us 💙. Got questions or need a hand? Our tech support team is just a shout away. Here's to making web development fun and fabulous! 🥳 If you want to get the latest information, follow X(Twitter) and Facebook. If you have any questions, our staff would be pleased to help, just join our Discord community, Telegram or Whats app. Highlight Promoted * Self-Host Your Observability Stack Take control of your data and privacy. With Highlight.io, you can self-host your entire observability stack, giving you full visibility without sacrificing security or compliance. Monitor, debug, and optimize – on your terms. Start self-hosting with Highlight.io today. Get Started Top comments (0) * * Red Hat Developer Promoted * Your step-by-step guide to building from scratch Experience hands-on learning resources without setup or configuration, and learn to develop quicker than ever before. Get started Read next What Makes a Great Hacker? Aravind Roy - Nov 6 Building a Modern React Library Star*rup Pal - Nov 9 Python beats Javascript, Next.js Leap & the AI Coding Wars TheDev - Nov 4 * Ken Yip - Nov 4 ServBay Follow The fully integrated Web Development tool that helps you jump start coding, without installing any dependency like Node.js, PHP, MariaDB and PostgreSQL 👉🏻 servbay.com Joined Dec 26, 2023 More from ServBay ServBay New Features: MongoDB Integration, CORS is Ready #mongodb #* How to Set Default CLI Version #cli #* ServBay Version 1.4.6 Upgrade Announcement #webdev #php #productivity #programming Neon Promoted * Postgres on Neon - Get the Free Plan No credit card required. The database you love, on a serverless platform designed to help you build faster. Get Postgres on Neon 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/servbay/unleash-servbays-power-managing-local-dns-records-170n"
  },
  {
    "body": "* 5 Add reaction 2 * 2 Raised Hands 1 Fire 0 Jump to Comments 0 * ServBay Posted on Nov 10 • Originally published at support.servbay.com 2 2 1 Unleash ServBay’s Powe* In macOS, the hosts file is used to map specific domain names to designated IP addresses. This is very useful for developing, testing, and debugging web applications. ServBay provides a convenient interface to manage the local hosts file on macOS, making it easier to add, modify, pause, and delete records. This article will detail how to use ServBay to manage the local hosts file. Viewing the Current Local Hosts File The hosts file is located at the path /etc/hosts. With ServBay, you can easily view the contents of the current local hosts file. View* right-hand list, scroll down to Hosts file. ServBay will display the current contents of the hosts file. This way, you can visually see all the domain name and IP address mappings that are configured. Adding a Record to the Local Hosts File During development or testing, you might need to map a certain domain name to a specific IP address. With ServBay, you can easily add a record to the local hosts file. Add* right-hand list, scroll down to Hosts file. Click on the + button. Enter the domain name and corresponding IP address, for example: servbay.demo 127.0.0.1 Click the Add button. This will add the new domain name and IP address mapping to the local hosts file. TIP ServBay supports adding multiple IP addresses and also supports adding IPv6 addresses. Separate multiple IP addresses with commas (,). Modifying a Record in the Local Hosts File Sometimes, you may need to modify the existing domain name and IP address mappings. With ServBay, you can conveniently modify the records in the local hosts file. Modify* right-hand list, scroll down to Hosts file. Find the record you need to modify. Click on the record. In the right-hand panel, modify the domain name or IP address, for example: servbay.demo 127.0.0.1 -> servbay.demo 10.0.0.1 Click the Save button. This will update the specified record in the local hosts file. Pausing a Record in the Local Hosts File In some cases, you might need to temporarily pause the parsing of a record without deleting it. With ServBay, you can easily achieve this. Paus* right-hand list, scroll down to Hosts file. Find the record you need to pause. Click the Pause button next to the record. ServBay will automatically pause the parsing of that record, and the icon before the record will change from green to gray. Deleting a Record from the Local Hosts File If a record is no longer needed, you can delete it from the local hosts file through ServBay. Delet* right-hand list, scroll down to Hosts file. Find the record you need to delete. Click the Delete button next to the record. Confirm the deletion. This will remove the specified domain name and IP address mapping from the local hosts file. Summary ServBay provides an easy interface to manage the local hosts file on macOS, making it simpler and more intuitive to view, add, modify, pause, and delete records. With these features, you can develop, test, and debug web applications more efficiently. Whether adding new domain mappings or modifying existing records, ServBay can meet your needs, ensuring the flexibility and control of the local network environment. Coherence Promoted * Deploy and scale your apps on AWS and GCP with a world class developer experience Coherence makes it easy to set up and maintain cloud infrastructure. Harness the extensibility, compliance and cost efficiency of the cloud. Learn more Top comments (0) * * Sentry *r* *) gitter4coding - Nov 7 Evolution of Web Tech and Browsers Charan Sajjanapu - Nov 2 CMS: Payload CMS akpvt - Nov 2 FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory on Digital OceanDroplet Sammy Barasa - Nov 2 ServBay Follow The fully integrated Web Development tool that helps you jump start coding, without installing any dependency like Node.js, PHP, MariaDB and PostgreSQL 👉🏻 servbay.com Joined Dec 26, 2023 More from ServBay Unleash ServBay’s Power! * ServBay New Features: MongoDB Integration, CORS is Ready #mongodb #* How to Set Default CLI Version #cli #* * Laravel * 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/servbay/unleash-servbays-power-managing-local-hosts-file-3925"
  },
  {
    "body": "* Follow Report Abuse Kaue Campos Software Engineer Brazil Joined on Aug 15, 2024 More info about @sh4rkzy Badges * 2 * 1 tag followed * Kaue Campos Kaue Campos Kaue Campos Follow Oct 31 * #javascript #node #typescript 4 reactions 1 c*ith Kaue Campos? * Kaue Campos. * Criando Clusterização em Aplicações Node.js Kaue Campos Kaue Campos Kaue Campos Follow Oct 31 Criando Clusterização em Aplicações Node.js #javascript #node #typescript #api 5 * * ",
    "url": "https://dev.to/sh4rkzy"
  },
  {
    "body": "* 4 Add reaction 3 Like 1 *s 0 Fire 1 Jump to Comments 0 * Kaue Campos Posted on Oct 31 3 1 * #javascript #node #typescript Um dos grandes dilemas para nós, desenvolvedores, é como oferecer a melhor performance para o usuário final. Queremos que nossos sistemas sejam ágeis, eficientes e menos propensos a falhas. Mas, em meio ao desenvolvimento, nem sempre percebemos algumas estratégias que podem fazer uma grande diferença nesse quesito. Imagine o seguinte cenário: você tem uma aplicação hospedada em um cloud provider, como a AWS, utilizando uma instância EC2 para rodar uma API em Node.js. Tudo está funcionando bem, mas, com o aumento da carga, o servidor começa a apresentar limitações. Ele só consegue processar um certo número de requisições simultâneas, gerando lentidão e até falhas em horários de pico. Isso acontece porque, por padrão, o Node.js opera em um único thread, usando apenas um núcleo de CPU. Aqui, muitos desenvolvedores podem pensar em escalar a aplicação horizontalmente, criando novas instâncias de servidor. No entanto, antes disso, uma alternativa poderosa e eficiente está à nossa disposição: a clusterização de processos em Node.js. Com essa técnica, conseguimos aproveitar ao máximo os recursos de CPU do servidor, criando um ambiente mais robusto e escalável, tudo sem precisar criar novas instâncias. Tá, mais como funciona a clusterização afinal? A clusterização é uma técnica que permite executar várias cópias de uma aplicação Node.js (chamadas de workers) em paralelo, dentro do mesmo servidor. Como o Node.js é, por natureza, um ambiente de execução single-threaded, ele usa apenas um núcleo de CPU por vez. Isso limita a capacidade de processamento, principalmente em servidores multicore, onde recursos estão ociosos enquanto a aplicação utiliza apenas um núcleo. Através da clusterização, podemos criar múltiplos workers, cada um rodando uma instância separada da aplicação. Estes processos são gerenciados por um processo principal (ou mestre), que distribui as requisições entre os workers disponíveis. Cada worker pode ser alocado em um núcleo de CPU diferente, permitindo que a aplicação use todos os núcleos da máquina, distribuindo a carga de trabalho e aumentando significativamente o desempenho. Imagine que você tenha um servidor com 4 núcleos de CPU e que, sem clusterização, sua aplicação usa apenas um deles. Ao clusterizar a aplicação, podemos criar 4 workers, cada um em um núcleo. Isso quer dizer que, em vez de processar, por exemplo, 100 requisições por segundo, ela poderia processar até 400, com uma carga mais bem distribuída e menor tempo de resposta. Outro benefício importante é a resiliência. Com vários processos rodando, se um worker falha, o processo principal pode reiniciar apenas o worker afetado, sem derrubar toda a aplicação. Isso resulta em uma aplicação mais estável e menos sujeita a períodos de inatividade. Além disso, como todos os workers compartilham o mesmo servidor, eles acessam os mesmos recursos (como a memória e o sistema de arquivos), o que reduz a necessidade de escalonamento horizontal imediato (como a criação de novas instâncias de servidor) e diminui os custos. Conclusão A clusterização de processos em Node.js é uma estratégia poderosa que pode transformar o desempenho das suas aplicações, especialmente em ambientes de produção onde a carga de trabalho pode ser imprevisível. Ao implementar múltiplos workers, você não só melhora a capacidade de resposta e a escalabilidade da sua aplicação, mas também a torna mais resiliente a falhas. Isso significa que sua aplicação pode aproveitar ao máximo os recursos de CPU disponíveis, permitindo que atenda a um número maior de requisições simultâneas de forma eficiente. Se você está curioso para aprender mais sobre como implementar a clusterização em suas aplicações Node.js, eu recomendo dar uma olhada neste artigo que explico sobre criando Clusterização em Aplicações Node.js. É uma excelente maneira de começar a otimizar sua aplicação e proporcionar uma experiência ainda melhor para suas apis! Coherence Promoted * The Next Generation Developer Platform Coherence is the first Platform-as-a-Service you can control. Unlike \"black-box\" platforms that are opinionated about the infra you can deploy, Coherence is powered by CNC, the open-source IaC framework, which offers limitless customization. Learn more Top comments (1) * Lucas Aguiar Lucas Aguiar Lucas Aguiar Follow backend developer and devops, aspiring software engineer Joined Jul 4, 2024 • Oct 31 Copy link Hide Report abuse Boa demais kaue! Nunca tinha pensado nisso 2 likes Like Reply * * JavaScript makes yo* Blur Card Effect babar ali - Oct 10 JavaScript Essentials: Part 7 Michael Otu - Nov 2 Front End Debugging Part 1: Not just Console Log Shai Almog - Oct 29 URL-Shortener-APIs Karan Kumar Gautam - Oct 9 Kaue Campos Follow Software Engineer Location Brazil Joined Aug 15, 2024 More from Kaue Campos Criando Clusterização em Aplicações Node.js #javascript #node #typescript #api * * * * ",
    "url": "https://dev.to/sh4rkzy/como-melhorar-o-desempenho-de-aplicacoes-nodejs-com-clusterizacao-lj4"
  },
  {
    "body": "* 223 Add reaction 191 Like 10 Unicorn 6 Exploding Head 7 Raised Hands 9 Fire 28 Jump to Comments 358 * Shafayet Hossain Posted on Nov 6 • Updated on Nov 9 191 10 6 7 9 Java* #javascript #webdev #node #discuss Learning JavaScript & Typescripts (23 Part Series) 1 Essential Concepts for JavaScript Developers 2 5 JavaScript Patterns Every Developer Should Know in 2024 ... 19 more parts... 3 Promises in JavaScript, A Guide for 2024 4 Understanding Closures in JavaScript: A Key Concept for 2024 5 JavaScript * 6 TypeScript: Because JavaScript Could Use a Little More Discipline 7 Optimizing JavaScript with Maps, Sets, and Weak References 8 JavaScript Event Loop: How It Works and Why It Matters for Performance 9 Understanding JavaScript Proxy: Power of Intercepting and Customizing Operations 10 Advanced Type System and Generics for Pro TypeScript Developers 11 TypeScript Utility Types: Enhancing Code Reusability 12 Why You Should (Probably) Use TypeScript? 13 Why Web Workers Depend on JavaScript ?? 14 Async Tricks in JavaScript for Smoother Code 15 The Callback Hell, Writing Cleaner Asynchronous JavaScript 16 Top 3* Should Know 17 Let's do a Battle Between JavaScript and TypeScript!! 18 Advanced Event Loop Techniques for Peak JS Performance 19 JavaScript Proxy and Reflect for Dynamic Object Control 20 Dominate Object-Oriented Programming (OOP) in JavaScript. 21 Building a Self-Evolving Codebase: JavaScript’s AST Manipulation and Dynamic Compilation 22 Java* 23 JavaScript Meta Programming: In-Depth Guide on Proxy, Reflect, and Object Property Control Memory management is crucial for JavaScript applications, particularly as they scale. Whether building web apps or complex server-side applications, optimizing memory usage can make your code faster, prevent memory leaks, and create an overall smoother experience for users. Let’s see how JavaScript handles memory, identify common pitfalls, and explore how you can optimize memory usage. 1. Understanding JavaScript’s Memory Lifecycle JavaScript has an automatic garbage collection system, meaning that it allocates and deallocates memory as needed. However, understanding how JavaScript manages memory is vital to avoid overusing memory resources. Key Memory Phases: Allocation: Variables, objects, and functions get allocated memory space when created. Usage: JavaScript uses this allocated memory while the variable or object is needed in code. Deallocation (Garbage Collection): JavaScript’s garbage collector (GC) periodically frees up memory from unreferenced objects, allowing resources to be reused. However, the GC doesn’t solve all memory issues. If your code holds onto references unnecessarily, memory leaks can occur, causing increased memory usage over time and potentially slowing down the entire application. 2. Common Memory Leaks in JavaScript 1. Global Variables: Global variables persist for the application's lifetime and are rarely garbage collected. This can lead to accidental memory leaks when variables are not correctly scoped. function myFunc() { globalVar = \"I'm a memory leak!\"; } Here, globalVar is defined without a let, const, or var, making it global unintentionally. 2. Detached DOM Nodes: DOM nodes removed from the document can still be referenced in JavaScript, keeping them in memory even though they’re no longer displayed. let element = document.getElementById(\"myElement\"); document.body.removeChild(element); // Node is removed but still referenced 3. Timers and Callbacks: setInterval and setTimeout can hold references to callbacks and variables if not cleared, leading to memory leaks in long-running applications. let intervalId = setInterval(() => { console.log(\"Running indefinitely...\"); }, 1000); // To clear clearInterval(intervalId); 4. Closures: Closures can cause memory issues if not used carefully, as they maintain references to their outer functions’ variables.Click here for learn more function outer() { let bigData = new Array(100000).fill(\"data\"); return function inner() { console.log(bigData.length); }; } Here, inner keeps bigData in memory, even if it’s not needed anymore. 3. Strategies for Preventing and Fixing Memory Leaks 1. Minimize Global Variables: Keep variables within function or block scope whenever possible to avoid unnecessary memory persistence. 2. Clear References to Detached DOM Nodes: Ensure variables referencing DOM nodes are set to null when the nodes are removed from the DOM. document.body.removeChild(element); element = null; // Clear the reference 3. Manage Timers and Event Listeners: Clear all timers and listeners when they’re no longer needed, especially in single-page applications where components mount and unmount dynamically. let timer = setInterval(doSomething, 1000); // Clear when no longer needed clearInterval(timer); 4. Avoid Large Closures When Possible: Avoid closures that hold onto large data structures or references. Alternatively, re-structure code to minimize closure scope. 4. Memory Optimization Techniques 1. Use Weak References: JavaScript’s WeakMap and WeakSet can hold objects without preventing garbage collection if the objects are no longer in use. const weakMap = new WeakMap(); let element = document.getElementById(\"myElement\"); weakMap.set(element, \"some metadata\"); element = null; // Now GC can collect it 2. Lazy Loading: Only load necessary data or modules when needed. This prevents the initial loading of unused resources, reducing memory use and load times. 3. Efficient Data Structures: Use Map, Set, and other efficient data structures over plain objects and arrays when dealing with large amounts of data. const data = new Map(); data.set(\"key\", { /* large data */ }); 4. Pooling Resources: Instead of repeatedly creating and destroying instances, reuse them. Object pools are particularly effective for managing frequently created and discarded objects. const pool = []; function createPooledObject() { if (pool.length > 0) return pool.pop(); else return new LargeObject(); } 5. Profiling and Monitoring Memory Usage Using developer tools to monitor memory usage helps you visualize memory leaks and inefficient patterns in your code. Chrome DevTools Memory Tab: Heap Snapshot: Shows memory usage by JS objects and DOM nodes. Allocation Timeline: Tracks memory allocation over time. Allocation Profiler: Monitors memory allocations to detect leaks or heavy memory usage. To take a heap snapshot in Chrome DevTools: Open DevTools (F12 or Ctrl+Shift+I). Go to the Memory tab. Select Heap snapshot and click Take snapshot. 6. Advanced Garbage Collection Techniques in JavaScript JavaScript’s garbage collection is not instantaneous, and understanding the underlying algorithm can help you make better code decisions. Here’s a quick overview of how JavaScript’s garbage collector works: Mark-and-Sweep: The garbage collector marks active (reachable) objects and “sweeps” away those that aren’t. Incremental Collection: Rather than sweeping the entire memory at once, JavaScript incrementally collects smaller parts to avoid halting the main thread. Generational Collection: This technique categorizes objects by age. Short-lived objects are collected more frequently than long-lived ones, which tend to persist in memory. 7. Real-World Example of Memory Optimization Let’s consider an example of optimizing a high-memory JavaScript application, such as a data visualization tool that processes large datasets. // Inefficient Version function processData(data) { let result = []; for (let item of data) { result.push(expensiveOperation(item)); } return result; } The above function creates a new array every time it’s called. By reusing arrays or employing WeakMap, memory usage can be optimized. // Optimized Version const cache = new WeakMap(); function processData(data) { if (!cache.has(data)) { cache.set(data, data.map(expensiveOperation)); } return cache.get(data); } Using WeakMap, we avoid holding onto data unnecessarily, reducing memory use by releasing it when no longer needed. At the end JavaScript memory management is essential for high-performance applications, especially as they grow in complexity. By understanding memory allocation, avoiding common leaks, and leveraging advanced memory management strategies, you can create applications that scale efficiently and remain responsive. Mastering these techniques enables developers to build truly robust, optimized, and user-friendly applications. My personal website: https://shafayet.zya.me A meme for you😉😉😉 Learning JavaScript & Typescripts (23 Part Series) 1 Essential Concepts for JavaScript Developers 2 5 JavaScript Patterns Every Developer Should Know in 2024 ... 19 more parts... 3 Promises in JavaScript, A Guide for 2024 4 Understanding Closures in JavaScript: A Key Concept for 2024 5 JavaScript * 6 TypeScript: Because JavaScript Could Use a Little More Discipline 7 Optimizing JavaScript with Maps, Sets, and Weak References 8 JavaScript Event Loop: How It Works and Why It Matters for Performance 9 Understanding JavaScript Proxy: Power of Intercepting and Customizing Operations 10 Advanced Type System and Generics for Pro TypeScript Developers 11 TypeScript Utility Types: Enhancing Code Reusability 12 Why You Should (Probably) Use TypeScript? 13 Why Web Workers Depend on JavaScript ?? 14 Async Tricks in JavaScript for Smoother Code 15 The Callback Hell, Writing Cleaner Asynchronous JavaScript 16 Top 3* Should Know 17 Let's do a Battle Between JavaScript and TypeScript!! 18 Advanced Event Loop Techniques for Peak JS Performance 19 JavaScript Proxy and Reflect for Dynamic Object Control 20 Dominate Object-Oriented Programming (OOP) in JavaScript. 21 Building a Self-Evolving Codebase: JavaScript’s AST Manipulation and Dynamic Compilation 22 Java* 23 JavaScript Meta Programming: In-Depth Guide on Proxy, Reflect, and Object Property Control _Su* UI Component * retain full ownership *ion limits. Learn more Top comments (28) * Peter Vivo Peter Vivo Peter Vivo Follow Pipeline operator and touch bar fanatic from Hungary. God speed you! Location Pomaz Education streetwise Work full stack developer at TCS Joined Jul 24, 2020 • Nov 6 • Edited on Nov 6 • * Whole of react casual reducer with big array modification is looks memory leak way when write this way?: const reducer = (state, {type, payload} ) => { switch (type) { case ADD_ELEMENT: return {...state, list: [...state.list, payload]}; case RESET: return {...state, list: []}; case SHUFFLE: return {...state, list: [...state.list.sort(_=>Math.random()-.5)]}; default: return state; } } When every modification is create a whole new array. My real life experience is: this is not effect the memory so much. Maybe use a bit higher amount, but not cause leak. We are real time working on big data in this way. 6 likes ** * • *e Hey Peter, great question! You’ve touched on an important point about memory management in React. While creating a new array for each modification follows React's immutable state principle, it’s true that this may seem memory-heavy. However, React's virtual DOM efficiently handles these changes. If memory optimization is crucial, consider using techniques like linked lists for extensive modifications or incorporating memoization to reduce re-rendering overhead. Libraries like immer can also help manage immutability more efficiently. BTW, good call! 🖤😉 4 likes Like Reply Dhanush Dhanush Dhanush Follow Software Developer | Java, Spring Boot, Hibernate, Junit | Fullstack 🌐| Git, GitHub | RestAPI, Micro Services Location India Education SNR Engineering College Pronouns Developer Work Java Fullstack Developer Joined Feb 3, 2022 • Nov 8 *'re absolutely right, memory management is a crucial aspect of JavaScript development. Understanding how memory allocation and garbage collection work in JavaScript can help you optimize your code and ensure that it runs smoothly. When working with large datasets or complex applications, it's important to be mindful of how you're allocating memory and to avoid creating unnecessary references that can lead to memory leaks. Techniques such as using smaller data structures, avoiding global variables, and explicitly releasing references can all help to improve *. 3 likes ** * • Nov 8 Co*s Dhanush, I agree with you😊😊😊 1 like Like Reply Derek Wene Derek Wene Derek Wene Follow Joined Jun 6, 2023 • Nov 9 Co*s ChatGPT 😂 2 likes Like Reply Mike Mike Mike Follow Software Engineer Joined May 21, 2019 • *e 7 is misleading - neither have a memory leak and the \"unoptimized\" version is actually more memory efficient. But the optimized version is more computationally efficient because it has a memory-safe implementation of memoization, which by definition trades memory for speed. But in most cases, you would probably use a normal map for memoization. 2 likes ** * • *e Hey Mike! I appreciate your sharp observation—it’s spot-on that memory usage can often be balanced against computational efficiency when using memoization. The “unoptimized” example can indeed show better memory retention in straightforward cases, while the “optimized” one aims for speed through controlled caching. Using a standard map can be optimal in many scenarios, though the choice depends on the specific performance needs and data scale. Your insights add valuable perspective, and I’m glad you shared them! 😊 1 like Like Reply Mihail Dimitrov Mihail Dimitrov Mihail Dimitrov Follow Location Varna, Bulgar*d Feb 2, 2023 • *e Hello! Thanks for this great article! I didn't quite understand the example in \"4. Pooling Resources\". Wouldn't createPooledObject() always return new LargeObject(), since we never actually populate anything into the pool, and it's length is always zero? 1 like ** * • *e Hey Mihail! You’re absolutely right, and I appreciate you catching that oversight. In this example, createPooledObject() would indeed return a new LargeObject() every time since the pool isn’t actually being filled with existing objects. Ideally, we’d populate the pool first, then retrieve objects from it rather than creating them each time. I’ll clarify that to prevent any confusion. Thanks again for the keen eye!🖤🖤🖤 2 likes Like Reply Mihail Dimitrov Mihail Dimitrov Mihail Dimitrov Follow Location Varna, Bulgar*d Feb 2, 2023 • Nov 6 Copy l* the clarification! I also did a little research on that concept because everything you wrote looked interesting - thanks for listing it here. It all starts with knowing what options you have. The details come later 😃 1 like Like Reply Nozibul Islam Nozibul Islam Nozibul Islam Follow I am a Full-Stack Developer specialized Front-end Developer. Passionate about algorithms, data structures, and coding challenges & always ready to face new challenges. Email nozibulislamspi@gmail.com Location Dhaka, Bangladesh Education B.Sc. in Computer Science Engineering Pronouns Mr. Work Currently, I’m focused on problem-solving and learning DSA while freelancing. Joined Aug 24, 2024 • *e thank you so much for sharing in this important lesson. 2 likes ** * • Nov 7 Copy * Nozibul🖤I always count you in...😊 2 likes Like Reply Nozibul Islam Nozibul Islam Nozibul Islam Follow I am a Full-Stack Developer specialized Front-end Developer. Passionate about algorithms, data structures, and coding challenges & always ready to face new challenges. Email nozibulislamspi@gmail.com Location Dhaka, Bangladesh Education B.Sc. in Computer Science Engineering Pronouns Mr. Work Currently, I’m focused on problem-solving and learning DSA while freelancing. Joined Aug 24, 2024 • *e Welcome... 2 likes Like Reply Meer Meer Meer Follow 👋 Hi, I'm Meer, a Full Stack Developer passionate about building scalable web applications. I specialize in both frontend and backend, with experience in React, Next.js, Node.js, and MongoDB. Location Lahore, Pakistan Education Bachelor's in Computer Science Pronouns I'm disappointed with the dev.to team for adding this frustrating and unnecessary functionality. Work I'm a Backend Developer at a company, building efficient server-side logic and APIs. Joined Aug 18, 2021 • *e Really Great And Interesting Article 2 likes ** * • *e Glad you found that helpful😊🖤 1 like Like Reply Pixel Luna😉 Pixel Luna😉 Pixel Luna😉 Follow Joined Nov 9, 2024 • Nov 9 Copy link Hide Report abuse I just created an account then i saw your post!!Your post literally made my day!😊 2 likes ** * • Nov 9 Copy link Hide Report abuse I'm so happy to hear that😊 2 likes Like Reply Pixel Luna😉 Pixel Luna😉 Pixel Luna😉 Follow Joined Nov 9, 2024 • Nov 9 Copy link Hide Report abuse ❤❤❤ 2 likes Like Reply Mamata Bhushapogu Mamata Bhushapogu Mamata Bhushapogu Follow Joined Nov 5, 2024 • Nov 8 *s Nice 1 like ** * • Nov 8 Copy * Mamata...🖤 1 like Like Reply Ragul KL Ragul KL Ragul KL Follow Build Your App Today With Experts. Joined Nov 6, 2024 • *e \"Thank you so much for sharing this invaluable lesson. It truly means a lot!\" 2 likes ** * • Nov 7 Copy * Barkot😊 2 likes Like Reply @whereisthebug @whereisthebug @whereisthebug Follow Hi! I've been developer for over 15 years. I'm starting to share my experiences here. Location Buenos Aires, Argentina. Joined Feb 6, 2024 • Nov 9 * tips! I have a question, though. In number three, you've said that Map and Set are more efficient in comparison with objects and arrays regarding large amounts of data. Can you please tell me more about this? Thank you! *ion (28 comments) *. * Red Hat Developer Promoted * Your step-by-step guide to building from scratch Experience hands-on learning resources without setup or configuration, and learn to develop quicker than ever before. Get started Read next I have localized the best short-linking platform in the world Jan Cizmar - Nov 6 Why Strong DSA Knowledge is Essential for Software Engineers Anwar Hossain - Oct 23 Understanding the Difference Between * Vijay Kumar - Oct 23 How I Improved Video Streaming with FFmpeg and Node.js Mohamed Mayallo - Nov 5 *. * More from Shafayet Hossain JavaScript Meta Programming: In-Depth Guide on Proxy, Reflect, and Object Property Control #java* Building a Self-Evolving Codebase: JavaScript’s AST Manipulation and Dynamic Compilation #* Dominate Object-Oriented Programming (OOP) in JavaScript. #java* * NextJS * 👋 ** * ",
    "url": "https://dev.to/shafayeat/javascript-memory-management-and-optimization-techniques-for-large-scale-applications-5e4a"
  },
  {
    "body": "* Follow Report Abuse Saheed hussain Software developer with 10+ years of Experience building large scale applications Joined on Apr 10, 2023 More info about @shahid_hussain_7a399e19ef Badges One * one year. Got it * 1 We*t 2 comme* posts published 2 comments written 10 tags followed Simply Explained : Top 5 Design Patterns Saheed hussain Saheed hussain Saheed hussain Follow Jun 6 '23 Simply Explained : Top 5 Design Patterns #beginners #java #patterns #coding 2 reactions Add C*h Saheed hussain? * Saheed hussain. * When to Singularity, is it before 2060? Saheed hussain Saheed hussain Saheed hussain Follow May 8 '23 When to Singularity, is it before 2060? #discuss #ai #chatgpt #autogpt Add Comment 2 min read Boosting Your Productivity Saheed hussain Saheed hussain Saheed hussain Follow Apr 12 '23 Boosting Your Productivity #productivity #planning #focus #automation Add Comment 3 min read Tips for Effective 1:1s with Your Manager Saheed hussain Saheed hussain Saheed hussain Follow Apr 11 '23 Tips for Effective 1:1s with Your Manager #careerdevelopment #management #softskills #tips * Diamond Sponsor Neon * ",
    "url": "https://dev.to/shahid_hussain_7a399e19ef"
  },
  {
    "body": "* Follow Report Abuse Shameel Uddin Tech Enthusiast, eager to learn latest trends of digital world! Joined on May 7, 2022 https://www.linkedin.com/in/shameeluddin/ Education Masters in Computer and Information Engineering Work Software Engineer Two * two years. Got it * Top Discussion of the Week Awarded for starting a discussion that was featured in the \"Discussion of the Week\" series. 🙌 Got it *. ** * * * Docker Awarded to the top Docker author each week Got it *le week. G* @shameel Organizations hasabTech Skills/Languages TypeScript, React, Node.js, Web Security, Network Security, Cloud Computing, Azure, Currently learning MERN 53 posts published 71 comments written 23 tags followed AWStuff: Dedicated Instance vs. Dedicated Host * Follow Jul 14 AWStuff: Dedicated Instance vs. Dedicated Host #todayilearned #aws #ec2 #learning 5 reactions Add C*ith Shameel Uddin? * Shameel Uddin. * Gemini AI inside Chrome DevTools to Debug Errors * Follow Jul 11 Gemini AI inside Chrome DevTools to Debug Errors #ai #debug #javascript #productivity 20 * create vs. save in Mongoose (MongoDB) with Node.js * Follow Mar 3 create vs. save in Mongoose (MongoDB) with Node.js #mongodb #node #javascript #mongoose 13 * Inversion of Control (Design Principle) & Dependency Injection (Design Pattern) * Follow Feb 3 Inversion of Control (Design Principle) & Dependency Injection (Design Pattern) #softwareengineering #javascript #node #nestjs 14 *d NestJS Dependency Injection - Overview * Follow Jan 29 NestJS Dependency Injection - Overview #javascript #webdev #nestjs #node 18 * JavaScript Interview: Run loop without pre-determined method * Follow Jan 4 JavaScript Interview: Run loop without pre-determined method 11 *d HTTP Status Code and HTTP Header in Nest.js Response * Follow Jan 2 HTTP Status Code and HTTP Header in Nest.js Response 23 * Redirection in Nest.js * Follow Jan 1 Redirection in Nest.js 19 reactions 10 comments 3 min read Nest.js Request | Param, Body, Query, Headers, IP * Follow Dec 30 '23 Nest.js Request | Param, Body, Query, Headers, IP 25 *d Nest.js Nested Routing, Wildcard, Request * Follow Dec 30 '23 Nest.js Nested Routing, Wildcard, Request #javascript #node #nestjs 18 *d Nest.js Controller in Easier Terms * Follow Dec 28 '23 Nest.js Controller in Easier Terms #node #nestjs #javascript #typescript 15 reactions * Default NestJS Project Structure * Follow Dec 27 '23 Understanding Default NestJS Project Structure #nestjs #node #javascript #typescript 25 *d Getting Started With Nest.js * Follow Dec 25 '23 Getting Started With Nest.js #nestjs #node #javascript #typescript 30 reactions * Short Polling, Long Polling, Server Sent Events and Web Sockets * Follow Dec 14 '23 Understanding Short Polling, Long Polling, Server Sent Events and Web Sockets #javascript #node #tutorial #beginners 28 * Difference between Module and Package in Node.js * Follow Dec 11 '23 Difference between Module and Package in Node.js #javascript #node #programming #beginners 15 reactions Ad* a Better Way to Replace Array Values in JavaScript! 🚀 * Follow Dec 6 '23 Introducing a Better Way to Replace Array Values in JavaScript! 🚀 #webdev #* 20 * Logical OR (||) vs. Nullish Coalescing (??) For Default Values * Follow Nov 30 '23 Logical OR (||) vs. Nullish Coalescing (??) For Default Values #* #beginners 23 *d How we misuse naming boolean and how they should be named * Follow Nov 28 '23 How we misuse naming boolean and how they should be named #* #typescript 21 reactions 10 comments 1 min read JavaScript's Grouping Methods: Object.groupBy and Map.groupBy 🤯 * Follow Nov 24 '23 JavaScript's Grouping Methods: Object.groupBy and Map.groupBy 🤯 #webdev #* 31 * ✈️ Create JavaScript Function On The Fly * Follow Nov 10 '23 ✈️ Create JavaScript Function On The Fly #webdev #* 13 *d ↩️Clean Coding Tip: Early Return Principle * Follow Nov 9 '23 ↩️Clean Coding Tip: Early Return Principle #webdev #* 21 reactions 5 comments 2 min read Guide To Learn Dayjs * Follow Nov 8 '23 Guide To Learn Dayjs #webdev #javascript #node #react 18 *d Simplifying JavaScript Code with Object Destructuring * Follow Nov 7 '23 Simplifying JavaScript Code with Object Destructuring #webdev #* 16 reactions 7 comments 3 min read JavaScript Variable: Declaration vs. Initialization * Follow Nov 6 '23 JavaScript Variable: Declaration vs. Initialization #* #tutorial 20 * Temporal - A trustworthy alternative for (legacy) moment.js ? * Follow Nov 4 '23 Temporal - A trustworthy alternative for (legacy) moment.js ? #webdev #* 10 *d Moment.js Is Now Legacy Project | Alternatives? * Follow Nov 3 '23 Moment.js Is Now Legacy Project | Alternatives? #webdev #* 64 reactions 35 comments 1 min read JavaScript Variable: Should you choose let, var or const? * Follow Nov 2 '23 JavaScript Variable: Should you choose let, var or const? #webdev #* 18 * OAuth 2.0 - What is it? * Follow Oct 30 '23 OAuth 2.0 - What is it? #security #webdev #beginners #* 2 min read 🔄 Looping Through JavaScript Objects with Different Approaches 🔄 * Follow Oct 27 '23 🔄 Looping Through JavaScript Objects with Different Approaches 🔄 #webdev #* 33 * 𝑫𝒖𝒎𝒃𝒆𝒓 𝒚𝒆𝒕 S𝒎𝒂𝒓𝒕𝒆𝒓 A𝒑𝒑𝒓𝒐𝒂𝒄𝒉 𝒐𝒇 D𝒆𝒃𝒖𝒈𝒈𝒊𝒏𝒈 * Follow Oct 26 '23 𝑫𝒖𝒎𝒃𝒆𝒓 𝒚𝒆𝒕 S𝒎𝒂𝒓𝒕𝒆𝒓 A𝒑𝒑𝒓𝒐𝒂𝒄𝒉 𝒐𝒇 D𝒆𝒃𝒖𝒈𝒈𝒊𝒏𝒈 #* #javascript 11 *d 🔄 Looping Through JavaScript Arrays with Different Approaches 🔄 * Follow Oct 25 '23 🔄 Looping Through JavaScript Arrays with Different Approaches 🔄 #javascript #node #typescript #react 35 reactions 10 comments 2 min read Simplifying JavaScript Code with Array Destructuring * Follow Oct 24 '23 Simplifying JavaScript Code with Array Destructuring #webdev #* 22 * ⚛ The Terrible React Anti-Pattern You Must Avoid * Follow Oct 19 '23 ⚛ The Terrible React Anti-Pattern You Must Avoid #webdev #javascript #react #typescript 19 * JavaScript: Debouncing vs. Throttling * Follow Oct 11 '23 JavaScript: Debouncing vs. Throttling #webdev #* 24 * JavaScript One-Liner To Replace Switch Statement 🚀 * Follow Oct 9 '23 JavaScript One-Liner To Replace Switch Statement 🚀 #webdev #* 34 reactions 14 comments 1 min read Node.js Development Made Easy With Docker 🐳 * Follow Sep 27 '23 Node.js Development Made Easy With Docker 🐳 #node #docker #javascript #tutorial 19 * 🐳 Docker for Nodejs Developers * Follow Sep 22 '23 🐳 Docker for Nodejs Developers #node #javascript #docker #typescript 75 * Right way of cloning JavaScript Objects * Follow Sep 20 '23 Right way of cloning JavaScript Objects #* 14 * 💡 JavaScript Hack: Conditionally Add Properties within Objects * Follow Sep 19 '23 💡 JavaScript Hack: Conditionally Add Properties within Objects #javascript #typescript #node #react 51 reactions 14 comments 2 min read ⚛️ React.js: Avoid Memory Leaks and Race Conditions in API Calls🧹 * Follow Sep 18 '23 ⚛️ React.js: Avoid Memory Leaks and Race Conditions in API Calls🧹 #webdev #javascript #react #typescript 10 *d 🚀 Mastering Asynchronous JavaScript: Choosing Between .then() and async/await * Follow Sep 18 '23 🚀 Mastering Asynchronous JavaScript: Choosing Between .then() and async/await #node #react #javascript #typescript 10 *d Next.js 13 | Redirect To Different URL in Server Component vs. in Client Component * Follow Aug 31 '23 Next.js 13 | Redirect To Different URL in Server Component vs. in Client Component #webdev #typescript #react #nextjs 9 *d Serial Vs. Parallel API calling in JavaScript * Follow Aug 29 '23 Serial Vs. Parallel API calling in JavaScript #* 20 * GitHub Commands For Daily Usage * Follow for hasabTech Aug 27 '23 GitHub Commands For Daily Usage 10 reactions * Promise: .all() vs .allSettled() and .race() vs .any() * Follow Aug 26 '23 JavaScript Promise: .all() vs .allSettled() and .race() vs .any() #* 74 reactions 9 comments 8 min read Understanding Promise in JavaScript * Follow Aug 26 '23 Understanding Promise in JavaScript #webdev 42 * Callback, Callback Hell, Promise Chaining and Async/Await in JavaScript * Follow Aug 24 '23 Callback, Callback Hell, Promise Chaining and Async/Await in JavaScript #javascript #typescript #react #node 61 reactions 6 comments 6 min read Connecting Ubuntu with GitHub (AWS/Azure/GCP) * Follow Aug 19 '23 Connecting Ubuntu with GitHub (AWS/Azure/GCP) #ubuntu #github #development #webdev 7 * Scheduling Jobs with node-cron... In Production Environment * Follow Jan 6 '23 Scheduling Jobs with node-cron... In Production Environment 9 * GitHub - Creating First Repo * Follow for hasabTech May 29 '22 GitHub - Creating First Repo #github #git 8 *d GitHub Setup * Follow for hasabTech May 23 '22 GitHub Setup #github #git 10 *d Git Basics In Nutshell * Follow May 22 '22 Git Basics In Nutshell #github #git 11 * Git - What actually is Version Control System ? * Follow for hasabTech May 22 '22 Git - What actually is Version Control System ? #github #git 10 reactions Add Comment 2 *onsor Neon * ",
    "url": "https://dev.to/shameel"
  },
  {
    "body": "* Follow Report Abuse SHASHI KUMAR KASTURI 404 bio not found Joined on Jun 25, 2024 More info about @shashi_kumar_kasturi Badges * 1 post *owed MYSQL GUI SHASHI KUMAR KASTURI SHASHI KUMAR KASTURI SHASHI KUMAR KASTURI Follow Nov 1 MYSQL GUI #webdev #opensource #productivity #node Add Comment 1 *onsor Neon * ",
    "url": "https://dev.to/shashi_kumar_kasturi"
  },
  {
    "body": "* 0 *ead 0 * 0 * SHASHI KUMAR KASTURI Posted on Nov 1 MYSQL GUI #webdev #opensource #productivity #node MYSQL GUI is a web-based Graphical User Interface designed to streamline database management and accelerate development workflows for MySQL, with planned future support for all major relational databases. This tool enhances user interaction with databases, allowing developers to manage data more efficiently. Features include: Connect to local or remote MySQL databases CRUD operations for databases and tables Multi-tab support for efficient workflows A query editor with autocompletion Dynamic, responsive result grids You can find MYSQL GUI here: 🧑‍💻 GitHub: https://lnkd.in/ePq7Q-JD 📦 npm: https://lnkd.in/en6ZMNFE 🐳 Docker Hub: https://lnkd.in/eXn23a4V Whether you're a developer needing faster database management or someone looking to explore new tools, I’d love for you to try it out! 💡 Open for Contributions: MYSQL GUI is a community-friendly project, and I welcome any ideas, feature suggestions, or contributions that can make it even better! Feel free to check out the repository, open issues, and submit pull requests. Let's make database management easier together! Nodejs #NPM #MySQL #OpenSource #WebDevelopment #DatabaseManagement #Docker #CodingCommunity #DeveloperTools #Innovation #npmPackage Heroku *referenc* Top comm* next Is React-query out of date? This new favorite makes cross-component requests a breeze! Eddie Kimpel - Oct 30 🔥14 game-changing open-source tools every developer should know 🚀 Nevo David - Nov 8 Can Web Development Make You Rich? Tutort Academy - Oct 30 Understanding Exports and Imports in JavaScript Agbo, Daniel Onuoha - Oct 26 SHASHI KUMAR KASTURI Follow Joined Jun 25, * * Consistency is King, and here's why. #softskill* Meme Monday #discuss #watercooler #jokes Heroku *refer* 👋 ** * ",
    "url": "https://dev.to/shashi_kumar_kasturi/mysql-gui-2gbf"
  },
  {
    "body": "* Follow Report Abuse Shivam Singh Freelancer || Web Developer || Cross-Platform App Developer || Blogger Surat, Gujarat, India Joined on Oct 11, 2022 sshivam478@gmail.com https://shivams.vercel.app Two * two years. Got it * One * one year. Got it *. Got it React Awarded to the top React author each week Got it 2 Week Co* 1 We*t *t it More info about @shivams1007 GitHub Repositories nodejs-typescript-express-boilerplate A Node.js Boilerplate with Typescript, Express and Sequelize ORM TypeScript • 3 stars node-electron-boilerplate JavaScript • 1 star sampledata HTML • 1 star personal-portfolio Personal Portfolio using Angular HTML Skills/Languages Angular, Ngrx, Firebase, Electron, Nodejs, TypeScript, JavaScript, HTML, CSS, Mysql, Sqlite, Tailwind Currently learning Blockchain Currently hacking on Open Source Projects, Freelancing Available for Angular, Web Development, Progressive Web App (PWA), Front-end development (HTML, CSS, JS), Backend Development (Nodejs + Express + Mysql), Electron 32 posts published 33 comments written 3 tags followed Pinned Mastering JavaScript Date and Time 📆 * Sep 22 '23 Mastering JavaScript Date and Time 📆 #* #react 25 * 8 Best JavaScript One-Liners * Sep 15 '23 8 Best JavaScript One-Liners #javascript #webdev #react #typescript 73 reactions 26 comments 3 min read Best Practices for TypeScript: Elevate Your Code Quality 🚀 * Aug 24 '23 Best Practices for TypeScript: Elevate Your Code Quality 🚀 #* #node 38 reactions 11 comments 3 min read 7 Advanced TypeScript Concepts Every Developer Should Know * Nov 4 7 Advanced TypeScript Concepts Every Developer Should Know #javascript #typescript #react #webdev 6 reactions Add C*ith Shivam Singh? * Shivam Singh. * What is JavaScript * Apr 10 What is JavaScript #javascript #react #web #webdev 6 react*script The Ultimate Guide 🏆 * Oct 4 '23 Javascript The Ultimate Guide 🏆 #javascript #webdev #tutorial #react 6 *d Javascript Debugging & Error Handling 🐞 * Oct 3 '23 Javascript Debugging & Error Handling 🐞 #javascript #webdev #beginners #react 5 * Mastering the Javascript DOM 🎡 * Oct 2 '23 Mastering the Javascript DOM 🎡 #javascript #webdev #react #tutorial 28 reactions 7 comments 4 min read Power of Javascript Array Methods 🔍🛠️ * Sep 29 '23 Power of Javascript Array Methods 🔍🛠️ #* #react 10 * Javascript Event Listeners 🎧 * Sep 28 '23 Javascript Event Listeners 🎧 #* #react 8 react*script Callbacks, Promises, and Async/Await 🕰️ * Sep 27 '23 Javascript Callbacks, Promises, and Async/Await 🕰️ #javascript #webdev #react #typescript 7 *d Javascript Throttling & Debouncing 🚀 * Sep 26 '23 Javascript Throttling & Debouncing 🚀 #javascript #webdev #react #typescript 7 *d Better API Calls 🎣 * Sep 24 '23 Better API Calls 🎣 #* #react 7 *d Advanced JavaScript Syntax 🔥 * Sep 23 '23 Advanced JavaScript Syntax 🔥 #* #react 15 * 8 Best Chrome Extensions for Developers Must Know * Sep 11 '23 8 Best Chrome Extensions for Developers Must Know #webdev #developer #browser #productivity 11 * 8 Free Public APIs For Developer * Sep 8 '23 8 Free Public APIs For Developer #api #node #webdev #programming 113 reactions 10 comments 3 min read TypeScript Code Quality: 8 Essential Tips for Developers * Sep 8 '23 TypeScript Code Quality: 8 Essential Tips for Developers #typescript #react #node #angular 25 *d 8 HTML Elements You Might Not Know About * Sep 5 '23 8 HTML Elements You Might Not Know About #html #tutorial #webdev #tag 14 *d 8 React Libraries That Will Turn You into a Dev Endgame Hero 🦸‍♀️🦸‍♂️ * Sep 4 '23 8 React Libraries That Will Turn You into a Dev Endgame Hero 🦸‍♀️🦸‍♂️ #react #javascript #typescript #developer 21 *d 8 Best VS Code Extensions For JS & TS Developer * Sep 2 '23 8 Best VS Code Extensions For JS & TS Developer #javascript #typescript #vscode #webdev 7 * 🛠️ 8 Free Tools for the Modern Web Developers of 2023 * Aug 31 '23 🛠️ 8 Free Tools for the Modern Web Developers of 2023 #webdev #javascript #tooling #beginners 6 * Debug Like a Pro: Mastering JS & TS * Aug 25 '23 Debug Like a Pro: Mastering JS & TS #* #productivity 7 * How to use ChatGPT as a Developer * Mar 28 '23 How to use ChatGPT as a Developer #chatgpt #developer #programming #openai * How to work more efficiently with Angular and Node.js * Jan 31 '23 How to work more efficiently with Angular and Node.js #javascript #typescript #node #angular * How to master JavaScript, from beginner to expert * Jan 31 '23 How to master JavaScript, from beginner to expert #javascript #webdev #productiv* SQL Commands Cheat Sheet * Jan 6 '23 SQL Commands Cheat Sheet #sql #mysql #database #cheat 3 * Different Types Of Console Methods You Must Know * Dec 21 '22 Different Types Of Console Methods You Must Know #javascript #react #type*ent 3 min read Javascript Advance Array Methods You Should Know * Dec 14 '22 Javascript Advance Array Methods You Should Know #javascript #tutorial #productivity #typescript 5 * Git Cheat Sheet - 40+ Git Comands You Should Know * Dec 4 '22 Git Cheat Sheet - 40+ Git Comands You Should Know #git #github #programming #command 10 * Scale From Zero to Millions of Users * Nov 25 '22 Scale From Zero to Millions of Users #programming #scalling #systemdesign #computerscience 2 * Nodejs Boilerplate with Typescript and Express * Nov 24 '22 Nodejs Boilerplate with Typescript and Express #nodej #* 6 *d 5 most important features you should know about Javascript ES2022 * Nov 14 '22 5 most important features you should know about Javascript ES2022 #javascript #react #productivity #tutorial 4 reactions 1 comment 3 *onsor Neon * ",
    "url": "https://dev.to/shivams1007"
  },
  {
    "body": "* DEV Showcase Showcasing the best products, companies, and open-source projects on DEV Have something you'd like to showcase? Get in touch. DEV Showcase is a new directory of great companies, products and projects that support DEV. We're working with new and existing partners to add more to the Showcase, so come back soon to see more great tools in the near future. Work #LikeABosch At Bosch, we shape the future by inventing high-quality technologies and services that spark enthusiasm and enrich people’s lives. Pieces for Developers Pieces is your AI-enabled productivity tool designed to supercharge developer efficiency. Cloudinary: The Image and Video API for Developers Cloudinary is an API-first, cloud-based solution that helps automate all processes related to managing images and videos for the web. Stellar Network Stellar makes it possible to create, send, and trade digital representations of all forms of money: dollars, pesos, bitcoin, pretty much anything. * * ",
    "url": "https://dev.to/showcase"
  },
  {
    "body": "* Follow Report Abuse Shrihari Mohan I read documentation first then only stackoverflow. Joined on Aug 25, 2021 shrihari.uma.1999@gmail.com https://shrihari-portfolio.vercel.app/ Work Full Stack Dev Three * three years. Got it * T*. Got it 2 Week Co* 8 Week Writing Streak The st* * 1 We*t *t it More info about @shrihari Organizations DocsAI GitHub Repositories squeeth-portal An alternative UI for squeeths TypeScript • 28 stars shrihari-portfolio TypeScript • 2 stars plants-vs-zombies-api Plants vs Zombies API made with NextTS and Tailwind CSS Fork TypeScript • 1 star 44 posts published 42 comments written 14 tags followed Dynamic open graph images for your website | No code using dynamicog.com S*an Follow Oct 13 Dynamic open graph images for your website | No code using dynamicog.com #webdev #javascript Add C*ith Shrihari Mohan? * Shrihari Mohan. * Generate Dynamic Open Graph Images using Nextjs S*an Follow Jun 16 Generate Dynamic Open Graph Images using Nextjs #nextjs #webdev #* 3 min read How to test open graph meta tags locally ? S*an Follow Feb 18 How to test open graph meta tags locally ? #webdev #seo 9 * Cloudflare Pages NextJs + D1 Database ᐧ My experience developing sharejson S*an Follow Feb 3 Cloudflare Pages NextJs + D1 Database ᐧ My experience developing sharejson #nextjs #webdev #development 8 * Funny Developing Mistakes I Wasted Hours on S*an Follow Aug 27 '23 Funny Developing Mistakes I Wasted Hours on 5 *d MongoDB Basic design patterns and 6 rules of thumb - in 3 mins S*an Follow Aug 16 '23 MongoDB Basic design patterns and 6 rules of thumb - in 3 mins Add Comment 3 min read How Do GPT-3.5, Bing, and Bard Explain Promises to a 5-Year-Old? S*an Follow Jul 30 '23 How Do GPT-3.5, Bing, and Bard Explain Promises to a 5-Year-Old? #* #creativity * The Strong World of Developers: Trying, Catching, and Moving On S*an Follow Jul 6 '23 The Strong World of Developers: Trying, Catching, and Moving On #story #funny #philosophy #humour Add Comment 2 min read Cancel repeated requests in Angular with interceptors S*an Follow Apr 16 '23 Cancel repeated requests in Angular with interceptors #webdev #javascript #angular #tutorial 3 * Redis + 🐂 Bull = Easy Background Jobs in nodeJs S*an Follow Apr 15 '23 Redis + 🐂 Bull = Easy Background Jobs in nodeJs #node #* * Node.js Cron: Handling Overlapping Tasks Like a Noob S*an Follow Apr 6 '23 Node.js Cron: Handling Overlapping Tasks Like a Noob #node #* * Beyond Coding : The DevOps Tasks I do as a web dev. S*an Follow Mar 26 '23 Beyond Coding : The DevOps Tasks I do as a web dev. #webdev #programming #devops #* 2 min read Glogg your way through mountains of logs S*an Follow Mar 19 '23 Glogg your way through mountains of logs #webdev #tooling #devops #* 2 min read DBeaver + SSH + Bastion Host + Google Authenticator : 🤝How to connect S*an Follow Mar 5 '23 DBeaver + SSH + Bastion Host + Google Authenticator : 🤝How to connect #webdev #devops #database #tooling 2 * 🚀 Angular ng-templates: Crafting Reusable templates with Ease S*an Follow Feb 14 '23 🚀 Angular ng-templates: Crafting Reusable templates with Ease #webdev #javascript #angular #* 3 min read How I Built a chrome extension that finds Ghost CSS : Ghost-CSS-Detector S*an Follow Jan 11 '23 How I Built a chrome extension that finds Ghost CSS : Ghost-CSS-Detector #webdev #javascript #tutorial #css Add Comment 3 min read Finding Ghost elements with Ghost CSS ! S*an Follow Jan 7 '23 Finding Ghost elements with Ghost CSS ! #web*rial 2 *d Utilizing Chat GPT as a Web Developer S*an Follow Jan 1 '23 Utilizing Chat GPT as a Web Developer #* #productivity 4 *d Sign out of all tabs if logged out from one - Angular & Storage Events S*an Follow Dec 24 '22 Sign out of all tabs if logged out from one - Angular & Storage Events #javascript #webdev #angular #* 3 min read OAUTH for beginners and Key Terms. S*an Follow Dec 9 '22 OAUTH for beginners and Key Terms. #programming #webdev #javascript #tutorial * Print Particular part of the screen easily when using CMD/CTRL + P in HTML/CSS S*an Follow Nov 20 '22 Print Particular part of the screen easily when using CMD/CTRL + P in HTML/CSS #webdev #* 7 *d How I Got My First Full-Stack Developer Job as a Fresher in a Start-Up! S*an Follow Nov 12 '22 How I Got My First Full-Stack Developer Job as a Fresher in a Start-Up! #* #career 4 *d You may have missed these HTML Tags/Tricks. S*an Follow Oct 30 '22 You may have missed these HTML Tags/Tricks. #webdev #html #css #* 3 min read Navbar with background blur! Aesthetic look in 2 lines of code . S*an Follow Oct 29 '22 Navbar with background blur! Aesthetic look in 2 lines of code . #webdev #javascript #html #programming 37 reactions 6 comments 2 min read Why Array Index Starts with 0 , A pointers magic ! S*an Follow Oct 25 '22 Why Array Index Starts with 0 , A pointers magic ! #programming #c #beginners #tutorial 2 * Two things that make my Terminal experience awesome 🚀 in Mac/Linux S*an Follow Sep 18 '22 Two things that make my Terminal experience awesome 🚀 in Mac/Linux #productivity #javascript #linux #webdev 7 * You ain't a beginner developer no more! S*an Follow Aug 31 '22 You ain't a beginner developer no more! #webdev #programming #javascript #beginners 11 *d Utilities I use for web development. 🗿 S*an Follow Aug 7 '22 Utilities I use for web development. 🗿 #javascript #web3 #typescript #programming 8 *d The Chrome Dev Tool you are missing : FEAT Recorder S*an Follow Jul 31 '22 The Chrome Dev Tool you are missing : FEAT Recorder #javascript #* 20 * 5.1 * 100 != 510 🤯 , Why you have to be careful with Doubles and Floats ! S*an Follow Jul 23 '22 5.1 * 100 != 510 🤯 , Why you have to be careful with Doubles and Floats ! #* #java 8 *d For those who wish to have a better resume. Just Contribute to this. S*an Follow Jul 17 '22 For those who wish to have a better resume. Just Contribute to this. #discuss #beginners #angular #webdev 11 *d Dear Only Dark Mode Users ! FEAT : Light Mode 🔆 S*an Follow Jul 17 '22 Dear Only Dark Mode Users ! FEAT : Light Mode 🔆 #productivity #programming #webdev 10 *d A custom right click menu on Angular : FEAT PrimeNg S*an Follow Jul 10 '22 A custom right click menu on Angular : FEAT PrimeNg #* #html 4 *d Top UI Frameworks for Angular and react. S*an Follow Jul 3 '22 Top UI Frameworks for Angular and react. #webdev #css #react #angular 12 * Things I do to be motivated towards work 🥳 S*an Follow Jun 25 '22 Things I do to be motivated towards work 🥳 #motivation #webdev #productivity #devjournal 10 *d Things I changed in Ubuntu for productivity and improvements S*an Follow Jun 19 '22 Things I changed in Ubuntu for productivity and improvements #linux #webdev #productivity #ubuntu 28 reactions 8 comments 3 min read Don't use js functions to format your text on HTML in Angular. Instead use this Pipe. S*an Follow Jun 12 '22 Don't use js functions to format your text on HTML in Angular. Instead use this Pipe. #webdev #angular #html #*nt 2 min read 🤓 Handle Asynchronous errors on expressJs without try/catch ! S*an Follow Jun 11 '22 🤓 Handle Asynchronous errors on expressJs without try/catch ! #webdev #javascript #node #beginners 13 * 🙅🏼‍♀️ Mistakes I made when I started Nodejs + MongoDb S*an Follow Jun 4 '22 🙅🏼‍♀️ Mistakes I made when I started Nodejs + MongoDb #webdev #javascript #node #* 3 min read 😑 Mistakes I made when I started with Angular (Applies to any web framework) S*an Follow May 27 '22 😑 Mistakes I made when I started with Angular (Applies to any web framework) #javascript #webdev #angular #beginners 17 * 🙅🏽‍♂️ Don't use AWAIT inside FOREACH S*an Follow May 21 '22 🙅🏽‍♂️ Don't use AWAIT inside FOREACH #* #beginners 11 *d Don't Forget to do this if you're using MongoDB S*an Follow May 12 '22 Don't Forget to do this if you're using MongoDB #mongodb #node #database 5 * Struggling with finding colors and layouts for your web projects ? Check out these sites S*an Follow May 1 '22 Struggling with finding colors and layouts for your web projects ? Check out these sites #ux #design #webdev #uiweekly 21 * Top PWA apps I use Everyday! ( Laptop ) S*an Follow Mar 5 '22 Top PWA apps I use Everyday! ( Laptop ) #pwa #productivity #webdev #socialmedia 3 * * ",
    "url": "https://dev.to/shrihari"
  },
  {
    "body": "* Follow Report Abuse Sibi🥱 Experienced backend web developer skilled in JavaScript, Vue 3, Node.js. Proficient in MongoDB, PostgreSQL. Ethical hacking enthusiast. Chennai,India Joined on Aug 12, 2023 Pronouns He/Him Work Still Studying 😶‍🌫️ More info about @sibichandru-rajendran Badges One * one year. Got it * 1 We*t * Skills/Languages JavaScript Vue 3 MongoDB PostgreSQL Currently learning Python, Django & Networks. Currently hacking on A Full stack Blog application using node+Vue3, Walking through TryHackMe Available for Ready to collaborate with people who are interested in backend development and Cyber Security 3 posts published 2 comments written 13 tags followed Must know concepts of JS to make life simple Sibi🥱 Sibi🥱 Sibi🥱 Follow Nov 3 '23 Must know concepts of JS to make life simple #webdev #javascript #* C*ith Sibi🥱? * Sibi🥱. * Mastering A Framework Sibi🥱 Sibi🥱 Sibi🥱 Follow Aug 22 '23 Mastering A Framework #webdev #beginners #* 2 min read Building Backends with Node.js and MongoDB Sibi🥱 Sibi🥱 Sibi🥱 Follow Aug 18 '23 Building Backends with Node.js and MongoDB #beginners #javascript #webdev #node 2 * * ",
    "url": "https://dev.to/sibichandru-rajendran"
  },
  {
    "body": "* Software Comparisons — What are the differences, pros and cons? This is a list of top posts that members of the community have created. These are the posts folks have generally continued coming back to over and over again, so we created this page to make some of these more discoverable. Hopefully you better understand some of the differences here once you've found the guide you need! Redux vs Context API: When to use them Declarative vs imperative Using then() vs Async/Await in JavaScript Kubernetes Ingress vs Service Mesh Create react app vs Vite Callbacks vs Promises Constructors in Python (init vs __new) When to Use Server-Side rendering vs Static Generation in Next.js CSS Modules vs CSS-in-JS. Who wins? append VS appendChild Cloud Run vs App Engine: a head-to-head comparison using facts and science Logical OR (||) vs Nullish Coalescing Operator (??) in JavaScript Server-Side Rendering (SSR) Vs Client-Side Rendering (CSR) Asp Net Core - Rest API Authorization with JWT (Roles Vs Claims Vs Policy) - Step by Step Python GUI, PyQt vs TKinter web3.js vs ethers.js: a Comparison of Web3 Libraries Cookies vs Local Storage vs Session Storage React Router V5 vs V6 LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End TailwindCSS vs Styled-Components in ReactJs WebSockets vs Long Polling JSX.Element vs ReactElement vs ReactNode useState() vs setState() - Strings, Objects, and Arrays Methods vs Computed in Vue React: class components vs function components Supabase Vs Firebase Pricing and When To Use Which for loop vs .map() for making multiple API calls 🤝 Promise.allSettled() VS Promise.all() in JavaScript 🍭 React vs Vue vs Angular vs Svelte Azure Artifacts vs Build Artifacts vs Pipeline Artifacts: Difference EXPLAINED! When to use Svelte vs SvelteKit vs Sapper? C#, Task.WhenAll vs Parallel.ForEach Map vs MergeMap vs SwitchMap CSS 3 VS Tailwind CSS Serverless Framework vs SAM vs AWS CDK Angular: Setters vs ngOnChanges - which one is better? Interview question: heap vs stack (C#) JS interview in 2 minutes / Static vs Dynamic typing DynamoDB Scan Vs Query Operation Experiment Result componentWillMount() vs componentDidMount() Anonymous Functions vs Named Functions vs Arrow Functions Flexbox - Align Items vs Align Content. Vue vs React: What to choose in 2021? Laravel Jetstream vs Breeze vs Laravel/ui Linux Vs Windows - Why Linux Is Better For Programming & Web Dev (A newbie experience) Fibonacci: Recursion vs Iteration TypedDict vs dataclasses in Python — Epic typing BATTLE! SSR vs CSR Callback vs Promises vs Async Await Poetry vs pip: Or How to Forget Forever \"requirements.txt\" Cheat Sheet for Beginners Cypress vs WebdriverIO | Which one to pick? Type Aliases vs Interfaces in TypeScript PyQt vs Tkinter (Spanish) Django vs Mern Which one to choose? YYYY vs yyyy - The day the Java Date Formatter hurt my brain JavaScript - debounce vs throttle ⏱ Go: Fiber vs Echo (a developer point) RxJS debounce vs throttle vs audit vs sample — Difference You Should Know Laravel vs Node.js - Which One Is The Best Back-End To Choose In 2021? Composer update Vs Composer Install Concurrency in modern programming languages: Rust vs Go vs Java vs Node.js vs Deno vs .NET 6 Pure vs Impure Functions Git: Theirs vs Ours Angular vs Blazor? A decision aid for web developers in 2022 APIView vs Viewsets PyQt vs Pyside Eager Loading VS Lazy Loading in SQLAlchemy React vs Vue: Popular Front end frameworks in 2022 OpenAPI spec (swagger) v2 vs v3 apt update vs apt upgrade: What's the difference? Framework vs library vs package vs module: The debate What Should You Put in a Constructor vs ngOnInit in Angular Javascript vs memes Ionic vs React Nactive vs Flutter Selenium vs The World Faster Clicker Redux VS React Context: Which one should you choose? Styled components vs Emotion js: A performance perspective Git Submodules vs Monorepos MongoDB: Normalization vs Denormalization PUT vs PATCH & PUT vs POST Laravel vs ASP.NET Framework | Which is Better For Your Project? The last-child vs last-of-type selector in CSS Moq vs NSubstitute - Who is the winner? CSS solutions Battle: Compile time CSS-in-JS vs CSS-in-JS vs CSS Modules vs SASS querySelector vs getElementById Docker CMD vs ENTRYPOINT React Virtualization - react-window vs react-virtuoso The Development vs Production Environments npm vs npx - which to use when? Immediate vs eventual consistency Fleet vs VSCode Laravel breeze vs Jetstream Pug vs EJS? Join vs includes vs eager load vs preload Require vs Assert in Solidity Centralized vs Distributed Systems in a nutshell PyQt vs Tkinter (German) Flutter vs React Native Comparison - Which Use for Your Project in 2022 insertAdjacentHTML vs innerHTML Moment.js vs Luxon Generics vs Function Overloading vs Union Type Arguments in TypeScript Sass vs Scss What’s the difference: A/B Testing VS Blue/Green Deployment? Publisher Subscriber vs Observer pattern with C# VSCode vs Vim Persistent vs Non-Persistent Connections | Creating a Multiplayer Game Server - Part 2 Spread VS Rest Operator package.json vs package-lock.json: do you need both? Double Quotes vs Single Quotes in PHP RxJS operators: retry vs repeat? CAP Theorem: Availability vs consistency Scaling Airflow – Astronomer Vs Cloud Composer Vs Managed Workflows For Apache Airflow MySQL vs MySQLi vs PDO Performance Benchmark, Difference and Security Comparison For PHP devs - PHP Storm vs VSCode Difference Between Message vs Event vs Command Document vs Relational Databases IntelliJ vs Eclipse vs VSCode CSS position fixed vs sticky Telegraf VS Node-Telegram-Bot-API Flatpak vs Snaps vs AppImage vs Packages - Linux packaging formats compared Pytest vs Cypress: A fair fight in UI testing? Inline vs Inline-block vs Block Logging vs Tracing: Why Logs Aren’t Enough to Debug Your Microservices Solidity Gas Optimizations pt.1 - Memory vs Storage Bicep vs ARM templates Nest.js vs Express.js Retry vs Circuit Breaker Custom react hooks vs services Global vs Local State in React The What, Why, and When of Mono-Lambda vs Single Function APIs Frontend vs Backend: Which One Is Right For You? React vs Preact vs Inferno * Library vs Framework? Compiling vs Transpiling npm vs yarn vs pnpm commands cheatsheet CPU Bound vs I/O Bound DataBindingUtil.inflate vs View Binding Inflate Includes() vs indexOf() in JavaScript useEffect vs useLayoutEffect: the difference and when to use them Ruby Modules: include vs extend vs prepend OOP vs FP with Javascript CSP vs Actor model for concurrency Rust Concept Clarification: Deref vs AsRef vs Borrow vs Cow Creating a countdown timer RxJS vs Vanilla JS Asynchronous vs Synchronous Programming SOAP vs REST vs gRPC vs GraphQL PyQT vs wxPython: Which GUI module for your project? CSS Drop Shadow vs Box Shadow Infrastructure-as-Code vs Configuration Management TypeScript: type vs interface Head recursion Vs Tail recursion Dev.to VS Hashnode VS Medium: Pick ONE Classes vs Functional components in React The Battle of the Array Titans: Lodash vs Vanilla - An Experiment AWS EventBridge vs S3 Notification Inheritance Vs Delegation JavaScript vs JavaScript. Fight! Interface vs Type in Typescript setTimeout vs setImmediate vs process.nextTick Kotlin vs Python Kotlin Multiplatform vs Flutter: Which One to Choose for Your Apps Supervised Learning vs Unsupervised Learning React Hooks API vs Vue Composition API, as explored through useState DEV VS Hashnode VS Medium: Where Should You Start Your Tech Blog Implementing React Routes (Part -2) Link Vs NavLink Vanilla CSS VS CSS Frameworks Postman vs Insomnia: which API testing tool do you use? Serif vs Sans-serif vs Monospaced Getting started with fp-ts: Either vs Validation Typescript Implicit vs Explicit types CWEs vs OWASP top 10? Understanding Offset vs Cursor based pagination Material Design 1 vs Material Design 2 Signed vs Unsigned Bit Integers: What Does It Mean and What's The Difference? default vs null - which is a better choice, and why? Summary of Flutter vs Tauri SpringBoot2 Blocking Web vs Reactive Web JSON-RPC vs REST for distributed platform APIs Explain RBAC vs ACL Like I'm Five .map() vs .forEach() Difference between Dialogflow CX vs Dialogflow ES API keys vs JWT authorization – Which is best? find() vs filter() Snake Case vs Camel Case AWS vs OCI Object Storage options and comparison MAUI XAML vs MAUI Blazor Pointer vs Reference in C++: The Final Guide Comparing reactivity models - React vs Vue vs Svelte vs MobX vs Solid vs Redux Frontend vs Backend, which do you prefer and why? Remix vs Next.js: A Detailed Comparison NodeJS vs Apache performance battle for the conquest of my ❤️ ⚔️ Functional vs Object Oriented vs Procedural programming Lazy vs Eager Initialization Laravel ORM vs Query Builder vs SQL: SPEED TEST! Concurrency in Go vs Erlang TypeScript ANY vs UNKNOWN—A Deep Dive MVC vs MVP vs MVVM Design Patterns GNOME vs KDE Plasma Database Views vs Table Functions Server Side Rendering vs Static Site Generation vs Incremental Static Regeneration Understanding Rendering in Web Apps: SPA vs MPA 'any' vs 'unknown' in TypeScript 👀 TypeORM - Multiple DB Calls vs Single DB Call JS array vs object vs map Benchmarking Python JSON serializers - json vs ujson vs orjson textContent VS innerText Web2 vs Web3 Opinion: Architect VS Engineer VS Developer Jenkins pipeline: agent vs node? Hibernate Naming Strategies: JPA Specification vs Spring Boot Opinionation Pyqt vs PySide (Spanish) Unique Identifiers: UUID vs NanoID A comparison of state management in React with Mobx vs State lifting Meteor vs Next? A brutally honest answer Git-Flow vs Github-flow Set vs Array Python Packaging: sdist vs bdist JavaScript array methods: Mutator VS Non-mutator and the returning value Uint vs Int. Qual a diferença em Go? Understanding Rendering in Web Apps: CSR vs SSR Flask vs Bottle Web Framework Moment.js vs Intl object PyQt vs Kivy Web3: Truffle VS Hardhat VS Embark VS Brownie The one about CSS vs CSS in JS React Hooks vs Svelte - Why I chose Svelte? TaskEither vs Promise looking for answers !, strapi vs nest js for my next project SOP vs CORS? Pagination in an API: page number vs start index SVG sprites vs CSS background image for multiple instances of icons Javascript Streams vs Generators JS Date vs Moment.js: A Really Simple Comparison AMQP vs HTTP return Task vs return await Task Arrow Function vs Function Front-end vs Back-end, and Static vs Dynamic Websites setImmediate() vs setTimeout() vs process.nextTick() Solace PubSub+ vs Kafka: The Basics Agency VS Product Company: Which One's Right for You? Stateless vs Stateful - Which direction should you take? Clean Architecture vs Vertical Slice Architecture Functional programming vs object oriented programming Using Array.prototype.includes() vs Set.prototype.has() to filter arrays Hot vs Cold Observables Reassignment vs Mutability Database (Schema) migration to Kubernetes - initContainers vs k8s jobs - Gatsby vs Next.JS - What, Why and When? Which is faster: obj.hasOwnProperty(prop) vs Object.keys(obj).includes(prop) React Fragment VS Div Happy coding! * * ",
    "url": "https://dev.to/software-comparisons"
  },
  {
    "body": "* Follow Report Abuse Sooraj (PS) Web Developer - HTML, CSS, JS, TS, NodeJS, ReactJS, SvelteJS, Firebase, AngularJS, Bootstrap, Tailwind Joined on Jul 11, 2020 soorajsnblaze333@gmail.com http://sooraj-portfolio.vercel.app/ Education Masters in Computer Science and Engineering Four * four years. Got it Frontend Challenge Completion Badge Awarded for completing at least one prompt in a Frontend Challenge. Thank you for participating! 💖 Got it * Three * three years. Got it 1 We*t 2 comme**. ** * * * More info about @soorajsnblaze333 Organizations Skcript GitHub Repositories tooltip-sequence A simple step by step tooltip helper for any site JavaScript • 307 stars react-widget-ts-webpack-starter TypeScript • 6 stars react-javascript-bootstrap-starter A simple starter template for React Javascript with Bootstrap JavaScript • 5 stars effect-js A simple collection of fun and interactive web effects for your page JavaScript • 4 stars react-webpack-ts-starter A simple starter template for React Typescript Webpack JavaScript • 4 stars Skills/Languages HTML, CSS, Vanilla JS, Java, C, Python. Node JS, React JS, Svelte JS, Angular JS, Sails JS. Firebase. Bootstrap, Tailwind. Currently learning DSA, Rust, JS, Performance Optimisations & New concepts in Web Development Currently hacking on HelloNext, Modules for easy web development, Web Plugin called 'Tooltip-sequence' Available for I am available for all kinds of javascript contributions 26 posts published 77 comments written 39 tags followed Pinned Simple Javascript Modules - Local Storage Module * Jun 26 '21 Simple Javascript Modules - Local Storage Module #todayilearned #javascript #webdev #beginners 277 reactions 17 comments 3 min read CSS Art: June (The peaceful days) * Jun 10 CSS Art: June (The peaceful days) #frontendchallenge #devchallenge #css 28 reactions 5 comments *h Sooraj (PS)? * Sooraj (PS). * Queuing Rest Apis using JavaScript * Apr 10 '23 Queuing Rest Apis using JavaScript #discuss #* 15 * Space Physics * May 30 '21 Space Physics #javascript #canvas #physics #math 14 * Animated Buttons using Javascript (GSAP) - 1 * Nov 25 '20 Animated Buttons using Javascript (GSAP) - 1 #showdev #javascript #webdev #todayilearned 24 * Web-App using HTML, JS & Firebase - Part 2 * Nov 10 '20 Web-App using HTML, JS & Firebase - Part 2 #beginners #html #javascript #tutorial 20 *d Make it flash ⚡️ in HTML Canvas * Oct 15 '20 Make it flash ⚡️ in HTML Canvas #showdev #html #javascript #codepen 37 reactions 7 comments 2 min read Web-App using HTML, JS & Firebase - Part 1 * Oct 8 '20 Web-App using HTML, JS & Firebase - Part 1 #beginners #firebase #javascript #tutorial 67 reactions 5 comments 11 min read Getting Started with Svelte JS * Oct 5 '20 Getting Started with Svelte JS #beginners #javascript #tutorial #svelte 43 * Asynchronous data fetching using React Query ⚛️ * Sep 26 '20 Asynchronous data fetching using React Query ⚛️ #react #javascript #webdev #tutorial 101 * Finite State Machines in React JS using xState JS * Sep 23 '20 Finite State Machines in React JS using xState JS #react #javascript #tutorial #xstate 67 reactions 8 comments 6 min read How to create a Simple Physics Engine in Javascript - Part 2 * Sep 21 '20 How to create a Simple Physics Engine in Javascript - Part 2 #showdev #javascript #tutorial #webdev 83 reactions 7 comments 8 min read How to create a Simple Physics Engine in Javascript - Part 1 * Sep 20 '20 How to create a Simple Physics Engine in Javascript - Part 1 #showdev #javascript #tutorial #webdev 104 reactions 8 comments 7 min read Using Figma to create My Personalised Github Cover Image ✏️ * Sep 17 '20 Using Figma to create My Personalised Github Cover Image ✏️ #showdev #github #ux 26 * Simple way to use the github REST api * Sep 16 '20 Simple way to use the github REST api #javascript #beginners #webdev #github 47 reactions 5 comments 3 min read Make it Rain 🌧 in HTML Canvas * Sep 14 '20 Make it Rain 🌧 in HTML Canvas #showdev #html #javascript #codepen 84 reactions 13 comments 2 min read Build a \"Pluggable\" Widget for your Web App * Sep 12 '20 Build a \"Pluggable\" Widget for your Web App #react #javascript #webdev #tutorial 114 reactions 7 comments 6 min read Generic Snippets - DOM Element Creation * Sep 9 '20 Generic Snippets - DOM Element Creation #html #javascript #beginners #productivity 39 * iPhone 7 animated replica using HTML, CSS and Javascript * Sep 7 '20 iPhone 7 animated replica using HTML, CSS and Javascript #showdev #html #javascript #css 66 reactions 8 comments 2 min read New version for Tooltip-Sequence 1.0.3 🔥 * Sep 5 '20 New version for Tooltip-Sequence 1.0.3 🔥 #showdev #javascript #webdev #productivity 9 * React TS - Webpack - Starter kit * Sep 2 '20 React TS - Webpack - Starter kit #react #typescript #webpack #beginners 13 *d React JS - Bootstrap Starter kit * Aug 30 '20 React JS - Bootstrap Starter kit #react #beginners #javascript #webdev 23 *d Webpack with React Typescript * for Skcript Aug 23 '20 Webpack with React Typescript #react #beginners #webpack #typescript 11 * Tooltip-sequence v0.2.2 🔥 * Aug 17 '20 Tooltip-sequence v0.2.2 🔥 #showdev #javascript #ui #webdev 7 *d Tooltip Sequence * Aug 11 '20 Tooltip Sequence #showdev #javascript #productivity #webdev 9 *d Web Animation With GSAP * for Skcript Aug 5 '20 Web Animation With GSAP #javascript #animation #css 14 reactions 1 comment 6 *onsor Neon * ",
    "url": "https://dev.to/soorajsnblaze333"
  },
  {
    "body": "* Follow Report Abuse Jameer Khan Author at StackBlogger. A tech blog for tips and tricks about programming. Noida Joined on Oct 8, 2021 https://stackblogger.com Work Author at StackBlogger More info about @stackblogger Badges Three * three years. Got it * T*. ** Skills/Languages JavaScript, Angular, Node.Js, Express.Js, IoT, AWS Currently learning JavaScript Available for I am available to discuss anything about JavaScript and its Frameworks. 17 * 7 tags followed How to create AWS Instance with Terraform * Jul 29 How to create AWS Instance with Terraform #aws #terraform #ec2 #devops Add Comment 4 min read Custom Format Date Time in MS SQL * Jan 27 '23 Custom Format Date Time in MS SQL #sql #programming #database #webdev Add Comment 2 min read Extract Metadata Information From URL | JavaScript * Jul 31 '22 Extract Metadata Information From URL | * #typescript #programming * FastifyError- Request body is too large * Jul 26 '22 FastifyError- Request body is too large #node #webdev #javascript #* 2 min read Angular and RxJS: Refresh a Component From Another * May 12 '22 Angular and RxJS: Refresh a Component From Another #angular #rxjs #webdev #*t 4 min read Finding Duplicate Documents in MongoDB Collection * Jan 18 '22 Finding Duplicate Documents in MongoDB Collection #mongodb #webdev #node #*t 3 min read Improve Performance Using Web Workers | JavaScript * Jan 18 '22 Improve Performance Using Web Workers | * #* 3 min read Best Way to Create Dynamic Components in Angular * Nov 17 '21 Best Way to Create Dynamic Components in Angular #angular #webdev #programming #typescript 15 *d Speed Up Website With AWS S3 and CloudFront * Nov 15 '21 Speed Up Website With AWS S3 and CloudFront #webdev #programming #aws #s3 6 * Best Sites To Learn JavaScript for FREE * Nov 12 '21 Best Sites To Learn JavaScript for FREE #* #* 4 min read Benefits Of Using Pipe Over Function In Angular * Oct 31 '21 Benefits Of Using Pipe Over Function In Angular #angular #webdev #angularpipe #stackblogger 11 *d TOP 100+ DoFollow Backlink Sites | High PR Free Backlink Sites 2021 * Oct 25 '21 TOP 100+ DoFollow Backlink Sites | High PR Free Backlink Sites 2021 #backlinks #socialbookmarking #profilesubmission #stackblogger 9 *d How To Bypass Google reCaptcha Using Node.Js * Oct 17 '21 How To Bypass Google reCaptcha Using Node.Js #node #2captcha #bypasscaptcha #recaptcha 5 *d Angular 12 and RxJS: Infinite Scroll With API * Oct 16 '21 Angular 12 and RxJS: Infinite Scroll With API #angular #rxjs #infinitescroll #observable 9 *d 5 Best Google Charts to Use in Angular * Oct 14 '21 5 Best Google Charts to Use in Angular #angular #googlecharts #linechart #piechart 3 * Real World Examples of 5 Common Observable Operators * Oct 8 '21 Real World Examples of 5 Common Observable Operators #angular #stackblogger #rxjs #observable * RxJS forkJoin: Definition and Real World Uses * Oct 8 '21 RxJS forkJoin: Definition and Real World Uses #angular #rxjs #forkjoin #stackblogger 2 * * ",
    "url": "https://dev.to/stackblogger"
  },
  {
    "body": "* API Follow Hide Application Programming Interface Create Post tag moderators 7195 Posts Published Older #api *19 *. * .NET Core 7 and SignalR Vishw Patel Vishw Patel Vishw Patel Follow Nov 10 * .NET Core 7 and SignalR #dotnet #api #dotnetcore Add Comment 5 min read Analisando os requisitos da melhor API de tabela de campeonato que você já viu anastacio_dev anastacio_dev anastacio_dev Follow Nov 9 Analisando os requisitos da melhor API de tabela de campeonato que você já viu #api #java #spring #ai Add Comment 2 min read How to Generate and Display Swagger (OpenAPI) Documentation for Your Laravel API * Sospeter Mong'are Follow Nov 9 How to Generate and Display Swagger (OpenAPI) Documentation for Your Laravel API #api #laravel #webdev #openapi * REST APIs - A Guide for the Impatient Camdyn Rasque Camdyn Rasque Camdyn Rasque Follow Nov 9 Understanding REST APIs - A Guide for the Impatient #rest #api #* 5 min read The Difference Between Basic Auth and Bearer Token: Which API Tool Should You Choose? Philip Philip Philip Follow Nov 8 The Difference Between Basic Auth and Bearer Token: Which API Tool Should You Choose? #api #apiauthentication #apisecurity #http * Embarking on the Digital Frontier: Decoding the World of Banking Applications Dmitrii Dmitrii Dmitrii Follow Nov 8 Embarking on the Digital Frontier: Decoding the World of Banking Applications #webdev #banking #api #coding 1 comment 6 min read Migrando Aplicativos de uma Nuvem para Outra - Parte 1 rafaelbonilha rafaelbonilha rafaelbonilha Follow Nov 7 Migrando Aplicativos de uma Nuvem para Outra - Parte 1 #cloud #security #api #migra* to Implement Search and Filtering in APIs🦉 Daniel Ma Daniel Ma Daniel Ma Follow Nov 7 How to Implement Search and Filtering in APIs🦉 #api #apidebug #apidocumentation #mockapi Add Comment 5 min read Top Strategies to Successfully Sell Your API Dawid Makowski Dawid Makowski Dawid Makowski Follow Nov 8 Top Strategies to Successfully Sell Your API #webdev #programming #api #learning 3 * Greatly improve your Health Endpoint with these tips! Luca Luca Luca Follow Nov 6 Greatly improve your Health Endpoint with these tips! #api #programming #django #security * Programmatically monitor your API from your iPhone Luca Luca Luca Follow Nov 6 Programmatically monitor your API from your iPhone #ios #api #programming #django Add Comment 1 min read Save 50% of your Django development time with this tool Luca Luca Luca Follow Nov 6 Save 50% of your Django development time with this tool #django #restapi #programming #api Add Comment 1 min read Project Blog : Intelligent Writing Assistant Odinaka Robert Nnamani Odinaka Robert Nnamani Odinaka Robert Nnamani Follow Nov 6 Project Blog : Intelligent Writing Assistant #webdev #programming #devops #api 1 reaction 2 comments 4 min read It`s time to ditch the Thunder Client VSCode Extension! 💥 Patrick Patrick Patrick Follow Nov 7 It`s time to ditch the Thunder Client VSCode Extension! 💥 #vscode #restapi #offline #api Add Comment 2 min read How to quickly add API Key validation to a Node Express API honest will honest will honest will Follow Nov 5 How to quickly add API Key validation to a Node Express API #api #express #middleware #apikeys 3 *d Clear illustration of how API Token Authentication works Daichi Izushi Daichi Izushi Daichi Izushi Follow Nov 5 Clear illustration of how API Token Authentication works #laravel #php #api #authentication Add Comment 7 min read Mastering Server-Sent Events (SSE) with Python and Go for Real-Time Data Streaming 🚀 Philip Philip Philip Follow Nov 5 Mastering Server-Sent Events (SSE) with Python and Go for Real-Time Data Streaming 🚀 #sse #http #javascript #api Add Comment 5 min read AWS Api GateWay & AWS Lambda Interview Question * Nov 5 AWS Api GateWay & AWS Lambda Interview Question #aws #lambda #api #interviewpreparation Add Comment 9 min read ONLYOFFICE Docs 8.2 for developers: PDF collaborative editing, revamped interface, API updates, PHP integration SDK Kseniya Fedoruk Kseniya Fedoruk Kseniya Fedoruk Follow for ONLYOFFICE Nov 5 ONLYOFFICE Docs 8.2 for developers: PDF collaborative editing, revamped interface, API updates, PHP integration SDK #news #onlyoffice #opensource #api Add Comment 5 min read Access Free Stock Market API for Live Market Rates Brandon Brandon Brandon Follow Nov 5 Access Free Stock Market API for Live Market Rates #javascript #api Add Comment 3 min read Api Hub Acaplah Acaplah Acaplah Follow Nov 5 Api Hub #beginners #webdev #api #laravel Add Comment 1 min read The DevOps Guide to WAF API Gateways yayabobi yayabobi yayabobi Follow Nov 4 The DevOps Guide to WAF API Gateways #cybersecurity #api Add Comment 8 min read 📝 *! * Nov 4 📝 *, * Add Comment 2 min read Securing REST APIs: A Comprehensive Guide to NTLM Authentication Philip Philip Philip Follow Nov 4 Securing REST APIs: A Comprehensive Guide to NTLM Authentication #restapi #ntlm #api #apitesting Add Comment 4 min read Streamline Your API Design Workflow: Using Schemas with EchoAPI Philip Philip Philip Follow Nov 4 Streamline Your API Design Workflow: Using Schemas with EchoAPI #api #uidesign #json #echoapi Ad* Rate Keeper: A Compact Utility for Robust Rate Limiting skllzrmy skllzrmy skllzrmy Follow Nov 4 Introducing Rate Keeper: A Compact Utility for Robust Rate Limiting #webdev #javascript #api #ratelimit Add Comment 3 min read Axios interceptor + React JS ramadhan.dev ramadhan.dev ramadhan.dev Follow Nov 8 Axios interceptor + React JS #react #axios #api #*t 3 min read How to Quickly Build APIs in Python Developer Service Developer Service Developer Service Follow Nov 5 How to Quickly Build APIs in Python #python #fastapi #flask #api 1 comment 6 min read Mastering Error Handling in .NET 8: Strategies for Minimal APIs and Controllers Leandro Veiga Leandro Veiga Leandro Veiga Follow Nov 3 Mastering Error Handling in .NET 8: Strategies for Minimal APIs and Controllers #csharp #tutorial #api #* Convert a Charles session to a Postman collection Mona M. Abd El-Rahman Mona M. Abd El-Rahman Mona M. Abd El-Rahman Follow Nov 4 Convert a Charles session to a Postman collection #api #testing #charles #postman * Java , Spring Migration DURGA SAI GANESH PITCHUKA DURGA SAI GANESH PITCHUKA DURGA SAI GANESH PITCHUKA Follow Nov 3 Java , Spring Migration #java #learning #webdev #api * Why we chose the Go Huma framework to develop our API endpoints Philip Perry Philip Perry Philip Perry Follow Nov 7 Why we chose the Go Huma framework to develop our API endpoints #go #api #documentation #openapi * 10 Ways AI with SharpAPI is Transforming Travel Tech Dawid Makowski Dawid Makowski Dawid Makowski Follow Nov 3 10 Ways AI with SharpAPI is Transforming Travel Tech #ai #webdev #api #programming Add Comment 14 min read How would you consider your API to be Restful? CodeWithVed CodeWithVed CodeWithVed Follow Nov 7 How would you consider your API to be Restful? #restapi #development #learning #api 3 *d Apredendo construção de apis com node e TypeScript Michael Moranis Michael Moranis Michael Moranis Follow Nov 2 Apredendo construção de apis com node e TypeScript #api #programmer #typescript #webdeveloper Add Comment 3 min read Navigating a codebase with an API Robert McKnight Robert McKnight Robert McKnight Follow Nov 6 Navigating a codebase with an API #ai #api #docker #architecture 10 *d Leveraging GenServer and Queueing Techniques: Handling API Rate Limits to AI Inference services Ahsan Nabi Dar Ahsan Nabi Dar Ahsan Nabi Dar Follow Nov 2 Leveraging GenServer and Queueing Techniques: Handling API Rate Limits to AI Inference services #elixir #api #serverless #ai Add Comment 3 min read 🚨Error Handling & Result Management : Debugging Disasters and Tiny Victories ALI ALHARBI ALI ALHARBI ALI ALHARBI Follow Nov 6 🚨Error Handling & Result Management : Debugging Disasters and Tiny Victories #javascript #typescript #api * Once You Have the Schedule: Visualize It Right (And How We Built Ours). Part 3. Datapult Datapult Datapult Follow Nov 1 Once You Have the Schedule: Visualize It Right (And How We Built Ours). Part 3. #api #workforce #scheduling #ai * Scheduling Workflows: POST, Poll, and Callback – Picking the Right One. Part 2. Datapult Datapult Datapult Follow Nov 1 Scheduling Workflows: POST, Poll, and Callback – Picking the Right One. Part 2. #api #scheduling #workforce #ai * Introduction to APIs: Supercharging Your Web Development Journey Okoye *amaka Follow Nov 1 Introduction to APIs: Supercharging Your Web Development Journey #webdev #javascript #rest #api Add Comment 4 min read Integration Digest: October 2024 Stanislav Deviatov Stanislav Deviatov Stanislav Deviatov Follow Nov 1 Integration Digest: October 2024 #api #kafka #restapi Add Comment 5 min read Forget the Headaches of Workforce Scheduling. Here’s How We’re Automating the Impossible. Part 1. Datapult Datapult Datapult Follow Nov 1 Forget the Headaches of Workforce Scheduling. Here’s How We’re Automating the Impossible. Part 1. #api #scheduling #workforce #ai 1 reaction * JSONify(), to_dict(), make_response(), and SerializerMixin in Flask Komfort Kimko Komfort Kimko Komfort Kimko Follow Nov 1 Understanding JSONify(), to_dict(), make_response(), and SerializerMixin in Flask #flask #api #python #* Kong Admin API for PHP: A Framework-Agnostic Client for Seamless Kong Gateway Management * Nasrul Hazim Bin Mohamad Follow Nov 5 Kong Admin API for PHP: A Framework-Agnostic Client for Seamless Kong Gateway Management #api #apigateway #php * Créer une Radio en Ligne avec l'API Radio Browser Guillaume Sere Guillaume Sere Guillaume Sere Follow Oct 31 Créer une Radio en Ligne avec l'API Radio Browser #javascript #react #api #github Add Comment 2 min read Spring Boot and GraphQL: Creating a GraphQL API Igo*lli Follow Oct 31 Spring Boot and GraphQL: Creating a GraphQL API #spring #api #graphql Add C* Spring Boot: Building Your First RESTful API Igo*lli Follow Oct 31 Introduction to Spring Boot: Building Your First RESTful API #spring #api #rest Add Comment 4 min read REST Countries Explorer with Dark/Light Mode Imran Khan Imran Khan Imran Khan Follow Nov 4 REST Countries Explorer with Dark/Light Mode #api #javascript #webdev #* 1 min read Handling Exceptions in Your Spring Boot REST API Igo*lli Follow Oct 30 Handling Exceptions in Your Spring Boot REST API #spring #api #exception #rest Add Comment 2 min read Securing REST APIs with OAuth2 and JWT: A Comprehensive Guide Igo*lli Follow Oct 30 Securing REST APIs with OAuth2 and JWT: A Comprehensive Guide #security #spring #api #authentication * the Differences Between @Controller and @RestController Annotations Igo*lli Follow Oct 30 Understanding the Differences Between @Controller and @RestController Annotations #spring #controller #api Add Comment 2 min read The Impact of API Breakage on SaaS Enterprise Systems: A CTO's Perspective Irhose Irhose Irhose Follow Oct 30 The Impact of API Breakage on SaaS Enterprise Systems: A CTO's Perspective #webdev #microservices #api #backend Add Comment 4 min read An Innovative Way to Create REST APIs Wanda Wanda Wanda Follow Oct 30 An Innovative Way to Create REST APIs #api #testing #tooling #rest 7 *d AI-Powered Low Code Application Development: Revolutionizing Enterprise Efficiency and Innovation anu anu anu Follow Oct 29 AI-Powered Low Code Application Development: Revolutionizing Enterprise Efficiency and Innovation #development #api #opensource #ai * Luminos Dharmraj Sodha Dharmraj Sodha Dharmraj Sodha Follow Oct 29 Luminos #webdev #javascript #api #luminous Add Comment 1 min read I Made an Open Source User Interface for OpenAI APIs Renjith V K Renjith V K Renjith V K Follow Oct 29 I Made an Open Source User Interface for OpenAI APIs #openai #ui #opensource #api Add Comment 3 min read Name your APIs carefully! Lars-Erik Bruce Lars-Erik Bruce Lars-Erik Bruce Follow Oct 29 Name your APIs carefully! #api #* APIs and Security Best Practices: JavaScript and Python Examples Nathan Katshi Nathan Katshi Nathan Katshi Follow Oct 29 APIs and Security Best Practices: JavaScript and Python Examples #api #security #development #bestpractices * OAuth Tutorial with Go and the Spotify API Ukeje Chukwuemeriwo Goodness Ukeje Chukwuemeriwo Goodness Ukeje Chukwuemeriwo Goodness Follow Oct 30 OAuth Tutorial with Go and the Spotify API #webdev #oauth #api #spotify 6 * How to Use Yelp API to Extract Business and Review Data Scrapfly Scrapfly Scrapfly Follow for Scrapfly Nov 8 How to Use Yelp API to Extract Business and Review Data #api Add Comment 14 min read What is HTTP Error 503 Service Unavailable and How to Fix it? Scrapfly Scrapfly Scrapfly Follow Nov 7 What is HTTP Error 503 Service Unavailable and How to Fix it? #api #http #scraperblocking Add Comment 7 min read SAP ECC vs. SAP ERP S/4 HANA: Which One Is Right for You? Connect Infosoft Connect Infosoft Connect Infosoft Follow Nov 7 SAP ECC vs. SAP ERP S/4 HANA: Which One Is Right for You? #webdev #website #api #flutter * Enhance Your Travel Platform with Amadeus API Integration Morgan Alex Morgan Alex Morgan Alex Follow Nov 5 Enhance Your Travel Platform with Amadeus API Integration #api #integration *... #discuss BWS CALL - 081214-119209 1 comment Build Things And Learn. How Do You? 6 comments What case should your API request/response be? 9 comments Buy verified cash app account New Buy LinkedIn Accounts New The Failures Of API Design New Secure API Development: Best Practices with Laravel New 😷 Covid-19 APIs 9 comments From On-Premises to Cloud APIs: A Meta Example 1 comment Buy Verified Paxful Account New trending guides/resources Efficient API consumption for huge data in JavaScript How to Store API Keys Securely in a .env File Secure File Share - A safer way to share sensitive files online Resolve \"Blocked by CORS Policy: No 'Access-Control-Allow-Origin'\" in Laravel Best Free Postman Alternatives 2024 How to Use the OpenAI o1 API End-to-End AWS DevOps Project: CI/CD Pipeline for ECS Fargate with ECR and RDS How to Set OpenAI API Key as an Environment Variable? How to Use Goroutines for Concurrent Processing in Go API Documentation Tools: Using Hoppscotch for API Documentation Congrats to The Pinata Challenge Winners! Best AI APIs to build smart apps with Free tiers. Join us for The Pinata Challenge: $3,000 in Prizes! 5 Best Email Services for Next.js How to Create Your First Minimal API with .NET 8 Best Practices for Naming API Endpoints Dockerizing a Golang API with MySQL and adding Docker Compose Support Understanding HTTP Status Codes 400 vs. 500 Errors in APIs Building a Centralized API Proxy with YARP in .NET 8 Using Minimal APIs Automate Access Token Management in Postman with Environments and Pre-request Scripts recently queried What Does API Stand For Free Apis Golang Rest Api Vue Axios asp.net Versioning * * ",
    "url": "https://dev.to/t/api"
  },
  {
    "body": "* # apm Follow Hide Create Post 59 Posts Published *. Monitoring PM2 in production * Follow for New Relic Nov 1 * Add Comment 8 min read Recommended Series for Small Rails Development Teams: APM - Skylight Masumi Kawasaki 💭 Masumi Kawasaki 💭 Masumi Kawasaki 💭 Follow Sep 5 Recommended Series for Small Rails Development Teams: APM - Skylight #rails #apm 2 *d Enhance Your System Observability with These Top Log Monitoring Tools Alerty Alerty Alerty Follow Aug 12 Enhance Your System Observability with These Top Log Monitoring Tools #monitoring #observability #logging #apm * Real-Time News Aggregator with Elastic: Leveraging APM, RUM, and Elasticsearch for Optimized Performance Rahul Ranjan Rahul Ranjan Rahul Ranjan Follow Aug 15 Real-Time News Aggregator with Elastic: Leveraging APM, RUM, and Elasticsearch for Optimized Performance #elasticsearch #apm #docker #devops Add Comment 4 min read Demystifying Observability 2.0 Adriana Villela Adriana Villela Adriana Villela Follow Jun 10 Demystifying Observability 2.0 #observability #opentelemetry #cloudnative #apm Add Comment 8 min read Monitor the Performance of Your Ruby on Rails Application Using AppSignal Aestimo K. Aestimo K. Aestimo K. Follow for AppSignal Jun 26 Monitor the Performance of Your Ruby on Rails Application Using AppSignal #ruby #rails #apm #appsignal 2 * Elasticsearch APM Server Kurulumu ve Uygulama İzleme Erenalp Tekşen Erenalp Tekşen Erenalp Tekşen Follow for Açıklab Jun 10 Elasticsearch APM Server Kurulumu ve Uygulama İzleme #elasticsearch #kibana #apm #monitoring 5 * Measuring Node.js Performance in Production with Performance Hooks Damilola Olatunji Damilola Olatunji Damilola Olatunji Follow for AppSignal May 1 Measuring Node.js Performance in Production with Performance Hooks #node #apm * Uptrace v1.6 is available Vladimir Mihailenco Vladimir Mihailenco Vladimir Mihailenco Follow for Uptrace Mar 25 Uptrace v1.6 is available #monitoring #apm #devops #tooling Add Comment 3 min read Tracking Custom Metrics in Python with AppSignal * Apr 18 Tracking Custom Metrics in Python with AppSignal #python #apm 2 *d Integrating Keycloak with Datadog: Enabling Keycloak Traces in Kubernetes using Datadog APM Mohammed Ammer Mohammed Ammer Mohammed Ammer Follow Mar 31 Integrating Keycloak with Datadog: Enabling Keycloak Traces in Kubernetes using Datadog APM #keycloak #datadog #apm #monitoring 4 *d A deep dive into zero-day vulnerability alerts with New Relic APM * for New Relic Feb 23 A deep dive into zero-day vulnerability alerts with New Relic APM #devsecops #observability #apm #vulnerabilities * Datadog PHP APM filtering Zarmin Zarmin Zarmin Follow Feb 21 Datadog PHP APM filtering #datadog #php #apm Add Comment 2 min read How to Gracefully Implement Business Performance Monitoring OverFlow OverFlow OverFlow Follow Mar 16 How to Gracefully Implement Business Performance Monitoring #apm #opentelemetry Add Comment 5 min read AppSignal Expands Monitoring Capabilities with Vector * Jan 10 AppSignal Expands Monitoring Capabilities with Vector #apm #monitoring #vector Add Comment 4 min read NestJS APM with Elastic and Docker Eduardo Conti Eduardo Conti Eduardo Conti Follow Jan 4 NestJS APM with Elastic and Docker #nestjs #elasticsearch #docker #apm 16 *d Integrations to monitor your full AI stack * for New Relic Dec 13 '23 Integrations to monitor your full AI stack #ai #aiops #devops #apm Add Comment 7 min read Shaping the Future of Ruby and Kafka Together with rdkafka-ruby Maciej Mensfeld Maciej Mensfeld Maciej Mensfeld Follow for AppSignal Dec 6 '23 Shaping the Future of Ruby and Kafka Together with rdkafka-ruby #ruby #apm * AppSignal Monitoring Available for Python Applications * Nov 7 '23 AppSignal Monitoring Available for Python Applications #python #apm #monitoring Add Comment 4 min read New Relic AI Monitoring, the industry’s first APM for AI, is here! alv*el3 Follow for New Relic Nov 14 '23 New Relic AI Monitoring, the industry’s first APM for AI, is here! #ai #devops #apm #monitoring * We've Levelled up Our Top Monitoring Features * Nov 14 '23 We've Levelled up Our Top Monitoring Features #appsignal #apm #monitoring * Monitor Your Node.js and Remix Application with AppSignal Luismi Ramírez Luismi Ramírez Luismi Ramírez Follow for AppSignal Oct 31 '23 Monitor Your Node.js and Remix Application with AppSignal #node #remix #apm * How To Reduce Reductions in Elixir Jeff Kreeftmeijer Jeff Kreeftmeijer Jeff Kreeftmeijer Follow for AppSignal Oct 5 '23 How To Reduce Reductions in Elixir #elixir #apm * Structured logging best practices Vladimir Mihailenco Vladimir Mihailenco Vladimir Mihailenco Follow for Uptrace Sep 12 '23 Structured logging best practices #apm #monitoring #tutorial 1 reaction 1 c* Go app monitoring Vladimir Mihailenco Vladimir Mihailenco Vladimir Mihailenco Follow for Uptrace Sep 11 '23 Introduction to Go app monitoring #go #tutorial #monitoring #apm 2 * Boost HTTP Client Monitoring in Elixir with AppSignal and Tesla Templates * Jul 18 '23 Boost HTTP Client Monitoring in Elixir with AppSignal and Tesla Templates #apm #tesla #elixir Add Comment 4 min read Track Errors in Fastify with AppSignal Kevin Cunningham Kevin Cunningham Kevin Cunningham Follow for AppSignal Aug 2 '23 Track Errors in Fastify with AppSignal #fastify #node #apm 3 *d Observe Your Phoenix App with Structured Logging Sophie DeBenedetto Sophie DeBenedetto Sophie DeBenedetto Follow for AppSignal Jul 25 '23 Observe Your Phoenix App with Structured Logging #elixir #liveview #logging #apm 3 * Monitoring Your Elixir GraphQL API with AppSignal * Jul 11 '23 Monitoring Your Elixir GraphQL API with AppSignal #elixir #graphql #apm Add Comment 4 min read Instrumentation for Event Driven Sibelius Seraphini Sibelius Seraphini Sibelius Seraphini Follow for Woovi Jul 13 '23 Instrumentation for Event Driven #observability #apm #eventdriven 25 *d How to gather OpenTelemtry Metrics in Instana with ‘no’ Instana agent on your ‘production’ infrastructure (part 2) Alain Airom Alain Airom Alain Airom Follow Jul 12 '23 How to gather OpenTelemtry Metrics in Instana with ‘no’ Instana agent on your ‘production’ infrastructure (part 2) #observability #opentelemetry #instana #apm 3 * Instana / OpenTelemetry Integration for Go Applications Alain Airom Alain Airom Alain Airom Follow Jul 3 '23 Instana / OpenTelemetry Integration for Go Applications #apm #opentelemetry #go #observability 3 * New infrastructure monitoring integrated with APM eliminates screen swivel and peak billing Karl Henrik Smith Karl Henrik Smith Karl Henrik Smith Follow for New Relic May 24 '23 New infrastructure monitoring integrated with APM eliminates screen swivel and peak billing #apm #infrastructure #pricing #ui Add Comment 7 min read Set Up Tracing for a Node.js Application on AppSignal Geshan Manandhar Geshan Manandhar Geshan Manandhar Follow for AppSignal Jun 7 '23 Set Up Tracing for a Node.js Application on AppSignal #node #tracing #apm Add Comment 10 min read How to Monitor Custom Metrics with AppSignal * May 4 '23 How to Monitor Custom Metrics with AppSignal #node #elixir #ruby #apm Add Comment 6 min read As Simple as Possible, But Not Simpler Leon Adato Leon Adato Leon Adato Follow Jun 6 '23 As Simple as Possible, But Not Simpler #apm #simplicity #demos * Optimize Your Prisma Queries with AppSignal and OpenTelemetry * Apr 25 '23 Optimize Your Prisma Queries with AppSignal and OpenTelemetry #prisma #node #typescript #apm Add Comment 3 min read An Introduction to Application Monitoring * Antonello Zanini Follow for AppSignal Feb 15 '23 An Introduction to Application Monitoring #monitoring #performance #apm Add Comment 6 min read groundcover is Live on Product Hunt! Shahar Azulay Shahar Azulay Shahar Azulay Follow Sep 19 '22 groundcover is Live on Product Hunt! #apm #product #observability #ebpf 2 *d Setting up Datadog APM on EKS + Fargate Roy Ra Roy Ra Roy Ra * Sep 9 '22 Setting up Datadog APM on EKS + Fargate #eks #fargate #datadog #apm 3 *d Setting up Datadog APM on ECS, Fargate(Spring Boot) Roy Ra Roy Ra Roy Ra * Jun 7 '22 Setting up Datadog APM on ECS, Fargate(Spring Boot) #datadog #apm #ecs #fargate 10 * Lessons learned integrating AppSignal APM with NestJS Jan Halama Jan Halama Jan Halama Follow for Superface May 20 '22 Lessons learned integrating AppSignal APM with NestJS #node #javascript #nestjs #apm 9 * APM for iOS Apps Josh Josh Josh Follow Mar 10 '22 APM for iOS Apps #ios #huawei #apm 3 *d Integrating AppGallery Connect APM on iOS Zachary Powell Zachary Powell Zachary Powell Follow Nov 5 '21 Integrating AppGallery Connect APM on iOS #huawei #appgallery #apm #ios 3 *d Huawei APM Network Analysis displaying the number of sessions as 0? Why?! Zachary Powell Zachary Powell Zachary Powell Follow Nov 4 '21 Huawei APM Network Analysis displaying the number of sessions as 0? Why?! #huawei #apm #android #performance 2 *d Latest top 21 APM tools [open-source included] 🧑‍💻🚀 Ankit Anand ✨ Ankit Anand ✨ Ankit Anand ✨ Follow for SigNoz Oct 5 '21 Latest top 21 APM tools [open-source included] 🧑‍💻🚀 #devops #monitoring #microservices #apm 29 * Troubleshooting for Huawei's App Performance Management SDK Zachary Powell Zachary Powell Zachary Powell Follow Sep 6 '21 Troubleshooting for Huawei's App Performance Management SDK #huawei #android #sdk #apm 2 *d Run Custom Availability Tests using PowerShell and Azure Application Insights, even on-premises Niels Swimburger.NET 🍔 Niels Swimburger.NET 🍔 Niels Swimburger.NET 🍔 Follow Feb 4 '21 Run Custom Availability Tests using PowerShell and Azure Application Insights, even on-premises #azure #powershell #apm 5 * Launching AppSignal Monitoring for Node.js 1.0 wesoudshoorn wesoudshoorn wesoudshoorn Follow for AppSignal Oct 8 '20 Launching AppSignal Monitoring for Node.js 1.0 #node #javascript #apm #monitoring 2 * Configuring APM on Kubernetes Cameron Gray Cameron Gray Cameron Gray Follow Aug 12 '20 Configuring APM on Kubernetes #kubernetes #apm #datadog #devops 7 *d Monitoring Apdex with Scout APM Matthew Chigira Matthew Chigira Matthew Chigira Follow for Scout APM Jul 19 '19 Monitoring Apdex with Scout APM #apdex #apm #devops #monitoring 5 *d 2019 PHP Monitoring Options Matthew Chigira Matthew Chigira Matthew Chigira Follow for Scout APM Jul 17 '19 2019 PHP Monitoring Options #php #monitoring #apm #laravel 9 reactions *ng Heroku Error Codes with Scout APM Matthew Chigira Matthew Chigira Matthew Chigira Follow for Scout APM Jul 17 '19 Understanding Heroku Error Codes with Scout APM #heroku #apm #debugging #rails 2 * Monitorando suas aplicações com Zipkin Victor Rodrigues Victor Rodrigues Victor Rodrigues Follow Apr 27 '20 Monitorando suas aplicações com Zipkin #monitoring #zipkin #apm #observability 5 *d Choosing a centralized logging and monitoring system Szymon Warda Szymon Warda Szymon Warda Follow Mar 7 '17 Choosing a centralized logging and monitoring system #applicationinsights #apm #centralizedlogging 8 reactions 12 comments 19 min read Você sabe tudo que acontece com a sua aplicação em produção? Valesca Fortunato Valesca Fortunato Valesca Fortunato Follow for WoMakersCode Jan 30 '20 Você sabe tudo que acontece com a sua aplicação em produção? #elasticsearch #apm #sysadmin #monitoring 17 * Your System is Deeper Than You Think austin austin austin Follow Jan 8 '20 Your System is Deeper Than You Think #observability #distributedsystems #tracing #apm 3 *d APM is Dying — and That’s Okay Ben Sigelman Ben Sigelman Ben Sigelman Follow Dec 17 '19 APM is Dying — and That’s Okay #observability #deepsystems #tracing #apm 5 * APM is good at root cause detection. But there is much more to it. Ivo Mägi Ivo Mägi Ivo Mägi Follow Nov 20 '19 APM is good at root cause detection. But there is much more to it. #apm #devops #alerting #rootcause 2 * What is APM—A comprehensive overview on managing application performance Arshad Arshad Arshad Follow for ManageEngine Applications Manager Jul 31 What is APM—A comprehensive overview on managing application performance #apm #monitoring #observability #applicationmonitoring Add Comment 6 min read Considerations for effective application performance management: Areas to look out for Angeline Angeline Angeline Follow for ManageEngine Applications Manager May 31 Considerations for effective application performance management: Areas to look out for #applicationperformance #apm #monitoring #observability *... trending guides/resources Recommended Series for Small Rails Development Teams: APM - Skyligh*nsor Neon * ",
    "url": "https://dev.to/t/apm"
  },
  {
    "body": "* Amazon Web Services Follow Hide Amazon Web Services (AWS) is a collection of web services for computing, storage, machine learning, security, and more There are over 200+ AWS services as of 2023. * Articles which primary focus is AWS are permitted to used the #aws tag. tag moderators 17182 Posts Published Older #aws posts 1 2 3 4 5 6 7 8 9 …75 …286 *. Cloud Resume Challenge -AWS Aditya Pandey Aditya Pandey Aditya Pandey Follow Nov 10 Cloud Resume Challenge -AWS #cloudresumechallenge #cloudcomputing #devops #aws Add Comment 3 min read The Most Potent Security Control on AWS Gaurav Raje Gaurav Raje Gaurav Raje * Nov 9 The Most Potent Security Control on AWS #iam #security #aws #* Building a Scalable Job Queue System with AWS and Laravel Mahmud Hasan Rafid Mahmud Hasan Rafid Mahmud Hasan Rafid Follow Nov 9 Building a Scalable Job Queue System with AWS and Laravel #aws #queue #lambda #eventbridge * Integrated AWS Workflows with SageMaker Notebooks Sreekesh Iyer Sreekesh Iyer Sreekesh Iyer * Nov 9 Integrated AWS Workflows with SageMaker Notebooks #sagemaker #aws #jupyter Add Comment 2 min read Presenting at DataEngBytes 2024 Sydney: Building a Transactional Data Lakehouse on AWS with Apache Iceberg Roopa Venkatesh Roopa Venkatesh Roopa Venkatesh Follow Nov 9 Presenting at DataEngBytes 2024 Sydney: Building a Transactional Data Lakehouse on AWS with Apache Iceberg #apacheiceberg #aws #etl #datalakehouse Add Comment 4 min read How I built the infrastructure for my cloud resume Anthony Vo Anthony Vo Anthony Vo Follow Nov 8 How I built the infrastructure for my cloud resume #cloud #aws #devops #terraform Add Comment 3 min read ** * LimitRange in Kubernetes: A Guide with Examples Manikanta Manikanta Manikanta Follow Nov 8 Understanding LimitRange in Kubernetes: A Guide with Examples #kubernetes #devops #cloud #aws Add Comment 4 min read Deploy* New Feature: Amazon CloudFront no longer charges (No Billing) for requests blocked by AWS WAF Fady Nabil Fady Nabil Fady Nabil * Nov 8 New Feature: Amazon CloudFront no longer charges (No Billing) for requests blocked by AWS WAF #aws #cloudfront #waf Add Comment 1 min read Do you Know ? Fazly Fathhy Fazly Fathhy Fazly Fathhy Follow Nov 8 Do you Know ? #microservices #cicd #aws #webdev Add Comment 1 min read A Decade of AWS Lambda and ECS: My Journey of Growth and Gratitude Avinash Dalvi Avinash Dalvi Avinash Dalvi * Nov 9 A Decade of AWS Lambda and ECS: My Journey of Growth and Gratitude #lambda #ecs #aws #serverless 5 * Storing Certificate Files in AWS Secrets Manager and Accessing Them in Kubernetes Secrets M Nitin Kumar M Nitin Kumar M Nitin Kumar Follow Nov 9 Storing Certificate Files in AWS Secrets Manager and Accessing Them in Kubernetes Secrets #aws #kubernetes #secretmanager #secret Add Comment 2 min read VPC y Subredes en AWS - Parte 2: Configuración de Conectividad Segura entre Recursos y hacia Internet Javier Madriz Javier Madriz Javier Madriz Follow Nov 7 VPC y Subredes en AWS - Parte 2: Configuración de Conectividad Segura entre Recursos y hacia Internet #aws #cloud #vpc #redes Add Comment 15 min read Custom validation in Terraform omkar shelke omkar shelke omkar shelke Follow Nov 7 Custom validation in Terraform #terraform #devops #aws #automation 5 reactions Ad*h AWS Landing Zone: Tips for Terraform Setup Wojciech Kaczmarczyk Wojciech Kaczmarczyk Wojciech Kaczmarczyk Follow Nov 7 Getting Started with AWS Landing Zone: Tips for Terraform Setup #aws #terraform #* 🚀\"Amazon Q Business: 🤖AI-Driven Insights for Enterprise📈\" Sarvar Nadaf Sarvar Nadaf Sarvar Nadaf * Nov 7 🚀\"Amazon Q Business: 🤖AI-Driven Insights for Enterprise📈\" #aws #ai #genai #* 8 min read Usando helm-secrets e Vals para anonimizar seus dados no deploy! Pedro Nandi Pedro Nandi Pedro Nandi Follow Nov 7 Usando helm-secrets e Vals para anonimizar seus dados no deploy! #kubernetes #aws #helm #vals Add Comment 4 * Setting Up AWS Organizations with Child Accounts Rahul Ladumor Rahul Ladumor Rahul Ladumor Follow Nov 7 A Comprehensive Guide to Setting Up AWS Organizations with Child Accounts #cloudsecurity #management #aws #cloud Add Comment 5 min read Step by step guide to launch EC2 instance in a VPC using cloud formation Uwadone Joshua Uwadone Joshua Uwadone Joshua Follow Nov 8 Step by step guide to launch EC2 instance in a VPC using cloud formation #cloudformation #aws #devops #cloudengineering Add Comment 5 min read AWS Logging, Monitoring & Auditing with AWS CloudWatch and CloudTrail! Girish Bhatia Girish Bhatia Girish Bhatia Follow Nov 7 AWS Logging, Monitoring & Auditing with AWS CloudWatch and CloudTrail! #aws #cloudwatch #cloudtrail #observability Add Comment 4 min read How to deploy fastAPI app with postgreSQL database in AWS EC2 Shaikh Al Amin Shaikh Al Amin Shaikh Al Amin Follow Nov 7 How to deploy fastAPI app with postgreSQL database in AWS EC2 #fastapi #aws #ec2 #postgres Add Comment 3 min read AWS Deployment Best Practices: Let's make your own SPA web app! - (1) Inhwa Son Inhwa Son Inhwa Son Follow Nov 7 AWS Deployment Best Practices: Let's make your own SPA web app! - (1) #webdev #aws #bestpractices #* Week 3 in DevOps: Beginning with Advanced AWS Services and Security Aman Deol Aman Deol Aman Deol Follow Nov 6 Week 3 in DevOps: Beginning with Advanced AWS Services and Security #aws #devops #cloud Add Comment 2 min read A Beginner's Guide to Understanding AWS EC2 -(Elastic Compute Cloud) Md. Abdur Rahman Md. Abdur Rahman Md. Abdur Rahman Follow Nov 7 A Beginner's Guide to Understanding AWS EC2 -(Elastic Compute Cloud) #aws 2 reactions 1 comment 12 min read Cloud Migration: What, Why and Who Benefits Fernando Pena Fernando Pena Fernando Pena * Nov 7 Cloud Migration: What, Why and Who Benefits #cloud #cloudcomputing #cloudmigration #aws * Obteniendo una insignia Serverless de AWS kevin kevin kevin Follow Nov 6 Obteniendo una insignia Serverless de AWS #aws #serverless #* Optimizaciones Lambda AWS 👨‍💻 kevin kevin kevin Follow Nov 6 Optimizaciones Lambda AWS 👨‍💻 #aws #lambda #serverless #* Explaining Elastic IP Addresses in AWS Pavol Z. Kutaj Pavol Z. Kutaj Pavol Z. Kutaj Follow Nov 6 Explaining Elastic IP Addresses in AWS #aws #networking #vpc Add Comment 1 min read Reduce the amount of code in AWS CDK: Apply OAC in Amazon CloudFront L2 constructs Yasuyuki Sato Yasuyuki Sato Yasuyuki Sato * Nov 7 Reduce the amount of code in AWS CDK: Apply OAC in Amazon CloudFront L2 constructs #aws #awscdk #cloudfront * Securing external-dns: Encrypting TXT Registry Records suin suin suin Follow Nov 6 Securing external-dns: Encrypting TXT Registry Records #kubernetes #aws #security #devops Add Comment 5 min read Error While Deploying Python Flask Application on AWS Elastic Beanstalk Pronoy K Isaac Pronoy K Isaac Pronoy K Isaac Follow Nov 6 Error While Deploying Python Flask Application on AWS Elastic Beanstalk #help #aws #* Performance Issues on Linux instances dinesh reddy dinesh reddy dinesh reddy Follow Nov 6 Performance Issues on Linux instances #devops #aws #linux #devchallenge Add Comment 1 min read Automated DNS Record Management for Kubernetes Resources using external-dns and AWS Route53 suin suin suin Follow Nov 6 Automated DNS Record Management for Kubernetes Resources using external-dns and AWS Route53 #kubernetes #externaldns #aws #route53 Add Comment 4 min read Creating AWS layer with Docker. Anariak Anariak Anariak Follow Nov 6 Creating AWS layer with Docker. #aws #serverless #python #docker Add Comment 2 min read Ajustando Limites de Concorrência do AWS Lambda para Minimizar Throttling Misael Amorim Misael Amorim Misael Amorim Follow Nov 5 Ajustando Limites de Concorrência do AWS Lambda para Minimizar Throttling #aws #lambda #microservice*ying Fider on AWS ECS: A Step-by-Step Guide to Deploy a Feedback Platform Mohamed Wasim Mohamed Wasim Mohamed Wasim Follow for itTrident Software Services Nov 5 Deploying Fider on AWS ECS: A Step-by-Step Guide to Deploy a Feedback Platform #aws #ecs #ecr Add Comment 13 min read AWS Api GateWay & AWS Lambda Interview Question * Nov 5 AWS Api GateWay & AWS Lambda Interview Question #aws #lambda #api #interviewpreparation Add Comment 9 min read Query DynamoDB with SQL using Athena - Leveraging DynamoDB Exports to S3 (1/2) * Marko - ServerlessLife.com Follow Nov 5 Query DynamoDB with SQL using Athena - Leveraging DynamoDB Exports to S3 (1/2) #aws #dynamodb #athena #serverless Add Comment 2 min read 4 stages of Automata theory Fazly Fathhy Fazly Fathhy Fazly Fathhy Follow Nov 5 4 stages of Automata theory #docker #awscommunitybuilders #aws Add Comment 1 min read React + AWS Cognito: Email Authentication Setup Guide (First Part) Jaime Jaime Jaime Follow Nov 5 React + AWS Cognito: Email Authentication Setup Guide (First Part) #* #aws Add Comment 4 min read Cross-Project Dependencies Handling with DBT in AWS MWAA Deeksha Gunde Deeksha Gunde Deeksha Gunde Follow Nov 4 Cross-Project Dependencies Handling with DBT in AWS MWAA #aws #terraform #mwaa #dbt Add Comment 7 min read What is VPC Flow Log ? How to Enable VPC Log Orhan Kamo Orhan Kamo Orhan Kamo Follow Nov 4 What is VPC Flow Log ? How to Enable VPC Log #aws #vpc #security #awsvpc Add Comment 2 min read DevOps4Devs: set a budget Herbert Fernandez Tamayo Herbert Fernandez Tamayo Herbert Fernandez Tamayo Follow Nov 4 DevOps4Devs: set a budget #azure #aws #budget #devops4devs Add Comment 3 min read Going Serverless with Dart: AWS Lambda for Flutter Devs Dinko Marinac Dinko Marinac Dinko Marinac Follow Nov 4 Going Serverless with Dart: AWS Lambda for Flutter Devs #aws #dart #lambda #serverless Add Comment 8 min read AI-Powered Text Analysis Using AWS Comprehend with a Flask Web Interface Zahraa Jawad Zahraa Jawad Zahraa Jawad Follow Nov 5 AI-Powered Text Analysis Using AWS Comprehend with a Flask Web Interface #aws #ai #coding #cloudcomputing * New features in Amazon Bedrock Prompt Management Fady Nabil Fady Nabil Fady Nabil * Nov 8 New features in Amazon Bedrock Prompt Management #aws #bedrock #promptengineering #genai * How to enable AWS S3 replication between Global AWS Region and AWS China Yaroslav Yarmoshyk Yaroslav Yarmoshyk Yaroslav Yarmoshyk Follow Nov 4 How to enable AWS S3 replication between Global AWS Region and AWS China #s3 #aws #replication Add Comment 1 min read Terraform | Infrastructure as a Code | Get started * Nov 8 Terraform | Infrastructure as a Code | Get started #terraform #cloud #aws #devops 6 *d The Hidden Costs of Cloud Provider \"Free\" Credits Pavel from TurboCloud Pavel from TurboCloud Pavel from TurboCloud Follow Nov 8 The Hidden Costs of Cloud Provider \"Free\" Credits #aws #cloud #webdev #googlecloud 5 * AWS Lambda: OCR and Text Translation in the AWS Cloud Wojciech Lepczyński Wojciech Lepczyński Wojciech Lepczyński * Nov 7 AWS Lambda: OCR and Text Translation in the AWS Cloud #aws #tutorial #lambda #ai 5 *d Liveness, Readiness, and Startup Probes in Kubernetes: What You Need to Know Manikanta Manikanta Manikanta Follow Nov 8 Liveness, Readiness, and Startup Probes in Kubernetes: What You Need to Know #kubernetes #k8s #devops #aws Add Comment 4 min read Amazon Comprehend for Text and Document Analysis Sajjad Rahman Sajjad Rahman Sajjad Rahman Follow Nov 8 Amazon Comprehend for Text and Document Analysis #aws #awschallenge #ai #nlp * Using Stable Diffusion in AWS Bedrock to Generate Images Muhammed Ashraf Muhammed Ashraf Muhammed Ashraf Follow Nov 3 Using Stable Diffusion in AWS Bedrock to Generate Images #ai #aws #cloud #* AI Model Optimization on AWS Inferentia and Trainium Chaim Rand Chaim Rand Chaim Rand Follow Nov 3 AI Model Optimization on AWS Inferentia and Trainium #aws #ec2 #ai #machinelearning Add Comment 11 min read Navigating Payment Solutions on Amazon AWS: A Comprehensive Guide Danial Ranjha Danial Ranjha Danial Ranjha Follow for Billgist Nov 7 Navigating Payment Solutions on Amazon AWS: A Comprehensive Guide #aws #cloud #devops #web Add Comment 14 min read How to Contact Amazon Web Services: Finding the Right Support Phone Number Danial Ranjha Danial Ranjha Danial Ranjha Follow for Billgist Nov 7 How to Contact Amazon Web Services: Finding the Right Support Phone Number #aws #cloud #devops #web Add Comment 13 min read Optimizing Your Business: Best Practices for Billing and Accounts Management Danial Ranjha Danial Ranjha Danial Ranjha Follow for Billgist Nov 7 Optimizing Your Business: Best Practices for Billing and Accounts Management #aws #cloud #devops #web Add Comment 13 min read Premios, competiciones y actividades de la Alianza Tech de AWS: Calendario curso 2024/2025 Guillermo Ruiz Guillermo Ruiz Guillermo Ruiz Follow for AWS Español Nov 7 Premios, competiciones y actividades de la Alianza Tech de AWS: Calendario curso 2024/2025 #alianzatechskills2jobs #aws #community #deepracer 3 *d Avoiding Connection Pinning in Lambda and RDS Proxy with NestJS and Proxy Splitting Atsushi Suzuki Atsushi Suzuki Atsushi Suzuki Follow Nov 2 Avoiding Connection Pinning in Lambda and RDS Proxy with NestJS and Proxy Splitting #webdev #aws #database #beginners * Implementing Blue-Green Deployments with AWS Route 53 diek diek diek Follow Nov 10 (58 mins ago) Implementing Blue-Green Deployments with AWS Route 53 #devops #aws #* When Your AWS Bill Goes Viral and Your Finance Department Becomes a Memelord 🚀💸 diek diek diek Follow Nov 10 (56 mins ago) When Your AWS Bill Goes Viral and Your Finance Department Becomes a Memelord 🚀💸 #finops #devops #aws #humor Add Comment 2 min read Securing Your AWS EC2 and S3 Communication: Best Practices for Enhanced Security rotem levi # Cloud Security rotem levi # Cloud Security rotem levi # Cloud Security Follow Nov 10 (1 hour ago) Securing Your AWS EC2 and S3 Communication: Best Practices for Enhanced Security #aws #security #ec2 #s3 Add Comment 3 min read Managing Terraform State for AWS workloads with v1.10.0-beta1 quixoticmonk quixoticmonk quixoticmonk Follow Nov 10 (5 hours ago) Managing Terraform State for AWS workloads with v1.10.0-beta1 #terraform #s3 #aws #hashicorp Add Comment 5 min read 📢 Upcoming webinar: Overcoming AWS VPC CIDR overlaps! 📢 Olha Isai Olha Isai Olha Isai Follow Nov 8 📢 Upcoming webinar: Overcoming AWS VPC CIDR overlaps! 📢 #devops #aws #devchallenge #awschallenge Add C* Silent Guardians: The Invisible Encryption Protecting Your S3 Data New You're running an online conference but get called out for having an all-male speaker lineup 2 days prior. Yo, What do you do? 19 comments How I Accidentally Became a YouTube Creator... 54 Years Ago!\" 😯 9 comments Amazon RDS vs Aurora: Why Aurora Wins New Wise Choices: How to Select the Right EC2 Instance Purchase Option in AWS 4 comments I can't make up my mind about Twitter lately 27 comments EC2 Essentials: Your Gateway to Cloud Computing 4 comments Breakthrough!! 1 comment AWS S3 interoperability: connecting the dots across platforms 🚀 4 comments What AWS service are you struggling to learn? What’s painful? 35 * Learn AWS DevOps from Zero: A Complete Beginner’s Guide End-to-End AWS DevOps Project: Automate Java Application Build and Deployment on Amazon EKS 100 AWS DevOps * Kubernetes Unlocked: From Kubernetes Zero to Kubernetes Hero! AWS S3 appears to be down Mastering Docker: Essential Best Practices for Efficiency and Security👮🏻 Qualities of a Good Cloud Architect Balancing AWS Certification and Parenting: A Guide for Busy Professionals End-to-End AWS DevOps Project: CI/CD Pipeline for ECS Fargate with ECR and RDS Deploy Your LLM on AWS EC2 LocalStack e Docker: Como aumentar a produtividade no desenvolvimento LOCAL sem custos AWS re:Invent 2024 - Which sessions I'll try to attend. Managing AWS EKS access entries with Terraform and OpenTofu AWS AI Practitioner Exam: My Experience, Study Plan, and Resources Install NGINX Ingress Controller in AWS EKS AWS DevOps Project: Advanced Automated CI/CD Pipeline with Infrastructure as Code, Microservices, Service Mesh, and Monitoring Creating SSL Certificates using AWS Certificate Manager with DNS Validation using Terraform DynamoDB: Query x Scan! Para de torrar dinheiro usando Scan em produção AWS Compute - Part 5: How to choose compute service Creating a simple and fast EKS Cluster recently queried Docker Rails Deploymen*nsor Neon * ",
    "url": "https://dev.to/t/aws"
  },
  {
    "body": "* # backenddevelopment * 321 Posts Published Older #backenddevelopment posts 1 2 3 4 5 *. Understanding * *d Learn about basic Authentication Isaac Tonyloi - SWE Isaac Tonyloi - SWE Isaac Tonyloi - SWE Follow Nov 5 Learn about basic Authentication #authentication #backenddevelopment #security * Planning and creating a database before you start working on your backend can save you time dgloriaweb dgloriaweb dgloriaweb Follow Nov 9 Planning and creating a database before you start working on your backend can save you time #planning #backenddevelopment #data #database Add Comment 1 min read FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory on Digital OceanDroplet Sammy Barasa Sammy Barasa Sammy Barasa Follow Nov 2 FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory on Digital OceanDroplet #webdev #backenddevelopment #linux * Secure APIs: Best Practices for Data Protection Obinna Obinna Obinna Follow Nov 4 Building Secure APIs: Best Practices for Data Protection #apisecurity #dataprotection #backenddevelopment #cybersecurity * 🛠️ ¿Cómo actualizar tus paquetes de Go (Golang) de manera eficiente?🛠️ Roberto Morais Roberto Morais Roberto Morais Follow Oct 29 🛠️ ¿Cómo actualizar tus paquetes de Go (Golang) de manera eficiente?🛠️ #go #backenddevelopment #webdev #* Getting Started with Django: A Step-by-Step Guide Mr #1738 Mr #1738 Mr #1738 Follow Oct 18 Getting Started with Django: A Step-by-Step Guide #webdev #backenddevelopment #django #* Optimizing an API Response Kartikey Srivastava Kartikey Srivastava Kartikey Srivastava Follow Oct 17 Optimizing an API Response #api #backenddevelopment #backend #performance Add Comment 3 min read MongoDB Atlas * 16 MongoDB Atlas #mongodb #backenddevelopment #database #webdev 1 reaction * SOLID principles Md Abu Musa Md Abu Musa Md Abu Musa Follow Oct 29 Understanding SOLID principles #solidprinciples #softwareengineering #backenddevelopmen*ad Spring Boot Controllers Basics Pete Pete Pete Follow Oct 14 Spring Boot Controllers Basics #springboot #backenddevelopment #java #kotlin Add Comment 2 min read Spring Boot Controllers Basics Pete Pete Pete Follow Oct 14 Spring Boot Controllers Basics #springboot #backenddevelopment #java #kotlin Add Comment 2 min read Design Patterns for Backend Development Obinna Obinna Obinna Follow Nov 5 Design Patterns for Backend Development #designpatterns #backenddevelopment #architecture #codingbestpractices 17 * * M Inam M Inam M Inam Follow Oct 24 * #backend #backenddevelopment #node #express 5 *d Thought-Provoking Questions Every Backend Developer Should Ask * Sospeter Mong'are Follow Oct 3 Thought-Provoking Questions Every Backend Developer Should Ask #backend #beginners #tutorial #* 4 min read Starting Your Journey in Backend Development: Key Insights and Practical Tips for Success * Sospeter Mong'are Follow Oct 30 Starting Your Journey in Backend Development: Key Insights and Practical Tips for Success #backenddevelopment #beginners #backend #tutorial * * * Oct 17 * #express #node #* * Row-level locking in databases. Stephen Nwankwo Stephen Nwankwo Stephen Nwankwo Follow Oct 16 Understanding Row-level locking in databases. #database #webdev #backenddevelopment #python 5 * Raising the Difference Between raise and raise e Kfir Kfir Kfir Follow Oct 26 Raising the Difference Between raise and raise e #python #errors #backenddevelopment #backend 10 * 🛠️ Rust vs Go: The Ultimate Showdown for Backend Development ⚡ * Sep 22 🛠️ Rust vs Go: The Ultimate Showdown for Backend Development ⚡ #rust #go #backenddevelopment #programming * Building a Robust E-Commerce Platform with Go, Clean Architecture, and PostgreSQL MOHAMED FAWAS MOHAMED FAWAS MOHAMED FAWAS Follow Oct 4 Building a Robust E-Commerce Platform with Go, Clean Architecture, and PostgreSQL #go #webdev #backend* Persistent Storage vs. Cache Storage: Understanding the Differences and Use Cases Mohamed Thanveer Mohamed Thanveer Mohamed Thanveer Follow Sep 20 Persistent Storage vs. Cache Storage: Understanding the Differences and Use Cases #mongodb #redis #database #*mment 3 min read Session Management In Node JS AKINTOLA STEPHEN IYANU AKINTOLA STEPHEN IYANU AKINTOLA STEPHEN IYANU Follow Oct 10 Session Management In Node JS #session #node #backenddevelopment #javascript 10 reactions 1 c* Message Brokers: A Beginner's Guide : Mastering Deepangshi S. Deepangshi S. Deepangshi S. Follow Oct 21 Introduction to Message Brokers: A Beginner's Guide : Mastering #csharp #dotnet #backenddevelopment #* 2 min read Backend Development Roadmap Ashish Prajapati Ashish Prajapati Ashish Prajapati Follow Oct 21 Backend Development Roadmap #backenddevelopment #node #javascript * Node.js & Express.j* * Oct 19 Node.js & Express.j* #node #express #* 1 reaction * UUIDs: A Backend Engineer’s Guide for Junior Developers Usool Usool Usool Follow Sep 15 Understanding UUIDs: A Backend Engineer’s Guide for Junior Developers #webdev #python #microservices #* 4 min read Scenario 2: Mastering Backfilling for New dB Columns – Update Like a Pro! Chidiebere Ogujeiofor Chidiebere Ogujeiofor Chidiebere Ogujeiofor Follow Sep 25 Scenario 2: Mastering Backfilling for New dB Columns – Update Like a Pro! #sql #typescript #backenddevelopment #performance Add Comment 4 min read GUID como Chave Primária Leandro Luiz G. Cavalheiro Leandro Luiz G. Cavalheiro Leandro Luiz G. Cavalheiro Follow Oct 9 GUID como Chave Primária #csharp #backend #dotnet #backenddevelopment 11 * Performance Tuning in Node.js Abhis*iswal Follow Oct 9 Performance Tuning in Node.js #webd* *ad How We Build User Search at Outside: A Case Study in Database Indexing Sheila Loekito Sheila Loekito Sheila Loekito Follow Sep 3 How We Build User Search at Outside: A Case Study in Database Indexing #backenddevelopment #postgres #sql 6 * Mastering Linux on Windows: A Complete Guide to Windows Subsystem for Linux (WSL2 ) Setup and Benefits techmystic techmystic techmystic Follow Sep 5 Mastering Linux on Windows: A Complete Guide to Windows Subsystem for Linux (WSL2 ) Setup and Benefits #linux #backenddevelopment #cli 2 * REST Api Om Vaja Om Vaja Om Vaja Follow Oct 4 REST Api #restapi #api #backend #*mment 3 min read How to code a web scraper in c# dotnet 8 joedev090 joedev090 joedev090 Follow Oct 3 How to code a web scraper in c# dotnet 8 #backenddevelopment #dotnet #webscraping 2 comments 2 min read Mastering Backend Development Dan @roadmap.sh Dan @roadmap.sh Dan @roadmap.sh Follow for Roadmap.sh Oct 3 Mastering Backend Development #backend #backenddevelopment #python #database * API Architecture: A Comprehensive Guide to: REST, SOAP, GraphQL, gRPC, and OData Deepangshi S. Deepangshi S. Deepangshi S. Follow Oct 1 API Architecture: A Comprehensive Guide to: REST, SOAP, GraphQL, gRPC, and OData #backenddevelopment #dotnet #programming #csharp 3 *d 🦀 vs 🐍: Rust vs Python – The Ultimate Showdown of Speed and Simplicity for 2024 🚀 * Sep 30 🦀 vs 🐍: Rust vs Python – The Ultimate Showdown of Speed and Simplicity for 2024 🚀 #rust #python #webdev #*mment 4 min read Masking in SQL | PART 1 * Sep 29 Masking in SQL | PART 1 #sql #backend #fullst #*mment 2 min read Top 10 Backend Frameworks for 2024 Wanda Wanda Wanda Follow Sep 26 Top 10 Backend Frameworks for 2024 #backenddevelopment #backend #tooling #api 6 *d Scenario 1: When You Need to Update Multiple Rows with Different Values – The Smart Way! Chidiebere Ogujeiofor Chidiebere Ogujeiofor Chidiebere Ogujeiofor Follow Sep 24 Scenario 1: When You Need to Update Multiple Rows with Different Values – The Smart Way! #sql #typescript #backenddevelopment #performance 3 comments 3 min read 🎁Learn Python in 10 Days: Day6 William William William Follow Sep 23 🎁Learn Python in 10 Days: Day6 #programming #python #backend #* 4 min read Backend Challenge #3 Carlos Estrada Carlos Estrada Carlos Estrada Follow Sep 22 Backend Challenge #3 #challenge #backend #*mment 2 min read Thoughts on Hono? Tanmay Agrawal Tanmay Agrawal Tanmay Agrawal Follow Sep 10 Thoughts on Hono? #backend #webdev #backenddevelopment #express 2 * How is the EchoAPI Tool? Is it Safe? What is the Background of the Company? William William William Follow Sep 19 How is the EchoAPI Tool? Is it Safe? What is the Background of the Company? #postman #backenddevelopment #backend #insomnia 5 *d Data Structures in C#: A Beginner's Guide : Mastering Deepangshi S. Deepangshi S. Deepangshi S. Follow Sep 17 Data Structures in C#: A Beginner's Guide : Mastering #csharp #dotnet #backenddevelopment #programming 11 *d High performance Node.js static file serving — using Rust Mar*erg Follow for Encore Sep 16 High performance Node.js static file serving — using Rust #node #javascript #typescript #backenddevelopment 29 * Implementing Email Code Verification in Java Spring Boot Eliud Githuku Eliud Githuku Eliud Githuku Follow Aug 9 Implementing Email Code Verification in Java Spring Boot #springboot #springsecurity #jwt #* 4 min read * Mar*erg Follow for Encore Sep 4 * #node #javascript #typescript #backenddevelopment 111 reactions 18 comments 4 min read Understanding the Child Process Module in Node.js Oyedele Temitope Oyedele Temitope Oyedele Temitope Follow Sep 9 Understanding the Child Process Module in Node.js #webdev #node #backenddevelopment 9 *d REST API and Its Architecture Abhishek Panwar Abhishek Panwar Abhishek Panwar Follow Sep 7 REST API and Its Architecture #api #backenddevelopment #javascript #development *tion to Mastering Authentication Emmanuel Ayinde Emmanuel Ayinde Emmanuel Ayinde Follow Sep 6 Introduction to Mastering Authentication #beginners #security #webdev #backenddevelopment 4 *d Basics for backend development - Roadmap Rohit Prasain Rohit Prasain Rohit Prasain Follow Sep 5 Basics for backend development - Roadmap #* #backend* How RPA Transforms Business Automation and API Integration | Unlocking Efficiency : Mastering Deepangshi S. Deepangshi S. Deepangshi S. Follow Sep 5 How RPA Transforms Business Automation and API Integration | Unlocking Efficiency : Mastering #dotnet #backenddevelopment #programming #rpa * Transforming MongoDB Atlas and Fuzzy Search: Step-by-Step Guide Shariar Islam Shariar Islam Shariar Islam Follow Sep 4 Transforming MongoDB Atlas and Fuzzy Search: Step-by-Step Guide #webdev #mongodb #backend* 3 min read Leveraging Django 5.1.1 and PostgreSQL 16 for an Efficient Geo-Targeted Rating API Ingila Ejaz Ingila Ejaz Ingila Ejaz Follow for This is Learning Sep 3 Leveraging Django 5.1.1 and PostgreSQL 16 for an Efficient Geo-Targeted Rating API #python #django #backenddevelopment #restapi 2 *d Top 10 Development Toolkits Every Backend Developer Needs Wanda Wanda Wanda Follow Sep 3 Top 10 Development Toolkits Every Backend Developer Needs #backenddevelopment #tooling #developers 5 * Top 20 API Development Tools for Back-end Developers Wanda Wanda Wanda Follow Aug 29 Top 20 API Development Tools for Back-end Developers #api #development #tooling #backenddevelopment 4 *d Interesting Control Flow in the circle Sukma Rizki Sukma Rizki Sukma Rizki Follow Aug 28 Interesting Control Flow in the circle #go #google #backend #backend* Explicitly Avoiding Callback Hell Syriamme Syriamme Syriamme Follow Aug 28 Explicitly Avoiding Callback Hell #javascript #callbacks #backend #backend* 2 min read How to Pick a Backend Platform and Why We Prefer Node.js Nouman Ijaz Nouman Ijaz Nouman Ijaz Follow Aug 27 How to Pick a Backend Platform and Why We Prefer Node.js #backenddevelopment #backendengineer #node #webdev 5 * the usage of threads in backend development (python) omri turgeman omri turgeman omri turgeman Follow Nov 9 the usage of threads in backend development (python) #python #multiprocessing #backend #* 1 min read Optimizing Database Queries for Performance Obinna Obinna Obinna Follow Oct 30 Optimizing Database Queries for Performance #sql #backenddevelopment #queryperformance #databaseoptimization *... #discuss What's your favorite Go web framework? 15 comments Human Expertise in Backend Engineering: Why It Still Matters in the Age of AI New GraphQL benefits and why you should adopt it in 2024 New Go queries 2 comments Question for PHP/Laravel developers. 3 * * Understanding the Child Process Module in Node.js Data Structures in C#: A Beginner's Guide : Mastering Top 10 Backend Frameworks for 2024 High performance Node.js static file serving — using Rust Leveraging Django 5.1.1 and PostgreSQL 16 for an Efficient Geo-Targeted Rating API Raising the Difference Between raise and raise e 🎁Learn Python in 10 Days: Day6 Session Management In Node JS Understanding Row-level locking in databases. Backend Development Roadmap Top 10 Development Toolkits Every Backend Developer Needs Node.js & Express.j* How is the EchoAPI Tool? Is it Safe? What is the Background of the Company? Mastering Backend Development Introduction to Mastering Authentication * Design Patterns for Backend Development * GUID como Chave Primária * * ",
    "url": "https://dev.to/t/backenddevelopment"
  },
  {
    "body": "* # barcode Follow Hide Create Post 43 Posts Published *. Decoding 1D/2D B* * Nov 4 Decoding 1D/2D B* #cpp #node #pdf #barcode * How to Build a Python Barcode Scanner for Windows, Linux, and macOS * Oct 22 How to Build a Python Barcode Scanner for Windows, Linux, and macOS #programming #python #barcode #qrcode 4 *d C# Barcode Libraries Compared for .NET Developers Zeeshan Wazir Zeeshan Wazir Zeeshan Wazir Follow Oct 14 C# Barcode Libraries Compared for .NET Developers #csharp #barcode #developers #dotnet 2 * Barcode Reading Problem in Flutter Gustavo Guedes Gustavo Guedes Gustavo Guedes Follow Aug 16 Barcode Reading Problem in Flutter #flutter #mobile #camera #barcode Add Comment 3 min read Problema Leitura de Código Barras no Flutter Gustavo Guedes Gustavo Guedes Gustavo Guedes Follow Aug 16 Problema Leitura de Código Barras no Flutter #flutter #barcode #camera #mobile * How to Scan a Barcode in C# * Mehr Muhammad Hamza Follow Jul 5 How to Scan a Barcode in C# #webdev #barcode #csharp #dotnet 7 * Mastering Parcel Scanning with C++: Barcode and OCR Text Extraction * May 24 Mastering Parcel Scanning with C++: Barcode and OCR Text Extraction #cpp #ocr #barcode #desktop Add Comment 8 min read How to Read A Barcode in C# * Mehr Muhammad Hamza Follow Jun 3 How to Read A Barcode in C# #barcode #csharp #dotnet #aspdotnet 8 *d Web Parcel Management: Scan 1D Barcodes and Recognize Surrounding Text in Any Orientation * May 16 Web Parcel Management: Scan 1D Barcodes and Recognize Surrounding Text in Any Orientation #webdev #javascript #ocr #barcode * Windows Desktop Barcode Reader with Win32 API and Dynamsoft C++ Barcode SDK * Nov 28 '23 Building Windows Desktop Barcode Reader with Win32 API and Dynamsoft C++ Barcode SDK #cpp #windows #win32 #barcode Add Comment 6 min read How to generate Barcodes in C#: Full tutorial * Mehr Muhammad Hamza Follow Oct 16 '23 How to generate Barcodes in C#: Full tutorial #csharp #barcodegenerator #programming #barcode 34 * How to Scan Barcode in C# (Developer Tutorial) Zeeshan Wazir Zeeshan Wazir Zeeshan Wazir Follow Oct 12 '23 How to Scan Barcode in C# (Developer Tutorial) #csharp #scan #barcode #developer Add Comment 7 min read Labeling Multiple Barcodes with Augmented Reality and Dynamsoft Barcode Reader * Sep 1 '23 Labeling Multiple Barcodes with Augmented Reality and Dynamsoft Barcode Reader #android #ar #barcode #arcore Add Comment 5 min read Java – How to Read Barcode from Word, Excel, PowerPoint and PDF Alexis Alexis Alexis Follow Jan 4 '23 Java – How to Read Barcode from Word, Excel, PowerPoint and PDF #java #barcode #scan #document 2 reactions A* PHP Barcode QR Code Reading Extension on Windows and Linux * Aug 3 '22 How to Build PHP Barcode QR Code Reading Extension on Windows and Linux #php #qrcode #barcode #extension 4 reactions A* .NET 6 Barcode and QR Code SDK for Windows, Linux & macOS * Mar 31 '22 How to Build .NET 6 Barcode and QR Code SDK for Windows, Linux & macOS #dotnet #dotnet6 #barcode #qrcode 5 *d 通用条形码生成 API 接口 GuGuData GuGuData GuGuData Follow Apr 13 '22 通用条形码生成 API 接口 #gugudata #barcode #api 4 *d How to Generate Barcode in Laravel 8? Code And Deploy Code And Deploy Code And Deploy Follow Mar 28 '22 How to Generate Barcode in Laravel 8? #laravel #howto #php #barcode 7 *d How to Read Multiple Barcode and QR Code with Dynamsoft Java Barcode SDK * Mar 17 '22 How to Read Multiple Barcode and QR Code with Dynamsoft Java Barcode SDK #java #qrcode #barcode #arm64 6 * Node.js Barcode and QR Code Reader for Desktop and Web * Mar 25 '22 Node.js Barcode and QR Code Reader for Desktop and Web #node #javascript #qrcode #barcode 7 * Building Command-line Barcode and QR Code Reader in C++ * Mar 17 '22 Building Command-line Barcode and QR Code Reader in C++ #cpp #qrcode #barcode #cmake 6 *d How to Scan Barcodes in Jupyter Notebook * Dec 20 '21 How to Scan Barcodes in Jupyter Notebook #jupyter #python #barcode #qrcode 6 *d How to generate QR code in C# : Full tutorial * Mehr Muhammad Hamza Follow Dec 2 '21 How to generate QR code in C# : Full tutorial #qrcode #csharp #qrcodegenerator #barcode 29 * Building a Document Scanning and Barcode Recognition Application with Qt Python * Nov 17 '21 Building a Document Scanning and Barcode Recognition Application with Qt Python #python #qt #barcode #document 10 * How to Optimize QR Recognition Performance by Image Preprocessing and Parameter Tuning * Sep 13 '21 How to Optimize QR Recognition Performance by Image Preprocessing and Parameter Tuning #opencv #qr #python #barcode 3 * How to Develop GUI Barcode Reader for Desktop with Qt and C/C++ * Aug 9 '21 How to Develop GUI Barcode Reader for Desktop with Qt and C/C++ #qt #cpp #barcode #qrcode 2 *d Create a Barcode Generator Widget in Flutter Arun Arun Arun Follow Jun 21 '21 Create a Barcode Generator Widget in Flutter #flutter #widget #barcode #mobile 4 * Barcode generate using Laravel Framework! Laravel Article Laravel Article Laravel Article Follow Jun 21 '21 Barcode generate using Laravel Framework! #laravel #barcode #tutorial #barcodescanner 9 * Diving into Dynamsoft JavaScript Barcode Scanner * Jun 15 '21 Diving into Dynamsoft JavaScript Barcode Scanner #qrcode #javascript #barcode #scanner 2 * Flutter Barcode SDK for iOS and macOS * May 28 '21 Flutter Barcode SDK for iOS and macOS #flutter #ios #macos #barcode 4 * eSigning - Barcode signature Atir Tahir Atir Tahir Atir Tahir Follow May 27 '21 eSigning - Barcode signature #csharp #dotnet #esignature #barcode 3 *d Flutter Barcode Plugin for Linux: from Dart to C++ * May 21 '21 Flutter Barcode Plugin for Linux: from Dart to C++ #flutter #linux #barcode #qrcode 3 * Flutter Barcode Plugin: Writing C++ Code for Windows Desktop * Apr 29 '21 Flutter Barcode Plugin: Writing C++ Code for Windows Desktop #flutter #windows #barcode 6 *d How to Implement Flutter Barcode Scanner from Scratch * Apr 22 '21 How to Implement Flutter Barcode Scanner from Scratch #flutter #barcode #qrcode #android 10 reactions A* Camera Barcode Scanner App in Xamarin.Forms * Apr 9 '21 How to Build Camera Barcode Scanner App in Xamarin.Forms #xamarinforms #xamarin #barcode #camera 4 reactions A* Desktop Barcode Scanner in Java and Kotlin * Mar 10 '21 How to Build Desktop Barcode Scanner in Java and Kotlin #kotlin #gradle #java #barcode 5 * A QR Code Primer Neil Syiemlieh Neil Syiemlieh Neil Syiemlieh Follow Feb 20 '21 A QR Code Primer #barcode #qr #beginners 4 reactions 2 comments 11 min read Barcode generation and recognition in-memory with GDI+, STD and Aspose.Barcode for C++ libraries AsposeAG AsposeAG AsposeAG Follow Nov 18 '20 Barcode generation and recognition in-memory with GDI+, STD and Aspose.Barcode for C++ libraries #cpp #aspose #barcode #tutorial 6 * Connect a Barcode Scanner to an Electron Desktop App Yoram Kornatzky Yoram Kornatzky Yoram Kornatzky Follow Oct 28 '20 Connect a Barcode Scanner to an Electron Desktop App #electronjs #qrcode #barcode #desktop 18 * QR Code and Barcode Scanning with Ionic & Capacitor Abhijeet Rathore Abhijeet Rathore Abhijeet Rathore Follow for Enappd Mar 29 '20 QR Code and Barcode Scanning with Ionic & Capacitor #ionic #capacitor #qrcode #barcode 8 reactions Add Comment 22 min read BarCode and QR Code Scanning in React Native Apps Shadman Shadman Shadman Follow for Enappd Mar 29 '20 BarCode and QR Code Scanning in React Native Apps #reactnative #qrcode #barcode #scanner 8 reactions Add Comment 22 min read Ionic 4 QR Code, Barcode Scanning Shadman Shadman Shadman Follow for Enappd Mar 26 '20 Ionic 4 QR Code, Barcode Scanning #ionic #qrcode #barcode #scanning 7 reactions Add Comment 17 min read Generate and Read Barcode in Java E-iceblue Product Family E-iceblue Product Family E-iceblue Product Family Follow Apr 11 '19 Generate and Read Barcode in Java #java #spirebarcode #barcode #qrcode 6 *d [2024] Best Barcode Reader SDK: Scandit, Scanbot SDK, and Dynamsoft Alex Ray Alex Ray Alex Ray Follow Jan 9 [2024] Best Barcode Reader SDK: Scandit, Scanbot SDK, and Dynamsoft #sdk #barcode #mobile #android 2 * How to Generate QR Code in C# (Developer Tutorial) Mohammed Ibrahim Mohammed Ibrahim Mohammed Ibrahim Follow Oct 23 '23 How to Generate QR Code in C# (Developer Tutorial) #qr #ironbarcode #csharp #barcode Add Comment 6 min read Comparison of barcode scanner libraries Yurich Yurich Yurich Follow Apr 18 '23 Comparison of barcode scanner libraries #programming #webdev #barcode #scanner 1 reaction 2 comments 3 min read Integration of SAP WM with Barcode Scanners | Speranza IoT Blog Speranza Speranza Speranza Follow Dec 15 '21 Integration of SAP WM with Barcode Scanners | Speranza IoT Blog #sap #barcode #integration #scanner Add Comment 2 min read How to Optimize Parameters for Multiple QR Code Decoding in a Single Image with YOLO * Dec 2 '21 How to Optimize Parameters for Multiple QR Code Decoding in a Single Image with YOLO #yolo #qr #barcode #machinelearning 1 reaction 1 comments 7 min read Transfer Data with Animated QR codes xulihang xulihang xulihang Follow Oct 8 '21 Transfer Data with Animated QR codes #barcode #javascript * loading... t* Build a Python Barcode Scanner for Windows, Linux, and macOS * * ",
    "url": "https://dev.to/t/barcode"
  },
  {
    "body": "* Beginners Follow Hide \"A journey of a thousand miles begins with a single step.\" -Chinese Proverb * UPDATED AUGUST 2, 2019 This tag is dedicated to beginners to programming, development, networking, or to a particular language. Everything should be geared towards that! For Questions... Consider using this tag along with #help, if... You are new to a language, or to programming in general, You want an explanation with NO prerequisite knowledge required. You want insight from more experienced developers. Please do not use this tag if you are merely new to a tool, library, or framework. See also, #explainlikeimfive For Articles... Posts should be specifically geared towards true beginners (experience level 0-2 out of 10). Posts should require NO prerequisite knowledge, except perhaps general (language-agnostic) essentials of programming. Posts should NOT merely be for beginners to a tool, library, or framework. If your article does not meet these qualifications, please select a different tag. Promotional Rules Posts should NOT primarily promote an external work. This is what Listings is for. Otherwise accepable posts MAY include a brief (1-2 sentence) plug for another resource at the bottom. Resource lists ARE acceptable if they follow these rules: Include at least 3 distinct authors/creators. Clearly indicate which resources are FREE, which require PII, and which cost money. Do not use personal affiliate links to monetize. Indicate at the top that the article contains promotional links. about #beginners If you're writing for this tag, we recommend you read this article. If you're asking a question, read this article. tag moderators 70316 Posts Published Older #beginners *171 *. 🔥 * 🚀 * Nov 9 🔥 * 🚀 #discuss #webdev #productivity #beginners 92 reactions 8 comments 70 min read Strings: Understanding Mutability and Immutability Arshi Saxena Arshi Saxena Arshi Saxena Follow Nov 10 Strings: Understanding Mutability and Immutability #java #programming #interview #beginners 7 * Tough Task? Discover How Google’s AI Can Help You Understand Your Algorithm and Codes Faster. * Chiamaka Ebolue Follow Nov 10 Tough Task? Discover How Google’s AI Can Help You Understand Your Algorithm and Codes Faster. #google #beginners #productivity #coding * Tech Made Simple: The Key to Understanding What Really Matters. * Chiamaka Ebolue Follow Nov 10 Tech Made Simple: The Key to Understanding What Really Matters. #beginners #tutorial #womenintech #p* 6 min read Timer - * 10 Timer - Custom Hooks #webdev #react #learning #* Day 9: Understanding Strings in Python | 100 Days Python Abdulla Ansari Abdulla Ansari Abdulla Ansari Follow Nov 10 Day 9: Understanding Strings in Python | 100 Days Python #100daysofcode #python #coding #* Day 8: User Input in Python | 100 Day Python Abdulla Ansari Abdulla Ansari Abdulla Ansari Follow Nov 10 Day 8: User Input in Python | 100 Day Python #100daysofcode #programming #beginners #python Add Comment 4 min read Путеводитель по HTTP-кодам в Java: Как понять, что сервер от тебя хочет? Olga Lugacheva Olga Lugacheva Olga Lugacheva Follow Nov 9 Путеводитель по HTTP-кодам в Java: Как понять, что сервер от тебя хочет? #java #webdev #* 6 Ways Handle WebSocket Load Balancing Without Losing the Connection Thread * ) Hoài Nhớ ( Nick ) Follow Nov 9 6 Ways Handle WebSocket Load Balancing Without Losing the Connection Thread #webdev #websocket #beginners #devops 5 *ad Maze generator, written in C Eniek Eniek Eniek Follow Nov 9 Maze generator, written in C #c #lea* read test md Ijat Ayam Ijat Ayam Ijat Ayam Follow Nov 9 test md #sdf #dfd #*mment 8 min read * Bhuwan chettri Bhuwan chettri Bhuwan chettri Follow Nov 9 * #javascript #*t 1 min read * Devops Den Devops Den Devops De* 3 min read New here * Ayush Kumar Vishwakarma Follow Nov 9 New here #webdev #* Add Comment 1 min read Which websites offer free app building without coding? Natasha Rockbell Natasha Rockbell Natasha Rockbell Follow Nov 9 Which websites offer free app building without coding? #beginners * Redux Simple Guide * Nov 9 Redux Simple Guide #redux #react #*mment 5 min read * 🚀 Trish Trish Trish Follow Nov 9 * 🚀 #rust #tutorial #programming #beginners 2 * The power of asking for help Gabriel Toma Gabriel Toma Gabriel Toma Follow Nov 9 The power of asking for help #webdev #beginners #leadership #career * Building Scalable Applications with Azure Functions: Best Practices and Tips CodeStreet CodeStreet CodeStreet Follow Nov 9 Building Scalable Applications with Azure Functions: Best Practices and Tips #azure #azurefunctions #beginners #dotnet Add Comment 6 min read Javascript setTimeout method - All you need to know alienfoxx alienfoxx alienfoxx Follow Nov 9 Javascript setTimeout method - All you need to know #javascript #beginners #webdev Add Comment 11 min read Redux: Intro + Building a Modern State Management System with Redux Toolkit * Nov 9 Redux: Intro + Building a Modern State Management System with Redux Toolkit #redux #react #webdev #beginners Add Comment 8 min read 💡 Do you know the different units of measurement in CSS? px, em, rem, vh, and vw! 💡 * Yanaiara Oliveira Follow Nov 9 💡 Do you know the different units of measurement in CSS? px, em, rem, vh, and vw! 💡 #javascript #beginners #frontend #cs*o create a Load Balancer in Azure Adedapo Adedapo Adedapo Follow Nov 9 How to create a Load Balancer in Azure #beginners #tutorial #cloud #devops Add Comment 2 min read Five Essential Traits of Successful Programmers Jose Maria Iriarte Jose Maria Iriarte Jose Maria Iriarte Follow Nov 9 Five Essential Traits of Successful Programmers #beginners #career #webdev #community * HTML Basics: What I Learned in My First Lesson Byali Macqueline Byali Macqueline Byali Macqueline Follow Nov 9 HTML Basics: What I Learned in My First Lesson #webdev #beginners #html #codingbasic*o Build Your Own Website with a Raspberry Pi: An Entertaining Guide Yongkang Cheng Yongkang Cheng Yongkang Cheng Follow Nov 9 How to Build Your Own Website with a Raspberry Pi: An Entertaining Guide #beginners #raspberrypi #webdev Add Comment 12 min read Demystifying CXL Heterogeneous Systems with Heimdall Benchmark * 9 Demystifying CXL Heterogeneous Systems with Heimdall Benchmark #* 3 min read BitNet a4.8: 4-bit Activations Push 1-bit LLMs to State-of-the-Art Performance * 9 BitNet a4.8: 4-bit Activations Push 1-bit LLMs to State-of-the-Art Performance #* 3 min read Small But Mighty: Survey of Small Language Models in the LLM Era * 9 Small But Mighty: Survey of Small Language Models in the LLM Era #* 5 min read MeTA: Test-Time Multi-Source Adaptation to Improve Model Robustness on Shifting Distributions * 9 MeTA: Test-Time Multi-Source Adaptation to Improve Model Robustness on Shifting Distributions #* 4 min read Unofficial Internship for students Friptu Teodor Friptu Teodor Friptu Teodor Follow Nov 9 Unofficial Internship for students #webdev #beginners #learning #career Add Comment 1 min read * * Emma Richardson Follow Nov 9 * #* #* Java’s Journey: From Coffee to Code — Exploring 2024’s Most Resilient Language Lahrach Omar Lahrach Omar Lahrach Omar Follow Nov 9 Java’s Journey: From Coffee to Code — Exploring 2024’s Most Resilient Language #java #* 4 min read * Jefferson Jefferson Jefferso* 11 min read New Adam Modification Unlocks Optimal Convergence for Any Beta2 Value * 9 New Adam Modification Unlocks Optimal Convergence for Any Beta2 Value #* 3 min read The Role of Semantic HTML in Enhancing SEO and Web Accessibility Denis Kinyua Denis Kinyua Denis Kinyua Follow Nov 9 The Role of Semantic HTML in Enhancing SEO and Web Accessibility #beginners #development #web #html Add Comment 3 min read Q-Seg: Quantum Magic for Image Segmentation (Yes, You Heard Right) Supreeth Mysore Venkatesh Supreeth Mysore Venkatesh Supreeth Mysore Venkatesh Follow Nov 9 Q-Seg: Quantum Magic for Image Segmentation (Yes, You Heard Right) #quantum #ai #tutorial #* * * 9 * #* #* * Grenish rai Grenish rai Grenish rai Follow Nov 9 * #* #tutorial 8 * Tic-Tac-Toe Game using * * 9 Tic-Tac-Toe Game using * #webdev #javascript #* Comment 3 min read 🚀 * MAHMUDUL HASAN NABIL MAHMUDUL HASAN NABIL MAHMUDUL HASAN NABIL Follow Nov 8 🚀 * #discuss #webdev #* 3 min read THE ROLE OF SEMANTIC HTML IN ENHANCING SEO AND WEB ACCESSIBILITY junky20 junky20 junky20 Follow Nov 8 THE ROLE OF SEMANTIC HTML IN ENHANCING SEO AND WEB ACCESSIBILITY #webdev #html #devchallenge #* Introducing ThrusterKit: A Boilerplate to Speed Up Your SaaS App Launch Matt Nutsch Matt Nutsch Matt Nutsch Follow Nov 8 Introducing ThrusterKit: A Boilerplate to Speed Up Your SaaS App Launch #webdev #javascript #beginners #react Add Comment 1 min read Working with Unary Operators Mercy Mercy Mercy Follow Nov 9 Working with Unary Operators #webdev #java #* Comment 4 min read How Semantic HTML enhances SEO and Accessibility Naida Malemba Naida Malemba Naida Malemba Follow Nov 8 How Semantic HTML enhances SEO and Accessibility #webdev #beginners #a11y * a Responsive Four Card Feature Section Brian Meinert Brian Meinert Brian Meinert Follow Nov 8 Building a Responsive Four Card Feature Section #webdev #* Add Comment 5 min read The I* Margaret Wanjiru Margaret Wanjiru Margaret Wanjiru Follow Nov 8 The I* #webdev #programming #* 9 min read React lifecycles - * 8 React lifecycles - Custom Hooks #webdev #react #beginners #* Bruno vs. EchoAPI: A Detailed Comparison of Top API Management Tools Daniel Ma Daniel Ma Daniel Ma Follow Nov 8 Bruno vs. EchoAPI: A Detailed Comparison of Top API Management Tools #apimanagement #webdev #beginners #echoapi Add Comment 2 min read Exploring Decentralized Identity (DID) in Blockchain: Privacy and Control for Users Andy Larkin Andy Larkin Andy Larkin Follow Nov 8 Exploring Decentralized Identity (DID) in Blockchain: Privacy and Control for Users #blockchain #web3 #webdev #* CO Emissions Trends and their Significance eric mugo eric mugo eric mugo Follow Nov 8 CO Emissions Trends and their Significance #* NinjaDoH: Censorship-Resistant Moving DoH Server Using Hyperscalers and IPNS * 8 NinjaDoH: Censorship-Resistant Moving DoH Server Using Hyperscalers and IPNS #* 3 min read Deploy* * 2 Busa Ayim-Odu Busa Ayim-Odu Busa Ayim-Odu Follow Nov 8 * 2 #beginners #devops #learning #azure * Unraveling Flow Dynamics: Physics-Informed AI Reconstructs Density Fields from Shadowgraphs * 8 Unraveling Flow Dynamics: Physics-Informed AI Reconstructs Density Fields from Shadowgraphs #* 4 min read Image Tokenization Adapted to Visual Complexity: ALITRA's Dynamic Approach * 8 Image Tokenization Adapted to Visual Complexity: ALITRA's Dynamic Approach #* 4 min read Closing the Gap: Evaluating Video Generation's Physical Realism * 8 Closing the Gap: Evaluating Video Generation's Physical Realism #* 4 min read Python’s Power Squad: Lists, Tuples, Sets, and Dictionaries – The Ultimate Data Dream Team Aishwarya Raj Aishwarya Raj Aishwarya Raj Follow Nov 8 Python’s Power Squad: Lists, Tuples, Sets, and Dictionaries – The Ultimate Data Dream Team #python #datastructures #* Agent K v1.0 Automates Data Science at Kaggle Grandmaster Level with Self-Learning * 9 Agent K v1.0 Automates Data Science at Kaggle Grandmaster Level with Self-Learning #* 4 min read 3 Methods of Solving UN-responsive Fonts (w/ CSS) Technophile Technophile Technophile Follow Nov 8 3 Methods of Solving UN-responsive Fonts (w/ CSS) #css #a11y #typography #* * follow us: */ 01:13 * 10 (25 mins ago) * follow us: */ #webdev #javascript #* Comment 1 min read Why are Type Guards Necessary? Discuss Various Types of Type Guards and Their Use Cases. Mitu M Mitu M Mitu M Follow Nov 10 (1 hour ago) Why are Type Guards Necessary? Discuss Various Types of Type Guards and Their Use Cases. #typescript #* *? taylor taylor taylor Follow Nov 10 (5 hours ago) *? #javascript #*t 2 min read loading... #discuss 🔥 * 🚀 8 comments 🚀 * New trending guides/resources Scripting in DevOps: A Complete Guide from Beginner to Advanced DevOps Automation with Shell Scripting 🚀 2* Must Know 🚀 Python for DevOps: A Comprehensive Guide from Beginner to Advanced 9 Interesting Open Source Projects You Should Explore Right Now🥷🏻 🎉 Learn AWS DevOps from Zero: A Complete Beginner’s Guide End-to-End AWS DevOps Project: Automate Java Application Build and Deployment on Amazon EKS Using Git as Your Personal To-Do List How to Crack a DevOps Interview in One Attempt: A Complete Guide for Freshers and Experienced 8 Open-Source Tools to grow your app and reach new markets! 🔥 Design Patterns demystified with examples 100 AWS DevOps * From Junior to Senior Developer: Essential Skills You Need in 2024 5 Open-Source Projects That Will Transform ⚡️ Your AI Workflow 💻 Top UI Component Libraries for React What is Platform Engineering? How to become Great Software Developer 10 React One-Liners Every UI Developer Should Know 5 Must-Have VS Code Extensions for New Programmers: Tools That Go Beyond the Basics Best Practices for Code Reviews That Foster Team Collaboration recently queried cURL vs Postman Production Environment Pascal Case CSS Game Best Software Development Books Amazon Online Assessment What Does API Stand For Linux Bash Commands JavaScript Playground Django Allauth Software Engineer Interview Coding Games for Beginners Method vs Function Eslint Vscode Joi JS Git Revert File Learn Linux Python Instantiate Class CSS Height Full Page Java Script Game Code*nsor Neon * ",
    "url": "https://dev.to/t/beginners"
  },
  {
    "body": "* # bunjs Follow Hide Create Post 149 Posts Published Older #bunjs posts 1 2 *. Exploring Bun.js Over Deno: A Humble Developer's Tale Agustin Bereciartua Agustin Bereciartua Agustin Bereciartua Follow Nov 8 Exploring Bun.js Over Deno: A Humble Developer's Tale #bunjs #deno Add Comment 3 min read Learning About Security: SQL Injection kaazzu kaazzu kaazzu Follow Nov 7 Learning About Security: SQL Injection #bunjs #sqlite3 #sqlinjection #hono Add Comment 3 min read * 🎨 * Noureddine Belguinan Follow Nov 6 * 🎨 #node #bunjs #npm #*t 2 min read Bun (Bite-size Article) koshirok096 koshirok096 koshirok096 Follow Oct 17 Bun (Bite-size Article) #bunjs #node #backend Add Comment 4 min read Easy and Fast API Development with Bun and Hono: A Simple Project in 5 Minutes koshirok096 koshirok096 koshirok096 Follow Oct 25 Easy and Fast API Development with Bun and Hono: A Simple Project in 5 Minutes #bunjs #hono #beginners 1 comment 5 min read Bun: A Faster, Modern Alternative to Node.js for JavaScript Development Ashis*apati Follow Oct 20 Bun: A Faster, Modern Alternative to Node.js for JavaScript Development #node #bunjs #beginners #typescript 8 * Deno 2.0 vs Bun: The Battle of Modern JavaScript Runtimes Ashis*apati Follow Oct 22 Deno 2.0 vs Bun: The Battle of Modern JavaScript Runtimes #javascript #deno #bunjs #webcomponents 2 * Boring Finance: Fancy Record Keeping - Call for all the Open-Source Contributors Grace Rasaily Grace Rasaily Grace Rasaily Follow Oct 21 Boring Finance: Fancy Record Keeping - Call for all the Open-Source Contributors #webdev #javascript #opensource #bunjs 5 *d ⚡Mencoba Komparasi Seberapa Kencang Performa Bun dibandingkan Node Ferry Ananda Febian Ferry Ananda Febian Ferry Ananda Febian Follow Sep 18 ⚡Mencoba Komparasi Seberapa Kencang Performa Bun dibandingkan Node #node #bunjs #performance #indonesia 7 * A take on Go Style Error Handling in JavaScript Anton Nesterov Anton Nesterov Anton Nesterov Follow Oct 16 A take on Go Style Error Handling in JavaScript #javascript #typescript #node #bunjs 3 * Hono.js Benchmark: Node.js vs. Deno 2.0 vs. Bun — Which Is the Fastest? Probir Sarkar Probir Sarkar Probir Sarkar Follow Oct 15 Hono.js Benchmark: Node.js vs. Deno 2.0 vs. Bun — Which Is the Fastest? #javascript #node #deno #bunjs 2 *d Deno 2: JavaScript's New Superhero or Just Another Cape? Thijs de Z Thijs de Z Thijs de Z Follow Oct 13 Deno 2: JavaScript's New Superhero or Just Another Cape? #deno #typescript #vercel #bunjs * ⚔️ Rust vs Go vs Bun vs Node.js: The Ultimate 2024 Performance Showdown 🚀 * Oct 5 ⚔️ Rust vs Go vs Bun vs Node.js: The Ultimate 2024 Performance Showdown 🚀 #rust #go #bunjs #node 5 * * Костя Третяк Костя Третяк Костя Третяк Follow Aug 28 * #node #bunjs #express #ditsmod 2 *d Migrating from shell script to \"Bun script\" Edimar Cardoso Edimar Cardoso Edimar Cardoso Follow Sep 27 Migrating from shell script to \"Bun script\" #bunjs #devops #shell #* 3 min read Complete Crash Course: Elysia.js Framework in Bangla - Build Scalable Apps - 2024 Developer Sabbir Developer Sabbir Developer Sabbir Follow Sep 23 Complete Crash Course: Elysia.js Framework in Bangla - Build Scalable Apps - 2024 #elysiajs #bunjs #framework Add Comment 1 min read Bunjs with PM2 Kitanga Nday Kitanga Nday Kitanga Nday Follow Sep 15 Bunjs with PM2 #webdev #javascript #bunjs #backend * Introducing undb: A Private-First, No-Code Platform for Developers and Makers nichenqin nichenqin nichenqin Follow Sep 14 Introducing undb: A Private-First, No-Code Platform for Developers and Makers #nocode #bunjs #svelte 2 * BunJS Is Indeed Faster than NodeJS Anton Nesterov Anton Nesterov Anton Nesterov Follow Sep 1 BunJS Is Indeed Faster than NodeJS #bunjs #node 1 reaction 2 comments 3 min read Turbocharge Your Web Development with Bun.js and Vite Stas Gorshenin Stas Gorshenin Stas Gorshenin Follow Jul 28 Turbocharge Your Web Development with Bun.js and Vite #bunjs #vite #vallettasoftware #webdev Add Comment 3 min read Node vs Bun: One Billion Row Challenge Nikita Vasilev Nikita Vasilev Nikita Vasilev Follow Jul 27 Node vs Bun: One Billion Row Challenge #javascript #node #bunjs #performance Add Comment 8 min read Valtio: Unveiling the State Management Ninja with Bun and Vite Guhaprasaanth Nandagopal Guhaprasaanth Nandagopal Guhaprasaanth Nandagopal Follow Jul 13 Valtio: Unveiling the State Management Ninja with Bun and Vite #react #valtio #bunjs #vite Add Comment 13 min read Zenet Technology Onboards Brisa: A New Era of Web Development Albert Sabaté Albert Sabaté Albert Sabaté Follow Aug 7 Zenet Technology Onboards Brisa: A New Era of Web Development #brisa #development #frontend #bunjs 2 * How To: Build and Run a Next.js app with Docker Shipyard DevRel Shipyard DevRel Shipyard DevRel Follow Aug 1 How To: Build and Run a Next.js app with Docker #nextjs #bunjs #docker #* 5 min read Building a Fast and Compact SQLite Cache Store sjdonado sjdonado sjdonado Follow Jul 24 Building a Fast and Compact SQLite Cache Store #bunjs #sqlite3 #msgpackr #cbor 2 reacti*ing cross-platform apps with Bun v1.1 Megan Le* Jul 16 Developing cross-platform apps with Bun v1.1 #bunjs #deno #node 5 reactions 2 comments 10 min read AWS Lambda in Deno or Bun Alexander Demin Alexander Demin Alexander Demin Follow Jul 4 AWS Lambda in Deno or Bun #deno #bunjs #aws #awslambda 3 * Should I use server-side rendering with Next.js, or would Express or Bun.js be better for scalability? Bhagat Surya Bhagat Surya Bhagat Surya Follow May 15 Should I use server-side rendering with Next.js, or would Express or Bun.js be better for scalability? #discuss #nextjs #node #bunjs * JWT Refresh Token Authentication with Elysia JS and Prisma: A Step-by-Step Guide H*m Follow Jun 13 Implement JWT Refresh Token Authentication with Elysia JS and Prisma: A Step-by-Step Guide #prisma #typescript #webdev #bunjs 19 reactions 8 comments 10 min read [Hono] Simple Messaging App Using Bun and WebSocket Yuta Kusuno Yuta Kusuno Yuta Kusuno Follow Jun 10 [Hono] Simple Messaging App Using Bun and WebSocket #hono #bunjs #typescript #react 20 reactions 1 comment 8 min read A crash course in using Bunjs instead of Node.js on Linux chovy chovy chovy Follow Jun 9 A crash course in using Bunjs instead of Node.js on Linux #linux #bunjs #node #* Learn Bun.sh in Simple ways Aakash Aakash Aakash Follow Jun 9 Learn Bun.sh in Simple ways #webdev #bunjs #beginners #* Getting started with Bun: A beginners guide Talha Ali Talha Ali Talha Ali Follow May 19 Getting started with Bun: A beginners guide #bunjs #webdev #javascript #* TypeScript Adventures: Prop Drilling Down the Rabbit Hole Stephen Smith Stephen Smith Stephen Smith Follow May 16 TypeScript Adventures: Prop Drilling Down the Rabbit Hole #vue #typescript #vite #bunjs 5 *d When to Use Bun Instead of Node.js * Antonello Zanini Follow for AppSignal May 15 When to Use Bun Instead of Node.js #bunjs #node 3 * Frameworks of BunJS: ElysiaJS and Hono Vo Van Thanh Vo Van Thanh Vo Van Thanh Follow May 15 Frameworks of BunJS: ElysiaJS and Hono #webdev #javascript #bunjs #typescript 8 * A new cross-platform version manager for SDKs moqsien moqsien moqsien Follow Apr 28 A new cross-platform version manager for SDKs #go #node #bunjs #deno * Node Test Runner vs Bun Test Runner (with TypeScript and ESM) * Apr 26 Node Test Runner vs Bun Test Runner (with TypeScript and ESM) #testing #node #bunjs #typescript * API using Deno and ElyasiaJS Santosh Anand Santosh Anand Santosh Anand Follow Apr 25 API using Deno and ElyasiaJS #node #deno #typescript #bunjs *? More Like No-Go Slow! Bun.js and Elysia.js to the Rescue ✨ Muhammad Muzammil Loya Muhammad Muzammil Loya Muhammad Muzammil Loya Follow Apr 23 Node.js? More Like No-Go Slow! Bun.js and Elysia.js to the Rescue ✨ #webdev #javascript #bunjs #elysiajs * Bun Runtime - Introduction (Part 1) Anish Ghimire Anish Ghimire Anish Ghimire Follow Apr 14 Bun Runtime - Introduction (Part 1) #bunjs #javascript #cleavr #typescript * Bun - The One Tool for All Your JavaScript/Typescript Project's Needs? Maina Wycliffe Maina Wycliffe Maina Wycliffe Follow for This is Learning Apr 2 Bun - The One Tool for All Your JavaScript/Typescript Project's Needs? #javascript #webdev #bunjs #*t 8 min read Run Bun! Command Guide Parth • imParth Parth • imParth Parth • imParth Follow Apr 9 Run Bun! Command Guide #npm #bunjs #javascript #node Add Comment 2 min read Rescuing legacy Node.js projects with Bun Sadman Yasar Sayem Sadman Yasar Sayem Sadman Yasar Sayem Follow Apr 7 Rescuing legacy Node.js projects with Bun #bunjs #node #adminjs #javascript 7 * Kickstart your development with Bun AgentQuack AgentQuack AgentQuack Follow Apr 4 Kickstart your development with Bun #bunjs #webdev #javascript * From Node to Bun: A New Dawn for JavaScript Engines? Sanchit Bajaj Sanchit Bajaj Sanchit Bajaj Follow Apr 3 From Node to Bun: A New Dawn for JavaScript Engines? #javascript #webdev #node #bunjs 3 *d 🐺 REST APIs with Elysia.js 🌿 James Robert Lund III James Robert Lund III James Robert Lund III Follow Mar 25 🐺 REST APIs with Elysia.js 🌿 #elysia #bunjs #api #webdev 20 reactions 5 comments 6 min read Will Bun replace Node.JS after windows launch? Rajaneesh R Rajaneesh R Rajaneesh R Follow Mar 23 Will Bun replace Node.JS after windows launch? #discuss #news #node #bunjs 1 comment 1 min read Bun error Krishna Bansal Krishna Bansal Krishna Bansal Follow Mar 12 Bun error #errors #bunjs #webdev Add Comment 1 min read Extending Hotwire beyond Ruby on Rails Daniel Bengl Daniel Bengl Daniel Bengl Follow for Renuo AG Mar 8 Extending Hotwire beyond Ruby on Rails #rails #hotwire #bunjs #webdev * Bun-ify Your Project Anna Anna Anna Follow for Beau Mar 6 Bun-ify Your Project #javascript #bunjs #vue #nuxt 9 * HTMX with Bun: A Real World App sjdonado sjdonado sjdonado Follow Mar 5 HTMX with Bun: A Real World App #htmx #bunjs #tailwindcss #opensource 9 *d Developing your own Chrome Extension - Fixing Errors with ts-morph and using Buns API (Part 4) JoLo JoLo JoLo Follow Mar 3 Developing your own Chrome Extension - Fixing Errors with ts-morph and using Buns API (Part 4) #typescript #chrome #bunjs #tsmorph Add Comment 6 min read Developing your own Chrome Extension in Bun and Typescript (Part 2) JoLo JoLo JoLo Follow Mar 2 Developing your own Chrome Extension in Bun and Typescript (Part 2) #bunjs #chrome #type*ent 7 min read Will Bun.js replace Node.js? Renato Renato Renato Follow Feb 28 Will Bun.js replace Node.js? #node #bunjs #programming #* 🍞 Bun, A Faster JavaScript Runtime James Robert Lund III James Robert Lund III James Robert Lund III Follow Feb 27 🍞 Bun, A Faster JavaScript Runtime #bunjs #node #webdev #javascript 3 * An 85 Lines of Code Static Site Generator with Bun and JSX Sergei Orlov Sergei Orlov Sergei Orlov Follow Jan 24 An 85 Lines of Code Static Site Generator with Bun and JSX #typescript #bunjs #jsx #ssg * Elysia: A Bun-first Web Framework Urmalveer Singh Urmalveer Singh Urmalveer Singh Follow Feb 5 Elysia: A Bun-first Web Framework #webdev #bunjs #elysia #beginners 74 reactions 16 comments 3 min read Bun Agus Sudarmanto Agus Sudarmanto Agus Sudarmanto Follow Feb 11 Bun #webdev #bunjs #* Why we chose Bun Christopher Ribeiro Christopher Ribeiro Christopher Ribeiro Follow for Alertpix Feb 8 Why we chose Bun #* #bunjs 8 * Nestjs : Bun vs Nodejs Arash Arash Arash Follow Oct 24 Nestjs : Bun vs Nodejs #nestjs #bunjs #node #typescript 2 reactions Add C* Should I use server-side rendering with Next.js, or would Express or Bun.js be better for scalability? New Will Bun replace Node.JS after windows launch? 1 comment Bun.js hype New My Opinion on Adopting New Technologies: Using Bun as a Case Study. 2 comments So tried bun! the new JS runtime. 4 * ⚔️ Rust vs Go vs Bun vs Node.js: The Ultimate 2024 Performance Showdown 🚀 Hono.js Benchmark: Node.js vs. Deno 2.0 vs. Bun — Which Is the Fastest? Bun: A Faster, Modern Alternative to Node.js for JavaScript Development * 🎨 Deno 2: JavaScript's New Superhero or Just Another Cape? A take on Go Style Error Handling in JavaScript * Introducing undb: A Private-First, No-Code Platform for Developers and Makers Boring Finance: Fancy Record Keeping - Call for all the Open-Source Contributors ⚡Mencoba Komparasi Seberapa Kencang Performa Bun dibandingkan Node Migrating from shell script to \"Bun script\" * * ",
    "url": "https://dev.to/t/bunjs"
  },
  {
    "body": "* # cdk Follow Hide Create Post 534 Posts Published Older #cdk posts 1 2 3 4 5 6 7 8 *. * * 4 * #cdk #*n read Simplifying Cloud Infrastructure with AWS CDK Igo*lli Follow Oct 30 Simplifying Cloud Infrastructure with AWS CDK #cloud #aws #cdk Add Comment 3 min read AWS CDK + Localstack (API Gateway, Lambda, SQS, DynamoDB,TypeScript) gins p cyriac gins p cyriac gins p cyriac Follow Nov 3 AWS CDK + Localstack (API Gateway, Lambda, SQS, DynamoDB,TypeScript) #aws #typescript #cdk #webdev 3 * API Gateway integration with AWS Services. Sharad Khambe Sharad Khambe Sharad Khambe Follow Oct 29 API Gateway integration with AWS Services. #cdk #aws #apigateway #s3 Add Comment 5 min read AWS CDK Sharad Khambe Sharad Khambe Sharad Khambe Follow Oct 17 AWS CDK #aws #cdk #devops Add Comment 3 min read Effortless Debugging: AWS CDK TypeScript Projects in VSCode Ian Ian Ian Follow Oct 27 Effortless Debugging: AWS CDK TypeScript Projects in VSCode #aws #serverless #cdk #vscode 6 *d AWS CDK context validation Viacheslav Snizhko Viacheslav Snizhko Viacheslav Snizhko Follow Oct 14 AWS CDK context validation #cdk #zod #context #aw*o combine SQS and SNS to implement multiple Consumers (Part 2) Kevin Lac*tio Kemta Follow Oct 15 How to combine SQS and SNS to implement multiple Consumers (Part 2) #cdk #eventdriven #springboot #aws 2 *d Serverless Code-Signing (EV) with KMS and Fargate Sebastian Sebastian Sebastian Follow for AWS Heroes Oct 13 Serverless Code-Signing (EV) with KMS and Fargate #aws #cdk #infrastructureascode #* 1 min read Techniques to Save Costs Using AWS Lambda Functions with CDK * Wallace Freitas Follow Nov 4 Techniques to Save Costs Using AWS Lambda Functions with CDK #aws #cdk #lambda #typescript 6 *d How to build an API with Lambdas, API Gateway and deploy with AWS CDK Calvin Torra Calvin Torra Calvin Torra Follow Oct 11 How to build an API with Lambdas, API Gateway and deploy with AWS CDK #aws #cdk #lambda #restapi Add Comment 1 min read Deploy a Docker Image to ECS with Auto Scaling Using AWS CDK in Minutes * 3 Deploy a Docker Image to ECS with Auto Scaling Using AWS CDK in Minutes #aws #cdk #devops #docker 6 *d Efficient Kubernetes Cluster Deployment: Accelerating Setup with EKS Blueprints saifeddine Rajhi saifeddine Rajhi saifeddine Rajhi * Oct 21 Efficient Kubernetes Cluster Deployment: Accelerating Setup with EKS Blueprints #eks #aws #terraform #cdk 9 * Hosting Applications with AWS CDK: An Introduction to Infrastructure as Code Yuiko Koyanagi Yuiko Koyanagi Yuiko Koyanagi Follow Oct 16 Hosting Applications with AWS CDK: An Introduction to Infrastructure as Code #aws #terraform #cdk #*t 6 min read Creating a new AWS CDK Project and deploying a Lambda Function Calvin Torra Calvin Torra Calvin Torra Follow Oct 7 Creating a new AWS CDK Project and deploying a Lambda Function #cdk #aws #lambda #* CDK Mastery: Team Evolution through SECI Model Yusuke Shimizu Yusuke Shimizu Yusuke Shimizu * Sep 13 CDK Mastery: Team Evolution through SECI Model #aws #cdk #devops #teamwork 4 *d How to publish custom cdk-nag rules and rule packs with Projen Julian Michel Julian Michel Julian Michel * Sep 23 How to publish custom cdk-nag rules and rule packs with Projen #cdk #projen #security #aws 5 * Step-by-Step Guide to Setting Up and Deploying SonarQube on an AWS EC2 Instance Using AWS Cloud Development Kit (CDK) Kevin Lac*tio Kemta Follow Sep 21 Step-by-Step Guide to Setting Up and Deploying SonarQube on an AWS EC2 Instance Using AWS Cloud Development Kit (CDK) #sonarqube #aws #devops #cdk 13 reactions 4 comments 6 min read Continuous Delivery applied to Authorization with IAM Identity Center and AWS IAM Access Analyzer – Part 2 Alejandro Velez Alejandro Velez Alejandro Velez Follow Sep 22 Continuous Delivery applied to Authorization with IAM Identity Center and AWS IAM Access Analyzer – Part 2 #aws #security #devops #cdk 4 reactions Ad*h AWS CDK: A Comprehensive Guide Amit Duwal Amit Duwal Amit Duwal * Sep 16 Getting Started with AWS CDK: A Comprehensive Guide #aws #cdk #cloud #* 4 min read Exploring CDK and Policy as Code with CDK-Nag and Python * Dr. Malte Polley Follow Sep 11 Exploring CDK and Policy as Code with CDK-Nag and Python #aws #infrastructureascode #cdk #devops 1 reaction 2 comments 4 min read Deploy Puppeteer and Chrome on AWS Lambda With Layers and AWS CDK Toan Huynh Toan Huynh Toan Huynh Follow Sep 4 Deploy Puppeteer and Chrome on AWS Lambda With Layers and AWS CDK #aws #lambda #cdk #node 1 reaction 3 comments 6 min read A self-hosted CodeCommit alternative Johannes Koch Johannes Koch Johannes Koch Follow for AWS Heroes Sep 3 A self-hosted CodeCommit alternative #allgemein #cdk #cicd #devops 1 comment 3 min read My Journey with AWS CDK and Java: What You Need to Know Jeroen Reijn Jeroen Reijn Jeroen Reijn * Sep 2 My Journey with AWS CDK and Java: What You Need to Know #aws #cdk #java #infrastructureascode * Serverless Telegram Bot: Setting up our environment in AWS with CDK Nicolás Vera Nicolás Vera Nicolás Vera Follow Aug 27 Serverless Telegram Bot: Setting up our environment in AWS with CDK #cdk #lambda #aws #telegram * AWS CDK and security group configuration (Golang) Oleg Sydorov Oleg Sydorov Oleg Sydorov Follow Jul 24 AWS CDK and security group configuration (Golang) #aws #go #cdk #devops Add Comment 3 min read SST, AWS CDK, AWS CloudFormation migration to Terraform Martin Muller 🇩🇪🇧🇷🇵🇹 Martin Muller 🇩🇪🇧🇷🇵🇹 Martin Muller 🇩🇪🇧🇷🇵🇹 Follow Aug 26 SST, AWS CDK, AWS CloudFormation migration to Terraform #aws #terraform #cdk #migration * Setting Up and Securing CloudFront for S3 Static Sites with Custom Subdomains Using AWS Cloud Development Kit(CDK) Kevin Lac*tio Kemta Follow Aug 24 Setting Up and Securing CloudFront for S3 Static Sites with Custom Subdomains Using AWS Cloud Development Kit(CDK) #aws #cloudfront #angular #cdk 2 * Configuring a Custom Domain for API Gateway with AWS Cloud Development Kit (CDK): SSL Certificate Use and Route 53 Integration Kevin Lac*tio Kemta Follow Aug 22 Configuring a Custom Domain for API Gateway with AWS Cloud Development Kit (CDK): SSL Certificate Use and Route 53 Integration #aws #cdk #route53 #apigateway 4 reactions Ad*h AWS CDK in Python: A Comprehensive and Easy-to-Follow Guide Kelvin Onuchukwu Kelvin Onuchukwu Kelvin Onuchukwu Follow Jul 31 Getting Started with AWS CDK in Python: A Comprehensive and Easy-to-Follow Guide #aws #devops #cdk #cloud 7 * Building a Secure Serverless Angular App with AWS CDK, Cognito, Lambda, and API Gateway Kevin Lac*tio Kemta Follow Aug 20 Building a Secure Serverless Angular App with AWS CDK, Cognito, Lambda, and API Gateway #angular #cdk #serverless #aws 6 * Deploying a REST API and Angular Frontend Using AWS CDK, S3, and API Gateway Kevin Lac*tio Kemta Follow Aug 5 Deploying a REST API and Angular Frontend Using AWS CDK, S3, and API Gateway #angular #cdk #awschallenge #apigateway 3 * Building a Serverless Application with AWS Cloud Development Kit (CDK): API Gateway, Lambda, Layers and DynamoDB Kevin Lac*tio Kemta Follow Aug 1 Building a Serverless Application with AWS Cloud Development Kit (CDK): API Gateway, Lambda, Layers and DynamoDB #cdk #awschallenge #apigateway #lambda 7 * * 3 of the Odyssey * Adrian Mudzwiti * Aug 1 * 3 of the Odyssey #cdk #python #testing #aws 2 *d Integration of Apache Iceberg in S3, Glue, Athena, Matillion, and Snowflake – Part 1 * Dr. Malte Polley Follow Jul 29 Integration of Apache Iceberg in S3, Glue, Athena, Matillion, and Snowflake – Part 1 #aws #cdk #data #governance * Build with CDK (Cloud Development Kit) an infra for Image processing using Lambda functions, S3 buckets, and DynamoDB Kevin Lac*tio Kemta Follow Jul 23 Build with CDK (Cloud Development Kit) an infra for Image processing using Lambda functions, S3 buckets, and DynamoDB #awschallenge #cdk #lambda #aws 3 * ECS service-to-service communication 🚀 Vu Dao 🚀 🚀 Vu Dao 🚀 🚀 Vu Dao 🚀 * Jul 22 ECS service-to-service communication #simflexcloud #cdk #ecs #fargate 18 * How to retrieve the private key file PEM content after Cloudformation or CDK Stack deployment Kevin Lac*tio Kemta Follow Jul 18 How to retrieve the private key file PEM content after Cloudformation or CDK Stack deployment #aws #cdk #100daysawsiacdevopschallenge #awschallenge 2 reacti*e your simple infrastructure using IaC Tool Terraform, CloudFormation or AWS CDK Kevin Lac*tio Kemta Follow Jul 17 Create your simple infrastructure using IaC Tool Terraform, CloudFormation or AWS CDK #terraform #cdk #aws #100daysawsiacdevopschallenge 12 reactions 2 comments 11 min read What is Serverless? An example based explanation RedRobot.dev RedRobot.dev RedRobot.dev Follow Jul 5 What is Serverless? An example based explanation #aws #cdk #serverless #webdev Add Comment 7 min read Building a Cloud Development Kit (CDK) Samy Fodil Samy Fodil Samy Fodil Follow Jul 3 Building a Cloud Development Kit (CDK) #cloudcomputing #cdk #webassembly #cloudpractitioner 70 * Step Toward Better Tenant Provisioning Jason Wadsworth Jason Wadsworth Jason Wadsworth * Jul 2 Step Toward Better Tenant Provisioning #aws #saas #cdk #stepfunctions 2 reactions 6 comments 6 min read Unleashing the Power of CDK and Terraform in Cloud Deployments Sidath Munasinghe Sidath Munasinghe Sidath Munasinghe * Jun 22 Unleashing the Power of CDK and Terraform in Cloud Deployments #cdk #terraform #aws #iac 6 * Install Keycloak on ECS(with Aurora Postgresql) Jakub Wołynko Jakub Wołynko Jakub Wołynko * Jun 21 Install Keycloak on ECS(with Aurora Postgresql) #aws #keyclock #ecs #cdk 9 reactions 4 comments 9 min read Troubleshooting and Fixing AWS DMS Instance Creation Error hvmathan hvmathan hvmathan Follow May 14 Troubleshooting and Fixing AWS DMS Instance Creation Error #aws #dms #cdk Add Comment 2 min read Generating AWS CDK Code from Hand-drawn Sketches with GPT-4o jhashimoto jhashimoto jhashimoto Follow May 14 Generating AWS CDK Code from Hand-drawn Sketches with GPT-4o #generativeai #gpt4o #aws #cdk * Automating EKS Deployment and NGINX Setup Using Helm with AWS CDK in Python marocz marocz marocz Follow Apr 25 Automating EKS Deployment and NGINX Setup Using Helm with AWS CDK in Python #aws #cdk #helm #eks Add Comment 7 min read Process S3 Objects with Step Functions using CDK + TS Marcos Henrique Marcos Henrique Marcos Henrique * May 27 Process S3 Objects with Step Functions using CDK + TS #aws #typescript #cdk 9 *ad To Build or to Reuse? A CDK Question Dakota Lewallen Dakota Lewallen Dakota Lewallen * Apr 11 To Build or to Reuse? A CDK Question #aws #cdk #devops #tutorial 2 * CDK CodeChecker v2: Breaking Free from Third-Party Dependencies Yvo van Zee Yvo van Zee Yvo van Zee * May 8 CDK CodeChecker v2: Breaking Free from Third-Party Dependencies #cdk #pullrequests #aws #codechecker 5 *d Ahorrar costes de transferencia con instancias NAT gestionadas en AWS Juan Manuel Ruiz Fernández Juan Manuel Ruiz Fernández Juan Manuel Ruiz Fernández Follow for AWS Español May 2 Ahorrar costes de transferencia con instancias NAT gestionadas en AWS #aws #costes #nat #cdk * Consideration about cdk-notifier and Tags Johannes Konings Johannes Konings Johannes Konings * Apr 20 Consideration about cdk-notifier and Tags #aws #cdk #cdknotifier Add Comment 3 min read WebSockets con Api Gateway Javi Mora Javi Mora Javi Mora Follow for AWS Español Apr 19 WebSockets con Api Gateway #aws #websocket #apigateway #cdk 4 * Introducción a AWS CDK: Infraestructura como Código de forma Sencilla Deivy Hernandez Deivy Hernandez Deivy Hernandez Follow Apr 8 Introducción a AWS CDK: Infraestructura como Código de forma Sencilla #aws #awsspanish #cdk #* Building Evolutionary Serverless Architecture Olivier Lemaitre Olivier Lemaitre Olivier Lemaitre Follow Apr 7 Building Evolutionary Serverless Architecture #serverless #cdk #lambda #architecture * Building an Amazon Location Service Resources with AWS CDK and AWS CloudFormation Yasunori Kirimoto Yasunori Kirimoto Yasunori Kirimoto Follow for AWS Heroes Apr 2 Building an Amazon Location Service Resources with AWS CDK and AWS CloudFormation #cdk #cloudformation #amazonlocationservice #maplibre 4 reactions 1 comment 12 min read Zero-ETL with Amazon S3 and Snowflake via Storage Integration - powered by CDK * Dr. Malte Polley Follow Apr 2 Zero-ETL with Amazon S3 and Snowflake via Storage Integration - powered by CDK #aws #snowflake #cdk #data 1 reaction 2 comments 6 min read * 2 of the Odyssey * Adrian Mudzwiti * Mar 31 * 2 of the Odyssey #cdk #lambda #dynamodb #python 3 * * 1 of the Odyssey * Adrian Mudzwiti * Mar 30 * 1 of the Odyssey #cdk #lambda #dynamodb #python 3 *d Debuggar os projetos CDK em Python no VS Code João Vitor Reis Martins João Vitor Reis Martins João Vitor Reis Martins Follow Feb 23 Debuggar os projetos CDK em Python no VS Code #aws #cdk #python #* loading... trending guides/resources Efficient Kubernetes Cluster Deployment: Accelerating Setup with EKS Blueprints Exploring CDK and Policy as Code with CDK-Nag and Python How to publish custom cdk-nag rules and rule packs with Projen Effortless Debugging: AWS CDK TypeScript Projects in VSCode Hosting Applications with AWS CDK: An Introduction to Infrastructure as Code Getting Started with AWS CDK: A Comprehensive Guide Serverless Telegram Bot: Setting up our environment in AWS with CDK How to combine SQS and SNS to implement multiple Consumers (Part 2) Deploy Puppeteer and Chrome on AWS Lambda With Layers and AWS CDK Step-by-Step Guide to Setting Up and Deploying SonarQube on an AWS EC2 Instance Using AWS Cloud Development Kit (CDK) Techniques to Save Costs Using AWS Lambda Functions with CDK Deploy a Docker Image to ECS with Auto Scaling Using AWS CDK in Minutes Serverless Code-Signing (EV) with KMS and Fargate CDK Mastery: Team Evolution through SECI Model Continuous Delivery applied to Authorization with IAM Identity Center and AWS IAM Access Analyzer – Part 2 My Journey with AWS CDK and Java: What You Need to Know * * ",
    "url": "https://dev.to/t/cdk"
  },
  {
    "body": "* # codegen Follow Hide Create Post 47 Posts Published *. How to write *ment 9 min read Boost Your React Development with GraphQL and Codegen Rijen Manandhar Rijen Manandhar Rijen Manandhar Follow Oct 1 Boost Your React Development with GraphQL and Codegen #graphql #react #typescript #* Two Weeks with LLMs: My iOS App Experiment Sami Iqram Sami Iqram Sami Iqram Follow May 14 Two Weeks with LLMs: My iOS App Experiment #genai #llm #codegen #programming 3 comments 2 min read Understanding Dash Agents: A LangChain Case Study Yogesh Choudhary Yogesh Choudhary Yogesh Choudhary Follow for CommandDash Jun 12 Understanding Dash Agents: A LangChain Case Study #langchain #codegen #commanddash #llm *ad Zod and the Joy of Single Sources of Truth Thorr ⚡️ codinsonn.dev Thorr ⚡️ codinsonn.dev Thorr ⚡️ codinsonn.dev Follow May 29 Zod and the Joy of Single Sources of Truth #zod #codegen #codequality #*t 19 min read Generating C# code programmatically xafero xafero xafero Follow Apr 6 Generating C# code programmatically #charp #codegen #roslyn #dotnet * Rev Your Engines: The SDK Generation Race is About to Begin! APIMatic.io APIMatic.io APIMatic.io Follow Jan 22 Rev Your Engines: The SDK Generation Race is About to Begin! #openapi #generator #sdk #codegen Add Comment 8 min read Stop creating HTTP clients manually - Part I Marcelo Waisman Marcelo Waisman Marcelo Waisman Follow Feb 5 Stop creating HTTP clients manually - Part I #openapi #swagger #codegen #* 6 min read Using Codegen Corina: Web for Everyone Corina: Web for Everyone Corina: Web for Everyone Follow Nov 20 '23 Using Codegen #playwright #testing #codegen #vscode 7 *d Exploring The Benefits of GraphQL Code Gen tnodell tnodell tnodell Follow Aug 23 '23 Exploring The Benefits of GraphQL Code Gen #graphql #typescript #codegen #react 7 * Intro to PostGraphile V5 (Part 6): Excellent Executable Exports Benjie Benjie Benjie Follow for Graphile Jul 28 '23 Intro to PostGraphile V5 (Part 6): Excellent Executable Exports #postgraphile #graphql #node #codegen 3 *d The complete GraphQL Scalar Guide * for The Guild Jun 27 '23 The complete GraphQL Scalar Guide #graphql #scalars #codegen #node * Using @defer Directive with GraphQL Code Generator * for The Guild May 24 '23 Using @defer Directive with GraphQL Code Generator #graphql #* Optimize your Bundle Size with SWC and *G*pr 18 '23 Optimize your Bundle Size with SWC and GraphQL Codegen #clientpreset #* Scalable APIs with GraphQL Server Codegen Preset * for The Guild Jan 24 '23 Scalable APIs with GraphQL Server Codegen Preset #* * A journey towards a type-safe GraphQL API server Remi van der Laan Remi van der Laan Remi van der Laan Follow for De Energiebespaarders Dec 2 '22 A journey towards a type-safe GraphQL API server #graphql #webdev #typescript #codegen 10 * 'Move fast & build things' with Zod, Expo & Next.js Thorr ⚡️ codinsonn.dev Thorr ⚡️ codinsonn.dev Thorr ⚡️ codinsonn.dev Follow Nov 13 '22 'Move fast & build things' with Zod, Expo & Next.js #codegen #zod #startup #trends 7 * Getting the Best of TypeScript and GraphQL: Union Types * for The Guild Oct 18 '22 Getting the Best of TypeScript and GraphQL: Union Type*n 5 react*ding Slack Bot with Cloudflare Workers * for The Guild Oct 12 '22 Building Slack Bot with Cloudflare Workers #graphql #codegen * Source code gen in Flutter & Dart: How to create a builder to generate SQL code Pedro F Marquez Pedro F Marquez Pedro F Marquez Follow Sep 21 '22 Source code gen in Flutter & Dart: How to create a builder to generate SQL code #flutter #sql #codegen #* 13 min read Unleash the power of Fragments with *Guild* Unleash the power of Fragments with GraphQL Codegen #graphql #codegen #react #typescript Add Comment 6 min read React Query Codegen from OpenAPI Jason Jason Jason Follow Jun 9 '22 React Query Codegen from OpenAPI #reactquery #openapi #codegen #typescript 16 * Managing application cache with react-query. And code generation from OpenAPI. Alexey Lysenko Alexey Lysenko Alexey Lysenko Follow May 31 '22 Managing application cache with react-query. And code generation from OpenAPI. #react #codegen #reactquery #openapi 7 * GraphQL error handling to the max with Typescript, codegen and fp-ts * for The Guild Mar 7 '22 GraphQL error handling to the max with Typescript, codegen and fp-t*n #fpts 10 reactions Add Comment 16 min read GraphQL Code Generator with TypeScript and Prisma models * for The Guild Dec 20 '21 GraphQL Code Generator with TypeScript and Prisma model*n #prisma 10 * What's new in GraphQL-Codegen v2? * for The Guild Aug 5 '21 What's new in GraphQL-Codegen v2? #graphql #codegen #typescript 5 * GraphQL with TypeScript done right * for The Guild Jul 29 '21 GraphQL with TypeScript done right #graphql #typescript #codegen #node 13 * TypedDocumentNode: the next generation of GraphQL and TypeScript * for The Guild Jul 29 '21 TypedDocumentNode: the next generation of GraphQL and TypeScript #graphql #codegen #typescript #react 10 * GraphQL TypeScript - w/ GraphQL-Modules and GraphQL-Code-Generator * for The Guild Jul 29 '21 GraphQL TypeScript - w/ GraphQL-Modules and GraphQL-Code-Generator #graphql #graphqlmodules #codegen #typescript 8 *d Integrating GraphQL Code Generator in your frontend applications * for The Guild Jul 29 '21 Integrating GraphQL Code Generator in your frontend applications #graphql #codegen #typescript #react 8 * What's new in GraphQL Codegen 0.9.0 * for The Guild Jul 29 '21 What's new in GraphQL Codegen 0.9.0 #graphql #codegen 4 *d graphql-let - A Webpack loader for GraphQL Code Generator * for The Guild Jul 29 '21 graphql-let - A Webpack loader for GraphQL Code Generator #graphql #codegen #webpack 4 *d GraphQL Codegen adds new Apollo-Android and Java plugins * for The Guild Jul 29 '21 GraphQL Codegen adds new Apollo-Android and Java plugins #graphql #codegen #apolloandroid #android 4 * GraphQL Code Generator - Hooks support for React Apollo plugin * for The Guild Jul 29 '21 GraphQL Code Generator - Hooks support for React Apollo plugin #graphql #codegen #react #reactapollo 4 * Introducing GraphQL Code Generator * for The Guild Jul 29 '21 Introducing GraphQL Code Generator #graphql #codegen 4 * GraphQL Code Generator for Typescript React Apollo * for The Guild Jul 29 '21 GraphQL Code Generator for Typescript React Apollo #graphql #codegen #react #reactapollo 4 *d Optimizing Apollo Operations - GraphQL Code Generator & Relay Compiler * for The Guild Jul 29 '21 Optimizing Apollo Operations - GraphQL Code Generator & Relay Compiler #graphql #codegen #relay 4 *d GraphQL Code Generator v0.11 * for The Guild Jul 29 '21 GraphQL Code Generator v0.11 #graphql #codegen 4 * Introducing: GraphQL Codegen plugin for TypeScript & SWR! * for The Guild Jul 29 '21 Introducing: GraphQL Codegen plugin for TypeScript & SWR! #graphql #codegen #typescript #react 2 *d What's new with Apollo Client v3 and *GuildB* What's new with Apollo Client v3 and GraphQL Codegen #graphql #codegen #typescript #react 2 * Customise the swagger-models Rohith Kunnath Rohith Kunnath Rohith Kunnath Follow May 26 '21 Customise the swagger-models #go #swagger #codegen 2 *d Auto Generate Client From OpenAPI Specification (Swagger) Ibrahim Ibrahim Ibrahim Follow Apr 6 '21 Auto Generate Client From OpenAPI Specification (Swagger) #aspnetcore #swagger #codegen #bash 3 *d The Power of TypeScript for GraphQL Union Type Filters Sebastian Döll Sebastian Döll Sebastian Döll Follow Mar 2 '21 The Power of TypeScript for GraphQL Union Type Filters #typescript #graphql #codegen 14 *d How to generate even more code with Freezed Marcos Sevilla Marcos Sevilla Marcos Sevilla Follow Jan 25 '21 How to generate even more code with Freezed #dart #flutter #codegen #freezed 14 *d Thoughts on Code Generation With Sitecore Kenneth McAndrew Kenneth McAndrew Kenneth McAndrew Follow Jul 26 '20 Thoughts on Code Generation With Sitecore #sitecore #codegen 5 * Generating image preview easily suntong suntong suntong Follow Jun 22 '19 Generating image preview easily #easygen #codegen 6 * Swagger: Custom java rest server api generator Daniel Persson Daniel Persson Daniel Persson Follow Aug 11 '18 Swagger: Custom java rest server api generator #swagger #rest #codegen #tutorial 10 *d Better Type Safety for your GraphQL resolvers with *Gui*2 '21 Better Type Safety for your GraphQL resolvers with GraphQL Codegen #graphql #codegen #node #* 4 *onsor Neon * ",
    "url": "https://dev.to/t/codegen"
  },
  {
    "body": "* C++ Follow Hide Official tag for the C++ programming language. * Articles and discussions should be directly related to the C++ programming language. (Not to be confused with C (#c), Objective C (#objectivec), or C# (#csharp)) Questions are encouraged! (See the #help tag) Be careful when criticizing C++ as a language or platform; most such complaints are old news. Criticisms are permitted, but please keep such discussions polite and objective. about #cpp C++ is a compiled programming language developed by Bjarne Stroustrup in 1985. It offers features of imperative, object-oriented, and generic programming. The current language standard is C++20. Documentation cppreference.com CPlusPlus.com Compilers Clang/LLVM GCC Microsoft Visual C++ Complete list... tag moderators 2611 Posts Published Older #cpp posts 1 2 3 4 5 6 7 8 9 *. C++ Problem Solving Tutorial: Vector Pair Sorting, Quick Pair Creation, and Lambda Expressions for Efficient Problem Solving * Nov 8 C++ Problem Solving Tutorial: Vector Pair Sorting, Quick Pair Creation, and Lambda Expressions for Efficient Problem Solving #cpp #coding #tutorial Add Comment 7 min read Understanding Constructors in C++: A Complete Guide for Beginners Rishav Kapil Rishav Kapil Rishav Kapil Follow Nov 8 Understanding Constructors in C++: A Complete Guide for Beginners #cpp #oop #constructors #beginners 3 *d Possible to Do Panoramic Image Stitching in React Native? Javad İbrahimli Javad İbrahimli Javad İbrahimli Follow Nov 7 Possible to Do Panoramic Image Stitching in React Native? #react #reactnative #cpp #android Add Comment 1 min read C++ vs. C#: Why Does C++ Typically Consume Less Memory? Amaresh Barik Amaresh Barik Amaresh Barik Follow Nov 6 C++ vs. C#: Why Does C++ Typically Consume Less Memory? #cpp #csharp #dotnet #webdev Add Comment 2 min read Starting with C: All the Fundamentals in One Guide Jamir Hossain Jamir Hossain Jamir Hossain Follow Nov 9 Starting with C: All the Fundamentals in One Guide #c #cpp #programming #beginners 5 reactions 2 comments 23 min read Decoding 1D/2D B* * Nov 4 Decoding 1D/2D B* #cpp #node #pdf #barcode * 1-D Prefix Sum Md.Al-Amin Md.Al-Amin Md.Al-Amin Follow Nov 2 1-D Prefix Sum #algorithms #datastructures #coding #cpp Add Comment 2 min read round() San*dov Follow Nov 2 round() #* 10 *d setprecision() San*dov Follow Nov 2 setprecision() #* 5 *d else if Mahamadjon000 Mahamadjon000 Mahamadjon000 Follow Nov 2 else if #cpp #programming * setw() va setfill() San*dov Follow Nov 1 setw() va setfill() #cpp #programming #beginners #coding 10 *d Variables & Data types San*dov Follow Oct 29 Variables & Data types #cpp #programming #beginners #datatypes 15 *d Dasturlash San*dov Follow Oct 29 Dasturlash #cpp #programming #beginners #coding 15 *d O'zgaruvchilar Muhammadyusuf Xotamov Muhammadyusuf Xotamov Muhammadyusuf Xotamov Follow Oct 29 O'zgaruvchilar #cpp #tutorial #beginners 6 *d UNRAVELING FFTW: THE FASTEST FOURIER TRANSFORM IN THE WEST Carlos Cristancho Clavijo Carlos Cristancho Clavijo Carlos Cristancho Clavijo Follow Oct 29 UNRAVELING FFTW: THE FASTEST FOURIER TRANSFORM IN THE WEST #beginners #learning #cpp #* 12 min read round функция. Mahamadjon000 Mahamadjon000 Mahamadjon000 Follow Oct 29 round функция. #cpp #* 1 min read do while loop San*dov Follow Nov 2 do while loop #programming #coding #cpp #* 1 min read Most striking error I found with PVS-Studio in 2024 * Alexandra Kochetkova Follow Oct 28 Most striking error I found with PVS-Studio in 2024 #cpp #programming #coding Add Comment 6 min read Manual * in Kotlin Multiplatform Native Shared Libraries Arseni Kavalchuk Arseni Kavalchuk Arseni Kavalchuk Follow Oct 27 Manual * in Kotlin Multiplatform Native Shared Libraries #kotlin #multiplatform #cpp Add Comment 7 min read Criando uma Runtime Lucas *ewski Follow Oct 25 Criando uma Runtime #cpp #node #v8 #javascript Add Comment 6 * Linux Device Drivers Sandipan Roy Sandipan Roy Sandipan Roy Follow Oct 25 Unlocking the Power of Linux Device Drivers #cpp #security #linux #programming Add Comment 7 min read An example of `boost::fiber` library Dilawar Singh Dilawar Singh Dilawar Singh Follow Nov 7 An example of `boost::fiber` library #boost #cpp #fiber #* Finding errors in unit tests * Alexandra Kochetkova Follow Nov 6 Finding errors in unit tests #cpp #programming #coding 3 * Realm of gaming experiments: potential developer errors in emulator creating * Alexandra Kochetkova Follow Nov 6 Realm of gaming experiments: potential developer errors in emulator creating #cpp #programming #gamedev 4 reactions Add Comment 17 min read Supercharging AI Projects with Docwire SDK: The Developer's Edge Krzysztof Nowicki Krzysztof Nowicki Krzysztof Nowicki Follow Oct 23 Supercharging AI Projects with Docwire SDK: The Developer's Edge #ai #cpp #api #cybersecurity Add Comment 5 min read Algo-Trading Engine Jitanshu Raut Jitanshu Raut Jitanshu Raut Follow Oct 27 Algo-Trading Engine #cpp #opensource #learning #linux Add Comment 3 min read Dia 20 - Reimplementando lista circular duplamente encadeada Matheus Gomes Matheus Gomes Matheus Gomes Follow Oct 19 Dia 20 - Reimplementando lista circular duplamente encadeada #braziliandevs #c #cpp Add Comment 2 min read Dia 19 - Retornando a criação do meu sistema operacional Matheus Gomes Matheus Gomes Matheus Gomes Follow Oct 18 Dia 19 - Retornando a criação do meu sistema operacional #braziliandevs #computerscience #cpp #c Add Comment 1 min read It’s just ‘,’ – The Comma Operator Coral Kashri Coral Kashri Coral Kashri Follow Oct 21 It’s just ‘,’ – The Comma Operator #operators #cpp23 #cppsenioreas #cpp * Conditional operator. Mahamadjon000 Mahamadjon000 Mahamadjon000 Follow Oct 31 Conditional operator. #cpp #programming #beginners * Senior Dev and Multi-threading Bad Code Killer Bad Code Killer Bad Code Killer Follow Oct 16 Senior Dev and Multi-threading #cpp #programming #trash #startup Add Comment 1 min read How Does Go Handle Multithreading and Concurrency Vis-A-Vis Other Languages Vedant Madane Vedant Madane Vedant Madane Follow Oct 29 How Does Go Handle Multithreading and Concurrency Vis-A-Vis Other Languages #go #python #java #cpp * a Custom C++ Serializer for Efficient Data Handling Pigeon Codeur Pigeon Codeur Pigeon Codeur Follow Nov 6 Building a Custom C++ Serializer for Efficient Data Handling #cpp #performance #gamedev #data 15 *ad O que são Sistemas Embarcados? Dário Prazeres Dário Prazeres Dário Prazeres Follow Oct 13 O que são Sistemas Embarcados? #python #cpp #c #systems * a Native Desktop GUI Using C++ with GTK Misael Braga de Bitencourt Misael Braga de Bitencourt Misael Braga de Bitencourt Follow Oct 13 Creating a Native Desktop GUI Using C++ with GTK #cpp #gcc #gui #desktop Add Comment 4 min read Parallelizing Sorting Algorithms using OpenMP Rohit Sah Rohit Sah Rohit Sah Follow Oct 13 Parallelizing Sorting Algorithms using OpenMP #performance #algorithms #cpp #compiling Add Comment 10 min read 20 Essential Problem-Solving Patterns in C++ Habibur Rahman Shihab Habibur Rahman Shihab Habibur Rahman Shihab Follow Oct 25 20 Essential Problem-Solving Patterns in C++ #cpp #programming #learning #career 3 * Performance Comparison in multithread environment: robin_hood::unordered_map vs. tbb::concurrent_hash_map * Robert Teminian Follow Oct 11 Performance Comparison in multithread environment: robin_hood::unordered_map vs. tbb::concurrent_hash_map #cpp #hashmap Add Comment 2 min read 멀티스레드 환경에서의 성능 비교: robin_hood::unordered_map vs. tbb::concurrent_hash_map * Robert Teminian Follow Oct 11 멀티스레드 환경에서의 성능 비교: robin_hood::unordered_map vs. tbb::concurrent_hash_map #cpp #hashmap Add Comment 1 min read What's new in PVS-Studio for Unreal Engine? * Alexandra Kochetkova Follow Oct 11 What's new in PVS-Studio for Unreal Engine? #cpp #gamedev #programming * Nested while loop San*dov Follow Nov 2 Nested while loop #* 11 *d Arrays San*dov Follow Nov 2 Arrays #* 10 *d while loop San*dov Follow Nov 2 while loop #* 15 *d for loop San*dov Follow Nov 2 for loop #* 10 *d switch San*dov Follow Nov 2 switch #cpp #coding #programming #* 1 min read if else San*dov Follow Nov 2 if else #* 10 *d Logical operator San*dov Follow Nov 2 Logical operator #* 10 *d Conditional operator San*dov Follow Nov 2 Conditional operator #* 9 *d Function San*dov Follow Nov 2 Function #* 7 *d Arifmetik operatorlar San*dov Follow Nov 2 Arifmetik operatorlar #* 8 *d Cin Muhammadyusuf Xotamov Muhammadyusuf Xotamov Muhammadyusuf Xotamov Follow Nov 2 Cin #cpp #programming #beginners #coding 3 *d Relational operator San*dov Follow Nov 2 Relational operator #* 5 *d Comments San*dov Follow Nov 1 Comments #* 10 * Understanding char** in C/C++ Wacim Chelly Wacim Chelly Wacim Chelly Follow Oct 9 Understanding char** in C/C++ #c #cpp 2 *d Criando interface gráfica Desktop nativa utilizando C++ com GTK3 Misael Braga de Bitencourt Misael Braga de Bitencourt Misael Braga de Bitencourt Follow Oct 13 Criando interface gráfica Desktop nativa utilizando C++ com GTK3 #cpp #gui #gtk Add Comment 5 min read Contributing To Open Source - C++ Edition Majd Al Mnayer Majd Al Mnayer Majd Al Mnayer Follow Oct 8 Contributing To Open Source - C++ Edition #cpp #opensource #faker #hacktoberfest Add Comment 3 min read Leetcode Journey Started Harshit Sharma Harshit Sharma Harshit Sharma Follow Oct 8 Leetcode Journey Started #leetcode #cpp #c #* Why DocWire C++20 SDK is a Game-Changer for Developers Krzysztof Nowicki Krzysztof Nowicki Krzysztof Nowicki Follow Oct 8 Why DocWire C++20 SDK is a Game-Changer for Developers #opensource #cpp #flant5 #* Answer: How to generate a random number in C++? su jack su jack su jack Follow Oct 8 Answer: How to generate a random number in C++? #cpp #c #softwaredevelopment #* General Computer System Model Paulo Almeida Paulo Almeida Paulo Almeida Follow Oct 8 General Computer System Model #6502 #architecture #cpp #computerscience Add Comment 2 min read Type Casting Mahamadjon000 Mahamadjon000 Mahamadjon000 Follow Oct 30 Type Casting #cpp #programming #beginners 1 reaction Add C* Music for Coding 49 comments Pitch me on C++ 31 comments The Failures Of API Design New Rust vs C and C++: A Concise Comparison for Developers 🚀 3 comments Thoughts on C++ 1 comment Exploring the Differences Between C++ and C: Why C++ Prevails 6 comments Leetcode Solution: #206: Reverse Linked List 🐬 New Leetcode Solution: #1669 Merge In Between Linked Lists 🚀 New Why Make a Game From Scratch? 1 comment Is it still relevant to use OOPs in 2022? * Building a Custom C++ Serializer for Efficient Data Handling Best C/C++ IDEs 2024: Top 10 Picks for Developers Proper Header File Etiquette C++ in Kernel Development: A Comprehensive Guide Shart Operatorlari A Simple Web App Using Vite+React, C++ / Emscripten / WebAssembly, and a Web Worker Vending Machine Controller Algoritmga Kirish va Asosiy Tushunchalar Function Learn Basics of C Programming std::array in C++ isn't slower than array in C Choosing an Appropriate Integer Type in C and C++ Switch Arrays Dasturlash while loop while loop do while loop Introducing TRLC Enum: A Modern C++ Enum Library for Enhanced Usability Arrays recently queried Rust vs C++ Double Pointer C Unique Pointer C++ C++ & How to Make Your Own Programming Language Install Gdb Mac Makefile C++ C++ Discord c++ Shell * * ",
    "url": "https://dev.to/t/cpp"
  },
  {
    "body": "* # cypress Follow Hide Create Post 483 Posts Published Older #cypress posts 1 2 3 4 5 6 7 8 *. * * End-to-End Testing with Cypress Gabriel Mathias Gabriel Mathias Gabriel Mathias Follow Nov 9 End-to-End Testing with Cypress #cypress #e2e 2 *d Scaling Cypress Tests: Parallelise your End-to-End Tests with Testkube Juan Ibarra Juan Ibarra Juan Ibarra Follow for Kubeshop Oct 28 Scaling Cypress Tests: Parallelise your End-to-End Tests with Testkube #cypress #kubernetes #paralleltesting #api Add Comment 6 min read Cypress for Web: The Fast and Easy Way to Automate your UI JigNect Technologies JigNect Technologies JigNect Technologies Follow Oct 24 Cypress for Web: The Fast and Easy Way to Automate your UI #cypress #ui #web Add Comment 3 min read Testes e2e em React com Cypress * Eduardo Henrique Gris Follow Oct 28 Testes e2e em React com Cypress #react #cypress #e2e #webdev 2 *d E2E testing in React with Cypress * Eduardo Henrique Gris Follow Oct 28 E2E testing in React with Cypress #react #cypress #e2e #webdev 2 * Playwright vs Cypress: A Brief Comparison for End-to-End Testing SHUBHAM SHUBHAM SHUBHAM Follow Oct 5 Playwright vs Cypress: A Brief Comparison for End-to-End Testing #frontend #testing #end2end #cypress Add Comment 2 min read Playwright vs Cypress: A Brief Comparison for End-to-End Testing SHUBHAM SHUBHAM SHUBHAM Follow Oct 5 Playwright vs Cypress: A Brief Comparison for End-to-End Testing #frontend #testing #end2end #cypres*o Handle Multiple Windows in Cypress * Oct 17 How to Handle Multiple Windows in Cypress #* * Let's talk about wick-a11y… James Wadley James Wadley James Wadley Follow Nov 1 Let's talk about wick-a11y… #a11y #automation #testing #cypress 8 * Unlocking the Mystery: Deciphering the Enigmatic Code of URL's Glob Patterns in cy.intercept() * Sebastian Clavijo Suero Follow Oct 31 Unlocking the Mystery: Deciphering the Enigmatic Code of URL's Glob Patterns in cy.intercept() #cypress #qa #automation #testing 15 reactions 4 comments 7 min read How to Validate Upload and Download in Cypress * Oct 31 How to Validate Upload and Download in Cypress #webdev #javascript #cypress #testing * But How Much Abstraction is Still Okay in Cypress? To POM or Not To POM * Sebastian Clavijo Suero Follow Oct 14 But How Much Abstraction is Still Okay in Cypress? To POM or Not To POM #cypress #qa #automation #testing 23 reactions 6 comments 15 min read Cypress Page Object Model (POM) Implementation Guide Ronika Kashyap Ronika Kashyap Ronika Kashyap Follow Oct 14 Cypress Page Object Model (POM) Implementation Guide #cypress #testing #cloud #pom 5 *d Guide for Cypress Component Testing and its Implementation Ronika Kashyap Ronika Kashyap Ronika Kashyap Follow Oct 10 Guide for Cypress Component Testing and its Implementation #cypress #testing #cloud #devops 1 rea*r Cypress Testing with Full-Stack App | E2E Test | Auth, Maps, CRUD, GitHub Actions 2:01:24 Hasan Hasan Hasan Follow Oct 9 Master Cypress Testing with Full-Stack App | E2E Test | Auth, Maps, CRUD, GitHub Actions #javascript #cypress #e2e #webdev 4 *d How to Read and Write from Excel Files in Cypress * Oct 9 How to Read and Write from Excel Files in Cypress #* 2 *d CYPRESS-AJV-SCHEMA-VALIDATOR v1.2.0: Boost Debugging Skills from Vigilante to Superhero with Advanced Schema Error Insights! * Sebastian Clavijo Suero Follow Oct 6 CYPRESS-AJV-SCHEMA-VALIDATOR v1.2.0: Boost Debugging Skills from Vigilante to Superhero with Advanced Schema Error Insights! #cypress #qa #automation #apitesting 14 * Test Driven Api Development With Cypress Anthony Santonocito Anthony Santonocito Anthony Santonocito Follow Sep 16 Test Driven Api Development With Cypress #tdd #typescript #cypress #dotnet 5 * Cypress and Angular: A Step-by-Step Guide to Efficient E2E Testing Soumaya Erradi Soumaya Erradi Soumaya Erradi Follow Oct 6 Cypress and Angular: A Step-by-Step Guide to Efficient E2E Testing #cypress #angular #testing 7 * How to Handle iframes in Cypress * Oct 3 How to Handle iframes in Cypress #webdev #javascript #cypress #testing 4 * Choosing e2e testing framework. Cypress vs Playwright case Mateusz Garbaciak Mateusz Garbaciak Mateusz Garbaciak Follow Sep 27 Choosing e2e testing framework. Cypress vs Playwright case #testing #playwright #cypress #webtesting Add Comment 5 min read Solving Cypress Preflight Request Errors in Rails Test Environment Anand Soni Anand Soni Anand Soni Follow Aug 21 Solving Cypress Preflight Request Errors in Rails Test Environment #cypress #testing #selenium #playwright Add Comment 2 min read Setup Cypress para testes e2e em React * Eduardo Henrique Gris Follow Sep 23 Setup Cypress para testes e2e em React #react #cypress #e2e #webdev 4 * Setup Cypress for e2e tests in React * Eduardo Henrique Gris Follow Sep 23 Setup Cypress for e2e tests in React #react #cypress #e2e #webdev 2 * Dynamic Tests in Cypress: To Loop or Not To Loop * Sebastian Clavijo Suero Follow Sep 22 Dynamic Tests in Cypress: To Loop or Not To Loop #qa #cypress #automation #testing 29 reactions 9 comments 6 min read How to Run End-to-End Tests on Vercel Preview Deployments This Dot Media This Dot Media This Dot Media Follow Sep 23 How to Run End-to-End Tests on Vercel Preview Deployments #infrastructure #vercel #playwright #cypress 2 *d WICK-A11Y \"Chapter\" 1.2.1 - Voice Support: The Accessibility Cypress Plugin that Talks More Than John Wick in His Movies * Sebastian Clavijo Suero Follow Sep 16 WICK-A11Y \"Chapter\" 1.2.1 - Voice Support: The Accessibility Cypress Plugin that Talks More Than John Wick in His Movies #cypress #qa #automation #a11y 9 *d An In-Depth Look at Selenium Vs. Cypress Joe Gray Joe Gray Joe Gray Follow Aug 12 An In-Depth Look at Selenium Vs. Cypress #selenium #cypress #web #applicationtesting Add Comment 10 min read Selenium vs Cypress Geraldy Geraldy Geraldy Follow Aug 6 Selenium vs Cypress #selenium #cypress #automation #testing * End-to-End Testing: Which Tool Cypress or Playwright Should You Choose? P S S Hrithik P S S Hrithik P S S Hrithik Follow Sep 1 Mastering End-to-End Testing: Which Tool Cypress or Playwright Should You Choose? #playwright #cypress #webdev #testing 2 *d Ensuring Web Accessibility with * Madhur Batra Madhur Batra Madhur Batra Follow Aug 18 Ensuring Web Accessibility with * #a11y #cypress #automation #testing 3 * Nextjs + Cypress + Code coverage Setup LamNVQ LamNVQ LamNVQ Follow Aug 27 Nextjs + Cypress + Code coverage Setup #cypress #nextjs 2 *d 10 Best Functional Testing Tools for 2024 Emma Thomsan Emma Thomsan Emma Thomsan Follow Aug 26 10 Best Functional Testing Tools for 2024 #testing #testingtools #cypress #jmeter 3 * Cypress and Our Testing Pyramid Eugene Kazakov Eugene Kazakov Eugene Kazakov Follow Aug 13 Cypress and Our Testing Pyramid #cypress #autotest #e2e #aws 7 *ad Enhance Visual Testing CI Pipelines with Cypress Image Diff GitHub App KienHT KienHT KienHT Follow Aug 14 Enhance Visual Testing CI Pipelines with Cypress Image Diff GitHub App #cypress #testing #ci #* WICK-A11Y Cypress Plugin: Your Unstoppable Ally for Smashing Accessibility Barriers, Cool as John Wick! * Sebastian Clavijo Suero Follow Aug 12 WICK-A11Y Cypress Plugin: Your Unstoppable Ally for Smashing Accessibility Barriers, Cool as John Wick! #cypress #qa #automation #a11y 30 reactions 4 comments 11 min read Visual Regression Testing with Cypress and Percy: A Comprehensive Guide * Jul 22 Visual Regression Testing with Cypress and Percy: A * #testing #cypress Add Comment 3 min read Cypress vs Playwright:AComparison Morris Morris Morris Follow Jul 26 Cypress vs Playwright:AComparison #cypress #playwright #comparision 3 * Announcing CypressConf 2024 🚀 Ronald Williams Ronald Williams Ronald Williams Follow for Cypress Aug 6 Announcing CypressConf 2024 🚀 #techtalks #cypress #testing 3 *d 🚀 Angular 18 + Cypress, Material + Transloco + Jest, EsLint + Docker + Prettier 🚀 wlucha wlucha wlucha Follow Aug 4 🚀 Angular 18 + Cypress, Material + Transloco + Jest, EsLint + Docker + Prettier 🚀 #angular #webdev #cypress #transloco 7 * The best Angular 18 Starter Project wlucha wlucha wlucha Follow Aug 4 The best Angular 18 Starter Project #angular #cypress #webdev #* 2 min read Testing SMS in * * Jul 24 Testing SMS in Cypress: A * #testing #cypress 2 * Path aliases in Cypress Manpreet Bhikhe Manpreet Bhikhe Manpreet Bhikhe Follow Jul 10 Path aliases in Cypress #cypress #pathaliases #javascript #automaton 3 *d Automated Accessibility Testing with * * Jul 20 Automated Accessibility Testing with Cypress: A * #testing #cypress 1 comment 3 min read Data-Driven Testing in * * Jul 18 Data-Driven Testing in Cypress: A * #testing #cypress 3 *d Cypress Plugins You Should Know About * Jul 16 Cypress Plugins You Should Know About #* Add Comment 3 min read Handling Flaky Tests in Cypress: Best Practices and Strategies * Jul 14 Handling Flaky Tests in Cypress: Best Practices and Strategies #* *ting Cypress with CI/CD Pipelines: A Step-by-Step Guide * Jul 13 Integrating Cypress with CI/CD Pipelines: A Step-by-Step Guide #* 3 *d Cypress Test -'Describe' Block and 'It' Block Beryl Ajuoga Beryl Ajuoga Beryl Ajuoga Follow Jul 12 Cypress Test -'Describe' Block and 'It' Block #qa #cypress #testing #performance 3 reactions * Mocking and Stubbing in * * Jul 12 Mastering Mocking and Stubbing in Cypress: A * #testing #cypress 4 *d Best Practices for Custom Commands in Cypress: A Detailed Guide * Jul 11 Best Practices for Custom Commands in Cypress: A Detailed Guide #testing #webdev #javascript #cypress * Supercharging Your Cypress Tests with Custom Commands * Jul 10 Supercharging Your Cypress Tests with Custom Commands #testing #webdev #javascript #cypress *ing the Page Object Model (POM) with Cypress: A Step-by-Step Guide * Jul 9 Implementing the Page Object Model (POM) with Cypress: A Step-by-Step Guide #testing #javascript #webdev #cypress *ad Mastering Web Automation with * * Jul 7 Mastering Web Automation with * #webdev #testing #cypress #javascript *ad 60+ Cypress Interview Questions Devanshbhardwaj123 Devanshbhardwaj123 Devanshbhardwaj123 Follow for LambdaTest Jul 1 60+ Cypress Interview Questions #cypress #interviewquestions #cypressinterviewquestions 2 reactions 1 comment 24 min read 🚀 Enhance Your Cypress Tests with Custom Commands Gerald Hamilton Wicks Gerald Hamilton Wicks Gerald Hamilton Wicks Follow Jun 21 🚀 Enhance Your Cypress Tests with Custom Commands #cypress #e2e #typescript #testing * How to Write Your First Cypress Test [With Examples] Kailash Pathak Kailash Pathak Kailash Pathak Follow for LambdaTest Jun 20 How to Write Your First Cypress Test [With Examples] #cypress #beginners #tutorial #* 20 min read Test Creation using Record and Playback Testing elle richard elle richard elle richard Follow Jun 20 Test Creation using Record and Playback Testing #software #cypress #testing Add Comment 3 min read CYPRESS-AJV-SCHEMA-VALIDATOR Plugin: The Brave Vigilante for Your API Contracts * Sebastian Clavijo Suero Follow Jun 15 CYPRESS-AJV-SCHEMA-VALIDATOR Plugin: The Brave Vigilante for Your API Contracts #cypress #qa #automation #apitesting 38 reactions 4 comments 12 min read cypress - req.reply() Vasudevan Vasudevan Vasudevan Follow Oct 1 cypress - req.reply() #e2e #cypress Add Comment 1 min read CypressConf 2024: Keynote Speaker Announcement Ronald Williams Ronald Williams Ronald Williams Follow for Cypress Aug 26 CypressConf 2024: Keynote Speaker Announcement # techtalks #cypress #keynote #testing Add C* Actions sequence is great... but 6 * How to Run End-to-End Tests on Vercel Preview Deployments Cypress and Angular: A Step-by-Step Guide to Efficient E2E Testing Dynamic Tests in Cypress: To Loop or Not To Loop But How Much Abstraction is Still Okay in Cypress? To POM or Not To POM CYPRESS-AJV-SCHEMA-VALIDATOR v1.2.0: Boost Debugging Skills from Vigilante to Superhero with Advanced Schema Error Insights! Setup Cypress for e2e tests in React Choosing e2e testing framework. Cypress vs Playwright case Master Cypress Testing with Full-Stack App | E2E Test | Auth, Maps, CRUD, GitHub Actions Let's talk about wick-a11y… How to Handle Multiple Windows in Cypress Test Driven Api Development With Cypress E2E testing in React with Cypress Testes e2e em React com Cypress WICK-A11Y \"Chapter\" 1.2.1 - Voice Support: The Accessibility Cypress Plugin that Talks More Than John Wick in His Movies Mastering End-to-End Testing: Which Tool Cypress or Playwright Should You Choose? End-to-End Testing with Cypress Cypress Page Object Model (POM) Implementation Guide Setup Cypress para testes e2e em React How to Handle iframes in Cypress Unlocking the Mystery: Deciphering the Enigmatic Code of URL's Glob Patterns in cy.intercept() * * ",
    "url": "https://dev.to/t/cypress"
  },
  {
    "body": "* # designpatterns * 1008 Posts Published Older #designpatterns posts 1 2 3 4 5 6 7 8 9 *. Simple Factory Sota Sota Sota Follow Nov 10 Simple Factory #computerscience #java #design #designpatterns Add Comment 4 min read Padrões de projeto: Strategy Camila Ferreira Camila Ferreira Camila Ferreira Follow Nov 9 Padrões de projeto: Strategy #designpatterns * * Gabriel Duete Gabriel Duete Gabriel Duete Follow Nov 9 * #webdev #javascript #react #* Dominando Compound Components: Construindo Componentes React Flexíveis e Reutilizáveis Gabriel Duete Gabriel Duete Gabriel Duete Follow Nov 8 Dominando Compound Components: Construindo Componentes React Flexíveis e Reutilizáveis #braziliandevs #javascript #react #designpatterns 2 * Mastering Design * Ketan Jakhar K* O que são Observers Rafael Coelho Rafael Coelho Rafael Coelho Follow Nov 5 O que são Observers #designpatterns #programming #softwaredevelopment * Design Patterns: Mastering Creational, Structural, And Behavioral Patterns For Cleaner Code Okoye *amaka Follow Nov 5 JavaScript Design Patterns: Mastering Creational, Structural, And Behavioral Patterns For Cleaner Code #*tips #* The Dark Side of Don't Repeat Yourself Shubham Sharma Shubham Sharma Shubham Sharma Follow Nov 6 The Dark Side of Don't Repeat Yourself #dry #softwaredevelopment #designpatterns Add Comment 7 min read Implementing Chain of Responsibility Pattern in C# : Middleware's Design Pattern DotNet Full Stack Dev DotNet Full Stack Dev DotNet Full Stack Dev Follow Nov 4 Implementing Chain of Responsibility Pattern in C# : Middleware's Design Pattern #dotnet #csharp #dotnetcore #* Understanding the Visitor Pattern in C# Daniel Azevedo Daniel Azevedo Daniel Azevedo Follow Nov 7 Understanding the Visitor Pattern in C# #designpatterns #csharp #cleancode 5 * Don’t Let Your Singleton Break! Here’s How to Make It 100% Thread-Safe in Java Aman Aman Aman Follow Nov 1 Don’t Let Your Singleton Break! Here’s How to Make It 100% Thread-Safe in Java #java #singleton #threadsafety #designpatterns Add Comment 4 min read Duplicar código é um problema? Alex Almeida Alex Almeida Alex Almeida Follow Oct 30 Duplicar código é um problema? #backend #designpatterns Add Comment 4 min read AI Feedback Analysis with the Facade Pattern Daniel Azevedo Daniel Azevedo Daniel Azevedo Follow Oct 31 AI Feedback Analysis with the Facade Pattern #ai #designpatterns #programming * SOLID: Single Responsibility Principle(SRP) in C# Aditya Sharma Aditya Sharma Aditya Sharma Follow Oct 30 SOLID: Single Responsibility Principle(SRP) in C# #csharp #dotnet #solidprinciples #designpatterns 5 *d Uma introdução a Padrões de projeto Camila Ferreira Camila Ferreira Camila Ferreira Follow Oct 26 Uma introdução a Padrões de projeto #designpatterns Add Comment 2 min read Exploring Design Patterns: Factory Method Abdullah Al Mahmud Abdullah Al Mahmud Abdullah Al Mahmud Follow Nov 8 Exploring Design Patterns: Factory Method #csharp #designpatterns #backend #dotnet * Interceptor: Um Design Pattern muito útil! Igor Rudel Igor Rudel Igor Rudel Follow Oct 25 Interceptor: Um Design Pattern muito útil! #java #webdev #spring #designpatterns * Comment choisir le bon design pattern en Python, avec des exemples Dominique Megnidro Dominique Megnidro Dominique Megnidro Follow Oct 23 Comment choisir le bon design pattern en Python, avec des exemples #django #python #designpatterns #automation Add Comment 5 min read * 2 — The Factory Pattern * Oct 19 * 2 — The Factory Pattern #javascript #node #designpatterns #* c# advanced: Logical and Relational Patterns in C# * Nov 7 c# advanced: Logical and Relational Patterns in C# #patternmatching #csharp #designpatterns #dotnet 2 * Strategy Pattern Sota Sota Sota Follow Oct 28 Strategy Pattern #design #designpatterns #computerscience #java Add Comment 2 min read Refactoring 018 - Replace Singleton Maxi Contieri Maxi Contieri Maxi Contieri Follow Nov 5 Refactoring 018 - Replace Singleton #java #singleton #designpatterns #webdev 2 *d Bulkhead: Compartimentando tus Microservicios diek diek diek Follow Nov 6 Bulkhead: Compartimentando tus Microservicios #spanish #designpatterns #cloud Add Comment 3 min read Using Design Patterns as Communication Skill Adam Świderski Adam Świderski Adam Świderski Follow Oct 13 Using Design Patterns as Communication Skill #designpatterns #softwareengineering #programm*ment 9 min read Flyweight Pattern in C# – Optimize Your Memory Usage! Daniel Azevedo Daniel Azevedo Daniel Azevedo Follow Oct 26 Flyweight Pattern in C# – Optimize Your Memory Usage! #designpatterns #architecture #csharp 1 reaction * the Factory and Factory Method Design Patterns Ahmad Ameen Ahmad Ameen Ahmad Ameen Follow Nov 4 Understanding the Factory and Factory Method Design Patterns #designpatterns #factory #python #programming 12 * Methods to create Objects in JavaScript nkumarm nkumarm nkumarm Follow Oct 12 Methods to create Objects in JavaScript #javascript #designpatterns #oop Add Comment 2 min read Design Patterns for Backend Development Obinna Obinna Obinna Follow Nov 5 Design Patterns for Backend Development #designpatterns #backenddevelopment #architecture #codingbestpractices 17 * Go Design Patterns #2: Builder Eduardo Eduardo Eduardo Follow Oct 11 Go Design Patterns #2: Builder #go #designpatterns Add Comment 2 min read Summarizing the Key Software Design Patterns: A Complete Guide Usool Usool Usool Follow Oct 10 Summarizing the Key Software Design Patterns: A Complete Guide #designpatterns #*ing #programming Add Comment 7 min read *4 * Nov 2 *4 #dotnet #designpatterns #csharp #cleancode 3 * Building a Scalable Microservices Application with Java Spring Boot and Angular Nathan Rajkumar Nathan Rajkumar Nathan Rajkumar Follow Oct 30 Building a Scalable Microservices Application with Java Spring Boot and Angular #microservices #designpatterns #architecture * Understanding the Proxy Pattern with a Payroll System Example Daniel Azevedo Daniel Azevedo Daniel Azevedo Follow Oct 20 Understanding the Proxy Pattern with a Payroll System Example #designpatterns #cleancode #csharp #ai *ad Model-View-Controller (MVC): origins of design pattern Dmitry Kabanov Dmitry Kabanov Dmitry Kabanov Follow Oct 6 Model-View-Controller (MVC): origins of design pattern #architecture #designpatterns #mvc Add Comment 10 min read System design: TinyURL * Jayaprasanna Roddam Follow Oct 7 System design: TinyURL #design #tinyurl #designpatterns #systemdesign * Building an Extensible Notification System Afshin Tavakolian Afshin Tavakolian Afshin Tavakolian Follow Oct 5 Building an Extensible Notification System #* #* What is ORM Madhura Rahate Madhura Rahate Madhura Rahate Follow Oct 4 What is ORM #orm #designpatterns #database #oop Add Comment 1 min read System design: Designing an Online Book Reader System(Like Kindle) * Jayaprasanna Roddam Follow Oct 8 System design: Designing an Online Book Reader System(Like Kindle) #systemdesign #interview #design #designpatterns Add Comment 5 min read Strategy design pattern Rajender Singh Banoula Rajender Singh Banoula Rajender Singh Banoula Follow Oct 3 Strategy design pattern #systemdesign #designpatterns #cpp #lowleveldesign Add Comment 4 min read System design: Design Patterns in System Architecture * Jayaprasanna Roddam Follow Oct 7 System design: Design Patterns in System Architecture #systemdesign #programming #architecture #designpatterns Add Comment 5 min read System design: Building a Vending Machine in Go Saloni Agarwal Saloni Agarwal Saloni Agarwal Follow Nov 4 System design: Building a Vending Machine in Go #lld #go #systemdesign #designpatterns 6 * Utilizando o pattern Heartbeats em Golang * Airton Lira junior Follow Nov 2 Utilizando o pattern Heartbeats em Golang #designpatterns #go #heartbeats #goroutines 9 * *1 * Nov 2 *1 #csharp #designpatterns #dotnet #coding 9 *d *5 * Nov 2 *5 #csharp #designpatterns #cleancoding 7 *d *3 * Nov 2 *3 #designpatterns #csharp #dotnet #cleancoding 5 * *2 * Nov 2 *2 #designpatterns #csharp #dotnet #oop 2 * Go Design Patterns #4: Abstract Factory Eduardo Eduardo Eduardo Follow Oct 22 Go Design Patterns #4: Abstract Factory #go #designpatterns * PHP: monads spO0q 🐒🎃 spO0q 🐒🎃 spO0q 🐒🎃 Follow Nov 1 PHP: monads #php #programming #designpatterns 2 * Observer Pattern Sota Sota Sota Follow Nov 1 Observer Pattern #design #designpatterns #java #computerscience 1 comment 3 min read Top 6 Design Patterns Daniel Azevedo Daniel Azevedo Daniel Azevedo Follow Oct 31 Top 6 Design Patterns #designpatterns #cleancode #architecture #csharp 2 *d Why having a page factory is a good idea Thomas McDonnell Thomas McDonnell Thomas McDonnell Follow Oct 30 Why having a page factory is a good idea #dotnet #dotnetmaui #designpatterns 2 *d Exploring Design Patterns: Thread Safe Singleton Pattern in C# Abdullah Al Mahmud Abdullah Al Mahmud Abdullah Al Mahmud Follow Oct 28 Exploring Design Patterns: Thread Safe Singleton Pattern in C# #designpatterns #csharp #dotnet Add Comment 2 min read You Don't know Chain of Responsibility Pattern Hoboken Days Hoboken Days Hoboken Days Follow Sep 28 You Don't know Chain of Responsibility Pattern #designpatterns #programming #tutorial #design Add Comment 1 min read PHP Design Pattern: Adapter Antonio Silva Antonio Silva Antonio Silva Follow Oct 26 PHP Design Pattern: Adapter #php #designpatterns 9 * Beginner’s Guide to the Singleton Pattern Krishna Nayak Krishna Nayak Krishna Nayak Follow Oct 26 Beginner’s Guide to the Singleton Pattern #designpatterns #learning #java #beginners 6 * Proxy Design Pattern Srishti Prasad Srishti Prasad Srishti Prasad Follow Oct 19 Proxy Design Pattern #* #designpatterns 106 reactions 4 comments 6 min read Prototype Design Pattern Srishti Prasad Srishti Prasad Srishti Prasad Follow Oct 12 Prototype Design Pattern #* #designpatterns 7 * Decorator Pattern Sota Sota Sota Follow Nov 4 Decorator Pattern #java #computerscience #design #designpatterns 68 reactions 5 comments 2 min read Understanding PSR-12: The PHP Coding Style Guide Arafat Hossain Ar Arafat Hossain Ar Arafat Hossain Ar Follow Oct 21 Understanding PSR-12: The PHP Coding Style Guide #php #designpatterns #coding #webdev 11 * PHP Design Patterns: Facade Antonio Silva Antonio Silva Antonio Silva Follow Oct 21 PHP Design Patterns: Facade #php #designpatterns 2 reactions Add C* Resilience in Cloud-Native Applications diek diek diek Follow Nov 10 (1 hour ago) Introduction to Resilience in Cloud-Native Applications #cloud #designpatterns #devops Add Comment 2 min read Implementing Blue-Green Deployments with AWS Route 53 diek diek diek Follow Nov 10 (59 mins ago) Implementing Blue-Green Deployments with AWS Route 53 #devops #aws #* Bulkhead: Compartmentalizing Your Microservices diek diek diek Follow Nov 10 (53 mins ago) Bulkhead: Compartmentalizing Your Microservices #designpatterns #devops #cloud Add Comment 2 min read * 3 — The Observer Pattern * Oct 28 * 3 — The Observer Pattern #node #react #designpatterns #typescript Add C* Is it time for Data Science / Engineering patterns? 3 comments An IoC pattern to avoid repetitive if statements 21 comments For...else in JavaScript New JavaScript Singleton Pattern: Managing a Single Elevator Instance New Is Interface Segregation Principle Redundant? New Why Good Software Architecture and Sustainable Design Patterns are More Important Than Ever in Today's Job Market New Name a DESIGN PATTERN and WHY u use it 😀 ????? 7 comments Test Driven ... Everything 2 comments How do you maintain entity state in Golang 3 * Proxy Design Pattern Decorator Pattern Builder Design Pattern Factory Design Pattern in JavaScript Abstract Factory Design Pattern Understanding and Implementing the Repository Pattern in .NET The Difference Between Software Architecture Patterns and Design Principles Implementing the CQRS in a .NET Dynamic Payment Processor Selection in Laravel 11: Using the Factory Pattern Building a Unit of Work like pattern in NestJS and Sequelize. Optimiser la gestion des comportements avec le Pattern Strategy en PHP et Symfony The Best Microservices Design Patterns Explained Like You’re Ordering Pizza How to Add and Implement Payment Processing Interfaces in Laravel 11: The Part 1 with Hardcoded Binding Prototype Design Pattern IEnumerable<IService> Dependency Injection with Strategy Pattern and Factory Method in .NET Core PHP Design Pattern: Adapter Simplifier la gestion des permissions avec le Pattern Decorator en PHP et Symfony Beginner’s Guide to the Singleton Pattern Comprendre le Design Pattern Factory en PHP et Symfony ReactJS Design Patterns: Writing Robust and Scalable Component*nsor Neon * ",
    "url": "https://dev.to/t/designpatterns"
  },
  {
    "body": "* # devops Follow Hide Content centering around the shifting left of responsibility, deconstruction of responsibility silos, and the automation of repetitive work tasks. * Be nice. Be respectful. Assume best intentions. Be kind, rewind. tag moderators 20116 Posts Published Older #devops posts 1 2 3 4 5 6 7 8 9 …75 …335 *. Cloud Resume Challenge -AWS Aditya Pandey Aditya Pandey Aditya Pandey Follow Nov 10 Cloud Resume Challenge -AWS #cloudresumechallenge #cloudcomputing #devops #aws Add Comment 3 min read Overview of Docker Desktop Megha Sharma Megha Sharma Megha Sharma Follow Nov 10 Overview of Docker Desktop #devops #docker #opensource #cloud Add Comment 3 min read OpsLobby - A community for DevOps folks in games Robbie Cargill Robbie Cargill Robbie Cargill Follow Nov 10 OpsLobby - A community for DevOps folks in games #showdev #devops #gamedev #developers 8 *d 6 Ways Handle WebSocket Load Balancing Without Losing the Connection Thread * ) Hoài Nhớ ( Nick ) Follow Nov 9 6 Ways Handle WebSocket Load Balancing Without Losing the Connection Thread #webdev #websocket #beginners #devops 5 *ad How to Set Up Prometheus Exporters for PostgreSQL and MongoDB in Kubernetes Dmi*off Follow Nov 9 How to Set Up Prometheus Exporters for PostgreSQL and MongoDB in Kubernetes #monitoring #devops #database #kubernetes Add Comment 3 min read Setting Up MySQL on Kubernetes with Prometheus & Grafana Monitoring Dmi*off Follow Nov 9 Setting Up MySQL on Kubernetes with Prometheus & Grafana Monitoring #monitoring #devops #kubernetes #mysql * Mastering Terraform: File Types, Best Practices, and Use Cases Part 2 Vivesh Vivesh Vivesh Follow Nov 9 Mastering Terraform: File Types, Best Practices, and Use Cases Part 2 #terraform #cloud #devops #opensource 2 reactions *ng Java Build and Packaging: A Beginner's Guide to DevOps Tahmid Ul Muntakim Tahmid Ul Muntakim Tahmid Ul Muntakim Follow Nov 9 Understanding Java Build and Packaging: A Beginner's Guide to DevOps #javascript #java #devops *e DevOps Workflows with GitHub Actions Trix Cyrus Trix Cyrus Trix Cyrus Follow Nov 9 Automate DevOps Workflows with GitHub Actions #github #devops #automation #python 6 *d Actions Runner Controller (ARC) Setup Guide * 9 Actions Runner Controller (ARC) Setup Guide #devops #docker #github* Deploy The Multi-Container App * 9 Deploy The Multi-Container App #devops #docker Add Comment 6 min read How to create a Load Balancer in Azure Adedapo Adedapo Adedapo Follow Nov 9 How to create a Load Balancer in Azure #beginners #tutorial #cloud #devops Add Comment 2 min read * Follow Nov 9 Multi-stage Buil* Add Comment 2 min read Reviewing Filesystem Changes * 9 Reviewing Filesystem Changes #docker #devops Add Comment 4 min read Create and Commit an Ubuntu Container with Git Installed * 9 Create and Commit an Ubuntu Container with Git Installed #docker #devops Add Comment 3 min read Containerize a Single-Container App * 9 Containerize a Single-Container App #* Exploring Docker Image Layers and Size Management * 9 Exploring Docker Image Layers and Size Management #*ad Modifying Docker Image Attributes * 9 Modifying Docker Image Attribut*ad How I built the infrastructure for my cloud resume Anthony Vo Anthony Vo Anthony Vo Follow Nov 8 How I built the infrastructure for my cloud resume #cloud #aws #devops #terraform Add Comment 3 min read BSides Orlando 2024: Insights, Innovations, and Security Adventures Dwayne McDaniel Dwayne McDaniel Dwayne McDaniel Follow for GitGuardian Nov 8 BSides Orlando 2024: Insights, Innovations, and Security Adventures #techtalks #security #cybersecurity #devops Add Comment 7 min read Docker Container Restart Policies * 8 Docker Container Restart Polici*ad Communication Between Containers in a Custom Bridge Network * 8 Communication Between Containers in a Custom Bridge Network #* Log Sharing Between Containers * 8 Log Sharing Between Containers #devops #docker Add Comment 5 min read Getting Started with Oysape: Exploring Task and Pipeline Mike Aifetel Mike Aifetel Mike Aifetel Follow Nov 8 Getting Started with Oysape: Exploring Task and Pipeline #webdev #ssh #devops #cicd * Docker Images from a Container * 8 Building Docker Images from a Container #*nt 3 min read IBM InfoSphere vs. STIBO STEP: Which MDM Wins? Hana Sato Hana Sato Hana Sato Follow Nov 8 IBM InfoSphere vs. STIBO STEP: Which MDM Wins? #techtalks #datascience #devops Add Comment 6 min read DevEnvironmentOrchestrator: Revolutionizing Development Environment Management with AI * Abiola Oludotun Follow Nov 8 DevEnvironmentOrchestrator: Revolutionizing Development Environment Management with AI #devops #ai #productivity #developer * LimitRange in Kubernetes: A Guide with Examples Manikanta Manikanta Manikanta Follow Nov 8 Understanding LimitRange in Kubernetes: A Guide with Examples #kubernetes #devops #cloud #aws Add Comment 4 min read Deploying PostgreSQL, MySQL, and MongoDB on Kubernetes: A Step-by-Step Guide Dmi*off Follow Nov 9 Deploying PostgreSQL, MySQL, and MongoDB on Kubernetes: A Step-by-Step Guide #kubernetes #devops #database #* 4 min read Documentar antes da automatizar: Um Pilar para colaboração e onboarding eficiente. Roberson Miguel Roberson Miguel Roberson Miguel Follow Nov 9 Documentar antes da automatizar: Um Pilar para colaboração e onboarding eficiente. #devrel #devops #automation * How We Write Helm Charts 150% Faster in Our Organization Ori Granot Ori Granot Ori Granot Follow Nov 8 How We Write Helm Charts 150% Faster in Our Organization #devops #kubernetes #opensource #* * 2 Busa Ayim-Odu Busa Ayim-Odu Busa Ayim-Odu Follow Nov 8 * 2 #beginners #devops #learning #azure * 🚀 Awesome Resources For Learning About System Design ⚡ * Nov 8 🚀 Awesome Resources For Learning About System Design ⚡ #webdev #kubernetes #tutorial #devops *ting Azure Policy in your AKS cluster using Terraform Will Velida Will Velida Will Velida Follow Nov 8 Integrating Azure Policy in your AKS cluster using Terraform #azure #kubernetes #devops #tutorial * Pranav Bakare | PLSQL DEVELOPER * Nov 8 Pranav Bakare | PLSQL DEVELOPER #devops #developer #fullstack #oracle 6 * How I Went From Being a DBA to DevOps Engineer jmbharathram jmbharathram jmbharathram Follow Nov 8 How I Went From Being a DBA to DevOps Engineer #devops #database #dba Add Comment 1 min read The Transporter Of The Web The Dawn of the Universe The Dawn of the Universe The Dawn of the Universe Follow Nov 7 The Transporter Of The Web #webdev #web #proxy #devops Add Comment 6 min read Custom validation in Terraform omkar shelke omkar shelke omkar shelke Follow Nov 7 Custom validation in Terraform #terraform #devops #aws #automation 5 * KUBERNETICS Kaviyashree Tamilarasan Kaviyashree Tamilarasan Kaviyashree Tamilarasan Follow Nov 7 KUBERNETICS #devops #devsecops #cloudnative Add Comment 4 min read Schema Manager: Centralize Schemas in a Repository with Support for Schema Registry Integration Charles Colella Charles Colella Charles Colella Follow Nov 8 Schema Manager: Centralize Schemas in a Repository with Support for Schema Registry Integration #kafka #microservices #architecture #devops * SSDLC: 7 Steps to Create a Secure Software Supply Chain yayabobi yayabobi yayabobi Follow Nov 7 SSDLC: 7 Steps to Create a Secure Software Supply Chain #cybersecurity #devops Add Comment 7 min read Searching Docker Hub from the CLI * 7 Searching Docker Hub from the CLI #*nt 3 min read Multitenancy Is Fundamental to Shift-Left Testing Signadot Signadot Signadot Follow Nov 7 Multitenancy Is Fundamental to Shift-Left Testing #testing #qualityassurance #microservices #devops * 🌟 Introducing the My 3D Model Viewer! 🌟 Alberts Kresi Alberts Kresi Alberts Kresi Follow Nov 7 🌟 Introducing the My 3D Model Viewer! 🌟 #discuss #webdev #react #devops Add Comment 1 min read The Adventures of Blink S2e9: Gathering Metrics with Prometheus and Grafana Ben Link Ben Link Ben Link Follow Nov 7 The Adventures of Blink S2e9: Gathering Metrics with Prometheus and Grafana #monitoring #flask #python #devops Add Comment 5 min read \"Mastering Infrastructure Automation with Chef: A Comprehensive Guide for DevOps\" CHITRIKA BS CHITRIKA BS CHITRIKA BS Follow Nov 7 \"Mastering Infrastructure Automation with Chef: A Comprehensive Guide for DevOps\" #devops #chef #tooloverview #learning * Working with Docker Volumes * 8 Working with Docker Volumes #*nt 4 min read Rely.io October 2024 Product Update Roundup Tiago Barbosa Tiago Barbosa Tiago Barbosa Follow for Rely.io Nov 7 Rely.io October 2024 Product Update Roundup #devops #sre #platformengineering #idp Add Comment 4 min read Docker Bind Mounts * 7 Docker Bind Mounts #devops #docker Add Comment 5 min read Week 20 3MTT WEEKLY REFLECTION bankolejohn bankolejohn bankolejohn Follow Nov 7 Week 20 3MTT WEEKLY REFLECTION #devops #refle*he role of semantic html in enhancing SEO and web accessibility Denis Kinyua Denis Kinyua Denis Kinyua Follow Nov 8 The role of semantic html in enhancing SEO and web accessibility #webdev #devops #development #html Add Comment 1 min read The role of semantic html in enhancing SEO and web accessibility Denis Kinyua Denis Kinyua Denis Kinyua Follow Nov 8 The role of semantic html in enhancing SEO and web accessibility #development #html #web #devop*o Debug Ansible Playbooks * Nov 7 How to Debug Ansible Playbooks #ansible #devops #security 5 * Differentiating Docker stop vs Kill * 7 Differentiating Docker stop vs Kill #*ad Running an NGINX Web Server in a Docker Container * 7 Running an NGINX Web Server in a Docker Container #*ad Supercharging GitHub Project Management: Building an Intelligent Issue Bot with Cross-Namespace Configuration Support * Abiola Oludotun Follow Nov 8 Supercharging GitHub Project Management: Building an Intelligent Issue Bot with Cross-Namespace Configuration Support #devops #github #aiops #* Step by step guide to launch EC2 instance in a VPC using cloud formation Uwadone Joshua Uwadone Joshua Uwadone Joshua Follow Nov 8 Step by step guide to launch EC2 instance in a VPC using cloud formation #cloudformation #aws #devops #cloudengineering Add Comment 5 min read How to Reset Your Local Git Branch * Nov 7 How to Reset Your Local Git Branch #git #devops #security *ng Zero Downtime Deployments * 7 Understanding Zero Downtime Deployments #devops #zerodowntime #knowledgebyte #systemdesign Add Comment 2 min read Week 3 in DevOps: Beginning with Advanced AWS Services and Security Aman Deol Aman Deol Aman Deol Follow Nov 6 Week 3 in DevOps: Beginning with Advanced AWS Services and Security #aws #devops #cloud Add C* Resilience in Cloud-Native Applications diek diek diek Follow Nov 10 (1 hour ago) Introduction to Resilience in Cloud-Native Applications #cloud #designpatterns #devops Add Comment 2 min read Bulkhead: Compartmentalizing Your Microservices diek diek diek Follow Nov 10 (53 mins ago) Bulkhead: Compartmentalizing Your Microservices #designpatterns #devops #cloud Add Comment 2 min read Implementing Blue-Green Deployments with AWS Route 53 diek diek diek Follow Nov 10 (59 mins ago) Implementing Blue-Green Deployments with AWS Route 53 #devops #aws #* When Your AWS Bill Goes Viral and Your Finance Department Becomes a Memelord 🚀💸 diek diek diek Follow Nov 10 (57 mins ago) When Your AWS Bill Goes Viral and Your Finance Department Becomes a Memelord 🚀💸 #finops #devops #aws #humor Add Comment 2 min read Monitoring and logging Vivesh Vivesh Vivesh Follow Nov 10 (5 hours ago) Monitoring and logging #opensource #monitoring #devops #elk Add Comment 8 min read loading... #discuss Go for DevOps: From scratch to Hero Guide 🚀 2 comments 🌟 Introducing the My 3D Model Viewer! 🌟 New trending guides/resources Scripting in DevOps: A Complete Guide from Beginner to Advanced DevOps Automation with Shell Scripting 🚀 Python for DevOps: A Comprehensive Guide from Beginner to Advanced Learn AWS DevOps from Zero: A Complete Beginner’s Guide End-to-End AWS DevOps Project: Automate Java Application Build and Deployment on Amazon EKS How to Crack a DevOps Interview in One Attempt: A Complete Guide for Freshers and Experienced 100 AWS DevOps * How to Dockerize and Deploy Express.js APIs What is Platform Engineering? A Comprehensive Introduction to CI/CD Pipelines 5 costly mistakes when deploying Docker containers (and how to dodge them like a pro 😎) React 18: Must-Know Features & Upgrades for Beginners My journey to GitLab How to Dockerize and Deploy Astro 4 Easy Ways to Backup Docker Volumes Dockerfile Best Practices: Writing Efficient and Secure Docker Images Top Debugging Tools Every Developer Should Know The Ultimate Guide to DevOps Tools and Official Documentation The Ultimate DevOps Roadmap for Beginners: Skills, Tools, and Resources Is the \"Full Stack Developer\" a Myth? The Lie Behind the Title recently queried Install Docker on Raspberry Pi SSH Port Forwarding Canary Deployment SSH Agent Forwarding Ansible System*nsor Neon * ",
    "url": "https://dev.to/t/devops"
  },
  {
    "body": "* Discord Follow Hide Posts around Discord like bots, servers, tools. * Posts related to Discord, like bots, tools and others stuffs from Discord. ⚠️ Don't promote your Discord server/bot, uses DEV Listing for that. about #discord Discord is the easiest way to talk over voice, video, and text. Talk, chat, hang out, and stay close with your friends and communities. tag moderators 361 Posts Published Older #discord posts 1 2 3 4 5 6 *. * W*f Follow for WavePlay Nov 1 * #hacktoberfest #javascript #discord #node Add Comment 1 min read Running a Discord Bot on Raspberry Pi beretests beretests beretests Follow Oct 1 Running a Discord Bot on Raspberry Pi #python #raspberrypi #discord #aws 2 *d * 🎉 W*f Follow for WavePlay Oct 11 * 🎉 #javascript #hacktoberfest #programming #discord 7 *d * W*f Follow for WavePlay Sep 17 * #discord #node #javascript #* 3 min read Get News Updates automatically posted to your Discord using Supercog Emmanuel Onwuegbusi Emmanuel Onwuegbusi Emmanuel Onwuegbusi Follow Oct 4 Get News Updates automatically posted to your Discord using Supercog #nlp #tutorial #python #discord 5 *d * 🎉 W*f Follow for WavePlay Oct 2 * 🎉 #node #javascript #discord #hacktoberfest 8 * *! W*f Follow for WavePlay Oct 1 *! #javascript #discord #programming #*in read 🌟 Join the Open Source Community on Discord! 🚀 Vignesh J Vignesh J Vignesh J Follow Sep 27 🌟 Join the Open Source Community on Discord! 🚀 #vigneshdevhub #opensource #community #discord 8 *d New PHP Package: Discord Table Builder Martijn Smit Martijn Smit Martijn Smit Follow Sep 13 New PHP Package: Discord Table Builder #php #discord #* 2 min read Discord Status Widget in Next.js Sujal Agre Sujal Agre Sujal Agre Follow Aug 9 Discord Status Widget in Next.js #nextjs #discord #discordstatus #lanyardapi * Como Receber Mensagens no Discord com Cloudflare Functions Rhuan Oliveira Rhuan Oliveira Rhuan Oliveira Follow Jul 18 Como Receber Mensagens no Discord com Cloudflare Functions #tutorial #javascript #html #discord Add Comment 3 min read Build Your Own Discord Bot: A Node.js Journey from Scratch Akram Sakib Akram Sakib Akram Sakib Follow Aug 18 Build Your Own Discord Bot: A Node.js Journey from Scratch #beginners #node #discord #javascript 20 reactions 6 comments 5 min read Building Your Discord Bot with Discord.js v14: A Quick Start Guide ⚡️ Danteon Danteon Danteon Follow Aug 13 Building Your Discord Bot with Discord.js v14: A Quick Start Guide ⚡️ #discord #node #github #git 8 * Discord-WordPress Post Integration: Streamline Your Blog Notifications 🔔 Danteon Danteon Danteon Follow Aug 8 Discord-WordPress Post Integration: Streamline Your Blog Notifications 🔔 #wordpress #discord #php #github 4 reacti*e Your Own AI Discord Bot with Julep Ayush Thakur Ayush Thakur Ayush Thakur Follow for Julep Aug 4 Create Your Own AI Discord Bot with Julep #webdev #javascript #ai #discord 64 reactions 7 comments 11 min read NSFW Image Moderation on Discord: Creating Your Own Bot from Scratch Tarana Murtuzova Tarana Murtuzova Tarana Murtuzova Follow for API4AI Aug 2 NSFW Image Moderation on Discord: Creating Your Own Bot from Scratch #discord #nsfw #imagemoderation #imageprocessing * Discord AI Bot with Cohere LLM Integration SupermanSpace SupermanSpace SupermanSpace Follow Jul 27 Discord AI Bot with Cohere LLM Integration #discord #ai #opensource #python 8 * I refactored my Discord clone app to see if using Redux helps with state management, and here is what I found… Anthony Zhang Anthony Zhang Anthony Zhang Follow Jun 24 I refactored my Discord clone app to see if using Redux helps with state management, and here is what I found… #discord #redux #react #learning 2 * 🚀 How to Start a Discord Bot Using Node.js with Google Bard API 🤖 Mohammad Nizam Uddin Imran Mohammad Nizam Uddin Imran Mohammad Nizam Uddin Imran Follow Jul 13 🚀 How to Start a Discord Bot Using Node.js with Google Bard API 🤖 #discord #node #bot 4 *d Discord bot dashboard with OAuth2 (Nextjs) clxrity clxrity clxrity Follow Jul 11 Discord bot dashboard with OAuth2 (Nextjs) #nextjs #prisma #oauth #discord 8 * I made a Discord bot with lmstudio.js! DJ Johnson DJ Johnson DJ Johnson Follow Jun 26 I made a Discord bot with lmstudio.js! #lmstudio #discord #javascript #beginners * Create a simple joke command for discord in python Hazrat Ummar Shaikh Hazrat Ummar Shaikh Hazrat Ummar Shaikh Follow Jun 1 Create a simple joke command for discord in python #discord #python #bot #* I built my first SaaS - NotiFast Jakub Jabłoński Jakub Jabłoński Jakub Jabłoński Follow Jun 23 I built my first SaaS - NotiFast #showdev #discord #webdev #programming 77 * Build a Portable AI Companion with Discord’s User-Installable Apps (GPT 4o) W*f Follow for WavePlay Jun 18 Build a Portable AI Companion with Discord’s User-Installable Apps (GPT 4o) #discord #node #programming #javascript 8 *d How Discord Built `Access!` - An Authorization Management Portal Daniel Bass Daniel Bass Daniel Bass Follow for Permit.io Jun 18 How Discord Built `Access!` - An Authorization Management Portal #authorization #iam #discord #webdev 8 * Resolve Content Security Policy (CSP) Issues in Your Discord Activity Using a Node.js Proxy W*f Follow for WavePlay Jun 17 Resolve Content Security Policy (CSP) Issues in Your Discord Activity Using a Node.js Proxy #discord #programming #node #*nt 5 min read NextJS Discord Bot | Create and host a bot for free. mmvergara mmvergara mmvergara Follow Jun 13 NextJS Discord Bot | Create and host a bot for free. #discord #nextjs #javascript #webdev 13 * Where's the DEV discord server? FrontEndWebDeveloping FrontEndWebDeveloping FrontEndWebDeveloping Follow Jun 12 Where's the DEV discord server? #help #discord #forem 1 reaction 5 comments 1 min read Create breath-taking videos with PixVerse AI useapi.net useapi.net useapi.net Follow Jun 9 Create breath-taking videos with PixVerse AI #pixverse #discord #ai #webdev 8 * Achieve Game-Like Scaling in Discord Activities and Web Apps Using CSS W*f Follow for WavePlay Jun 3 Achieve Game-Like Scaling in Discord Activities and Web Apps Using CSS #javascript #programming #node #discord 6 * Add Advanced Features to Your Discord Bot Without Code (Discord.js + Robo.js) W*f Follow for WavePlay May 31 Add Advanced Features to Your Discord Bot Without Code (Discord.js + Robo.js) #javascript #node #programming #discord 2 *d How to create urban discord command in python? Hazrat Ummar Shaikh Hazrat Ummar Shaikh Hazrat Ummar Shaikh Follow May 31 How to create urban discord command in python? #python #discord #bot #* How to Fix Stuck Ready Event in Discord Embedded App SDK W*f Follow for WavePlay May 27 How to Fix Stuck Ready Event in Discord Embedded App SDK #* #node 5 * Slack vs. Discord: Choosing Your Tech Community's Playground Ajeet Singh Raina Ajeet Singh Raina Ajeet Singh Raina Follow May 26 Slack vs. Discord: Choosing Your Tech Community's Playground #slack #discord #chatgpt 3 *d How to Add Multiplayer to Your Discord Activity W*f Follow for WavePlay May 21 How to Add Multiplayer to Your Discord Activity #* #node 10 * Robo.js v0.10 is here - more than just Discord.js bots W*f Follow for WavePlay Apr 16 Robo.js v0.10 is here - more than just Discord.js bots #javascript #node #programming #discord Add Comment 3 min read Create JavaScript Discord bot to alert Twitch live streams Preeti Agarwal Preeti Agarwal Preeti Agarwal Follow May 17 Create JavaScript Discord bot to alert Twitch live streams #discord #node #javascript 3 * Discord CDN Proxy useapi.net useapi.net useapi.net Follow May 13 Discord CDN Proxy #discord #webdev #javascript #tutorial 8 reactions 6 comments 7 min read Use Your Discord Bot Everywhere: User-Installable Apps (Discord.js + Robo.js) W*f Follow for WavePlay May 14 Use Your Discord Bot Everywhere: User-Installable Apps (Discord.js + Robo.js) #discord #javascript #programming #node 7 react*te and Deploy a Discord Bot for Free with Fly.io Colum Kelly Colum Kelly Colum Kelly Follow May 13 Create and Deploy a Discord Bot for Free with Fly.io #webdev #javascript #discord 3 * Getting credentials for your Discord Activity W*f Follow for WavePlay Apr 18 Getting credentials for your Discord Activity #discord #activity #javascript #* 2 min read Modern new way to use Discord.js command options (Robo.js) W*f Follow for WavePlay May 6 Modern new way to use Discord.js command options (Robo.js) #node #* 4 *d Get started with coding a discord bot Hemang Yadav Hemang Yadav Hemang Yadav Follow Apr 21 Get started with coding a discord bot #javascript #beginners #discord #node 4 react*ting a Discord Activity in seconds with Robo.js W*f Follow for WavePlay Apr 9 Creating a Discord Activity in seconds with Robo.js #discord #sdk #javascript #bot 23 * Now Live: Free Dedicated Discord Bot Hosting on RoboPlay (Read for Invites Codes) W*f Follow for WavePlay Feb 16 Now Live: Free Dedicated Discord Bot Hosting on RoboPlay (Read for Invites Codes) #discord #node #programming #*t 3 min read Welcome Discord Users Awesomely! Kunal Kande Patil Kunal Kande Patil Kunal Kande Patil Follow Mar 18 Welcome Discord Users Awesomely! #discord #unburn #opensource #greetify 10 * Create a Custom ChatGPT Bot in Discord (with GPT-4) Eden AI Eden AI Eden AI Follow Mar 5 Create a Custom ChatGPT Bot in Discord (with GPT-4) #ai #api #discord 4 * First Setup to programm a discord bot in python Ekcum Ekcum Ekcum Follow Feb 28 First Setup to programm a discord bot in python #discord #python #beginners #learning * How to create a dynamic AI Discord bot with TypeScript clxrity clxrity clxrity Follow Feb 19 How to create a dynamic AI Discord bot with TypeScript #discord #typescript #openai #ai 5 *ad Awesome Music Cards For Discord Bots Kunal Kande Patil Kunal Kande Patil Kunal Kande Patil Follow Feb 17 Awesome Music Cards For Discord Bots #discord #unburn #node #musicard 8 * Kotlin Devs Brasil: Fortalecendo a Comunidade Kotlin no Brasil 🚀 Lucas Fugisawa Lucas Fugisawa Lucas Fugisawa Follow Feb 27 Kotlin Devs Brasil: Fortalecendo a Comunidade Kotlin no Brasil 🚀 #kotlin #programming #community #discord 7 * Discord in Firefox, with themes, plugins and RPC for free SnowCode SnowCode SnowCode Follow Feb 7 Discord in Firefox, with themes, plugins and RPC for free #discord #firefox #extensions #tutorial 9 *d How to Build a Discord Bot With Node.JS Damir Ljubičić Damir Ljubičić Damir Ljubičić Follow Feb 7 How to Build a Discord Bot With Node.JS #node #discord #howto #*t 9 min read Morning Daily Routine Bot for Your Discord Server Titus Efferian Titus Efferian Titus Efferian Follow Jan 20 Morning Daily Routine Bot for Your Discord Server #javascript #discord #circleci #tutorial 2 * Introducing Sage CLI: A Magic Tool for Robo.js W*f Follow for WavePlay Dec 12 '23 Introducing Sage CLI: A Magic Tool for Robo.js #discord #programming #javascript #*in read Coding the Shield: A Deep Dive into the Development of the Discord Bot that Blocked 1000+ Phishing Attacks Çetin Kaan Taşkıngenç Çetin Kaan Taşkıngenç Çetin Kaan Taşkıngenç Follow Jan 8 Coding the Shield: A Deep Dive into the Development of the Discord Bot that Blocked 1000+ Phishing Attacks #javascript #security #discord #node 7 * Seamless emoji creation on Discord with bots and Vercel Ante Barić Ante Barić Ante Barić Follow Jan 6 Seamless emoji creation on Discord with bots and Vercel #discord #vercel #emoji #programming * Como criar um bot do discord com javascript Falcão Falcão Falcão Follow Jan 2 Como criar um bot do discord com javascript #discord #braziliandevs #tutorial #node 22 reactions 2 comments 15 min read How to create a discord bot with javascript Falcão Falcão Falcão Follow Jan 2 How to create a discord bot with javascript #discord #tutorial #node #beginners 5 reactions 1 comment 15 min read Automating AWS CodePipeline Notifications to Discord Using Lambda and Terraform Mikaeel Khalid Mikaeel Khalid Mikaeel Khalid * Dec 11 '23 Automating AWS CodePipeline Notifications to Discord Using Lambda and Terraform #aws #terraform #lambda #discord 3 * loading... #discuss What developer communities do you follow and why? 4 comments Dev.to Community Discord 7 comments Discord is Becoming a Chore! How to categorize and organize all of your servers! 2 comments My week so far New Discord (or Slack) suggestions? 3 comments Discord Servers 2 * * *! * 🎉 * 🎉 New PHP Package: Discord Table Builder Get News Updates automatically posted to your Discord using Supercog Running a Discord Bot on Raspberry Pi 🌟 Join the Open Source Community on Discord! 🚀 recently queried Discord Embed Programming Discord Soundboard for Discord Discord Py Music Bot for Discord How to make a Discord bot Discord Censor Bo*nsor Neon * ",
    "url": "https://dev.to/t/discord"
  },
  {
    "body": "* Docker Follow Hide Stories about Docker as a technology (containers, CLI, Engine) or company (Docker Hub, Docker Swarm). * All docker-related stories are allowed, eg: security, docker-compose, images, commands or platform-specific issues. about #docker Docker is the most popular container solution, a way to perform operating-system level virtualization of processes. Containers are used to pack/wrap an application including all its dependencies and ship it as a single package. tag moderators 9037 Posts Published Older #docker *50 *. Overview of Docker Desktop Megha Sharma Megha Sharma Megha Sharma Follow Nov 10 Overview of Docker Desktop #devops #docker #opensource #cloud Add Comment 3 min read Actions Runner Controller (ARC) Setup Guide * 9 Actions Runner Controller (ARC) Setup Guide #devops #docker #github* Deploy The Multi-Container App * 9 Deploy The Multi-Container App #devops #docker Add Comment 6 min read * Follow Nov 9 Multi-stage Buil* Add Comment 2 min read Reviewing Filesystem Changes * 9 Reviewing Filesystem Changes #docker #devops Add Comment 4 min read Create and Commit an Ubuntu Container with Git Installed * 9 Create and Commit an Ubuntu Container with Git Installed #docker #devops Add Comment 3 min read Containerize a Single-Container App * 9 Containerize a Single-Container App #* Exploring Docker Image Layers and Size Management * 9 Exploring Docker Image Layers and Size Management #*ad Modifying Docker Image Attributes * 9 Modifying Docker Image Attribut*ad NextJs, Docker and IP Geolocation Jorge Jorge Jorge Follow Nov 9 NextJs, Docker and IP Geolocation #nextjs #docker #maxmind #geolocation * Docker Container Restart Policies * 8 Docker Container Restart Polici*ad Docker ও VM-এর মধ্যে পার্থক্যগুলো কী? Bayajid Alam Juyel Bayajid Alam Juyel Bayajid Alam Juyel Follow Nov 8 Docker ও VM-এর মধ্যে পার্থক্যগুলো কী? #docker #virtualmachine #cloudcomputing Add Comment 1 min read Communication Between Containers in a Custom Bridge Network * 8 Communication Between Containers in a Custom Bridge Network #* Log Sharing Between Containers * 8 Log Sharing Between Containers #devops #docker * Docker Images from a Container * 8 Building Docker Images from a Container #*nt 3 min read Searching Docker Hub from the CLI * 7 Searching Docker Hub from the CLI #*nt 3 min read Working with Docker Volumes * 8 Working with Docker Volumes #*nt 4 min read Docker Bind Mounts * 7 Docker Bind Mounts #devops #docker Add Comment 5 min read Differentiating Docker stop vs Kill * 7 Differentiating Docker stop vs Kill #*ad Running an NGINX Web Server in a Docker Container * 7 Running an NGINX Web Server in a Docker Container #*ad Simple steps to debug docker build Le Vuong Le Vuong Le Vuong Follow Nov 6 Simple steps to debug docker build #docker #build #debug #troubleshoot Add Comment 1 min read Web Development in Docker Containers Using Express.js Om Prakash Tiwari Om Prakash Tiwari Om Prakash Tiwari Follow Nov 6 Web Development in Docker Containers Using Express.js #docker #express #* 4 min read Creating AWS layer with Docker. Anariak Anariak Anariak Follow Nov 6 Creating AWS layer with Docker. #aws #serverless #python #docker A* Docker compose setups as standalone containers Lukas Mauser Lukas Mauser Lukas Mauser Follow Nov 8 How to run Docker compose setups as standalone containers #docker #devops #webdev #beginners 11 reactions 3 comments 6 min read CouchDB: Offline-first multi-master synchronization using Docker and Docker-compose Aniello Musella Aniello Musella Aniello Musella Follow Nov 5 CouchDB: Offline-first multi-master synchronization using Docker and Docker-compose #couchdb #docker #nosql #database Add Comment 6 min read Why Docker is Essential for Modern Development Environments and Its Alternatives * Aditya Pratap Bhuyan Follow Nov 5 Why Docker is Essential for Modern Development Environments and Its Alternatives #docker Add Comment 7 min read Docker + MariaDB 에서 ERROR: (conn:4, no: 45009, SQLState: 08S01) socket has unexpectedly been closed Beaver Bridge Beaver Bridge Beaver Bridge Follow Nov 5 Docker + MariaDB 에서 ERROR: (conn:4, no: 45009, SQLState: 08S01) socket has unexpectedly been closed #docker #mariadb #sequelize *ction to Docker Compose * 9 Introduction to Docker Compose #* Basic GitHub Actions Checkout * 9 Basic GitHub Actions Checkout #devops #docker #githubactions 2 *d Docker Networking every developer should know Gias Uddin Gias Uddin Gias Uddin Follow Nov 5 Docker Networking every developer should know #docker #devops #container Add Comment 4 min read 4 stages of Automata theory Fazly Fathhy Fazly Fathhy Fazly Fathhy Follow Nov 5 4 stages of Automata theory #docker #awscommunitybuilders #aws Add Comment 1 min read Install ionCube Loader in Docker Julian Finkler Julian Finkler Julian Finkler Follow Nov 6 Install ionCube Loader in Docker #php #docker #devops #cicd Add Comment 1 min read End to End Data Engineering OTP Pipeline Project Cey Cey Cey Follow Nov 4 End to End Data Engineering OTP Pipeline Project #docker #airflow #kafka #mongodb Add Comment 3 min read Zero-Downtime Blue-Green Deployment with a Simple 'git pull & bash run.sh' Command Andrew Kang-G Andrew Kang-G Andrew Kang-G Follow Nov 4 Zero-Downtime Blue-Green Deployment with a Simple 'git pull & bash run.sh' Command #cicd #sre #webdev #docker * Hosting my hobby projects from cheap HP mini desktop from my closet (Verizon Fios) Fatih Felix Yildiz Fatih Felix Yildiz Fatih Felix Yildiz Follow Nov 4 Hosting my hobby projects from cheap HP mini desktop from my closet (Verizon Fios) #selfhosting #docker #ubuntu #portainer 2 * Using tunneling via Cloudflare in your self-hosted applications Blacktrecks Blacktrecks Blacktrecks Follow Nov 4 Using tunneling via Cloudflare in your self-hosted applications #docker #containers #linux Add Comment 1 min read Como criei minha própria imagem Docker do Apache Benchmark para testes de stress em servidores web Marcos Vilela Marcos Vilela Marcos Vilela Follow Nov 8 Como criei minha própria imagem Docker do Apache Benchmark para testes de stress em servidores web #apache #benchmark #docker #githubactions * Deploying a Monitored NGINX Web Server Using Docker * 7 Deploying a Monitored NGINX Web Server Using Docker #* Redis + Redundância com Sentinel + Docker * Airton Lira junior Follow Nov 2 Redis + Redundância com Sentinel + Docker #redis #sentinel #redissentinel #docker Add Comment 5 min read DevOps Fundamentals: Breaking Down the Culture, Tools, and Practices Shubham Sharma Shubham Sharma Shubham Sharma Follow Nov 3 DevOps Fundamentals: Breaking Down the Culture, Tools, and Practices #devops #devchallenge #docker #puppet 5 *d Using Coolify to Simplify Deployments Matt Hatcher Matt Hatcher Matt Hatcher Follow Nov 3 Using Coolify to Simplify Deployments #devops #infrastructure #docker #deployment 1 reaction Add Comment 12 min read Navigating a codebase with an API Robert McKnight Robert McKnight Robert McKnight Follow Nov 6 Navigating a codebase with an API #ai #api #docker #architecture 10 *d Monitoring and Logging in Jenkins: A Complete Guide Avesh Avesh Avesh Follow Nov 2 Monitoring and Logging in Jenkins: A Complete Guide #jenkins #docker #monitoring #sideprojects Add Comment 5 min read Install Docker Desktop on Mac Megha Sharma Megha Sharma Megha Sharma Follow Nov 6 Install Docker Desktop on Mac #docker #opensource #devops #development 6 *d Automated testing and reporting are essential components of the CI/CD process in Jenkins, Avesh Avesh Avesh Follow Nov 1 Automated testing and reporting are essential components of the CI/CD process in Jenkins, #jenkins #docker #100daysofcode #cicd Add Comment 4 min read How to self-host MongoDB on a Raspberry Pi 4 The Smartbug The Smartbug The Smartbug Follow Nov 6 How to self-host MongoDB on a Raspberry Pi 4 #mongodb #database #raspberrypi #docker Add Comment 2 min read Docker Installation on Linux Megha Sharma Megha Sharma Megha Sharma Follow Nov 1 Docker Installation on Linux #docker #linux #devops #* Next.js containerization using Docker RedRobot.dev RedRobot.dev RedRobot.dev Follow Nov 4 Next.js containerization using Docker #nextjs #docker 3 *d CKA Full Course 2024: Day 12/40 Daemonsets, Job and Cronjob in Kubernetes Lloyd Rivers Lloyd Rivers Lloyd Rivers Follow Oct 31 CKA Full Course 2024: Day 12/40 Daemonsets, Job and Cronjob in Kubernetes #webdev #beginners #kubernetes #docker Add Comment 5 min read Run Gitlab CI jobs on a specific runner Hamid Haghdoost Hamid Haghdoost Hamid Haghdoost Follow Oct 31 Run Gitlab CI jobs on a specific runner #gitlab #cicd #azure #docker Add Comment 2 min read Spring Boot with Docker and Kubernetes: Containerizing and Deploying Your Java Applications Igo*lli Follow Oct 30 Spring Boot with Docker and Kubernetes: Containerizing and Deploying Your Java Applications #spring #container #docker #kubernetes Add Comment 4 min read How I can run elasticsearch locally for development using docker? Dimitrios Desyllas Dimitrios Desyllas Dimitrios Desyllas Follow Oct 30 How I can run elasticsearch locally for development using docker? #docker #elasticsearch #* CKA Full Course 2024: Day 13/40 Static Pods, Manual Scheduling, Labels, and Selectors in Kubernetes Lloyd Rivers Lloyd Rivers Lloyd Rivers Follow Nov 3 CKA Full Course 2024: Day 13/40 Static Pods, Manual Scheduling, Labels, and Selectors in Kubernetes #webdev #javascript #kubernetes #docker Add Comment 6 min read Understanding \"working-directory\" in GitHub Actions * Oct 30 Understanding \"working-directory\" in GitHub Actions #webdev #github #devops #docker 4 *d Comparing 3 Docker container runtimes - Runc, gVisor and Kata Containers Ákos Takács Ákos Takács Ákos Takács Follow Oct 29 Comparing 3 Docker container runtimes - Runc, gVisor and Kata Containers #docker #containers #devops Add Comment 12 min read Most Commonly Used Docker Commands! Srikanth Jana Srikanth Jana Srikanth Jana Follow Oct 29 Most Commonly Used Docker Commands! #docker #containers #devops Add Comment 2 min read Set Up Your Own Local GitLab Server | Self-hosted GitLab Ishmam Abir | イシュマム・アビル Ishmam Abir | イシュマム・アビル Ishmam Abir | イシュマム・アビル Follow Oct 29 Set Up Your Own Local GitLab Server | Self-hosted GitLab #git #gitlab #docker #localhost Add Comment 5 min read Share docker image on docker hub Rajnish Rajnish Rajnish Follow Nov 2 Share docker image on docker hub #webdev #docker #python #* From Setup to Deployment: Running a Flask App in Docker on Mac Rajnish Rajnish Rajnish Follow Nov 2 From Setup to Deployment: Running a Flask App in Docker on Mac #docker #python #webdev Add Comment 3 min read Docker exposes itself to your LAN Jarle Fosen Jarle Fosen Jarle Fosen Follow Oct 28 Docker exposes itself to your LAN #docker #ip #lan Add C* Has anyone tried Docker Installation on Ubuntu 24.04 New Docker Cheatsheet 16 comments From Novice to Tycoon: A Beginner’s Journey in Passive Real Estate Investing New So is it .yaml? Or .yml? 10 comments Buy Google Voice Accounts New Buy Verified Paxful Account New Docker alternative Podman on rise 🚀: The Future of DevOps? 6 comments When Does It Make Sense to Use Docker? 27 comments `docker compose` (v2) vs `docker-compose` (v1) vs `podman-compose` - which one to choose? 1 comment Docker is not suitable for windows. 9 * How to Dockerize and Deploy Express.js APIs 5 costly mistakes when deploying Docker containers (and how to dodge them like a pro 😎) How to Dockerize and Deploy Astro Dockerfile Best Practices: How to Create Efficient Containers 4 Easy Ways to Backup Docker Volumes Python CRUD Rest API using Flask, SQLAlchemy, Postgres, Docker, Docker Compose Dockerfile Best Practices: Writing Efficient and Secure Docker Images Mastering Docker: Essential Best Practices for Efficiency and Security👮🏻 How to deploy a backend application to DigitalOcean using Docker and Encore How to Reduce Docker Image Size: Best Practices and Tips for DevOps Engineers 5 Cheap Ways to Host MongoDB Top 5 reverse proxies - Which one should you choose? 100 Common Docker Errors & Solutions LocalStack e Docker: Como aumentar a produtividade no desenvolvimento LOCAL sem custos How to Dockerize Vite Deploy multiple apps on a single VPS with Docker Dockerizing your Java Spring Boot application with Maven, along with a PostgreSQL database DevSecOps Project: \"Secure Full-Stack Node.js Web Application Deployment with Jenkins, Docker, Kubernetes, and HashiCorp Vault\" 🛠 Building Scalable Microservice Architecture in Next.js 🚀 Run WordPress locally using Docker! recently queried Install Docker on Raspberry Pi Laravel Docker Kubernetes Docker Deprecated Docker Build Proxy Docker React WSL 2 Docker Docker Rails Deploymen*nsor Neon * ",
    "url": "https://dev.to/t/docker"
  },
  {
    "body": "* # dynamodb * 437 Posts Published Older #dynamodb posts 1 2 3 4 5 6 7 *. Schema V*mSher* Query DynamoDB with SQL using Athena - Leveraging DynamoDB Exports to S3 (1/2) * Marko - ServerlessLife.com Follow Nov 5 Query DynamoDB with SQL using Athena - Leveraging DynamoDB Exports to S3 (1/2) #aws #dynamodb #athena #serverless Add Comment 2 min read Securing Customer Support with AWS Services and Slack Integration Nada Ahmed Nada Ahmed Nada Ahmed Follow Oct 30 Securing Customer Support with AWS Services and Slack Integration #serverless #dynamodb #s3 #securitycommunication * Use Cases for DynamoDB in Provisioned Mode vs. Auto Scaling: Advantages and Disadvantages * Wallace Freitas Follow Nov 7 Use Cases for DynamoDB in Provisioned Mode vs. Auto Scaling: Advantages and Disadvantages #aws #* Not only dynamoDb migration or seed scripting pedchenkoroman pedchenkoroman pedchenkoroman Follow Nov 6 Not only dynamoDb migration or seed scripting #aws #dynamodb #migration #development 7 * DynamoDB Transactions with AWS Step Functions Viktor Ardelean Viktor Ardelean Viktor Ardelean Follow Oct 19 DynamoDB Transactions with AWS Step Functions #aws #dynamodb #stepfunc*reate an API to get data from your DynamoDB Database using CDK Calvin Torra Calvin Torra Calvin Torra Follow Oct 18 Create an API to get data from your DynamoDB Database using CDK #aws #lambda #dynamodb Add Comment 1 min read AWS Database - Part 2: DynamoDB Hulk Pham Hulk Pham Hulk Pham Follow Oct 31 AWS Database - Part 2: DynamoDB #aws #cloud #dynamodb 5 *d Get Started with NoSQL: AWS DynamoDB Fundamentals for Beginners Justin Dominic S. Veloso Justin Dominic S. Veloso Justin Dominic S. Veloso Follow Nov 4 Get Started with NoSQL: AWS DynamoDB Fundamentals for Beginners #database #dynamodb #aws 6 reactions * DynamoDB: Batch Operations Explained Lorenzo Hidalgo Gadea Lorenzo Hidalgo Gadea Lorenzo Hidalgo Gadea * Oct 16 Mastering DynamoDB: Batch Operations Explained #dynamodb #aws #serverless #nosql 6 * Move Data from DynamoDB to Redshift Using Estuary Sourabh Gupta Sourabh Gupta Sourabh Gupta Follow Oct 4 Move Data from DynamoDB to Redshift Using Estuary #dynamodb #redshift #etl Add Comment 4 min read Efficiently Deleting Multiple Lakhs of Records from DynamoDB Using Lambda: A Comprehensive Guide Sakshi Agarwal Sakshi Agarwal Sakshi Agarwal Follow Sep 29 Efficiently Deleting Multiple Lakhs of Records from DynamoDB Using Lambda: A Comprehensive Guide #aws #* AWS Cost Management now provides purchase recommendations for Amazon #DynamoDB reserved capacity * Karthik Sakthivel Follow Sep 23 AWS Cost Management now provides purchase recommendations for Amazon #DynamoDB reserved capacity #aws #costmanagement #finops #dynamodb Add Comment 1 min read AWS Dynamo DB: A Beginner’s Guide kabeer1choudary kabeer1choudary kabeer1choudary Follow Sep 8 AWS Dynamo DB: A Beginner’s Guide #aws #cloud #beginners #dynamodb Add Comment 2 min read * * Oct 11 * #aws #serverless #lambda #dynamodb 2 *d Amazon DynamoDB announces new support for Attribute-Based Access Control (ABAC) for tables and indexes * Karthik Sakthivel Follow Sep 5 Amazon DynamoDB announces new support for Attribute-Based Access Control (ABAC) for tables and indexes #aws #dynamodb #iam Add Comment 1 min read How DynamoDB Handles Failure Like a Pro (And How You Can Too) Nozim Islamov Nozim Islamov Nozim Islamov Follow Sep 1 How DynamoDB Handles Failure Like a Pro (And How You Can Too) #dynamodb #aws #distributedsystems #faulttolerance Add Comment 4 min read DynamoDB Single-Table Design with TypeScript Camilo Reyes Camilo Reyes Camilo Reyes Follow for AppSignal Oct 2 DynamoDB Single-Table Design with TypeScript #node #dynamodb #typescript * Integrating Data with AWS Glue, Dynamodb, S3 and Amazon Athena Uendi Hoxha Uendi Hoxha Uendi Hoxha Follow Oct 1 Integrating Data with AWS Glue, Dynamodb, S3 and Amazon Athena #aws #dynamodb #s3 #awsglue 12 *d Amazon DynamoDB adds support for attribute-based access control Learn2Skills Learn2Skills Learn2Skills * Sep 30 Amazon DynamoDB adds support for attribute-based access control #cloud #aws #dynamodb #devops 3 *d How to accidentally create read-only DynamoDB items Maurice Borgmeier Maurice Borgmeier Maurice Borgmeier * Sep 14 How to accidentally create read-only DynamoDB items #dynamodb #aws #cloud 5 * Grokking DynamoDB with TypeScript Camilo Reyes Camilo Reyes Camilo Reyes Follow for AppSignal Aug 7 Grokking DynamoDB with TypeScript #typescript #node #dynamodb * Use Cases for working with DynamoDB alongside Node.js and Typescript * Wallace Freitas Follow Sep 5 Use Cases for working with DynamoDB alongside Node.js and Typescript #node #typescript #dynamodb 2 * Easily Migrate From DynamoDB To Couchbase With CLI And IDE Plugins Brian King Brian King Brian King Follow for Couchbase Aug 30 Easily Migrate From DynamoDB To Couchbase With CLI And IDE Plugins #couchbasecapella #dynamodb #couchbase #cbmigrate Add Comment 3 min read Cloud Resume API Challenge Sylvia Waweru Sylvia Waweru Sylvia Waweru Follow Jul 30 Cloud Resume API Challenge #aws #githubactions #terraform #* Momento added as an Amazon EventBridge API destination! Rishti Gupta Rishti Gupta Rishti Gupta Follow for Momento Aug 27 Momento added as an Amazon EventBridge API destination! #momento #eventbridge #dynamodb 11 * How to connect DynamoDB with CakePHP4 Nao Nao Nao Follow Jul 10 How to connect DynamoDB with CakePHP4 #dynamodb #cakephp #aws #awssdk Add Comment 4 min read How to Manage DynamoDB Tables With Terraform Spacelift team Spacelift team Spacelift team Follow for Spacelift Aug 13 How to Manage DynamoDB Tables With Terraform #terraform #dynamodb #aws #infrastructureascode Add Comment 9 min read Implementando Transactional Outbox com Go, DynamoDB, MongoDB, Kafka e RabbitMq Eder Matos Eder Matos Eder Matos Follow Jul 10 Implementando Transactional Outbox com Go, DynamoDB, MongoDB, Kafka e RabbitMq #microservices #dynamodb #mongodb #transactionaloutbox 3 * Creating and Linking VPC Endpoint of Type Interface using Terraform and AWS management console se-piyush se-piyush se-piyush Follow Aug 8 Creating and Linking VPC Endpoint of Type Interface using Terraform and AWS management console #aws #terraform #vpc #* Setting Up VPC and Lambda Function with Terraform se-piyush se-piyush se-piyush Follow Aug 7 Setting Up VPC and Lambda Function with Terraform #aws #terraform #dynamodb #lambda Add Comment 4 min read Setting Up a VPC for Your App Using AWS Management Console se-piyush se-piyush se-piyush Follow Aug 6 Setting Up a VPC for Your App Using AWS Management Console #aws #lambda #dynamodb #vpc Add Comment 5 min read Fixing... err... I mean \"implementing\" my Amazon DynamoDB approach with Gen-AI Cobus Bernard 🌩 🇿🇦 🥑 Cobus Bernard 🌩 🇿🇦 🥑 Cobus Bernard 🌩 🇿🇦 🥑 Follow for AWS Jul 2 Fixing... err... I mean \"implementing\" my Amazon DynamoDB approach with Gen-AI #amazonqdeveloper #terraform #lambda #dynamodb 5 reactions Add Comment 27 min read Single Table Design in AWS DynamoDB manojlingala manojlingala manojlingala * Jul 27 Single Table Design in AWS DynamoDB #aws #dynamodb #singletabledesign #nosql 12 * Use Lambda and DynamoDB to resize S3 Image Uploaded using TERRAFORM Kevin Lac*tio Kemta Follow Jul 19 Use Lambda and DynamoDB to resize S3 Image Uploaded using TERRAFORM #terraform #awschallenge #lambda #dynamodb 3 * Securing Data at Rest: The Importance of Encryption and How to Implement It * Jul 14 Securing Data at Rest: The Importance of Encryption and How to Implement It #security #serverless #data #* Effective task management in Habitica using a text file and AWS Serverless Piotr Pabis Piotr Pabis Piotr Pabis * Jul 13 Effective task management in Habitica using a text file and AWS Serverless #habitica #lambda #stepfunctions #dynamodb 8 reactions Add Comment 17 min read 7 practices I learned while developing applications with API Gateway service integrations Arpad Toth Arpad Toth Arpad Toth * Jul 11 7 practices I learned while developing applications with API Gateway service integrations #aws #apigateway #dynamodb #serverless 3 * Creating Cross-Account DynamoDB Backups with Terraform se-piyush se-piyush se-piyush Follow Jul 10 Creating Cross-Account DynamoDB Backups with Terraform #terraform #aws #dynamodb #security * Adding parameters to my Serverless Web Scraper API Cobus Bernard 🌩 🇿🇦 🥑 Cobus Bernard 🌩 🇿🇦 🥑 Cobus Bernard 🌩 🇿🇦 🥑 Follow for AWS Jul 4 Adding parameters to my Serverless Web Scraper API #amazonqdeveloper #terraform #lambda #dynamodb 3 reactions Add Comment 30 min read Creating Secure Backups for DynamoDB Tables with Terraform se-piyush se-piyush se-piyush Follow Jul 3 Creating Secure Backups for DynamoDB Tables with Terraform #aws #terraform #dynamodb * Building a Serverless Web Scraper with a ~little~ lot of help from Amazon Q Cobus Bernard 🌩 🇿🇦 🥑 Cobus Bernard 🌩 🇿🇦 🥑 Cobus Bernard 🌩 🇿🇦 🥑 Follow for AWS Jul 1 Building a Serverless Web Scraper with a ~little~ lot of help from Amazon Q #amazonqdeveloper #terraform #lambda #dynamodb 6 reactions Add Comment 60 min read Need a JSON object comparison that's better than line-by-line Mark Thomas Mark Thomas Mark Thomas Follow Jun 20 Need a JSON object comparison that's better than line-by-line #json #react #npm #dynamodb 2 react*te a Fast Node.js Serverless Backend Using AWS Lambda and DynamoDB Wilson K. KOMLAN Wilson K. KOMLAN Wilson K. KOMLAN Follow Jun 15 Create a Fast Node.js Serverless Backend Using AWS Lambda and DynamoDB #lambda #aws #awslambda #dynamodb * Building a Feature Proposal and Voting System with React, NodeJS, and DynamoDB Radzion Chachura Radzion Chachura Radzion Chachura Follow Jun 3 Building a Feature Proposal and Voting System with React, NodeJS, and DynamoDB #react #node #dynamodb #webdev 2 * Why You Should Use AWS DynamoDB For Your Applications At Scale Uriel Bitton Uriel Bitton Uriel Bitton Follow May 30 Why You Should Use AWS DynamoDB For Your Applications At Scale #dynamodb #database #scalability #aws 2 *d DynamoDB as API Akbar Ali Hussain Akbar Ali Hussain Akbar Ali Hussain Follow Apr 12 DynamoDB as API #terraform #aws #dynamodb #restapi Add Comment 1 min read Learning AWS Day by Day — Day 48 — Amazon DynamoDB — Part 4 Saloni Singh Saloni Singh Saloni Singh Follow Apr 27 Learning AWS Day by Day — Day 48 — Amazon DynamoDB — Part 4 #aws #cloud #cloudcomputing #dynamodb Add Comment 2 min read Learning AWS Day by Day — Day 47 — Amazon DynamoDB — Part 3 Saloni Singh Saloni Singh Saloni Singh Follow Apr 26 Learning AWS Day by Day — Day 47 — Amazon DynamoDB — Part 3 #aws #cloud #cloudcomputing #dynamodb * DynamoDB now supports resource-based policies. But is that a good idea? Yan Cui Yan Cui Yan Cui Follow for AWS Heroes Mar 23 DynamoDB now supports resource-based policies. But is that a good idea? #aws #dynamodb #security #architecture Add Comment 5 min read Learning AWS Day by Day - Day 46 - Amazon DynamoDB - Part 2 Saloni Singh Saloni Singh Saloni Singh Follow Apr 25 Learning AWS Day by Day - Day 46 - Amazon DynamoDB - Part 2 #aws #cloud #cloudcomputing #dynamodb Add Comment 1 min read Learning AWS Day by Day — Day 45 — Amazon DynamoDB — Part 1 Saloni Singh Saloni Singh Saloni Singh Follow Apr 24 Learning AWS Day by Day — Day 45 — Amazon DynamoDB — Part 1 #aws #cloud #cloudcomputing #dynamodb 2 *d Desplegar API basada en NodeJS con AWS Lambda y API Gateway conectada a DynamoDB. Brenda Galicia Brenda Galicia Brenda Galicia Follow Mar 17 Desplegar API basada en NodeJS con AWS Lambda y API Gateway conectada a DynamoDB. #aws #node #lambda #* Using API Gateway mapping templates for direct DynamoDB integrations Arpad Toth Arpad Toth Arpad Toth * Apr 12 Using API Gateway mapping templates for direct DynamoDB integrations #aws #serverless #apigateway #dynamodb 7 * Creating Webhook between Clerk and DynamoDB Vidit Shah Vidit Shah Vidit Shah Follow Mar 13 Creating Webhook between Clerk and DynamoDB #aws #nextjs #clerk #* * 2 of the Odyssey * Adrian Mudzwiti * Mar 31 * 2 of the Odyssey #cdk #lambda #dynamodb #python 3 * * 1 of the Odyssey * Adrian Mudzwiti * Mar 30 * 1 of the Odyssey #cdk #lambda #dynamodb #python 3 *d Best Practices for dynamodb Monika Prajapati Monika Prajapati Monika Prajapati Follow Mar 29 Best Practices for dynamodb #database #dynamodb #aws 9 *d Working with DynamoDB in Laravel Honeybadger Staff Honeybadger Staff Honeybadger Staff Follow for Honeybadger Mar 22 Working with DynamoDB in Laravel #laravel #php #dynamodb 5 * Build and Deploy: With AWS (Lambda, API Gateway and DynamoDB) using Golang Sourjaya Das Sourjaya Das Sourjaya Das Follow Mar 14 Build and Deploy: With AWS (Lambda, API Gateway and DynamoDB) using Golang #go #aws #dynamodb #tutorial 12 *ad loading... #discuss Why does writing code for DynamoDb get my spidey senses tingling? 9 comments Short Unique IDs for dynamoDB? 1 comment DynamoDB or Aurora/RDS? Should we always use DynamoDB? 2 comments How to import a big delimited datatable into AWS DynamoDB without opening your piggy bank? 5 * * Amazon DynamoDB adds support for attribute-based access control Momento added as an Amazon EventBridge API destination! Use Cases for working with DynamoDB alongside Node.js and Typescript Integrating Data with AWS Glue, Dynamodb, S3 and Amazon Athena AWS Database - Part 2: DynamoDB Mastering DynamoDB: Batch Operations Explained How to accidentally create read-only DynamoDB items Not only dynamoDb migration or seed scripting * * ",
    "url": "https://dev.to/t/dynamodb"
  },
  {
    "body": "* Elasticsearch Follow Hide Search and analyze data in real time with Elasticsearch. Create Post about #elasticsearch Elastic 7.0 has been released: https://www.elastic.co/v7 Tons of Elastic Videos: https://www.elastic.co/videos/ Documentation: https://www.elastic.co/guide/index.html tag moderators 514 Posts Published Older #elasticsearch posts 1 2 3 4 5 6 7 8 *. Advanced Techniques for Search Indexing with Go: Implementing Full-Text Search for Product Catalogs Muhammad Mahdi Ramadhan Muhammad Mahdi Ramadhan Muhammad Mahdi Ramadhan Follow Nov 10 Advanced Techniques for Search Indexing with Go: Implementing Full-Text Search for Product Catalogs #go #elasticsearch #postgres #searchengine Add Comment 1 min read Size Doesn't Matter: Why Your Elasticsearch Fields Need to Stop Caring About Length Prem Prem Prem Follow Nov 6 Size Doesn't Matter: Why Your Elasticsearch Fields Need to Stop Caring About Length #elasticsearch #fulltextsearch #softwareengineering #softwared* ELK Stack Mastery: Building a Scalable Log Management System Cey Cey Cey Follow Nov 4 ELK Stack Mastery: Building a Scalable Log Management System #elasticsearch #kibana #logstash #virtualbox Add Comment 4 min read How I can run elasticsearch locally for development using docker? Dimitrios Desyllas Dimitrios Desyllas Dimitrios Desyllas Follow Oct 30 How I can run elasticsearch locally for development using docker? #docker #elasticsearch #* Improving search experience using Elasticsearch T Sudhish Nair T Sudhish Nair T Sudhish Nair Follow Oct 29 Improving search experience using Elasticsearch #webdev #elasticsearch Add Comment 1 min read * * Elasticsearch in Express #elasticsearch #expres* Building a Web Search Engine in Go with Elasticsearch * Nov 4 Building a Web Search Engine in Go with Elasticsearch #programming #tutorial #go #elasticsearch 6 * github action services: mysql, redis and elasticsearch sugiarto sugiarto sugiarto Follow Sep 24 github action services: mysql, redis and elasticsearch #github #actions #ci #elasticsearch Add Comment 1 min read A CDC Way to Sync Data from ElasticSearch to ElasticSearch with BladePipe BladePipe BladePipe BladePipe Follow Oct 24 A CDC Way to Sync Data from ElasticSearch to ElasticSearch with BladePipe #elasticsearch #database #data #tutorial 2 * Using an Elasticsearch client with Typescript and React to search for data absterellio absterellio absterellio Follow Oct 1 Using an Elasticsearch client with Typescript and React to search for data #elasticsearch #typescript #webdev #data Add Comment 4 min read Fleet and Elastic agents on ECK Cloud Native Engineer Cloud Native Engineer Cloud Native Engineer Follow Sep 15 Fleet and Elastic agents on ECK #kubernetes #elasticsearch #devops #monitoring Add Comment 1 min read Setup OpenSearch,Logstash,Kafka locally with Docker Compose (windows) esga1102 esga1102 esga1102 Follow Oct 17 Setup OpenSearch,Logstash,Kafka locally with Docker Compose (windows) #opensource #programming #elasticsearch #logstash Add Comment 3 min read Learn Elasticsearch Vuelancer Vuelancer Vuelancer Follow Oct 15 Learn Elasticsearch #elasticsearch #webdev #beginners #*nt 1 min read How to Test ElastAlert Locally Using LocalStack: A Step-by-Step Guide Avinash Dalvi Avinash Dalvi Avinash Dalvi * Sep 30 How to Test ElastAlert Locally Using LocalStack: A Step-by-Step Guide #localstack #aws #elastalert #elasticsearch 7 *d Computer Vision Meetup: Using Elastic Vector Search in FiftyOne 11:25 Jimmy Guerrero Jimmy Guerrero Jimmy Guerrero Follow for Voxel51 Oct 11 Computer Vision Meetup: Using Elastic Vector Search in FiftyOne #elasticsearch #computervision #machinelearning #ai * How to scale Elasticsearch? Aarshdeep Singh Chadha Aarshdeep Singh Chadha Aarshdeep Singh Chadha Follow Sep 5 How to scale Elasticsearch? #webdev #programming #elasticsearch #dotnet Add Comment 4 min read searchkick resource_already_exists_exception sugiarto sugiarto sugiarto Follow Sep 2 searchkick resource_already_exists_exception #searchkick #elasticsearch #ruby #rails Add Comment 1 min read Ultimate Directory of Apache Iceberg Resources Alex Merced Alex Merced Alex Merced Follow Oct 5 Ultimate Directory of Apache Iceberg Resources #database #dataengineering #datascience #elasticsearch Add Comment 14 min read Computer Vision Meetup: Elasticsearch is for the Birds: Identifying Embeded Images with Vector Similarity Search 20:38 Jimmy Guerrero Jimmy Guerrero Jimmy Guerrero Follow for Voxel51 Oct 11 Computer Vision Meetup: Elasticsearch is for the Birds: Identifying Embeded Images with Vector Similarity Search #elasticsearch #computervision #ai #machinelearning * OpenSearch vs. Elasticsearch: Why OpenSearch is the Better Choice for AWS Users Alexey Vidanov Alexey Vidanov Alexey Vidanov * Sep 25 OpenSearch vs. Elasticsearch: Why OpenSearch is the Better Choice for AWS Users #aws #opensearch #enterprise #elasticsearch 5 * IR Playbooks TryHackMe a.infosecflavour a.infosecflavour a.infosecflavour Follow Sep 11 IR Playbooks TryHackMe #cybersecurity #elasticsearch #learning #writing 4 *d 30 Day SOC Challenge- Day 2 & 3 : ELK Stack / Elastic Search Aneesah Aneesah Aneesah Follow Sep 9 30 Day SOC Challenge- Day 2 & 3 : ELK Stack / Elastic Search #elasticsearch #kibana #socanalyst * Elasticsearch with .NET Core Web API and Docker Aarshdeep Singh Chadha Aarshdeep Singh Chadha Aarshdeep Singh Chadha Follow Sep 5 Elasticsearch with .NET Core Web API and Docker #webdev #elasticsearch #dotnet #developer Add Comment 3 min read ES - CAT APIs * Mallikarjun H T Follow Aug 13 ES - CAT APIs #elasticsearch #kibana #nosql #elk Add Comment 3 min read Installing Elastic Search 7.14 with docker * Mallikarjun H T Follow Sep 10 Installing Elastic Search 7.14 with docker #elasticsearch #elk #kibana #docker 3 *d searchkick get total records sugiarto sugiarto sugiarto Follow Sep 8 searchkick get total records #searchkick #elasticsearch #ruby #rails * ES Index API- part 2 * Mallikarjun H T Follow Aug 5 ES Index API- part 2 #elasticsearch #elk #documentation #nosql Add Comment 2 min read ES index API - part 1 * Mallikarjun H T Follow Aug 5 ES index API - part 1 #elasticsearch #elk #nosql #documentation Add Comment 1 min read Securing your Cloud Infrastructure: A comprehensive guide to hardening, scaling, automating and monitoring your servers SeunB SeunB SeunB Follow Aug 27 Securing your Cloud Infrastructure: A comprehensive guide to hardening, scaling, automating and monitoring your servers #linux #ansible #elasticsearch #devops 1 reaction Add Comment 34 min read How CheckStat was created: Real-time site analytics Evgeniy Evgeniy Evgeniy Follow Aug 26 How CheckStat was created: Real-time site analytics #analytics #elasticsearch #webdev #php 4 *d Leveraging Elasticsearch and LangChain: A Guide to Using Aliases and Filters with LLMs Janak Mandavgade Janak Mandavgade Janak Mandavgade Follow Aug 3 Leveraging Elasticsearch and LangChain: A Guide to Using Aliases and Filters with LLMs #langchain #elasticsearch #rag Add Comment 4 min read Installing Elasticsearch exporter Bash Script tj_27 tj_27 tj_27 Follow Jul 31 Installing Elasticsearch exporter Bash Script #elasticsearch #bash #shell Add Comment 3 min read The Scoop On OpenSearch sizing dejanualex dejanualex dejanualex * Sep 2 The Scoop On OpenSearch sizing #aws #opensearch #tutorial #elasticsearch * Elasticsearch Guide on Docker: A Comprehensive Walkthrough * Aug 18 Elasticsearch Guide on Docker: A Comprehensive Walkthrough #elasticsearch #dotnet #docker 2 *d Unlocking the Power of Elasticsearch: Top Use Cases for Real-Time Search and Analytics * Wallace Freitas Follow Aug 27 Unlocking the Power of Elasticsearch: Top Use Cases for Real-Time Search and Analytics #elasticsearch #node #* Algolia vs. Elasticsearch: Choosing the Right Search Solution Shanu Shanu Shanu Follow Aug 23 Algolia vs. Elasticsearch: Choosing the Right Search Solution #javascript #algolia #elasticsearch #react 4 *d Configuring and Consuming Fuzzy Search in .NET with Elasticsearch * Aug 20 Configuring and Consuming Fuzzy Search in .NET with Elasticsearch #elasticsearch #dotnet #docker 2 * Elastic RUM (Real User Monitoring) with Open Telemetry (OTel) Rahul Ranjan Rahul Ranjan Rahul Ranjan Follow Aug 18 Elastic RUM (Real User Monitoring) with Open Telemetry (OTel) #docker #kubernetes #elasticsearch #devops 2 reactions * MongoDB and Elasticsearch Integration: A Practical Guide for Node.js Developers * Gleidson Leite da Silva Follow Aug 17 Mastering MongoDB and Elasticsearch Integration: A Practical Guide for Node.js Developers #node #elasticsearch #mongodb #docker 5 *d OpenTelemetry with Elastic Observability Rahul Ranjan Rahul Ranjan Rahul Ranjan Follow Aug 16 OpenTelemetry with Elastic Observability #opentelemetry #docker #kubernetes #elasticsearch * Real-Time News Aggregator with Elastic: Leveraging APM, RUM, and Elasticsearch for Optimized Performance Rahul Ranjan Rahul Ranjan Rahul Ranjan Follow Aug 15 Real-Time News Aggregator with Elastic: Leveraging APM, RUM, and Elasticsearch for Optimized Performance #elasticsearch #apm #docker #devops Add Comment 4 min read Elasticsearch: Finding Missing Documents between 2 indices Aditya Singh Aditya Singh Aditya Singh Follow Aug 3 Elasticsearch: Finding Missing Documents between 2 indices #elasticsearch #dataengineering 2 *d Como Configurar e Testar Políticas ILM no Elasticsearch Alex Salgado Alex Salgado Alex Salgado Follow Aug 2 Como Configurar e Testar Políticas ILM no Elasticsearch #ilm #elasticsearch #gerenciamentodedados #elk * Unassigned shards in Elasticsearch 7 and 8 Bidhan Khatri Bidhan Khatri Bidhan Khatri Follow Jun 28 Unassigned shards in Elasticsearch 7 and 8 #elasticsearch #devops #beginners #automation Add Comment 1 min read Elasticsearch Multisearch API Serhat Ayata Serhat Ayata Serhat Ayata Follow Jul 10 Elasticsearch Multisearch API #elasticsearch #dotnet #csharp * Seven rules for OpenSearch sizing dejanualex dejanualex dejanualex * Jul 30 Seven rules for OpenSearch sizing #aws #tutorial #devops #elasticsearch 4 *d Estratégias de cache | Cache Strategies Jonas Barros Jonas Barros Jonas Barros Follow Jun 26 Estratégias de cache | Cache Strategies #redis #elasticsearch #aws #* Logs collection in Kubernetes Cloud Native Engineer Cloud Native Engineer Cloud Native Engineer Follow Jul 21 Logs collection in Kubernetes #kubernetes #elasticsearch #devops #monitoring * Elastic Stack Cookbook 8.x Cloud Native Engineer Cloud Native Engineer Cloud Native Engineer Follow Jul 20 Elastic Stack Cookbook 8.x #elasticsearch #devops #developer #monitoring * Deep Dive into Elastic Cloud Enterprise (ECE) Sennovate Sennovate Sennovate Follow Jul 16 Deep Dive into Elastic Cloud Enterprise (ECE) #cybersecurity #security #cloud #elasticsearch 3 * #7 Modern SQL Databases You Must Know in 2024 Dipalee Gaware Dipalee Gaware Dipalee Gaware Follow Jul 2 #7 Modern SQL Databases You Must Know in 2024 #sql #dolt #snowflake #elasticsearch 3 *d #Learn Farheen Shaikh Farheen Shaikh Farheen Shaikh Follow Jul 12 #Learn #elasticsearch #logstash #kibana #* Choosing between an index-level API, a query, an aggregation, or ES|QL in Elasticsearch Jessica Garson Jessica Garson Jessica Garson Follow Jun 17 Choosing between an index-level API, a query, an aggregation, or ES|QL in Elasticsearch #elasticsearch #beginners 18 reactions 2 comments 14 min read Full-text search using MongoDB and Elastic Search Sibelius Seraphini Sibelius Seraphini Sibelius Seraphini Follow for Woovi Jun 18 Full-text search using MongoDB and Elastic Search #mongodb #elasticsearch #search 18 * Setting Up Elasticsearch and Kibana Single-Node with Docker Compose S Karthik S Karthik S Karthik Follow Jun 18 Setting Up Elasticsearch and Kibana Single-Node with Docker Compose #elasticsearch #docker #tutorial #devops 2 *d PostgreSQL Full-Text Search in a Nutshell ChunTing Wu ChunTing Wu ChunTing Wu Follow Jun 14 PostgreSQL Full-Text Search in a Nutshell #database #elasticsearch #tutorial #* 5 min read Usando Consultas de Percolação do Elasticsearch, Netflix Aperfeiçoa Buscas Reversas Eficientemente Alex Salgado Alex Salgado Alex Salgado Follow May 10 Usando Consultas de Percolação do Elasticsearch, Netflix Aperfeiçoa Buscas Reversas Eficientemente #elasticsearch #reversesearch #dataengineering #netflix * Elasticsearch APM Server Kurulumu ve Uygulama İzleme Erenalp Tekşen Erenalp Tekşen Erenalp Tekşen Follow for Açıklab Jun 10 Elasticsearch APM Server Kurulumu ve Uygulama İzleme #elasticsearch #kibana #apm #monitoring 5 * Step-by-Step Guide: Setting Up Elasticsearch and Kibana with Docker Tharindu Dulshan Fernando Tharindu Dulshan Fernando Tharindu Dulshan Fernando Follow May 31 Step-by-Step Guide: Setting Up Elasticsearch and Kibana with Docker #docker #kibana #elasticsearch #json 23 *d Elasticsearch Fundamentals Kaoutar Kaoutar Kaoutar Follow May 27 Elasticsearch Fundamentals #elk #elasticsearch 2 * Hybrid Search with Elasticsearch in .NET Oleksii Nikiforov Oleksii Nikiforov Oleksii Nikiforov Follow Nov 5 Hybrid Search with Elasticsearch in .NET #dotnet #elasticsearch #csharp Add Comment 4 min read Semantic Search with Elasticsearch in .NET Oleksii Nikiforov Oleksii Nikiforov Oleksii Nikiforov Follow Oct 29 Semantic Search with Elasticsearch in .NET #dotnet #elasticsearch Add Comment 5 *hat are the issues you have with building or maintaining your website/startup search? 1 comment 5 Open-Source Search Engines For your Website New Top 4 Enterprise Search Software in 2022 2 comments Explain elasticsearch - pros and cons * OpenSearch vs. Elasticsearch: Why OpenSearch is the Better Choice for AWS Users IR Playbooks TryHackMe Unlocking the Power of Elasticsearch: Top Use Cases for Real-Time Search and Analytics Building a Web Search Engine in Go with Elasticsearch Securing your Cloud Infrastructure: A comprehensive guide to hardening, scaling, automating and monitoring your servers How to Test ElastAlert Locally Using LocalStack: A Step-by-Step Guide Installing Elastic Search 7.14 with docker Learn Elasticsearch searchkick get total record*nsor Neon * ",
    "url": "https://dev.to/t/elasticsearch"
  },
  {
    "body": "* # erlang Follow Hide Create Post 208 Posts Published Older #erlang posts 1 2 3 *. 👉 What is gleam language used for ❓ PiterDev PiterDev PiterDev Follow Oct 29 👉 What is gleam language used for ❓ #javascript #erlang #webdev #elixir Add Comment 2 min read R* Aris Kurniawa* Follow Oct 29 R* #rabbitmq #node #javascript #erlang Add Comment 6 min read Navigating the EEF Stipend Process Jonatan Männchen Jonatan Männchen Jonatan Männchen Follow Oct 9 Navigating the EEF Stipend Process #techtalks #elixir #erlang #openid *ing OpenID Connect on the BEAM Jonatan Männchen Jonatan Männchen Jonatan Männchen Follow Oct 9 Implementing OpenID Connect on the BEAM #techtalks #erlang #elixir #openid Add Comment 8 min read OpenID Connect—An Introduction Jonatan Männchen Jonatan Männchen Jonatan Männchen Follow Oct 9 OpenID Connect—An Introduction #techtalks #openid #erlang #elixir 2 * Por que o Elixir é melhor que Node.js para Processamento Assíncrono? William Moreira da Silva William Moreira da Silva William Moreira da Silva Follow Aug 30 Por que o Elixir é melhor que Node.js para Processamento Assíncrono? #javascript #elixir #node #erlang Add Comment 6 min read How To Deploy RabbitMQ On Public IP? Amr Saafan Amr Saafan Amr Saafan Follow for Nile Bits Aug 3 How To Deploy RabbitMQ On Public IP? #rabbitmq #aws #azure #erlang Add Comment 4 min read Weather API: A GenServer and LiveView Implementation Part I Shawn Condon Shawn Condon Shawn Condon Follow Aug 4 Weather API: A GenServer and LiveView Implementation Part I #elixir #genserver #erlang #liveview Add Comment 8 min read Berkenalan Dengan Bahasa Pemrograman Fungsional Elixir (Bagian 1) Muzhawir Muzhawir Muzhawir Follow Aug 10 Berkenalan Dengan Bahasa Pemrograman Fungsional Elixir (Bagian 1) #elixir #erlang #indonesia Add Comment 7 min read (Amazing!) How to manage and install multiple versions of Erlang/OTP and Elixir via vfox in Windows yeshan333 yeshan333 yeshan333 Follow Jun 22 (Amazing!) How to manage and install multiple versions of Erlang/OTP and Elixir via vfox in Windows #vfox #erlang #elixir #windows 5 * Hands-On with Gleam: Building and Improving a Binary Search Tree Lali Micskei Lali Micskei Lali Micskei Follow Jun 16 Hands-On with Gleam: Building and Improving a Binary Search Tree #patternmatching #gleam #functional #erlang 2 *d Historia de la BeamVM Camilo Camilo Camilo Follow for JavaScript Chile Jun 6 Historia de la BeamVM #elixir #beam #erlang #chile 2 *ad Elixir Days - Evento presencial em São Paulo Elixir UTFPR (por Adolfo Neto) Elixir UTFPR (por Adolfo Neto) Elixir UTFPR (por Adolfo Neto) Follow May 2 Elixir Days - Evento presencial em São Paulo #elixir #erlang Add Comment 1 min read BEAM VM The good, the bad and the ugly Cherry Ramatis Cherry Ramatis Cherry Ramatis Follow May 20 BEAM VM The good, the bad and the ugly #elixir #erlang #braziliandevs #beginners 127 reactions 12 comments 9 min read Conferências do Ecossistema de Erlang (e Elixir) Elixir UTFPR (por Adolfo Neto) Elixir UTFPR (por Adolfo Neto) Elixir UTFPR (por Adolfo Neto) Follow May 16 Conferências do Ecossistema de Erlang (e Elixir) #elixir #erlang #gleam #beam 5 *d Deep Diving Into the Erlang Scheduler Sapan Diwakar Sapan Diwakar Sapan Diwakar Follow for AppSignal May 7 Deep Diving Into the Erlang Scheduler #elixir #erlang * Install mutiple Erlang and Elixir with vfox yeshan333 yeshan333 yeshan333 Follow Apr 27 Install mutiple Erlang and Elixir with vfox #vfox #erlang #elixir #asdf 9 *d Installing Erlang With vfox yeshan333 yeshan333 yeshan333 Follow Apr 26 Installing Erlang With vfox #vfox #erlang #asdf 6 * Erlang Workshop 2024 - Call for Papers Adolfo Neto Adolfo Neto Adolfo Neto Follow Apr 15 Erlang Workshop 2024 - Call for Papers #erlang #elixir 3 * Empresas brasileiras que usam, ou usaram, Elixir ou Erlang Elixir em Foco Elixir em Foco Elixir em Foco Follow Apr 11 Empresas brasileiras que usam, ou usaram, Elixir ou Erlang #elixir #erlang #beam 10 * Binary Data in Gleam: Implementing The RCON Protocol Chandler Davis Chandler Davis Chandler Davis Follow Mar 16 Binary Data in Gleam: Implementing The RCON Protocol #gleam #erlang #elixir #gamedev 3 * Using the Keyword module for options * Herminio Torres Follow Dec 26 '23 Using the Keyword module for options #elixir #erlang #tutorial #beginners 4 *d How to take leverage from on_mount to reduce code * Herminio Torres Follow Dec 12 '23 How to take leverage from on_mount to reduce code #elixir #erlang #phoenix #liveview 8 * What you should know about the live_session macro * Herminio Torres Follow Dec 5 '23 What you should know about the live_session macro #elixir #erlang #phoenix #liveview 3 *d Build Phoenix Docker Compose development environment easily Masatoshi Nishiguchi Masatoshi Nishiguchi Masatoshi Nishiguchi Follow Nov 28 '23 Build Phoenix Docker Compose development environment easily #elixir #erlang #phoenix #docker 3 *d When to use the handle_params callback * Herminio Torres Follow Nov 28 '23 When to use the handle_params callback #elixir #erlang #phoenix #liveview 7 *d The “let it crash” error handling strategy of Erlang, by Joe Armstrong Adolfo Neto Adolfo Neto Adolfo Neto Follow Nov 26 '23 The “let it crash” error handling strategy of Erlang, by Joe Armstrong #erlang 8 * How to use unique_index wisely to grasp our business logic * Herminio Torres Follow Nov 22 '23 How to use unique_index wisely to grasp our business logic #ecto #elixir #erlang #phoenix 2 *d Running PMML models in Erlang using NIF and CPP Shubham Kumar Shubham Kumar Shubham Kumar Follow Oct 15 '23 Running PMML models in Erlang using NIF and CPP #erlang #cpp #nif #machinelearning Add Comment 7 min read Understanding Process Restart Strategies: Transient, Temporary, and Permanent * Herminio Torres Follow Sep 19 '23 Understanding Process Restart Strategies: Transient, Temporary, and Permanent #elixir #erlang #architecture #webdev 17 * Managing Timeouts in GenServer in Elixir: How to Control Waiting Time in Critical Operations * Herminio Torres Follow Sep 13 '23 Managing Timeouts in GenServer in Elixir: How to Control Waiting Time in Critical Operations #elixir #erlang #architecture #webdev 6 * Keynote Speakers da Elixir Fortaleza Conf 2023 Elixir em Foco Elixir em Foco Elixir em Foco Follow Sep 12 '23 Keynote Speakers da Elixir Fortaleza Conf 2023 #elixir #erlang #beam 11 *d Testing Timer-based Logic in Elixir with Klotho Library Ilya Averyanov Ilya Averyanov Ilya Averyanov Follow Jul 16 '23 Testing Timer-based Logic in Elixir with Klotho Library #erlang #elixir #time #tests 7 *d Elixirで進捗表示ダウンロード Masatoshi Nishiguchi Masatoshi Nishiguchi Masatoshi Nishiguchi Follow May 22 '23 Elixirで進捗表示ダウンロード #elixir #erlang #闘魂 #猪木 * How to fix a borked Elixir install on Windows Tara Timmerman Tara Timmerman Tara Timmerman Follow Apr 24 '23 How to fix a borked Elixir install on Windows #elixir #erlang #chocolatey #windows Add Comment 2 min read Transparent execution of Fortran code from the Erlang machine using ports P. Schreiber 🧙🏻‍♂️🔮🐐 P. Schreiber 🧙🏻‍♂️🔮🐐 P. Schreiber 🧙🏻‍♂️🔮🐐 Follow Mar 10 '23 Transparent execution of Fortran code from the Erlang machine using ports #erlang #fortran #elixir #tutorial * Release version 3.0.0 of elvis_core, the Erlang Linter! Adolfo Neto Adolfo Neto Adolfo Neto Follow Mar 5 '23 Release version 3.0.0 of elvis_core, the Erlang Linter! #erlang #beam #linter 2 *d Por que usar @typespecs em seu código Elixir? Rômulo Silva Rômulo Silva Rômulo Silva Follow Feb 27 '23 Por que usar @typespecs em seu código Elixir? #elixir #erlang #typespecs #tutorial 16 reactions 3 comments 6 min read Debugging and Tracing in Erlang Marcos Ramos Marcos Ramos Marcos Ramos Follow for AppSignal Jan 17 '23 Debugging and Tracing in Erlang #elixir #erlang 2 *d purerl - Integrating PureScript into Elixir projects Rickard Andersson Rickard Andersson Rickard Andersson Follow for Quanterall Jan 11 '23 purerl - Integrating PureScript into Elixir projects #purescript #beam #elixir #erlang 2 * A Small Introduction to Functional Programming Alvaro (Blag) Tejada Galindo Alvaro (Blag) Tejada Galindo Alvaro (Blag) Tejada Galindo Follow for Nylas Jan 3 '23 A Small Introduction to Functional Programming #haskell #erlang #functional 2 *d Unit testing in Erlang using Rebar3 and EUnit André Ferreira André Ferreira André Ferreira Follow Dec 22 '22 Unit testing in Erlang using Rebar3 and EUnit #erlang #test #programming 4 * Elixir can make you avoid the microservices architecture Pierre Le Gall Pierre Le Gall Pierre Le Gall Follow Dec 14 '22 Elixir can make you avoid the microservices architecture #elixir #erlang #microservices 19 * Erlang Fibonacci Carlos Saltos Carlos Saltos Carlos Saltos Follow Dec 14 '22 Erlang Fibonacci #erlang #fibonacci #mathematics 5 *d Debugging in Elixir and Erlang: An Introduction Marcos Ramos Marcos Ramos Marcos Ramos Follow for AppSignal Dec 6 '22 Debugging in Elixir and Erlang: An Introduction #elixir #erlang 4 * Funções Built In no Elixir Igor Giamoniano Igor Giamoniano Igor Giamoniano Follow for Trybe Oct 28 '22 Funções Built In no Elixir #elixir #erlang #beginners #webdev 2 *d Packet Sniffer in Elixir Michael Kaisanov Michael Kaisanov Michael Kaisanov Follow Oct 2 '22 Packet Sniffer in Elixir #elixir #erlang #socket #network 5 * Básicos Erlang / Elixir: La elegancia de match operator y aridad múltiple Wako Wako Wako Follow Sep 23 '22 Básicos Erlang / Elixir: La elegancia de match operator y aridad múltiple #erlang #elixir #spanish Add Comment 4 min read Instalando o Elixir e o Erlang com o gerenciador de versões asdf Oliver Oliver Oliver Follow Aug 24 '22 Instalando o Elixir e o Erlang com o gerenciador de versões asdf #elixir #erlang #programming #braziliandevs 6 *d Uma introdução ao Pattern Matching Igor Giamoniano Igor Giamoniano Igor Giamoniano Follow for Trybe Aug 19 '22 Uma introdução ao Pattern Matching #elixir #beginners #erlang #functional 8 *d The solution of Elixir continuous runtime system code coverage collection yeshan333 yeshan333 yeshan333 Follow Aug 13 '22 The solution of Elixir continuous runtime system code coverage collection #elixir #coverage #erlang #github 7 * 💧💪 Concorrência em Elixir #1: Módulo Task Dev Maiqui 🇧🇷 Dev Maiqui 🇧🇷 Dev Maiqui 🇧🇷 Follow Jul 10 '22 💧💪 Concorrência em Elixir #1: Módulo Task #elixir #concurrency #braziliandevs #erlang 11 reactions 3 comments 33 min read Lazy Sequences in Elixir and Erlang Ilya Averyanov Ilya Averyanov Ilya Averyanov Follow Jun 14 '22 Lazy Sequences in Elixir and Erlang #elixir #erlang #stream #qlc 20 reactions 2 comments 17 min read ElixirのHTTPクライアントでお天気情報を取得したい(2022年) Masatoshi Nishiguchi Masatoshi Nishiguchi Masatoshi Nishiguchi Follow Jun 9 '22 ElixirのHTTPクライアントでお天気情報を取得したい(2022年) #elixir #erlang #http #weather 9 *d Consumindo GraphQL com Elixir? Willian Frantz Willian Frantz Willian Frantz Follow Jun 2 '22 Consumindo GraphQL com Elixir? #elixir #erlang #graphql #programming 35 reactions 7 comments 4 min read Functional Futures: Lunatic with Bernard Kolobara Serokell Serokell Serokell Follow Jun 4 '22 Functional Futures: Lunatic with Bernard Kolobara #webassembly #rust #erlang 8 * QuickSort - \"Aprenda Erlang Para Um Grande Bem\" 21 Elixir UTFPR (por Adolfo Neto) Elixir UTFPR (por Adolfo Neto) Elixir UTFPR (por Adolfo Neto) Follow May 30 '22 QuickSort - \"Aprenda Erlang Para Um Grande Bem\" 21 #erlang 4 *d CSP vs Actor model for concurrency Karan Pratap Singh Karan Pratap Singh Karan Pratap Singh Follow May 10 '22 CSP vs Actor model for concurrency #distributedsystems #go #elixir #erlang 40 * Monitor your Elixir application with OpenTelemetry and SigNoz 🚀 Ankit Anand ✨ Ankit Anand ✨ Ankit Anand ✨ Follow for SigNoz May 10 '22 Monitor your Elixir application with OpenTelemetry and SigNoz 🚀 #elixir #erlang #monitoring #cloud 15 * Testes unitários com ExUnit Allef Gomes Allef Gomes Allef Gomes Follow Apr 7 '22 Testes unitários com ExUnit #elixir #erlang #testing #elxpro 5 *d Functional Computer Science degree exists? Krystyna Krystyna Krystyna Follow Nov 5 '23 Functional Computer Science degree exists? # discuss #beginners #elixir #erlang Add C* Functional Computer Science degree exists? New trending guides/resources Implementing OpenID Connect on the BEAM OpenID Connect—An Introductio*nsor Neon * ",
    "url": "https://dev.to/t/erlang"
  },
  {
    "body": "* # express * 1416 Posts Published Older #express posts 1 2 3 4 5 6 7 8 9 *. *) Sakis Pal Sakis Pal Sakis Pal Follow Nov 9 *) #webdev #express #netlify #* Do Express.js para o PHP: Como o Lithe traz a experiência de desenvolvimento minimalista para o mundo PHP * Do Express.js para o PHP: Como o Lithe traz a experiência de desenvolvimento minimalista para o mundo PHP #php #javascript #express #lithe 2 *d From Express.js to PHP: How Lithe Brings the Minimalist Development Experience to the PHP World * From Express.js to PHP: How Lithe Brings the Minimalist Development Experience to the PHP World #php #javascript #lithe #express 2 *d Web Development in Docker Containers Using Express.js Om Prakash Tiwari Om Prakash Tiwari Om Prakash Tiwari Follow Nov 6 Web Development in Docker Containers Using Express.js #docker #express #* 4 min read How to quickly add API Key validation to a Node Express API honest will honest will honest will Follow Nov 5 How to quickly add API Key validation to a Node Express API #api #express #middleware #apikeys 3 *d *) Mehedi Hasan Mehedi Hasan Mehedi Hasan Follow Nov 4 *) #typescript #node #express #* *. * Oct 31 *. #node #mongodb #javascript #express Add Comment 6 min read * * Elasticsearch in Express #elasticsearch #expres* Dockerizing an Express App with MongoDB Database Rakib Hasan Rakib Hasan Rakib Hasan Follow Nov 8 Dockerizing an Express App with MongoDB Database #docker #dockerize #express #mongodb * Implement reCAPTCHA in htmx + expressjs M*i M* Nov 6 Implement reCAPTCHA in htmx + expressjs #htmx #express #javascript #recaptcha * Setting Up a Node.js, TypeScript, and Express Project Harshal Ranjhani Harshal Ranjhani Harshal Ranjhani Follow for CodeParrot Oct 27 Setting Up a Node.js, TypeScript, and Express Project #node #express #typescript #project 8 * Implementing Authorization in a ExpressJS API with AuthAction AuthAction Developer AuthAction Developer AuthAction Developer Follow for AuthAction Oct 21 Implementing Authorization in a ExpressJS API with AuthAction #express #api #authorization #authaction Add Comment 3 min read 🌟 U* 🚀 DevTeam DevTeam DevTeam Follow Oct 25 🌟 U* 🚀 #discuss #express #node #webdev 5 *d Mongoose * 17 Mongoose #mongoose #mongodb #*nt 4 min read (SQL Query) Caching vs Indexing in Express.js Vish Vish Vish Follow Oct 17 (SQL Query) Caching vs Indexing in Express.js #express #java*t 2 min read htmx and ExpressJS M*i M* Oct 17 htmx and ExpressJS #htmx #express #node #fullstack Add Comment 5 min read * M Inam M Inam M Inam Follow Oct 24 * #backend #backenddevelopment #node #express 5 *d Organizing a Production-Ready Node.js and Express.js Application JasGiigli JasGiigli JasGiigli Follow Oct 10 Organizing a Production-Ready Node.js and Express.js Application #webdev #javascript #node #express Add Comment 4 min read Implementación de Autenticación Segura en Node.js con JWT Adrian Grahl Adrian Grahl Adrian Grahl Follow Oct 9 Implementación de Autenticación Segura en Node.js con JWT #node #express #jwt #security Add Comment 4 min read CRUD Operations: What Are They, and How Can I Use Them? wendyver wendyver wendyver Follow Oct 7 CRUD Operations: What Are They, and How Can I Use Them? #javascript #mongodb #node #express Add Comment 3 min read Hyper-Scale Activated! Ship Your Own FaaS 🤖 * Follow for smapiot Oct 18 Hyper-Scale Activated! Ship Your Own FaaS 🤖 #webdev #javascript #node #express 8 * URL * 9 URL #express #node #react #nextjs 2 *d Build a small Q&A bot with OpenAI trannguyenhung011086 trannguyenhung011086 trannguyenhung011086 Follow Oct 3 Build a small Q&A bot with OpenAI #openai #node #typescript #express Add Comment 4 min read NestJS vs. Ditsmod: pipe features Костя Третяк Костя Третяк Костя Третяк Follow Oct 3 NestJS vs. Ditsmod: pipe features #ditsmod #nestjs #express #fastify * * * Queue in an Express application #queue #express #node #docker Add Comment 3 min read [DAY 118-122] I learned full-stack by building my 2nd app Thomas Cansino Thomas Cansino Thomas Cansino Follow Sep 30 [DAY 118-122] I learned full-stack by building my 2nd app #react #node #mongodb #express 6 * Building a High-Quality Stock Report Generator with Node.js, Express, and OpenAI API Zane Zane Zane Follow Nov 3 Building a High-Quality Stock Report Generator with Node.js, Express, and OpenAI API #ai #openai #express #*t 8 min read 100 Days of Servers Distributions- Days 4 and 100 Day 4 Introduction to Web Servers pirvanm pirvanm pirvanm Follow Sep 30 100 Days of Servers Distributions- Days 4 and 100 Day 4 Introduction to Web Servers #node #nuxt #express Add Comment 6 min read Enhancing JSON Serialization Performance in Express.js with express-fast-json-stringify Nigro Simone Nigro Simone Nigro Simone Follow Sep 29 Enhancing JSON Serialization Performance in Express.js with express-fast-json-stringify #express #*n read Mastering Image Uploads with Multer, Firebase, and Express in Node.js Jeysson Aly Contreras Jeysson Aly Contreras Jeysson Aly Contreras Follow Oct 31 Mastering Image Uploads with Multer, Firebase, and Express in Node.js #firebase #express #node #multer Add Comment 7 min read Introducing Ultimate Express: The 5x Fastest Drop-In Replacement for Express.js Nigro Simone Nigro Simone Nigro Simone Follow Oct 20 Introducing Ultimate Express: The 5x Fastest Drop-In Replacement for Express.js #*nt 2 min read Join To My Journey to learn building full stack web application Mert izgahi Mert izgahi Mert izgahi Follow Oct 28 Join To My Journey to learn building full stack web application #mern #react #shadecn #express * * * Oct 17 * #express #node #javascript #backendd* 🚀 Building Permalist: my Journey Through making a Dynamic To-Do List App Arkadipta kundu Arkadipta kundu Arkadipta kundu Follow Oct 17 🚀 Building Permalist: my Journey Through making a Dynamic To-Do List App #javascript #webdev #express #sql * How to Easily Manage Authentication in Express.js with FluidAuth imani brown imani brown imani brown Follow Sep 24 How to Easily Manage Authentication in Express.js with FluidAuth #express #node #oauth #webdev * a Server with Node.js Express Sanya_Lazy Sanya_Lazy Sanya_Lazy Follow Sep 22 Building a Server with Node.js Express #node #express #webdev #javascript * Overview of Nodemailer: Easy Email Sending in Node.js Kamlesh Gupta Kamlesh Gupta Kamlesh Gupta Follow Sep 19 Overview of Nodemailer: Easy Email Sending in Node.js #node #npm #javascript #express * nestjs & expressjs side by side #nodejs * Sep 19 nestjs & expressjs side by side #nodejs #nestjs #*nt 1 min read Getting Started with Hyperswitch, Nodejs, and Express for Payment Processing Brix Mavu Brix Mavu Brix Mavu Follow Oct 11 Getting Started with Hyperswitch, Nodejs, and Express for Payment Processing #node #express #hyperswitch #paymentgateways * Node.js & Express.j* * Oct 19 Node.js & Express.j* #node #express #javascript #*mment 3 min read Building RESTful APIs with Node.js and Express: Step-by-Step Tutorial Ashis*apati Follow Oct 19 Building RESTful APIs with Node.js and Express: Step-by-Step Tutorial #api #express #node #* React * akpvt akpvt akpvt Follow Oct 19 React * #react #node #express #webapp Add Comment 3 min read Next.js * akpvt akpvt akpvt Follow Oct 19 Next.js * #node #nextjs #express #webapp * Middleware Functions in Express.js: A Comprehensive Guide * Aditya Pratap Bhuyan Follow Oct 5 Understanding Middleware Functions in Express.js: A Comprehensive Guide #express #middlware Add Comment 4 min read How to Scale Node.js Applications in Production * Toufiqur Rahman Tamkin Follow Sep 16 How to Scale Node.js Applications in Production #node #express #java*ent 4 min read File-Type Validation in Multer is NOT SAFE🙃 Ayanabilothman Ayanabilothman Ayanabilothman Follow Oct 2 File-Type Validation in Multer is NOT SAFE🙃 #multer #validation #express #fileupload 2 react* JS || Epress js || By * * Follow Oct 12 Node JS || Epress js || By Munisekhar Udavalapati #node #express #javascript * Hello DevPeople . this is my first post . Sina HeydariNejad Sina HeydariNejad Sina HeydariNejad Follow Sep 6 Hello DevPeople . this is my first post . #javascript #node #express #css 1 comment 1 min read Managing and retrieving translated strings in a Google Sheet Sergey Li Sergey Li Sergey Li Follow Sep 4 Managing and retrieving translated strings in a Google Sheet #i18 #express #node #webdev Add Comment 3 min read Beginner's Guide to Handling DELETE Requests in Node.js with Express Emmanuel Mumba Emmanuel Mumba Emmanuel Mumba Follow Sep 24 Beginner's Guide to Handling DELETE Requests in Node.js with Express #node #express #javascript #beginners 9 * Authentication with express js and react js using jwt ngdream ngdream ngdream Follow Oct 5 Authentication with express js and react js using jwt #webdev #javascript #express #react * NodeJS Framework which one is Fast * Aug 30 NodeJS Framework which one is Fast #nestjs #node #fastify #express Add Comment 2 min read Scrape the web with puppeteer! Christian Cedeno Christian Cedeno Christian Cedeno Follow Aug 28 Scrape the web with puppeteer! #tutorial #node #javascript #express Add Comment 5 min read Tutorial: How to Integrate Passkeys into Node.js (Express) vdelitz vdelitz vdelitz Follow for Corbado Aug 28 Tutorial: How to Integrate Passkeys into Node.js (Express) #node #express #npm Add Comment 4 min read A Simple Way to Handle Locale-Specific URLs in Express Sergey Li Sergey Li Sergey Li Follow Aug 28 A Simple Way to Handle Locale-Specific URLs in Express #express #i18n #middleware #node Add Comment 3 min read * Brian Morrison II Brian Morrison II Brian Morrison II Follow for Clerk Sep 30 * #clerk #express #node #react 7 * * Костя Третяк Костя Третяк Костя Третяк Follow Aug 28 * #node #bunjs #express #ditsmod 2 *d Leveling Up with Node.js and Express: Adding a Server to My Yoga Pose Library wendyver wendyver wendyver Follow Sep 30 Leveling Up with Node.js and Express: Adding a Server to My Yoga Pose Library #webdev #javascript #node #expres*o add Google ReCAPTCHA in your React website Kurt De Austria Kurt De Austria Kurt De Austria Follow Sep 28 How to add Google ReCAPTCHA in your React website #webdev #googlecloud #react #express * * (feature comparison and migration guide) 16:46 * Simon Johansson Follow for Encore Sep 24 * (feature comparison and migration guide) #typescript #node #express #javascript 89 *d Building a Vue CRUD App with an Express API StackPuz StackPuz StackPuz Follow Nov 7 Building a Vue CRUD App with an Express API #vue #express #crud Add Comment 11 min read Making TypeSafe APIs are easy now! Tuhin Bar Tuhin Bar Tuhin Bar Follow Nov 3 Making TypeSafe APIs are easy now! #typescript #cli #backend #express Add C*s 🌟 U* 🚀 New Write Node server with ES6 Classes 3 comments Bring your Next.JS API Experience New Moving from Laravel to another framework (django or express)? 5 comments Difference between Controllers, Routes and Services 3 comments How do you profile a node application? 4 comments I would love feedback on my TypeScript skills and NPM Module. 3 comments First NPM package, Express AutoRoute with jsonSchema validation New How are you doing role based authorization in Express? New How good is Meteor when compared to MEAN stack? New t* make your Express.js APIs 9x faster with Encore.ts * * (feature comparison and migration guide) Next.js vs Express: Which Framework Should You Use in 2024? ⚔️ Next.js vs Express: The Battle of Framework Giants in 2024—Which One Should You Choose? Part 9: Building RESTful APIs with Node.js and Express Deploy Express JS container image on Lambda AWS Cluster Your Node.js Application for Better Performance Day 2: Creating a Signup Page with Express.js – Building the Foundation for User Registration Beginner's Guide to Handling DELETE Requests in Node.js with Express Setting Up a Node.js, TypeScript, and Express Project Join To My Journey to learn building full stack web application Node.js & Express.j* JWT Basics [DAY 113-117] I built 5 backend projects to acquire a backend certificate * Elevate🚀 Your Design Game with `dummyImg` - A React & Node.js Powerhouse! 😱🖼️ Overview of Nodemailer: Easy Email Sending in Node.js Implement Authentication with Node.js using JWTs Setting Up Express.js, PostgreSQL, and Sequelize CLI for Production-Ready Applications. recently queried Node Express Supertest Jest Express Typescrip*nsor Neon * ",
    "url": "https://dev.to/t/express"
  },
  {
    "body": "* # extendnewrelic Follow Hide Create Post 1 Post Published *. Monitoring PM2 in production * Follow for New Relic Nov 1 * Add Comment 8 *onsor Neon * ",
    "url": "https://dev.to/t/extendnewrelic"
  },
  {
    "body": "* # extensions * 367 Posts Published Older #extensions posts 1 2 3 4 5 6 *. 🌟 Extensions Dump: UnitFlux and CodeMorph! Alvin James Bellero Alvin James Bellero Alvin James Bellero Follow Nov 10 🌟 Extensions Dump: UnitFlux and CodeMorph! #vscode #extensions #productivity #developers 5 *d Comparing Cody, Codeium, CodeGPT, and GitHub Copilot for VSCode pgangwani pgangwani pgangwani Follow Nov 9 Comparing Cody, Codeium, CodeGPT, and GitHub Copilot for VSCode #ai #vscode #extensions #githubcopilot * 3 useful VS Code extensions for testing Ruby code Jokūbas Jokūbas Jokūbas Follow Nov 8 3 useful VS Code extensions for testing Ruby code #ruby #vscode #extensions #testing Add Comment 2 min read Shitty but works extension ShinaBR2 ShinaBR2 ShinaBR2 Follow Nov 1 Shitty but works extension #extensions #javascript #ai #* iFrame biPass Zia Ur Rehman Zia Ur Rehman Zia Ur Rehman Follow Oct 31 iFrame biPass #javascript #webdev #extensions #node * eval() with WASM instead of sandbox with Web Extensions kasu kasu kasu Follow Oct 30 eval() with WASM instead of sandbox with Web Extensions #extensions #webassembly #quickjs #eval Add Comment 3 min read Easy Logger - Controle de Logs Simplificado! 🚀 Eric Mariano Eric Mariano Eric Mariano Follow Oct 28 Easy Logger - Controle de Logs Simplificado! 🚀 #webdev #javascript #extensions #* *) Peter Wan Peter Wan Peter Wan Follow Oct 26 *) #git #vscode #extensions #hacktoberfest2024 Add Comment 4 min read *) Peter Wan Peter Wan Peter Wan Follow Oct 26 *) #git #vscode #extensions #hacktoberfest2024 Add Comment 4 min read Open URLs in Different Environments with Ease Salim Chemes Salim Chemes Salim Chemes Follow Oct 18 Open URLs in Different Environments with Ease #javascript #extens*py as Link: A simple Chrome extension that copies the selected text as a link to the current page's URL Hank Chiu Hank Chiu Hank Chiu Follow Nov 4 Copy as Link: A simple Chrome extension that copies the selected text as a link to the current page's URL #webdev #extensions 5 reactions Ad* VPEM-Visual Studio Profile Extension Manager drmikecrowe drmikecrowe drmikecrowe Follow Oct 8 Introducing VPEM-Visual Studio Profile Extension Manager #vscode #extens* to Publish a Chrome Extension Techelopment Techelopment Techelopment Follow Nov 5 How to Publish a Chrome Extension #chrome #extensions #tooling #learning 7 * WebChat - Chat with anyone on any website. John Wu John Wu John Wu Follow Oct 15 WebChat - Chat with anyone on any website. #webdev #javascript #extensions #typescript * 🔥 Build Your Own AI-Powered Chrome Extension 🧩 Santhosh Vijayabaskar Santhosh Vijayabaskar Santhosh Vijayabaskar Follow Oct 30 🔥 Build Your Own AI-Powered Chrome Extension 🧩 #extensions #ai #tutorial 4 * NGV: writing frontend plugins Guillaume Beraudo Guillaume Beraudo Guillaume Beraudo Follow for Camptocamp Geospatial Solutions Oct 28 NGV: writing frontend plugins #webdev #extensions #*t 3 min read Building a Chrome Extension from Scratch with AI/ML API, Deepgram Aura, and IndexedDB Integration Ibrohim Abdivokhidov Ibrohim Abdivokhidov Ibrohim Abdivokhidov Follow Oct 24 Building a Chrome Extension from Scratch with AI/ML API, Deepgram Aura, and IndexedDB Integration #ai #javascript #extensions #aimlapi 8 reactions 1 comment 14 min read From Upload Headaches to Innovation: How I Solved the Image Compression Problem with One Simple Chrome Extension Ajitkumar Vaghela Ajitkumar Vaghela Ajitkumar Vaghela Follow Sep 19 From Upload Headaches to Innovation: How I Solved the Image Compression Problem with One Simple Chrome Extension #google #extensions Add Comment 1 min read Wormhole Proxy (Firefox Add-on) - single-list proxy manager Andrew Erlikh Andrew Erlikh Andrew Erlikh Follow Sep 17 Wormhole Proxy (Firefox Add-on) - single-list proxy manager #showdev #firefox #extensions #proxy Add Comment 1 min read How to get rid of fake followers on X (Twitter) Sleeyax Sleeyax Sleeyax Follow Oct 20 How to get rid of fake followers on X (Twitter) #twitter #opensource #browser #extensions 3 * Top 6 VS Code Extensions Every Web Developer Should Use Ashis*apati Follow Oct 17 Top 6 VS Code Extensions Every Web Developer Should Use #vscode #webdev #extensions #* 5 min read \"10 Essential VS Code Extensions for React Developers\" Raunak Sharma Raunak Sharma Raunak Sharma Follow Oct 14 \"10 Essential VS Code Extensions for React Developers\" #vscode #react #extensions #developer * The Latest Features in VertiTab - Side Panel Vertical Tabs lu xiao lu xiao lu xiao Follow Sep 8 The Latest Features in VertiTab - Side Panel Vertical Tabs #beginners #productivity #extensions #webdev * see your extension shine in the VS Code Marketplace? Let's go! Bruno Ciccarino λ Bruno Ciccarino λ Bruno Ciccarino λ Follow Oct 10 Want to see your extension shine in the VS Code Marketplace? Let's go! #webdev #vscode #extensions #hackathon * The Journey of Migrating Our Browser Extension from Plasmo to WXT Framework Gourav Gourav Gourav Follow Sep 27 The Journey of Migrating Our Browser Extension from Plasmo to WXT Framework #webdev #extensions #vite #react Add Comment 11 min read Native GLIBC instead of Linuxbrew since 2.21 Franck Pachot Franck Pachot Franck Pachot Follow for YugabyteDB Distributed PostgreSQL Database Oct 4 Native GLIBC instead of Linuxbrew since 2.21 #yugabytedb #postgres #extensions #glibc * * 5 * Vehbi Sinan Tunalioglu Follow Aug 28 * 5 #browser #extensions #typescript #wxt Add Comment 4 min read * 4 * Vehbi Sinan Tunalioglu Follow Aug 27 * 4 #browser #extensions #typescript #wxt Add Comment 5 min read 🚀 Introducing Remote File Sync for VS Code: Your Ultimate Tool for Seamless File Management katorymnddev katorymnddev katorymnddev Follow Aug 26 🚀 Introducing Remote File Sync for VS Code: Your Ultimate Tool for Seamless File Management #webdev #vscode #extensions #* * 3 * Vehbi Sinan Tunalioglu Follow Aug 26 * 3 #browser #extensions #typescript #wxt Add Comment 5 min read 5 Must-Have Chrome Extensions That Will Supercharge Your Developer Workflow Asima Chowdhury Asima Chowdhury Asima Chowdhury Follow Sep 26 5 Must-Have Chrome Extensions That Will Supercharge Your Developer Workflow #webdev #productivity #extensions #development *ad Gathering Requirements and Introducing IPL Score Tracker Chrome Extension sanketmunot sanketmunot sanketmunot Follow Sep 24 Gathering Requirements and Introducing IPL Score Tracker Chrome Extension #javascript #node #extensions #cricket 2 *d * 2 * Vehbi Sinan Tunalioglu Follow Aug 25 * 2 #browser #extensions #typescript #wxt * How to create a Chrome extension Techelopment Techelopment Techelopment Follow Sep 20 How to create a Chrome extension #chrome #extensions 2 *d Top 15 VS Code Extensions for Developers Nighty3098 Nighty3098 Nighty3098 Follow Sep 20 Top 15 VS Code Extensions for Developers #vscode #extensions #development #code *ad How I Developed My First Neovim Plugin: A Step-by-Step Guide Gonçalo Alves Gonçalo Alves Gonçalo Alves Follow Sep 19 How I Developed My First Neovim Plugin: A Step-by-Step Guide #neovim #development #vim #extensions 3 * Top 14 Chrome Extensions for Developers to Boost Productivity in 2024 Mahak Kaur Mahak Kaur Mahak Kaur Follow for Quash Sep 16 Top 14 Chrome Extensions for Developers to Boost Productivity in 2024 #webdev #extensions #developers #mobile 33 reactions 17 comments 4 min read From Zero to Chrome Hero: How to Build and Launch Your Own Browser Extension Seth Addo Seth Addo Seth Addo Follow Aug 29 From Zero to Chrome Hero: How to Build and Launch Your Own Browser Extension #javascript #webdev #tutorial #extensions 6 * Top Tools: 5 VS Code Extensions to Enhance Your React Development Asima Chowdhury Asima Chowdhury Asima Chowdhury Follow Sep 19 Top Tools: 5 VS Code Extensions to Enhance Your React Development #javascript #react #vscode #extensions 5 *d How SponsorBlock Works in YouTube: An In-Depth Explanation Biswas Prasana Swain Biswas Prasana Swain Biswas Prasana Swain Follow Sep 17 How SponsorBlock Works in YouTube: An In-Depth Explanation #extensions #youtube #sponsorblock #systemdesign 2 *d VSCode Extension for finding Vulnerabilities and Outdated Dependencies. Sunil Kumar Sunil Kumar Sunil Kumar Follow Sep 15 VSCode Extension for finding Vulnerabilities and Outdated Dependencies. #vscode #extensions #auditing #vulnerabilities 2 *d Building a Color Picker Extension Abhishek Gurjar Abhishek Gurjar Abhishek Gurjar Follow Sep 13 Building a Color Picker Extension #html #css #javascript #extensions 2 * Just Blame for VS Code 🪲 Artem Sapegin Artem Sapegin Artem Sapegin Follow Aug 9 Just Blame for VS Code 🪲 #vscode #projects #extensions #git * Create Your Own Visual Vibe: Build Your VS Code Theme Extension with dharam-gfx! 🎨 Dharmendra Kumar Dharmendra Kumar Dharmendra Kumar Follow Sep 10 Create Your Own Visual Vibe: Build Your VS Code Theme Extension with dharam-gfx! 🎨 #webdev #vscode #extensions #themes 7 *d Liman MYS Eklenti Güncellenmesi Yaren Sarı Yaren Sarı Yaren Sarı Follow for Açıklab Sep 23 Liman MYS Eklenti Güncellenmesi #liman #extensions 4 * 10 Must-Have Browser Extensions for Every Web Developer Blessy B Sherin Blessy B Sherin Blessy B Sherin Follow Sep 9 10 Must-Have Browser Extensions for Every Web Developer #* #extensions Add Comment 3 min read Harness the Power of AWS Lambda Extensions for Your Node.js Applications Rahul Ladumor Rahul Ladumor Rahul Ladumor Follow Sep 8 Harness the Power of AWS Lambda Extensions for Your Node.js Applications #node #aws #lambda #extens*ding a Simple Chrome Extension with Next.js Shyamalendu Nayak Shyamalendu Nayak Shyamalendu Nayak Follow Sep 8 Building a Simple Chrome Extension with Next.js #extensions #nextjs #webdev 3 * Git Hub in short Chandan Kumar Panigrahi Chandan Kumar Panigrahi Chandan Kumar Panigrahi Follow Aug 5 Git Hub in short #extensions #coding #programming #github Add Comment 3 min read I Built a Browser Extension to Seamlessly Link GitLab Branches from Linear Issues! 🚀 kambala yashwanth kambala yashwanth kambala yashwanth Follow Aug 6 I Built a Browser Extension to Seamlessly Link GitLab Branches from Linear Issues! 🚀 #extensions #linear #gitlab #w* read * 1 * Vehbi Sinan Tunalioglu Follow Aug 24 * 1 #browser #extensions #typescript #wxt Add Comment 5 min read Solving CSS and JavaScript Interference in Chrome Extensions: A Guide to React, Shadow DOM, and Best Practices Thomas Sarpong Thomas Sarpong Thomas Sarpong Follow Aug 30 Solving CSS and JavaScript Interference in Chrome Extensions: A Guide to React, Shadow DOM, and Best Practices #shadowdom #extensions #react #webpack Ad* Intelliscore: Extension for Predicting Football Match Outcomes Stokry Stokry Stokry Follow Aug 30 Introducing Intelliscore: Extension for Predicting Football Match Outcomes #showdev #python #webdev #extensions 5 *d How to Update a Chrome Extension from Manifest V2 to V3: A Step-by-Step Guide Using a Pomodoro Timer Example Aleks Kovalchuk Aleks Kovalchuk Aleks Kovalchuk Follow Aug 30 How to Update a Chrome Extension from Manifest V2 to V3: A Step-by-Step Guide Using a Pomodoro Timer Example #webdev #javascript #extensions #* 3 min read Supercharge Your Telegram Experience with Our Chrome Extension Meisam Maani Meisam Maani Meisam Maani Follow Aug 18 Supercharge Your Telegram Experience with Our Chrome Extension #extensions #telegram #webdev #* Extending Quarkus: When and How to Write Your Own Extensions Ivelin Yanev Ivelin Yanev Ivelin Yanev Follow Aug 27 Extending Quarkus: When and How to Write Your Own Extensions #quarkus #java #microservices #extensions * How I Built a Scalable, Free URL Shortener. Asadbek Karimov Asadbek Karimov Asadbek Karimov Follow Aug 24 How I Built a Scalable, Free URL Shortener. #webdev #saas #node #extensions 22 reactions 6 comments 2 min read DayTicks: Your Simple Task Management Chrome Extension Lucian DEV Lucian DEV Lucian DEV Follow Aug 22 DayTicks: Your Simple Task Management Chrome Extension #google #extensions #dailytasks #* 13 VS Code extensions that every Frontend developer should have manka'a manka'a manka'a Follow Aug 21 13 VS Code extensions that every Frontend developer should have #vscode #webdev #developers #extensions 6 * 3 Chrome Extensions to Boost Your Productivity (Plus a Bonus!) Ronak Khunt Ronak Khunt Ronak Khunt Follow Jul 16 3 Chrome Extensions to Boost Your Productivity (Plus a Bonus!) #productivity #extensions #browser #shorturl Add C* Can we have an online gathering of Browser Extension developers * Building a Simple Chrome Extension with Next.js Top 14 Chrome Extensions for Developers to Boost Productivity in 2024 Top 6 VS Code Extensions Every Web Developer Should Use Building a Chrome Extension from Scratch with AI/ML API, Deepgram Aura, and IndexedDB Integration Create Your Own Visual Vibe: Build Your VS Code Theme Extension with dharam-gfx! 🎨 Top 15 VS Code Extensions for Developers How to Update a Chrome Extension from Manifest V2 to V3: A Step-by-Step Guide Using a Pomodoro Timer Example Introducing Intelliscore: Extension for Predicting Football Match Outcomes From Zero to Chrome Hero: How to Build and Launch Your Own Browser Extension \"10 Essential VS Code Extensions for React Developers\" VSCode Extension for finding Vulnerabilities and Outdated Dependencies. How to Publish a Chrome Extension How to create a Chrome extension WebChat - Chat with anyone on any website. Building a Color Picker Extension Liman MYS Eklenti Güncellenmesi From Upload Headaches to Innovation: How I Solved the Image Compression Problem with One Simple Chrome Extension Copy as Link: A simple Chrome extension that copies the selected text as a link to the current page's URL How I Developed My First Neovim Plugin: A Step-by-Step Guide NGV: writing frontend plugin*nsor Neon * ",
    "url": "https://dev.to/t/extensions"
  },
  {
    "body": "* Front-end Follow Hide \"If you're already a front-end developer, well, pretend you're also wearing a pirate hat.\" - Ethan Marcotte Create Post tag moderators 6848 Posts Published Older #frontend *14 *. How does shareReplay() works in RxJs/angular? * Soft Heart Engineer Follow Nov 10 How does shareReplay() works in RxJs/angular? #webdev #angular #frontend #* 💡 Do you know the different units of measurement in CSS? px, em, rem, vh, and vw! 💡 * Yanaiara Oliveira Follow Nov 9 💡 Do you know the different units of measurement in CSS? px, em, rem, vh, and vw! 💡 #javascript #beginners #frontend #css Add Comment 2 min read 💡 *! 💡 * Yanaiara Oliveira Follow Nov 9 💡 *! 💡 #javascript #frontend #webdev #* Task manger app Farouk Farouk Farouk Follow Nov 9 Task manger app #webdev #javascript #frontend #taskmanager * New Here! Introducing Chipster: A Flexible Multi-Entry Input for React – Feedback Welcome Alvaro Gallego De Paz Alvaro Gallego De Paz Alvaro Gallego De Paz Follow Nov 8 New Here! Introducing Chipster: A Flexible Multi-Entry Input for React – Feedback Welcome #react #opensource #frontend #webcomponents Add Comment 1 min read CSR vs SSR vs SSG vs ISR: A Deep Dive for Modern Web Development Yug Jadvani Yug Jadvani Yug Jadvani Follow Nov 8 CSR vs SSR vs SSG vs ISR: A Deep Dive for Modern Web Development #webdev #nextjs #frontend #react Add Comment 6 min read *: CSSOM * ⛩️ Cristiano Gonçalves ⛩️ Follow Nov 8 *: CSSOM #* #frontend Add Comment 5 min read Best React Libraries for Admin Panels vector gantulga vector gantulga vector gantulga Follow Nov 9 Best React Libraries for Admin Panels #frontend #reactjs* 4 min read Simplifying Web Development: Rediscovering Ease with HTMX Diogo Eichert Diogo Eichert Diogo Eichert Follow Nov 8 Simplifying Web Development: Rediscovering Ease with HTMX #webdev #productivity #html #frontend Add Comment 1 min read Drag and Drop Ui using html css and javascript */ * 8 Drag and Drop Ui using html css and javascript */ #showdev #frontend #softwaredevelopment #w* read How to create scalable, module-based applications with ease. Viktor Pasynok Viktor Pasynok Viktor Pasynok Follow Nov 7 How to create scalable, module-based applications with ease. #frontend #javascript #programming #* *: DOM * ⛩️ Cristiano Gonçalves ⛩️ Follow Nov 7 *: DOM #frontend #webdev #javascript #* Things You May Not Know About CSS Variables - 1. Naming Rules and Value Assignments Fin Chen Fin Chen Fin Chen Follow Nov 7 Things You May Not Know About CSS Variables - 1. Naming Rules and Value Assignments #css #webdev #frontend * React Select + Custom Style ramadhan.dev ramadhan.dev ramadhan.dev Follow Nov 7 React Select + Custom Style #react #javascript #frontend #indonesia Add Comment 2 min read MarkoJS Frontend Development with Generative AI: A Modern Approach Harshal Shah Harshal Shah Harshal Shah Follow Nov 6 MarkoJS Frontend Development with Generative AI: A Modern Approach #generativeai #marko #frontend #* Boost Your Website Speed: HTML Tags That Could Be Slowing You Down and How to Optimize Them mahasun mahasun mahasun Follow Nov 6 Boost Your Website Speed: HTML Tags That Could Be Slowing You Down and How to Optimize Them #* #frontend Add Comment 5 min read Help with CSS RoB RoB RoB Follow Nov 6 Help with CSS #help #css #frontend #webdev Add Comment 2 min read Handling Async Errors in JavaScript: A Quick Guide Midhul P Midhul P Midhul P Follow Nov 6 Handling Async Errors in JavaScript: A Quick *ners #frontend * Angular version upgrade from 8 to 17 lts version Aviral Goel Aviral Goel Aviral Goel Follow Nov 5 Angular version upgrade from 8 to 17 lts version #angular #javascript #webdev #frontend Add Comment 1 min read ViteConf 2024: Innovations, Announcements, and the Road Ahead Mohamed Lamine Mohamed Lamine Mohamed Lamine Follow Nov 9 ViteConf 2024: Innovations, Announcements, and the Road Ahead #vite #webdev #frontend #javascript Add Comment 27 min read Developers Are The Gatekeepers Giovanni Proietta Giovanni Proietta Giovanni Proietta Follow Nov 5 Developers Are The Gatekeepers #webdev #frontend #design #react Add Comment 1 min read Guide to Backend for Frontend (BFF) Pattern: An Approach Using Orchestration Orkes Developers Orkes Developers Orkes Developers Follow for orkes Nov 4 Guide to Backend for Frontend (BFF) Pattern: An Approach Using Orchestration #microservices #orchestration #frontend Add Comment 11 min read The Future of Scalable Frontends: Independent Deployment and Unified UX with Micro Frontends Muhammad Mahdi Ramadhan Muhammad Mahdi Ramadhan Muhammad Mahdi Ramadhan Follow Nov 8 The Future of Scalable Frontends: Independent Deployment and Unified UX with Micro Frontends #microservices #microfrontend #frontend #* 1 min read The Evolution of Frontend Development: Exploring Different Architectures Valentin Turbins Valentin Turbins Valentin Turbins Follow Nov 3 The Evolution of Frontend Development: Exploring Different Architectures #webdev #frontend #jamstack #microfrontend 1 comment 8 min read Unleash Your Potential: Content Ideas for a Prolific Developer Blog Okoye *amaka Follow Nov 3 Unleash Your Potential: Content Ideas for a Prolific Developer Blog #webdev #contentcreation #frontend #backend Add Comment 4 min read *n LMS with React, Tailwind CSS, and Shadcn UI Part-1 M Inam M Inam M Inam Follow Nov 4 *n LMS with React, Tailwind CSS, and Shadcn UI Part-1 #react #webdev #frontend Add Comment 4 min read *) * Nov 7 *) #react #node #* 3 min read Evolution of Web Tech and Browsers Charan Sajjanapu Charan Sajjanapu Charan Sajjanapu Follow Nov 2 Evolution of Web Tech and Browsers #webdev #javascript #softwaredevelopment #frontend Add Comment 16 min read Facade Pattern no Angular Mateus Oliveira Mateus Oliveira Mateus Oliveira Follow Nov 6 Facade Pattern no Angular #angular #architecture #frontend 2 * 📢 * * Matheus Vieira do Nascimento Follow Nov 1 📢 * #git #frontend #react #node Add Comment 2 min read Welcome to ViraXpress (Open source Magento frontend) ViraXpress ViraXpress ViraXpress Follow Nov 5 Welcome to ViraXpress (Open source Magento frontend) #magneto #ecommerce #themes #frontend Add Comment 1 min read Just learnt about Vue.js hunzombi hunzombi hunzombi Follow Nov 4 Just learnt about Vue.js #vue #javascript #webdev #frontend 3 *d Fixing SSR Rendering Issues with Angular Resolver for Async Pipe Data Ryan Teh Hoon Meng Ryan Teh Hoon Meng Ryan Teh Hoon Meng Follow Oct 31 Fixing SSR Rendering Issues with Angular Resolver for Async Pipe Data #angular #ssr #learning #frontend Add Comment 3 min read Make accessibility a default: Practical tips for Front-End developers Viviane Dias Viviane Dias Viviane Dias Follow Nov 4 Make accessibility a default: Practical tips for Front-End developers #frontend #a11y #testing #tips 3 *d YouTube's Metered Count sndp sndp sndp Follow Oct 31 YouTube's Metered Count #react #typescript #frontend * An approach preventing blurry canvas on mobile app tanjiagang tanjiagang tanjiagang Follow Oct 31 An approach preventing blurry canvas on mobile app #frontend #javascript #canvas Add Comment 1 min read Toggle Dark Mode using DIVLESS Pure CSS Mardeg Mardeg Mardeg Follow Oct 31 Toggle Dark Mode using DIVLESS Pure CSS #css #html #frontend Add Comment 3 min read Components in React Omojola Tomiloba David Omojola Tomiloba David Omojola Tomiloba David Follow Oct 30 Components in React #webdev #react #frontend #* Tetris for Your App: Components Oscar & Ralph Oscar & Ralph Oscar & Ralph Follow Oct 30 Tetris for Your App: Components #angular #beginners #frontend Add Comment 8 min read The Evolution of React Interviews: Moving Beyond Class Components in 2024 Priya Moghe Priya Moghe Priya Moghe Follow Oct 29 The Evolution of React Interviews: Moving Beyond Class Components in 2024 #react #webdev #career #frontend Add Comment 3 min read 5 Top Libraries Each Frontend Developer Must Know * Emma Richardson Follow Oct 29 5 Top Libraries Each Frontend Developer Must Know #react #bootstrap #jquery #frontend Add Comment 2 min read 🚀 Vanilla Framework Update: Meet CSSer! 🚀 Adam Golan Adam Golan Adam Golan Follow Oct 27 🚀 Vanilla Framework Update: Meet CSSer! 🚀 #vanilla #webdev #frontend #css Add Comment 1 min read Event loop visualiser for lerners Vault Developer Vault Developer Vault Developer Follow Oct 27 Event loop visualiser for lerners #javascript #frontend #webdev #opensource Add Comment 1 min read Why Nextjs is Better Than Reactjs Mohammad Tahzeeb Khan Mohammad Tahzeeb Khan Mohammad Tahzeeb Khan Follow Oct 31 Why Nextjs is Better Than Reactjs #frontend #nextjs #react #* 4 min read React Basics~unit test/custom hook Ogasawara Kakeru Ogasawara Kakeru Ogasawara Kakeru Follow Oct 27 React Basics~unit test/custom hook #webdev #javascript #react #frontend Add Comment 1 min read Atomic Design no Frontend (português) Juliana Macêdo Juliana Macêdo Juliana Macêdo Follow Oct 27 Atomic Design no Frontend (português) #frontend #typescript #architecture #react Add Comment 3 min read Which is Harder, Being a Front End or A Backend Software Developer Citra-citoru Citra-citoru Citra-citoru Follow Oct 25 Which is Harder, Being a Front End or A Backend Software Developer #frontend #backend Add Comment 1 min read The first draft wireframe for my portfolio website. Molly (✿◠‿◠) Molly (✿◠‿◠) Molly (✿◠‿◠) Follow Oct 25 The first draft wireframe for my portfolio website. #webdev #beginners #frontend #ui Add Comment 1 min read Freesurvey.app: Simple Browser-Based Surveys Tiago S. P Rodrigues Tiago S. P Rodrigues Tiago S. P Rodrigues Follow Oct 25 Freesurvey.app: Simple Browser-Based Surveys #javascript #community #frontend #tooling Add Comment 1 min read Are You a Front-End Developer Struggling with Self-Doubt? Midhul P Midhul P Midhul P Follow Oct 25 Are You a Front-End Developer Struggling with Self-Doubt? #webdev #frontend #productivity #* 1 min read Preact vs React: Which Framework is Right for Your Next Project? swhabitation swhabitation swhabitation Follow Oct 25 Preact vs React: Which Framework is Right for Your Next Project? #preact #react #preactvsreact #* 5 min read Tutorial: Polyfill for Promise.allSettled, implementation from Scratch in JavaScript mod khalid mod khalid mod khalid Follow Oct 24 Tutorial: Polyfill for Promise.allSettled, implementation from Scratch in JavaScript #javascript #frontend #webdev #* React Basics~unit test/async test Ogasawara Kakeru Ogasawara Kakeru Ogasawara Kakeru Follow Oct 24 React Basics~unit test/async test #webdev #javascript #react #frontend Add Comment 2 min read 🎨 Fresh New Design for Landmark API's Landing Page & Dashboard 🚀 Marceli Borowczak Marceli Borowczak Marceli Borowczak Follow Oct 24 🎨 Fresh New Design for Landmark API's Landing Page & Dashboard 🚀 #webdev #frontend #react #design Add Comment 1 min read Was improving site performance- stuck with comparing image size Marks Bogdanovs Marks Bogdanovs Marks Bogdanovs Follow Oct 25 Was improving site performance- stuck with comparing image size #webdev #learning #frontend #beginners * Perspective in CSS: A Comprehensive Guide for Web Developers * Soft Heart Engineer Follow Nov 6 Mastering Perspective in CSS: A Comprehensive Guide for Web Developers #webdev #css #frontend #html 3 *d 🌟 Vanilla & CSSer Accessibility Update! 🌟 Adam Golan Adam Golan Adam Golan Follow Oct 28 🌟 Vanilla & CSSer Accessibility Update! 🌟 #vanilla #csser #webdev #frontend Add Comment 1 min read O que é Lazy Loading? Felipe Figueiredo Amorim Felipe Figueiredo Amorim Felipe Figueiredo Amorim Follow Oct 23 O que é Lazy Loading? #webdev #frontend #performance #ux Add Comment 2 min read Full Stack web framework with React with RSC Henrique Emanoel Viana Henrique Emanoel Viana Henrique Emanoel Viana Follow Oct 23 Full Stack web framework with React with RSC #react #javascript #frontend #webdev * A Complete Guide to React useEffect vs useLayoutEffect for Beginners Rajesh Dhiman Rajesh Dhiman Rajesh Dhiman Follow Oct 23 A Complete Guide to React useEffect vs useLayoutEffect for Beginners #javascript #react #frontend #webdev Add Comment 4 min read Stopwatch using html css and javascript follow us on the instagram... */ * 10 (43 mins ago) Stopwatch using html css and javascript follow us on the instagram... */ #webdev #vscode #frontend #javascript 1 reaction Add C*s Closing the Designer-Developer Gap 8 comments Designer-Developer Collaboration: 2024 Survey Results 3 comments It's Spooktober 🎃. Here are top 15 Google fonts to make your website spooky 👻 3 comments Which units of measure do you use and why in CSS? 30 comments What is the next big thing in frontend development? 47 comments Should I Choose Tailwind or Vanilla CSS? 40 comments Exploring a new communication pattern for micro-frontends New The quiet, pervasive devaluation of frontend New How important UX design knowledge for frontend devs? 4 comments What frontend frameworks do you use? 10 * Angular Is Your Best Shot To Land A Frontend Job Journeying from React to React Native: Differences & Similarities What's New in Next.js 15: New Hooks, Turbopack and more Effortless Error Handling in JavaScript: How the Safe Assignment Operator Simplifies Your Code 1500+ Free HTML Website Templates on HTMLrev Deno 2.0: The Next Evolution in JavaScript Runtimes – Is It Better Than Node.js? Mastering Angular 18 State Management using NgRx Axios vs Fetch A New Way to Contribute to Hacktoberfest 2024: Directly at Frontend AI Front End Debugging Part 1: Not just Console Log Understanding the Payment Request API: Simplifying Online Payments One Practical Application of Next.JS Parallel and Intercepting Routes: Better UX with Modals. Mastering Progressive Web Apps(PWA) with Angular 18: A Senior Developer's Deep Dive It's time to speed up your website with rel=\"preload\" Optimal Strategies for Storing Images in React * Examples Make your Vite applications run a little faster How to get ESLint 9.11.1 to run in Vue 3 Free Tailwind CSS Button Animations No-Framework Principle in Frontend Vue3: directives — cheat sheet (built-in and custom) (en) recently queried JS Expressions JavaScript read Fil*nsor Neon * ",
    "url": "https://dev.to/t/frontend"
  },
  {
    "body": "* Game Dev Follow Hide 👾 👾 👾 * Write! Just keep it clean and civil! about #gamedev From GameMaker Studio to Unity, RPG Maker to 6502 assembly - this is your stop for all things related to game development! However, please make sure that your post is about DEVELOPING A GAME, or TOOLS THAT DEVELOPERS CAN USE, but please make sure they are tools MADE for developers, not just tools like twitter. That can go in topics like #socialmedia. tag moderators 2882 Posts Published Older #gamedev posts 1 2 3 4 5 6 7 8 9 *. OpsLobby - A community for DevOps folks in games Robbie Cargill Robbie Cargill Robbie Cargill Follow Nov 10 OpsLobby - A community for DevOps folks in games #showdev #devops #gamedev #developers 8 *d Game Dev Digest — Issue #257 - Lessons Learned, and more Game Dev Digest - The *tter On Unity Game Dev * Follow Nov 8 Game Dev Digest — Issue #257 - Lessons Learned, and more #news #gamedev #unity3d #csharp Add Comment 8 min read Techpally hints Building a Garden in Dwarf Fortress Game Akin chaktty Akin chaktty Akin chaktty Follow Nov 7 Techpally hints Building a Garden in Dwarf Fortress Game #gamedev #mobile * a 3D Game in Unity: From Concept to Completion Jacob aberasturi Jacob aberasturi Jacob aberasturi Follow Nov 6 Building a 3D Game in Unity: From Concept to Completion #beginners #learning #csharp #gamedev Add Comment 3 min read Cookie Clicker using Python Tkinter Michael Linson Michael Linson Michael Linson Follow Nov 7 Cookie Clicker using Python Tkinter #python #gamedev #* 🍿 Popping into Action: Mastering Google's Doodle Popcorn Game ChristianHappyGo ChristianHappyGo ChristianHappyGo Follow Nov 5 🍿 Popping into Action: Mastering Google's Doodle Popcorn Game #gamedev Add Comment 3 min read From Concept to Code: Building a Simple Endless Runner Game Chipm0nk Chipm0nk Chipm0nk Follow Nov 5 From Concept to Code: Building a Simple Endless Runner Game #beginners #javascript #css #gamedev Add Comment 4 min read Monsters ahead..... Mince Mince Mince Follow Nov 7 Monsters ahead..... #beginners #programming #gamedev #tutorial 10 * Escape Road Unblocked: A Browser-Based Police Chase Game with Next.js 14 陈宇翔 陈宇翔 陈宇翔 Follow Nov 2 Escape Road Unblocked: A Browser-Based Police Chase Game with Next.js 14 #nextjs #gamedev Add Comment 2 min read October 2024 Web3 Game Report: Record Users Meet Traditional Players Footprint Analytics Footprint Analytics Footprint Analytics Follow Nov 6 October 2024 Web3 Game Report: Record Users Meet Traditional Players #blockchain #gamedev Add Comment 32 min read Game Dev Digest — Issue #256 - Horror And More Game Dev Digest - The *tter On Unity Game Dev * Follow Nov 1 Game Dev Digest — Issue #256 - Horror And More #news #gamedev #unity3d #csharp Add Comment 7 min read *! kit2d2 kit2d2 kit2d2 Follow Nov 1 *! #javascript #gamedev #* 1 min read Card Fight: A Python Terminal Game Mareyia Mareyia Mareyia Follow Oct 31 Card Fight: A Python Terminal Game #python #*ad Behind the Scenes: Designing a Beat Saber-Style Game with Godot Manasa Jayasri Manasa Jayasri Manasa Jayasri Follow Oct 26 Behind the Scenes: Designing a Beat Saber-Style Game with Godot #godot #beatsaber #gamedev #meta * Exploring Modern Game Development: Trends, Technologies, and Best Practices Lohitaksh Verma Lohitaksh Verma Lohitaksh Verma Follow Nov 7 Exploring Modern Game Development: Trends, Technologies, and Best Practices #gamedev #webdev #learning #career * Realm of gaming experiments: potential developer errors in emulator creating * Alexandra Kochetkova Follow Nov 6 Realm of gaming experiments: potential developer errors in emulator creating #cpp #programming #gamedev 4 reactions Add Comment 17 min read What it was like to build and maintain ChesedGamesOnline ChesedGamesOnline ChesedGamesOnline ChesedGamesOnline Follow Oct 23 What it was like to build and maintain ChesedGamesOnline #gamedev #wordpress #webdev Add Comment 2 min read Tanais Online, Week 3 - 4. Gyula Lakatos Gyula Lakatos Gyula Lakatos Follow Oct 21 Tanais Online, Week 3 - 4. #gamedev #webdev #devjournal Add Comment 3 min read Weekly Dev Diary #3 - Crafting a World Shaped by Memory and Time ⏳ Hanna Park Hanna Park Hanna Park Follow Oct 22 Weekly Dev Diary #3 - Crafting a World Shaped by Memory and Time ⏳ #gamedev #gamechallenge #beginners #devjournal 2 *d What is Cloud Gaming for VR? John Mathew John Mathew John Mathew Follow Oct 18 What is Cloud Gaming for VR? #webdev #vr #mixedreality #gamedev Add Comment 5 min read Leadership Importance Fabio Gonzalez Fabio Gonzalez Fabio Gonzalez Follow Oct 16 Leadership Importance #gamedev #leadership * Play games from your terminal! Kaamkiya Kaamkiya Kaamkiya Follow Nov 7 Play games from your terminal! #showdev #cli #go #gamedev 2 *d My Gaming Start-Up Needs a Tech Lead! Andy Worrell Andy Worrell Andy Worrell Follow Oct 19 My Gaming Start-Up Needs a Tech Lead! #startup #gamedev Add Comment 1 min read Blueprint Visual Scripting for Unreal Engine 5 (Third Edition) - A Technical Analysis Victoria Victoria Victoria Follow Oct 28 Blueprint Visual Scripting for Unreal Engine 5 (Third Edition) - A Technical Analysis #computerscience #unrealengine #gamedev #ai 2 * The last source code: digging into bugs in projects after indie game studio shuts down * Alexandra Kochetkova Follow Oct 14 The last source code: digging into bugs in projects after indie game studio shuts down #csharp #gamedev #programming Add Comment 7 min read Building a Custom C++ Serializer for Efficient Data Handling Pigeon Codeur Pigeon Codeur Pigeon Codeur Follow Nov 6 Building a Custom C++ Serializer for Efficient Data Handling #cpp #performance #gamedev #data 15 *ad How Educational Apps Aid Cognitive Development in Kids Anthony Murdock Anthony Murdock Anthony Murdock Follow Nov 4 How Educational Apps Aid Cognitive Development in Kids #kids #gamedev #learning 5 *d Enclave Games Monthly Report: September 2024 Andrzej Mazur Andrzej Mazur Andrzej Mazur Follow Oct 16 Enclave Games Monthly Report: September 2024 #enclavegames #js13k #gamedev #*t 3 min read The Big Refactoring - Chapter 0 Anthuulos Anthuulos Anthuulos Follow Oct 15 The Big Refactoring - Chapter 0 #townalight #gamedev #godot * What's new in PVS-Studio for Unreal Engine? * Alexandra Kochetkova Follow Oct 11 What's new in PVS-Studio for Unreal Engine? #cpp #gamedev #programming * How 3Engine Is Democratizing Web3 Game Development for Everyone 3Engine 3Engine 3Engine Follow for 3Engine - Web3 Game Engine Oct 24 How 3Engine Is Democratizing Web3 Game Development for Everyone #gamedev #web3 Add Comment 5 min read Unity Video Player: How to know if the video has finished playing Bernard Masika Bernard Masika Bernard Masika Follow Oct 15 Unity Video Player: How to know if the video has finished playing #gamedev #unity3d * Intro To Unity + GitHub Victoria Victoria Victoria Follow Oct 10 Intro To Unity + GitHub #csharp #gamedev #unity3d #github Add Comment 1 min read 🧟‍♂️ Software Engineering Postmortem: Zombie Rampage Victoria Victoria Victoria Follow Oct 23 🧟‍♂️ Software Engineering Postmortem: Zombie Rampage #softwareengineering #unrealengine #gamedev * 5 WAYS TO ORGANIZE YOUR C# CODES IN GODOT Emmanuel Pangan Emmanuel Pangan Emmanuel Pangan Follow Oct 11 5 WAYS TO ORGANIZE YOUR C# CODES IN GODOT #godot #csharp #cleancode #gamedev * Runtime toolkit I built for my game Rap2h Rap2h Rap2h Follow Oct 28 Runtime toolkit I built for my game #programming #gamedev #* 2 min read Try your first Hive Adventure now Serpent7776 Serpent7776 Serpent7776 Follow Oct 15 Try your first Hive Adventure now #web3 #gamedev #programming #blockchain 3 reacti*ing a Custom Stream Deck for My D&D Table: Solving Gamepad Integration with a Custom SDK Ramon Gebben Ramon Gebben Ramon Gebben Follow Oct 1 Building a Custom Stream Deck for My D&D Table: Solving Gamepad Integration with a Custom SDK #javascript #typescript #gamedev #dnd * Alien Invasion AGUNWA CALISTUS AGUNWA CALISTUS AGUNWA CALISTUS Follow Sep 30 Alien Invasion #webdev #gamedev #devchallenge #beginners 5 *d WolvenKit code analysis: things to know before modding Cyberpunk 2077 * Alexandra Kochetkova Follow Sep 30 WolvenKit code analysis: things to know before modding Cyberpunk 2077 #csharp #gamedev #programming Add Comment 8 min read CreateJS - One byte explainer CitronBrick CitronBrick CitronBrick Follow Sep 29 CreateJS - One byte explainer #* Add Comment 1 min read One Byte Explainer Ahiyan Kabir Ahiyan Kabir Ahiyan Kabir Follow Sep 29 One Byte Explainer #* Add Comment 2 min read Optimizing C++ Memory Management with a Custom Memory Pool Pigeon Codeur Pigeon Codeur Pigeon Codeur Follow Nov 1 Optimizing C++ Memory Management with a Custom Memory Pool #cpp #programming #performance #gamedev 12 * Alien Shape-Shifter Escape pragyanandasaho pragyanandasaho pragyanandasaho Follow Sep 28 Alien Shape-Shifter Escape #* Add Comment 2 min read Hello World! Jacqueline Daly Jacqueline Daly Jacqueline Daly Follow Sep 28 Hello World! #news #career #testing #gamedev Add Comment 1 min read Conducting Events: The Orchestra of Games ARATRIKA GUPTA ARATRIKA GUPTA ARATRIKA GUPTA Follow Sep 27 Conducting Events: The Orchestra of Games #* Add Comment 1 min read Starcraft Next.js Volodymyr Smoliak Volodymyr Smoliak Volodymyr Smoliak Follow Sep 26 Starcraft Next.js #* Add Comment 1 min read AR Game Dev 1 / 10( Contents ) Akira Game Akira Game Akira Game Follow Sep 26 AR Game Dev 1 / 10( Contents ) #unity3d #gamedev #design #csharp Add Comment 3 min read Pixi’s Asset Pack 1.0: A Step Forward for Asset Management Richard Fu Richard Fu Richard Fu Follow for RF Game Dev Sep 30 Pixi’s Asset Pack 1.0: A Step Forward for Asset Management #pixijs #webdev #pixi #gamedev 2 * Game Dev Digest — Issue #254 - Unity 6 Game Dev Digest - The *tter On Unity Game Dev * Follow Oct 18 Game Dev Digest — Issue #254 - Unity 6 #news #gamedev #unity3d #csharp * 5 Game Design Tips Every Indie Developer Needs to Know Amanz Amanz Amanz Follow Oct 18 5 Game Design Tips Every Indie Developer Needs to Know #gamedev #design #development #unity3d Add Comment 4 min read What's new in Unity 6? Overview of release updates and source code issues * Alexandra Kochetkova Follow Oct 18 What's new in Unity 6? Overview of release updates and source code issues #csharp #gamedev #programming #unity3d 3 * 2D Game Renderer in Rust - Let's Make a Mini RPG! Trish Trish Trish Follow Oct 28 2D Game Renderer in Rust - Let's Make a Mini RPG! #rust #gamedev #tutorial #programming 8 * Mergeometry! a new iOS game reimagining 2048 Maxym Babenko Maxym Babenko Maxym Babenko Follow Oct 16 Mergeometry! a new iOS game reimagining 2048 #ios #mobile #gamedev #2 3 *d 300LOC space life protect Diego Cardoso Diego Cardoso Diego Cardoso Follow Sep 27 300LOC space life protect #* Add Comment 1 min read Web Audio API: Bring Games to Life with Sound Shaikh AJ Shaikh AJ Shaikh AJ Follow Sep 23 Web Audio API: Bring Games to Life with Sound #* Add Comment 1 min read One Byte Explainer: WebSockets Zibras Ismail Zibras Ismail Zibras Ismail Follow Sep 23 One Byte Explainer: WebSockets #* Add Comment 1 min read Collision Detection Akshat Ramanathan Akshat Ramanathan Akshat Ramanathan Follow Sep 21 Collision Detection #* Add Comment 1 min read Game Dev Digest — Issue #255 - Animations, Engines, and more Game Dev Digest - The *tter On Unity Game Dev * Follow Oct 25 Game Dev Digest — Issue #255 - Animations, Engines, and more #news #gamedev #unity3d #csharp * Game Dev Diary #1: Starting from zero EdRome EdRome EdRome Follow Oct 13 Game Dev Diary #1: Starting from zero #gamedev #godotengine #newbie #design * SHARD Format – A New Take on Minecraft Region Data Joshua Dean Küpper Joshua Dean Küpper Joshua Dean Küpper Follow Nov 5 SHARD Format – A New Take on Minecraft Region Data #gamedev #algorithms #kotlin #minecraft Add Comment 41 min read VR and Architecture: Visualizing Real-World Designs Through Gaming Technology John Mathew John Mathew John Mathew Follow Nov 3 VR and Architecture: Visualizing Real-World Designs Through Gaming Technology #webdev #vr #gamedev #mixedreality Add Comment 6 min read Игорь Мацанюк RUSGAMEDEV RUSGAMEDEV RUSGAMEDEV Follow Nov 1 Игорь Мацанюк #matsanuk #gamedev #mailru #astrum Add Comment 2 min read Seeking New Experience Isabella Bernstein Isabella Bernstein Isabella Bernstein Follow Oct 21 Seeking New Experience #career #learning #gamedev Add C* Pong: Atari Classic Game 1 comment How do you expect video games to change in the next few years? 19 comments Share the ️Love ️— What's your favorite #gamedev post on DEV? 1 comment Calling all indie game developers, come show off your games! 👾 42 comments Criamos uma nova forma de avaliar jogos: Open Video Game Data [PT-BR] 7 comments The Future of Gaming and NFTs 6 comments I'm curious about developing for Gaming Platform? New Access code Login? 5 comments Get Coin Master Free Spins and Coins [Spin Generator] New Sloan's Inbox: Pursuing passion or practicality? * Building a Custom C++ Serializer for Efficient Data Handling Gotchas while developing a tiny web game How to Build Your First Python Game: A * Simple Shooter with PyGame Alien Waves Introducing our First Community Web Game Challenge 👾 WebRTC - One Byte Explainer A *nd Adding Components in Unity ECS The Future of Game Development (No Engine!?) Mastering UI/UX Game Design: A Comprehensive Guide A Comprehensive Guide to Generating Entity Prefabs at Runtime in Unity ECS Online Visual Novel in Godot: Case Study on Sentou Gakuen Create a Tic Tac Toe Game in Unity 🎮 Game UI Design: Crafting Engaging and Immersive Experiences Reinvent The Wheel (Maybe) Alien Defender Game Xylophia VI : An Endless Survival Shooter Game Introducing GameGift: Create and gift personalised games in minutes Congrats to the Winners of Our First Web Game Challenge! Introduction to Unity Minesweeper in Svelte recently queried Unity Web Request Making a Visual Novel in Unit*nsor Neon * ",
    "url": "https://dev.to/t/gamedev"
  },
  {
    "body": "* # gcp * 395 Posts Published Older #gcp posts 1 2 3 4 5 6 *. * * Deploying GKE Clusters with Terraform mkdev.* Nov 9 Deploying GKE Clusters with Terraform #gcp #gke #terraform Add Comment 4 min read Using Google Cloud Functions for Three-Tier Data Processing with Google Composer and Automated Deployments via GitHub Actions Jader Lima Jader Lima Jader Lima Follow Oct 25 Using Google Cloud Functions for Three-Tier Data Processing with Google Composer and Automated Deployments via GitHub Actions #gcp #python #airflow #serverless Add Comment 11 min read Can I use Cloud Armor with Cloud Run? mkdev.* Oct 19 Can I use Cloud Armor with Cloud Run? #gcp #cloud #cloudrun Add Comment 2 min read Modernize or Build New Cloud Apps Without the Headaches Marcio Figueiredo 👨‍💻 Marcio Figueiredo 👨‍💻 Marcio Figueiredo 👨‍💻 Follow Oct 16 Modernize or Build New Cloud Apps Without the Headaches #gcp #google #cloud #serverless Add Comment 4 min read Configure Google Cloud Speech-to-Text API Suji Matts Suji Matts Suji Matts Follow Oct 14 Configure Google Cloud Speech-to-Text API #gcp #speechtotextapi #gcpapi Add Comment 2 min read GCP Code Build Error(unknown field \"logging\" in google.devtools.cloudbuild.v1.Build) namikaze-abhishek namikaze-abhishek namikaze-abhishek Follow Oct 11 GCP Code Build Error(unknown field \"logging\" in google.devtools.cloudbuild.v1.Build) #gcp #codebuild Add Comment 1 min read Google Cloud Run always-on vs on-demand CPU allocation mkdev.* Oct 8 Google Cloud Run always-on vs on-demand CPU allocation #gcp #cloud Add Comment 3 min read Why your FastAPI (or Flask) App performs poorly with high loads T3ns0r T3ns0r T3ns0r Follow Oct 20 Why your FastAPI (or Flask) App performs poorly with high loads #fastapi #flask #python #gcp Add Comment 3 min read Using Cloud Functions and Cloud Schedule to process data with Google Dataflow Jader Lima Jader Lima Jader Lima Follow Sep 22 Using Cloud Functions and Cloud Schedule to process data with Google Dataflow #gcp #dataflow #cloudfunctions #cloudscheduler Add Comment 7 min read *) : L'entrainement à la certification Arnaud Gaches Arnaud Gaches Arnaud Gaches Follow for Onepoint Oct 15 *) : L'entrainement à la certification #architecture #gcp #certification #cloud Add Comment 2 min read *) : par quoi commencer ? Arnaud Gaches Arnaud Gaches Arnaud Gaches Follow for Onepoint Oct 15 *) : par quoi commencer ? #architecture #gcp #certification #cloud Add Comment 3 min read *) : Se former Arnaud Gaches Arnaud Gaches Arnaud Gaches Follow for Onepoint Oct 15 *) : Se former #architecture #gcp #certification #cloud Add Comment 3 min read Which Cloud Platform to choose? Confused!!! Shreyan Maity Shreyan Maity Shreyan Maity Follow Oct 24 Which Cloud Platform to choose? Confused!!! #cloudcomputing #aws #azure #gcp 1 comment 2 min read How does load balancing enable the distribution of HTTP-based traffic? Vivesh Vivesh Vivesh Follow Oct 21 How does load balancing enable the distribution of HTTP-based traffic? #cloud #beginners #http #gcp * Day 1 of Cloud learning Avesh Avesh Avesh Follow Oct 21 Day 1 of Cloud learning #azure #aws #gcp #cloudcomputing Add Comment 3 min read *) Arnaud Gaches Arnaud Gaches Arnaud Gaches Follow for Onepoint Oct 15 *) #gcp #architecture #certification #cloud 2 *d Title: How I Configured IAM in Google Cloud Step by Step. Jonathan Aseh Jonathan Aseh Jonathan Aseh Follow Sep 10 Title: How I Configured IAM in Google Cloud Step by Step. #gcp Add Comment 3 min read Landing Zones en la Nube: Clave para un Entorno Seguro y Escalable Antonio Jesús Castillo Cotán Antonio Jesús Castillo Cotán Antonio Jesús Castillo Cotán Follow Oct 12 Landing Zones en la Nube: Clave para un Entorno Seguro y Escalable #cloudcomputing #landingzone #aws #gcp * SSH to Google Compute Engine * chauhoangminhnguyen Follow Sep 23 SSH to Google Compute Engine #googlecloud #virtualmachine #beginners #gcp 7 *d Beware of Oracle Cloud: My Experience with Unexplained Account Termination Md. Nazrul Islam Khan Md. Nazrul Islam Khan Md. Nazrul Islam Khan Follow Aug 28 Beware of Oracle Cloud: My Experience with Unexplained Account Termination #oraclecloud #aws #devops #gcp Add Comment 1 min read GCP Global Infrastructure Nguyễn Long Nguyễn Long Nguyễn Long Follow Sep 30 GCP Global Infrastructure #gcp Add Comment 2 min read Terraform - Overview Sandeep Sandeep Sandeep Follow Sep 17 Terraform - Overview #aws #gcp #terraform #infrastructureascode Add Comment 3 min read Loading data to Google Big Query using Dataproc workflow templates and cloud Schedule Jader Lima Jader Lima Jader Lima Follow Sep 6 Loading data to Google Big Query using Dataproc workflow templates and cloud Schedule #gcp #dataproc #bigquery #bigdata 2 *ad 🔑 APIGEE 101: onboarding & authentication adriens adriens adriens Follow for opt-nc Sep 2 🔑 APIGEE 101: onboarding & authentication #api #gcp #googlecloud #tutorial 3 * Understand your Google Cloud Costs: Billing, Cost Management and Budgets mkdev.* Aug 31 Understand your Google Cloud Costs: Billing, Cost Management and Budgets #gcp #cloud #costs 2 *d Serverless: Simplifying Cloud Computing with Google Cloud Functions Marcio Figueiredo 👨‍💻 Marcio Figueiredo 👨‍💻 Marcio Figueiredo 👨‍💻 Follow Aug 29 Serverless: Simplifying Cloud Computing with Google Cloud Functions #cloud #serverless #gcp Add Comment 3 min read Finally found a solution to clear the CDN cache using GitHub Actions! Stefano Stefano Stefano Follow Jul 24 Finally found a solution to clear the CDN cache using GitHub Actions! #githubactions #googlecloud #gcp #cache Add Comment 2 min read How to Use Google Cloud Run Jobs for Background Tasks mkdev.* Jul 20 How to Use Google Cloud Run Jobs for Background Tasks #gcp #cloud * a data pipeline using Dataproc workflow templates and cloud Schedule Jader Lima Jader Lima Jader Lima Follow Aug 21 Creating a data pipeline using Dataproc workflow templates and cloud Schedule #pyspark #gcp #dataproc #pipelines Add Comment 12 min read Dive into the world of serverless - GCP Edition Suraj Kamal Suraj Kamal Suraj Kamal Follow Jul 29 Dive into the world of serverless - GCP Edition #gcp #serverless #firestore #apigee Add Comment 6 min read Service Weaver, Monolithic or Microservice? mkdev.* Aug 10 Service Weaver, Monolithic or Microservice? #gcp #devops #cloud Add Comment 4 min read Using Terraform to Create VM Instances and Connect via SSH * chauhoangminhnguyen Follow Aug 9 Using Terraform to Create VM Instances and Connect via SSH #terraform #gcp #beginners #virtualmachine 7 * Using Terraform to deploy a docker image on Google Kubernetes Engine * chauhoangminhnguyen Follow Aug 6 Using Terraform to deploy a docker image on Google Kubernetes Engine #terraform #gcp #kubernetes #* 5 min read Running pyspark jobs on Google Cloud Dataproc Jader Lima Jader Lima Jader Lima Follow Aug 5 Running pyspark jobs on Google Cloud Dataproc #pyspark #gcp #dataproc #pipeline 4 * What is Dataplex on Google Cloud? - Explained the simple way Robert Grootjen Robert Grootjen Robert Grootjen Follow Jun 27 What is Dataplex on Google Cloud? - Explained the simple way #googlecloud #gcp #cloud #dataplex Add Comment 1 min read How to Connect to Google Cloud VM Instances Using Your Terminal Manoj Swami Manoj Swami Manoj Swami Follow Jul 29 How to Connect to Google Cloud VM Instances Using Your Terminal #gcp #ssh 2 reactions * Google Cloud Platform Pricing | AI/ML Pricing on Google Cloud Platform Kemal Cholovich Kemal Cholovich Kemal Cholovich Follow Jul 25 Understanding Google Cloud Platform Pricing | AI/ML Pricing on Google Cloud Platform #gcp #gdg #gcppricing 6 reactions 1 comment 8 min read What is QUALIFY in BigQuery | Understanding QUALIFY in BigQuery: A Guide for Data Scientists | BigQuery Tips Kemal Cholovich Kemal Cholovich Kemal Cholovich Follow Jul 17 What is QUALIFY in BigQuery | Understanding QUALIFY in BigQuery: A Guide for Data Scientists | BigQuery Tips #bigquery #gdg #gcp #bigqueryqualify * Practicing with Google Cloud Platform - Google Kubernetes Engine to deploy nginx * chauhoangminhnguyen Follow Jul 17 Practicing with Google Cloud Platform - Google Kubernetes Engine to deploy nginx #kubernetes #gcp #beginners #devops 9 * Building PDF Open Source Services with Angular & GCP — Handling long processing tasks Dale Nguyen Dale Nguyen Dale Nguyen Follow Jul 12 Building PDF Open Source Services with Angular & GCP — Handling long processing tasks #angular #webdev #gcp #firebase Add Comment 4 min read My 5-Year Journey on the Cloud Ashish Panda Ashish Panda Ashish Panda Follow Jul 19 My 5-Year Journey on the Cloud #cloudcomputing #career #aws #gcp *ad How to back up GKE Clusters mkdev.* Jul 6 How to back up GKE Clusters #gke #gcp #cloud Add Comment 3 min read AWS/GCP/Azure Consoles, Embedded inside Your Docs Sebastian Tiedtke Sebastian Tiedtke Sebastian Tiedtke Follow Jul 3 AWS/GCP/Azure Consoles, Embedded inside Your Docs #devops #cloud #aws #gcp 4 * VIP in GCP InterSystems Developer InterSystems Developer InterSystems Developer Follow for InterSystems Jun 30 VIP in GCP #cloud #gcp #mirroring #* 11 min read # Creating Virtual Machines on Cloud Platforms: AWS, Azure, and GCP Aaditya Kediyal Aaditya Kediyal Aaditya Kediyal Follow Jun 29 # Creating Virtual Machines on Cloud Platforms: AWS, Azure, and GCP #aws #gcp #azure #virtualmachine *ad How to encrypt disks in GCP? mkdev.* Jun 29 How to encrypt disks in GCP? #gcp #encryption Add Comment 2 min read Mengatasi masalah OR-CBAT-15 di GCP dengan Cloudflare Ahmad Rizal Khamdani Ahmad Rizal Khamdani Ahmad Rizal Khamdani Follow Jun 23 Mengatasi masalah OR-CBAT-15 di GCP dengan Cloudflare #cloudflare #gcp 1 comment 2 min read Apple Silicon, State-of-the-art ARM CPU Choonho Son Choonho Son Choonho Son Follow Jun 21 Apple Silicon, State-of-the-art ARM CPU #arm #apple #aws #gcp 13 * GCP Cloud Armor - How to Leverage and add extra layer of security Chetan Menge Chetan Menge Chetan Menge Follow Jun 21 GCP Cloud Armor - How to Leverage and add extra layer of security #gcp #cloudarmor #websecurity #cloud 2 *d Cloud Computing Platforms Michellebuchiokonicha Michellebuchiokonicha Michellebuchiokonicha Follow Jun 17 Cloud Computing Platforms #cloud #softwaredevelopment #aws #gcp 6 * Building PDF Open Source Services with Angular & GCP — Deploy services to Cloud Run Dale Nguyen Dale Nguyen Dale Nguyen Follow Jun 8 Building PDF Open Source Services with Angular & GCP — Deploy services to Cloud Run #angular #firebase #gcp #webdev 4 * Building PDF Open Source Services with Angular & GCP - Architecture Overview Dale Nguyen Dale Nguyen Dale Nguyen Follow Jun 3 Building PDF Open Source Services with Angular & GCP - Architecture Overview #angular #webdev #gcp #firebase Add Comment 2 min read Power of Serverless Computing in GCP Waqas Khursheed Waqas Khursheed Waqas Khursheed Follow May 1 Power of Serverless Computing in GCP #gcp Add Comment 9 min read How to upgrade Openshift 4.x mkdev.* May 25 How to upgrade Openshift 4.x #openshift #gcp Add Comment 2 min read GHosttp JoLo JoLo JoLo Follow May 24 GHosttp #gcp #development #serverless #express Add Comment 3 min read Clustering in BigQuery (Dynamic Filters & External Queries) * Charlotte Towell Follow May 23 Clustering in BigQuery (Dynamic Filters & External Queries) #bigquery #gcp #sql #database Add Comment 3 min read Cloud Run without VPC Serverless mkdev.* May 21 Cloud Run without VPC Serverless #gcp #serverless * Cloud Build Setup with Private Github Repos and Submodules * Charlotte Towell Follow May 20 Cloud Build Setup with Private Github Repos and Submodules #cloudbuild #gcp #github #submodules 2 *d GCP IAC - Terraform Srinivasulu Paranduru Srinivasulu Paranduru Srinivasulu Paranduru Follow for cloudteachable May 19 GCP IAC - Terraform #gcp #iac #terraform * 2 simple tips to reduce your Google Cloud Run costs * Sep 28 2 simple tips to reduce your Google Cloud Run costs #gcp #finops #cloud #cloudcost Add Comment 3 min read GCP FinOps Hub: The Key to Mastering Your Finances on Google Cloud * Sep 14 GCP FinOps Hub: The Key to Mastering Your Finances on Google Cloud #finops #gcp #cloudcost Add Comment 5 min read BigQuery Editions vs On Demand Alessandro Marrella Alessandro Marrella Alessandro Marrella Follow Sep 5 BigQuery Editions vs On Demand #gcp #bigquery #sql *... trending guides/resources 🔑 APIGEE 101: onboarding & authentication Understand your Google Cloud Costs: Billing, Cost Management and Budgets Deploying GKE Clusters with Terraform SSH to Google Compute Engin*nsor Neon * ",
    "url": "https://dev.to/t/gcp"
  },
  {
    "body": "* Git Follow Hide Software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Create Post tag moderators 6979 Posts Published Older #git *16 *. The effective Pull Request checklist Mario Ruci Mario Ruci Mario Ruci Follow Nov 9 The effective Pull Request checklist #programming #git #softwareengineering #software* How to undo a git pull command Alexandre Calaça Alexandre Calaça Alexandre Calaça Follow Nov 8 How to undo a git pull command #webdev #git #alexandrecalaca #linux Add Comment 2 min read Adding Jest To Explainer.js * * Nov 8 Adding Jest To Explainer.js #javascript #git #opensource #cli Add Comment 2 min read How to Set Up GitHub with SSH Keys on Windows 10 or 11 Adnan al-emran ontor Adnan al-emran ontor Adnan al-emran ontor Follow Nov 8 How to Set Up GitHub with SSH Keys on Windows 10 or 11 #webdev #git #ssh #github Add Comment 2 min read Writing Commit Messages using AI from CLI (no API key) jnsahaj jnsahaj jnsahaj Follow Nov 7 Writing Commit Messages using AI from CLI (no API key) #ai #git #productivity #* How to Reset Your Local Git Branch * Nov 7 How to Reset Your Local Git Branch #git #devops #security Add Comment 5 min read Managing Multiple Git Identities on Windows for Different Projects Deepika Gunda Deepika Gunda Deepika Gunda Follow Nov 8 Managing Multiple Git Identities on Windows for Different Projects #git #pcsetup #developer #ssh Add Comment 3 min read git rebase on pull Jonas Samuelsson Jonas Samuelsson Jonas Samuelsson Follow Nov 6 git rebase on pull #git Add Comment 1 min read 🚀 How to Generate and Add SSH Keys to GitHub or Bitbucket (MacOS Guide) Roshan Kr Soni Roshan Kr Soni Roshan Kr Soni Follow Nov 6 🚀 How to Generate and Add SSH Keys to GitHub or Bitbucket (MacOS Guide) #github #git #bitbucket #ssh Add Comment 3 min read How to solve git error: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400 Lyner Lim Lyner Lim Lyner Lim Follow Nov 6 How to solve git error: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400 #git Add Comment 1 * * Add Comment 1 min read Using SSH to Connect Local Git to Remote Repositories Bryan Lumbantobing Bryan Lumbantobing Bryan Lumbantobing Follow Nov 9 Using SSH to Connect Local Git to Remote Repositories #ssh #github #git #security 5 * Git Undo Last Commit * Nov 5 Git Undo Last Commit #git #devops #security 4 * Deleting Git Commits * Nov 5 Deleting Git Commits #git #devops #security 4 *d GitOps: A Strategic Advantage for Automation, Collaboration, and Cost Savings * Nov 4 GitOps: A Strategic Advantage for Automation, Collaboration, and Cost Savings #git #gitops #devops #learning Add Comment 6 min read Create a Git Commit: Mastering Version Control with Git Labby Labby Labby Follow for LabEx Nov 9 Create a Git Commit: Mastering Version Control with Git #labex #git #coding #* Meet Tickety-Tick Max Max Max Follow for bitcrowd Nov 4 Meet Tickety-Tick #git #browserextensions #tooling Add Comment 9 min read Quality isn't a four letter word Peter Harrison Peter Harrison Peter Harrison Follow Nov 4 Quality isn't a four letter word #codereview #pullrequest #git Add Comment 7 min read * * Cleo Buenaventura Follow Nov 3 * #opensource #git #github #hacktoberfes*o Safely Delete Local and Remote Branches in Git * Nov 4 How to Safely Delete Local and Remote Branches in Git #git #devops #security 7 * Tricentis Tosca: A Powerful Tool for Continuous Testing Tharunika L Tharunika L Tharunika L Follow Nov 7 Tricentis Tosca: A Powerful Tool for Continuous Testing #devops #devsecops #cicd #git 1 reaction * Git Branching in 5 Minutes Isabelle M. Isabelle M. Isabelle M. Follow Nov 2 Understanding Git Branching in 5 Minutes #git #softwared* 📢 * * Matheus Vieira do Nascimento Follow Nov 1 📢 * #git #frontend #react #node Add Comment 2 min read Preventing Secrets from Leaking in Code with Talisman and Git Hooks 🔐 Dan Lucio Prada Dan Lucio Prada Dan Lucio Prada Follow Oct 31 Preventing Secrets from Leaking in Code with Talisman and Git Hooks 🔐 #devops #security #secrets #git Add Comment 1 min read Beyond Spellcheck: How Static Analysis Tools Enhance Collaboration in Coding AnhChienVu AnhChienVu AnhChienVu Follow Oct 30 Beyond Spellcheck: How Static Analysis Tools Enhance Collaboration in Coding #javascript #git #prettier #eslint Add Comment 4 min read Push Your Local Code To Remote Repository Nikhilesh Mauje Nikhilesh Mauje Nikhilesh Mauje Follow Oct 29 Push Your Local Code To Remote Repository #git #github #commands #* Set Up Your Own Local GitLab Server | Self-hosted GitLab Ishmam Abir | イシュマム・アビル Ishmam Abir | イシュマム・アビル Ishmam Abir | イシュマム・アビル Follow Oct 29 Set Up Your Own Local GitLab Server | Self-hosted GitLab #git #gitlab #docker #localhost Add Comment 5 min read Guida all'Uso di Git e GitHub per Principianti | Getting Started with Git and GitHub: A Beginner's Guide Roberto Celano Roberto Celano Roberto Celano Follow Oct 28 Guida all'Uso di Git e GitHub per Principianti | Getting Started with Git and GitHub: A Beginner's Guide #github #git #tutorial #webdev Add Comment 3 min read Stop Creating Repos To Share Your Code Snippets - Use GitHub Gists Instead Meqdad Darwish Meqdad Darwish Meqdad Darwish Follow Nov 8 Stop Creating Repos To Share Your Code Snippets - Use GitHub Gists Instead #github #code #codesnippet #git 12 reactions 7 comments 3 min read *) Peter Wan Peter Wan Peter Wan Follow Oct 26 *) #git #vscode #extensions #hacktoberfest2024 Add Comment 4 min read *) Peter Wan Peter Wan Peter Wan Follow Oct 26 *) #git #vscode #extensions #hacktoberfest2024 Add Comment 4 min read Creating a Live Collaborative Editor with Next.js and Sockets.IO Hamza Nadeem Hamza Nadeem Hamza Nadeem Follow Oct 25 Creating a Live Collaborative Editor with Next.js and Sockets.IO #webdev #nextjs #websockets #git * a Remote Git Hub for Your Company(Without Github) Pu*r P* Nov 6 Creating a Remote Git Hub for Your Company(Without Github) #typescript #git #tutorial #mysql 10 * 2024's Git Survey is Live! Bruno Brito Bruno Brito Bruno Brito Follow for Tower Oct 24 2024's Git Survey is Live! #git #github #gitlab #* GitHub CLI Extension for Conventional Commits Rob van der Leek Rob van der Leek Rob van der Leek Follow Oct 25 GitHub CLI Extension for Conventional Commits #gh #git #github 7 reactions * Git: The Ultimate Guide with Practical Examples Jahid Hiron Jahid Hiron Jahid Hiron Follow Oct 24 Understanding Git: The Ultimate Guide with Practical Examples #git #versioncontrol #collaboration #projectmanagement Add Comment 5 min read 📈 Making Your GitHub Repository Stand Out With 12 Easy Steps! Kosa Matyas Kosa Matyas Kosa Matyas Follow Nov 6 📈 Making Your GitHub Repository Stand Out With 12 Easy Steps! #github #beginners #git #* 3 min read \"How do I undo my most recent commit?\" - Mastering the git reset command This Dot Media This Dot Media This Dot Media Follow for This Dot Nov 6 \"How do I undo my most recent commit?\" - Mastering the git reset command #git 4 *d Day 12/90: Git & GitHub Fundamentals for DevOps Engineers 🌿 #90DaysOfDevOps Kanav Gathe Kanav Gathe Kanav Gathe Follow Oct 23 Day 12/90: Git & GitHub Fundamentals for DevOps Engineers 🌿 #90DaysOfDevOps #git #devops #github Add Comment 2 min read Day 14/90: Essential Linux & Git-GitHub Cheat Sheet 📝 #90DaysOfDevOps Kanav Gathe Kanav Gathe Kanav Gathe Follow Oct 23 Day 14/90: Essential Linux & Git-GitHub Cheat Sheet 📝 #90DaysOfDevOps #linux #git #devops #* Development Instruments Explained Mikhail Shevtsov Mikhail Shevtsov Mikhail Shevtsov Follow Oct 23 Development Instruments Explained #kubernetes #laravel #git #vscode Add Comment 3 * Using Git Stash Md Abu Musa Md Abu Musa Md Abu Musa Follow Oct 22 A Comprehensive Guide to Using Git Stash #git #github #gitstash #github* Implementing effortless rollbacks in Git Axel Navarro Axel Navarro Axel Navarro Follow for Cloud(x); Oct 22 Implementing effortless rollbacks in Git #git #bash #productivity #tooling Add Comment 3 min read Cómo usar varias SSH keys para diferentes repositorios de GitHub (o GitLab) José María CL José María CL José María CL Follow Nov 4 Cómo usar varias SSH keys para diferentes repositorios de GitHub (o GitLab) #git #github #setup #tutorial 11 * How to Use Git to Manage Daily Tasks and Schedule Effectively MrDPrasad MrDPrasad MrDPrasad Follow Nov 4 How to Use Git to Manage Daily Tasks and Schedule Effectively #git #tutorial #productivity #* 3 min read Git Stash: Because Sometimes, You Just Need to Hide Gleb Kotovsky Gleb Kotovsky Gleb Kotovsky Follow Oct 24 Git Stash: Because Sometimes, You Just Need to Hide #git #tutorial #productivity #tooling 7 * HackTheBox - Writeup Editorial [Retired] Guilherme Martins Guilherme Martins Guilherme Martins Follow Oct 19 HackTheBox - Writeup Editorial [Retired] #security #python #git #api Add Comment 12 min read How to Securely Remove a File from Git History: A Step-by-Step Guide Shubham Khan Shubham Khan Shubham Khan Follow Oct 23 How to Securely Remove a File from Git History: A Step-by-Step Guide #webdev #git #beginners #security * Active Directory (AD) interview questions and answers for fresher David David David Follow Oct 18 Active Directory (AD) interview questions and answers for fresher #webdev #java #git Add Comment 2 min read Quick Tip: Git Undo Commands CodeWithCaen CodeWithCaen CodeWithCaen Follow Oct 17 Quick Tip: Git Undo Commands #git #beginners #tutorial #cli Add Comment 1 min read DevOps Journey: Week 2 - Learning Git & Version Control Arjun Sonani Arjun Sonani Arjun Sonani Follow Oct 17 DevOps Journey: Week 2 - Learning Git & Version Control #devops #git #linux #learninpublic Add Comment 2 min read Quickly and Easily Manage Multiple SSH and GPG Keys Across Git Repositories JT Ziolo JT Ziolo JT Ziolo Follow Oct 17 Quickly and Easily Manage Multiple SSH and GPG Keys Across Git Repositories #git #ssh #gpg #* Make master Branch Default Again David Paluy David Paluy David Paluy Follow Nov 7 Make master Branch Default Again #git #github #master #dothingsthatmatter 4 reactions 12 comments 2 min read DATA MINING AND VISUALISATION. Dion Nekesa Dion Nekesa Dion Nekesa Follow Oct 16 DATA MINING AND VISUALISATION. #datascience #beginners #mongodb #git Add Comment 2 min read 🎉 𝗚𝗶𝘁 𝗖𝗵𝗲𝗮𝘁 𝗦𝗵𝗲𝗲𝘁 𝗳𝗼𝗿 𝗛𝗮𝗰𝗸𝘁𝗼𝗯𝗲𝗿𝗳𝗲𝘀𝘁 2024! 🎉 Himanshu Himanshu Himanshu Follow Oct 16 🎉 𝗚𝗶𝘁 𝗖𝗵𝗲𝗮𝘁 𝗦𝗵𝗲𝗲𝘁 𝗳𝗼𝗿 𝗛𝗮𝗰𝗸𝘁𝗼𝗯𝗲𝗿𝗳𝗲𝘀𝘁 2024! 🎉 #hacktoberfest #git #hacktoberfestchallenge #github Add Comment 3 min read Git Remotes Cheatsheet: Mastering Remote Repository Management Jeremy Stretch Jeremy Stretch Jeremy Stretch Follow Nov 7 Git Remotes Cheatsheet: Mastering Remote Repository Management #git #github #devops #productivity 6 * Understanding Git, GitHub, and GitLab: A Guide with Examples and Use Cases Vivesh Vivesh Vivesh Follow Oct 30 Understanding Git, GitHub, and GitLab: A Guide with Examples and Use Cases #git #github #gitlab #basic * Scopre Repository for Gitlab Tirso Andrade Tirso Andrade Tirso Andrade Follow Oct 16 Scopre Repository for Gitlab #gitlab #git Add Comment 3 min read 🎉 Passed the GitHub Foundations exam! 🎉 Prashant Lakhera Prashant Lakhera Prashant Lakhera Follow Oct 16 🎉 Passed the GitHub Foundations exam! 🎉 #git #github #devops #certification Add Comment 1 min read Microservices Design Patterns: Navigating Challenges in Modern Architecture🚀 Lorenzo Bradanini Lorenzo Bradanini Lorenzo Bradanini Follow for CortexFlow Nov 5 Microservices Design Patterns: Navigating Challenges in Modern Architecture🚀 #git #github #architecture #software 16 reactions 6 comments 10 min read Level Up Your Dev Workflow: Branch-Specific Data Volumes with Docker Compose Saif Mahmud Saif Mahmud Saif Mahmud Follow Nov 4 Level Up Your Dev Workflow: Branch-Specific Data Volumes with Docker Compose #tipstricks #docker #git #development Add C*s Why We Don’t Deploy on Fridays 🐧🚫 🛑 8 comments Do You Still Use Git in the Terminal? 320 comments Stop using Git for Everything 3 comments Git commit message 💬 19 comments List of git software management platform 13 comments Is git the be all and end all of version control? 53 comments What is your favourite Git command? 98 comments 15 Essential Tools for Mastering Git Version Control in 2024 New Vote: What do you prefer for parallel stories development? New branch OR New forked repo 7 comments I'm leaving Github 23 * 20 Git Command-Line * Using Git as Your Personal To-Do List A step-by-step guide to splitting commits using Git rebase How to remove a leaked .env file from GitHub permanently... GitHub Foundations certification is now free!💲 Understanding Version Control: A Beginner’s Guide to Git and GitHub Git push: fatal: the remote end hung up unexpectedly Why I Bash Git (And Why You Should Too) Git rebase exec to validate every commit Git Revert: A Safe Way to Remove Faulty Commits Git Cheat Sheet for Hacktoberfest Git Gud: Learning Git to survive your first month 🚀 Mastering GitHub Actions for DevOps Engineers: A Complete Guide from Beginner to Advanced Do You Still Use Git in the Terminal? Unlisted GitHub Repositories Understanding Git's -m and -am Options: Simplifying Your Commit Workflow Automate Your Git Commit Messages with ChatGPT Switch Branches in Git Without Losing Your Work Fixing File Renaming Issues in Git: Handling Case Sensitivity and core.ignorecase Style guide to write git history recently queried Git Revert File Git Tag Git Revert Pushed Commit Git Reset --Hard git push origin master git reset soft Git Delete Local Branch Git Merge Git Revert Merge Git Bash Commands git stash specific files Git Stash Pop List of Git Commands GitHub Desktop Linux Git Checkout Tag Git Trees Git Prune Local Branches Basic Git Command*nsor Neon * ",
    "url": "https://dev.to/t/git"
  },
  {
    "body": "* GitHub Follow Hide \"Where the world builds software\" Create Post tag moderators 10501 Posts Published Older #github *75 *. Automate DevOps Workflows with GitHub Actions Trix Cyrus Trix Cyrus Trix Cyrus Follow Nov 9 Automate DevOps Workflows with GitHub Actions #github #devops #automation #python 6 *d How to commit Waradu Waradu Waradu Follow Nov 9 How to commit #github #commit 5 * How to Set Up GitHub with SSH Keys on Windows 10 or 11 Adnan al-emran ontor Adnan al-emran ontor Adnan al-emran ontor Follow Nov 8 How to Set Up GitHub with SSH Keys on Windows 10 or 11 #webdev #git #ssh #github Add Comment 2 min read Latest GitHub FAQ Collections by 0x3d.site 0x3d Site 0x3d Site 0x3d Site Follow Nov 8 Latest GitHub FAQ Collections by 0x3d.site #resources #github #opensource #productivity 13 *d Supercharging GitHub Project Management: Building an Intelligent Issue Bot with Cross-Namespace Configuration Support * Abiola Oludotun Follow Nov 8 Supercharging GitHub Project Management: Building an Intelligent Issue Bot with Cross-Namespace Configuration Support #devops #github #aiops #* My Journey from Clueless to ‘Hey, It’s on the VS Code Marketplace!’ Lelin Padhan Lelin Padhan Lelin Padhan Follow Nov 6 My Journey from Clueless to ‘Hey, It’s on the VS Code Marketplace!’ #showdev #beginners #github #vscode Add Comment 4 min read Deploy a bento to GitHub Pages K Om Senapati K Om Senapati K Om Senapati Follow Nov 9 Deploy a bento to GitHub Pages #github #javascript #portfolio #webdev 25 reactions 5 comments 2 min read 🚀 How to Generate and Add SSH Keys to GitHub or Bitbucket (MacOS Guide) Roshan Kr Soni Roshan Kr Soni Roshan Kr Soni Follow Nov 6 🚀 How to Generate and Add SSH Keys to GitHub or Bitbucket (MacOS Guide) #github #git #bitbucket #ssh Add Comment 3 min read I used GitHub as a CMS potyoma potyoma potyoma Follow Nov 7 I used GitHub as a CMS #remix #react #github #redis Add Comment 4 min read Using SSH to Connect Local Git to Remote Repositories Bryan Lumbantobing Bryan Lumbantobing Bryan Lumbantobing Follow Nov 9 Using SSH to Connect Local Git to Remote Repositories #ssh #github #git #security 5 * How to Deploy a Static Website on GitHub Pages: A Step-by-Step Guide MrDPrasad MrDPrasad MrDPrasad Follow Nov 5 How to Deploy a Static Website on GitHub Pages: A Step-by-Step Guide #webdev #github #tutorial #* 3 min read * * Nov 8 * #webdev #devops #node #github 1 comment 6 min read * * Cleo Buenaventura Follow Nov 3 * #opensource #git #github #hacktoberfest Add Comment 3 min read It's easy to dev blog Jacob Hummer Jacob Hummer Jacob Hummer Follow Nov 2 It's easy to dev blog #github #jekyll #* Contri.Buzz - Celebrate your open source contributors Hemanth M Hemanth M Hemanth M Follow Nov 1 Contri.Buzz - Celebrate your open source contributors #opensource #github #community Add Comment 1 min read A bit about OSS Licenses using LEGO analogy Henrique Cavarsan Henrique Cavarsan Henrique Cavarsan Follow Nov 1 A bit about OSS Licenses using LEGO analogy #opensource #programming #devops #github Add Comment 10 min read Testing the startup time for your Fire OS app Moses Roth Moses Roth Moses Roth Follow for Amazon Appstore Developers Oct 31 Testing the startup time for your Fire OS app #testing #firetv #performance #github Add Comment 3 min read Leveraging your InterSystems Login Account to Up your Technical Game InterSystems Developer InterSystems Developer InterSystems Developer Follow for InterSystems Oct 31 Leveraging your InterSystems Login Account to Up your Technical Game #cloud #github #documentation #programming Add Comment 13 min read Créer une Radio en Ligne avec l'API Radio Browser Guillaume Sere Guillaume Sere Guillaume Sere Follow Oct 31 Créer une Radio en Ligne avec l'API Radio Browser #javascript #react #api #github * Git with Effective Code Management and Branch Merging * Aditya Pratap Bhuyan Follow Oct 31 Mastering Git with Effective Code Management and Branch Merging #github #branching #merging #code *ng \"working-directory\" in GitHub Actions * Oct 30 Understanding \"working-directory\" in GitHub Actions #webdev #github #devops #docker 4 *d Wednesday Links - Edition 2024-10-30 🎃 Christopher Kocel Christopher Kocel Christopher Kocel Follow Oct 30 Wednesday Links - Edition 2024-10-30 🎃 #java #jvm #otlp #github Add Comment 1 min read Push Your Local Code To Remote Repository Nikhilesh Mauje Nikhilesh Mauje Nikhilesh Mauje Follow Oct 29 Push Your Local Code To Remote Repository #git #github #commands #* How to create an App service application and hosting an app on it Afeez Adeyemo Afeez Adeyemo Afeez Adeyemo Follow Oct 28 How to create an App service application and hosting an app on it #tutorial #github #azure #cloudcomputing Add Comment 5 min read Release Radar · October 2024: Major updates from the open source community Michelle Duke Michelle Duke Michelle Duke Follow Nov 1 Release Radar · October 2024: Major updates from the open source community #news #github #community #* 5 min read Hacktoberfest Recap * * Oct 28 Hacktoberfest Recap #hacktoberfest #github #* Guida all'Uso di Git e GitHub per Principianti | Getting Started with Git and GitHub: A Beginner's Guide Roberto Celano Roberto Celano Roberto Celano Follow Oct 28 Guida all'Uso di Git e GitHub per Principianti | Getting Started with Git and GitHub: A Beginner's Guide #github #git #tutorial #webdev *st week 4 * * Oct 27 Hacktoberfest week 4 #hacktoberfest #opensource #github *st week 3 * * Oct 27 Hacktoberfest week 3 #hacktoberfest #github #* Automate Update Your Changelog with GitHub Actions * Nasrul Hazim Bin Mohamad Follow Nov 1 Automate Update Your Changelog with GitHub Actions #github #cicd 2 * 🛠️ How to Create an Awesome GitHub Profile Using Markdown MD MAHBUB UDDIN MD MAHBUB UDDIN MD MAHBUB UDDIN Follow Oct 27 🛠️ How to Create an Awesome GitHub Profile Using Markdown #github #markdown #programming #productivity Add Comment 5 min read 🛠️ How to Create an Awesome GitHub Profile Using Markdown MD MAHBUB UDDIN MD MAHBUB UDDIN MD MAHBUB UDDIN Follow Oct 27 🛠️ How to Create an Awesome GitHub Profile Using Markdown #github #markdown #programming #productivity Add Comment 5 min read Stop Creating Repos To Share Your Code Snippets - Use GitHub Gists Instead Meqdad Darwish Meqdad Darwish Meqdad Darwish Follow Nov 8 Stop Creating Repos To Share Your Code Snippets - Use GitHub Gists Instead #github #code #codesnippet #git 12 reactions 7 comments 3 min read Hacktoberfest 2024 - Part 4 * Cleo Buenaventura Follow Oct 26 Hacktoberfest 2024 - Part 4 #opensource #github #hacktoberfest #typescript Add Comment 2 min read Khelo: From Streets to Stadiums - A Developer's Guide 🏏 Mayank Variya Mayank Variya Mayank Variya Follow Oct 24 Khelo: From Streets to Stadiums - A Developer's Guide 🏏 #opensource #flutter #github #firebase 12 *d 2024's Git Survey is Live! Bruno Brito Bruno Brito Bruno Brito Follow for Tower Oct 24 2024's Git Survey is Live! #git #github #gitlab #* GitHub CLI Extension for Conventional Commits Rob van der Leek Rob van der Leek Rob van der Leek Follow Oct 25 GitHub CLI Extension for Conventional Commits #gh #git #github 7 reactions * Code Review in GitHub: Common Mistakes to Avoid GoCodeo GoCodeo GoCodeo Follow Oct 24 Mastering Code Review in GitHub: Common Mistakes to Avoid #code #codereview #github #unittest Add Comment 1 min read 📈 Making Your GitHub Repository Stand Out With 12 Easy Steps! Kosa Matyas Kosa Matyas Kosa Matyas Follow Nov 6 📈 Making Your GitHub Repository Stand Out With 12 Easy Steps! #github #beginners #git #* 3 min read My Journey from Clueless to ‘Hey, It’s on the VS Code Marketplace!’ Lelin Padhan Lelin Padhan Lelin Padhan Follow Nov 6 My Journey from Clueless to ‘Hey, It’s on the VS Code Marketplace!’ #showdev #beginners #vscode #github 2 * Building Real-World Applications with the GitHub API: Unlocking the Power of Automation and Data Dilshad 👨‍💻 Dilshad 👨‍💻 Dilshad 👨‍💻 Follow Oct 28 Building Real-World Applications with the GitHub API: Unlocking the Power of Automation and Data #github #webdev #javascript #api Add Comment 3 min read Level Up Your GitHub Game: Tips & Tricks for 2024 Domination by ShadBalti Dilshad 👨‍💻 Dilshad 👨‍💻 Dilshad 👨‍💻 Follow Oct 28 Level Up Your GitHub Game: Tips & Tricks for 2024 Domination by ShadBalti #github #githubactions #productivity #* Day 12/90: Git & GitHub Fundamentals for DevOps Engineers 🌿 #90DaysOfDevOps Kanav Gathe Kanav Gathe Kanav Gathe Follow Oct 23 Day 12/90: Git & GitHub Fundamentals for DevOps Engineers 🌿 #90DaysOfDevOps #git #devops #github Add Comment 2 min read kodiak.toml in tRPC source code * Oct 23 kodiak.toml in tRPC source code #javascript #kodiak #github #trpc Add Comment 2 min read Project 3:Nintendo Division. Tetris Game CyberFriend CyberFriend CyberFriend Follow Nov 5 Project 3:Nintendo Division. Tetris Game #tetris #nintendodivision #java #github 1 reaction *st contribution to ZTM-Quest Kannav Sethi Kannav Sethi Kannav Sethi Follow Oct 23 Hacktoberfest contribution to ZTM-Quest #opensource #hacktoberfest #github #javascript Add Comment 4 * Using Git Stash Md Abu Musa Md Abu Musa Md Abu Musa Follow Oct 22 A Comprehensive Guide to Using Git Stash #git #github #gitstash #github* What is BinaryOptionsTools ? vigo walker vigo walker vigo walker Follow Oct 22 What is BinaryOptionsTools ? #python #github #* 1 min read Cómo usar varias SSH keys para diferentes repositorios de GitHub (o GitLab) José María CL José María CL José María CL Follow Nov 4 Cómo usar varias SSH keys para diferentes repositorios de GitHub (o GitLab) #git #github #setup #tutorial 11 * SSH kalitini Github.com'ga qo'shish Muhammad Khodjaev Muhammad Khodjaev Muhammad Khodjaev Follow Oct 21 SSH kalitini Github.com'ga qo'shish #ssh #github Add Comment 2 min read Linux on Termux jeff dennis jeff dennis jeff dennis Follow Oct 21 Linux on Termux #productivity #learning #security #github Add Comment 1 min read Download package from GitHub release Tomoyuki KOYAMA Tomoyuki KOYAMA Tomoyuki KOYAMA Follow Oct 21 Download package from GitHub release #github #github* PowerShell Automation: Execute Batch GitHub CLI Commands uyriq uyriq uyriq Follow Nov 2 PowerShell Automation: Execute Batch GitHub CLI Commands #pwsh #powershell #github #cli * Automating PR Descriptions with AI Oleg Petrov Oleg Petrov Oleg Petrov Follow Oct 19 Automating PR Descriptions with AI #automation #chatgpt #github #* Devlog: Hacktoberfest 2024 (3/4) Peter Wan Peter Wan Peter Wan Follow Oct 18 Devlog: Hacktoberfest 2024 (3/4) #hacktoberfest #github #* 🚀 Introducing My Free Markdown to PDF Converter – Built Just for You! 🚀 Michael Michael Michael Follow Oct 22 🚀 Introducing My Free Markdown to PDF Converter – Built Just for You! 🚀 #discuss #webdev #programming #github 1 comment 2 min read How to get a Golden Pair Extraordinaire badge on GitHub within seconds? Jason Lee Jason Lee Jason Lee Follow Oct 18 How to get a Golden Pair Extraordinaire badge on GitHub within seconds? #github #developer #development #goldenpair Add Comment 1 min read How To Monetize Your Private GitHub Repositories Avraj Avraj Avraj Follow Oct 18 How To Monetize Your Private GitHub Repositories #howto #saas #webdev #github 2 *d Learn from Stripe, Microsoft, Amazon Leader: How Tech Leaders Streamline Development for Rapid Growth Alin Dobra Alin Dobra Alin Dobra Follow Oct 17 Learn from Stripe, Microsoft, Amazon Leader: How Tech Leaders Streamline Development for Rapid Growth #github #devops #aws #cto Add Comment 1 min read Share GitHub Repositories Instead of Instagram Reels Adarsh Adarsh Adarsh Follow Oct 17 Share GitHub Repositories Instead of Instagram Reels #github #opensource #python #* Containerizing GitHub Runner lykins lykins lykins Follow Nov 10 (5 hours ago) Containerizing GitHub Runner #nomad #github #github* Tips on Improving an Open Source Project Peter Wan Peter Wan Peter Wan Follow Oct 30 Tips on Improving an Open Source Project #opensource #github #documentation Add Comment 9 min read From Regex to Ruff: Lessons Learned in Contributing to Magika * Oct 29 From Regex to Ruff: Lessons Learned in Contributing to Magika #opensource #coding #github Add C*s Why We Don’t Deploy on Fridays 🐧🚫 🛑 8 comments Where do you store GitHub README.md assets? 14 comments What made you look at a project and submit a PR? Or Not? 7 comments What is a repository that you think every developer should know about? 4 comments How to check if the folder is Git repo and in sync? 5 comments What's your typical process for reviewing a pull request in GitHub? 27 comments 🚀 Introducing My Free Markdown to PDF Converter – Built Just for You! 🚀 1 comment Someone copied my code on Github and claimed it to be his own project. 46 comments What is your GitHub profile? Share it here! 92 comments GitHub is Celebrating Halloween 5 * 16 Open Source Alternatives to Replace Popular SaaS Software & Apps 👨‍💻🔥 20 Git Command-Line * Using Git as Your Personal To-Do List 🧑‍💻🔧 Build a homelab with these apps and develop ANYTHING! 🤩 ⚡ 🚀 Top 10 Trending GitHub Repositories, November 2024 🔥 ⚡ 🚀 Top 10 Trending GitHub Repositories, October 2024 🔥 Release Radar · September 2024: Major updates from the open source community How to remove a leaked .env file from GitHub permanently... Deploying to Azure with Terraform and GitHub Actions GitHub Foundations certification is now free!💲 ⚡⚡ 🚀 Top 10 Trending GitHub Repositories, October / 21 2024 🔥 ⚡ 🚀 Top 10 Trending GitHub Repositories, October 28, 2024 🔥 Understanding Version Control: A Beginner’s Guide to Git and GitHub Top Hacktoberfest Projects to Contribute to in 2024 Building a Career through Open Source Contributions Creating a GitHub Copilot Extension: A Step-by-Step Guide Top open-source repos/projects to contribute (Hacktoberfest Edition 🎃) Git Revert: A Safe Way to Remove Faulty Commits Provide context to GitHub Copilot Chat Github Spark: The AI Tool That Creates Apps with Spoken Language recently queried Git Revert File Readme Template git push origin master Git Bash Commands List of Git Commands GitHub Desktop Linux * * ",
    "url": "https://dev.to/t/github"
  },
  {
    "body": "* Google Cloud Follow Hide Google Cloud is a suite of Cloud Computing Services for computing, storage, networking, big data and analytics, and AI/ML. * Articles should have a primary focus on Google Cloud. tag moderators 1064 Posts Published Older #googlecloud posts 1 2 3 4 5 6 7 8 9 *. * * Glossary Google Cloud ValerianaGit💙 ValerianaGit💙 ValerianaGit💙 Follow Nov 4 Glossary Google Cloud #cloud #googlecloud #ai Add Comment 4 min read ☁️ Google Cloud Preparation for Cloud Digital Leader Exam Classes and Exam Tips ValerianaGit💙 ValerianaGit💙 ValerianaGit💙 Follow Nov 4 ☁️ Google Cloud Preparation for Cloud Digital Leader Exam Classes and Exam Tips #cloud #googlecloud #clouddigitalleader #ai Add Comment 6 min read 🔥 সহজ অথেনটিকেশন সমাধান: আপনার অ্যাপের জন্য ফায়ারবেজ অথেন্টিকেশন কেন ব্যবহার করবেন? 🔒 Md Nazmus Sakib Md Nazmus Sakib Md Nazmus Sakib Follow Nov 9 🔥 সহজ অথেনটিকেশন সমাধান: আপনার অ্যাপের জন্য ফায়ারবেজ অথেন্টিকেশন কেন ব্যবহার করবেন? 🔒 #webdev #firebase #googlecloud #javascript * The Hidden Costs of Cloud Provider \"Free\" Credits Pavel from TurboCloud Pavel from TurboCloud Pavel from TurboCloud Follow Nov 8 The Hidden Costs of Cloud Provider \"Free\" Credits #aws #cloud #webdev #googlecloud 5 * Roadmap to Ace the SAP SAC Certification Exam Anna Disuza Anna Disuza Anna Disuza Follow Oct 26 Roadmap to Ace the SAP SAC Certification Exam #beginners #sap #analytics #googlecloud Add Comment 4 min read Professional Google Cloud Architect exam Documentation Resources ValerianaGit💙 ValerianaGit💙 ValerianaGit💙 Follow Oct 22 Professional Google Cloud Architect exam Documentation Resources #googlecloud #cloudpractitioner #architectur*o Set Up a GCP VM and Install Apache2: Step-by-Step Guide for Beginners S3CloudHub S3CloudHub S3CloudHub Follow Oct 22 How to Set Up a GCP VM and Install Apache2: Step-by-Step Guide for Beginners #googlecloud #apache2 #virtualmachine Add Comment 3 min read Cloud Migration Strategies: A Comprehensive Guide to Moving Your Business to the Cloud Rizwan Shaikh Rizwan Shaikh Rizwan Shaikh Follow Oct 22 Cloud Migration Strategies: A Comprehensive Guide to Moving Your Business to the Cloud #cloudcomputing #aws #googlecloud #azure Add Comment 5 min read Optimizing database performance by migrating Images to GCS Siddhant Khare Siddhant Khare Siddhant Khare Follow Oct 20 Optimizing database performance by migrating Images to GCS #googlecloud #architecture #performance #kubernetes 7 *d [Market Research] Would you find a Terraform visualization tool like this useful? Feedback needed! Andrey Kogan Andrey Kogan Andrey Kogan Follow Oct 18 [Market Research] Would you find a Terraform visualization tool like this useful? Feedback needed! #terraform #devops #cloud #googlecloud Add Comment 2 min read Google Log-Based Metrics Shannon Lal Shannon Lal Shannon Lal Follow Oct 17 Google Log-Based Metrics #googlecloud #metrics #openai #performance * Navigating the Hierarchy of Google Cloud Certifications: From Associate Cloud Engineer to Professional Cloud Architect shahTanya shahTanya shahTanya Follow Oct 17 Navigating the Hierarchy of Google Cloud Certifications: From Associate Cloud Engineer to Professional Cloud Architect #googlecloud #cloudcertifications #devops #careerd* Big Data Storage Trends and Insights Mainul Hasan Mainul Hasan Mainul Hasan Follow Oct 16 Big Data Storage Trends and Insights #cloudcomputing #cloudstorage #bigdata #googlecloud Add Comment 7 min read Cloud Digital Leader exam Preparation MyExamCloud MyExamCloud MyExamCloud Follow Oct 16 Cloud Digital Leader exam Preparation #googlecloud #software #programming #cloudcomputing * A Beginner's Guide to Text Embedding Using BERT with MediaPipe Sajjad Rahman Sajjad Rahman Sajjad Rahman Follow Oct 24 A Beginner's Guide to Text Embedding Using BERT with MediaPipe #machinelearning #googlecloud #nlp #learning 4 *d INTRODUCTION TO PYTHON FOR DATA ANALYTICS Dion Nekesa Dion Nekesa Dion Nekesa Follow Oct 7 INTRODUCTION TO PYTHON FOR DATA ANALYTICS #datascience #analytics #python #googlecloud Add Comment 2 min read Google identity Platform Mohamed Rasvi Mohamed Rasvi Mohamed Rasvi Follow Oct 4 Google identity Platform #googlecloud #identity #oauth #devops Add Comment 3 min read An Introduction to Google Cloud Platform (GCP) and Its Services Vivesh Vivesh Vivesh Follow Oct 27 An Introduction to Google Cloud Platform (GCP) and Its Services #googlecloud #saas #basic #devops 2 * Effortlessly Deploy Your GCP Cloud Run App Using Terraform Ricards Taujenis Ricards Taujenis Ricards Taujenis Follow Nov 1 Effortlessly Deploy Your GCP Cloud Run App Using Terraform #go #terraform #devops #googlecloud Add Comment 5 min read Provide Shared File Storage For The Company Offices Blessing Blessing Blessing Follow Sep 27 Provide Shared File Storage For The Company Offices #git #aws #cloud #googlecloud Add Comment 3 min read Embarking on the Big Query Quest: Exploring the Depths of its Inner Workings Matheus Tramontini Matheus Tramontini Matheus Tramontini Follow Sep 24 Embarking on the Big Query Quest: Exploring the Depths of its Inner Workings #bigquery #googlecloud #bigdata #learning Add Comment 5 min read Creating a global production ready marketplace with Medusa JS Slaknoah Slaknoah Slaknoah Follow Oct 25 Creating a global production ready marketplace with Medusa JS #medusa #node #postgres #googlecloud 7 react*ding an API with Go, PostgreSQL, Google Cloud and CockroachDB Ray Mathew Ray Mathew Ray Mathew Follow Oct 23 Building an API with Go, PostgreSQL, Google Cloud and CockroachDB #go #googlecloud #cockroachdb #postgres 1 reaction Add Comment 13 min read 10 GCP Security Best Practices for Busy DevOps yayabobi yayabobi yayabobi Follow Sep 19 10 GCP Security Best Practices for Busy DevOps #devops #cloud #googlecloud #cybersecurity Add Comment 7 min read GCP Tech Stack for a Serverless NextJS Web App * Charlotte Towell Follow Oct 23 GCP Tech Stack for a Serverless NextJS Web App #nextjs #googlecloud #webdev #serverless * LifeCycle vs Retention Policy Harshit Sharma Harshit Sharma Harshit Sharma Follow Sep 18 LifeCycle vs Retention Policy #gcs #googlecloud #devops #* Hosting apps in the cloud with Google App Engine in 2024 Wesley Chun (@wescpy) Wesley Chun (@wescpy) Wesley Chun (@wescpy) Follow Oct 22 Hosting apps in the cloud with Google App Engine in 2024 #python #webdev #googlecloud #serverless 1 reaction 1 comment 20 min read Como Realizar a Integração com APIs do Google em Seu Projeto * L* 20 Como Realizar a Integração com APIs do Google em Seu Projeto #google #googlecloud #java*t 3 min read How to pass an Array of Structs in Bigquery's parameterized queries matthieucham matthieucham matthieucham Follow for Stack Labs Oct 15 How to pass an Array of Structs in Bigquery's parameterized queries #bigquery #python #googlecloud #sql 9 *d Why You Need Distributed Computing for Real-World Machine Learning Swapnil Swapnil Swapnil Follow Sep 9 Why You Need Distributed Computing for Real-World Machine Learning #machinelearning #ai #python #googlecloud Add Comment 5 min read Recomendaciones si vas a trabajar con BigQuery Ronny Medina Ronny Medina Ronny Medina Follow Sep 9 Recomendaciones si vas a trabajar con BigQuery #googlecloud #* Working with Gigantic Google BigQuery Partitioned Tables in DBT Stephen Stephen Stephen Follow Sep 20 Working with Gigantic Google BigQuery Partitioned Tables in DBT #bigquery #dbt #dataengineering #googlecloud * Google’s Arcade Program - A Gateway to Creative Coding, Dev-ops, Sec Ops, and More. Ogunkola Adeola Ogunkola Adeola Ogunkola Adeola Follow Oct 9 Google’s Arcade Program - A Gateway to Creative Coding, Dev-ops, Sec Ops, and More. #googlecloud #arcade #bigquery #cloudcomputing 1 comment 3 min read SSH to Google Compute Engine * chauhoangminhnguyen Follow Sep 23 SSH to Google Compute Engine #googlecloud #virtualmachine #beginners #gcp 7 *d Simple docker deploy on gcp ADITYA OKKE SUGIARSO ADITYA OKKE SUGIARSO ADITYA OKKE SUGIARSO Follow Sep 22 Simple docker deploy on gcp #googlecloud #docker #go #microservices Add Comment 5 min read Leveraging Cloud Services for Scalable App Development Abdul Rafay Khan Abdul Rafay Khan Abdul Rafay Khan Follow Sep 2 Leveraging Cloud Services for Scalable App Development #googlecloud #azure #aws #devop*o Monitor Host Metrics with OpenTelemetry observIQ observIQ observIQ Follow Aug 28 How to Monitor Host Metrics with OpenTelemetry #devops #googlecloud #cloud #linux Add Comment 3 min read Write to Google Sheets from a local script via gcloud CLI authentication Adam Ross Adam Ross Adam Ross Follow for Google Cloud Sep 25 Write to Google Sheets from a local script via gcloud CLI authentication #productivity #automation #javascript #googlecloud 24 reactions 6 comments 4 min read New Article: Unleash the Power of Embedding Models! 🚀 Kate Pastukhova Kate Pastukhova Kate Pastukhova Follow Aug 28 New Article: Unleash the Power of Embedding Models! 🚀 #ai #vectordatabase #googlecloud #openai Add Comment 1 min read AI Assistant for Company-Wide Software Best Practices with Gemini, LlamaIndex & RAG Muhammad Ahsan Ayaz Muhammad Ahsan Ayaz Muhammad Ahsan Ayaz Follow Sep 30 AI Assistant for Company-Wide Software Best Practices with Gemini, LlamaIndex & RAG #rag #ai #googlecloud #webdev 5 react*ding a valid JWT Claims Set Jennifer Davis Jennifer Davis Jennifer Davis Follow Sep 29 Building a valid JWT Claims Set #python #learning #googlecloud 3 react*te a Windows Virtual Machine in the Azure portal. Step-by-Step Guide Romanus Onyekwere Romanus Onyekwere Romanus Onyekwere Follow Sep 29 Create a Windows Virtual Machine in the Azure portal. Step-by-Step Guide #virtualmachine #azure #windows #googlecloud * How to add Google ReCAPTCHA in your React website Kurt De Austria Kurt De Austria Kurt De Austria Follow Sep 28 How to add Google ReCAPTCHA in your React website #webdev #googlecloud #react #express * Cloud provider comparison 2024: VM Performance / Price Dimitrios Kechagias Dimitrios Kechagias Dimitrios Kechagias Follow Sep 26 Cloud provider comparison 2024: VM Performance / Price #aws #googlecloud #cloud #perl 11 reactions 1 comment 30 min read How to Create a High Availability Storage Account for a Public Website. oluoma stella onyeukwa oluoma stella onyeukwa oluoma stella onyeukwa Follow Sep 26 How to Create a High Availability Storage Account for a Public Website. #microsoft #azure #cloudcomputing #googlecloud 8 * From legacy to cloud serverless - Part 4 David WOGLO David WOGLO David WOGLO Follow Sep 4 From legacy to cloud serverless - Part 4 #googlecloud #security #containers #devops Add Comment 7 min read 'List<Object?>' is not a subtype of type 'PigeonUserDetails?' ADEKOLA Abdwahab ADEKOLA Abdwahab ADEKOLA Abdwahab Follow Sep 23 'List<Object?>' is not a subtype of type 'PigeonUserDetails?' #firebase #flutter #googlecloud 11 * Implementing Email Services with Nest.js and Google Cloud hayata-yamamoto hayata-yamamoto hayata-yamamoto Follow Oct 7 Implementing Email Services with Nest.js and Google Cloud #nestjs #typescript #googlecloud #sendgrid * Simplify development of AI-powered applications with LangChain Olivier Bourgeois Olivier Bourgeois Olivier Bourgeois Follow for Google Cloud Oct 1 Simplify development of AI-powered applications with LangChain #kubernetes #ai #langchain #googlecloud 7 * Provide Storage For The IT Department Testing And Training. Blessing Blessing Blessing Follow Sep 21 Provide Storage For The IT Department Testing And Training. #googlecloud #beginners #cloud 5 * Tight on Cloud Computing Budget? This Guide Will Help You Optimize Your Spending! Lara Lee Lara Lee Lara Lee Follow Sep 19 Tight on Cloud Computing Budget? This Guide Will Help You Optimize Your Spending! #cloudcomputing #cloudservice #aws #googlecloud * Nên lựa chọn thi Offline hay Online đối với các chứng chỉ cloud quốc tế Huy Dang Huy Dang Huy Dang Follow Aug 16 Nên lựa chọn thi Offline hay Online đối với các chứng chỉ cloud quốc tế #aws #googlecloud #azure #certification Add Comment 3 min read what is virtualization in cloud Blessing Blessing Blessing Follow Sep 18 what is virtualization in cloud #beginners #devops #googlecloud 6 * Intro to Ray on GKE Kaslin Fields Kaslin Fields Kaslin Fields Follow for Google Cloud Sep 12 Intro to Ray on GKE #ai #kubernetes #googlecloud #aiops 23 * Github CI/CD with Google Cloud Build * chauhoangminhnguyen Follow Sep 18 Github CI/CD with Google Cloud Build #github #cicd #googlecloud #beginners 11 * Enhancing Business Efficiency with Cloud Migration Solutions Lark Mullins Lark Mullins Lark Mullins Follow for Craftwork Aug 13 Enhancing Business Efficiency with Cloud Migration Solutions #cloud #cloudcomputing #aws #googlecloud Add Comment 4 min read Dự án cuối cùng - Final Project Huy Dang Huy Dang Huy Dang Follow Sep 16 Dự án cuối cùng - Final Project #googlecloud #cloudflare #staticwebsite #cloud 11 *d Cloud Computing: 4 Step Guide to Navigate the Cloud in 2024 Mayank Agarwal Mayank Agarwal Mayank Agarwal Follow Sep 15 Cloud Computing: 4 Step Guide to Navigate the Cloud in 2024 #cloudcomputing #aws #azure #googlecloud Add Comment 4 min read AI Productivity Tips 1 - SQL Companion Bot with Gemini 1.5 Pro Çalgan Aygün Çalgan Aygün Çalgan Aygün Follow Aug 25 AI Productivity Tips 1 - SQL Companion Bot with Gemini 1.5 Pro #sql #gemini #productivity #googlecloud Add Comment 2 min read Improve container build time by 70% w/ better caching David Haley David Haley David Haley Follow Sep 26 Improve container build time by 70% w/ better caching #docker #tensorflow #googlecloud #cicd Add C*s How to connect or integration Odoo with Tableau Desktop? New Adventures in Scale: Google is Tech’s Lewis and Clark 2 comments Generative AI: Who Is All This For? New What do you think about Project IDX? (Google's AI powered, Cloud Based IDE) 3 comments How to use Google photos library API 2 comments Tell me you're DevOPS Engineer without telling me you're a DevOPS Engineer.. New How do you cloud? 1 comment What are some of the different ways to use cloud credits in GCP? * Cloud provider comparison 2024: VM Performance / Price Write to Google Sheets from a local script via gcloud CLI authentication How to pass an Array of Structs in Bigquery's parameterized queries Creating a global production ready marketplace with Medusa JS Deploy NodeJS Typescript to Google App Engine Efficient processing of Gzip-compressed files in Google Cloud Storage Deploy React Application to Google Kubernetes Engine 🗃️ Lessons Learned from Migrating Huge BigQuery Datasets Across Regions Simplify development of AI-powered applications with LangChain Intro to Ray on GKE Github CI/CD with Google Cloud Build Kubernetes Pod Cheatsheet Implementing Email Services with Nest.js and Google Cloud A Beginner's Guide to Text Embedding Using BERT with MediaPipe 🔑 APIGEE 101: onboarding & authentication The Hidden Costs of Cloud Provider \"Free\" Credits Exploring Google Cloud (GCP): Day 38 of 50 days DevOps Tools Series Simple docker deploy on gcp Using Google Cloud Run to Deploy Docker Image Building an API with Go, PostgreSQL, Google Cloud and CockroachDB * * ",
    "url": "https://dev.to/t/googlecloud"
  },
  {
    "body": "* GraphQL Follow Hide GraphQL is a query language and execution engine for client‐server applications Create Post about #graphql GraphQL Specification Introduction to GraphQL tag moderators 3267 Posts Published Older #graphql posts 1 2 3 4 5 6 7 8 9 *. * * 10 * #javascr*mment 4 min read How to write *ment 9 min read *) Mehedi Hasan Mehedi Hasan Mehedi Hasan Follow Nov 4 *) #typescript #node #express #* Spring Boot and GraphQL: Creating a GraphQL API Igo*lli Follow Oct 31 Spring Boot and GraphQL: Creating a GraphQL API #spring #api #graphql Add Comment 3 min read Unlocking Django: Integrate GraphQL for Faster, Flexibly Scalable APIs SnapNews SnapNews SnapNews Follow Oct 29 Unlocking Django: Integrate GraphQL for Faster, Flexibly Scalable APIs #django #graphql #apidevelopment #webdev Add Comment 3 min read Wabe - Modern TypeScript backend as a service mr palixir mr palixir mr palixir Follow Oct 18 Wabe - Modern TypeScript backend as a service #ty #graphql #mongodb #backend Add Comment 1 min read Automating Authentication in Apollo Sandbox Explorer with Pre-request Scripts Toan Huynh Toan Huynh Toan Huynh Follow Oct 17 Automating Authentication in Apollo Sandbox Explorer with Pre-request Scripts #graphql #javascript #webdev #tutorial * Enhancing React Applications with GraphQL Over REST APIs Shreyam Duttagupta Shreyam Duttagupta Shreyam Duttagupta Follow Oct 3 Enhancing React Applications with GraphQL Over REST APIs #javascript #graphql #webdev #beginners Add Comment 7 min read Building Well-Architected AWS AppSync GraphQL APIs sudokar sudokar sudokar Follow Oct 14 Building Well-Architected AWS AppSync GraphQL APIs #architecture #aws #appsync #graphql 14 * Boost Your React Development with GraphQL and Codegen Rijen Manandhar Rijen Manandhar Rijen Manandhar Follow Oct 1 Boost Your React Development with GraphQL and Codegen #graphql #react #typescript #* Surprising benefit of GraphQL for long-term maintainability Alex Alex Alex Follow Oct 30 Surprising benefit of GraphQL for long-term maintainability #webdev #graphql #testing #softwaredevelopment 8 * The Myth of GraphQL ASafaeirad ASafaeirad ASafaeirad Follow Oct 15 The Myth of GraphQL #graphql #webdev #typescript 98 reactions 23 comments 7 min read Fun with Hardcover's Book API: A quick reference Emma Goto 🍙 Emma Goto 🍙 Emma Goto 🍙 Follow Oct 26 Fun with Hardcover's Book API: A quick reference #books #graphql #javascript #webdev 3 * REST vs GraphQL: Choosing the Right API for Your Project Obinna Obinna Obinna Follow Oct 26 REST vs GraphQL: Choosing the Right API for Your Project #restapi #api #graphql #webdev * GraphQL vs. REST: Best Practices for API Development Hardik Gohil Hardik Gohil Hardik Gohil Follow Sep 21 GraphQL vs. REST: Best Practices for API Development #webdev #api #backend #graphql Add Comment 3 min read Default value for field with @include directive Shruti Pahuja Shruti Pahuja Shruti Pahuja Follow Sep 20 Default value for field with @include directive #graphql Add Comment 1 min read Announcing Pylon 2.0 with Multiple Runtime Support Nico Schett Nico Schett Nico Schett Follow Sep 18 Announcing Pylon 2.0 with Multiple Runtime Support #graphql #javascript #api Add Comment 4 min read Convert insert mutation to upsert Rogério Rodrigues de Alcântara Rogério Rodrigues de Alcântara Rogério Rodrigues de Alcântara Follow Sep 18 Convert insert mutation to upsert #hasura #* Testing GraphQL with Postman: A Detailed Guide for QA Professionals Umair QA Umair QA Umair QA Follow Sep 16 Testing GraphQL with Postman: A Detailed Guide for QA Professionals #postman #postmanapi #graphql #fauna Add Comment 1 min read 🚀 Supercharge Your Next.js App with GraphQL: Performance Hacks & Best Practices 🎯 * Oct 18 🚀 Supercharge Your Next.js App with GraphQL: Performance Hacks & Best Practices 🎯 #graphql #nextjs #* 4 min read 🌐 Unleashing GraphQL in Next.js: Effortless Data Fetching! 🚀 * Sep 14 🌐 Unleashing GraphQL in Next.js: Effortless Data Fetching! 🚀 #graphql #nextjs #webdev #* Leveraging GraphQL with Next.js for Data Fetching: Supercharge Your Frontend Hamza Nadeem Hamza Nadeem Hamza Nadeem Follow Sep 12 Leveraging GraphQL with Next.js for Data Fetching: Supercharge Your Frontend #graphql #nextjs #webdev #frontend Add Comment 3 min read refinedev - hasura (nested/multiple query_root) Lalu Arman Rozika Lalu Arman Rozika Lalu Arman Rozika Follow Sep 7 refinedev - hasura (nested/multiple query_root) #hasura #refinehackathon #* REST VS GRAPHQL Leonardo1903 Leonardo1903 Leonardo1903 Follow Oct 10 REST VS GRAPHQL #webdev #graphql #api #backend Add Comment 3 min read GraphQL vs REST: API Showdown 🤜🤛 programORdie programORdie programORdie Follow Sep 27 GraphQL vs REST: API Showdown 🤜🤛 #backend #api #graphql #performance 6 *d GraphQL: The Superhero of APIs 🦸‍♂️ Hadil Ben Abdallah Hadil Ben Abdallah Hadil Ben Abdallah Follow Oct 8 GraphQL: The Superhero of APIs 🦸‍♂️ #api #graphql #development #programming 10 * GraphQL vs REST in 2024: Which One is More Future-Proof for Full-Stack Applications? Balraj Singh Balraj Singh Balraj Singh Follow Oct 7 GraphQL vs REST in 2024: Which One is More Future-Proof for Full-Stack Applications? #webdev #graphql #restapi #fullstack 17 *d Integrating Apollo Client with React and TypeScript: A Step-by-Step Guide * Mourya Vamsi Modugula Follow Oct 7 Integrating Apollo Client with React and TypeScript: A Step-by-Step Guide #react #graphql #beginners #*t 3 min read Effortless Type-Safe GraphQL SDK Generation with GraphQL SDK Generator Siddharth Singh Siddharth Singh Siddharth Singh Follow Sep 1 Effortless Type-Safe GraphQL SDK Generation with GraphQL SDK Generator #graphql #typescript #typesafe #* Serverless Computing and GraphQL: Modern App Development balaji thadagam kandavel balaji thadagam kandavel balaji thadagam kandavel Follow Oct 1 Serverless Computing and GraphQL: Modern App Development #lambda #typescript #graphql Add Comment 3 min read React Data Fetching: Techniques for REST APIs and GraphQL Queries Md Yusuf Md Yusuf Md Yusuf Follow Sep 30 React Data Fetching: Techniques for REST APIs and GraphQL Queries #restapi #graphql #react * Interop Between Code and No-Code: Using 3D Echart to Visualize Data in Your Project Alex Alex Alex Follow for Momen Sep 29 Interop Between Code and No-Code: Using 3D Echart to Visualize Data in Your Project #webdev #graphql #tutorial #react 13 *d Trace-Based Tests with GraphQL in Action! Adnan Rahić Adnan Rahić Adnan Rahić Follow for Kubeshop Sep 10 Trace-Based Tests with GraphQL in Action! #graphql #testing #opentelemetry #monitoring * Cross-Posting to Hashnode with API * Vehbi Sinan Tunalioglu Follow Aug 21 Cross-Posting to Hashnode with API #api #hashnode #graphql * Cloud Resume Challenge pt 5: Exploring CosmoDB and Query Languages Brandon Allmark Brandon Allmark Brandon Allmark Follow Aug 15 Cloud Resume Challenge pt 5: Exploring CosmoDB and Query Languages #cloudresumechallenge #database #azure #graphql Add Comment 5 min read Leveling Up My GraphQL Skills: Real Time Subscriptions John Vester John Vester John Vester Follow Sep 18 Leveling Up My GraphQL Skills: Real Time Subscriptions #graphql #heroku #pubsub #* 8 min read The Best 10 GraphQL Clients for Developers in 2024 Wanda Wanda Wanda Follow Sep 14 The Best 10 GraphQL Clients for Developers in 2024 #graphql #tooling #developers #devops 5 *d The Guild acquires Stellate * for The Guild Sep 10 The Guild acquires Stellate #graphql #company * Rest vs GraphQL * Sep 8 Rest vs GraphQL #systemdesign #restapi #graphql #api Add Comment 3 min read GraphQL: How to Enable Arbitrary List Filtering with Sift.js. Matt Callaway Matt Callaway Matt Callaway Follow Aug 4 GraphQL: How to Enable Arbitrary List Filtering with Sift.js. #graphql #*t 5 min read GraphQL vs. REST: Choosing the Right API Strategy for your Project 🤔 Sasith Warnaka Sasith Warnaka Sasith Warnaka Follow Sep 7 GraphQL vs. REST: Choosing the Right API Strategy for your Project 🤔 #webdev #restapi #graphql #webapi * How to add E2E Tests for Nestjs graphql * Sep 7 How to add E2E Tests for Nestjs graphql #nestjs #e2etesting #unittesting #graphql 2 *d Navigating System Communication: A Comprehensive Overview Ewerson Vieira Nascimento Ewerson Vieira Nascimento Ewerson Vieira Nascimento Follow Aug 1 Navigating System Communication: A Comprehensive Overview #rest #graphql #rpc Add Comment 5 min read Unleashing the Full Potential of Neo4j and LangChain in Knowledge Graphs Rajat Rajat Rajat Follow Sep 4 Unleashing the Full Potential of Neo4j and LangChain in Knowledge Graphs #langchain #neo4j #graphql #cypher * Senior Frontend Developer (TypeScript, Next.js, GraphQL) at Truey Dave Bina Dave Bina Dave Bina Follow Sep 2 Senior Frontend Developer (TypeScript, Next.js, GraphQL) at Truey #typescript #nextjs #graphql #frontend Add Comment 1 min read Unlocking the Secrets of GraphQL: Best Practices for Clean, Efficient APIs aurangzaib aurangzaib aurangzaib Follow Jul 30 Unlocking the Secrets of GraphQL: Best Practices for Clean, Efficient APIs #graphqlbestpractices #apidevelopment #graphql #cleancode * Firebase notification(FCM) in .NET 8 with GraphQL and Rest API Aditya Sharma Aditya Sharma Aditya Sharma Follow Sep 1 Firebase notification(FCM) in .NET 8 with GraphQL and Rest API #firebase #notification #dotnet #graphql 10 * Zoom Meetings API Integration Guide Hrushi yadav Hrushi yadav Hrushi yadav Follow Aug 29 Zoom Meetings API Integration Guide #zoom #graphql #api #node * Cookies Setup in Apollo Studio for NodeJS GraphQL Servers Azza Maddouri Azza Maddouri Azza Maddouri Follow Jul 23 Cookies Setup in Apollo Studio for NodeJS GraphQL Servers #graphql #node #apollo #redis * Scalable APIs with .NET Core and GraphQL Paulo Torres Paulo Torres Paulo Torres Follow Aug 26 Building Scalable APIs with .NET Core and GraphQL #dotnet #graphql #api #web 2 * Building Advanced APIs with GraphQL Suhas Palani Suhas Palani Suhas Palani Follow Aug 14 Building Advanced APIs with GraphQL #graphql #api #react #node 4 react*ding A Simple Graph Query Engine praveenr praveenr praveenr Follow Aug 21 Building A Simple Graph Query Engine #graphql #python #nlp #chatgpt Add Comment 7 min read GraphQL Suhas Palani Suhas Palani Suhas Palani Follow Aug 10 GraphQL #graphql #javascript #api #apolloserver * Introdução ao GraphQL: Um Guia Simplificado Gervásio Artur Gervásio Artur Gervásio Artur Follow Aug 20 Introdução ao GraphQL: Um Guia Simplificado #graphql #springboot #api #cleancode * Load Data Into Neo4j praveenr praveenr praveenr Follow Aug 18 Load Data Into Neo4j #graphql #python #nlp #chatgpt Add Comment 6 min read Installing Neo4j In Ubuntu praveenr praveenr praveenr Follow Aug 16 Installing Neo4j In Ubuntu #graphql #python #nlp #chatgpt Add Comment 2 min read How to Select the Best API Management Platform for Your GraphQL Needs Sato Kenta Sato Kenta Sato Kenta Follow Jul 11 How to Select the Best API Management Platform for Your GraphQL Needs #graphql #api #postman *ically Generated GraphQL Middleware Service Niek de Wit Niek de Wit Niek de Wit Follow Aug 14 Automatically Generated GraphQL Middleware Service #graphql #apollo #typescript #prisma Add Comment 9 min read GraphQL Federation with Ballerina and Apollo - Part II Thisaru Guruge Thisaru Guruge Thisaru Guruge Follow Jul 10 GraphQL Federation with Ballerina and Apollo - Part II #ballerina #graphql #apollo #federation Add Comment 11 min read I built a new way of mocking GraphQL server ozkeisar ozkeisar ozkeisar Follow Aug 12 I built a new way of mocking GraphQL server #learning #api #graphql #frontend 20 reactions Ad* GraphQL Mesh v1 and Hive Gateway v1 * for The Guild Sep 10 Introducing GraphQL Mesh v1 and Hive Gateway v1 #graphql #mesh #graphqlhive * loading... #discuss Persisting DataLoader between requests and using it as a cache 3 comments Explain GraphQL like I'm five. 33 comments API Documentation Tools 2 comments REST or GraphQL, which do you choose? 22 comments ASP.NET Core (Rest Web API or GraphQL) 4 comments Is GraphQL the future of APIs? 32 comments JavaScript predictions for 2019 by npm 18 comments If you were going to build a chat app with Node and GraphQL? 6 comments Do you prefer GraphQL over REST? 17 comments I'm learning graphql and I love it so far 17 * The Myth of GraphQL Firebase notification(FCM) in .NET 8 with GraphQL and Rest API GraphQL vs REST: API Showdown 🤜🤛 Leveling Up My GraphQL Skills: Real Time Subscriptions The Best 10 GraphQL Clients for Developers in 2024 Fun with Hardcover's Book API: A quick reference GraphQL vs REST in 2024: Which One is More Future-Proof for Full-Stack Applications? Integrating Apollo Client with React and TypeScript: A Step-by-Step Guide REST VS GRAPHQL Interop Between Code and No-Code: Using 3D Echart to Visualize Data in Your Project Rest vs GraphQL Zoom Meetings API Integration Guide Building Well-Architected AWS AppSync GraphQL APIs REST vs GraphQL: Choosing the Right API for Your Project GraphQL: The Superhero of APIs 🦸‍♂️ Surprising benefit of GraphQL for long-term maintainability recently queried react projects React Portfolio * * ",
    "url": "https://dev.to/t/graphql"
  },
  {
    "body": "* Hacktoberfest Follow Hide Happy hacking! 🎃 Create Post about #hacktoberfest Please see #hacktoberfest23 for the most recent Hacktoberfest content. Details on participation can be found in our Hacktoberfest 2023 announcement. tag moderators 2568 Posts Published Older #hacktoberfest posts 1 2 3 4 5 6 7 8 9 *. The Most Potent Security Control on AWS Gaurav Raje Gaurav Raje Gaurav Raje * Nov 9 The Most Potent Security Control on AWS #iam #security #aws #* Hacktoberfest 2024 Angelo Pirola Angelo Pirola Angelo Pirola Follow Nov 9 Hacktoberfest 2024 #opensourcecommunity #hacktoberfestchallenge #dotnet #hacktoberfest Add Comment 1 min read My Hacktoberfest 2024 Jonas Brømsø Jonas Brømsø Jonas Brømsø Follow Nov 8 My Hacktoberfest 2024 #hacktoberfest #opensource #time 1 reaction *st 2024: Beginning of my open-source journey Diptodeep Diptodeep Diptodeep Follow Nov 3 Hacktoberfest 2024: Beginning of my open-source journey #* * * Cleo Buenaventura Follow Nov 3 * #opensource #git #github #hacktoberfest Add Comment 3 min read A reflection on my Hacktoberfest experience pyerie pyerie pyerie Follow Nov 3 A reflection on my Hacktoberfest experience #* Turning Frustration into Fascination: My Path to Open Source 💙</> Kiran Fatima Kiran Fatima Kiran Fatima Follow Nov 3 Turning Frustration into Fascination: My Path to Open Source 💙</> #* First Steps into Open Source: Hacktoberfest 2024 Reflection 𝒮ubin 𝒮ubin 𝒮ubin Follow Nov 3 First Steps into Open Source: Hacktoberfest 2024 Reflection #devchallenge #* *st 2024: My Open Source Journey. Ritesh Hiremath Ritesh Hiremath Ritesh Hiremath Follow Nov 3 Hacktoberfest 2024: My Open Source Journey. #* #devchallenge * A Hacktoberfest 2024 Journey: Insights from a First-Time Project Maintainer * Nov 4 A Hacktoberfest 2024 Journey: Insights from a First-Time Project Maintainer #devchallenge #* 5 * Reflecting on My Hacktoberfest Journey as a First-Time Contributor Reka Thana Reka Thana Reka Thana Follow Nov 4 Reflecting on My Hacktoberfest Journey as a First-Time Contributor #* First Open-Source Contribution Hacktoberfest'24 Experience Mehuli Biswas Mehuli Biswas Mehuli Biswas Follow Nov 2 First Open-Source Contribution Hacktoberfest'24 Experience #* My First Hacktoberfest experience as a contributor. Adijat Motunrayo Adeneye Adijat Motunrayo Adeneye Adijat Motunrayo Adeneye Follow Nov 2 My First Hacktoberfest experience as a contributor. #* Kickstarting Open Source with Hacktober! vaishvi2811 vaishvi2811 vaishvi2811 Follow Nov 2 Kickstarting Open Source with Hacktober! #devchallenge #* 1 reaction *st! - Racap TheoForger TheoForger TheoForger Follow Nov 2 Hacktoberfest! - Racap #hacktoberfest #opensource #beginners Add Comment 5 min read This is My Experience with Hactoberfest as a Contributer Piyush Sahu Piyush Sahu Piyush Sahu Follow Nov 2 This is My Experience with Hactoberfest as a Contributer #* Cross-Compiling GCC in Linux Nabir14 Nabir14 Nabir14 Follow Nov 2 Cross-Compiling GCC in Linux #devchallenge #* Add Comment 3 min read Not So Hacktoberfest...! Utsav Tayde Utsav Tayde Utsav Tayde Follow Nov 2 Not So Hacktoberfest...! #devchallenge #* Add Comment 3 min read * W*f Follow for WavePlay Nov 1 * #hacktoberfest #javascript #discord #node Add Comment 1 min read A Retrospective of My Hacktoberfest 2024 Experience Sneha Ghosh Sneha Ghosh Sneha Ghosh Follow Nov 1 A Retrospective of My Hacktoberfest 2024 Experience #devchallenge #* * Impactful Code: My Hacktoberfest 2024 Journey Abhinav jain Abhinav jain Abhinav jain Follow Nov 1 Building Impactful Code: My Hacktoberfest 2024 Journey #* Bye Bye Hacktoberfest * Amir Mullagaliev Follow Nov 1 Bye Bye Hacktoberfest #* My Hacktoberfest 2024 Recap Uday Rana Uday Rana Uday Rana Follow Nov 1 My Hacktoberfest 2024 Recap #* 5 min read Last Contribution For Hacktoberfest * Amir Mullagaliev Follow Nov 1 Last Contribution For Hacktoberfest #* Hard Times * Amir Mullagaliev Follow Nov 1 Hard Times #* Hacktoberfest 2024: My Contributor Experience Praise Idowu Praise Idowu Praise Idowu Follow Oct 31 Hacktoberfest 2024: My Contributor Experience #devchallenge #* * My Hacktoberfest 2024 Experience Mayank Kumar Mayank Kumar Mayank Kumar Follow Nov 1 My Hacktoberfest 2024 Experience #seneca #osd600 #hacktoberfest Add Comment 4 min read Hacktoberfest! - Week 4 TheoForger TheoForger TheoForger Follow Oct 31 Hacktoberfest! - Week 4 #hacktoberfest #opensource #beginners 1 comment 4 min read Take Smaller Tasks * Amir Mullagaliev Follow Nov 1 Take Smaller Tasks #* First Hacktoberfest Experience * Amir Mullagaliev Follow Oct 31 First Hacktoberfest Experience #* Let's Hack October: Dive into Open Source with Hacktoberfest 2024! YOSHITHA RATHNAYAKE YOSHITHA RATHNAYAKE YOSHITHA RATHNAYAKE Follow Oct 31 Let's Hack October: Dive into Open Source with Hacktoberfest 2024! #hacktoberfest #opensource #hacktoberfestchallenge #webdev *st 2024: My Open-Source Journey Sameer Desai Sameer Desai Sameer Desai Follow Oct 31 Hacktoberfest 2024: My Open-Source Journey #devchallenge #* Add Comment 1 min read My Experience with the OSS.GG Hackathon: Diving into Open Source with Twenty, Unkey, and Formbricks Devansh Baghel Devansh Baghel Devansh Baghel Follow Oct 31 My Experience with the OSS.GG Hackathon: Diving into Open Source with Twenty, Unkey, and Formbricks #opensource #hacktoberfest #programming 9 * My Experience with the OSS.GG Hackathon: Diving into Open Source with Twenty, Unkey, and Formbricks Matin Shaikh Matin Shaikh Matin Shaikh Follow Oct 31 My Experience with the OSS.GG Hackathon: Diving into Open Source with Twenty, Unkey, and Formbricks #hacktoberfest #opensource #programming * Writer/Editor-turned-Coder Does Hacktoberfest 2024, Realizes She’d Been Writing in the Wrong Industry All Along Ash Ro Ash Ro Ash Ro Follow Oct 30 Writer/Editor-turned-Coder Does Hacktoberfest 2024, Realizes She’d Been Writing in the Wrong Industry All Along #devchallenge #* 2 * Hacktoberfest: Animation. Chris Jarvis Chris Jarvis Chris Jarvis Follow Nov 3 Hacktoberfest: Animation. #devchallenge #* 3 *d I didn't know it was this exciting ! Mark Seif Mark Seif Mark Seif Follow Oct 31 I didn't know it was this exciting ! #devchallenge #* * I didn't know it was this exciting ! Mark Seif Mark Seif Mark Seif Follow Oct 31 I didn't know it was this exciting ! #devchallenge #* * Contributing to Tech Assessment Knowledge: My Hacktoberfest 2024 Journey MakendranG MakendranG MakendranG Follow Nov 3 Contributing to Tech Assessment Knowledge: My Hacktoberfest 2024 Journey #devchallenge #* 10 *d 2024 Hacktoberfest Writing Challenge amber buchtela amber buchtela amber buchtela Follow Oct 29 2024 Hacktoberfest Writing Challenge #* Embracing Hacktoberfest: A Beginner's Journey into Open Source Riya Sharma Riya Sharma Riya Sharma Follow Oct 29 Embracing Hacktoberfest: A Beginner's Journey into Open Source #devchallenge #* Add Comment 3 min read Amazing experience with Hacktoberfest 💻😍 pragyanandasaho pragyanandasaho pragyanandasaho Follow Oct 29 Amazing experience with Hacktoberfest 💻😍 #* ✨ Embracing Open Source: My Hacktoberfest 2024 Experience 🚀💻 Khushi Mahato Khushi Mahato Khushi Mahato Follow Nov 2 ✨ Embracing Open Source: My Hacktoberfest 2024 Experience 🚀💻 #devchallenge #* * Develop...Horror! Paradith Paradith Paradith Follow Oct 28 Develop...Horror! #challenge #developer #hacktoberfest 1 reaction 1 comm*4! ShashankKumarSaxena ShashankKumarSaxena ShashankKumarSaxena Follow Oct 28 Hacktoberfest 2024! #* Open Source, Open Doors: Wrapping Up Hacktoberfest 2024 AnhChienVu AnhChienVu AnhChienVu Follow Oct 28 Open Source, Open Doors: Wrapping Up Hacktoberfest 2024 #javascript #beginners #hacktoberfest #* I Completed Hacktoberfest 2024. Here is What I Loved and Hated HstSethi HstSethi HstSethi Follow Oct 28 I Completed Hacktoberfest 2024. Here is What I Loved and Hated #hacktoberfest #hacktoberfestchallenge #opensource #hacktoberfest2024 * My First Hacktoberfest Experience Gauresh G Pai Gauresh G Pai Gauresh G Pai Follow Oct 28 My First Hacktoberfest Experience #devchallenge #* Add Comment 1 min read My Road to the Hacktoberfest 2024. Saumya Subham Mishra Saumya Subham Mishra Saumya Subham Mishra Follow Oct 28 My Road to the Hacktoberfest 2024. #devchallenge #* 1 reaction 1 c* Recap * * Oct 28 Hacktoberfest Recap #hacktoberfest #github #* Onde eu colaborei no 11 Hacktoberfest Neilton Seguins Neilton Seguins Neilton Seguins Follow Oct 28 Onde eu colaborei no 11 Hacktoberfest #devchallenge #* 7 * Hacktoberfest week 4 * * Oct 27 Hacktoberfest week 4 #hacktoberfest #opensource #github *st week 3 * * Oct 27 Hacktoberfest week 3 #hacktoberfest #github #* Recap Hacktober Fest fadingNA fadingNA fadingNA Follow Oct 27 Recap Hacktober Fest #hacktoberfest Add Comment 3 min read My First Hacktoberfest: A Journey into Open Source ReddiRani8496 ReddiRani8496 ReddiRani8496 Follow Nov 1 My First Hacktoberfest: A Journey into Open Source #hacktoberfest #hacktoberfestchallenge #opensource #*t 2 min read Daily Drawing Challenge: A Creative Journey with Tolgee Sanket Shinde Sanket Shinde Sanket Shinde Follow Oct 31 Daily Drawing Challenge: A Creative Journey with Tolgee #webdev #opensource #hacktoberfest #nextjs 9 * Dipping Into a Java Project Uday Rana Uday Rana Uday Rana Follow Nov 1 Dipping Into a Java Project #opensource #java #hacktoberfest Add Comment 6 min read My experience as beginner to open-source Pradeepto Pradeepto Pradeepto Follow Oct 27 My experience as beginner to open-source #devchallenge #* * Implementing Secure Hanko Authentication: Password and Passkey-Based Login, Registration, and Logout in Any Tech Stack shivam kumar singh shivam kumar singh shivam kumar singh Follow Oct 27 Implementing Secure Hanko Authentication: Password and Passkey-Based Login, Registration, and Logout in Any Tech Stack #hacktoberfest #hanko #hankoauth Add Comment 6 min read Reimagining Authentication with Hanko Adil Kadival Adil Kadival Adil Kadival Follow Oct 27 Reimagining Authentication with Hanko #hanko #opensource #hacktoberfest #clerkalternative *... #discuss Happy? Halloween? 🤔 1 comment Who likes stickers more? Software developers/computing professionals or five-year-olds? And why? 20 comments What was your win this week? 28 comments Hacktoberfest 2020 Help & Discussion Thread 25 comments Share us your project for Hacktoberfest 2024! 🎃 55 comments Who's looking for open source contributors? (October 29th edition) 21 comments Who's looking for open source contributors? (October 15th edition) 43 comments Who's looking for open source contributors? (October 8th edition) 49 comments Who's looking for open source contributors? (October 1st edition) 87 comments ✨ From Contributor to Core Project Maintainer: My Open Source Journey ✨ New trending guides/resources Release Radar · September 2024: Major updates from the open source community 9 Open Source Projects to Contribute to - Hacktoberfest 2024 Hacktoberfest : The right way to do open source 5 DevOps Hacktoberfest Projects to Contribute to! 🎉 HacktoberFest 2024: How to Contribute & Win Exclusive Prizes? 🚀 Exciting Open Source Events, Useful Tips and Great Projects to Contribute - Hacktoberfest 2024🎁⚡🎉 Hacktoberfest 2024: Why You Should Participate A New Way to Contribute to Hacktoberfest 2024: Directly at Frontend AI How did a dumbo become an Open-Source contributor 🪔 My First Hacktoberfest Experience Hacktoberfest 2024: Preparation Guide and Tips Top Hacktoberfest Projects to Contribute to in 2024 Building a Career through Open Source Contributions Hacktoberfest 2024: A Journey of Learning and Contribution Top open-source repos/projects to contribute (Hacktoberfest Edition 🎃) Join the 2024 Hacktoberfest Writing Challenge: Reflect on your Journey as a Contributor or Maintainer Share us your project for Hacktoberfest 2024! 🎃 Git Cheat Sheet for Hacktoberfest The Most Annoying Cookie Banner Ever Hackathon 🤬🍪 My Hacktoberfest 2024 Experience as a Maintainer 🙌 * * ",
    "url": "https://dev.to/t/hacktoberfest"
  },
  {
    "body": "* JavaScript Follow Hide Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code. JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other! * Client-side, server-side, it doesn't matter. This tag should be used for anything JavaScript focused. If the topic is about a JavaScript framework or library, just remember to include the framework's tag as well. about #javascript How should the tag be written? All lower-case letters for the tag: javascript. tag moderators 95238 Posts Published Older #javascript *587 *. *”? 🤔 * Nov 10 *”? 🤔 #discuss #webdev #javascript #* 1 min read Common Myths About Mongoose Nozibul Islam Nozibul Islam Nozibul Islam Follow Nov 9 Common Myths About Mongoose #javascript #database #mongodb #mongoose 21 *d Biome.js, a toolchain to format and lint your web project * Nov 10 Biome.js, a toolchain to format and lint your web project #javascript #typescript #opensource #biome Add Comment 2 min read * Ashutosh Kumar Ashutosh Kumar Ashutosh Kumar Follow Nov 10 * #* #programming * Closures - Javascript Manoj Manoj Manoj Follow Nov 10 Closures - Javascript #* #learning 1 comment 2 min read *) Sakis Pal Sakis Pal Sakis Pal Follow Nov 9 *) #webdev #express #netlify #* Custom Hooks in React Cheryl Mataitini Cheryl Mataitini Cheryl Mataitini Follow Nov 10 Custom Hooks in React #react #javascript #webdev * * * 10 * #javascr*mment 4 min read * Bhuwan chettri Bhuwan chettri Bhuwan chettri Follow Nov 9 * #javascript #*t 1 min read * Devops Den Devops Den Devops De* 3 min read Guia Comp* Souza * Follow Nov 10 Guia Comp* #node * Automating JavaScript execution in the browser Sergey-Sharyk Sergey-Sharyk Sergey-Sharyk Follow Nov 9 Automating JavaScript execution in the browser #javascript #webdev #dx #automation * New here * Ayush Kumar Vishwakarma Follow Nov 9 New here #webdev #* Add Comment 1 min read * Gabriel Duete Gabriel Duete Gabriel Duete Follow Nov 9 * #webdev #javascript #react #* Understanding Java Build and Packaging: A Beginner's Guide to DevOps Tahmid Ul Muntakim Tahmid Ul Muntakim Tahmid Ul Muntakim Follow Nov 9 Understanding Java Build and Packaging: A Beginner's Guide to DevOps #javascript #java #devops Add Comment 3 min read Javascript setTimeout method - All you need to know alienfoxx alienfoxx alienfoxx Follow Nov 9 Javascript setTimeout method - All you need to know #javascript #beginners #webdev Add Comment 11 min read 💡 Do you know the different units of measurement in CSS? px, em, rem, vh, and vw! 💡 * Yanaiara Oliveira Follow Nov 9 💡 Do you know the different units of measurement in CSS? px, em, rem, vh, and vw! 💡 #javascript #beginners #frontend #css Add Comment 2 *sing in Node.js wi* * #java* Do Express.js para o PHP: Como o Lithe traz a experiência de desenvolvimento minimalista para o mundo PHP * Do Express.js para o PHP: Como o Lithe traz a experiência de desenvolvimento minimalista para o mundo PHP #php #javascript #express #lithe 2 *d From Express.js to PHP: How Lithe Brings the Minimalist Development Experience to the PHP World * From Express.js to PHP: How Lithe Brings the Minimalist Development Experience to the PHP World #php #javascript #lithe #express 2 *d * * Nov 9 * #webdev #react #javascript #* 💡 *! 💡 * Yanaiara Oliveira Follow Nov 9 💡 *! 💡 #javascript #frontend #webdev #* Creating a JavaScript Object Using Python Techelopment Techelopment Techelopment Follow Nov 9 Creating a JavaScript Object Using Python #python #jav*ions Add Comment 2 min read * 🚨 mohiyaddeen7 mohiyaddeen7 mohiyaddeen7 Follow Nov 9 * 🚨 #*l 5 *d *p aelassas aelassas aelassas Follow Nov 9 *p #discuss #webdev #javascript #* 19 min read Employee Leave Management App Angular 18 Akanksha Asutkar Akanksha Asutkar Akanksha Asutkar Follow Nov 9 Employee Leave Management App Angular 18 #angular #javascript #react #dotnet Add Comment 2 min read * * Emma Richardson Follow Nov 9 * #* #* * Jefferson Jefferson Jefferso* 11 min read Modular React architecture Michael Mazzone Michael Mazzone Michael Mazzone Follow Nov 9 Modular React architecture #react #softwaredevelopment #* 7 min read Task manger app Farouk Farouk Farouk Follow Nov 9 Task manger app #webdev #javascript #frontend #taskmanager * Understanding REST APIs - A Guide for the Impatient Camdyn Rasque Camdyn Rasque Camdyn Rasque Follow Nov 9 Understanding REST APIs - A Guide for the Impatient #rest #api #* 5 min read Dominando Compound Components: Construindo Componentes React Flexíveis e Reutilizáveis Gabriel Duete Gabriel Duete Gabriel Duete Follow Nov 8 Dominando Compound Components: Construindo Componentes React Flexíveis e Reutilizáveis #braziliandevs #javascript #react #designpatterns 2 * Test-Driven Development (TDD) in Front-end. Jayanta Deb Jayanta Deb Jayanta Deb Follow Nov 8 Test-Driven Development (TDD) in Front-end. #webdev #javascript #unittest #* * * 9 * #* #* * Grenish rai Grenish rai Grenish rai Follow Nov 9 * #* #tutorial 8 * Tic-Tac-Toe Game using * * 9 Tic-Tac-Toe Game using * #webdev #javascript #* Comment 3 min read Episode 4: Defensive Strategies with Commander Redux * vigneshiyergithub Follow Nov 8 Episode 4: Defensive Strategies with Commander Redux #react #* 5 min read * * Nov 8 * #*l Add Comment 4 min read useContext: React Hooks * Nov 8 useContext: React Hooks #react #webdev #javascript #* Roniere Marques: Um Desenvolvedor em Destaque Roniere da silva marques Roniere da silva marques Roniere da silva marques Follow Nov 8 Roniere Marques: Um Desenvolvedor em Destaque #webdev #* Como criar uma automação com aws lambda e serverless framework Massaroni Massaroni Massaroni Follow Nov 8 Como criar uma automação com aws lambda e serverless framework #webdev #javascript #automation #lambda Ad* ThrusterKit: A Boilerplate to Speed Up Your SaaS App Launch Matt Nutsch Matt Nutsch Matt Nutsch Follow Nov 8 Introducing ThrusterKit: A Boilerplate to Speed Up Your SaaS App Launch #webdev #javascript #beginners #react Add Comment 1 min read \"Getting Started with React : A Beginner's Guide\" wicked sarkar wicked sarkar wicked sarkar Follow Nov 8 \"Getting Started with React : A Beginner's Guide\" #webdev #javascript #react Add Comment 2 min read Chapter 1: The Lifecycle Crisis * vigneshiyergithub Follow Nov 8 Chapter 1: The Lifecycle Crisis #react #webdev #javascript * JavaScript Journey Complete: What's Next? Imran Khan Imran Khan Imran Khan Follow Nov 9 JavaScript Journey Complete: What's Next? #javascript #webdev #learning #programming * Top Front-End Frameworks for Web Development in 2024 Philip Philip Philip Follow Nov 8 Top Front-End Frameworks for Web Development in 2024 #webdev #react #javascript #echoapi Add Comment 6 min read Essential JavaScript Array Methods Every Developer Should Know Khalif AL Mahmud Khalif AL Mahmud Khalif AL Mahmud Follow Nov 8 Essential JavaScript Array Methods Every Developer Should Know #*t 2 min read ¿Cómo definir el estado? Octavio Martinez Octavio Martinez Octavio Martinez Follow Nov 8 ¿Cómo definir el estado? #react #* NeoHtop: A Cross-Platform Activity Monitor Written in Svelte and Tauri🚀 Nasser El Idrissi Nasser El Idrissi Nasser El Idrissi Follow Nov 9 NeoHtop: A Cross-Platform Activity Monitor Written in Svelte and Tauri🚀 #* * Learning to Code? Avoid Overusing AI Tools Rizwanul Islam Rudra Rizwanul Islam Rudra Rizwanul Islam Rudra Follow Nov 8 Learning to Code? Avoid Overusing AI Tools #programming #ai #javascript #webdev * and deploying a smart contract with OpenZepplin and Solidity in less than 10 minutes Josh Fischer Josh Fischer Josh Fischer Follow Nov 8 Building and deploying a smart contract with OpenZepplin and Solidity in less than 10 minutes #web3 #opensource #* 5 min read *: CSSOM * ⛩️ Cristiano Gonçalves ⛩️ Follow Nov 8 *: CSSOM #* #frontend * Design * Ketan Jakhar K* How to Stop Spam Comments on WordPress WITHOUT Any Plugin Adeleye Ayodeji Adeleye Ayodeji Adeleye Ayodeji Follow Nov 8 How to Stop Spam Comments on WordPress WITHOUT Any Plugin #webdev #javascript #tutorial #wordpress Add Comment 1 min read Bunchee, a bundler for JS/TS package * Nov 8 Bunchee, a bundler for JS/TS package #javascript #typescript #bundler #bunchee Add Comment 3 min read Deno 2 + Jupyter aaronblondeau aaronblondeau aaronblondeau Follow Nov 8 Deno 2 + Jupyter #deno #javascript #jupyter Add Comment 1 min read Advanced Event Handling in JavaScript: Custom Events, Event Delegation, and Event Loop Okoye *amaka Follow Nov 8 Advanced Event Handling in JavaScript: Custom Events, Event Delegation, and Event Loop #webdev #javascript #eventhandling #codingtip*o create a dynamic feature grid with Astro and Tailwind CSS Michael Andreuzza Michael Andreuzza Michael Andreuzza Follow Nov 8 How to create a dynamic feature grid with Astro and Tailwind CSS #tailwindcss #astro #javascript #animation Add Comment 1 min read 5 Killer JavaScript Hacks Wish I Knew Soon thandhla thandhla thandhla Follow Nov 8 5 Killer JavaScript Hacks Wish I Knew Soon #javascript #webdev #backend *ing RAG Systems with Unstructured Data: A Comprehensive Guide VISDOM 04 VISDOM 04 VISDOM 04 Follow Nov 8 Implementing RAG Systems with Unstructured Data: A * #tutorial #ai Add Comment 1 min read * follow us: */ 01:13 * 10 (26 mins ago) * follow us: */ #webdev #javascript #* Comment 1 min read Add Crazy Cursor Click Effect on your website.. Anoop Patel Anoop Patel Anoop Patel Follow Nov 10 (25 mins ago) Add Crazy Cursor Click Effect on your website.. #webdev #animation #javascript #css * Stopwatch using html css and javascript follow us on the instagram... */ * 10 (43 mins ago) Stopwatch using html css and javascript follow us on the instagram... */ #webdev #vscode #frontend #javascript * Auxiliary Routes in Angular Muhammad Awais Muhammad Awais Muhammad Awais Follow for This is Angular Nov 10 (46 mins ago) Auxiliary Routes in Angular #javascript #angular #type*ent 3 min read test Eslam ALmasoudy Eslam ALmasoudy Eslam ALmasoudy Follow Nov 10 (40 mins ago) test #webdev #* Transform Your JavaScript: Functional Programming Concepts and Practical Tips Okoye *amaka Follow Nov 10 (1 hour ago) Transform Your JavaScript: Functional Programming Concepts and Practical Tips #javascript #webdev #codingtips #scala Add Comment 5 min read Streamlining API Calls in Angular v18 with TanStack Angular Query Muhammad Awais Muhammad Awais Muhammad Awais Follow Nov 10 (52 mins ago) Streamlining API Calls in Angular v18 with TanStack Angular Query #angular #webdev #typescript #* Using Gemini with the OpenAI Library M Sea Bass M Sea Bass M Sea Bass Follow Nov 10 (4 hours ago) Using Gemini with the OpenAI Library #openai #python #javascript #gemini Add Comment 3 min read *? taylor taylor taylor Follow Nov 10 (5 hours ago) *? #javascript #*t 2 min read * Ray-D-Song Ray-D-Song Ray-D-Song Follow Nov 10 (6 hours ago) * #* #serverless Add C* *”? 🤔 New *p New * Car Rental Website and Mobile App 1 comment *n E-commerce Site * Stop Using Try-Catch: A Better Way to Handle Errors in JavaScript Top 10 Modern JavaScript Patterns for 2025 No more Try/Catch: a better way to handle errors in TypeScript Maxun: Open Source No-Code Web Data Extraction Platform⚡️ 2* Must Know 🚀 *? 9 Interesting Open Source Projects You Should Explore Right Now🥷🏻 🎉 9 must-know open-source tools that will make you better than 99% of developers Why Go is Popular Right Now and Why I Started Learning Go as a Node.js Developer Proxy Design Pattern How to write clean code Design Patterns demystified with examples Builder Design Pattern Building a Meta Tags Scraping API in Under 40 Lines of Code 9 Tools Everyone Should Try🧙‍♂️🫵 Top UI Component Libraries for React Angular 19 - 5 Game-Changing Features You Need to Know How to become Great Software Developer 10 React One-Liners Every UI Developer Should Know 21+ Best Free and Open-Source Icon Library for 2024 recently queried Spotify Shuffle Sucks JavaScript Playground JavaScript * JavaScipt Hack Textcontent vs Innerhtml Coding Games for Beginners Method vs Function ReactJs setState Eslint Vscode Joi JS Flow vs Typescript JS Expressions Handwriting Generator Java Script Game Codes Simulate Slow Internet Chrome Gulp vs Webpack React Graph Discord Embed Node Scheduler Anonymous Function JavaScrip*nsor Neon * ",
    "url": "https://dev.to/t/javascript"
  },
  {
    "body": "* # lambda * 1271 Posts Published Older #lambda posts 1 2 3 4 5 6 7 8 9 *. 🎧 AWS Audio Transcription Automation with CloudFormation Warner Bell Warner Bell Warner Bell Follow Nov 9 🎧 AWS Audio Transcription Automation with CloudFormation #awstranscribe #cicd #lambda #s3 * a Scalable Job Queue System with AWS and Laravel Mahmud Hasan Rafid Mahmud Hasan Rafid Mahmud Hasan Rafid Follow Nov 9 Building a Scalable Job Queue System with AWS and Laravel #aws #queue #lambda #eventbridge * Como criar uma automação com aws lambda e serverless framework Massaroni Massaroni Massaroni Follow Nov 8 Como criar uma automação com aws lambda e serverless framework #webdev #javascript #automation #lambda Add Comment 1 min read A Decade of AWS Lambda and ECS: My Journey of Growth and Gratitude Avinash Dalvi Avinash Dalvi Avinash Dalvi * Nov 9 A Decade of AWS Lambda and ECS: My Journey of Growth and Gratitude #lambda #ecs #aws #serverless 5 * Optimizaciones Lambda AWS 👨‍💻 kevin kevin kevin Follow Nov 6 Optimizaciones Lambda AWS 👨‍💻 #aws #lambda #serverless #* Ajustando Limites de Concorrência do AWS Lambda para Minimizar Throttling Misael Amorim Misael Amorim Misael Amorim Follow Nov 5 Ajustando Limites de Concorrência do AWS Lambda para Minimizar Throttling #aws #lambda #microservices Add Comment 2 min read AWS Api GateWay & AWS Lambda Interview Question * Nov 5 AWS Api GateWay & AWS Lambda Interview Question #aws #lambda #api #interviewpreparation Add Comment 9 min read Going Serverless with Dart: AWS Lambda for Flutter Devs Dinko Marinac Dinko Marinac Dinko Marinac Follow Nov 4 Going Serverless with Dart: AWS Lambda for Flutter Devs #aws #dart #lambda #serverless Add Comment 8 min read AWS Lambda: OCR and Text Translation in the AWS Cloud Wojciech Lepczyński Wojciech Lepczyński Wojciech Lepczyński * Nov 7 AWS Lambda: OCR and Text Translation in the AWS Cloud #aws #tutorial #lambda #ai 5 *d Why serverless is no magic wand? John Antony John Antony John Antony Follow Nov 8 Why serverless is no magic wand? #cloudcomputing #lambda #serverless Add Comment 4 min read AWS Automatically Accept Transit Gateway Attachments for allowed CIDR and Account pairs Jana Hockenberger Jana Hockenberger Jana Hockenberger Follow Oct 28 AWS Automatically Accept Transit Gateway Attachments for allowed CIDR and Account pairs #aws #lambda #transitgateway #cloudformation * How to resolv*' * Oct 25 How to resolv*' #yaml #node #serverless #lambda Add Comment 1 min read AWS Lambda now supports using a custom serializer with Java runtimes * Karthik Sakthivel Follow Oct 25 AWS Lambda now supports using a custom serializer with Java runtimes #aws #lambda #javaruntime #awscloud * Create an API to get data from your DynamoDB Database using CDK Calvin Torra Calvin Torra Calvin Torra Follow Oct 18 Create an API to get data from your DynamoDB Database using CDK #aws #lambda #dynamodb Add Comment 1 min read Top 18 Cheapest AWS Services DevOps Descent DevOps Descent DevOps Descent Follow Nov 6 Top 18 Cheapest AWS Services #aws #lambda #cloud #cloudcomputing 29 reactions 10 comments 5 min read Lambda Performance Evaluation: The Relationship Between Memory and Internal vCPU Architecture, and Their Comparison takuma818t takuma818t takuma818t Follow Oct 14 Lambda Performance Evaluation: The Relationship Between Memory and Internal vCPU Architecture, and Their Comparison #aws #lambda * Why You Should Use AWS Lambda For Web Development Jodi Gabano Jodi Gabano Jodi Gabano Follow Nov 4 Why You Should Use AWS Lambda For Web Development #programming #cloud #aws #lambda 8 * Techniques to Save Costs Using AWS Lambda Functions with CDK * Wallace Freitas Follow Nov 4 Techniques to Save Costs Using AWS Lambda Functions with CDK #aws #cdk #lambda #typescript 6 *d How to build an API with Lambdas, API Gateway and deploy with AWS CDK Calvin Torra Calvin Torra Calvin Torra Follow Oct 11 How to build an API with Lambdas, API Gateway and deploy with AWS CDK #aws #cdk #lambda #restapi Add Comment 1 min read Run Next.js in AWS Lambda Christian Nuss Christian Nuss Christian Nuss Follow Oct 15 Run Next.js in AWS Lambda #lambda #nextjs #webdev #opensource 5 *d AWS Lambda recursive loop detection can now automatically detect and stop recursive loops between AWS Lambda and Amazon S3 * Karthik Sakthivel Follow Oct 10 AWS Lambda recursive loop detection can now automatically detect and stop recursive loops between AWS Lambda and Amazon S3 #aws #lambda #amazons3 #recursiveloop *ing the Power of Python Lambda Functions with Terraform for Email Automation via AWS SES Alexander_Yizchak Alexander_Yizchak Alexander_Yizchak Follow Oct 8 Unleashing the Power of Python Lambda Functions with Terraform for Email Automation via AWS SES #lambda #aws #se*o Use Lambda Functions in Python Federico Trotta Federico Trotta Federico Trotta Follow for AppSignal Oct 30 How to Use Lambda Functions in Python #python #lambda 11 * Unlock Seamless AWS Integration: 1-Click Cloud Logging Solution Emily Johnson Emily Johnson Emily Johnson Follow Oct 5 Unlock Seamless AWS Integration: 1-Click Cloud Logging Solution #application #aws #lambda #github Add Comment 3 min read AWS Serverless: How to Stop EC2 using Event Bridge and Lambda Girish Bhatia Girish Bhatia Girish Bhatia Follow Oct 3 AWS Serverless: How to Stop EC2 using Event Bridge and Lambda #lambda #aws #eventbridge #serverless 2 *d Automate Cleaning of Unused EIP Through Lambda Part1 Muhammed Ashraf Muhammed Ashraf Muhammed Ashraf Follow Oct 2 Automate Cleaning of Unused EIP Through Lambda Part1 #cloud #aws #lambda #automation Add Comment 2 min read Serverless Developer Experience is Finally Great with Lambda Live Debugger * Marko - ServerlessLife.com Follow Sep 30 Serverless Developer Experience is Finally Great with Lambda Live Debugger #lambda #serverless #aws * AWS Compute - Part 5: How to choose compute service Hulk Pham Hulk Pham Hulk Pham Follow Nov 1 AWS Compute - Part 5: How to choose compute service #aws #cloud #ec2 #lambda 9 *ad Automatically transcribe your video files uploaded to S3 using AWS Transcribe Ahamed Ruyefa Ahamed Ruyefa Ahamed Ruyefa Follow Oct 21 Automatically transcribe your video files uploaded to S3 using AWS Transcribe #aws #s3 #lambda #serverless 6 * Local Development Server for AWS SAM Lambda Projects Kuba Kuba Kuba Follow Sep 28 Local Development Server for AWS SAM Lambda Projects #aws #lambda #python #webdev * Monitoring AWS ECS Deployment failures Nilesh Prasad Nilesh Prasad Nilesh Prasad Follow Sep 26 Monitoring AWS ECS Deployment failures #ecs #aws #eventbridge #lambda * AWS Lambda now supports tagging of Event Source Mappings and Code Signing Config resources * Karthik Sakthivel Follow Sep 24 AWS Lambda now supports tagging of Event Source Mappings and Code Signing Config resources #lambda #aws #awscloud #tagging Add Comment 1 min read Leveraging Ephemeral Storage in AWS Lambda Tunmise Ogunniyi Tunmise Ogunniyi Tunmise Ogunniyi Follow Oct 27 Leveraging Ephemeral Storage in AWS Lambda #aws #lambda #node 18 * Viewing console.log's of a lambda function Calvin Torra Calvin Torra Calvin Torra Follow Oct 17 Viewing console.log's of a lambda function #aws #lambda Add Comment 1 min read How to Import Pandas(library) in AWS Lambda Functions - AWS Lambda Layers M. Abdullah Bin Aftab M. Abdullah Bin Aftab M. Abdullah Bin Aftab Follow Oct 16 How to Import Pandas(library) in AWS Lambda Functions - AWS Lambda Layers #aws #lambda #python #cloudcomputing 25 *d AWS Compute - Part 3: serverless, lambda and fargate Hulk Pham Hulk Pham Hulk Pham Follow Oct 26 AWS Compute - Part 3: serverless, lambda and fargate #aws #cloud #lambda #fargate * Cost Optimization: Automating EBS Snapshot Cleanup with AWS Lambda Subham Nandi Subham Nandi Subham Nandi Follow Sep 20 Cost Optimization: Automating EBS Snapshot Cleanup with AWS Lambda #aws #lambda Add Comment 5 min read Crowdstrike enters the Serverless market Thijs de Z Thijs de Z Thijs de Z Follow Oct 22 Crowdstrike enters the Serverless market #serverless #lambda #security #vercel Add Comment 4 min read AWS Security Automation with Lambda Ikoh Sylva Ikoh Sylva Ikoh Sylva Follow Oct 19 AWS Security Automation with Lambda #aws #lambda #cloud #cloudcomputing 8 * Organizing AWS CDK with Separated Lambda and Fargate Code in a Monorepo Oleksandr Hanhaliuk Oleksandr Hanhaliuk Oleksandr Hanhaliuk Follow Oct 19 Organizing AWS CDK with Separated Lambda and Fargate Code in a Monorepo #aws #lambda #cleancode #fargate * Building serverless architectures with AWS Lambda Ayman Aly Mahmoud Ayman Aly Mahmoud Ayman Aly Mahmoud * Oct 16 Building serverless architectures with AWS Lambda #lambda #serverless #aws 3 *d API Gateway and Lambda Throttling with Terraform. Part 2 Alexey Vidanov Alexey Vidanov Alexey Vidanov * Oct 14 API Gateway and Lambda Throttling with Terraform. Part 2 #aws #lambda #apigateway #waf 2 *d Debug Lamba's faster with Live Lambda Debugger Thijs de Z Thijs de Z Thijs de Z Follow Oct 14 Debug Lamba's faster with Live Lambda Debugger #aws #lambda #serverless #programming * * * Oct 11 * #aws #serverless #lambda #dynamodb 2 *d API Gateway and Lambda Throttling with Terraform. Part 1 Alexey Vidanov Alexey Vidanov Alexey Vidanov * Oct 11 API Gateway and Lambda Throttling with Terraform. Part 1 #aws #lambda #apigateway #serverless 5 * Translating S3-hosted static website using AWS Translate Mohamed Ahmed Mohamed Ahmed Mohamed Ahmed Follow Sep 6 Translating S3-hosted static website using AWS Translate #aws #lambda #cloud #translate Add Comment 4 min read AWS Lambda and S3 Just Got Smarter: How AWS Prevents Recursive Loops Automatically Jatin Mehrotra Jatin Mehrotra Jatin Mehrotra * Oct 10 AWS Lambda and S3 Just Got Smarter: How AWS Prevents Recursive Loops Automatically #serverless #lambda #aws #s3 13 *d Going Serverless with AWS Lambda: My Journey to Scalable Web Apps Mukhil Padmanabhan Mukhil Padmanabhan Mukhil Padmanabhan Follow Oct 9 Going Serverless with AWS Lambda: My Journey to Scalable Web Apps #aws #serverless #lambda #beginners 17 * How to invoke a lambda function from your database Eric Goldman Eric Goldman Eric Goldman Follow for Sequin Sep 27 How to invoke a lambda function from your database #postgres #aws #lambda #webdev 2 *d * 2 - introducing Bref runtime Paul SANTUS Paul SANTUS Paul SANTUS * Oct 7 * 2 - introducing Bref runtime #aws #lambda #php #serverless 10 *d * 1 - What's serverless? Paul SANTUS Paul SANTUS Paul SANTUS * Oct 7 * 1 - What's serverless? #aws #php #lambda #serverless 7 * Creating a new AWS CDK Project and deploying a Lambda Function Calvin Torra Calvin Torra Calvin Torra Follow Oct 7 Creating a new AWS CDK Project and deploying a Lambda Function #cdk #aws #lambda #* Automating AWS EC2 and RDS Instance Management with AWS Lambda Chandan Singh Chandan Singh Chandan Singh Follow Sep 3 Automating AWS EC2 and RDS Instance Management with AWS Lambda #lambda #aws #ec2 #rds Add Comment 4 min read The serverless challenge Luis Dourado Luis Dourado Luis Dourado Follow Sep 2 The serverless challenge #aws #serverless #lambda #webdev Add Comment 9 min read Avoiding Pitfalls: Essential Configuration Tips for AWS Lambda Uendi Hoxha Uendi Hoxha Uendi Hoxha Follow Oct 1 Avoiding Pitfalls: Essential Configuration Tips for AWS Lambda #aws #lambda 16 * Serverless Computing and GraphQL: Modern App Development balaji thadagam kandavel balaji thadagam kandavel balaji thadagam kandavel Follow Oct 1 Serverless Computing and GraphQL: Modern App Development #lambda #typescript #graphql Add Comment 3 min read Deploying a Serverless Function with AWS Lambda Mariam Adedeji Mariam Adedeji Mariam Adedeji Follow Sep 29 Deploying a Serverless Function with AWS Lambda #aws #lambda #serverless #beginners 6 * Serverless PDF Processing with AWS Lambda and Textract Olga Shabalina Olga Shabalina Olga Shabalina * Sep 28 Serverless PDF Processing with AWS Lambda and Textract #cloudcomputing #serverless #lambda #dataengineering 9 * Why won't my forEach lambda allow me to exit my function with a return statement in Java? Raphael De Lio Raphael De Lio Raphael De Lio Follow Sep 25 Why won't my forEach lambda allow me to exit my function with a return statement in Java? #java #lambda #functional #programming 3 * Deploy Express JS container image on Lambda AWS Janith Disanayake Janith Disanayake Janith Disanayake Follow Sep 24 Deploy Express JS container image on Lambda AWS #aws #lambda #docker #express 7 reactions 1 c*s Revolutionize Resource Management with Automated Tagging New How to conditionally upload Lambda artifact to s3 with Terraform? 8 * AWS Compute - Part 5: How to choose compute service OneOf Library in C# Resolve Lambda URL Error - signature not match when using POST/PUT DBのレコード更新をトリガーにLambdaを実行する（パート１） AWS ALB(Ingress) access logs on Grafana Deploying a Serverless Function with AWS Lambda * 2 - introducing Bref runtime AWS Lambda and S3 Just Got Smarter: How AWS Prevents Recursive Loops Automatically * 1 - What's serverless? Deploy Express JS container image on Lambda AWS Top 18 Cheapest AWS Services * Lambda Performance Evaluation: The Relationship Between Memory and Internal vCPU Architecture, and Their Comparison Reduce ETL Time by Converting Sequential Code to Parallel AWS Lambda Execution Execute Lambda triggered by DB record updates Avoiding Pitfalls: Essential Configuration Tips for AWS Lambda Automatically transcribe your video files uploaded to S3 using AWS Transcribe AWS Lambda: OCR and Text Translation in the AWS Cloud Serverless Telegram Bot: Setting up our environment in AWS with CDK Building serverless architectures with AWS Lambda * * ",
    "url": "https://dev.to/t/lambda"
  },
  {
    "body": "* Learning Follow Hide “I have no special talent. I am only passionately curious.” - Albert Einstein Create Post tag moderators 9068 Posts Published Older #learning *51 *. Timer - * 10 Timer - Custom Hooks #webdev #react #learning #* Closures - Javascript Manoj Manoj Manoj Follow Nov 10 Closures - Javascript #* #learning 1 comment 2 min read Maze generator, written in C Eniek Eniek Eniek Follow Nov 9 Maze generator, written in C #c #lea* read List all Visual Studio solutions Karen Payne Karen Payne Karen Payne Follow Nov 9 List all Visual Studio solutions #csharp #dotnetcore #tutorial #learning * Kubernetes homelab - Learning by doing, Part 6: Automation Sacha Thommet Sacha Thommet Sacha Thommet Follow Nov 9 Kubernetes homelab - Learning by doing, Part 6: Automation #learning #kubernetes Add Comment 3 min read Data Structures: Concepts and Implementations – Part 1: Arrays João Vitor João Vitor João Vitor Follow Nov 9 Data Structures: Concepts and Implementations – Part 1: Arrays #tutorial #learning #csharp #datastructures Add Comment 5 min read Estruturas de Dados: Conceitos e Implementações – Parte 1: Arrays João Vitor João Vitor João Vitor Follow Nov 9 Estruturas de Dados: Conceitos e Implementações – Parte 1: Arrays #braziliandevs #tutorial #learning #csharp Add Comment 6 min read Unofficial Internship for students Friptu Teodor Friptu Teodor Friptu Teodor Follow Nov 9 Unofficial Internship for students #webdev #beginners #learning #career Add Comment 1 min read Creating and Connecting to a Linux VM using a Public Key. Ayodeji Alofun Ayodeji Alofun Ayodeji Alofun Follow Nov 8 Creating and Connecting to a Linux VM using a Public Key. #azure #linux #ubuntu #learning * JavaScript Journey Complete: What's Next? Imran Khan Imran Khan Imran Khan Follow Nov 9 JavaScript Journey Complete: What's Next? #javascript #webdev #learning #programming * Kubernetes homelab - Learning by doing, Part 5: Monitoring Sacha Thommet Sacha Thommet Sacha Thommet Follow Nov 8 Kubernetes homelab - Learning by doing, Part 5: Monitoring #learning #kubernetes Add Comment 2 min read RPA in Cloud Environments: Scalability, Flexibility and Cost Efficiency Steve Smith Steve Smith Steve Smith Follow Nov 8 RPA in Cloud Environments: Scalability, Flexibility and Cost Efficiency #rpa #cloud #robotics #learning Add Comment 5 min read The I* Margaret Wanjiru Margaret Wanjiru Margaret Wanjiru Follow Nov 8 The I* #webdev #programming #* 9 min read React lifecycles - * 8 React lifecycles - Custom Hooks #webdev #react #beginners #* Observability - 5(Logging using EFK) * Nov 8 Observability - 5(Logging using EFK) #logging #efk #monitoring #* How AI Tools Enhance the Effectiveness of SEO Strategies in Real-Time Juddiy Juddiy Juddiy Follow Nov 8 How AI Tools Enhance the Effectiveness of SEO Strategies in Real-Time #website #seo #learning #tooling Add Comment 4 min read * 2 Busa Ayim-Odu Busa Ayim-Odu Busa Ayim-Odu Follow Nov 8 * 2 #beginners #devops #learning #azure * Solving a DojoCode challenge in freefall Sebastian Sebastian Sebastian Follow Nov 7 Solving a DojoCode challenge in freefall #skydive #learning #programming #cloud Add Comment 1 min read Small prototype... easy coding flash cards on android taijidude taijidude taijidude Follow Nov 7 Small prototype... easy coding flash cards on android #python #termux #cli #learning * Celebrating 10K Followers: Our Journey Together 🎉 Alex (The Engineering Bolt) ⚡ Alex (The Engineering Bolt) ⚡ Alex (The Engineering Bolt) ⚡ Follow Nov 9 Celebrating 10K Followers: Our Journey Together 🎉 #* #learning 52 * Why I started today and why you should also.. Njoura7 Njoura7 Njoura7 Follow Nov 7 Why I started today and why you should also.. #beginners #programming #learning #webdev Add Comment 3 min read How can I upgrade my VPS hosting as my website grows? Shazaib Rafiq Shazaib Rafiq Shazaib Rafiq Follow Nov 7 How can I upgrade my VPS hosting as my website grows? #career #learning #vps Add Comment 5 min read \"Mastering Infrastructure Automation with Chef: A Comprehensive Guide for DevOps\" CHITRIKA BS CHITRIKA BS CHITRIKA BS Follow Nov 7 \"Mastering Infrastructure Automation with Chef: A Comprehensive Guide for DevOps\" #devops #chef #tooloverview #learning * Top Strategies to Successfully Sell Your API Dawid Makowski Dawid Makowski Dawid Makowski Follow Nov 8 Top Strategies to Successfully Sell Your API #webdev #programming #api #learning 3 * SEMANTIC HTML AND ACCESIBILITY felix kagecha felix kagecha felix kagecha Follow Nov 6 SEMANTIC HTML AND ACCESIBILITY #programming #coding #learning #* Deploying Applications in Amazon EKS with NGINX Ingress * Nov 6 Deploying Applications in Amazon EKS with NGINX Ingress #eks #nginx #ingress #learning Add Comment 3 min read Deploy Custom Application in Kubernetes using Helm * Nov 6 Deploy Custom Application in Kubernetes using Helm #helm #k8 #learning #devops Add Comment 2 min read Obteniendo una insignia Serverless de AWS kevin kevin kevin Follow Nov 6 Obteniendo una insignia Serverless de AWS #aws #serverless #* * 1 Busa Ayim-Odu Busa Ayim-Odu Busa Ayim-Odu Follow Nov 6 * 1 #beginners #devops #learning #azure * and Connecting to Linux Virtual Machine using a Public Key OLALEKAN john Ayansola OLALEKAN john Ayansola OLALEKAN john Ayansola Follow Nov 6 Creating and Connecting to Linux Virtual Machine using a Public Key #tutorial #devops #learning #cloud Add Comment 3 min read Markdown: My Beginner's Notes 📝✨ acbacavalcanti acbacavalcanti acbacavalcanti Follow Nov 6 Markdown: My Beginner's Notes 📝✨ #markdown #beginners #learning * Building a Social Impact Project with React, Node.js, and MySQL: My Experience and Lessons Learned Vaishnavi Sonawane Vaishnavi * 6 Building a Social Impact Project with React, Node.js, and MySQL: My Experience and Lessons Learned #programming #react #productivity #learning * How to create a Virtual Machine Scale Set in Azure Portal Adedapo Adedapo Adedapo Follow Nov 6 How to create a Virtual Machine Scale Set in Azure Portal #beginners #tutorial #learning #cloud * a 3D Game in Unity: From Concept to Completion Jacob aberasturi Jacob aberasturi Jacob aberasturi Follow Nov 6 Building a 3D Game in Unity: From Concept to Completion #beginners #learning #csharp #gamedev Add Comment 3 min read Hoppscotch: Your Browser-Based Solution for API Testing Kiran Johns Kiran Johns Kiran Johns Follow for Hoppscotch Nov 6 Hoppscotch: Your Browser-Based Solution for API Testing #webdev #beginners #opensource #learning 2 *d Observability - 6(Distributed Tracing using Jaeger) * Nov 6 Observability - 6(Distributed Tracing using Jaeger) #tracing #monitoring #devops #learning * Preparing for an OpenTelemetry Workshop Diana Diana Diana Follow Nov 6 Preparing for an OpenTelemetry Workshop #observability #learning #community #* Follow me on my journey learning Go Philip Perry Philip Perry Philip Perry Follow Nov 5 Follow me on my journey learning Go #go #learning #beginners #* Here’s a brief guide on creating a virtual machine using the Azure portal: Creating a Virtual Machine in Azure Portal Busa Ayim-Odu Busa Ayim-Odu Busa Ayim-Odu Follow Nov 5 Here’s a brief guide on creating a virtual machine using the Azure portal: Creating a Virtual Machine in Azure Portal #beginners #tutorial #devops #learning Add Comment 3 min read # Todo App with JWT-Based Authentication 🚀 Sowparna Shome Sowparna Shome Sowparna Shome Follow Nov 5 # Todo App with JWT-Based Authentication 🚀 #beginners #webdev #learning #typescript Add Comment 2 min read Loop haqida Munisa Kuranbekova Munisa Kuranbekova Munisa Kuranbekova Follow Nov 5 Loop haqida #* Maps in Go: Your Handy Lookup Tables 🗺️ Bruno Ciccarino λ Bruno Ciccarino λ Bruno Ciccarino λ Follow for learn go Nov 9 Maps in Go: Your Handy Lookup Tables 🗺️ #go #learning #programming #devlive 7 * Self-Learning vs Formal Education in iOS Development Jacob aberasturi Jacob aberasturi Jacob aberasturi Follow Nov 6 Self-Learning vs Formal Education in iOS Development #ios #swift #programming #learning * TryHackMe API Wizard Breach Walkthrough haXarubiX haXarubiX haXarubiX Follow Nov 5 TryHackMe API Wizard Breach Walkthrough #cybersecurity #tutorial #learning Add Comment 4 min read Daily.rust day 2 xavier2code xavier2code xavier2code Follow Nov 5 Daily.rust day 2 #rust #* 1 min read Daliy.rust day 3 xavier2code xavier2code xavier2code Follow Nov 5 Daliy.rust day 3 #rust #beginners #* Daily.rust day 1 xavier2code xavier2code xavier2code Follow Nov 5 Daily.rust day 1 #rust #* 1 min read How to protect Intellectual Property Rights in software * Shinetech Software Follow Nov 5 How to protect Intellectual Property Rights in software #career #learning #* 3 min read Как бесплатно зайти в разработку Maxim Thomas Maxim Thomas Maxim Thomas Follow Nov 5 Как бесплатно зайти в разработку #beginners #learning #programming #* 1 min read Request - * 9 Request - Custom Hooks #webdev #react #* 1 min read GitOps: A Strategic Advantage for Automation, Collaboration, and Cost Savings * Nov 4 GitOps: A Strategic Advantage for Automation, Collaboration, and Cost Savings #git #gitops #devops #learning Add Comment 6 min read Como funcionam Bindings no KnockoutJs Lucas Teixeira dos Santos Santana Lucas Teixeira dos Santos Santana Lucas Teixeira dos Santos Santana Follow Nov 4 Como funcionam Bindings no KnockoutJs #javascript #braziliandevs #learning #knockoutjs Add Comment 4 min read EIP-7702: Along the Path to Account Abstraction Alexandra Alexandra Alexandra Follow Nov 4 EIP-7702: Along the Path to Account Abstraction #web3 #blockchain #ethereum #learning Add Comment 4 min read Why Should I use Nosql? merve merve merve Follow Nov 4 Why Should I use Nosql? #nosql #database #* 1 min read Fleet & CIS Benchmarks: Simplified, Cross-Platform Security * Nov 4 Fleet & CIS Benchmarks: Simplified, Cross-Platform Security #security #cis #cloud #learning Add Comment 3 min read Your Insight Can Transform Developer Learning! KC KC KC Follow Nov 4 Your Insight Can Transform Developer Learning! #webdev #developers #* Understanding the Meaning of Re-Crawling from an SEO Perspective Juddiy Juddiy Juddiy Follow Nov 4 Understanding the Meaning of Re-Crawling from an SEO Perspective #website #seo #* Shopify Flow Tutorial - How to automatically send gift cards? * Shinetech Software Follow Nov 4 Shopify Flow Tutorial - How to automatically send gift cards? #shopify #career #tutorial #* Observability - 4(Custom Metrics Instrumentation) * Nov 5 Observability - 4(Custom Metrics Instrumentation) #observability #metrics #learning #beginners * Is Nursing Easy or Hard? A Balanced Look Ali Ch Ali Ch Ali Ch Follow Nov 8 Is Nursing Easy or Hard? A Balanced Look #webdev #beginners #career #learning *... #discuss Happy? Halloween? 🤔 11 comments How to Make Good Coffee with Milk: A Step-by-Step Guide New 5 Ways Workflow Automation Powers Global Trade Efficiency New Why you should have a home server 55 comments What you learning about this weekend? 10 comments Automate Logistics Operations with AI Workflow New C# { get; init; } New 5 Warning Signs Your Customs Process Needs Document Automation New Leveraging AI in Clean Tech – How We Can Build a Greener Future Together New What are you learning about this weekend? 🧠 12 * 1 Year of Consistent LeetCoding Top 10 Modern JavaScript Patterns for 2025 How Senior Software Engineers Document Their Project 20 Git Command-Line * Learn AWS DevOps from Zero: A Complete Beginner’s Guide 8 Open-Source Tools to grow your app and reach new markets! 🔥 From Junior to Senior Developer: Essential Skills You Need in 2024 On Learning Vim 14 Case Studies: Master System Design in a Month Should web designers learn JavaScript or CSS? Balancing AWS Certification and Parenting: A Guide for Busy Professionals Expo/React Native Drag and Drop Example A straightforward guide for Go channel One Practical Application of Next.JS Parallel and Intercepting Routes: Better UX with Modals. How to Build a Face Recognition System Using FaceNet in Python How to Record Audio in Python: Automatically Detect Speech and Silence Como iniciar un Side-Project Top tips to pass the AWS AI Practitioner Exam How to adapt an autocomplete/select field to work with server-side filtering and pagination Let's understand the difference between CJS & MJS recently queried Clean Architecture Python to .exe Dart String to Int Algorithms for Beginner*nsor Neon * ",
    "url": "https://dev.to/t/learning"
  },
  {
    "body": "* Linux Follow Hide What are clouds made of? Linux servers, mostly. * Articles and discussions should be directly related to Linux operating systems. Questions are encouraged (see the #help tag). Content with the main focus on bash or the Unix shell is permitted, but don't forget to add the #bash or #unix tag as you see it fitting. Articles mainly about WSL should be tagged with #wsl instead of #linux. about #linux Linux is a family of free and open source operating systems built on top of the Linux kernel, first released on 1991 by Linus Torvalds. tag moderators 7586 Posts Published Older #linux *26 *. Step-by-Step Guide: Setting Up and Securing a Linux VM with SSH Key Authentication Bolanle Ayo-Oyeledun Bolanle Ayo-Oyeledun Bolanle Ayo-Oyeledun Follow Nov 9 Step-by-Step Guide: Setting Up and Securing a Linux VM with SSH Key Authentication #azure #linux #virtualmachine #ssh 4 * Automate Database Backup with Bash, Python, and PowerShell Oliver Bennet Oliver Bennet Oliver Bennet Follow for GraphPe Nov 9 Automate Database Backup with Bash, Python, and PowerShell #bash #linux #programming #tutorial * Creating and Connecting to a Linux VM using a Public Key. Ayodeji Alofun Ayodeji Alofun Ayodeji Alofun Follow Nov 8 Creating and Connecting to a Linux VM using a Public Key. #azure #linux #ubuntu #learning * Just saying I've been using Linux for the last 8 weeks and Adam Adam Adam Follow Nov 9 Just saying I've been using Linux for the last 8 weeks and #linux #popos #newbie * CREATING A LINUX VIRTUAL MACHINE USING AZURE PORTAL Ikuesan Adeola Ikuesan Adeola Ikuesan Adeola Follow Nov 8 CREATING A LINUX VIRTUAL MACHINE USING AZURE PORTAL #virtualmachine #linux #ubuntu Add Comment 2 min read Dual boot linux learning UEFI vs MBR Anuj Singh Tomar Anuj Singh Tomar Anuj Singh Tomar Follow Nov 8 Dual boot linux learning UEFI vs MBR #linux Add Comment 1 min read How to undo a git pull command Alexandre Calaça Alexandre Calaça Alexandre Calaça Follow Nov 8 How to undo a git pull command #webdev #git #alexandrecalaca #linux Add Comment 2 min read คำสั่ง tr สำหรับแปลงหรือลบตัวอักษร Anuchit Prasertsang Anuchit Prasertsang Anuchit Prasertsang Follow Nov 8 คำสั่ง tr สำหรับแปลงหรือลบตัวอักษร #linux #cli * Unlock Your Azure Linux VM’s Potential with Proactive Monitoring Oluwatobiloba Akinbobola Oluwatobiloba Akinbobola Oluwatobiloba Akinbobola Follow Nov 9 Unlock Your Azure Linux VM’s Potential with Proactive Monitoring #azure #linux #virtualmachine #cloudcomputing 2 * Synchronized 变量在不同操作系统的不同行为 Ting Ting Ting Follow Nov 7 Synchronized 变量在不同操作系统的不同行为 #python #linux #multiplatform #macos Add Comment 1 min read The wicked path of independent Linux Distro Yappaholic The Junior Yappaholic The Junior Yappaholic The Junior Follow Nov 7 The wicked path of independent Linux Distro #linux #zig #diy #lfs * How to install Ferdium on Linux Kelvin Hey Kelvin Hey Kelvin Hey Follow Nov 7 How to install Ferdium on Linux #ferdium #linux #browser #* 1 min read OSI open source Explained aniket purohit aniket purohit aniket purohit Follow Nov 7 OSI open source Explained #linux Add Comment 3 min read My Linux Journey C043 C043 C043 Follow Nov 7 My Linux Journey #linux #bash #ssh #cli * From License to Freedom: Embracing Open Source Forks Knowing What to Expect hmorris3293 hmorris3293 hmorris3293 Follow Nov 6 From License to Freedom: Embracing Open Source Forks Knowing What to Expect #opensource #linux Add Comment 5 min read Deploying WordPress on Ubuntu VM with LAMP Stack: A Step-by-Step Guide Joseph Ibeh Joseph Ibeh Joseph Ibeh Follow Nov 6 Deploying WordPress on Ubuntu VM with LAMP Stack: A Step-by-Step Guide #ubuntu #wordpress #linux Add Comment 5 min read Performance Issues on Linux instances dinesh reddy dinesh reddy dinesh reddy Follow Nov 6 Performance Issues on Linux instances #devops #aws #linux #devchallenge *** * Kerberos: How It Manages Authentication and Encryption on Linux Systems * Aditya Pratap Bhuyan Follow Nov 6 Understanding Kerberos: How It Manages Authentication and Encryption on Linux Systems #kerberos #linux Add Comment 7 min read Shell Scripting: Writing and Running Your First Script Basanta Bhusan Khadka Basanta Bhusan Khadka Basanta Bhusan Khadka Follow Nov 5 Shell Scripting: Writing and Running Your First Script #devops #linux #bash #shellscripting Add Comment 2 min read LINUX CHALLENGE, DAY 4 Blessing Ndubuisi Blessing Ndubuisi Blessing Ndubuisi Follow Nov 9 LINUX CHALLENGE, DAY 4 #devops #linux #security * A Comparative Analysis between RK3588 and RK3576 Chips: Unveiling the Technological Distinctions as-jackson as-jackson as-jackson Follow Nov 5 A Comparative Analysis between RK3588 and RK3576 Chips: Unveiling the Technological Distinctions #opensource #linux Add Comment 6 min read VPS Servers for Linux - Everything You Need to Know SSD Nodes SSD Nodes SSD Nodes Follow Nov 5 VPS Servers for Linux - Everything You Need to Know #linux #server #vps #ssdnodes Add Comment 9 min read 25 Advanced Bash Commands Every Linux User Should Know Oliver Bennet Oliver Bennet Oliver Bennet Follow Nov 9 25 Advanced Bash Commands Every Linux User Should Know #discuss #bash #linux #ubuntu 2 *d Create and Deploy a Linux Virtual Machine on Azure using a Public Key Oluwafemi Adebayo Oluwafemi Adebayo Oluwafemi Adebayo Follow Nov 8 Create and Deploy a Linux Virtual Machine on Azure using a Public Key #devops #cloud #azure #linux 1 reaction 2 comments 3 min read PAPPL Scan API Bridging: GSoC 2024 Project Report 🖨️🧑‍💻 Akarshan Kapoor Akarshan Kapoor Akarshan Kapoor Follow Nov 4 PAPPL Scan API Bridging: GSoC 2024 Project Report 🖨️🧑‍💻 #linux #opensource #gsoc24 Add Comment 4 min read LINUX CHALLENGE DAY 2 Blessing Ndubuisi Blessing Ndubuisi Blessing Ndubuisi Follow Nov 4 LINUX CHALLENGE DAY 2 #devops #linux #ubuntu Add Comment 1 min read Confusing JRE and JDK package naming in Linux Distros Amit Nandi Amit Nandi Amit Nandi Follow Nov 4 Confusing JRE and JDK package naming in Linux Distros #linux #java Add Comment 1 mi* Using tunneling via Cloudflare in your self-hosted applications Blacktrecks Blacktrecks Blacktrecks Follow Nov 4 Using tunneling via Cloudflare in your self-hosted applications #docker #containers #linux Add Comment 1 min read How to Install WhatsApp on Linux Using Snapd as WhatsDesk: A Complete Guide Khuram Murad Khuram Murad Khuram Murad Follow Nov 4 How to Install WhatsApp on Linux Using Snapd as WhatsDesk: A Complete Guide #whatsapp #alnafi #linux #snapd Add Comment 3 min read Linux Installation Fest - A detailed Guide to install Linux Abhinav Pandey Abhinav Pandey Abhinav Pandey Follow Nov 7 Linux Installation Fest - A detailed Guide to install Linux #linux #learning #beginners #tutorial 6 * DEV OPS JOURNEY nishant yadav nishant yadav nishant yadav Follow Nov 3 DEV OPS JOURNEY #devops #linux #programming #shell * How to view manually installed packages in ubuntu Hariharan Hariharan Hariharan Follow Nov 2 How to view manually installed packages in ubuntu #linux #ubuntu #aptitude #* FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory on Digital OceanDroplet Sammy Barasa Sammy Barasa Sammy Barasa Follow Nov 2 FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory on Digital OceanDroplet #webdev #backenddevelopment #linux Add Comment 3 min read Profundizando en la Terminal: Entendiendo el Prompt y la Anatomía de un Comando Jonathan Montero Jonathan Montero Jonathan Montero Follow Nov 2 Profundizando en la Terminal: Entendiendo el Prompt y la Anatomía de un Comando #linux #terminal #cli #bash Add Comment 3 min read Why Both return and exit() Work in main() JunyaU JunyaU JunyaU Follow Nov 6 Why Both return and exit() Work in main() #c #development #linux 6 *d Automate Your Scripts with Systemd Services: Benefits and Step-by-Step Guide Piyush Bagani Piyush Bagani Piyush Bagani Follow Nov 2 Automate Your Scripts with Systemd Services: Benefits and Step-by-Step Guide #automation #linux #cli Add Comment 4 min read Docker Installation on Linux Megha Sharma Megha Sharma Megha Sharma Follow Nov 1 Docker Installation on Linux #docker #linux #devops #* Mseal in Linux: An un-hackable solution? Tawhid Tawhid Tawhid Follow Oct 31 Mseal in Linux: An un-hackable solution? #linux #opensource #security * Debian (Sid|Unstable) with Gnome 47 on X11 Jeansen Jeansen Jeansen Follow Oct 30 Debian (Sid|Unstable) with Gnome 47 on X11 #debian #gnome #linux Add Comment 1 min read How to connect a Linux server via a Bash script. Ikechukwu Kelechi Alexander Ikechukwu Kelechi Alexander Ikechukwu Kelechi Alexander Follow Oct 30 How to connect a Linux server via a Bash script. #linux #ubuntu #cloud #* Debian in WSL not Ubuntu TalePunk TalePunk TalePunk Follow Nov 3 Debian in WSL not Ubuntu #linux #programming #coding #webdev * MySQL Database Management | Comprehensive MySQL Tutorial Labby Labby Labby Follow for LabEx Oct 28 MySQL Database Management | Comprehensive MySQL Tutorial #labex #linux #* 9 min read Dangerous Linux Configurations You Must Avoid for Secure Systems (Deep Dive) karthick-dkk karthick-dkk karthick-dkk Follow Oct 28 Dangerous Linux Configurations You Must Avoid for Secure Systems (Deep Dive) #linux #devops #ubuntu #systems Add Comment 1 min read Week 2 in DevOps: From Linux Basics to Shell Scripting Aman Deol Aman Deol Aman Deol Follow Oct 28 Week 2 in DevOps: From Linux Basics to Shell Scripting #devops #cloud #shell #linux * How to Create a Linux VM using Custom Templates Onyemachi Doris Onyemachi Doris Onyemachi Doris Follow Oct 27 How to Create a Linux VM using Custom Templates #beginners #aws #cloud #linux * Linux Text Cutting: Mastering Text Manipulation in the Wizarding World Labby Labby Labby Follow for LabEx Oct 26 Linux Text Cutting: Mastering Text Manipulation in the Wizarding World #labex #linux #coding #* Building a Bible Publication Engine Jørn Andre Jørn Andre Jørn Andre Follow Oct 30 Building a Bible Publication Engine #python #mysql #linux * My First Week in DevOps: Starting with Linux Aman Deol Aman Deol Aman Deol Follow Oct 26 My First Week in DevOps: Starting with Linux #cloud #devops #linux #* Debian 12 … is amazing! How to: Create your custom codehouse [Part 2/4] Anna Anna Anna Follow Nov 8 Debian 12 … is amazing! How to: Create your custom codehouse [Part 2/4] #debian #lvm #partitioning #linux 1 reaction Add Comment 31 min read Proxmox HugePages for VMs Serge Logvinov Serge Logvinov Serge Logvinov Follow Oct 25 Proxmox HugePages for VMs #proxmox #linux #cloud Add Comment 4 * Linux Device Drivers Sandipan Roy Sandipan Roy Sandipan Roy Follow Oct 25 Unlocking the Power of Linux Device Drivers #cpp #security #linux #programming Add Comment 7 min read Printing coredumps automatically with systemd and ReceiptIO JackMacWindows JackMacWindows JackMacWindows Follow Oct 25 Printing coredumps automatically with systemd and ReceiptIO #linux #fun Add Comment 8 min read Linux VM Access Simplified: Connect Securely with SSH Keys Oluwatobiloba Akinbobola Oluwatobiloba Akinbobola Oluwatobiloba Akinbobola Follow Nov 7 Linux VM Access Simplified: Connect Securely with SSH Keys #virtualmachine #linux #cloud #azure 7 * Disk space management in Linux: 3 Easy steps Jash Gopani Jash Gopani Jash Gopani Follow Oct 23 Disk space management in Linux: 3 Easy steps #linux #devops #cli #cloud Add Comment 2 min read Proxmox cpu affinity for VMs Serge Logvinov Serge Logvinov Serge Logvinov Follow Oct 25 Proxmox cpu affinity for VMs #proxmox #cloud #linux Add Comment 5 min read Day 14/90: Essential Linux & Git-GitHub Cheat Sheet 📝 #90DaysOfDevOps Kanav Gathe Kanav Gathe Kanav Gathe Follow Oct 23 Day 14/90: Essential Linux & Git-GitHub Cheat Sheet 📝 #90DaysOfDevOps #linux #git #devops #* Day 11/90: Error Handling in Shell Scripts 🛡️ #90DaysOfDevOps Kanav Gathe Kanav Gathe Kanav Gathe Follow Oct 23 Day 11/90: Error Handling in Shell Scripts 🛡️ #90DaysOfDevOps #bash #devops #linux #scripting Add Comment 1 min read Day 7/90: Package Manager and Systemctl in Linux 📦 #90DaysOfDevOps Kanav Gathe Kanav Gathe Kanav Gathe Follow Oct 23 Day 7/90: Package Manager and Systemctl in Linux 📦 #90DaysOfDevOps #linux #devops #docker #jenki*s the best OS (for developers) Mario Rosell Mario Rosell Mario Rosell Follow Nov 7 Whats the best OS (for developers) #os #linux #microsoft #development 1 reaction Add C* 25 Advanced Bash Commands Every Linux User Should Know New t* install all the tools you need and want in Kali Linux with one command (From top 10 to default to everything) Linux, I Choose You! 🐧 Top 5 reverse proxies - Which one should you choose? Linux on Apple Silicon: The good, the bad, and the ugly How to Install the Cursor (The AI Code Editor) on Ubuntu 24.04: A Simple Guide Understanding the Linux Filesystem: An In-Depth Guide for DevOps Engineers How to Kill a Process Occupying a Port on Windows, macOS, and Linux Run a Virtual Machine in Your Browser How to Set Up a PostgreSQL Database on a VPS and Access It Remotely Top 5 Cheap VPS Providers How I Built an AI Assistant for my Operating System Dual booting Windows and Ubuntu: is it even worth it with WSL? Docker Desktop is not working on Ubuntu 24.04 LTS ? Stop the cursor from jumping to the corner of the screen on a Lenovo Yoga laptop Exploring the Best Lightweight Desktop Environments for Ubuntu and Other Popular Linux Distributions 19 Advance Linux Commands You Should Know! Zero Downtime Deployment with Docker Compose in an OCI VPS using GitHub Actions Make Wezterm Mimic Tmux How to add swap space in Linux? Update JSON file using Terminal or bash script recently queried Fedora vs Ubuntu Linux Bash Commands Learn Linux Peppermint Linux OS Pure OS SSH Port Forwarding Windows 10 vs Linux Dual Boot Ubuntu on Mac Synaptic Package Manager SSH Permission Denied (Publickey) Dynamic Ssh Python Execute Shell Command How to Update Python Makefile C++ GitHub Desktop Linux Git Checkout Tag Change Permissions Linux History Command Linux * * ",
    "url": "https://dev.to/t/linux"
  },
  {
    "body": "* MongoDB Follow Hide A popular NoSQL database * This tag is specially for MongoDB stuff. about #mongodb MongoDB is a document database with the scalability and flexibility that you want with the querying and indexing that you need. More information at mongodb.com tag moderators 2733 Posts Published Older #mongodb posts 1 2 3 4 5 6 7 8 9 *. Common Myths About Mongoose Nozibul Islam Nozibul Islam Nozibul Islam Follow Nov 9 Common Myths About Mongoose #javascript #database #mongodb #mongoose 21 *d * 1/* End to End Data Engineering OTP Pipeline Project Cey Cey Cey Follow Nov 4 End to End Data Engineering OTP Pipeline Project #docker #airflow #kafka #mongodb Add Comment 3 min read Demonstrating Persistence vs. Non-Persistence in Kubernetes with MongoDB Dmi*off Follow Nov 2 Demonstrating Persistence vs. Non-Persistence in Kubernetes with MongoDB #kubernetes #devops #mongodb #* Deploying a MongoDB Collection Generator on Kubernetes Dmi*off Follow Nov 1 Deploying a MongoDB Collection Generator on Kubernetes #mongodb #kubernetes #python #database Add Comment 3 min read How to self-host MongoDB on a Raspberry Pi 4 The Smartbug The Smartbug The Smartbug Follow Nov 6 How to self-host MongoDB on a Raspberry Pi 4 #mongodb #database #raspberrypi #docker Add Comment 2 min read *. * Oct 31 *. #node #mongodb #javascript #express Add Comment 6 min read 📚 Understand More About RDBMS and NoSQL Through Analyzing PostgreSQL and MongoDB * Oct 28 📚 Understand More About RDBMS and NoSQL Through Analyzing PostgreSQL and MongoDB #webdev #database #postgres #mongodb 1 reaction Add Comment 12 min read 5 Quick And Easy MongoDB Optimizations (part 1) Sohail Jafri Sohail Jafri Sohail Jafri Follow Nov 8 5 Quick And Easy MongoDB Optimizations (part 1) #database #mongodb #mongoose #javascript 38 reactions 5 comments 3 min read Mongoose Interview Questions Nozibul Islam Nozibul Islam Nozibul Islam Follow Nov 8 Mongoose Interview Questions #mongodb #mongoose #webdev #programming 21 reactions 4 comments 11 min read Dockerizing an Express App with MongoDB Database Rakib Hasan Rakib Hasan Rakib Hasan Follow Nov 8 Dockerizing an Express App with MongoDB Database #docker #dockerize #express #mongodb * Don’t Fall Into the Trap of Too Many Indexes! 🤕 ATUL KUMAR SINGH ATUL KUMAR SINGH ATUL KUMAR SINGH Follow Oct 21 Don’t Fall Into the Trap of Too Many Indexes! 🤕 #mongodb #node #fullstackdevelopment #databaseoptimization Add Comment 1 min read Wabe - Modern TypeScript backend as a service mr palixir mr palixir mr palixir Follow Oct 18 Wabe - Modern TypeScript backend as a service #ty #graphql #mongodb #backend Add Comment 1 min read Mongoose * 17 Mongoose #mongoose #mongodb #*nt 4 min read DATA MINING AND VISUALISATION. Dion Nekesa Dion Nekesa Dion Nekesa Follow Oct 16 DATA MINING AND VISUALISATION. #datascience #beginners #mongodb #git Add Comment 2 min read Overcoming MongoDB Limitations with Fauna Kirk Kirkconnell Kirk Kirkconnell Kirk Kirkconnell Follow Oct 16 Overcoming MongoDB Limitations with Fauna #mongodb #fauna #database #nosql Add Comment 6 min read 💡𝗘𝘃𝗲𝗿 𝗳𝗼𝘂𝗻𝗱 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 𝗱𝗲𝗯𝗮𝘁𝗶𝗻𝗴 𝗯𝗲𝘁𝘄𝗲𝗲𝗻 𝘂𝘀𝗶𝗻𝗴 𝗮𝗿𝗿𝗮𝘆𝘀 𝗼𝗿 𝘀𝗲𝗽𝗮𝗿𝗮𝘁𝗲 𝗱𝗼𝗰𝘂𝗺𝗲𝗻𝘁𝘀 𝗶𝗻 𝗠𝗼𝗻𝗴𝗼𝗗𝗕? Apurv Upadhyay Apurv Upadhyay Apurv Upadhyay Follow Oct 16 💡𝗘𝘃𝗲𝗿 𝗳𝗼𝘂𝗻𝗱 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 𝗱𝗲𝗯𝗮𝘁𝗶𝗻𝗴 𝗯𝗲𝘁𝘄𝗲𝗲𝗻 𝘂𝘀𝗶𝗻𝗴 𝗮𝗿𝗿𝗮𝘆𝘀 𝗼𝗿 𝘀𝗲𝗽𝗮𝗿𝗮𝘁𝗲 𝗱𝗼𝗰𝘂𝗺𝗲𝗻𝘁𝘀 𝗶𝗻 𝗠𝗼𝗻𝗴𝗼𝗗𝗕? #webdev #programming #mongodb #database Add Comment 1 min read MongoDB Atlas * 16 MongoDB Atlas #mongodb #backenddevelopment #database #w* read Using Dockerfile and Docker Compose For Local Development with Node.js, MongoDB and MongoExpress Otobong Edoho Otobong Edoho Otobong Edoho Follow Oct 15 Using Dockerfile and Docker Compose For Local Development with Node.js, MongoDB and MongoExpress #docker #mongodb #containers #devops Add Comment 6 min read I Fumbled on a Next.js MongoDB Error and Learned the Key Differences Between Mongoose and MongoClient lonka pardhu lonka pardhu lonka pardhu Follow Oct 19 I Fumbled on a Next.js MongoDB Error and Learned the Key Differences Between Mongoose and MongoClient #webdev #mongoose #mongoclient #mongodb * MongoDB Installation on Windows: Your 2024 Guide Arham Rumi Arham Rumi Arham Rumi Follow Oct 14 MongoDB Installation on Windows: Your 2024 Guide #mongodb #database #productivity #learning Ad*h MongoDB Compass: A GUI for MongoDB Dmi*off Follow Nov 1 Getting Started with MongoDB Compass: A GUI for MongoDB #mongodb #monitoring #database #devops 8 *d Bootcamping 01: An Unexpected Behavior of Mongoose Alef Lewitt Alef Lewitt Alef Lewitt Follow Oct 10 Bootcamping 01: An Unexpected Behavior of Mongoose #findone #mongoose #mongodb #bootcamp Add Comment 2 min read CRUD Operations: What Are They, and How Can I Use Them? wendyver wendyver wendyver Follow Oct 7 CRUD Operations: What Are They, and How Can I Use Them? #javascript #mongodb #node #express Add Comment 3 min read So long DocumentDB, hello MongoDB Atlas Felipe Malaquias Felipe Malaquias Felipe Malaquias * Oct 27 So long DocumentDB, hello MongoDB Atlas #mongodb #aws #docdb #database 1 reaction Add Comment 15 min read Testcontainers MongoDB ReplicaSet Carc Carc Carc Follow Oct 24 Testcontainers MongoDB ReplicaSet #java #mongodb #docker #testing * Mongogrator - a MongoDB migration tool for TS & JS Youssef Youssef Youssef Follow Oct 1 Mongogrator - a MongoDB migration tool for TS & JS #javascript #mongodb #typescript #cli Add Comment 3 min read Redis caching with Mongoose Ayanabilothman Ayanabilothman Ayanabilothman Follow Oct 1 Redis caching with Mongoose #redis #caching #node #mongodb * started on Spring boot and MongoDB - Part 2 Irvin Gil Irvin Gil Irvin Gil Follow Oct 5 Getting started on Spring boot and MongoDB - Part 2 #springboot #mongodb #* 7 min read MongoDB Performance Tuning for Java Developers Matheus Martinello Matheus Martinello Matheus Martinello Follow Sep 30 MongoDB Performance Tuning for Java Developers #java #mongodb #springboot #webdev Add Comment 3 min read A Generic Repository Pattern for NestJS with Mongoose for MongoDB Mofajjal Rasul Mofajjal Rasul Mofajjal Rasul Follow Nov 3 A Generic Repository Pattern for NestJS with Mongoose for MongoDB #nestjs #mongodb #generic #repository 2 * [DAY 118-122] I learned full-stack by building my 2nd app Thomas Cansino Thomas Cansino Thomas Cansino Follow Sep 30 [DAY 118-122] I learned full-stack by building my 2nd app #react #node #mongodb #express 6 * Node.js pra leigos - MongoDB e Fastify Dev Doido Dev Doido Dev Doido Follow Sep 30 Node.js pra leigos - MongoDB e Fastify #mongodb #node #javascript #braziliandevs Add Comment 38 min read MongoDB made simple: a basic guide to get started mahugnon dousso mahugnon dousso mahugnon dousso Follow Oct 1 MongoDB made simple: a basic guide to get started #database #datascience #mongodb Add Comment 1 min read MongoDB schema design - Key excerpts Le Vuong Le Vuong Le Vuong Follow Sep 30 MongoDB schema design - Key excerpts #mongodb #schemadesign #bestpractices * Introduction to Mongo Database Madhav Ganesan Madhav Ganesan Madhav Ganesan Follow Oct 29 Introduction to Mongo Database #mongodb #programming #database #webdev 10 *d 🌐 Building Golang RESTful API with Gin, MongoDB 🌱 * Oct 29 🌐 Building Golang RESTful API with Gin, MongoDB 🌱 #webdev #go #mongodb #api Add Comment 9 min read ServBay New Features: MongoDB Integration, CORS is Ready Se* 28 ServBay New Features: MongoDB Integration, CORS is Ready #mongodb #webdev #beginners #* 2 min read ⚡ 🚀 Quickly Start Dev Environment For MySQL, PostgreSQL, MongoDB, Redis, and Kafka Using Docker Compose 🔥 * Oct 27 ⚡ 🚀 Quickly Start Dev Environment For MySQL, PostgreSQL, MongoDB, Redis, and Kafka Using Docker Compose 🔥 #docker #mysql #postgres #mongodb * Simple mongo tutorial Le Vuong Le Vuong Le Vuong Follow Oct 26 Simple mongo tutorial #mongodb #simple #* 2 min read MINDS SDK GOLANG Avradeep Nayak Avradeep Nayak Avradeep Nayak Follow Oct 5 MINDS SDK GOLANG #go #mongodb #api #postman *ing Complex Semantic Search with MongoDB Shannon Lal Shannon Lal Shannon Lal Follow Oct 24 Implementing Complex Semantic Search with MongoDB #ai #mongodb #openai #vectordatabase 3 * This is how I built an analytic tool for Digital Products Igor Boky Igor Boky Igor Boky Follow Oct 23 This is how I built an analytic tool for Digital Products #javascript #mongodb #buildinpublic 19 * Persistent Storage vs. Cache Storage: Understanding the Differences and Use Cases Mohamed Thanveer Mohamed Thanveer Mohamed Thanveer Follow Sep 20 Persistent Storage vs. Cache Storage: Understanding the Differences and Use Cases #mongodb #redis #database #*mment 3 min read MongoDB GridFS Igor Rudel Igor Rudel Igor Rudel Follow Sep 18 MongoDB GridFS #nosql #mongodb #springboot #gridfs Add Comment 1 min read MongoDB vs. Mongoose: Understanding Their Roles and Differences Kamlesh Gupta Kamlesh Gupta Kamlesh Gupta Follow Sep 18 MongoDB vs. Mongoose: Understanding Their Roles and Differences #mongodb #mongoose #javascrip* System Design: SQL vs NoSQL databases and what distinguishes them. Nandan Kumar Nandan Kumar Nandan Kumar Follow Oct 22 System Design: SQL vs NoSQL databases and what distinguishes them. #systemdesign #database #mongodb #sql Add Comment 2 min read How to Deploy MongoDB on AWS using Terraform: as a Service on ECS or on DocumentDB amlan amlan amlan Follow Oct 22 How to Deploy MongoDB on AWS using Terraform: as a Service on ECS or on DocumentDB #aws #devops #terraform #mongodb * Serverless Architecture with Next.js 14 and Next.js Actions: A Practical Guide saurabh kamble saurabh kamble saurabh kamble Follow Oct 21 Serverless Architecture with Next.js 14 and Next.js Actions: A Practical Guide #nextjs #mongodb #serverless #*t 3 min read How to Connect a React App with MongoDB: A Complete Guide Ashis*apati Follow Oct 21 How to Connect a React App with MongoDB: A Complete Guide #mongodb #node #fullstack #react 5 *d MongoDB - Essential Things to Know * Oct 20 MongoDB - Essential Things to Know #mongodb #nosql #nonreltionaldatabase #database *ad Mastering MongoDB Aggregation: A Journey from Fundamentals to Advanced Optimization Meqdad Darwish Meqdad Darwish Meqdad Darwish Follow Oct 20 Mastering MongoDB Aggregation: A Journey from Fundamentals to Advanced Optimization #database #mongodb #nosql #queryoptimization Add Comment 7 min read We finally have a fullstack framework for MongoDB ringeringeraja ringeringeraja ringeringeraja Follow Sep 17 We finally have a fullstack framework for MongoDB #typescript #mongodb #prisma #mongoose Add Comment 2 min read My stack for online store on NextJS Petr Tcoi Petr Tcoi Petr Tcoi Follow Sep 16 My stack for online store on NextJS #nextjs #mongodb #tailwindcss * a Custom Backend * Ashis*apati Follow Oct 18 Building a Custom Backend * #node #backend #javascript #mongodb 7 *d 📝 30 COMMON MONGODB INTERVIEW QUESTIONS 🌱 * Oct 18 📝 30 COMMON MONGODB INTERVIEW QUESTIONS 🌱 #mongodb #interview #webdev #beginners Add Comment 5 min read Best Practices When Working With MongoDb in .NET Anton Martyniuk Anton Martyniuk Anton Martyniuk Follow Oct 17 Best Practices When Working With MongoDb in .NET #programming #softwaredevelopment #dotnet #mongodb Add Comment 5 min read The Adventures of Blink S2e6: Integrating All the Things Ben Link Ben Link Ben Link Follow Oct 17 The Adventures of Blink S2e6: Integrating All the Things #python #buildinpublic #mongodb #api Add Comment 4 min read TEMPLINK Single, Secure link to access multiple files in seconds Gulshan Aggarwal Gulshan Aggarwal Gulshan Aggarwal Follow Oct 13 TEMPLINK Single, Secure link to access multiple files in seconds #pinatachallenge #nextjs #mongodb #javascript 21 *d Migrando para o Atlas com Live Migrate Paulo Benjamin Paulo Benjamin Paulo Benjamin Follow Oct 16 Migrando para o Atlas com Live Migrate #mongodb #altaslivemigrate #datamigration 2 *d Online marketplace MVP - Building a two-sided marketplace MVP using Next.js and MongoDB - From idea to launch razz1000 razz1000 razz1000 Follow Oct 30 Online marketplace MVP - Building a two-sided marketplace MVP using Next.js and MongoDB - From idea to launch #marketplace #mvp #nextjs #mongodb Add Comment 7 min read How to Locate MongoDB Log Files on macOS Using the find Command FOLASAYO SAMUEL OLAYEMI FOLASAYO SAMUEL OLAYEMI FOLASAYO SAMUEL OLAYEMI Follow Oct 30 How to Locate MongoDB Log Files on macOS Using the find Command #mongodb #techtipsandtricks Add Comment 3 min read 💻 Common MongoDB Commands 🌱 * Oct 30 💻 Common MongoDB Commands 🌱 #webdev #mongodb #cli #tutorial *... #discuss Share your MongoDB Atlas Hackathon Updates! 17 comments How to Secure Your MongoDB Database Against Attack New ORM vs Core Database Driver New How to create a Blogging Website with Express, NodeJs and MongoDB New How do you handle many-to-many relationships in Mongo? 8 comments Please Explain me 😅 How does the mongoose virtual() work? 4 comments Best option to start a new big project - NodeJS 1 comment Create CRUD App with Spring Boot and MongoDB New How do you design your noSQL database for RBAC system? 2 comments What are UNIQUE index limitations? New trending guides/resources 5 Cheap Ways to Host MongoDB Real-Time Data Processing with MongoDB Change Streams and Python Clustered index vs Non-clustered and how they look like in MongoDB Testcontainers MongoDB ReplicaSet Improving MongoDB Operations in a Go Microservice: Best Practices for Optimal Performance A Generic Repository Pattern for NestJS with Mongoose for MongoDB 3 Ways to Leverage MongoDB Atlas for Data Transfer Cost Optimization Building a Custom Backend * Mongoose Interview Questions In the land of LLMs, can we do better mock data generation? How to Connect a React App with MongoDB: A Complete Guide Mocking an LLM Embedder Targeting MongoDB Atlas Implementing Complex Semantic Search with MongoDB Easy Web App Deployment: Python Flask, MongoDB, and Nginx with Docker Compose 🚀🐍 Use Atlas Search (MongoDB) in a Next.js app using Prisma ORM Serverless Architecture with Next.js 14 and Next.js Actions: A Practical Guide [DAY 113-117] I built 5 backend projects to acquire a backend certificate The Power of exec() in Mongoose: Unlocking Better Query Execution Maximizing Performance: Best Practices for Database Scaling Getting Started with MongoDB Compass: A GUI for MongoDB recently queried Flask MongoDB * * ",
    "url": "https://dev.to/t/mongodb"
  },
  {
    "body": "* # nestjs * 907 Posts Published Older #nestjs posts 1 2 3 4 5 6 7 8 9 *. * * Follow * Add Comment 4 min read How to manage multiple environments with dotenv and Databases config in NestJS Alessandro Pecorilla Alessandro Pecorilla Alessandro Pecorilla Follow Nov 7 How to manage multiple environments with dotenv and Databases config in NestJS #typeorm #nestjs #postgressql #backend 4 * How to Avoid the Single-Threaded Trap in JavaScript zenstok zenstok zenstok Follow Nov 1 How to Avoid the Single-Threaded Trap in JavaScript #javascript #nestjs #webdev #* 5 min read nextjs app loading.tsx page not working oliviarizona oliviarizona oliviarizona Follow Oct 27 nextjs app loading.tsx page not working #nextjs #nestjs #loading #problem Add Comment 2 min read Enhanced CLI Capabilities in NestJS Boilerplate Rodion Rodion Rodion Follow Nov 6 Enhanced CLI Capabilities in NestJS Boilerplate #webdev #programming #softwaredevelopment #nestjs 5 *d Arquitectura Hexagonal con Typescript y pnpm Enol Casielles Enol Casielles Enol Casielles Follow Oct 25 Arquitectura Hexagonal con Typescript y pnpm #webdev #typescript #nextjs #nestjs Add Comment 6 min read Make your response consistent in NestJS using Interceptors Refi Fauzan Refi Fauzan Refi Fauzan Follow Nov 6 Make your response consistent in NestJS using Interceptors #nestjs #backend #api #restapi Add Comment 4 min read Integrating Cloudinary with NestJS for Image Management Mofajjal Rasul Mofajjal Rasul Mofajjal Rasul Follow Nov 3 Integrating Cloudinary with NestJS for Image Management #nestjs #cloudinary #imageupload #backend 6 * Angular NestJS SSR Blake Warner Blake Warner Blake Warner Follow Oct 5 Angular NestJS SSR #nestjs Add Comment 1 min read NestJS vs. Ditsmod: pipe features Костя Третяк Костя Третяк Костя Третяк Follow Oct 3 NestJS vs. Ditsmod: pipe features #ditsmod #nestjs #express #fastify * A Step-by-Step Guide to Debugging and Setting Up a Turborepo-Driven Monorepo with Next.js and pnpm TD! TD! TD! Follow Oct 2 A Step-by-Step Guide to Debugging and Setting Up a Turborepo-Driven Monorepo with Next.js and pnpm #nextjs #nestjs #pnpm Add Comment 4 min read Enhancing Error Logging in NestJS with Sentry Mofajjal Rasul Mofajjal Rasul Mofajjal Rasul Follow Nov 3 Enhancing Error Logging in NestJS with Sentry #nestjs #sentry #logger #exception 8 * Seamlessly Integrate Swagger with JWT Authentication in NestJS Mofajjal Rasul Mofajjal Rasul Mofajjal Rasul Follow Nov 3 Seamlessly Integrate Swagger with JWT Authentication in NestJS #nestjs #jwt #swagger #webdev 8 *d A Generic Repository Pattern for NestJS with Mongoose for MongoDB Mofajjal Rasul Mofajjal Rasul Mofajjal Rasul Follow Nov 3 A Generic Repository Pattern for NestJS with Mongoose for MongoDB #nestjs #mongodb #generic #repository 2 * Creating tests in real database with NestJS, TypeORM and PostgreSQL Gabriel Couto Gabriel Couto Gabriel Couto Follow Oct 4 Creating tests in real database with NestJS, TypeORM and PostgreSQL #javascript #jest #nestjs #w* read How to integrate Alerta into your Business Vincent Olagbemide Vincent Olagbemide Vincent Olagbemide Follow Oct 1 How to integrate Alerta into your Business #webdev #alerta #slack #nestjs 2 * Env-Core: An Easy Way to Validate Environment Variables in Node.js Projects Emmanuel Nwankwo Emmanuel Nwankwo Emmanuel Nwankwo Follow Oct 26 Env-Core: An Easy Way to Validate Environment Variables in Node.js Projects #validation #environment #node #nestjs 3 *d Deploying NestJS Application using Vercel and Supabase Abayomi Olatunji Abayomi Olatunji Abayomi Olatunji Follow Oct 25 Deploying NestJS Application using Vercel and Supabase #webdev #javascript #node #nestjs 2 *d Monitoring nodejs Microservices * Sep 19 Monitoring nodejs Microservices #microservices #node #nestjs Add Comment 1 min read Dockerize nestjs app with postgres lifewithcode lifewithcode lifewithcode Follow Sep 19 Dockerize nestjs app with postgres #nestjs #docker #dockercompose #node Add Comment 1 min read nestjs & expressjs side by side #nodejs * Sep 19 nestjs & expressjs side by side #nodejs #nestjs #*nt 1 min read Dynamic NestJS Listeners: Discover the Power of Lazy Loading Edouard Maleix Edouard Maleix Edouard Maleix Follow for This is Learning Oct 13 Dynamic NestJS Listeners: Discover the Power of Lazy Loading #typescript #nestjs #tutorial 51 * Integrate Self-host Infisical into your NestJS project whchi whchi whchi Follow Sep 11 Integrate Self-host Infisical into your NestJS project #infisical #nestjs #security #dx 3 *d NestJS - criar um endpoint para upload de diversos arquivos Leonardo Minora Leonardo Minora Leonardo Minora Follow Sep 15 NestJS - criar um endpoint para upload de diversos arquivos #infoweb #nestjs #upload #typescript Add Comment 6 min read Deploy NextJs and NestJs as a single application Ivan Alekseev Ivan Alekseev Ivan Alekseev Follow Sep 9 Deploy NextJs and NestJs as a single application #javascript #nextjs #nestjs #cicd Add Comment 6 min read Nest-Connect API using NestJs, PassportJs, and Prisma Said MOUNAIM Said MOUNAIM Said MOUNAIM Follow Sep 6 Nest-Connect API using NestJs, PassportJs, and Prisma #nestjs #javascript #typescript #prisma 6 *d Fix long import paths in your NestJS project #nestjs * Sep 7 Fix long import paths in your NestJS project #nestjs #nestjs #node #microservices #fullstack Add Comment 2 min read The Developer's Guide to Mastering NodeJS with Prometheus and Grafana * Sep 19 The Developer's Guide to Mastering NodeJS with Prometheus and Grafana #node #nestjs #prometheus #grafana Add Comment 1 min read Scale Nodejs Application with APM Tools * Sep 5 Scale Nodejs Application with APM Tools #nestjs #node #microservices #*t 2 min read Authentication in NestJS with PassportJS and Prisma Said MOUNAIM Said MOUNAIM Said MOUNAIM Follow Sep 4 Authentication in NestJS with PassportJS and Prisma #nestjs #javascript #passportjs #prisma 6 *d Node.js to support ESM Require: What this means for NestJS developers and other CommonJS frameworks Ben Dechrai Ben Dechrai Ben Dechrai Follow for Arcjet Sep 3 Node.js to support ESM Require: What this means for NestJS developers and other CommonJS frameworks #nestjs #node #ecmascript #security 5 * Creating a configurable Webhook module for a NestJS application ILs*tov Follow Oct 6 Creating a configurable Webhook module for a NestJS application #nestjs #webhook #nestjsmod #fullstack 1 reaction Add Comment 63 min read Resuming AirBNB Clone using Microservices * Aug 30 Resuming AirBNB Clone using Microservices #fullstack #airbnb #nestjs #nextjs * NodeJS Framework which one is Fast * Aug 30 NodeJS Framework which one is Fast #nestjs #node #fastify #express Add Comment 2 min read Microservices Design Aspects * Sep 22 Microservices Design Aspects #microservices #node #nestjs #w* read NestJS Microservices * Aug 30 NestJS Microservices #microservices #nestjs #node #w* read Effortless API Testing with CLI Prompt Toolkit Jjioo Jjioo Jjioo Follow Aug 29 Effortless API Testing with CLI Prompt Toolkit #backend #postmanapi #javascript #nestjs Add Comment 1 min read Integrating Firebase Authentication into NestJS with nestjs-firebase-auth Tomás Alegre Sepúlveda Tomás Alegre Sepúlveda Tomás Alegre Sepúlveda Follow Sep 10 Integrating Firebase Authentication into NestJS with nestjs-firebase-auth #firebase #typescript #nestjs #security * Running Kafka Locally like a Pro * Sep 10 Running Kafka Locally like a Pro #kafkajs #kafka #nestjs #*in read Connecting NestJS and ASP.NET Core with gRPC: A Step-by-Step Guide Luqman Bolajoko Luqman Bolajoko Luqman Bolajoko Follow Sep 30 Connecting NestJS and ASP.NET Core with gRPC: A Step-by-Step Guide #nestjs #aspnetcore #grpc #webdev 4 * NestJS tip: how to attach decorators to all controllers at once Micael Levi L. C. Micael Levi L. C. Micael Levi L. C. Follow Sep 29 NestJS tip: how to attach decorators to all controllers at once #node #nestjs 4 * Enhance Your Nest.js Performance with a Custom `@Cacheable` Decorator Med Marrouchi Med Marrouchi Med Marrouchi Follow Sep 27 Enhance Your Nest.js Performance with a Custom `@Cacheable` Decorator #webdev #node #nestjs #javascript 13 reactions *st 2024 with Ghostfolio Thomas Kaul Thomas Kaul Thomas Kaul Follow Sep 26 Hacktoberfest 2024 with Ghostfolio #angular #hacktoberfest #nestjs #typescript 4 *d * zenstok zenstok zenstok Follow Oct 6 * #webdev #node #javascript #nestjs 9 reactions 4 comments 9 min read Building a CRUD Application with NestJS and MongoDB Manthan Ankolekar Manthan Ankolekar Manthan Ankolekar Follow Sep 23 Building a CRUD Application with NestJS and MongoDB #webdev #nestjs #* Comment 5 min read Implementing Email Services with Nest.js and Google Cloud hayata-yamamoto hayata-yamamoto hayata-yamamoto Follow Oct 7 Implementing Email Services with Nest.js and Google Cloud #nestjs #typescript #googlecloud #sendgrid * Building Scalable Microservices with NestJS and Kafka * Sep 22 Building Scalable Microservices with NestJS and Kafka #nestjs #kafkajs #microservices #node * Nestjs Workspaces to build Monorepo * Sep 22 Nestjs Workspaces to build Monorepo #nestjs #monorepo #*t 2 min read Building a Unit of Work like pattern in NestJS and Sequelize. Murilo Gervasio Murilo Gervasio Murilo Gervasio Follow Sep 21 Building a Unit of Work like pattern in NestJS and Sequelize. #nestjs #sequelize #unitofwork #designpatterns 4 * Building a Unit of Work like pattern in NestJS and Sequelize. Murilo Gervasio Murilo Gervasio Murilo Gervasio Follow Sep 21 Building a Unit of Work like pattern in NestJS and Sequelize. #nestjs #sequelize #unitofwork #designpatterns * NodeJS Microservices 2024 * Aug 30 NodeJS Microservices 2024 #node #microservices #nestjs #w* read Is Your API ACTUALLY Ready for User Traffic? * Aug 29 Is Your API ACTUALLY Ready for User Traffic? #node #api #testing #nestjs * Encapsulating the Past: How We Tamed a Legacy System with Timeless Software Engineering Principles Dawid Dahl Dawid Dahl Dawid Dahl Follow Sep 18 Encapsulating the Past: How We Tamed a Legacy System with Timeless Software Engineering Principles #backend #architecture #nestjs #typescript 28 *ad Build a fullstack storytelling application using MediaPipe, langchain.js and gemma 2 Connie Leung Connie Leung Connie Leung Follow Sep 18 Build a fullstack storytelling application using MediaPipe, langchain.js and gemma 2 #webai #langchain #angular #nestjs 3 *d How to integrate Drizzle ORM with Nest Js Anoop Singh Anoop Singh Anoop Singh Follow Sep 17 How to integrate Drizzle ORM with Nest Js #drizzle #database #postgres #nestjs 3 *d why Nestjs is Fav for Backend developers * Sep 6 why Nestjs is Fav for Backend developers #nestjs #microservices #node #api* 2 min read Authentication Types in Microservices * Sep 6 Authentication Types in Microservices #nestjs #node #authentication #microservices Add Comment 2 min read NestJS + Opentelemetry (Trace) Jaeyoun Nam Jaeyoun Nam Jaeyoun Nam Follow Aug 17 NestJS + Opentelemetry (Trace) #webdev #nestjs #javascript #* How to solve dual write problem in NestJS? Kamil Fronczak Kamil Fronczak Kamil Fronczak Follow Sep 15 How to solve dual write problem in NestJS? #node #nestjs #architecture #*t 8 min read Home Service Full-stack app using NestJs, Next.js, React Query TailwindCSS & Prisma Said MOUNAIM Said MOUNAIM Said MOUNAIM Follow Sep 14 Home Service Full-stack app using NestJs, Next.js, React Query TailwindCSS & Prisma #nextjs #react #nestjs #tailwindcss 11 *d NestJS Main Compnents in One Image🤩 Ayanabilothman Ayanabilothman Ayanabilothman Follow Oct 17 NestJS Main Compnents in One Image🤩 #nestjs #typescript #node #oop * Nestjs : Bun vs Nodejs Arash Arash Arash Follow Oct 24 Nestjs : Bun vs Nodejs #nestjs #bunjs #node #*t 1 min read loading... trending guides/resources Dynamic NestJS Listeners: Discover the Power of Lazy Loading Part 3/3: How to Implement Refresh Tokens through Http-Only Cookie in NestJS and React * How to integrate Drizzle ORM with Nest Js Building Scalable Microservices with NestJS and Kafka How to solve dual write problem in NestJS? How to make Multi-tenant applications with NestJS and Prisma 🚀. New NestJS Swagger Generator evolved than ever NestJS tip: how to attach decorators to all controllers at once Introduce the NestJS starter kit - Release v0.0.4 🚀 Building a Unit of Work like pattern in NestJS and Sequelize. Build a RAG application to learn Angular using langchhtain.js, nestjs, Htmx, and Gemma 2 Creating a configurable Webhook module for a NestJS application Nestjs, Firebase, GCloud. How to Quickly Set Up an API Backend in TypeScript. Enhance Your Nest.js Performance with a Custom `@Cacheable` Decorator Deploying NestJS Application using Vercel and Supabase Dockerize nestjs application with Postgres Mastering Data Validation in NestJS: A Complete Guide with Class-Validator and Class-Transformer A Generic Repository Pattern for NestJS with Mongoose for MongoDB Integrating Cloudinary with NestJS for Image Managemen*nsor Neon * ",
    "url": "https://dev.to/t/nestjs"
  },
  {
    "body": "* Netlify Follow Hide Official tag for Netlify, the simplest way to build modern web projects! Create Post about #netlify Instantly build and deploy your sites to our global network from Git. Custom domains, HTTPS, deploy previews, rollbacks, and much more. Most of the posts from the Netlify team are cross-posted on our blog, including more not seen here! We love seeing your posts! Please do post them publicly on social media and we'll share them on our channels. tag moderators 710 Posts Published Older #netlify posts 1 2 3 4 5 6 7 8 9 *. *) Sakis Pal Sakis Pal Sakis Pal Follow Nov 9 *) #webdev #express #netlify #* Boost Developer Productivity With LambdaTest and Netlify Integration Devanshbhardwaj123 Devanshbhardwaj123 Devanshbhardwaj123 Follow Nov 5 Boost Developer Productivity With LambdaTest and Netlify Integration #integration #developer #netlify #webdev * a Custom Shipping Calculator with Stripe and Netlify Functions for Multi-Currency (€/$), Quantity, and Location Support IDMTR IDMTR IDMTR Follow Oct 31 Building a Custom Shipping Calculator with Stripe and Netlify Functions for Multi-Currency (€/$), Quantity, and Location Support #netlify #stripe #javascript Add Comment 8 min read * * Oct 25 * #webdev #node #api #netlify Add Comment 3 min read From Local to Live: How to Deploy Your React Application using Netlify. Favour Ukonu Favour Ukonu Favour Ukonu Follow Oct 14 From Local to Live: How to Deploy Your React Application using Netlify. #webdev #react #netlify #* 4 min read Cost-effective Netlify deployments for large teams using GitHub Actions Siddhant Khare Siddhant Khare Siddhant Khare Follow Oct 5 Cost-effective Netlify deployments for large teams using GitHub Actions #githubactions #netlify #productivity #development 7 *d Automating Netlify Deployments Every 24 Hours with GitHub Actions * Nasrul Hazim Bin Mohamad Follow Sep 7 Automating Netlify Deployments Every 24 Hours with GitHub Actions #netlify #github #cicd Add Comment 3 min read Best 8 Deployment and Hosting for Next.js App Ethan Lee Ethan Lee Ethan Lee Follow Oct 4 Best 8 Deployment and Hosting for Next.js App #nextjs #vercel #netlify #aws 4 * Generating text description from youtube link using Angular, Gemini and Netlify Salim Chemes Salim Chemes Salim Chemes Follow Sep 25 Generating text description from youtube link using Angular, Gemini and Netlify #angular #gemini #ai #netlify 3 * Deploying a Node.js project to Netlify * Sep 10 Deploying a Node.js project to Netlify #netlify #devops #githubactions #git 4 *d Deploy static site manually using Netlify in 2024 Axorax Axorax Axorax Follow Jul 29 Deploy static site manually using Netlify in 2024 #netlify 16 * Vercel vs Netlify: How to Pick the Right One Alex Hramovich Alex Hramovich Alex Hramovich Follow for FocusReactive Aug 26 Vercel vs Netlify: How to Pick the Right One #vercel #netlify #jamstack #nextjs 18 * Integrating Netlify Frontend with External Backend Using Custom DNS Configuration. Chidiebere Chukwudi Chidiebere Chukwudi Chidiebere Chukwudi Follow Aug 23 Integrating Netlify Frontend with External Backend Using Custom DNS Configuration. #netlify #dns #backend #frontend 2 * Seamless Contact Form experience with Netlify Form in Nuxt 3 Maya Shavin 🌷☕️🏡 Maya Shavin 🌷☕️🏡 Maya Shavin 🌷☕️🏡 Follow Aug 7 Seamless Contact Form experience with Netlify Form in Nuxt 3 #nuxt #netlify #vue #tutorial 2 * Building a Capital City App With Next.js and Netlify Captain Iminza Captain Iminza Captain Iminza Follow Jul 25 Building a Capital City App With Next.js and Netlify #javascript #nextjs #netlify #tutorial *ad Modificando versão do node na Netlify Patrick Monteiro Patrick Monteiro Patrick Monteiro Follow Jul 19 Modificando versão do node na Netlify #webdev #javascript #node #netlify 2 *d How I added a guestbook to my website with Clerk, Neon, and Netlify Functions Brian Morrison II Brian Morrison II Brian Morrison II Follow Jul 16 How I added a guestbook to my website with Clerk, Neon, and Netlify Functions #webdev #sql #serverless #netlify 1 reaction Add Comment 14 min read my refine project is deployed but still showing template page Tectic RG Tectic RG Tectic RG Follow Jun 3 my refine project is deployed but still showing template page #help #refine #netlify #render Add Comment 1 min read Show Your Recently Played Song using Netlify Functions and Last.fm Yordi Verkroost Yordi Verkroost Yordi Verkroost Follow Jun 11 Show Your Recently Played Song using Netlify Functions and Last.fm #development #music #netlify Add Comment 3 min read How to Host Website on Netlify for FREE Vicky Shinde Vicky Shinde Vicky Shinde Follow Jun 6 How to Host Website on Netlify for FREE #netlify #webhosting #hosting #tutorial 18 *d Fixing the \"Page Not Found\" Error on Netlify , vercel for any Router.🚀 Dharmendra Kumar Dharmendra Kumar Dharmendra Kumar Follow Jun 5 Fixing the \"Page Not Found\" Error on Netlify , vercel for any Router.🚀 #javascript #react #webdev #netlify 5 *d Why I Switched from GitHub Pages to Netlify for Deploying Static Websites * Jun 3 Why I Switched from GitHub Pages to Netlify for Deploying Static Websites #netlify #deployment #staticwebapps #github Add Comment 2 min read Add a google maps on my reactjs resume Marcelo Marcelo Marcelo Follow Apr 29 Add a google maps on my reactjs resume #react #carbon #netlify #sas*o host your Next14 app on Netlify in 2 minutes Code With Joseph Code With Joseph Code With Joseph Follow May 31 How to host your Next14 app on Netlify in 2 minutes #netlify #nextjs #webdev #howto 2 *d Setup XM Cloud Multi-site on Netlify Jay Bonning Jay Bonning Jay Bonning Follow Apr 17 Setup XM Cloud Multi-site on Netlify #sitecore #xmcloud #netlify A* a Simple Instagram Clone with Next.js and Netlify Riday Riday Riday Follow May 12 How to Build a Simple Instagram Clone with Next.js and Netlify #nextjs #tutorial #netlify #opensource 14 reactions 4 comments 9 min read Netlify Dynamic Site Challenge - Help Thread! Sean C Davis Sean C Davis Sean C Davis Follow for Netlify May 2 Netlify Dynamic Site Challenge - Help Thread! #netlifychallenge #netlify #webdev #javascript 19 reactions 46 comments 1 min read Building AI experiences on Netlify Sean Roberts Sean Roberts Sean Roberts Follow for Netlify Apr 23 Building AI experiences on Netlify #ai #webdev #netlify #* 13 min read Creating an OG image using React and Netlify Edge Functions Nick Taylor Nick Taylor Nick Taylor Follow for OpenSauced Apr 16 Creating an OG image using React and Netlify Edge Functions #netlify #typescript #react 19 * Netlify vs Vercel for Sitecore XM Cloud Deployment Sebastián Aliaga Sebastián Aliaga Sebastián Aliaga Follow Apr 15 Netlify vs Vercel for Sitecore XM Cloud Deployment #sitecore #xmcloud #vercel #netlify 3 *d JAMSTACK Bek Brace Bek Brace Bek Brace Follow Apr 14 JAMSTACK #jamstack #javascript #html #netlify * \"Page not found\" on Netlify - React website deployment error solved Pranesh Chowdhury Pranesh Chowdhury Pranesh Chowdhury Follow Apr 7 \"Page not found\" on Netlify - React website deployment error solved #webdev #react #tutorial #netlify 2 *d AWS Amplify vs Netlify comparison for hosting static websites Yeonggyoo Jeon Yeonggyoo Jeon Yeonggyoo Jeon Follow Mar 31 AWS Amplify vs Netlify comparison for hosting static websites #aws #netlify #webdev #singlepageapp 3 * How to Redirect URLs with Netlify * Michael La Posta Follow Mar 9 How to Redirect URLs with Netlify #netlify #webdev #tutorial #* 6 min read Leaving Netlify Free Tier Conor Sheehan Conor Sheehan Conor Sheehan Follow Mar 7 Leaving Netlify Free Tier #hosting #netlify #*t 4 min read Jumblie has a database! Cassidy Williams Cassidy Williams Cassidy Williams Follow Feb 26 Jumblie has a database! #showdev #gamedev #netlify #supabase 57 * Is Hosting on Netlify Going to Bankrupt you? * Michael La Posta Follow Feb 28 Is Hosting on Netlify Going to Bankrupt you? #discuss #netlify #hosting #webdev 3 * Query Postgres from Netlify Functions with Neon serverless driver Moronfolu Olufunke Moronfolu Olufunke Moronfolu Olufunke Follow for Hackmamba Feb 28 Query Postgres from Netlify Functions with Neon serverless driver #netlify #javascript #postman #postgres 3 *d How to make a Squarespace domain work with Netlify Cesar Bhering Cesar Bhering Cesar Bhering Follow Feb 24 How to make a Squarespace domain work with Netlify #squarespace #netlify #dns #webdev 3 * From Localhost to Live: Easy Deployment With Github Pages or Netlify Feven Seyfu Feven Seyfu Feven Seyfu Follow Feb 1 From Localhost to Live: Easy Deployment With Github Pages or Netlify #deployment #webdev #netlify #githubpages * Limit the Number of Pre-rendered Pages in Next.js * Michael La Posta Follow Feb 14 Limit the Number of Pre-rendered Pages in Next.js #netlify #staticwebapps #nextjs #tutorial 2 * How to do ISR and advanced caching with Remix and Netlify Matt Kane Matt Kane Matt Kane Follow for Netlify Feb 14 How to do ISR and advanced caching with Remix and Netlify #webdev #remix #netlify Add Comment 12 min read How to parse FormData values with Netlify Functions V2 İbrahim Turan İbrahim Turan İbrahim Turan Follow Jan 16 How to parse FormData values with Netlify Functions V2 #netlify #functions #form Add Comment 1 min read Programmatically deploy your GitHub Repo on Netlify Giuliano1993 Giuliano1993 Giuliano1993 Follow Jan 10 Programmatically deploy your GitHub Repo on Netlify #python #netlify #github #tutorial 9 *d Deploying on Netlify via GitHub Actions: A Seamless Guide Raul Melo Raul Melo Raul Melo Follow Jan 4 Deploying on Netlify via GitHub Actions: A Seamless Guide #netlify #githubactions #deploy #* 12 min read How to host Nodejs API on Netlify for free Hrishikesh Pathak Hrishikesh Pathak Hrishikesh Pathak Follow Jul 12 '23 How to host Nodejs API on Netlify for free #javascript #typescript #node #netlify 6 * Build a Simple Contact Form with Next.JS and Netlify * Michael La Posta Follow Dec 29 '23 Build a Simple Contact Form with Next.JS and Netlify #nextjs #netlify #tutorial #programming 1 reaction 1 comment 12 min read Setup Custom Domain Name in Netlify Stephen Akugbe Stephen Akugbe Stephen Akugbe Follow Dec 3 '23 Setup Custom Domain Name in Netlify #webdev #netlify #deployment #devops 2 *d No More Servers For Our App Testing Startup - Part 1: Background Functions Charles Killer Charles Killer Charles Killer Follow Nov 7 '23 No More Servers For Our App Testing Startup - Part 1: Background Functions #serverless #netlify #expo * Share your Netlify integration with the click of a button Karin Karin Karin Follow for Netlify Nov 15 '23 Share your Netlify integration with the click of a button #netlify #integrations 6 *d Clay Theme - Unlocking the Power of Gatsby v5+ and NetlifyCMS with Clay Theme Travis Travis Travis Follow Nov 12 '23 Clay Theme - Unlocking the Power of Gatsby v5+ and NetlifyCMS with Clay Theme #gatsby #netlify #javascript #webdev 11 * Hook into Netlify’s build events with Private Integrations Karin Karin Karin Follow for Netlify Nov 2 '23 Hook into Netlify’s build events with Private Integrations #netlify #integrations #sdk 5 * Best Free Methods to Deploy React Applications in 2024 Anil K Tiwari Anil K Tiwari Anil K Tiwari Follow Oct 2 '23 Best Free Methods to Deploy React Applications in 2024 #react #frontend #firebase #netlify 2 *d How to display Webflow form Success message into Netlify with 6 easy steps azizqamar7 azizqamar7 azizqamar7 Follow Oct 1 '23 How to display Webflow form Success message into Netlify with 6 easy steps #webflow #netlify #javascript #forms Add Comment 2 min read Distributed persistent rendering, oh my Cassidy Williams Cassidy Williams Cassidy Williams Follow for Contenda Aug 16 '23 Distributed persistent rendering, oh my #jamstack #netlify #astro #11ty 32 * How to Deploy a Netlify Starter sambhav yadav sambhav yadav sambhav yadav Follow Aug 12 '23 How to Deploy a Netlify Starter #webdev #beginners #netlify #deploy * 開源免費，在 Netlify 上安裝 Primo CMS，輕鬆製作網頁筆記 Let's Write Let's Write Let's Write Follow Aug 3 '23 開源免費，在 Netlify 上安裝 Primo CMS，輕鬆製作網頁筆記 #netlify #primo #cms #* How to add comments to a static site using GitHub Pull Requests and Netlify Functions Nate Eagle Nate Eagle Nate Eagle Follow Jul 28 '23 How to add comments to a static site using GitHub Pull Requests and Netlify Functions #typescript #netlify #github #tutorial 4 reactions 5 comments 11 min read How To Create A GitHub Repository OLAIDE OLAIDE OLAIDE Follow Jul 17 '23 How To Create A GitHub Repository #github #webdev #netlify #repository 3 reactions 4 comments 7 min read Deploying a web app built with Qwik and Turso on Netlify James Sinkala James Sinkala James Sinkala Follow Jul 5 '23 Deploying a web app built with Qwik and Turso on Netlify #netlify #turso #qwik #* Deploy static site using netlify and zola Neeraj Verma Neeraj Verma Neeraj Verma Follow Aug 7 Deploy static site using netlify and zola #zola #netlify #blog 1 reaction Add C*s Is Hosting on Netlify Going to Bankrupt you? 3 comments How I solved “Page not found” on my react projects deployed on netlify New Have you used Netlify for real client projects? 20 comments Netlify vs. Cloudflare Pages New Help needed: Netlify's Dusty Domains event – Give me your domain ideas New Web architecture lessons from mobile apps with Matt Biilmann * Deploying a Node.js project to Netlify Generating text description from youtube link using Angular, Gemini and Netlify Cost-effective Netlify deployments for large teams using GitHub Action*nsor Neon * ",
    "url": "https://dev.to/t/netlify"
  },
  {
    "body": "**5 * 1 2 3 4 5 6 7 8 9 …75 …277 *. * Unleash ServBay’s Powe* 5 *d * * 10 * #javascr*mment 4 min read Guia Comp* Souza * Follow Nov 10 Guia Comp* #node 1 reaction Add Comment 3 *sing in Node.js wi* * #*sain Follow Nov 9 Multi-stage Buil* * Node.js Arjun Tripath*llow Nov 8 Schema V* **ead Deploy* * ** *ment 9 min read 📝 *! * Nov 4 📝 *, * Add Comment 2 min read *) Mehedi Hasan Mehedi Hasan Mehedi Hasan Follow Nov 4 *) #typescript #node #express #* * * Nov 8 * #webdev #devops #node #github 1 comment 6 min read User Authentication API with Express, JWT, Bcrypt, and MySQL gautam kumar gautam kumar gautam kumar Follow Nov 4 User Authentication API with Express, JWT, Bcrypt, and MySQL #webdev #javascript #* 6 min read -? What is YARN ?- nobody-99 nobody-99 nobody-99 Follow Nov 3 -? What is YARN ?- #yarn #javascript #webdev #node Add Comment 3 m* 7 * #webdev #javascript #node #* 4 min read *) * Nov 7 *) #react #node #* 3 min read Decoding 1D/2D B* * Nov 4 Decoding 1D/2D B* #cpp #node #pdf #barcode * * 🎨 * Noureddine Belguinan Follow Nov 6 * 🎨 #node #bunjs #npm #*t 2 min read Declaration Merging in TS M*i M* Nov 2 Declaration Merging in TS #typescript #javascript #learning #node Add Comment 3 min read * Megan Le* Nov 6 * #webdev #node #rust 2 * * W*f Follow for WavePlay Nov 1 * #hacktoberfest #javascript #discord #node Add Comment 1 min read 📢 * * Matheus Vieira do Nascimento Follow Nov 1 📢 * #git #frontend #react #node Add Comment 2 min read Monitoring PM2 in production * Follow for New Relic Nov 1 * Add Comment 8 min read * * Nov 5 * #typescript #javascript #node #react * MYSQL GUI SHASHI KUMAR KASTURI SHASHI KUMAR KASTURI SHASHI KUMAR KASTURI Follow Nov 1 MYSQL GUI #webdev #opensource #productivity #node Add Comment 1 min read *! kit2d2 kit2d2 kit2d2 Follow Nov 1 *! #javascript #gamedev #* 1 min read iFrame biPass Zia Ur Rehman Zia Ur Rehman Zia Ur Rehman Follow Oct 31 iFrame biPass #javascript #webdev #extensions #node * *. * Oct 31 *. #node #mongodb #javascript #express Add Comment 6 min read * Hannah Liao Hannah Liao Hannah Liao Follow Oct 30 * #postgres #railway #node #* *! * Nov 7 Typing Prism*rm 21 * * * Oct 28 * #javascript #node #npm #webdev Add Comment 2 min read * * * Oct 28 * #node #nvm Add Comment 1 min read *) * Oct 28 *) #javascript #beginners #api #node 5 reactions 1 comment 17 min read R* Aris Kurniawa* Follow Oct 29 R* #rabbitmq #node #javascript #erlang Add Comment 6 min read * Kaue Campos Kaue Campos Kaue Campos Follow Oct 31 * #javascript #node #typescript 4 * How to Integrate HashiCorp Vault with Node.js: Securely Manage Sensitive Data Gowtham S Gowtham S Gowtham S Follow Oct 27 How to Integrate HashiCorp Vault with Node.js: Securely Manage Sensitive Data #javascript #node #webdev #* * * Elasticsearch in Express #elasticsearch #expres* Criando uma Runtime Lucas *ewski Follow Oct 25 Criando uma Runtime #cpp #node #v8 #javascript Add Comment 6 min read * * Oct 25 * #webdev #node #api #netlify Add Comment 3 min read *? Jatin Anand Jatin Anand Jatin Anand Follow Nov 8 *? #node #npm #opensource #webdev * How to resolv*' * Oct 25 How to resolv*' #yaml #node #serverless #lambda Add Comment 1 min rea* Fi* Telegram #webdev #*d loading... #discuss Java* 28 comments We reach 750+ Stars on our Repository! 1 comment JavaScript One-Liners That Make Me Excited 56 comments Why Typescript Vs JavaScript discussion is still hot? 16 comments How to test REST API where major bussiness logic is written in SQL 3 comments 🌟 U* 🚀 New What JS Logging library / tool do you use? 44 comments How to start your development career as a Freelance developer ? 4 comments Buy Verified Paxful Account New Migrating API from Laravel to NestJS 10 * *? Java* 🔥 * 🚀 * * 10 JavaScript concepts every Node developer must master * How to make your Express app 9x faster (and type-safe) npm Vs npx Part 3/3: How to Implement Refresh Tokens through Http-Only Cookie in NestJS and React This TypeScript framework * ⚡️ Deno 2.0: The Next Evolution in JavaScript Runtimes – Is It Better Than Node.js? * *) How to make your Express.js APIs 9x faster with Encore.ts Setting Up PM2 for Multi-User Access on Ubuntu Instance * Building a Visual Studio Code Extension to Generate Files from Templates * * recently queried Coding Games for Beginners NodeJs MySQL Flow vs Typescript Node Scheduler Reddit Bot Node Express Rust for Web package-lock.json vs package.json Supertest Jest Stop Node Server JavaScript || What Is Webpack Javascript Environment Variables Memoization Body Parser npm Create Package JSon node vs deno Node JS Resume Points How to Add Commands on Twitch Express Typescrip*nsor Neon * ",
    "url": "https://dev.to/t/node"
  },
  {
    "body": "**6 * 1 2 3 4 5 6 7 8 9 *. Mastering Asynchronous Programming in JavaScript akanni hannah akanni hannah akanni hannah Follow Oct 25 Mastering Asynchronous Programming in JavaScript #javascript #node #react #asynchronous * When to Avoid Using Node.js * Aditya Pratap Bhuyan Follow Oct 25 When to Avoid Using Node.js #node * React Native In-App Modules bypassing the JS bridge. Ritesh Shukla Ritesh Shukla Ritesh Shukla Follow Oct 29 Building React Native In-App Modules bypassing the JS bridge. #javascript #android #reactnative #node Add Comment 3 min read We reach 750+ Stars on our Repository! Antonio | CEO at Litlyx.com Antonio | CEO at Litlyx.com Antonio | CEO at Litlyx.com Follow Nov 7 We reach 750+ Stars on our Repository! #discuss #opensource #node #beginners 10 * 🚀 Why Your App Is One Test Away from Disaster (And How to Fix It) * Oct 24 🚀 Why Your App Is One Test Away from Disaster (And How to Fix It) #testing #automation #node #webdev Add Comment 4 min read Future-Proofing Your Auth0 Integration: Moving from Rules and Hooks to Actions Preethi Puttegowda Preethi Puttegowda Preethi Puttegowda Follow Oct 24 Future-Proofing Your Auth0 Integration: Moving from Rules and Hooks to Actions #auth0 #actions #node #javascript *ng JavaScript Closures: A Comprehensive Guide Nozibul Islam Nozibul Islam Nozibul Islam Follow Nov 6 Understanding JavaScript Closures: A Comprehensive Guide #javascript #closure #programming #node 22 *d Hacking (and securing) GraphQL David Mytton David Mytton David Mytton Follow for Arcjet Nov 6 Hacking (and securing) GraphQL #node #security 3 * EDD with event emitters C I R L O R M ⚡ C I R L O R M ⚡ C I R L O R M ⚡ Follow Oct 24 EDD with event emitters #eventdriven #node #* Sending Emails with Queues in Node.js - Improve Your App’s Email Deliverys Muhammad ABir Muhammad ABir Muhammad ABir Follow Nov 6 Sending Emails with Queues in Node.js - Improve Your App’s Email Deliverys #node #redis #queue #backend Add Comment 4 m* 5 * #* 15 * Building Real-Time Web Applications with WebSockets and Other Technologies Okoye *amaka Follow Oct 23 Building Real-Time Web Applications with WebSockets and Other Technologies #webdev #websockets #node #djangochannels Add Comment 4 min read Setting Up a Node.js, TypeScript, and Express Project Harshal Ranjhani Harshal Ranjhani Harshal Ranjhani Follow for CodeParrot Oct 27 Setting Up a Node.js, TypeScript, and Express Project #node #express #typescript #project 8 * Building a High-Performance Cache Manager in Node.js with TypeScript and ioredis ... ... ... Follow Oct 27 Building a High-Performance Cache Manager in Node.js with TypeScript and ioredis #node #typescript #redis #javascript 1 reaction * the Difference Between * * 23 Understanding the Difference Between * #npm #webdev #node #coding 2 *d How I Improved Video Streaming with FFmpeg and Node.js Mohamed Mayallo Mohamed Mayallo Mohamed Mayallo Follow Nov 5 How I Improved Video Streaming with FFmpeg and Node.js #node #tutorial #* 10 * 🛠️ Battle of the Backend: Go vs Node.js vs Python – Which One Reigns Supreme in 2024? 🚀 * Oct 22 🛠️ Battle of the Backend: Go vs Node.js vs Python – Which One Reigns Supreme in 2024? 🚀 #go #node #python #webdev Add Comment 4 min read Simulando AWS KMS con LocalStack y Node.js: Una Guía para Desarrolladores Cristian Cazares Cristian Cazares Cristian Cazares Follow Oct 21 Simulando AWS KMS con LocalStack y Node.js: Una Guía para Desarrolladores #aws #node #kms #security Add Comment 5 min read Find your Books Emilio Servetti Emilio Servetti Emilio Servetti Follow Oct 21 Find your Books #webdev #node #books #react * Don’t Fall Into the Trap of Too Many Indexes! 🤕 ATUL KUMAR SINGH ATUL KUMAR SINGH ATUL KUMAR SINGH Follow Oct 21 Don’t Fall Into the Trap of Too Many Indexes! 🤕 #mongodb #node #fullstackdevelopment #databaseoptimization Add Comment 1 min read Best Practices for Bulk Optimization of Queries in PostgreSQL Saby_Explain Saby_Explain Saby_Explain Follow Oct 21 Best Practices for Bulk Optimization of Queries in PostgreSQL #postgres #autoexplain #postgressql #node Add Comment 18 min read A step-by-step guide to setting up a Puppeteer screenshot API on Ubuntu Art Art Art Follow Oct 21 A step-by-step guide to setting up a Puppeteer screenshot API on Ubuntu #ubuntu #node #puppeteer Add Comment 3 min read 🌟 U* 🚀 DevTeam DevTeam DevTeam Follow Oct 25 🌟 U* 🚀 #discuss #express #node #webdev 5 reactions * Version Management in Node.js * Oct 20 Mastering Version Management in Node.js #webdev #node #javascript #cli Add Comment 2 min read Installing Node.js on Windows: A Complete Tutorial Arham Rumi Arham Rumi Arham Rumi Follow Oct 20 Installing Node.js on Windows: A Complete Tutorial #webdev #node #* 3 min read Node.js v23.0.0 Released: End of Support for 32-bit Windows Probir Sarkar Probir Sarkar Probir Sarkar Follow Oct 20 Node.js v23.0.0 Released: End of Support for 32-bit Windows #webdev #javascript #node #* Introducing sast-scan: A Lightweight SAST npm Package for JavaScript Security Ankit chaurasiya Ankit chaurasiya Ankit chaurasiya Follow Oct 19 Introducing sast-scan: A Lightweight SAST npm Package for JavaScript Security #javascript #node #npm #code Add Comment 3 min read * 2 — The Factory Pattern * Oct 19 * 2 — The Factory Pattern #javascript #node #designpatterns #* Streamline real-time apps with a high-performance, open-source WebSocket platform for Node.js Soren Hill Soren Hill Soren Hill Follow Oct 23 Streamline real-time apps with a high-performance, open-source WebSocket platform for Node.js #webdev #node #opensource #typescript Add Comment 8 min read Java* Shafa*ossain Follow Nov 6 Java* #discuss #javascript #webdev #node 223 reactions 28 comments 4 min read Implementing Semaphore with Redis: Ensuring Controlled Access to Resources in Node.js * Gleidson Leite da Silva Follow Oct 19 Implementing Semaphore with Redis: Ensuring Controlled Access to Resources in Node.js #semaphore #concurrence #transactions #node * How to Automate PDF Document Creation with an HTML Renderer Florian Florian Florian Follow for ExoAPI Oct 18 How to Automate PDF Document Creation with an HTML Renderer #pdf #javascript #node #* Implementing Tool Functionality in Conversational AI Frank Fiegel Frank Fiegel Frank Fiegel Follow Oct 17 Implementing Tool Functionality in Conversational AI #ai #node #typescript Add Comment 6 min read Bun (Bite-size Article) koshirok096 koshirok096 koshirok096 Follow Oct 17 Bun (Bite-size Article) #bunjs #node #backend Add Comment 4 min read Mongoose * 17 Mongoose #mongoose #mongodb #*nt 4 min read NPM Config: customising how npm works Rinon Tendrinomena Rinon Tendrinomena Rinon Tendrinomena Follow Oct 17 NPM Config: customising how npm works #webdev #npm #java*d opensslErrorStack: [ ‘error:03000086:digital envelope routines::initialization error’ ] Ann Ann Ann Follow Oct 17 opensslErrorStack: [ ‘error:03000086:digital envelope routines::initialization error’ ] #webdev #node #react #openssl * a Simple Redis Store with Node.js hoangbui hoangbui hoangbui Follow Oct 21 Building a Simple Redis Store with Node.js #javascript #programming #node #learning 2 * Leveraging Docker for Efficient Node.js Development and Deployment * Toufiqur Rahman Tamkin Follow Oct 17 Leveraging Docker for Efficient Node.js Development and Deployment #docker #node #backend #* (SQL Query) Caching vs Indexing in Express.js Vish Vish Vish Follow Oct 17 (SQL Query) Caching vs Indexing in Express.js #express #java*t 2 min read htmx and ExpressJS M*i M* Oct 17 htmx and ExpressJS #htmx #express #node #fullstack Add Comment 5 min read JsTraceToIX - Debugging React, Vue, and Node.js just got easier! – no need to clutter your codebase with `console.log`! Alexandre Bento Freire Alexandre Bento Freire Alexandre Bento Freire Follow Oct 16 JsTraceToIX - Debugging React, Vue, and Node.js just got easier! – no need to clutter your codebase with `console.log`! #* Add Comment 3 min read Audio to Text Input via Google Speech to Text shubhadip shubhadip shubhadip Follow Oct 20 Audio to Text Input via Google Speech to Text #react #javascript #node #speechtotext 11 * Dockerize PERN-TypeScript App Using Prisma ORM With Docker Compose Abdul Ahad Abeer Abdul Ahad Abeer Abdul Ahad Abeer Follow Oct 16 Dockerize PERN-TypeScript App Using Prisma ORM With Docker Compose #docker #javascript #reac* SAML vs. OAuth vs. OpenID Connect Rahul Vijayvergiya Rahul Vijayvergiya Rahul Vijayvergiya Follow Oct 16 SAML vs. OAuth vs. OpenID Connect #javascript #webdev #node #react Add Comment 4 min read Não use Prisma ORM antes de ler isso! Dev Doido Dev Doido Dev Doido Follow Oct 15 Não use Prisma ORM antes de ler isso! #prisma #javascript #node #braziliandevs * NPM peerDependencies in Depth: A Comprehensive Introduction Diego Juliao Diego Juliao Diego Juliao Follow Oct 19 NPM peerDependencies in Depth: A Comprehensive Introduction #npm #webdev #javascrip* Laravel + React project with Authentication & User Panel in less than a minute Christian Ascone Christian Ascone Christian Ascone Follow Oct 14 Laravel + React project with Authentication & User Panel in less than a minute #laravel #php #react #node * Meta Programming: In-Depth Guide on Proxy, Reflect, and Object Property Control Shafa*ossain Follow Nov 6 JavaScript Meta Programming: In-Depth Guide on Proxy, Reflect, and Object Property Control #java* 10 * Ballerina vs. Node.js: Choosing the Right Language for Your Next Project AkhilProto AkhilProto AkhilProto Follow Oct 14 Ballerina vs. Node.js: Choosing the Right Language for Your Next Project #ballerina #node #programming #comparision Add Comment 2 * Ansible: Automation for the Modern DevOps Engineer Abhis*iswal Follow Oct 14 A Comprehensive Guide to Ansible: Automation for the Modern DevOps Engineer #devops #cloud #webdev #node 2 * Autenticação com JWT no Frontend e Backend: Implementando com Node.js e ReactJS (em TypeScript) * L* 27 Autenticação com JWT no Frontend e Backend: Implementando com Node.js e ReactJS (em TypeScript) #webdev #javascript #node #typescript * The Compound Component Pattern in React Em Ha Tuan Em Ha Tuan Em Ha Tuan Follow Oct 14 The Compound Component Pattern in React #javascript #node #react #* Exploring JavaScript: From Scripting to Object-Oriented Programming Em Ha Tuan Em Ha Tuan Em Ha Tuan Follow Oct 14 Exploring JavaScript: From Scripting to Object-Oriented Programming #javascript #oop #node Add Comment 1 min read * S*v Follow Oct 18 * #we* * Node.js: Struggling with Winston Logging? Rishi Kumar Rishi Kumar Rishi Kumar Follow Oct 14 Node.js: Struggling with Winston Logging? #node #opensource #tutorial #developers Add Comment 3 min read Higher-Order Components (HOCs) in React Em Ha Tuan Em Ha Tuan Em Ha Tuan Follow Oct 14 Higher-Order Components (HOCs) in React #javascript #react #typescrip* TC39 JavaScript Updates, TypeScript 5.7 Beta, Node.js v20.18.0 and more James James James Follow Oct 13 TC39 JavaScript Updates, TypeScript 5.7 Beta, Node.js v20.18.0 and more #java* * a Self-Evolving Codebase: JavaScript’s AST Manipulation and Dynamic Compilation Shafa*ossain Follow Nov 5 Building a Self-Evolving Codebase: JavaScript’s AST Manipulation and Dynamic Compilation #* 3 * Advanced Next.js caching strategies Megan Le* Nov 4 Advanced Next.js caching strategies #webdev #node #react 3 * Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/2"
  },
  {
    "body": "**6 * 274 275 276 277 *. A simple JavaScript/Node coding setup on Mac OS X Hugo Di Francesco Hugo Di Francesco Hugo Di Francesco Follow Nov 19 '18 A simple JavaScript/Node coding setup on Mac OS X #setup #javascript #node #productivity 10 * What is Scope in Javascript? Kartik Malik Kartik Malik Kartik Malik Follow Nov 18 '18 What is Scope in Javascript? #javascript #node #web 8 *d Performant npm: Godspeed and Space in the PKG vblaha vblaha vblaha Follow Nov 15 '18 Performant npm: Godspeed and Space in the PKG #javascript #node #npm #pnpm 17 * Performpal a service object library for Javascript/NodeJS Lucas Aragno Lucas Aragno Lucas Aragno Follow Nov 17 '18 Performpal a service object library for Javascript/NodeJS #node #react #express #serviceobjects 6 *d BxJS Weekly Episode 36 - javascript news podcast 1:02:33 Tim Ermilov Tim Ermilov Tim Ermilov Follow Nov 11 '18 BxJS Weekly Episode 36 - javascript news podcast #news #javascript #node #podcast 7 * Meet Reaves Adriano Di Giovanni Adriano Di Giovanni Adriano Di Giovanni Follow Nov 9 '18 Meet Reaves #javascript #node #opensource #database 5 *d BxJS Weekly Episode 35 - javascript news podcast 51:02 Tim Ermilov Tim Ermilov Tim Ermilov Follow Nov 4 '18 BxJS Weekly Episode 35 - javascript news podcast #news #javascript #node #podcast 9 * Node Package Manager Commands Matt Gredler Matt Gredler Matt Gredler Follow Nov 8 '18 Node Package Manager Commands #node 4 *d MazeBattles.com: Site that allows users to race against their friends to solve generated mazes (NodeJS) Henry Zhu Henry Zhu Henry Zhu Follow Nov 3 '18 MazeBattles.com: Site that allows users to race against their friends to solve generated mazes (NodeJS) #javascript #node #games #webdev 6 *d My first serious project in NodeJS: ToRead CLI Leonardo Teteo Leonardo Teteo Leonardo Teteo Follow Nov 2 '18 My first serious project in NodeJS: ToRead CLI #node #cli #typescript 67 reactions 8 comments 5 min read Amazon Kinesis Auto Scaling work-dharmendra work-dharmendra work-dharmendra Follow Nov 1 '18 Amazon Kinesis Auto Scaling #aws #kinesis #npm #node 7 *d BxJS Weekly Episode 34 - javascript news podcast 1:03:37 Tim Ermilov Tim Ermilov Tim Ermilov Follow Oct 28 '18 BxJS Weekly Episode 34 - javascript news podcast #news #javascript #node #podcast 7 *d Difference between oauth-shim, oauth-signature and oauth-request Node.js? Bernedette Perera Bernedette Perera Bernedette Perera Follow Oct 26 '18 Difference between oauth-shim, oauth-signature and oauth-request Node.js? #node #expressjs #oauth10 #restapi 5 * Simple, but not too simple: how using Zeit’s `micro` improves your Node applications Hugo Di Francesco Hugo Di Francesco Hugo Di Francesco Follow Oct 22 '18 Simple, but not too simple: how using Zeit’s `micro` improves your Node applications #javascript #node #es6 #architecture 11 * Monitoring Government Website for Content Change Malcolm Kee Malcolm Kee Malcolm Kee Follow Oct 24 '18 Monitoring Government Website for Content Change #node #gatsby 7 *d Simple self-hosted deployments & continuous delivery with Exoframe Tim Ermilov Tim Ermilov Tim Ermilov Follow Oct 25 '18 Simple self-hosted deployments & continuous delivery with Exoframe #selfhosted #node #devops #continuousdeployment 16 * How to build an app using Electron Daniel Persson Daniel Persson Daniel Persson Follow Oct 22 '18 How to build an app using Electron #electron #javascript #node #html 11 *d Available devtools for webpack Adam K Dean Adam K Dean Adam K Dean Follow Nov 6 '15 Available devtools for webpack #node #webpack 4 *d Beginner Node Help masmithrpg masmithrpg masmithrpg Follow Oct 15 '18 Beginner Node Help #node #pug #express #html 5 *d Learning JS can be frustrating The Key The Key The Key Follow Oct 13 '18 Learning JS can be frustrating #javascript #beginners #node #learning 14 * Build a Reddit Moderator Bot With Standard Library + Code.xyz in 10 Minutes Eileen Eileen Eileen Follow Oct 16 '18 Build a Reddit Moderator Bot With Standard Library + Code.xyz in 10 Minutes #showdev #javascript #node #webdev 14 * Beginner Node Help- take 2 masmithrpg masmithrpg masmithrpg Follow Oct 15 '18 Beginner Node Help- take 2 #node #pug #express #html 5 reactions 7 comments 2 min read #Help with passport and postgresql Pedro Fumero Pedro Fumero Pedro Fumero Follow Oct 13 '18 #Help with passport and postgresql #node #postgres #passport 7 * Creating a plugin for Cogear.JS Dmitriy Belyaev Dmitriy Belyaev Dmitriy Belyaev Follow for Cogear.JS Oct 9 '18 Creating a plugin for Cogear.JS #node #cogearjs #javascript #hacktoberfest 8 *d Deploying Cogear.JS-generated site to the Now.sh Dmitriy Belyaev Dmitriy Belyaev Dmitriy Belyaev Follow for Cogear.JS Oct 5 '18 Deploying Cogear.JS-generated site to the Now.sh #node #cogearjs #bash #devops 12 reacti* Chatbot for Twitter Direct Message Sandesh B Suvarna (Iconic.wtf) Sandesh B Suvarna (Iconic.wtf) Sandesh B Suvarna (Iconic.wtf) Follow Sep 23 '18 Build Chatbot for Twitter Direct Message #twitterchatbot #node #twitterapi #directmessage 10 *d Deadlock Detection in Service Orchestrator: Real time use case of Algorithms coded from scratch VenkteshV VenkteshV VenkteshV Follow Sep 23 '18 Deadlock Detection in Service Orchestrator: Real time use case of Algorithms coded from scratch #datastructures #node 14 *d Learning Apollo through React Starter Kit Soichi Takamura Soichi Takamura Soichi Takamura Follow Sep 4 '18 Learning Apollo through React Starter Kit #node #ssr #react #apollo 8 *d The ForwardJS Battle — Part 2: Ottawa Rey Riel Rey Riel Rey Riel Follow for Qlik Branch Aug 28 '18 The ForwardJS Battle — Part 2: Ottawa #datavisualization #node #reactnative #blockchain 6 *d Easy Requests in NodeJS Igor Souza Martins Igor Souza Martins Igor Souza Martins Follow Aug 21 '18 Easy Requests in NodeJS #javascript #node #asyncawait 45 reactions 7 comments 3 min read I wondered how async module works, so I made some functions and hosted on npm Meet Zaveri Meet Zaveri Meet Zaveri Follow Aug 24 '18 I wondered how async module works, so I made some functions and hosted on npm #javascript #node #async 10 *d Confessions of a Developer. Hassan Sani Hassan Sani Hassan Sani Follow Aug 15 '18 Confessions of a Developer. #node #javascript #developer 31 * Most Popular Development Posts Of The Week (25 April 2019) Ido Shamun Ido Shamun Ido Shamun Follow for daily.dev Apr 25 '19 Most Popular Development Posts Of The Week (25 April 2019) #javascript #webdev #node #react 20 * Where does npm install the packages? flavio ⚡️🔥 flavio ⚡️🔥 flavio ⚡️🔥 Follow Aug 6 '18 Where does npm install the packages? #javascript #node 9 * Firebase Functions で Node.js 8 使えるようになったぞ〜〜〜！！！ Takaya Kobayashi Takaya Kobayashi Takaya Kobayashi Follow Aug 1 '18 Firebase Functions で Node.js 8 使えるようになったぞ〜〜〜！！！ #firebase #cloudfunctions #firebasefunctions #node 13 *d Install & Configure oracledb node module in windows MohananT MohananT MohananT Follow Jul 26 '18 Install & Configure oracledb node module in windows #javascript #npm #oracledb #node 7 *d 👨‍💻 Scrape Websites for Information Easily using Code.xyz and Node.js🤓 Janeth Graziani Janeth Graziani Janeth Graziani Follow Jul 12 '18 👨‍💻 Scrape Websites for Information Easily using Code.xyz and Node.js🤓 #node #javascript #webdev #html 35 * The Winds 2.0 Stack Nick Parsons Nick Parsons Nick Parsons Follow Jun 26 '18 The Winds 2.0 Stack #javascript #node #electron 33 *d 😉🚀🤗 Code.xyz updates, June 20th 2018 — Import and Export from GitHub Gist Janeth Graziani Janeth Graziani Janeth Graziani Follow Jun 20 '18 😉🚀🤗 Code.xyz updates, June 20th 2018 — Import and Export from GitHub Gist #showdev #node #javascript #webdev 7 *d Installing Node.js on a Raspberry Pi Adam K Dean Adam K Dean Adam K Dean Follow May 15 '15 Installing Node.js on a Raspberry Pi #raspberrypi #javascript #node 5 *d Notes on Raspberry Pi & Arduino Adam K Dean Adam K Dean Adam K Dean Follow May 15 '15 Notes on Raspberry Pi & Arduino #raspberrypi #arduino #javascript #node 5 *d Generating PDFs from an ASP.NET Core app using a Node library Galdin Raphael Galdin Raphael Galdin Raphael Follow Apr 25 '18 Generating PDFs from an ASP.NET Core app using a Node library #aspnetcore #node #docker 13 * Should I carry on with Django or Node.js? Divyesh Parmar Divyesh Parmar Divyesh Parmar Follow Apr 16 '18 Should I carry on with Django or Node.js? #python #javascript #node #django 10 *d A blast from the past: Node.JS Safia Abdalla Safia Abdalla Safia Abdalla Follow Apr 2 '18 A blast from the past: Node.JS #node 8 * Where do you store your apps flat file databases? ImTheDeveloper ImTheDeveloper ImTheDeveloper Follow Mar 23 '18 Where do you store your apps flat file databases? #discuss #javascript #database #node 2 * Revisited Concept: High Performance web server w/ Promises Frank@theOpenSourceU.org Frank@theOpenSourceU.org Frank@theOpenSourceU.org Follow Mar 15 '18 Revisited Concept: High Performance web server w/ Promises #exploration #opensource #github #node 9 * Concept: High Performance web server w/ Promises Frank@theOpenSourceU.org Frank@theOpenSourceU.org Frank@theOpenSourceU.org Follow Feb 27 '18 Concept: High Performance web server w/ Promises #node #softwareengineering #exploration 9 * Is javascript or typescript the best for backend development? hitochan hitochan hitochan Follow Feb 18 '18 Is javascript or typescript the best for backend development? #discuss #javascript #node 14 * Visualizing local requests w/ gource NodeJS & some magic 🦄 [wip] Sabin Tudor 👾 Sabin Tudor 👾 Sabin Tudor 👾 Follow Feb 3 '18 Visualizing local requests w/ gource NodeJS & some magic 🦄 [wip] #node #javascript #gource #security 12 *d Converting A File Uploaded To Base64 using FuctBase64 Temidayo Ajisebutu Temidayo Ajisebutu Temidayo Ajisebutu Follow Jan 26 '18 Converting A File Uploaded To Base64 using FuctBase64 #javascript #angular #node #fileupload 7 *d Synchronization of concurrent HTTP requests in NodeJS Alex Rudenko Alex Rudenko Alex Rudenko Follow Jan 2 '18 Synchronization of concurrent HTTP requests in NodeJS #node #restapi #javascript 11 reactions Ad* Favico Generator Abdulazeez Abdulazeez Abdulazeez Abdulazeez Abdulazeez Abdulazeez Follow Dec 30 '17 Introducing Favico Generator #showdev #node #javascript 13 *d Finding the \"best\" Camera Settings for Rocket League. agentd00nut agentd00nut agentd00nut Follow Aug 23 '18 Finding the \"best\" Camera Settings for Rocket League. #webscraping #python #node #matplotlib 7 *d Some Career Advice Aalind Gupta Aalind Gupta Aalind Gupta Follow Dec 20 '17 Some Career Advice #discuss #career #node 13 reactions 7 comments 1 min read Understanding async/await with Array reduce method Gyandeep Singh Gyandeep Singh Gyandeep Singh Follow Dec 15 '17 Understanding async/await with Array reduce method #javascript #node #asyncawait 7 *d Help with Jest: How to test the error routes in my code? ImTheDeveloper ImTheDeveloper ImTheDeveloper Follow Dec 1 '17 Help with Jest: How to test the error routes in my code? #discuss #jest #node #* 1 min read Domain Driven Design with React Native Decebal Dobrica Decebal Dobrica Decebal Dobrica Follow Nov 21 '17 Domain Driven Design with React Native #architecture #ddd #reactnative #node 9 * The Github repos I discovered this week (III) Michael De Abreu Michael De Abreu Michael De Abreu Follow Nov 21 '17 The Github repos I discovered this week (III) #github #repositories #node 12 *d CloudPress — Part 1: How to reinvent a better wheel! Abdullah Ali Abdullah Ali Abdullah Ali Follow Nov 15 '17 CloudPress — Part 1: How to reinvent a better wheel! #javascript #node #webdev #typescript 5 * Finding the right tool for the job Johannes Schröder Johannes Schröder Johannes Schröder Follow Oct 16 '17 Finding the right tool for the job #showdev #javascript #node #devdiary 13 *d Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/277"
  },
  {
    "body": "**5 * 1 2 3 4 5 6 7 8 9 *. * S*v Follow Nov 4 * #we* 4 * Installing And Running NPM Packages Using The Terminal Chidubem Okoli Chidubem Okoli Chidubem Okoli Follow Nov 4 Installing And Running NPM Packages Using The Terminal #node #webdev #javascript 8 *d Using the built-in SQLite module in Node.js Megan Le* Oct 16 Using the built-in SQLite module in Node.js #*t 15 min read *7 Adam Adam Adam Follow Nov 4 *7 #webdev #weeklyfoo #javascript #node 10 * Working with WebSocket using Nodejs keshav Sandhu keshav Sandhu keshav Sandhu Follow Oct 11 Working with WebSocket using Nodejs #webdev #beginners #node #* JavaScript Is Broken! * Oct 11 JavaScript Is Broken! #javascript #node #typescript #react Add Comment 1 min read How to setup domains and subdomains in localhost Abdul Azeez V Abdul Azeez V Abdul Azeez V Follow Oct 15 How to setup domains and subdomains in localhost #node #* 1 min read AWS Lambda with RDS Data API (TypeScript) szymon-szym szymon-szym szymon-szym * Nov 2 AWS Lambda with RDS Data API (TypeScript) #aws #serverless #typescript #node 9 *d * M Inam M Inam M Inam Follow Oct 24 * #backend #backenddevelopment #node #express 5 *d Organizing a Production-Ready Node.js and Express.js Application JasGiigli JasGiigli JasGiigli Follow Oct 10 Organizing a Production-Ready Node.js and Express.js Application #webdev #javascript #node #express Add Comment 4 min read Haciendo tu Primer Proyecto con Deno 20 Diego Letelier Diego Letelier Diego Letelier Follow Oct 14 Haciendo tu Primer Proyecto con Deno 20 #deno #type* JavaScript Essentials: Part 7 * Nov 2 JavaScript Essentials: Part 7 #* * URL-Shortener-APIs Karan Kumar Gautam Karan Kumar Gautam Karan Kumar Gautam Follow Oct 9 URL-Shortener-APIs #webdev #opensource #node #* Implementación de Autenticación Segura en Node.js con JWT Adrian Grahl Adrian Grahl Adrian Grahl Follow Oct 9 Implementación de Autenticación Segura en Node.js con JWT #node #express #jwt #security Add Comment 4 min read *4 Adam Adam Adam Follow Oct 14 *4 #webdev #weeklyfoo #javascript #node 2 *ad Do You Really Need \"useState\" for Everything? Exploring Alternatives Ishan Bagchi Ishan Bagchi Ishan Bagchi Follow for Byte-Sized News Oct 8 Do You Really Need \"useState\" for Everything? Exploring Alternatives #webdev #javascript #react #*in read 10 Must-Know Tips for Effective Node.js Development Susheel kumar Susheel kumar Susheel kumar Follow Oct 8 10 Must-Know Tips for Effective Node.js Development #node Add Comment 2 min read Unlock the Power of Node.js with NodeMaven marita Giorgobiani marita Giorgobiani marita Giorgobiani Follow Oct 8 Unlock the Power of Node.js with NodeMaven #node #proxy #* Clawject: Dependency Injection with Beans Artem Korniev Artem Korniev Artem Korniev Follow Oct 21 Clawject: Dependency Injection with Beans #typescript #node #opensource #webdev 5 * CRUD Operations: What Are They, and How Can I Use Them? wendyver wendyver wendyver Follow Oct 7 CRUD Operations: What Are They, and How Can I Use Them? #javascript #mongodb #node #express Add Comment 3 min read Basic Docker Terminologies Easy Tuts Easy Tuts Easy Tuts Follow Oct 6 Basic Docker Terminologies #docker #devops #node #w* read Join the Open-Source Revolution with AxioDB: Calling All Developers! Ankan Saha Ankan Saha Ankan Saha Follow Oct 6 Join the Open-Source Revolution with AxioDB: Calling All Developers! #node #npm #opensource #testing Add Comment 1 min read Is Next.js better than Nodejs? Turing Turing Turing Follow Oct 6 Is Next.js better than Nodejs? #nextjs #*n read The 6 Stages of the Node.js Event Loop muthu raja muthu raja muthu raja Follow Oct 29 The 6 Stages of the Node.js Event Loop #javascript #node #tutorial #* 3 min read Step by Step guide to setup Node server with Typescript Garima Garima Garima Follow Oct 29 Step by Step guide to setup Node server with Typescript #typescript #beginners #node #webdev 2 * Hyper-Scale Activated! Ship Your Own FaaS 🤖 * Follow for smapiot Oct 18 Hyper-Scale Activated! Ship Your Own FaaS 🤖 #webdev #javascript #node #express 8 * *5 Adam Adam Adam Follow Oct 18 *5 #webdev #weeklyfoo #javascript #node 1 comment 8 min read Interactive Portfolio Website Divyank Gupta Divyank Gupta Divyank Gupta Follow Oct 5 Interactive Portfolio Website #mern #webdev #*d Brave New World: Environments Oscar & Ralph Oscar & Ralph Oscar & Ralph Follow Oct 28 Brave New World: Environments #angular #node #nvm #nvmrc * URL * 9 URL #express #node #react #nextjs 2 *d Bypass bundlers’ detection of the require statement * Oct 4 Bypass bundlers’ detection of the require statement #javascript #typescript #reac* Shallow vs Deep Copy of Objects in JavaScript Claudio Guedes Claudio Guedes Claudio Guedes Follow Oct 4 Shallow vs Deep Copy of Objects in JavaScript #javascript #node #development Add Comment 1 min read Best Practices for Node.js Development in 2024 Techcronus Business Solutions Pvt. Ltd. Techcronus Business Solutions Pvt. Ltd. Techcronus Business Solutions Pvt. Ltd. Follow Oct 4 Best Practices for Node.js Development in 2024 #node #nodejsdevelop #webdev * Node.js CI/CD: Build & Deploy with Azure DevOps to Azure Web App S3CloudHub S3CloudHub S3CloudHub Follow Oct 4 Mastering Node.js CI/CD: Build & Deploy with Azure DevOps to Azure Web App #azure #devop* The mysterious supply chain concern of string-width-cjs npm package SnykSec SnykSec SnykSec Follow for Snyk Oct 4 The mysterious supply chain concern of string-width-cjs npm package #opensourcesecurity #supplychainsecurity #javascript #node Add Comment 7 min read Understanding and Resolving Node.js Version Conflicts with NVM on macOS horace njoroge horace njoroge horace njoroge Follow Oct 4 Understanding and Resolving Node.js Version Conflicts with NVM on macOS #beginners #node #learning #development Add Comment 1 min read How To Deploy a Node.js Web App on Azure DevOps: A Step-by-Step Guide S3CloudHub S3CloudHub S3CloudHub Follow Oct 4 How To Deploy a Node.js Web App on Azure DevOps: A Step-by-Step Guide #azure #devops #node #webapp * Servidor NodeJs + Typescript + ExpressJs Eduardo Fuentes Eduardo Fuentes Eduardo Fuentes Follow Oct 7 Servidor NodeJs + Typescript + ExpressJs #webdev #node #typescript #backend * Build a small Q&A bot with OpenAI trannguyenhung011086 trannguyenhung011086 trannguyenhung011086 Follow Oct 3 Build a small Q&A bot with OpenAI #openai #node #typescript #express * the Development and Impact of NFT Platforms saeedullah shah saeedullah shah saeedullah shah Follow Oct 3 Exploring the Development and Impact of NFT Platforms #webdev #javascript #node #* Node.js Update Christopher Chhim Christopher Chhim Christopher Chhim Follow Oct 3 Node.js Update #webdev #programming #node #backend Add Comment 2 min read Buffers: Node.js * Oct 7 Buffers: Node.js #node #* * * * Queue in an Express application #queue #express #node #docker Add Comment 3 min read Proactive AppSec continuous vulnerability management for developers and security teams SnykSec SnykSec SnykSec Follow for Snyk Oct 3 Proactive AppSec continuous vulnerability management for developers and security teams #javascript #docker #node #vscode Add Comment 8 min read PDF binary format encoded to previewable decoded Shubham Sharma Shubham Sharma Shubham Sharma Follow Oct 3 PDF binary format encoded to previewable decoded #node #pdf Add Comment 1 min read A New Era for Node.js Framework: Introducing Express v5 Omprakashchauhan Omprakashchauhan Omprakashchauhan Follow Oct 16 A New Era for Node.js Framework: Introducing Express v5 #news #javascript #* 4 min read Creating and Managing Docker Containers for a Simple Node.js Application bankolejohn bankolejohn bankolejohn Follow Oct 7 Creating and Managing Docker Containers for a Simple Node.js Application #docker #node #simpleapplication Add Comment 3 min read * S*v Follow Oct 16 * #webdev #* 4 min read 🚀 Frontend Tip of the Day: Debouncing Input Handlers for Better Performance 🚀 ATUL KUMAR SINGH ATUL KUMAR SINGH ATUL KUMAR SINGH Follow Oct 7 🚀 Frontend Tip of the Day: Debouncing Input Handlers for Better Performance 🚀 #react #javascript #node #webdev * Mystic Vault: A * Simple Ethereum DApp from Scratch 🔮✨ ( 30 min ) Karthi Keyan Karthi Keyan Karthi Keyan Follow Oct 2 Building Mystic Vault: A * Simple Ethereum DApp from Scratch 🔮✨ ( 30 min ) #web3 #css #javascript #node Add Comment 11 min read * * Nov 4 * #webdev #backend #node 126 reactions 18 comments 3 min read Eu pretendo fazer alguns cursos para me tornar um programado Full-Stack... NodeJS, ReactJS e React Native .. .. .. Follow Oct 25 Eu pretendo fazer alguns cursos para me tornar um programado Full-Stack... NodeJS, ReactJS e React Native #javascript #react #node #docker Add Comment 1 min read The module system * Manoj Kumar Patra Follow Oct 2 The module system #node #nodejsdesignpatterns Add Comment 8 min read The module system * Manoj Kumar Patra Follow Oct 2 The module system #node #nodejsdesignpatterns Add Comment 8 min read Callbacks and Events * Manoj Kumar Patra Follow Oct 2 Callbacks and Events #node #nodejsdesignpatterns Add Comment 4 min read Coding with Streams * Manoj Kumar Patra Follow Oct 2 Coding with Streams #node #nodejsdesignpatterns Add Comment 14 min read The Node.js Platform * Manoj Kumar Patra Follow Oct 2 The Node.js Platform #node #nodejs* Asynchronous Control Flow Patterns * Manoj Kumar Patra Follow Oct 2 Asynchronous Control Flow Patterns #node #nodejsdesignpattern*o deploy React and Node application on render ? Muhammad Owais Warsi Muhammad Owais Warsi Muhammad Owais Warsi Follow Oct 2 How to deploy React and Node application on render ? #webdev #react #node #cloud Add Comment 2 min read Making your First Project with Deno 2.0 Diego Letelier Diego Letelier Diego Letelier Follow Oct 15 Making your First Project with Deno 2.0 #deno #typescript #java*t 2 min read Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/3"
  },
  {
    "body": "**5 * 1 2 3 4 5 6 7 8 9 *. How Repeated Configuration Led Me to Build a Node.js CLI Abdulsalam Sa'ad Abdulsalam Sa'ad Abdulsalam Sa'ad Follow Oct 6 How Repeated Configuration Led Me to Build a Node.js CLI #node #typescript #opensource #cli Add Comment 3 min read How to anonymize properties in an object using recursion Claudio Guedes Claudio Guedes Claudio Guedes Follow Oct 1 How to anonymize properties in an object using recursion #javascript #algorithms #node #* 🛡️ Securing Your Express.js App: JWT Authentication Step-by-Step 🚀 * Oct 1 🛡️ Securing Your Express.js App: JWT Authentication Step-by-Step 🚀 #node #jw*ad Redis caching with Mongoose Ayanabilothman Ayanabilothman Ayanabilothman Follow Oct 1 Redis caching with Mongoose #redis #caching #node #mongodb * a Microservices Architecture with Node.js and RabbitMQ wole wole wole Follow Oct 1 Building a Microservices Architecture with Node.js and RabbitMQ #node #microservices #tutorial #* 6 min read * S*v Follow Nov 1 * #we* 16 * Dominate Object-Oriented Programming (OOP) in JavaScript. Shafa*ossain Follow Nov 4 Dominate Object-Oriented Programming (OOP) in JavaScript. #java* 9 * 🔥 * 🚀 * Oct 29 🔥 * 🚀 #* 104 * Zoom recording to S3 using an AWS Lambda German Escobar German Escobar German Escobar Follow Oct 1 Zoom recording to S3 using an AWS Lambda #aws #zoom #node Add Comment 2 min read [DAY 118-122] I learned full-stack by building my 2nd app Thomas Cansino Thomas Cansino Thomas Cansino Follow Sep 30 [DAY 118-122] I learned full-stack by building my 2nd app #react #node #mongodb #express 6 * Node.js pra leigos - MongoDB e Fastify Dev Doido Dev Doido Dev Doido Follow Sep 30 Node.js pra leigos - MongoDB e Fastify #mongodb #node #javascript #braziliandevs Add Comment 38 min read 100 Days of Servers Distributions- Days 4 and 100 Day 4 Introduction to Web Servers pirvanm pirvanm pirvanm Follow Sep 30 100 Days of Servers Distributions- Days 4 and 100 Day 4 Introduction to Web Servers #node #nuxt #express Add Comment 6 min read Understanding Node.js: Event-Driven Architecture and Non-Blocking I/O Model Rahul Sharma Rahul Sharma Rahul Sharma Follow Oct 22 Understanding Node.js: Event-Driven Architecture and Non-Blocking I/O Model #node #webdev #programming #javascript 6 *d How to Create a React App? Installation and Environment Setup * Emma Richardson Follow Oct 22 How to Create a React App? Installation and Environment Setup #react #javascript #webdev #node Add Comment 2 min read Using Oxlint for My Node.js Project Uday Rana Uday Rana Uday Rana Follow Nov 1 Using Oxlint for My Node.js Project #node #oxc #oxlint 6 *d Quick Comparison: PHP, Node.js, Django, and Spring Boot Angela Swift Angela Swift Angela Swift Follow Nov 1 Quick Comparison: PHP, Node.js, Django, and Spring Boot #php #node #django #webdev 9 * Enhancing JSON Serialization Performance in Express.js with express-fast-json-stringify Nigro Simone Nigro Simone Nigro Simone Follow Sep 29 Enhancing JSON Serialization Performance in Express.js with express-fast-json-stringify #express #*n read Error Handl* Obinna Obinna Obinna Follow Nov 1 Error Handl* #javascript #node #logging #errors 4 * Node.js Memory Leaks: A Guide to Detection and Resolution Muhammad Yasir Rafique Muhammad Yasir Rafique Muhammad Yasir Rafique Follow Oct 31 Node.js Memory Leaks: A Guide to Detection and Resolution #help #node #memory #programming 6 * Why Node.js is becoming the new favorite of backend developers * Oct 21 Why Node.js is becoming the new favorite of backend developers #node #npm #backend 2 reactions * Image Uploads with Multer, Firebase, and Express in Node.js Jeysson Aly Contreras Jeysson Aly Contreras Jeysson Aly Contreras Follow Oct 31 Mastering Image Uploads with Multer, Firebase, and Express in Node.js #firebase #express #node #multer Add Comment 7 min read Fix an issue on my Dockerfile: ARG Scope in Multi-Stage Docker Build * 🟨 Manuel Artero Anguita 🟨 Follow Oct 31 Fix an issue on my Dockerfile: ARG Scope in Multi-Stage Docker Build #webdev #docker #node #beginners 9 *d Criando Clusterização em Aplicações Node.js Kaue Campos Kaue Campos Kaue Campos Follow Oct 31 Criando Clusterização em Aplicações Node.js #javascript #node #typescript #api 5 *d Efficiently Manage Errors in Next.js with a Comprehensive Developer Solution Riyon Sebastian Riyon Sebastian Riyon Sebastian Follow Oct 31 Efficiently Manage Errors in Next.js with a Comprehensive Developer Solution #nextjs #javascript #npm #node 2 * Bun: A Faster, Modern Alternative to Node.js for JavaScript Development Ashis*apati Follow Oct 20 Bun: A Faster, Modern Alternative to Node.js for JavaScript Development #node #bunjs #beginners #typescript 8 * Deno vs Node: The Next Evolution of JavaScript, But Are We Ready? Usman Awan Usman Awan Usman Awan Follow Oct 11 Deno vs Node: The Next Evolution of JavaScript, But Are We Ready? #node #javascript #webdev #* 5 min read Minting JWT Token Using Node.js Akshaya Mallyar Shet Akshaya Mallyar Shet Akshaya Mallyar Shet Follow Sep 27 Minting JWT Token Using Node.js #jwt #json #token #node Add Comment 2 min read Minting JWT Token Using Node.js Akshaya Mallyar Shet Akshaya Mallyar Shet Akshaya Mallyar Shet Follow Sep 27 Minting JWT Token Using Node.js #jwt #json #token #node Ad* Ultimate Express: The 5x Fastest Drop-In Replacement for Express.js Nigro Simone Nigro Simone Nigro Simone Follow Oct 20 Introducing Ultimate Express: The 5x Fastest Drop-In Replacement for Express.js #*nt 2 min read Best Testing Practices in Node.js * Antonello Zanini Follow for AppSignal Oct 30 Best Testing Practices in Node.js #* read * S*v Follow Oct 30 * #webdev #* 3 min read How to Fix Node Server Cron Issue Sohail Jafri Sohail Jafri Sohail Jafri Follow Oct 29 How to Fix Node Server Cron Issue #node #cronjob #webdev #beginners 12 reactions 4 comments 7 min read Nodejs | Docker | Multi-stage Kishor Kc Kishor Kc Kishor Kc Follow Oct 9 Nodejs | Docker | Multi-stage #node #docker #multistage #container * HTTP Server: Node.js * Oct 9 HTTP Server: Node.js #node #javascript #programming * *? * Simon Johansson Follow for Encore Nov 1 *? #*dev 208 reactions 30 comments 11 min read Elevate Your API Development: Mastering the JSON Schema Editor Patrick Patrick Patrick Follow Oct 29 Elevate Your API Development: Mastering the JSON Schema Editor #json #redux #api #node 2 *d Render, Heroku, or Vercel: Which One Should You Choose for Your Next Project? 🚀 Sababa T Sababa T Sababa T Follow Oct 29 Render, Heroku, or Vercel: Which One Should You Choose for Your Next Project? 🚀 #javascri* 3 min read * * Oct 17 * #express #node #javascript #backendd* Leveraging Ephemeral Storage in AWS Lambda Tunmise Ogunniyi Tunmise Ogunniyi Tunmise Ogunniyi Follow Oct 27 Leveraging Ephemeral Storage in AWS Lambda #aws #lambda #node 18 * New release of Node.js v22.9.0💚 Invezza Invezza Invezza Follow Sep 24 New release of Node.js v22.9.0💚 #node #javascript #webdev #* *6 Adam Adam Adam Follow Oct 28 *6 #webdev #weeklyfoo #javascript #node 2 * From Code to Chat: Help Me Deploy My Node.js & React App for Free! Sababa T Sababa T Sababa T Follow Oct 28 From Code to Chat: Help Me Deploy My Node.js & React App for Free! #webdev #javascript #*d 🛠️ Node.js Best Practices for Writing Clean and Scalable Code 🚀 Ashis*apati Follow Oct 27 🛠️ Node.js Best Practices for Writing Clean and Scalable Code 🚀 #webdev #programming #node #bestpractices 4 * How to Easily Manage Authentication in Express.js with FluidAuth imani brown imani brown imani brown Follow Sep 24 How to Easily Manage Authentication in Express.js with FluidAuth #express #node #oauth #webdev Add Comment 2 min read How to install Node Lts version on your ubuntu Eze Sugar 👩‍💻 Eze Sugar 👩‍💻 Eze Sugar 👩‍💻 Follow Sep 23 How to install Node Lts version on your ubuntu #webdev #linux #ubuntu #node Add Comment 1 min read 🥇 Top 10 Node.js Libraries for Web Development 🚀 Ashis*apati Follow Oct 27 🥇 Top 10 Node.js Libraries for Web Development 🚀 #webdev #javascript #* 4 min read Conhecendo o Node JS Kauê Fraga Rodrigues Kauê Fraga Rodrigues Kauê Fraga Rodrigues Follow Oct 26 Conhecendo o Node JS #javascript #beginners #node #braziliandevs 5 * Check Disk Usage with Terminal Vladimir Vovk Vladimir Vovk Vladimir Vovk Follow Sep 22 Check Disk Usage with Terminal #du #cli #node #osx Add Comment 2 min read Env-Core: An Easy Way to Validate Environment Variables in Node.js Projects Emmanuel Nwankwo Emmanuel Nwankwo Emmanuel Nwankwo Follow Oct 26 Env-Core: An Easy Way to Validate Environment Variables in Node.js Projects #validation #environment #node #nestjs 3 *d Supercharge Your Node.js Monitoring with OpenTelemetry, Prometheus, and Grafana * Gleidson Leite da Silva Follow Oct 26 Supercharge Your Node.js Monitoring with OpenTelemetry, Prometheus, and Grafana #observability #node #webdev #devops 7 *d Navigating ARM64 and x86_64 Architectures in macOS for Node.js Development Benjamin Arambide Benjamin Arambide Benjamin Arambide Follow Sep 22 Navigating ARM64 and x86_64 Architectures in macOS for Node.js Development #node #macos #arch * a Server with Node.js Express Sanya_Lazy Sanya_Lazy Sanya_Lazy Follow Sep 22 Building a Server with Node.js Express #node #express #webdev #javascript * Request context in Nuxt Marc Arnoult Marc Arnoult Marc Arnoult Follow Oct 25 Request context in Nuxt #javascript #node #nuxt #webdev 3 * Google Sign-in with Angular and Node.js Kelly Okere Kelly Okere Kelly Okere Follow Oct 15 Google Sign-in with Angular and Node.js #google #angular #node #chatgpt 3 * Creating a global production ready marketplace with Medusa JS Slaknoah Slaknoah Slaknoah Follow Oct 25 Creating a global production ready marketplace with Medusa JS #medusa #node #postgres #googlecloud 7 *d History of Node.js CHINTAMANI PALA CHINTAMANI PALA CHINTAMANI PALA Follow Sep 21 History of Node.js #webdev #node #javascript #* Criando um Pacote NPM com Suporte a CommonJS e ESM usando Rollup Marcelo Lourenço Marcelo Lourenço Marcelo Lourenço Follow Oct 14 Criando um Pacote NPM com Suporte a CommonJS e ESM usando Rollup #node #npm #rollup #javascript * * S*v Follow Oct 25 * #webdev #* 4 min read Deploying NestJS Application using Vercel and Supabase Abayomi Olatunji Abayomi Olatunji Abayomi Olatunji Follow Oct 25 Deploying NestJS Application using Vercel and Supabase #webdev #javascript #node #nestjs 2 *d * S*v Follow Oct 14 * #webdev #* 4 min read Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/4"
  },
  {
    "body": "**5 * 2 3 4 5 6 7 8 9 10 *. 💡 Go vs Node.js: Which Backend Powerhouse Will Dominate in 2024? ⚡ * Sep 21 💡 Go vs Node.js: Which Backend Powerhouse Will Dominate in 2024? ⚡ #node #go #backend #webdev Add Comment 5 min read What's the Difference Between TCP and UDP? Patrick Patrick Patrick Follow Oct 25 What's the Difference Between TCP and UDP? #* Add Comment 3 min read 🧠 Mistakes Make You a Better Developer – Don’t Run from Them! Yaser Yaser Yaser Follow Sep 25 🧠 Mistakes Make You a Better Developer – Don’t Run from Them! #programming #beginners #node #career Add Comment 1 min read TypeScript (and JSDoc) vs JavaScript Henrique Leite Henrique Leite Henrique Leite Follow Oct 24 TypeScript (and JSDoc) vs JavaScript #typescript #javascript #node Add Comment 10 min read How to Update Node.js Antonio Silva Antonio Silva Antonio Silva Follow Oct 24 How to Update Node.js #node #tutorial #beginners #* npmrc—The Tiny File of Node * 24 npmrc—The Tiny File of Node #javascript #programming #node #npm Add Comment 2 min read Exploring JavaScript Runtime Environments: From Web Browsers to IoT muthu raja muthu raja muthu raja Follow Oct 24 Exploring JavaScript Runtime Environments: From Web Browsers to IoT #javascript #beginners #* 2 min read How to Deploy a NestJS Application to a VPS Server: A Complete Guide. Olashina Olashina Olashina Follow Oct 24 How to Deploy a NestJS Application to a VPS Server: A Complete Guide. #devops #node #tutorial #* 4 min read * Jakub And*rzejewski Follow Oct 7 * #node #* 238 reactions 21 comments 4 min read Why I Prefer 'function' Declarations for Top-Level Symbols (But Won't Use Them Anymore) * 🟨 Manuel Artero Anguita 🟨 Follow Oct 23 Why I Prefer 'function' Declarations for Top-Level Symbols (But Won't Use Them Anymore) #javascript #typescript #react #node 3 * Understanding Closures in JavaScript: A Key Concept for 2024 Shafa*ossain Follow Oct 13 Understanding Closures in JavaScript: A Key Concept for 2024 #javascript #webdev #beginners #node * Introduction to NodeJS Madhav Ganesan Madhav Ganesan Madhav Ganesan Follow Oct 23 Introduction to NodeJS #node #javascript #webdev #* * S*v Follow Oct 23 * #we* * Overview of Nodemailer: Easy Email Sending in Node.js Kamlesh Gupta Kamlesh Gupta Kamlesh Gupta Follow Sep 19 Overview of Nodemailer: Easy Email Sending in Node.js #node #npm #javascript #express * Exploring Deno 2: Features, Benefits, and Getting Started Bhavsagar Bhavsagar Bhavsagar Follow Oct 12 Exploring Deno 2: Features, Benefits, and Getting Started #deno #typescript #node #react * Monitoring nodejs Microservices * Sep 19 Monitoring nodejs Microservices #microservices #node #nestjs Add Comment 1 min read Dockerize nestjs app with postgres lifewithcode lifewithcode lifewithcode Follow Sep 19 Dockerize nestjs app with postgres #nestjs #docker #dockercompose #node Add Comment 1 min read How to Implement Clustering in Node.js Susheel kumar Susheel kumar Susheel kumar Follow Sep 19 How to Implement Clustering in Node.js #node #clustering Add Comment 2 min read Common built-in APIs in Nodejs muthu raja muthu raja muthu raja Follow Oct 23 Common built-in APIs in Nodejs #javascript #node #beginners #tutorial * VineJS vs. Zod for schema validation Megan Le* Oct 22 VineJS vs. Zod for schema validation #webdev #node #typescript #*t 12 min read Automate Refresh Tokens with Axios Intercepters! Kartik Sharma Kartik Sharma Kartik Sharma Follow Oct 22 Automate Refresh Tokens with Axios Intercepters! #javascript #api #node #webdev 5 * nestjs & expressjs side by side #nodejs * Sep 19 nestjs & expressjs side by side #nodejs #nestjs #*nt 1 min read Introducing saksh-crud: Simplify Your Node.js CRUD Operations Susheel kumar Susheel kumar Susheel kumar Follow Sep 19 Introducing saksh-crud: Simplify Your Node.js CRUD Operations #npm #node #javascript #crud * Started with Hyperswitch, Nodejs, and Express for Payment Processing Brix Mavu Brix Mavu Brix Mavu Follow Oct 11 Getting Started with Hyperswitch, Nodejs, and Express for Payment Processing #node #express #hyperswitch #paymentgateways * Node.js performance hooks and measurement APIs Megan Le* Oct 1 Node.js performance hooks and measurement APIs #*t 11 min read A Few Useful Functions in Node.js Util Module Hoai Tong Xuan Hoai Tong Xuan Hoai Tong Xuan Follow Sep 22 A Few Useful Functions in Node.js Util Module #node #*t 3 min read Simple WhatsApp ChatBot in Node.js for Beginners WhatsApp API for developers WhatsApp API for developers WhatsApp API for developers Follow Oct 22 Simple WhatsApp ChatBot in Node.js for Beginners #node #whatsapp #beginners #opensource * Setting Up Node.js and Yarn on Debian-based Distributions Khalif AL Mahmud Khalif AL Mahmud Khalif AL Mahmud Follow Oct 22 Setting Up Node.js and Yarn on Debian-based Distributions #node #npm #debian 5 *d MongoDB vs. Mongoose: Understanding Their Roles and Differences Kamlesh Gupta Kamlesh Gupta Kamlesh Gupta Follow Sep 18 MongoDB vs. Mongoose: Understanding Their Roles and Differences #mongodb #mongoose #javascrip* How to Prepare Your Application to Handle Multiple Requests on Black Friday * Wallace Freitas Follow Oct 21 How to Prepare Your Application to Handle Multiple Requests on Black Friday #architecture #javascript #node #webdev Add Comment 3 min read Session Management In Node JS AKINTOLA STEPHEN IYANU AKINTOLA STEPHEN IYANU AKINTOLA STEPHEN IYANU Follow Oct 10 Session Management In Node JS #session #node #backenddevelopment #javascript 10 * Is this a bug in Java? Mohd Nisab Alam. Mohd Nisab Alam. Mohd Nisab Alam. Follow Oct 10 Is this a bug in Java? #javascript #java #node #*t 2 min read How to Connect a React App with MongoDB: A Complete Guide Ashis*apati Follow Oct 21 How to Connect a React App with MongoDB: A Complete Guide #mongodb #node #fullstack #react 5 *d S* S*v Follow Oct 21 S* #we* 2 * Avoid Using “bloated” Node.js Docker Image in Production! Puru Puru Puru Follow Oct 21 Avoid Using “bloated” Node.js Docker Image in Production! #docker #node 2 * Mastering Node.js Performance: Unlock the Power of Worker Threads and Clustering — Hoai Nho * ) Hoài Nhớ ( Nick ) Follow Oct 21 Mastering Node.js Performance: Unlock the Power of Worker Threads and Clustering — Hoai Nho #javascript #node #webdev #typescript 5 * How to deploy a Backend project on Vercel | Node.js - Express.js 🚀 on the code now on the code now on the code now Follow Oct 21 How to deploy a Backend project on Vercel | Node.js - Express.js 🚀 #webdev #node #tutorial #vercel 1 comment 5 min read Getting started with h3 by unjs Sam Newby Sam Newby Sam Newby Follow for Vizalo Oct 21 Getting started with h3 by unjs #h3 #unjs #type*t 2 min read Backend Development Roadmap Ashish Prajapati Ashish Prajapati Ashish Prajapati Follow Oct 21 Backend Development Roadmap #backenddevelopment #node #javascript * Introducing EnviroX: Your Go-To Dev Environment Setup Tool! 🛠️ Neel Patel Neel Patel Neel Patel Follow Oct 21 Introducing EnviroX: Your Go-To Dev Environment Setup Tool! 🛠️ #node #devops #cli #opensource 7 *d Why Web Workers Depend on JavaScript ?? Shafa*ossain Follow Oct 20 Why Web Workers Depend on JavaScript ?? #webdev #javascript #node #learning 38 * Are JavaScript Libraries Getting Out of Hand? Ifeoluwa Ifeoluwa Ifeoluwa Follow Sep 16 Are JavaScript Libraries Getting Out of Hand? #javascript #node #npm #typescript * JavaScript JS0/JSSugar Proposals, Node.js 23, Next.js 15 RC2 and more James James James Follow Oct 20 JavaScript JS0/JSSugar Proposals, Node.js 23, Next.js 15 RC2 and more #* #node 3 * How to create and publish an NPM unscoped and scoped package with Typescript Bruno Sartori Bruno Sartori Bruno Sartori Follow Sep 20 How to create and publish an NPM unscoped and scoped package with Typescript #npm #typescript #node #software* 4 min read npm Vs npx * Oct 4 npm Vs npx #webdev #node #javascript #tutorial 226 reactions 48 comments 3 min read Upgrading Node.js on Linux using NVM Dessad Dessad Dessad Follow Oct 20 Upgrading Node.js on Linux using NVM #node #nvm #npm #linux * Sherlock Holmes: The Case Of Missing Cookies Boopathi Boopathi Boopathi Follow Oct 20 Sherlock Holmes: The Case Of Missing Cookies #kubernetes #node #devops #passportjs 17 * Next.js - Overview Nickson Simiyu Nickson Simiyu Nickson Simiyu Follow for Swahilipot Developers Sep 16 Next.js - Overview #javascript #react #nextj* Como Realizar a Integração com APIs do Google em Seu Projeto * L* 20 Como Realizar a Integração com APIs do Google em Seu Projeto #google #googlecloud #java*t 3 min read What's New in Deno 2 Rahul Sharma Rahul Sharma Rahul Sharma Follow Oct 20 What's New in Deno 2 #deno #javascript #typescript #node 6 * Node.js & Express.j* * Oct 19 Node.js & Express.j* #node #express #javascript #*mment 3 min read 🚀 Built-in WebSockets in Node.js 2024: A Comprehensive Guide 🛠️ * Sep 20 🚀 Built-in WebSockets in Node.js 2024: A Comprehensive Guide 🛠️ #node #* * Build Your Own nodemon in Few Lines of Code aelassas aelassas aelassas Follow Oct 19 Build Your Own nodemon in Few Lines of Code #* #node 8 * Easy Authentication Using Hanko.io Istaprasad Patra Istaprasad Patra Istaprasad Patra Follow Oct 19 Easy Authentication Using Hanko.io #webdev #opensource #node #productivity 2 * Building RESTful APIs with Node.js and Express: Step-by-Step Tutorial Ashis*apati Follow Oct 19 Building RESTful APIs with Node.js and Express: Step-by-Step Tutorial #api #express #node #* 1.Hello, world * Munisekhar Udavalapati Follow Sep 15 1.Hello, world #javascrip* 'next build' not showing uploaded file : Next.js Image tushar gajwani tushar gajwani tushar gajwani Follow Sep 19 'next build' not showing uploaded file : Next.js Image #nextjs #webdev #node #* React * akpvt akpvt akpvt Follow Oct 19 React * #react #node #express #webapp Add Comment 3 min read Next.js * akpvt akpvt akpvt Follow Oct 19 Next.js * #node #nextjs #express #webapp Add Comment 3 min read Create a Slack Bot with NodeJS and Slack Bolt API Olibhia Ghosh Olibhia Ghosh Olibhia Ghosh Follow Oct 16 Create a Slack Bot with NodeJS and Slack Bolt API #we* 29 reactions 7 comments 8 min read Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/5"
  },
  {
    "body": "**5 * 3 4 5 6 7 8 9 10 11 *. Building a Custom Backend * Ashis*apati Follow Oct 18 Building a Custom Backend * #node #backend #javascript #mongodb 7 *d Using AWS IAM roles with Node SDKv3 Moray Macdonald Moray Macdonald Moray Macdonald Follow Oct 8 Using AWS IAM roles with Node SDKv3 #aws #node #cloud * Redux toolkit: React Thunk and React Saga.Learn from Vishal Tiwari. Vishal Tiwari Vishal Tiwari Vishal Tiwari Follow Oct 19 Redux toolkit: React Thunk and React Saga.Learn from Vishal Tiwari. #node #javascript #ai #webdev 5 reactions 1 comment 4 * 5 * Oct 18 JavaScript Essentials: Part 5 #node #javascript #api #beginners 2 reactions 1 comment 16 min read Event-Driven Architecture: Unlocking Scalable Systems with Node.js Abdullah Tajudeen Abdullah Tajudeen Abdullah Tajudeen Follow Oct 18 Event-Driven Architecture: Unlocking Scalable Systems with Node.js #javascript #node #eventdrivenarchitecture #webdev 6 * Reflecting Updated DB Data in Next.js Frontend - Understanding SSG and ISR Sho Ayuba Sho Ayuba Sho Ayuba Follow Oct 18 Reflecting Updated DB Data in Next.js Frontend - Understanding SSG and ISR #nextjs #isr #node #w* read Getting Started with Docker. SethGiddy SethGiddy SethGiddy Follow Sep 14 Getting Started with Docker. #docker #containerization #dockerfile #node Add Comment 3 min read Events: Node.js * Oct 7 Events: Node.js #node #javascript #programming 7 * Event Loop in Node.js: Managing Asynchronous Operations * ) Hoài Nhớ ( Nick ) Follow Oct 18 Event Loop in Node.js: Managing Asynchronous Operations #node #javascript #backend #tutorial 5 * Optimizing Dockerfile of a NestJS Project nguyendu nguyendu nguyendu Follow Oct 18 Optimizing Dockerfile of a NestJS Project #docker #node #productivity 2 reactions Add C* Node.js: What is Node.js and Why Use It? Rahul Sharma Rahul Sharma Rahul Sharma Follow Oct 18 Introduction to Node.js: What is Node.js and Why Use It? #javascript #node #npm #webdev * Technical Interview Questions - Part 1 - Javascript Giuliana Olmos Giuliana Olmos Giuliana Olmos Follow Oct 17 Technical Interview Questions - Part 1 - Javascript #javascript #interview #node #career 3 reactions 3 comments 6 min read Advanced Type System and Generics for Pro TypeScript Developers Shafa*ossain Follow Oct 17 Advanced Type System and Generics for Pro TypeScript Developers #* #node 8 * ⚡Mencoba Komparasi Seberapa Kencang Performa Bun dibandingkan Node Ferry Ananda Febian Ferry Ananda Febian Ferry Ananda Febian Follow Sep 18 ⚡Mencoba Komparasi Seberapa Kencang Performa Bun dibandingkan Node #node #bunjs #performance #indonesia 7 * Step-by-Step Guide to Deploying Node.js on AWS Free Tier Muchhal Sagar Muchhal Sagar Muchhal Sagar Follow Oct 17 Step-by-Step Guide to Deploying Node.js on AWS Free Tier #aws #node #ec2 #devops 5 *d Optimizing JavaScript with Maps, Sets, and Weak References Shafa*ossain Follow Oct 15 Optimizing JavaScript with Maps, Sets, and Weak References #javascript #node #webdev #tutorial 35 reactions 5 comments 2 min read Express v5: What You Need to Know About Express v5 USMAN AWAN USMAN AWAN USMAN AWAN Follow Oct 17 Express v5: What You Need to Know About Express v5 #javascript #node #webdev #* 3 * Deploying Node.js on AWS Free Tier Muchhal Sagar Muchhal Sagar Muchhal Sagar Follow Oct 17 Step-by-Step Guide to Deploying Node.js on AWS Free Tier #aws #node #ec2 #devops * Avoid Bugs in Your Code: Mutating vs. Non-Mutating Methods in Moment.js Jay Jethava Jay Jethava Jay Jethava Follow Sep 13 Avoid Bugs in Your Code: Mutating vs. Non-Mutating Methods in Moment.js #javascript #programming #node #api Add Comment 1 min read Avoid Bugs in Your Code: Mutating vs. Non-Mutating Methods in Moment.js Jay Jethava Jay Jethava Jay Jethava Follow Sep 13 Avoid Bugs in Your Code: Mutating vs. Non-Mutating Methods in Moment.js #javascript #programming #node #api Add Comment 1 min read Avoid Bugs in Your Code: Mutating vs. Non-Mutating Methods in Moment.js Jay Jethava Jay Jethava Jay Jethava Follow Sep 13 Avoid Bugs in Your Code: Mutating vs. Non-Mutating Methods in Moment.js #javascript #programming #node #api Ad* SharpAPI Node.js SDK Client Dawid Makowski Dawid Makowski Dawid Makowski Follow Oct 17 Introducing SharpAPI Node.js SDK Client #node #jav*ions Add Comment 4 min read Best Practices for Designing a Robust React Architecture * Mourya Vamsi Modugula Follow Oct 6 Best Practices for Designing a Robust React Architecture #react #javascript #node #beginners * Step-by-Step Guide to Deploying Your React App on Netlify Ashis*apati Follow Oct 16 Step-by-Step Guide to Deploying Your React App on Netlify #webdev #react #node #github 3 * Automate Application Deployment to AWS Elastic Beanstalk with Terraform and CodePipeline Chinedu Orie Chinedu Orie Chinedu Orie Follow Oct 16 Automate Application Deployment to AWS Elastic Beanstalk with Terraform and CodePipeline #terraform #elasticbeanstalk #codepipeline #node 3 * Unleash the power of JavaScript with Node.js! Okoye *amaka Follow Sep 12 Unleash the power of JavaScript with Node.js! #node #javascript #webdev #fullstack Add Comment 1 min read A take on Go Style Error Handling in JavaScript Anton Nesterov Anton Nesterov Anton Nesterov Follow Oct 16 A take on Go Style Error Handling in JavaScript #javascript #typescript #node #bunjs 3 * Looking for a Skilled JavaScript Developer to Join Our SaaS Team Yigit Guvenen Yigit Guvenen Yigit Guvenen Follow Oct 16 Looking for a Skilled JavaScript Developer to Join Our SaaS Team #javascript #node #hiring #whoishiring 4 * 🎃 50 Articles to Avoid Web Dev Nightmares * Follow Oct 15 🎃 50 Articles to Avoid Web Dev Nightmares #webdev #javascript #node #frontend 11 * Building AllMachines.com: A Deep Dive into Creating a Comprehensive Equipment Information Platform Emma Walsh Emma Walsh Emma Walsh Follow Sep 16 Building AllMachines.com: A Deep Dive into Creating a Comprehensive Equipment Information Platform #react #nextjs #node #testing 10 reactions * Event Loop: How It Works and Why It Matters for Performance Shafa*ossain Follow Oct 15 JavaScript Event Loop: How It Works and Why It Matters for Performance #javascript #webdev #node #*t 2 min read How to Scale Node.js Applications in Production * Toufiqur Rahman Tamkin Follow Sep 16 How to Scale Node.js Applications in Production #node #express #java*ent 4 min read Exploring REST and GraphQL APIs: Advantages, Challenges, and Use Cases USMAN AWAN USMAN AWAN USMAN AWAN Follow Oct 15 Exploring REST and GraphQL APIs: Advantages, Challenges, and Use Cases #node #webdev #programming #api 6 *d Hono.js Benchmark: Node.js vs. Deno 2.0 vs. Bun — Which Is the Fastest? Probir Sarkar Probir Sarkar Probir Sarkar Follow Oct 15 Hono.js Benchmark: Node.js vs. Deno 2.0 vs. Bun — Which Is the Fastest? #javascript #node #deno #bunjs 2 *d Using Your Own Node Modules With Playwright Felicia Walker Felicia Walker Felicia Walker Follow Oct 15 Using Your Own Node Modules With Playwright #playwright #testing #automation #node 1 reaction 1 comment 4 * 4 * Oct 13 JavaScript Essentials: Part 4 #* 4 reactions 1 comment 16 min read How Shadcn CLI uses error constants to improve code readability * Oct 14 How Shadcn CLI uses error constants to improve code readability #javascript #errors #node #shadcn * * Balraj Singh Balraj Singh Balraj Singh Follow Oct 8 * #webdev #npm #node #productivity 81 reactions 21 comments 2 min read Solving the NPM \"Can't Find Path `npm`\" Error on Windows Techsplot lifetime Techsplot lifetime Techsplot lifetime Follow Sep 10 Solving the NPM \"Can't Find Path `npm`\" Error on Windows #webdev #npm #nextjs #node * * Shafa*ossain Follow Oct 14 JavaScript * #webdev #javascript #node #learning 9 *d How to Build a Telegram Bot in 5 Simple Steps Esther Esther Esther Follow Oct 14 How to Build a Telegram Bot in 5 Simple Steps #telegramapi #python #node 4 *d 10 Things I Wish I Knew When I Started with React * Mourya Vamsi Modugula Follow Oct 3 10 Things I Wish I Knew When I Started with React #react #javascript #node #* 3 min read Easily self-host Next.js Alohe Alohe Alohe Follow Oct 13 Easily self-host Next.js #nextjs #node #webdev #opensource 2 *d \"Module vs Main: The Modern Hero vs The Vintage Legend of package.json!\" * 13 \"Module vs Main: The Modern Hero vs The Vintage Legend of package.json!\" #javascript #node #npm #learning * Export vs Main in package.json * 13 Export vs Main in package.json #javascript #npm #node #beginners * Stop Writing Logs into Files Rishi Kumar Rishi Kumar Rishi Kumar Follow Sep 9 Stop Writing Logs into Files #opensource #node #npm #tutorial * Integração do MongoDB com Node.js – Um Guia Completo * L* 12 Integração do MongoDB com Node.js – Um Guia Completo #mongodb #node #* 4 min read How to Install and Use NVM to Manage Multiple Node.js Versions Guna SantoshDeep Srivastava Guna SantoshDeep Srivastava Guna SantoshDeep Srivastava Follow Oct 12 How to Install and Use NVM to Manage Multiple Node.js Versions #node #frontend #angular #*t 4 min read Your First Backend Application using Node.js Programming with Shahan Programming with Shahan Programming with Shahan Follow Oct 10 Your First Backend Application using * #beginners 2*ad Promises in JavaScript, A Guide for 2024 Shafa*ossain Follow Oct 12 Promises in JavaScript, A Guide for 2024 #javascript #webdev #node #typescript 11 react* JS || Epress js || By * * Follow Oct 12 Node JS || Epress js || By Munisekhar Udavalapati #node #express #javascript * SQL Sequelize || By Munisekhar Udavalapati || MySQL || SQL * Munisekhar Udavalapati Follow Oct 12 SQL Sequelize || By Munisekhar Udavalapati || MySQL || SQL #javascript #node #mysql #sequelize 1 reaction 4 comments 1 min read React-Joyride Hussain Ahmed Siddiqui Hussain Ahmed Siddiqui Hussain Ahmed Siddiqui Follow Oct 12 React-Joyride #node #javascript #react #github * Simplified: Javascript V8 engine ✨ Tanmay Patil Tanmay Patil Tanmay Patil Follow Oct 1 Simplified: Javascript V8 engine ✨ #javascript #node #webdev #beginners 4 * *) * Sep 23 *) #react #webdev #node #javascript 238 reactions 41 comments 4 min read Enhancing CodeStash with Unkey’s Ratelimiter Devansh Baghel Devansh Baghel Devansh Baghel Follow Oct 11 Enhancing CodeStash with Unkey’s Ratelimiter #node #ai #webdev #programming * Create your own npm library Daichi Izushi Daichi Izushi Daichi Izushi Follow Oct 11 Create your own npm library #npm #javascript #packagejson #node Add Comment 5 min read 5 JavaScript Patterns Every Developer Should Know in 2024 Shafa*ossain Follow Oct 11 5 JavaScript Patterns Every Developer Should Know in 2024 #* 14 *d AI-Powered Content Moderation in React Using Large Language Models (LLMs) Florian Florian Florian Follow for ExoAPI Oct 11 AI-Powered Content Moderation in React Using Large Language Models (LLMs) #ai #react #javascript #node 2 * * S*v Follow Oct 11 * #webdev #* 5 min read Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/6"
  },
  {
    "body": "**6 * 4 5 6 7 8 9 10 11 12 *. Hono - Introduction Vuelancer Vuelancer Vuelancer Follow Oct 11 Hono - Introduction #node #javascript #webdev #* 2 min read Streamline File Uploads in NestJS: Efficient In-Memory Parsing for CSV & XLSX Without Disk Storage Damir Mahamedov Damir Mahamedov Damir Mahamedov Follow Sep 30 Streamline File Uploads in NestJS: Efficient In-Memory Parsing for CSV & XLSX Without Disk Storage #node #programming #* 8 min read Symbols and Objects in JS♥ aryan015 aryan015 aryan015 Follow Oct 11 Symbols and Objects in JS♥ #javascript #node #react #angular * Concurrency vs Parallelism Scrapfly Scrapfly Scrapfly Follow Oct 11 Concurrency vs Parallelism #scaling #node #python 2 *ad 20 Essential JavaScript Concepts Every Node Developer Should Conquer Usman Awan Usman Awan Usman Awan Follow Oct 10 20 Essential JavaScript Concepts Every Node Developer Should Conquer #javascript #node #webdev #programming 11 *d Essential Concepts for JavaScript Developers Shafa*ossain Follow Oct 9 Essential Concepts for JavaScript Developers #javascript #webdev #node #productivity 37 * Unlocking the Power of Real-Time Data Management with RxDB ᴀʟᴇx ᴀʟᴇx ᴀʟᴇx Follow Oct 10 Unlocking the Power of Real-Time Data Management with RxDB #database #mongodb #node #*t 2 min read Hello DevPeople . this is my first post . Sina HeydariNejad Sina HeydariNejad Sina HeydariNejad Follow Sep 6 Hello DevPeople . this is my first post . #javascript #node #express #css 1 comment 1 min read Coding Bootcamp Chronicles: Week 5 && 6 Creating DOM apps Mukarram Mukarram Mukarram Follow Sep 6 Coding Bootcamp Chronicles: Week 5 && 6 Creating DOM apps #webdev #javascript #asyncprogramming #node 2 *d Fix long import paths in your NestJS project #nestjs * Sep 7 Fix long import paths in your NestJS project #nestjs #nestjs #node #microservices #fullstack * PM2: Optimizing Node.js and Next.js Applications for Performance and Scalability Sasith Warnaka Sasith Warnaka Sasith Warnaka Follow Oct 9 Mastering PM2: Optimizing Node.js and Next.js Applications for Performance and Scalability #pm2 #node #nextjs #performanceoptimization Add Comment 4 min read Angular Fundamentals: Setting Up Your Angular Development Environment Using Command Prompt * Oct 9 Angular Fundamentals: Setting Up Your Angular Development Environment Using Command Prompt #angular #vscode #node Add Comment 3 min read Five popular NPM packages that can boost your productivity | Nodejs * Oct 9 Five popular NPM packages that can boost your productivity | Nodejs #node #javascript #fullstack #devops 6 *d * Node.js S*v Follow Oct 9 * *ers #node 2 *d The Developer's Guide to Mastering NodeJS with Prometheus and Grafana * Sep 19 The Developer's Guide to Mastering NodeJS with Prometheus and Grafana #node #nestjs #prometheus #grafana Add Comment 1 min read Performance Tuning in Node.js Abhis*iswal Follow Oct 9 Performance Tuning in Node.js #webd* *ad Scale Nodejs Application with APM Tools * Sep 5 Scale Nodejs Application with APM Tools #nestjs #node #microservices #*t 2 min read Real-time data replication in Postgres and Node.js Manuel Spigolon Manuel Spigolon Manuel Spigolon Follow Sep 18 Real-time data replication in Postgres and Node.js #node #postgres #fastify 2 reactions Add Comment 9 * 3 * Oct 7 JavaScript Essentials: Part 3 #node #api #javascript #beginners 5 reactions 4 comments 11 min read A Fast Resume Why You Should Learn About Design Patterns Vitor Braggion Vitor Braggion Vitor Braggion Follow Oct 8 A Fast Resume Why You Should Learn About Design Patterns #designpatterns #softwareengineering #node #beginners 4 *d 📂 Mastering Project Structure in Node.js & Next.js: Boost Your Development Speed 🚀 🔥 * Oct 8 📂 Mastering Project Structure in Node.js & Next.js: Boost Your Development Speed 🚀 🔥 #nextjs #node #java*ent 4 min read Managing and retrieving translated strings in a Google Sheet Sergey Li Sergey Li Sergey Li Follow Sep 4 Managing and retrieving translated strings in a Google Sheet #i18 #express #node #webdev Add Comment 3 min read Express.js Crash Course: Build a RESTful API with Middleware Ghazi Khan Ghazi Khan Ghazi Khan Follow Oct 8 Express.js Crash Course: Build a RESTful API with Middleware #no*ers * * W*f Follow for WavePlay Sep 17 * #discord #node #javascript #* 3 min read Node.js | Get Started 2024 | Basics * Oct 8 Node.js | Get Started 2024 | Basics #node #javascript #webdev #fullstack * Simple Emails Sending from Node.js Using Nodemailer and SMTP Shivaji Zirpe Shivaji Zirpe Shivaji Zirpe Follow Sep 8 Simple Emails Sending from Node.js Using Nodemailer and SMTP #node #nodemailer #emailsending Add Comment 3 min read Streams: Node.js * Oct 7 Streams: Node.js #node #javascript #beginners #* 5 min read Top 10 Essential JavaScript Concepts Every Developer Should Master SHOIB ANSARI SHOIB ANSARI SHOIB ANSARI Follow Oct 7 Top 10 Essential JavaScript Concepts Every Developer Should Master #javascript #frontend #node #webdev * * S*v Follow Oct 7 * #webdev #* 5 min read The main steps I follow when kicking off Node.js projects Alex Alex Alex Follow Oct 7 The main steps I follow when kicking off Node.js projects #node #javascript #webdev #database Add Comment 4 min read *3 Adam Adam Adam Follow Oct 7 *3 #webdev #weeklyfoo #javascript #node 3 *ad 3D Earth Visualization with Three.js: A GitHub-Inspired Approach Christopher Duran Christopher Duran Christopher Duran Follow Oct 7 3D Earth Visualization with Three.js: A GitHub-Inspired Approach #javascript #threejs #node #typescript * Node.js to support ESM Require: What this means for NestJS developers and other CommonJS frameworks Ben Dechrai Ben Dechrai Ben Dechrai Follow for Arcjet Sep 3 Node.js to support ESM Require: What this means for NestJS developers and other CommonJS frameworks #nestjs #node #ecmascript #security 5 * VoidZero, The New ESLint, MongoDB 8.0 and more James James James Follow Oct 6 VoidZero, The New ESLint, MongoDB 8.0 and more #java* * NPM Link: Simplifying Local Dependency Management Bruno Sartori Bruno Sartori Bruno Sartori Follow Sep 14 Mastering NPM Link: Simplifying Local Dependency Management #npm #node #softwaredevelopment #npmlink 8 * Why Choose Node.js Framework for your projects in 2024? Megaminds SEO Megaminds SEO Megaminds SEO Follow Sep 2 Why Choose Node.js Framework for your projects in 2024? #node #projects #* Coding exercise: database migration tool in nodejs Eduard Dyckman Eduard Dyckman Eduard Dyckman Follow Sep 25 Coding exercise: database migration tool in nodejs #javascript #database #programming #node 2 * Meet phpvm: Your New PHP Best Friend Forever! Jerome Thayananthajothy Jerome Thayananthajothy Jerome Thayananthajothy Follow Oct 5 Meet phpvm: Your New PHP Best Friend Forever! #php #nvm #javascript #node * Moving to pnpm and Volta: Enhancing Your Frontend Development Workflow Yousuf Khan Ratul Yousuf Khan Ratul Yousuf Khan Ratul Follow Oct 6 Moving to pnpm and Volta: Enhancing Your Frontend Development Workflow #webdev #node #devops #productivity *ing Swagger Documentation with Joi in Node.js: Simplify Your API Documentation Workflow * Gleidson Leite da Silva Follow Oct 5 Automating Swagger Documentation with Joi in Node.js: Simplify Your API Documentation Workflow #javascript #node #swagger #webdev Add Comment 6 min read Beginner's Guide to Handling DELETE Requests in Node.js with Express Emmanuel Mumba Emmanuel Mumba Emmanuel Mumba Follow Sep 24 Beginner's Guide to Handling DELETE Requests in Node.js with Express #node #express #javascript #beginners 9 * ⚔️ Rust vs Go vs Bun vs Node.js: The Ultimate 2024 Performance Showdown 🚀 * Oct 5 ⚔️ Rust vs Go vs Bun vs Node.js: The Ultimate 2024 Performance Showdown 🚀 #rust #go #bunjs #node 5 * Merge and bundle open api yaml files for swagger Mehdi Faraji Mehdi Faraji Mehdi Faraji Follow Aug 31 Merge and bundle open api yaml files for swagger #swagger #openapi #node Add Comment 2 min read React.js is popular for several reasons: Kamlesh Gupta Kamlesh Gupta Kamlesh Gupta Follow Sep 5 React.js is popular for several reasons: #react #javascript #node #mongodb 5 *d Interlúdio Técnico #1 - OracleDB no JavaScript Danny Danny Danny Follow Aug 31 Interlúdio Técnico #1 - OracleDB no JavaScript #javascript #tutorial #node #database Add Comment 5 min read * S*v Follow Oct 4 * #webdev #javascript #* 5 min read Conheça Next.js 14: O Framework Full-Stack para Aplicações Web Modernas Sabrina Barros Sabrina Barros Sabrina Barros Follow Oct 3 Conheça Next.js 14: O Framework Full-Stack para Aplicações Web Modernas #nextjs #fullstack #react #node 7 * Reflecting on GSoC 2024 Philipp Burckhardt Philipp Burckhardt Philipp Burckhardt Follow for stdlib Oct 4 Reflecting on GSoC 2024 #javascript #webdev #node #* 12 min read This TypeScript framework * ⚡️ Mar*erg Follow for Encore Oct 1 This TypeScript framework * ⚡️ #typescript #javascript #node #opensource 39 reactions 7 comments 6 min read Por que o Elixir é melhor que Node.js para Processamento Assíncrono? William Moreira da Silva William Moreira da Silva William Moreira da Silva Follow Aug 30 Por que o Elixir é melhor que Node.js para Processamento Assíncrono? #javascript #elixir #node #erlang Add Comment 6 min read I built a Free Badge Generator for Everyone Viorel PETCU Viorel PETCU Viorel PETCU Follow Aug 31 I built a Free Badge Generator for Everyone #jokes #node #typescript #productivity Add Comment 4 min read NodeJS Framework which one is Fast * Aug 30 NodeJS Framework which one is Fast #nestjs #node #fastify #express Add Comment 2 min read Microservices Design Aspects * Sep 22 Microservices Design Aspects #microservices #node #nestjs #w* read Crack JS Interview with Me lifewithcode lifewithcode lifewithcode Follow Aug 30 Crack JS Interview with Me #javascript #interview #crackjobs #node Add Comment 2 min read NestJS Microservices * Aug 30 NestJS Microservices #microservices #nestjs #node #w* read Deno 2.0: The Next Evolution in JavaScript Runtimes – Is It Better Than Node.js? * Rajesh Kumar Yadav Follow Oct 2 Deno 2.0: The Next Evolution in JavaScript Runtimes – Is It Better Than Node.js? #node #frontend 7 * Ditch dotenv: Node.js Now Natively Supports .env File Loading Zachary Lee Zachary Lee Zachary Lee Follow Sep 22 Ditch dotenv: Node.js Now Natively Supports .env File Loading #webdev #javascript #* 2 min read Advanced Ts: Dependent parameters, inferred unions and a healthy interaction on Twitter. * 🟨 Manuel Artero Anguita 🟨 Follow Oct 2 Advanced Ts: Dependent parameters, inferred unions and a healthy interaction on Twitter. #typescript #javascript #node #react 1 reaction 3 comments 3 min read How to Use Electron.js to Create Cross-Platform Desktop Applications Abdul Rafay Khan Abdul Rafay Khan Abdul Rafay Khan Follow Aug 29 How to Use Electron.js to Create Cross-Platform Desktop Applications #javascript #node #programming #electron 2 * * 🎉 W*f Follow for WavePlay Oct 2 * 🎉 #node #javascript #discord #hacktoberfest 8 * Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/7"
  },
  {
    "body": "**5 * 72 73 74 75 76 77 78 79 80 *. Dynamic emails with handlebars and nodemailer Nick Smet Nick Smet Nick Smet Follow Feb 10 '23 Dynamic emails with handlebars and nodemailer #productivity #node #nodemailer 3 * The top 10 features of Total.js Flow Peter Širka Peter Širka Peter Širka Follow Feb 10 '23 The top 10 features of Total.js Flow #node #iot #javascript #* 2 min read MongoDB $weeklyUpdate #103 (February 10, 2023): What Do UFOs Have to Do with MongoDB? Megan Grant Megan Grant Megan Grant Follow for MongoDB Feb 10 '23 MongoDB $weeklyUpdate #103 (February 10, 2023): What Do UFOs Have to Do with MongoDB? #mongodb #serverless #python #node 2 react*js: How much ram does a basic node app use? GreggHume GreggHume GreggHume Follow Feb 10 '23 Nodejs: How much ram does a basic node app use? #node #ram #memory 2 *d Going beyond the old and boring console.log() Lucas Rodriguez Lucas Rodriguez Lucas Rodriguez Follow Feb 10 '23 Going beyond the old and boring console.log() #* Add Comment 4 min read 5 control points to implement serverless integration tests like a boss 👔 Corentin Doue Corentin Doue Corentin Doue Follow for Serverless By Theodo Feb 8 '23 5 control points to implement serverless integration tests like a boss 👔 #aws #serverless #testing #node 32 * Use Mocha instead of Jest and boost your tests speed Adrian Adrian Adrian Follow Feb 8 '23 Use Mocha instead of Jest and boost your tests speed #testing #javascript #node #webdev 5 reactions 5 comments 3 min read How To Start a Development Server for Your Project Abdulsa*m Noibi Follow Feb 9 '23 How To Start a Development Server for Your Project #webdev #node #javascript #beginners 19 *d Top 10 Web & Mobile App Technologies in 2023 Alam Alam Alam Follow Jan 20 '23 Top 10 Web & Mobile App Technologies in 2023 #react #angular #vue #node 2 *d How to verify PAN no. in node.js Eko Developers Eko Developers Eko Developers Follow for Eko Developer Community Feb 9 '23 How to verify PAN no. in node.js #india #api #node #javascript * TypeScript: Interface or Type? Hint: it's in the name * 🟨 Manuel Artero Anguita 🟨 Follow Feb 8 '23 TypeScript: Interface or Type? Hint: it's in the name #typescript #node #react #webdev 8 * Splitting a PDF file into multiple files using AWS Lambda and Node.js MOHSIN ALI SOOMRO MOHSIN ALI SOOMRO MOHSIN ALI SOOMRO Follow Feb 9 '23 Splitting a PDF file into multiple files using AWS Lambda and Node.js #aws #node #javascript * Azure Functions: unzip large files Valdas Jasaitis Valdas Jasaitis Valdas Jasaitis Follow Feb 9 '23 Azure Functions: unzip large files #azure #azurefunctions #node #*t 2 min read Contentlayer: Optimize getStaticProps on Next.js anasrin anasrin anasrin Follow Feb 9 '23 Contentlayer: Optimize getStaticProps on Next.js #nextjs #node #javascript #markdown Add Comment 3 min read New JavaScript features you might have missed Derick Ify Iloabachie Derick Ify Iloabachie Derick Ify Iloabachie Follow Feb 9 '23 New JavaScript features you might have missed #javascript #programming #node 2 *d How to test the existence of a file in Javascript SemihGKL SemihGKL SemihGKL Follow Feb 9 '23 How to test the existence of a file in Javascript #javascript #beginners #node #tutorial * Getting Started With NestJS Captain Iminza Captain Iminza Captain Iminza Follow Feb 9 '23 Getting Started With NestJS #javascript #beginners #type*t 3 min read How to Dockerize nestJs app innocent leonard innocent leonard innocent leonard Follow Feb 9 '23 How to Dockerize nestJs app #docker #nestjs #node * Pattern - Flyweight Higor Diego Higor Diego Higor Diego Follow Feb 9 '23 Pattern - Flyweight #javascript #node #cleancode #architecture 3 * Como montar Uma API com GraphQl em Node.js com Apollo Server e MongoDB Ikaro-silva Ikaro-silva Ikaro-silva Follow Feb 9 '23 Como montar Uma API com GraphQl em Node.js com Apollo Server e MongoDB #javascript #node #graphql #mongodb 2 *d How To Get the MIME Type of a File in Node.js Mgbemena Chinedu Victor Mgbemena Chinedu Victor Mgbemena Chinedu Victor Follow Feb 8 '23 How To Get the MIME Type of a File in Node.js #beginners #node #npm #tutorial 23 * Integrate your Node.js and Express.js App with Socket.IO Bliss Abhademere Bliss Abhademere Bliss Abhademere Follow Feb 8 '23 Integrate your Node.js and Express.js App with Socket.IO #programming #tutorial #node #community 8 * 5 Node.js Tools to Learn in 2023 Camilo Reyes Camilo Reyes Camilo Reyes Follow for AppSignal Feb 8 '23 5 Node.js Tools to Learn in 2023 #node * Jamstack: Azure Serverless Function App With React Keyhole Software Keyhole Software Keyhole Software Follow for Keyhole Software Jan 18 '23 Jamstack: Azure Serverless Function App With React #architecture #azure #react #node * Using Node.js to Parse a JSON File Generated from WPScan Adem Kouki Adem Kouki Adem Kouki Follow Feb 8 '23 Using Node.js to Parse a JSON File Generated from WPScan #node #javascript #pentest * 15 Must-Have Cheatsheets for Developers🚀 Ishrat Ishrat Ishrat Follow Jan 20 '23 15 Must-Have Cheatsheets for Developers🚀 #javascript #node #java #react 222 reactions 19 comments 4 min read Install Node on MacOS M1/M2/Apple Silicon Pradeep Kumar Pradeep Kumar Pradeep Kumar Follow Feb 7 '23 Install Node on MacOS M1/M2/Apple Silicon #mac #node 33 reactions 5 comments 1 min read Logging practices Željko Šević Željko Šević Željko Šević Follow Feb 7 '23 Logging practices #logging #node Add Comment 1 min read Authentication and Authorization in a Node API using Fastify, tRPC and Supertokens Francisco Mendes Francisco Mendes Francisco Mendes Follow Feb 6 '23 Authentication and Authorization in a Node API using Fastify, tRPC and Supertokens #javascript #typescript #node #tutorial 4 * Building a NodeJS REST API using Express, MongoDB, Prisma with Typescript ishan ishan ishan Follow Feb 6 '23 Building a NodeJS REST API using Express, MongoDB, Prisma with Typescript #node #prisma #mongodb #api 14 * Top 20 React.JS interview questions. ABU SAID ABU SAID ABU SAID Follow Jan 30 '23 Top 20 React.JS interview questions. #react #interview #nextjs #node 117 reactions 6 comments 8 min read Use over 140+ amazing ChatGPT prompts in 10 minutes 🚀 pacholoamit pacholoamit pacholoamit Follow Feb 6 '23 Use over 140+ amazing ChatGPT prompts in 10 minutes 🚀 #ai #node #javascript #typescript 14 *d Padrão - Facade Higor Diego Higor Diego Higor Diego Follow Feb 6 '23 Padrão - Facade #webdev #javascript #cleancode #node Add Comment 3 min read Start and Setup a NodeJs Typescript Project Guilherme Niches Guilherme Niches Guilherme Niches Follow Feb 6 '23 Start and Setup a NodeJs Typescript Project #webdev #typescript #node #beginners 2 * NestJS tip: multi-value providers almost like `multi` from Angular Micael Levi L. C. Micael Levi L. C. Micael Levi L. C. Follow Feb 5 '23 NestJS tip: multi-value providers almost like `multi` from Angular #node #nestjs #typescript #angular 1 reaction 5 comments 3 min read Transitioning From the Frontend to Full Stack Web Development Alvin 💻 Alvin 💻 Alvin 💻 Follow Feb 6 '23 Transitioning From the Frontend to Full Stack Web Development #webdev #node #beginners * When not to use Deno Deploy ☄️ Bryce Dorn Bryce Dorn Bryce Dorn Follow Feb 5 '23 When not to use Deno Deploy ☄️ #deno #node #devops #webdev 3 * How to Create a Stripe Subscription with React and Node.js Suneel Kumar Suneel Kumar Suneel Kumar Follow Feb 5 '23 How to Create a Stripe Subscription with React and Node.js #node #react #stripe #webdev 9 *d Unlocking the Secrets of Cryptography: A Guide to Understanding the Fundamentals of Secure Communication Matheus Mello Matheus Mello Matheus Mello Follow Feb 5 '23 Unlocking the Secrets of Cryptography: A Guide to Understanding the Fundamentals of Secure Communication #programming #node #computerscience Add Comment 3 min read Simple CQRS in NodeJS with Typescript ilija ilija ilija Follow Jan 25 '23 Simple CQRS in NodeJS with Typescript #node #typescript #programming #*t 6 min read Encrypt and Decrypt Data in Node.js using aes-256-cbc Ugbem Job Ugbem Job Ugbem Job Follow Feb 2 '23 Encrypt and Decrypt Data in Node.js using aes-256-cbc #javascript #node #encryption #security 112 reactions 8 comments 6 min read Eslint and Prettier - Quick install Fernando Silva Fernando Silva Fernando Silva Follow Feb 4 '23 Eslint and Prettier - Quick install #react #typescript #node #webdev 4 * Product Comparison App (JS Demo Project) Mikhail Zub Mikhail Zub Mikhail Zub Follow for SerpApi Feb 4 '23 Product Comparison App (JS Demo Project) #dropshipping #serpapi #node #react 3 * How to push MERN/MEAN projects to GitHub? Hrithik Bansal Hrithik Bansal Hrithik Bansal Follow Feb 4 '23 How to push MERN/MEAN projects to GitHub? #node #git #github #w* read Transpile Webpack Plugin: transpiling files with webpack without bundling C C C Follow Feb 4 '23 Transpile Webpack Plugin: transpiling files with webpack without bundling #javascript #node #webdev #opensource * Wrapper function Abayomi Ogunnusi Abayomi Ogunnusi Abayomi Ogunnusi Follow Feb 1 '23 Wrapper function #node #* 8 reactions 11 comments 2 min read Clustering: The Good Parts Arinze Obi Arinze Obi Arinze Obi Follow Feb 4 '23 Clustering: The Good Parts #node #javascript #systemdesign * Middleware in Express.js: A Beginner's Guide Nikhil Kadam Nikhil Kadam Nikhil Kadam Follow Feb 3 '23 Mastering Middleware in Express.js: A Beginner's Guide #javascript #webdev #codenewbie #node 5 react*d TypeSafe Node API using tRPC, Fastify, Kysely and Atlas CLI Francisco Mendes Francisco Mendes Francisco Mendes Follow Jan 29 '23 Build TypeSafe Node API using tRPC, Fastify, Kysely and Atlas CLI #javascript #typescript #node #webdev 21 reactions 18 comments 5 min read Create your first WebSockets-based application in NestJS Duc Le Duc Le Duc Le Follow Feb 3 '23 Create your first WebSockets-based application in NestJS #webdev #backend #javascript #node 23 *d Announcing a new TypeScript ORM Roman K Roman K Roman K Follow Feb 3 '23 Announcing a new TypeScript ORM #orm #node #typescript #database * JavaScript function call() method: ana ana ana Follow Feb 3 '23 JavaScript function call() method: #java* * Building a short url generator with nodejs and mongoDB Rohit sah Rohit sah Rohit sah Follow Feb 3 '23 Building a short url generator with nodejs and mongoDB #webdev #node #mongodb #express * Compare Hash Passwords Using Crypto Module using the Node.js [part 2] Ugbem Job Ugbem Job Ugbem Job Follow Feb 3 '23 Compare Hash Passwords Using Crypto Module using the Node.js [part 2] #node #javascript #beginners 3 * Making test stub setup effortless using Sinon Corey Cleary Corey Cleary Corey Cleary Follow Feb 3 '23 Making test stub setup effortless using Sinon #node #testing 4 *d Automate commits with LaunchAgents & JavaScript Jared Long Jared Long Jared Long Follow Feb 2 '23 Automate commits with LaunchAgents & JavaScript #node #git #macos #github * JavaScript: O que é Intl? * Cristian Magalhães Follow Feb 2 '23 JavaScript: O que é Intl? #javascript #programming #node #codenewbie 3 * Automate your personal CRM with Notion and Hazel Base Rohith Gilla Rohith Gilla Rohith Gilla Follow Feb 2 '23 Automate your personal CRM with Notion and Hazel Base #javascript #tutorial #node #* 9 min read OpenAI API Example in NodeJS Jake Flavin Jake Flavin Jake Flavin Follow Feb 2 '23 OpenAI API Example in NodeJS #openai #node #tutorial #beginners 3 *d Top 10 ES6 Features that Every Developer Should know ABU SAID ABU SAID ABU SAID Follow Feb 2 '23 Top 10 ES6 Features that Every Developer Should know #javascript #typescript #react #node 10 *d Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/75"
  },
  {
    "body": "**6 * 5 6 7 8 9 10 11 12 13 *. A Comprehensive Guide to React.js: The Popular JavaScript Library for Building User Interfaces * Mourya Vamsi Modugula Follow Oct 2 A Comprehensive Guide to React.js: The Popular JavaScript Library for Building User Interfaces #react #javascript #* 53 min read Creating an NPM package that runs on command line nausaf nausaf nausaf Follow Oct 2 Creating an NPM package that runs on command line #npm #node #cli Add Comment 3 min read Todo RESTful API built using NodeJS Yannick Mulemeri Yannick Mulemeri Yannick Mulemeri Follow Oct 2 Todo RESTful API built using NodeJS #javascript #node #restapi #rest 2 *d * S*v Follow Oct 2 * #* #node Add Comment 5 min read DynamoDB Single-Table Design with TypeScript Camilo Reyes Camilo Reyes Camilo Reyes Follow for AppSignal Oct 2 DynamoDB Single-Table Design with TypeScript #node #dynamodb #typescript * Changing the Angular CLI version * Oct 2 Changing the Angular CLI version #angular #node #javascript #nvm 1 reaction 4 comments 2 min read Node.js version * Oct 2 Node.js version #node #javascript #frontend #angular 1 reaction 2 comments 2 min read Aplicando o \"Liskov Substitution Principle\" com Typescript e Java Victor Lima Reboredo Victor Lima Reboredo Victor Lima Reboredo Follow Aug 29 Aplicando o \"Liskov Substitution Principle\" com Typescript e Java #tutorial #java #node #* Creational Design Patterns * Manoj Kumar Patra Follow Oct 2 Creational Design Patterns #node #nodejsdesignpatterns * New Features in Angular 16: Signals and RxJS * Oct 2 New Features in Angular 16: Signals and RxJS #angular #javascript #node 2 * Improvements in Angular 14 and 15 * Oct 2 Improvements in Angular 14 and 15 #angular #node #javascript 2 * New Version of Angular: Angular 17 CHANGES: * Oct 2 New Version of Angular: Angular 17 CHANGES: #angular #node #javascript * What's New in Angular 16: Inputs in Components * Oct 2 What's New in Angular 16: Inputs in Components #angular #javascript #node * What's New in Angular 16: Inputs in Components * Oct 2 What's New in Angular 16: Inputs in Components #angular #javascript #node * Improve performance in Angular by creating your CUSTOM PIPES * Oct 2 Improve performance in Angular by creating your CUSTOM PIPES #angular #node #javascript * TS Dependency Injection with @Findhow/Container No Decorators Required 🔥 Clean Code Studio Clean Code Studio Clean Code Studio Follow Oct 2 TS Dependency Injection with @Findhow/Container No Decorators Required 🔥 #javascript #deno #typescript #node 2 * How to Handle Errors in Next.js for Node With the App Router * Antonello Zanini Follow for AppSignal Sep 11 How to Handle Errors in Next.js for Node With the App Router #node #nextjs * Test Stripe with MockServer M*i M* Sep 2 Test Stripe with MockServer #testing #node #tdd #docker Add Comment 2 min read *! W*f Follow for WavePlay Oct 1 *! #javascript #discord #programming #node 3 reactions Add Comment 2 * 2 * Oct 1 JavaScript Essentials: Part 2 #* 2 *d Need help to resolve Error: spawn EINVAL MITESH V. KOTHARI MITESH V. KOTHARI MITESH V. KOTHARI Follow Sep 20 Need help to resolve Error: spawn EINVAL #npm #node 1 comment 2 min read Scrape the web with puppeteer! Christian Cedeno Christian Cedeno Christian Cedeno Follow Aug 28 Scrape the web with puppeteer! #tutorial #node #javascript #express Add Comment 5 min read Tutorial: How to Integrate Passkeys into Node.js (Express) vdelitz vdelitz vdelitz Follow for Corbado Aug 28 Tutorial: How to Integrate Passkeys into Node.js (Express) #node #express #npm Add Comment 4 min read Asynchronously Iterating Over Event Emitters in TypeScript with Async Generators Red John Red John Red John Follow Sep 29 Asynchronously Iterating Over Event Emitters in TypeScript with Async Generators #typescript #webdev #node #javascript 6 * A Simple Way to Handle Locale-Specific URLs in Express Sergey Li Sergey Li Sergey Li Follow Aug 28 A Simple Way to Handle Locale-Specific URLs in Express #express #i18n #middleware #node Add Comment 3 min read How to JS: Automate testing with Selenium Roel Roel Roel Follow Aug 28 How to JS: Automate testing with Selenium #javascript #selenium #node #* Make your package.json readable again by humans: organizing npm scripts with shell files Al Hermanson-Albers Al Hermanson-Albers Al Hermanson-Albers Follow Sep 30 Make your package.json readable again by humans: organizing npm scripts with shell files #node #npm #bash #refactoring 5 * Node.js Uncovered: The Truth Behind Its Single-Threaded Magic and How It Powers High-Performance Apps Nouman Ijaz Nouman Ijaz Nouman Ijaz Follow Aug 28 Node.js Uncovered: The Truth Behind Its Single-Threaded Magic and How It Powers High-Performance App*eginners 5 * * Brian Morrison II Brian Morrison II Brian Morrison II Follow for Clerk Sep 30 * #clerk #express #node #react 7 * Running Kafka Locally like a Pro * Sep 10 Running Kafka Locally like a Pro #kafkajs #kafka #nestjs #*in read * S*v Follow Sep 30 * #node #* * * Костя Третяк Костя Третяк Костя Третяк Follow Aug 28 * #node #bunjs #express #ditsmod 2 *d *2 Adam Adam Adam Follow Sep 30 *2 #webdev #weeklyfoo #javascript #node Add Comment 10 min read Leveling Up with Node.js and Express: Adding a Server to My Yoga Pose Library wendyver wendyver wendyver Follow Sep 30 Leveling Up with Node.js and Express: Adding a Server to My Yoga Pose Library #webdev #javascript #node #express Add Comment 4 min read Top Reasons to Use Node.JS Development for Your Business Parth Span Parth Span Parth Span Follow Aug 28 Top Reasons to Use Node.JS Development for Your Busin*d NestJS tip: how to attach decorators to all controllers at once Micael Levi L. C. Micael Levi L. C. Micael Levi L. C. Follow Sep 29 NestJS tip: how to attach decorators to all controllers at once #node #nestjs 4 * Quick introduction to Gallifrey-Rules Gallifrey Rules Gallifrey Rules Gallifrey Rules Follow Aug 26 Quick introduction to Gallifrey-Rules #kafka #eventdriven #typescrip* 🦀 Create a Simple Todo List in Rust (with Response Time Comparison to Node.js) 📝 * Sep 28 🦀 Create a Simple Todo List in Rust (with Response Time Comparison to Node.js) 📝 #rust #node #webdev #javascript 9 * How can i fix Serverless Function fail when deploying a Nodejs project on Vercel? Ân Hưởng Ân Hưởng Ân Hưởng Follow Sep 9 How can i fix Serverless Function fail when deploying a Nodejs project on Vercel? #webdev #vercel #nextjs #node * Handling JWT Authentications Securely: Pitfalls and Best Practices Saaransh Gupta Saaransh Gupta Saaransh Gupta Follow Sep 29 Handling JWT Authentications Securely: Pitfalls and * #security #node 6 reactions Ad* colorific-magic: Enhance Your Console Logs with Stunning Colors Codewithharsh Codewithharsh Codewithharsh Follow Sep 18 Introducing colorific-magic: Enhance Your Console Logs with Stunning Colors #node #npm #opensource #webdev Add Comment 2 min read 💬 Building a Real-time Chat Feature for Virtual Gift Store Using Socket.IO with MERN Stack 🚀 Md. Sajjad Hosen Shohan Md. Sajjad Hosen Shohan Md. Sajjad Hosen Shohan Follow Sep 29 💬 Building a Real-time Chat Feature for Virtual Gift Store Using Socket.IO with MERN Stack 🚀 #react #node #mongoose #socketio * Using AsyncLocalStorage for Better Traceability in NodeJS Applications Andrés Villarreal Andrés Villarreal Andrés Villarreal Follow Sep 29 Using AsyncLocalStorage for Better Traceability in NodeJS Applications #node #* Essential Monitoring and Logging Tools for Node.js Applications * Aditya Pratap Bhuyan Follow Sep 29 Essential Monitoring and Logging Tools for Node.js Applications #logging #tool* 50 System Design Terms That Will Make You Sound Like a Pro Kavei Sahai Kavei Sahai Kavei Sahai Follow Sep 28 50 System Design Terms That Will Make You Sound Like a Pro #node #development #architecture #systemdesign 14 *ad Fasteejs new fast express alternative pouchlabs pouchlabs pouchlabs Follow Aug 26 Fasteejs new fast express alternative #showdev #webdev #opensource #node Add Comment 1 min read Connecting MongoDB to a Node.js Application: Locally and Using MongoDB Atlas - Node.js Tutorial - Part 13 * Abdelhakim mohamed Follow Sep 29 Connecting MongoDB to a Node.js Application: Locally and Using MongoDB Atlas - Node.js Tutorial - Part 13 #node #webdev #javascript #mongodb Add Comment 4 min read Stringifying Errors: A Uniquely Javascript Problem Evan K Evan K Evan K Follow Sep 29 Stringifying Errors: A Uniquely Javascript Problem #javascript #node * Express Routes, Controllers, and Services: A Beginner's Guide - Node.js Tutorial - Part 12 * Abdelhakim mohamed Follow Sep 28 Understanding Express Routes, Controllers, and Services: A Beginner's Guide - Node.js Tutorial - Part 12 #node #* * Shuru: A Simple Task Runner with Built-in Node Version Management Harsh Singh Harsh Singh Harsh Singh Follow Sep 28 Shuru: A Simple Task Runner with Built-in Node Version Management #node #javascript #*mment 3 min read Code Against the Clock: How I Enhanced My PM Productivity Boopathi Boopathi Boopathi Follow Sep 28 Code Against the Clock: How I Enhanced My PM Productivity #node #productivity #automation #codeagainstclock 15 *d Advanced Features of MongoDB Every Developer Should Know * Toufiqur Rahman Tamkin Follow Sep 17 Advanced Features of MongoDB Every Developer Should Know #mongodb #node #database #software* 4 min read Building Mindful: A Mental Wellness App with Flutter, Node.js, AI, and Clean Architecture 🌿 Arya Pratap Singh Arya Pratap Singh Arya Pratap Singh Follow Sep 28 Building Mindful: A Mental Wellness App with Flutter, Node.js, AI, and Clean Architecture 🌿 #node #flutter #llama8b #firebase 1 rea*ring the Mysteries of JavaScript Syntax: Discover the Secrets Behind These Symbols * ) Hoài Nhớ ( Nick ) Follow Sep 28 Mastering the Mysteries of JavaScript Syntax: Discover the Secrets Behind These Symbols #javascript #webdev #react #node 11 *d * (feature comparison and migration guide) 16:46 * Simon Johansson Follow for Encore Sep 24 * (feature comparison and migration guide) #typescript #node #express #javascript 89 *d Setting Up Express.js, PostgreSQL, and Sequelize CLI for Production-Ready Applications. LEANDRE ALLY LEANDRE ALLY LEANDRE ALLY Follow Sep 27 Setting Up Express.js, PostgreSQL, and Sequelize CLI for Production-Ready Applications. #express #node #postgressql #webdev 10 * Enhance Your Nest.js Performance with a Custom `@Cacheable` Decorator Med Marrouchi Med Marrouchi Med Marrouchi Follow Sep 27 Enhance Your Nest.js Performance with a Custom `@Cacheable` Decorator #webdev #node #nestjs #javascript 13 react*te Multiple GitHub Actions in a Single Repository Kimberly Myers Kimberly Myers Kimberly Myers Follow Sep 16 Create Multiple GitHub Actions in a Single Repository #githubactions #typescript #node #ncc 8 *d Rust from a Web perspective Greg, The JavaScript Whisperer Greg, The JavaScript Whisperer Greg, The JavaScript Whisperer Follow Aug 24 Rust from a Web perspective #rus* * Node.js S*v Follow Sep 27 * Node.js #webdev #* 5 min read Unleash * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/8"
  },
  {
    "body": "**6 * 6 7 8 9 10 11 12 13 14 *. Learn Cron Jobs in 10 minutes Anjan Shomodder Anjan Shomodder Anjan Shomodder Follow Sep 27 Learn Cron Jobs in 10 minutes #webdev #javascript #node #linux * * * Sep 29 * #* 163 reactions 19 comments 5 min read DEVELOPING A FINANCIAL DASHBOARD APPLICATION USING NEXT.JS BARNABU BARNABU BARNABU Follow for Swahilipot Developers Sep 16 DEVELOPING A FINANCIAL DASHBOARD APPLICATION USING NEXT.JS #node #typescript #nextjs #webdev Add Comment 9 min read I Built an Node.js Application to Publish my Articles on Dev.to🧙‍♂️🔮 Arindam Majumder Arindam Majumder Arindam Majumder Follow Sep 26 I Built an Node.js Application to Publish my Articles on Dev.to🧙‍♂️🔮 #node #javascript #webdev #beginners 43 * The Challenge of Building Web Applications with Node.js Frameworks Othmane N. Othmane N. Othmane N. Follow Sep 26 The Challenge of Building Web Applications with Node.js Frameworks #webdev #javascript #node #typescript 6 * Asynchronous Programming in JavaScript - Callbacks | Promises | Async/Await * Sep 27 Asynchronous Programming in JavaScript - Callbacks | Promises | Async/Await #javascript #node #fullstack #react 4 *d How to Create a Job Board from Google Sheets with Sheetany Richard Richard Richard Follow Sep 27 How to Create a Job Board from Google Sheets with Sheetany #node #mongodb #nuxt * How to prevent log injection vulnerability in JavaScript and Node.js applications SnykSec SnykSec SnykSec Follow for Snyk Sep 27 How to prevent log injection vulnerability in JavaScript and Node.js applications #codesecurity #javascript #java #node 2 * Creating Multi Agents with NodeJS ( Talk itself into a League of legends Draft with NodeJS ) Allan Felipe Murara Allan Felipe Murara Allan Felipe Murara Follow Sep 27 Creating Multi Agents with NodeJS ( Talk itself into a League of legends Draft with NodeJS ) #javascript #node #programming #ai 3 *ad Swagger & Express: Documenting Your Node.js REST API Bentil Shadrack Bentil Shadrack Bentil Shadrack Follow Sep 27 Swagger & Express: Documenting Your Node.js REST API #webdev #javascript #api #node 6 * What is a Web App? And Why Does it Matter? Filipe Névola Filipe Névola Filipe Névola Follow for Quave Sep 25 What is a Web App? And Why Does it Matter? #webdev #javascript #node #meteor 14 reactions 7 comments 2 min read A Deep Dive into HTTP Basics in Express.js for Node.js - Tutorial Serires - Part 11 * Abdelhakim mohamed Follow Sep 26 A Deep Dive into HTTP Basics in Express.js for Node.js - Tutorial Serires - Part 11 #http #webdev #javascript #node 3 * Express.js Basics: A Beginner's Guide - Node.js Tutorial Series - part 10 * Abdelhakim mohamed Follow Sep 26 Express.js Basics: A Beginner's Guide - Node.js Tutorial Series - part 10 #node #express #javascript #backend Add Comment 3 min read Open source semantic embedding, search & clustering in NodeJS Omar Shehata Omar Shehata Omar Shehata Follow Sep 25 Open source semantic embedding, search & clustering in NodeJS #node #ai #vectordatabase #javascript 5 * 5 things you need to know before hiring a Node.js developer Chirag Softweb Chirag Softweb Chirag Softweb Follow for Softweb Solutions Inc. - An Avnet Company Sep 26 5 things you need to know before hiring a Node.js developer #node #javascript #softwaredevelopment #backend * * zenstok zenstok zenstok Follow Oct 6 * #webdev #node #javascript #nestjs 9 reactions 4 comments 9 * Node.js: 7 Essential Tips for Building Scalable Backend Systems mikias yonas mikias yonas mikias yonas Follow Sep 25 *: 7 Essential Tips for Building Scalable Backend Systems #javascript #microservices #node #performance * * S*v Follow Sep 25 * #webdev #* 4 min read ⚡ **Rust vs Node.js vs Go: Performance Comparison for Backend Development** 🏎️ * Sep 23 ⚡ **Rust vs Node.js vs Go: Performance Comparison for Backend Development** 🏎️ #rust #go #node #javascript 22 reactions 6 comments 5 min read 🦕 What is Deno? Tanmay Patil Tanmay Patil Tanmay Patil Follow Sep 25 🦕 What is Deno? #webdev #node #deno #typescript 7 * Understanding JavaScript Equality: A Deep Dive into Array and Object Comparisons Kiran Kumar Kiran Kumar Kiran Kumar Follow Sep 25 Understanding JavaScript Equality: A Deep Dive into Array and Object Comparisons #* * Authentication and authorization in Node.js applications Dan Dan Dan Follow for Cerbos Oct 8 Authentication and authorization in Node.js applications #authorization #node #tutorial #express 24 reactions 5 comments 10 min read Compare the Old-School Way of Manual Code Management vs. Webpack's Magic: Reduce File Size and Maximize Efficiency! 🧙‍♂️ Dharmendra Kumar Dharmendra Kumar Dharmendra Kumar Follow Sep 25 Compare the Old-School Way of Manual Code Management vs. Webpack's Magic: Reduce File Size and Maximize Efficiency! 🧙‍♂️ #webdev #javascript #webpack #node 8 *d Kickstart Your React Journey: How to Create Your First React App! Kingsuk bera Kingsuk bera Kingsuk bera Follow Sep 25 Kickstart Your React Journey: How to Create Your First React App! #* 1 comment 3 min read How to build a Node.js Express React app as one executable file that runs on Windows, Linux, and Mac OS 🏩 Nataly Nataly Nataly Follow Sep 25 How to build a Node.js Express React app as one executable file that runs on Windows, Linux, and Mac OS 🏩 #node #react #express #javascript * Coding Style Guide: A Practical Guide to Writing Clean Code Mohsen Karami Mohsen Karami Mohsen Karami Follow Sep 24 Coding Style Guide: A Practical Guide to Writing Clean Code #cleancode #javascript #node #vue 4 react*t-in TypeScript Support with Node.js Tony Pujals Tony Pujals Tony Pujals Follow for Google Cloud Sep 24 Built-in TypeScript Support with Node.js #node #typescript #* Building Standalone Executables With Node.js Tony Pujals Tony Pujals Tony Pujals Follow for Google Cloud Sep 24 Building Standalone Executables With Node.js #node * Making HTTP Requests in Node.js with Got FOLASAYO SAMUEL OLAYEMI FOLASAYO SAMUEL OLAYEMI FOLASAYO SAMUEL OLAYEMI Follow Aug 27 Making HTTP Requests in Node.js with Got #node #javascript 5 * Gathering Requirements and Introducing IPL Score Tracker Chrome Extension sanketmunot sanketmunot sanketmunot Follow Sep 24 Gathering Requirements and Introducing IPL Score Tracker Chrome Extension #javascript #node #extensions #cricket 2 *d How to Turn Your Device Into a Simple Server Using Node.js Trix Cyrus Trix Cyrus Trix Cyrus Follow Sep 24 How to Turn Your Device Into a Simple Server Using Node.js #devops #node #programming #learn*n read Mini-git, Understanding How Files Are Stored in Git Objects Keerthi Vardhan Keerthi Vardhan Keerthi Vardhan Follow Aug 21 Mini-git, Understanding How Files Are Stored in Git Objects #git #javascript #node #github * a ReAct AI Agent with nodeJS ( search wikipedia ) Allan Felipe Murara Allan Felipe Murara Allan Felipe Murara Follow Sep 24 Creating a ReAct AI Agent with nodeJS ( search wikipedia ) #* #node 2 * Stuck on React and Express? Legacy Code Is Holding You Back—Old Isn’t Gold! Muneeb Hussain Muneeb Hussain Muneeb Hussain Follow Aug 25 Stuck on React and Express? Legacy Code Is Holding You Back—Old Isn’t Gold! #javascript #typescript #react #node 7 *d A Beginner’s Guide to InversifyJS for Node.js Developers FOLASAYO SAMUEL OLAYEMI FOLASAYO SAMUEL OLAYEMI FOLASAYO SAMUEL OLAYEMI Follow Aug 27 A Beginner’s Guide to InversifyJS for Node.js Developers #javascript #node 5 *d Scaling Nod* S*v Follow Sep 23 Scaling Nod* #webdev #javascript #node #programming * Why you should always add type safety to your environment variables? Shaan Alam Shaan Alam Shaan Alam Follow Sep 23 Why you should always add type safety to your environment variables? #react #nextjs #node #javascript * How to Configure a Proxy for Node.js Web Scraping: A Simple Guide Lewis Kerr Lewis Kerr Lewis Kerr Follow Aug 20 How to Configure a Proxy for Node.js Web Scraping: A Simple Guide #webscraping #node #proxy #axios Add Comment 5 min read How I automated the booking of CrossFit (or any other group activity) at my gym using Playwright Vicente Ruiz Vicente Ruiz Vicente Ruiz Follow Sep 23 How I automated the booking of CrossFit (or any other group activity) at my gym using Playwright #playwright #typescript #node #githubactions * How I cut the deployment time of an Astro (Node.js) site on Azure from 1 hour to ~3 mins Nikita Kakuev Nikita Kakuev Nikita Kakuev Follow Sep 23 How I cut the deployment time of an Astro (Node.js) site on Azure from 1 hour to ~3 mins #azure #node #githubactions #astro * Testing Your Endpoint on Postman Without Local Installation Rocky Essel Rocky Essel Rocky Essel Follow Aug 21 Testing Your Endpoint on Postman Without Local Installation #javascript #postman #node #express Add Comment 2 min read How My Friend Inspired Me to Reignite My Passion for AI Through Lifelong Learning😊 Fonyuy Gita Fonyuy Gita Fonyuy Gita Follow Sep 23 How My Friend Inspired Me to Reignite My Passion for AI Through Lifelong Learning😊 #ai #womenintech #python #node 6 *d *1 Adam Adam Adam Follow Sep 23 *1 #webdev #weeklyfoo #java*t 7 min read A comparative analysis of PHP and JavaScript to determine the optimal language for a given project. Hamza Sehouli Hamza Sehouli Hamza Sehouli Follow Aug 19 A comparative analysis of PHP and JavaScript to determine the optimal language for a given project. #php #javascript #node #reactnative Add Comment 4 min read How to make your Express app 9x faster (and type-safe) Mar*erg Follow for Encore Oct 7 How to make your Express app 9x faster (and type-safe) #javascript #typescript #node #opensource 130 reactions 26 comments 16 min read Building Scalable Microservices with NestJS and Kafka * Sep 22 Building Scalable Microservices with NestJS and Kafka #nestjs #kafkajs #microservices #node * Intro to Node.JS codeWithNithin codeWithNithin codeWithNithin Follow Aug 19 Intro to Node.JS #node Add Comment 1 min read Nestjs Workspaces to build Monorepo * Sep 22 Nestjs Workspaces to build Monorepo #nestjs #monorepo #*t 2 min read npm - Useful Commands * Sep 21 npm - Useful Commands #npm #nodepackagemanager #node 2 reactions * JWT in Node.js: A Guide with Pros, Cons, and Code Examples * Abdelhakim mohamed Follow Sep 21 Understanding JWT in Node.js: A Guide with Pros, Cons, and Code Examples #node #security #javascript #beginners 6 * Fastify v5 vs v4 — vs Encore.ts André Eriksson André Eriksson André Eriksson Follow for Encore Sep 20 Fastify v5 vs v4 — vs Encore.ts #node #javascript #fastify #backend 29 reactions 7 comments 3 min read 🧠 50 Articles to Master Web Dev * Follow Sep 20 🧠 50 Articles to Master Web Dev #webdev #javascript #frontend #node 13 * Authentication in Node.js Prikshit Rana Prikshit Rana Prikshit Rana Follow Aug 18 Authentication in Node.js #node #backend #* How to Create a WhatsApp Bot in Node.js Yaasiin Ayeva Yaasiin Ayeva Yaasiin Ayeva Follow Sep 20 How to Create a WhatsApp Bot in Node.js #wwebjs #node #automation 4 * ⚔️ Rust vs Node.js: The Battle for Web Development Supremacy in 2024 🚀 * Sep 20 ⚔️ Rust vs Node.js: The Battle for Web Development Supremacy in 2024 🚀 #webdev #rust #node #*t 5 min read Why JavaScript Says \"[object Object]\" and Not Just \"[object]\" 🤔 Evan Charalampidis Evan Charalampidis Evan Charalampidis Follow Aug 21 Why JavaScript Says \"[object Object]\" and Not Just \"[object]\" 🤔 #javascript #node #beginners #webdev 2 reactions * * S*v Follow Sep 20 Understanding * #webdev #javascript #* 5 min read What is JSON? * Abdelhakim mohamed Follow Sep 20 What is JSON? #javascript #node #webdev #beginners 2 reactions * Middleware in Express.js with Node.js - Part 9 * Abdelhakim mohamed Follow Sep 20 Understanding Middleware in Express.js with Node.js - Part 9 #node #javascript #* Comment 3 min read Unleashing Parallel Processing with Node.js Worker Threads * Sep 20 Unleashing Parallel Processing with Node.js Worker Threads #node #javascript #performance * * * *ort* Add Comment 15 min r* of * Add Comment 2 min read * ** G*eG* 4 How * * ",
    "url": "https://dev.to/t/node/page/9"
  },
  {
    "body": "* npm Follow Hide Node Package Manager Create Post tag moderators 2120 Posts Published Older #npm posts 1 2 3 4 5 6 7 8 9 *. Simplifying Excel Table Parsing in Node.js wi* * #java* patch-package with Artifactory Lem Lem Lem Follow Nov 7 patch-package with Artifactory #npm #reactnative Add Comment 1 min read Let’s make the web responsive with just one installation line? I’m looking for contributors! Arthur Borba Arthur Borba Arthur Borba Follow Nov 4 Let’s make the web responsive with just one installation line? I’m looking for contributors! #ui #javascript #css #npm Add Comment 2 mi* * 🎨 * Noureddine Belguinan Follow Nov 6 * 🎨 #node #bunjs #npm #*t 2 min read Manage your versioning and changelogs using Changesets * Nov 6 Manage your versioning and changelogs using Changesets #javascript #typescript #npm #changeset * How to fix `Uncaught TypeError: Cannot read properties of null (reading 'ce')` error relliv relliv relliv Follow Nov 1 How to fix `Uncaught TypeError: Cannot read properties of null (reading 'ce')` error #vue #vite #npm #bundler Add Comment 1 min read * * Oct 28 * #javascript #node #npm #webdev Add Comment 2 min read *? Jatin Anand Jatin Anand Jatin Anand Follow Nov 8 *? #node #npm #opensource #webdev * How to Fix Common ESLint Errors: Troubleshooting Unknown or Strange Issues Jen C. Jen C. Jen C. Follow Nov 7 How to Fix Common ESLint Errors: Troubleshooting Unknown or Strange Issues #eslint #webdev #npm * Resilient Apps: Overcoming Connectivity Challenges with Seamless Event Syncing Kev Kev Kev Follow Oct 24 Building Resilient Apps: Overcoming Connectivity Challenges with Seamless Event Syncing #webdev #npm #programming #opensource 1 reaction * the Difference Between * * 23 Understanding the Difference Between * #npm #webdev #node #coding 2 *d Slide into Style: 10 Must-Have React Sidebar NPM Packages Hitesh Chauhan Hitesh Chauhan Hitesh Chauhan Follow Oct 22 Slide into Style: 10 Must-Have React Sidebar NPM Packages #react #npm * Problem deploying my page in production Le Pulgué Le Pulgué Le Pulgué Follow Oct 21 Problem deploying my page in production #angular #nginx #npm Ad* sast-scan: A Lightweight SAST npm Package for JavaScript Security Ankit chaurasiya Ankit chaurasiya Ankit chaurasiya Follow Oct 19 Introducing sast-scan: A Lightweight SAST npm Package for JavaScript Security #javascript #node #npm #code Add Comment 3 min read How to solve this problem in nodejs? Gcobani Mkontwana Gcobani Mkontwana Gcobani Mkontwana Follow Oct 18 How to solve this problem in nodejs? #react #npm #* Using Semantic Release to Automate Versioning and Publishing Mahabub Mahabub Mahabub Follow Oct 17 Using Semantic Release to Automate Versioning and Publishing #npm #versioning #cicd #release * NPM Config: customising how npm works Rinon Tendrinomena Rinon Tendrinomena Rinon Tendrinomena Follow Oct 17 NPM Config: customising how npm works #webdev #npm #java*d ⚡ React Pure Loading: Lightweight CSS Loaders for React Tomas Stveracek Tomas Stveracek Tomas Stveracek Follow Oct 30 ⚡ React Pure Loading: Lightweight CSS Loaders for React #react #npm #css #loaders 2 comments 2 min read NPM peerDependencies in Depth: A Comprehensive Introduction Diego Juliao Diego Juliao Diego Juliao Follow Oct 19 NPM peerDependencies in Depth: A Comprehensive Introduction #npm #webdev #javascript #node *ica la publicación en npm con este flujo de trabajo Jonathan Delgado Jonathan Delgado Jonathan Delgado Follow Oct 11 Simplifica la publicación en npm con este flujo de trabajo #npm #github Add Comment 7 min read Haciendo tu Primer Proyecto con Deno 20 Diego Letelier Diego Letelier Diego Letelier Follow Oct 14 Haciendo tu Primer Proyecto con Deno 20 #deno #type* Join the Open-Source Revolution with AxioDB: Calling All Developers! Ankan Saha Ankan Saha Ankan Saha Follow Oct 6 Join the Open-Source Revolution with AxioDB: Calling All Developers! #node #npm #opensource #testing Add Comment 1 min read How I Fixed a Circular Dependency Bug in Redux Using dpdm Akshay S Akshay S Akshay S Follow Oct 8 How I Fixed a Circular Dependency Bug in Redux Using dpdm #redux #javascript #npm #dpdm * 🚀 Introducing LacertaDB: A Simple and Powerful JavaScript Database Matias Affolter Matias Affolter Matias Affolter Follow Oct 3 🚀 Introducing LacertaDB: A Simple and Powerful JavaScript Database #javascript #database #npm #* Managing Workflows and Dependencies with npm, Yarn, and Other Package Managers Okoye *amaka Follow Sep 28 Managing Workflows and Dependencies with npm, Yarn, and Other Package Managers #webdev #npm #javascript #dependencymanagement Add Comment 5 min read npm vs npx - What's the difference? Yuta Hamasaki Yuta Hamasaki Yuta Hamasaki Follow Nov 1 npm vs npx - What's the difference? #npm #npx 2 *d npmとnpxの違い Yuta Hamasaki Yuta Hamasaki Yuta Hamasaki Follow Nov 1 npmとnpxの違い #npm #npx Add Comment 1 min read Why Node.js is becoming the new favorite of backend developers * Oct 21 Why Node.js is becoming the new favorite of backend developers #node #npm #backend 2 *d Efficiently Manage Errors in Next.js with a Comprehensive Developer Solution Riyon Sebastian Riyon Sebastian Riyon Sebastian Follow Oct 31 Efficiently Manage Errors in Next.js with a Comprehensive Developer Solution #nextjs #javascript #npm #node 2 * NPM package – community-health-files lassiecoder lassiecoder lassiecoder Follow Sep 26 NPM package – community-health-files #github #opensource #npm #contributorswanted 1 comment 1 min read 🚀 Introducing cnb: A Simple Tool to Enforce Git Branch Naming Conventions Amir Amir Amir Follow Sep 24 🚀 Introducing cnb: A Simple Tool to Enforce Git Branch Naming Conventions #github #cli #npm #git * Steps to fix package security vulnerabilities in your JS project Pere Sola Pere Sola Pere Sola Follow Oct 25 Steps to fix package security vulnerabilities in your JS project #javascript #security #npm * Criando um Pacote NPM com Suporte a CommonJS e ESM usando Rollup Marcelo Lourenço Marcelo Lourenço Marcelo Lourenço Follow Oct 14 Criando um Pacote NPM com Suporte a CommonJS e ESM usando Rollup #node #npm #rollup #javascript * npmrc—The Tiny File of Node * 24 npmrc—The Tiny File of Node #javascript #programming #node #npm Add Comment 2 min read Overview of Nodemailer: Easy Email Sending in Node.js Kamlesh Gupta Kamlesh Gupta Kamlesh Gupta Follow Sep 19 Overview of Nodemailer: Easy Email Sending in Node.js #node #npm #javascript #express * Introducing saksh-crud: Simplify Your Node.js CRUD Operations Susheel kumar Susheel kumar Susheel kumar Follow Sep 19 Introducing saksh-crud: Simplify Your Node.js CRUD Operations #npm #node #javascript #crud Add Comment 2 min read Setting Up Node.js and Yarn on Debian-based Distributions Khalif AL Mahmud Khalif AL Mahmud Khalif AL Mahmud Follow Oct 22 Setting Up Node.js and Yarn on Debian-based Distributions #node #npm #debian 5 *d Are JavaScript Libraries Getting Out of Hand? Ifeoluwa Ifeoluwa Ifeoluwa Follow Sep 16 Are JavaScript Libraries Getting Out of Hand? #javascript #node #npm #typescript * How to create and publish an NPM unscoped and scoped package with Typescript Bruno Sartori Bruno Sartori Bruno Sartori Follow Sep 20 How to create and publish an NPM unscoped and scoped package with Typescript #npm #typescript #node #software* 4 min read Upgrading Node.js on Linux using NVM Dessad Dessad Dessad Follow Oct 20 Upgrading Node.js on Linux using NVM #node #nvm #npm #linux * I created Kromatika, a color palette NPM package in multiple formats Michael Andreuzza Michael Andreuzza Michael Andreuzza Follow Sep 15 I created Kromatika, a color palette NPM package in multiple formats #npm #design Add Comment 1 min read Package manager on go(available in a few days.) DiegoDev DiegoDev DiegoDev Follow Oct 19 Package manager on go(available in a few days.) #programming #go #npm #opensource * Introduction to Node.js: What is Node.js and Why Use It? Rahul Sharma Rahul Sharma Rahul Sharma Follow Oct 18 Introduction to Node.js: What is Node.js and Why Use It? #javascript #node #npm #webdev * Create and publish an npm library, with TypeScript and Semantic Versioning Remi Guan Remi Guan Remi Guan Follow Sep 13 Create and publish an npm library, with TypeScript and Semantic Versioning #webdev #javascript #npm #* ngx-fastboot: How to increase Angular velocity at bootstrap Iacopo Ciao Iacopo Ciao Iacopo Ciao Follow Sep 12 ngx-fastboot: How to increase Angular velocity at bootstrap #news #angular #npm #performance Add Comment 4 min read Package Manager Fight: npm vs pnpm vs npx vs yarn vs bun Nikhil Vikraman Nikhil Vikraman Nikhil Vikraman Follow Sep 15 Package Manager Fight: npm vs pnpm vs npx vs yarn vs bun #npm #npx #pnpm #yarn * * Balraj Singh Balraj Singh Balraj Singh Follow Oct 8 * #webdev #npm #node #productivity 81 reactions 21 comments 2 min read Solving the NPM \"Can't Find Path `npm`\" Error on Windows Techsplot lifetime Techsplot lifetime Techsplot lifetime Follow Sep 10 Solving the NPM \"Can't Find Path `npm`\" Error on Windows #webdev #npm #nextjs #node Add Comment 2 min read npm Peer Dependencies for the Professional Developer Todd Palmer Todd Palmer Todd Palmer Follow Oct 14 npm Peer Dependencies for the Professional Developer #npm #angular #react #javascript 17 * \"Mainly Modules and Importing Exports - package.json!\" * 13 \"Mainly Modules and Importing Exports - package.json!\" #webdev #npm #*n 1 comment 3 min read \"Module vs Main: The Modern Hero vs The Vintage Legend of package.json!\" * 13 \"Module vs Main: The Modern Hero vs The Vintage Legend of package.json!\" #javascript #node #npm #learning * Export vs Main in package.json * 13 Export vs Main in package.json #javascript #npm #node #beginners * Stop Writing Logs into Files Rishi Kumar Rishi Kumar Rishi Kumar Follow Sep 9 Stop Writing Logs into Files #opensource #node #npm #tutorial * Create a NPM Package - Step by Step / TypeScript, commit linting, Husky, Semantic Release hijuliancode hijuliancode hijuliancode Follow Sep 13 Create a NPM Package - Step by Step / TypeScript, commit linting, Husky, Semantic Release #npm #package #typescript #javascript * Building a React Text Comparison Tool - From POC to NPM Package Chhakuli Zingare Chhakuli Zingare Chhakuli Zingare Follow for CreoWis Oct 11 Building a React Text Comparison Tool - From POC to NPM Package #react #typescript #development #npm 15 * Create your own npm library Daichi Izushi Daichi Izushi Daichi Izushi Follow Oct 11 Create your own npm library #npm #javascript #packagejson #node Add Comment 5 min read bin vs scripts in package.json * 11 bin vs scripts in package.json #javascript #npm #beginners * Simplified Guide to Registering a Private Package Registry to GitLab Using a CI/CD Pipeline for Vite React.js Projects Midhun Krishnan R Midhun Krishnan R Midhun Krishnan R Follow Sep 5 Simplified Guide to Registering a Private Package Registry to GitLab Using a CI/CD Pipeline for Vite React.js Projects #webdev #react #gitlab #npm 1 comment 3 min read ⚔️NPM vs YARN battle of ages⚔️ Rabbi lii Rabbi lii Rabbi lii Follow Sep 7 ⚔️NPM vs YARN battle of ages⚔️ #npm #yarn #webdev Add C* The node_modules problem 91 comments What are some useful npm packages I might not know about? 59 comments Yarn or npm? Which do you use and why? 3 comments NPM explain to me like I am five 11 comments Another Npm Package Is Highjacked and It's Your Fault That This Happened 18 comments Do you still use Lodash and Underscore in 2020? 27 comments I Published a Dummy Pkg to NPM, and Here is What Happened New * yarn and npm these days? 19 comments What interesting things I can do with npm? 37 comments HCJ Generator: Simplifying HTML, CSS, and JavaScript Setup New trending guides/resources * How to setup Shopify Vite with Tailwind CSS. Package Manager Fight: npm vs pnpm vs npx vs yarn vs bun Effortless Automation: Configuring CI/CD for NPM Library Publishing with GitHub Actions 🚀 Mastering Node.js: Streams, WebSockets, and File Uploads 🌐 Cleaning & speeding up the JS ecosystem - Journey so far How I Fixed a Circular Dependency Bug in Redux Using dpdm * 🎨 Steps to fix package security vulnerabilities in your JS project How to Create and Publish Your First NPM Package: A Complete Guide Analyzing Bundle Size in React Projects Using Source Maps 🚀 🛠️ Introducing Faviconify: Dynamic Favicon Generator for React Apps How to create and publish an NPM unscoped and scoped package with Typescript Efficiently Manage Errors in Next.js with a Comprehensive Developer Solution Slide into Style: 10 Must-Have React Sidebar NPM Packages Mastering NPM Link: Simplifying Local Dependency Management npm toggle-beautify | my first npm package Node.js Basics - Essential Things to Know Mastering Node.js: A Comprehensive Tutorial Series - Part Two - Node Modules Publishing a Private Package on GitHub Packages recently queried package-lock.json vs package.json React Icons npm Create Package JSon NPM Audit Fix npm vs Npx Lerna * * ",
    "url": "https://dev.to/t/npm"
  },
  {
    "body": "* # nvm Follow Hide Create Post 83 Posts Published *. * * * Oct 28 * #node #nvm Add Comment 1 min read Brave New World: Environments Oscar & Ralph Oscar & Ralph Oscar & Ralph Follow Oct 28 Brave New World: Environments #angular #node #nvm #nvmrc * Upgrading Node.js on Linux using NVM Dessad Dessad Dessad Follow Oct 20 Upgrading Node.js on Linux using NVM #node #nvm #npm #linux * Meet phpvm: Your New PHP Best Friend Forever! Jerome Thayananthajothy Jerome Thayananthajothy Jerome Thayananthajothy Follow Oct 5 Meet phpvm: Your New PHP Best Friend Forever! #php #nvm #javascript #node * Changing the Angular CLI version * Oct 2 Changing the Angular CLI version #angular #node #javascript #nvm 1 reaction 4 comments 2 min read Como Instalar o Node.js LTS Usando o NVM Kaique de Miranda Kaique de Miranda Kaique de Miranda Follow Aug 5 Como Instalar o Node.js LTS Usando o NVM #node #javascript #nvm Add Comment 3 min read How to install Node.js, NPM and NVM on Windows (node version manager) * Aug 29 How to install Node.js, NPM and NVM on Windows (node version manager) #node #npm #nvm #javascript * Seamlessly Manage Node.js Versions on Windows with nvm Prateek kumar Prateek kumar Prateek kumar Follow Aug 16 Seamlessly Manage Node.js Versions on Windows with nvm #node #nvm #webdev #* How to use NVM in Laravel Forge David David David Follow Jul 5 How to use NVM in Laravel Forge #laravel #forge #nvm #ubuntu 2 * Understanding NPM and NVM: Essential Tools for Node.js Development Dipak Ahirav Dipak Ahirav Dipak Ahirav Follow Jun 26 Understanding NPM and NVM: Essential Tools for Node.js Development #node #npm #nvm 6 * Advanced NVM Commands for Efficient Node.js Version Management Rigal Patel Rigal Patel Rigal Patel Follow Jun 22 Advanced NVM Commands for Efficient Node.js Version Management #node #nvm #javascript #nodeversionmanager 4 *d Why Specifying the Node.js Version is Essential Roberto Umbelino Roberto Umbelino Roberto Umbelino Follow Jun 20 Why Specifying the Node.js Version is Essential #node #npm #nvm 9 * NVM Install On Your PC Anush Anush Anush Follow Jun 2 NVM Install On Your PC #node #nvm #javascript #react 5 *d A simple, cross-platform, and well-tested version manager for multiple SDKs. moqsien moqsien moqsien Follow May 4 A simple, cross-platform, and well-tested version manager for multiple SDKs. #nvm #fnm #gvm #sdkman Add Comment 1 min read Node Version Manager (nvm) overview Željko Šević Željko Šević Željko Šević Follow May 8 Node Version Manager (nvm) overview #node #nvm 2 *d nvm으로 node 버전 관리하기 Beaver Bridge Beaver Bridge Beaver Bridge Follow Mar 8 nvm으로 node 버전 관리하기 #nvm #node Add Comment 1 min read HOW TO INSTALL NVM ON WINDOWS fisayo~ fisayo~ fisayo~ Follow Mar 5 HOW TO INSTALL NVM ON WINDOWS #webdev #nvm #node #npm 2 *d Installing and Managing Different Versions of Node.js with NVM shamnad-sherief shamnad-sherief shamnad-sherief Follow Feb 29 Installing and Managing Different Versions of Node.js with NVM #node #nvm Add Comment 2 min read ✨ Consistency and Efficiency with .nvmrc Laura Grassi Laura Grassi Laura Grassi Follow Feb 14 ✨ Consistency and Efficiency with .nvmrc #nvmrc #webdev #nvm #* 2 min read NVM – Node Version Manager Guido Zambarda Guido Zambarda Guido Zambarda Follow Jan 31 NVM – Node Version Manager #node #nvm #spfx 5 * Setup Node and NVM with Fish Shell Fabien Townsend Fabien Townsend Fabien Townsend Follow Jan 29 Setup Node and NVM with Fish Shell #node #nvm #fish #shell 2 *d How to quickly setup NodeJS with NVM Matteo Veraldi Matteo Veraldi Matteo Veraldi Follow Dec 17 '23 How to quickly setup NodeJS with NVM #node #nvm #howto #* How to Effortlessly Manage Different Node.js Versions with NVM Domenico Colandrea Domenico Colandrea Domenico Colandrea Follow Dec 4 '23 How to Effortlessly Manage Different Node.js Versions with NVM #node #nvm #javascript #webdev 5 * Install NVM di Linux Turunan Ubuntu & Install Node Js melalui NVM Aji Maulana Aji Maulana Aji Maulana Follow Oct 9 '23 Install NVM di Linux Turunan Ubuntu & Install Node Js melalui NVM #nvm #webdev #* 1 min read How to Install NVM and Node on macOS M1 Silicon in 2023 Deepanshu Jangra Deepanshu Jangra Deepanshu Jangra Follow Oct 1 '23 How to Install NVM and Node on macOS M1 Silicon in 2023 #mac #node #nvm #m1 1 comment 2 min read Node Version Manager Stefan Alfbo Stefan Alfbo Stefan Alfbo Follow Jul 10 '23 Node Version Manager #100daystooffload #node #nvm Add Comment 1 min read Effortless Node.js Version Management with the Fish Shell Anton Ohorodnyk Anton Ohorodnyk Anton Ohorodnyk Follow Jun 10 '23 Effortless Node.js Version Management with the Fish Shell #node #nvm #fish #programming * Gerenciando versões do Node.js com NVM Luiz Ricardo Silva Luiz Ricardo Silva Luiz Ricardo Silva Follow May 19 '23 Gerenciando versões do Node.js com NVM #node #nvm #webdev #*t 2 min read Install nvm (Node Version Manager) inside zsh Sanchita Paul Sanchita Paul Sanchita Paul Follow Mar 16 '23 Install nvm (Node Version Manager) inside zsh #nvm #node #zsh #linux 37 reactions 5 comments 1 * as a Non-Root User Using NVM: A Step-by-Step Guide Yosi Leyid Yosi Leyid Yosi Leyid Follow for Hasidic Development Group Mar 3 '23 How to Install Node.js as a Non-Root User Using NVM: A Step-by-Step Guide #npm #nvm #node #javascript 18 * Fix slow ZSH startup due to NVM Aron Schüler Aron Schüler Aron Schüler Follow Feb 2 '23 Fix slow ZSH startup due to NVM #zsh #shell #nvm 12 * Complete Remove/Uninstall node form mac OS Vishnu Vishnu Vishnu Follow Jan 30 '23 Complete Remove/Uninstall node form mac OS #beginners #node #macos #nvm 16 *d Using nvm with fish shell [Linux] Aashutosh Poudel Aashutosh Poudel Aashutosh Poudel Follow Jan 10 '23 Using nvm with fish shell [Linux] #nvm #fish #node Add Comment 1 min read How to install and Configure NVM on Mac OS Ajeet Singh Raina Ajeet Singh Raina Ajeet Singh Raina Follow Jan 8 '23 How to install and Configure NVM on Mac OS #nvm #macos #node #developers 86 reactions 10 comments 2 min read Cómo instalar y usar distintas versiones de node en ubuntu y derivados. Lino Mattos Lino Mattos Lino Mattos Follow Dec 23 '22 Cómo instalar y usar distintas versiones de node en ubuntu y derivados. #ubuntu #node #nvm #spanish 2 *d I’ve switched from NVM to Volta. This is Why Pierre-Henry Soria ✨ Pierre-Henry Soria ✨ Pierre-Henry Soria ✨ Follow Dec 20 '22 I’ve switched from NVM to Volta. This is Why #nvm #volta #javascript #node 16 reactions 5 comments 2 min read Node Version Manager Chinthaka Bandara Chinthaka Bandara Chinthaka Bandara Follow Dec 20 '22 Node Version Manager #node #nodeversionmanager #nvm 3 *d How to Get Started With Node and NVM on MacOS (M1/ M2) in 2023 Gerry Aballa Gerry Aballa Gerry Aballa Follow Dec 8 '22 How to Get Started With Node and NVM on MacOS (M1/ M2) in 2023 #node #nvm #macos #javascript 16 *d Node Version Manager (NVM): how to install and use (step-by-step guide) Alex Sanzhanov Alex Sanzhanov Alex Sanzhanov Follow Nov 16 '22 Node Version Manager (NVM): how to install and use (step-by-step guide) #nvm #node #testing #beginners 66 * Mac Web Developer Setup: Terminal, zsh, Git, Node, VS Code, Homebrew, and GitHub CLI Cecelia Martinez Cecelia Martinez Cecelia Martinez Follow Sep 20 '22 Mac Web Developer Setup: Terminal, zsh, Git, Node, VS Code, Homebrew, and GitHub CLI #mac #node #nvm #zsh 13 * How to fix issue \"node: /lib/x86_64-linux-gnu/libc.so.6: version 'GLIBC_2.28' not found (required by node)\"? abbazs abbazs abbazs Follow Sep 16 '22 How to fix issue \"node: /lib/x86_64-linux-gnu/libc.so.6: version 'GLIBC_2.28' not found (required by node)\"? #node #nvm #glibc 44 * Automatically switching node versions |`nvm use` Lana Kushnir Lana Kushnir Lana Kushnir Follow Aug 28 '22 Automatically switching node versions |`nvm use` #nvm #node #nvmrc #zsh * How to set default NVM version for all Linux shells Brent Vanwildemeersch Brent Vanwildemeersch Brent Vanwildemeersch Follow Aug 22 '22 How to set default NVM version for all Linux shells #linux #nvm #node 4 *d Install NVM on windows Manthan Ankolekar Manthan Ankolekar Manthan Ankolekar Follow Jul 18 '22 Install NVM on windows #nvm 3 *d Gerenciando versões Nodejs com NVM Railane Passos Railane Passos Railane Passos Follow Jun 16 '22 Gerenciando versões Nodejs com NVM #node #nvm 8 *d Install NVM/Node on MAC OS daud99 daud99 daud99 Follow May 13 '22 Install NVM/Node on MAC OS #nvm #node #mac #webdev 12 *d How to Solve QueryCursor.js Mongoose error with NVM Emmanuel Uchenna Emmanuel Uchenna Emmanuel Uchenna Follow May 5 '22 How to Solve QueryCursor.js Mongoose error with NVM #node #mongoose #nvm #webdev 8 * How to use multiple versions of Node on your machine Miracleio Miracleio Miracleio Follow Apr 26 '22 How to use multiple versions of Node on your machine #node #nvm #*t 3 min read Install NVM (Node Version Manager) and Node.js Batkhuu Batkhuu Batkhuu Follow Apr 7 '22 Install NVM (Node Version Manager) and Node.js #nvm #node #javascript #crossplatform 8 *d migrate from nvm to asdf Даниил Пронин Даниил Пронин Даниил Пронин Follow Apr 4 '22 migrate from nvm to asdf #nvm #asdf #node 8 * Installing NVM on Windows 11 Michael Wilkinson Michael Wilkinson Michael Wilkinson Follow Mar 3 '22 Installing NVM on Windows 11 #windows #node #nvm #*t 4 min read The Easiest Way To Install Node.js on Linux/MacOS Mauricio Panelo Mauricio Panelo Mauricio Panelo Follow Feb 24 '22 The Easiest Way To Install Node.js on Linux/MacOS #javascript #node #nvm #webdev 6 *d What is nvm? Nivethan Nivethan Nivethan Follow Dec 31 '21 What is nvm? #node #nvm #versions #npm 6 *d 極簡 nvm 使用指南 Leon Leon Leon Follow Dec 9 '21 極簡 nvm 使用指南 #node #nvm 5 *d How to set up nvm to work with fish shell? Zoran Stankovic Zoran Stankovic Zoran Stankovic Follow Nov 23 '21 How to set up nvm to work with fish shell? #shell #fishshell #terminal #nvm * nvm is for barbarians. Manage Node versions with Volta instead. Jon Crowell Jon Crowell Jon Crowell Follow Oct 19 '21 nvm is for barbarians. Manage Node versions with Volta instead. #javascript #nvm #node #volta 9 *d Set Up Windows for Node.js Development with NVM Otavio Monteagudo Otavio Monteagudo Otavio Monteagudo Follow Oct 15 '21 Set Up Windows for Node.js Development with NVM #node #nvm #windows 7 *d How to manage your Node.js version on Replit DET171 DET171 DET171 Follow Oct 10 '21 How to manage your Node.js version on Replit #replit #node #nvm 6 *d Installing Node 12 and higher on a Raspberry Pi Zero with nvm PatrickWeaver PatrickWeaver PatrickWeaver Follow Aug 4 '21 Installing Node 12 and higher on a Raspberry Pi Zero with nvm #raspberrypi #node #nvm #javascript 14 * How to install multiple node versions on the same machine Cubite Cubite Cubite Follow Jul 7 '21 How to install multiple node versions on the same machine #node #npm #nvm 5 *d Manage Node.js version for a project using NVM and .nvmrc file Guido Zambarda Guido Zambarda Guido Zambarda Follow Apr 29 Manage Node.js version for a project using NVM and .nvmrc file #development #node #nvm Add Comment 1 min read NVM Commands Cheat Sheet Pratik Thapa Pratik Thapa Pratik Thapa Follow Nov 26 '23 NVM Commands Cheat Sheet #node #nvm #cheatsheet Add Comment 1 min read How to manage node versions across projects rosa-rzi rosa-rzi rosa-rzi Follow Nov 15 '23 How to manage node versions across projects #node #webdev #nvm * Nedir? Serkan Ertan Serkan Ertan Serkan Ertan Follow Sep 7 '22 Node.js Nedir? #node #javascript #npm #nvm Add Comment 5 min read loading... trending guides/resources Meet phpvm: Your New PHP Best Friend Forever! Changing the Angular CLI version Brave New World: Environments recently queried Install NVM Mac * * ",
    "url": "https://dev.to/t/nvm"
  },
  {
    "body": "* Open Source Follow Hide May The Source Be With You! Articles about Open Source and Free Software as a philosophy, and its application to software development and project management. * UPDATED APRIL 8, 2020 To keep this tag clean and meaningful, please ensure your post fits into at least one of the following categories: Organizing, managing, running, or working in an Open Source project. Open Source philosophy, licensing, and/or practical and legal topics thereof. Advocacy and adoption of Open Source philosophy. DO NOT use this tag if you are simply using technologies which happen to be open source. You should NOT use this tag for any of the following: Promoting open source projects, such as feature lists or announcements. (Use #news or Listings.) Contributor requests. (Use #contributorswanted or Listings.) Tutorials/articles that happen to use an open source tool. (Use appropriate technology tags.) Showing off something you've built that happens to be open source. (Use the #showdev tag.) Sharing lists of open source projects. (Use #githunt or the appropriate technology tags.) Projects must comply with the Open Source Definition (see below) to legally use the term \"open source\". As all \"Free Software\" officially complies with the standards of Open Source anyway, this tag covers both (collectively, FOSS). about #opensource Open Source is so much more than \"you can read the code\". It is formally defined by the Open Source Initiative. \"Open Source\" should not be confused with the similar Free Software, which is defined by the Free Software Foundation. Generally, all Free Software is also Open Source, and the two camps often cooperate; however, the concepts are distinct! (The tags are merged here on DEV.to for simplicity, however.) Open Source Hardware is defined and overseen by the Open Source Hardware Assocation tag moderators 16862 Posts Published Older #opensource posts 1 2 3 4 5 6 7 8 9 …75 …281 *. Release 0.45.0 of Spellcheck (GitHub) Action - it is all about maintenance Jonas Brømsø Jonas Brømsø Jonas Brømsø Follow Nov 10 Release 0.45.0 of Spellcheck (GitHub) Action - it is all about maintenance #githubaction #opensource #release Add Comment 2 min read * Vaishnavi Sonawane Vaishnavi * 10 * #react #webdev #programming #opensource * Biome.js, a toolchain to format and lint your web project * Nov 10 Biome.js, a toolchain to format and lint your web project #javascript #typescript #opensource #biome Add Comment 2 min read Overview of Docker Desktop Megha Sharma Megha Sharma Megha Sharma Follow Nov 10 Overview of Docker Desktop #devops #docker #opensource #cloud * Terraform: File Types, Best Practices, and Use Cases Part 2 Vivesh Vivesh Vivesh Follow Nov 9 Mastering Terraform: File Types, Best Practices, and Use Cases Part 2 #terraform #cloud #devops #opensource 2 *d Automated Testing With Rust TheoForger TheoForger TheoForger Follow Nov 9 Automated Testing With Rust #opensource #begin #rust Add Comment 3 min read Genmo Mochi 1 — SOTA Video Generation Model — Full Tutorial With SwarmUI — Locally Generate Amazing AI Videos for Free Furkan Gözükara Furkan Gözükara Furkan Gözükara Follow Nov 9 Genmo Mochi 1 — SOTA Video Generation Model — Full Tutorial With SwarmUI — Locally Generate Amazing AI Videos for Free #ai #tutorial #opensource #machinelearning 5 * How to deploy InternVL2-2B in the Cloud? Ayush kumar Ayush kumar Ayush kumar Follow for NodeShift Nov 8 How to deploy InternVL2-2B in the Cloud? #internvl22b #ai #aimodels #opensource 10 * New Here! Introducing Chipster: A Flexible Multi-Entry Input for React – Feedback Welcome Alvaro Gallego De Paz Alvaro Gallego De Paz Alvaro Gallego De Paz Follow Nov 8 New Here! Introducing Chipster: A Flexible Multi-Entry Input for React – Feedback Welcome #react #opensource #frontend #webcomponents * and deploying a smart contract with OpenZepplin and Solidity in less than 10 minutes Josh Fischer Josh Fischer Josh Fischer Follow Nov 8 Building and deploying a smart contract with OpenZepplin and Solidity in less than 10 minutes #web3 #opensource #* 5 min read How We Write Helm Charts 150% Faster in Our Organization Ori Granot Ori Granot Ori Granot Follow Nov 8 How We Write Helm Charts 150% Faster in Our Organization #devops #kubernetes #opensource #* Deep Dive into JuiceFS Data Synchronization and Consistency in Multi-Cloud Architectures DASWU DASWU DASWU Follow Nov 8 Deep Dive into JuiceFS Data Synchronization and Consistency in Multi-Cloud Architectures #ai #opensource Add Comment 8 min read Generate a documentation site using Nextra * Nov 8 Generate a documentation site using Nextra #javascript #typescript #nextjs #* Adding Jest To Explainer.js * * Nov 8 Adding Jest To Explainer.js #javascript #git #opensource #cli Add Comment 2 min read How to create scalable, module-based applications with ease. Viktor Pasynok Viktor Pasynok Viktor Pasynok Follow Nov 7 How to create scalable, module-based applications with ease. #frontend #javascript #programming #* Latest GitHub FAQ Collections by 0x3d.site 0x3d Site 0x3d Site 0x3d Site Follow Nov 8 Latest GitHub FAQ Collections by 0x3d.site #resources #github #opensource #productivity 13 *d 【转载】2024年值得关注的8款免费网站安全监测工具推荐 Thorila Thorila Thorila Follow Nov 7 【转载】2024年值得关注的8款免费网站安全监测工具推荐 #cybersecurity #opensource #webdev #* 2024年值得关注的8款免费网站安全监测工具推荐 kong kong kong Follow Nov 7 2024年值得关注的8款免费网站安全监测工具推荐 #cybersecurity #opensource #webdev #* 【转载】2024年值得关注的8款免费网站安全监测工具推荐 Muzilathebest Muzilathebest Muzilathebest Follow Nov 7 【转载】2024年值得关注的8款免费网站安全监测工具推荐 #cybersecurity #opensource #webdev #* Supercharging GitHub Project Management: Building an Intelligent Issue Bot with Cross-Namespace Configuration Support * Abiola Oludotun Follow Nov 8 Supercharging GitHub Project Management: Building an Intelligent Issue Bot with Cross-Namespace Configuration Support #devops #github #aiops #* Choosing the Right Tech Stack for Your Project Vaishnavi Sonawane Vaishnavi * 7 Choosing the Right Tech Stack for Your Project #beginners #programming #opensource #* 4 min read Community-driven development of LLM applications — introducing GenSphere octopus inc octopus inc octopus inc Follow Nov 6 Community-driven development of LLM applications — introducing GenSphere #genai #opensource #llm #ai Add Comment 5 min read From License to Freedom: Embracing Open Source Forks Knowing What to Expect hmorris3293 hmorris3293 hmorris3293 Follow Nov 6 From License to Freedom: Embracing Open Source Forks Knowing What to Expect #opensource #linux Add Comment 5 min read El uso de los modelos de IA open source en el desarrollo Miguel Lopez Miguel Lopez Miguel Lopez Follow Nov 6 El uso de los modelos de IA open source en el desarrollo #python #ai #opensource Add Comment 3 min rea*ensource #*in read A Perfect Synergy Between Data Integration Technology and Vector Databases! Apache SeaTunnel Apache SeaTunnel Apache SeaTunnel Follow Nov 6 A Perfect Synergy Between Data Integration Technology and Vector Databases! #apacheseatunnel #data #opensource #ai Add Comment 2 min read Synchronizing Data from InfluxDB to Doris with SeaTunnel Apache SeaTunnel Apache SeaTunnel Apache SeaTunnel Follow Nov 6 Synchronizing Data from InfluxDB to Doris with SeaTunnel #apacheseatunnel #data #opensource #doris 5 *d Hoppscotch: Your Browser-Based Solution for API Testing Kiran Johns Kiran Johns Kiran Johns Follow for Hoppscotch Nov 6 Hoppscotch: Your Browser-Based Solution for API Testing #webdev #beginners #opensource #learning 2 reactions Ad* the Flashcards Game with LLM Assistant Vladimir Dimitrov Vladimir Dimitrov Vladimir Dimitrov Follow Nov 6 Introducing the Flashcards Game with LLM Assistant #beginners #programming #ai #opensource 5 *d Follow me on my journey learning Go Philip Perry Philip Perry Philip Perry Follow Nov 5 Follow me on my journey learning Go #go #learning #beginners #* How to tackle your first Hacktober Fest Rabdeep Kaur Rabdeep Kaur Rabdeep Kaur Follow Nov 5 How to tackle your first Hacktober Fest #opensource #webdev #beginners #react * LinkedIn Authwall: How it Works, Benefits, and Implementing it on Your Website Nikhil Soman Sahu Nikhil Soman Sahu Nikhil Soman Sahu Follow Nov 5 Understanding LinkedIn Authwall: How it Works, Benefits, and Implementing it on Your Website #webdev #tutorial #opensource #java Add Comment 4 min read Beginner's Understanding to WAF Carrie Carrie Carrie Follow Nov 5 Beginner's Understanding to WAF #cybersecurity #opensource #webdev #* 3 min read ONLYOFFICE Docs 8.2 for developers: PDF collaborative editing, revamped interface, API updates, PHP integration SDK Kseniya Fedoruk Kseniya Fedoruk Kseniya Fedoruk Follow for ONLYOFFICE Nov 5 ONLYOFFICE Docs 8.2 for developers: PDF collaborative editing, revamped interface, API updates, PHP integration SDK #news #onlyoffice #opensource #api Add Comment 5 min read I made a Dependency Graph Library for JavaScript & TypeScript jn jn jn Follow Nov 5 I made a Dependency Graph Library for JavaScript & TypeScript #opensource #javascript #typescript #* A Comparative Analysis between RK3588 and RK3576 Chips: Unveiling the Technological Distinctions as-jackson as-jackson as-jackson Follow Nov 5 A Comparative Analysis between RK3588 and RK3576 Chips: Unveiling the Technological Distinctions #opensource #linux Add Comment 6 min read The New Way To Use OPA With Backstage Peter Peter Peter Follow Nov 9 The New Way To Use OPA With Backstage #backstage #opa #opensource #software* 2 * 🌟Hacktoberfest 2024: Contributing to FarmRuler – A Journey of Learning and Growth PradeepG-07 PradeepG-07 PradeepG-07 Follow Nov 9 🌟Hacktoberfest 2024: Contributing to FarmRuler – A Journey of Learning and Growth #hacktoberfest2024 #webdev #opensource #fullstack Add Comment 2 min read Offering Free Help with Software Projects Armen Davtian Armen Davtian Armen Davtian Follow Nov 4 Offering Free Help with Software Projects #help #beginners #opensource #webdev Add Comment 1 min read PAPPL Scan API Bridging: GSoC 2024 Project Report 🖨️🧑‍💻 Akarshan Kapoor Akarshan Kapoor Akarshan Kapoor Follow Nov 4 PAPPL Scan API Bridging: GSoC 2024 Project Report 🖨️🧑‍💻 #linux #opensource #gsoc24 Add Comment 4 min read KmpEssentials Available for All Kotlin Developers TheArchitect123 TheArchitect123 TheArchitect123 Follow Nov 4 KmpEssentials Available for All Kotlin Developers #opensource #kotlin #android #* Discovery: Screenity - A powerful open-source screen capture tool Remi Remi Remi Follow for Pixium Digital Nov 4 Discovery: Screenity - A powerful open-source screen capture tool #webdev #productivity #software #* What Are Blacklist, Whitelist, Greylist, and Monitor Mode in Cybersecurity? Carrie Carrie Carrie Follow Nov 4 What Are Blacklist, Whitelist, Greylist, and Monitor Mode in Cybersecurity? #cybersecurity #opensource #webdev #beginners 5 *d My Hacktoberfest 2024 Jonas Brømsø Jonas Brømsø Jonas Brømsø Follow Nov 8 My Hacktoberfest 2024 #hacktoberfest #opensource #time * Using WAVE as new terminal. Diego Letelier Diego Letelier Diego Letelier Follow Nov 3 Using WAVE as new terminal. #terminal #opensource #ai *st 2024: Beginning of my open-source journey Diptodeep Diptodeep Diptodeep Follow Nov 3 Hacktoberfest 2024: Beginning of my open-source journey #* * * Cleo Buenaventura Follow Nov 3 * #opensource #git #github #hacktoberfest Add Comment 3 min read A reflection on my Hacktoberfest experience pyerie pyerie pyerie Follow Nov 3 A reflection on my Hacktoberfest experience #* Turning Frustration into Fascination: My Path to Open Source 💙</> Kiran Fatima Kiran Fatima Kiran Fatima Follow Nov 3 Turning Frustration into Fascination: My Path to Open Source 💙</> #* Implementing Unit Testing in ReadmeGenie Henrique Sagara Henrique Sagara Henrique Sagara Follow Nov 7 Implementing Unit Testing in ReadmeGenie #opensource #testing #python #unittest * GO writing and reading files with slices Ushakov Michael Ushakov Michael Ushakov Michael Follow for Wissance Nov 7 GO writing and reading files with slices #go #opensource #programming #coding * First Steps into Open Source: Hacktoberfest 2024 Reflection 𝒮ubin 𝒮ubin 𝒮ubin Follow Nov 3 First Steps into Open Source: Hacktoberfest 2024 Reflection #devchallenge #* *st 2024: My Open Source Journey. Ritesh Hiremath Ritesh Hiremath Ritesh Hiremath Follow Nov 3 Hacktoberfest 2024: My Open Source Journey. #* #devchallenge * Anti Bot Protection with SafeLine 7.0 Carrie Carrie Carrie Follow Nov 4 Anti Bot Protection with SafeLine 7.0 #cybersecurity #opensource #webdev #beginners 6 *d Example Training Images Dataset, Trained Models, Grids and Full Training Configs, json files and more Furkan Gözükara Furkan Gözükara Furkan Gözükara Follow Nov 2 Example Training Images Dataset, Trained Models, Grids and Full Training Configs, json files and more #tutorial #ai #opensource #learning 5 reactions Add Comment 48 m* 7 * #webdev #javascript #node #* 4 min read A Hacktoberfest 2024 Journey: Insights from a First-Time Project Maintainer * Nov 4 A Hacktoberfest 2024 Journey: Insights from a First-Time Project Maintainer #devchallenge #* 5 * Reflecting on My Hacktoberfest Journey as a First-Time Contributor Reka Thana Reka Thana Reka Thana Follow Nov 4 Reflecting on My Hacktoberfest Journey as a First-Time Contributor #* Managing Imports in Python: The Importance of Proactive Validation with ImportSpy Luca Luca Luca Follow Nov 2 Managing Imports in Python: The Importance of Proactive Validation with ImportSpy #python #programming #opensource #architecture Add Comment 5 min read Monitoring and logging Vivesh Vivesh Vivesh Follow Nov 10 (5 hours ago) Monitoring and logging #opensource #monitoring #devops #elk Add Comment 8 min read Supercharge Java Debugging in VS Code with Java DebugX: Macro Recording & Playback Made Easy Soumya Prasad Soumya Prasad Soumya Prasad Follow Nov 10 (6 hours ago) Supercharge Java Debugging in VS Code with Java DebugX: Macro Recording & Playback Made Easy #java #vscode #automation #opensource Add C*s We reach 750+ Stars on our Repository! 1 comment Why you should have a home server 55 comments Who's looking for open source contributors? (July 2 edition) 29 comments If You Don't Know, Now You Know - GitHub Is Restricting Access For Users From Iran And A Few Other Embargoed Countries 112 comments What are you guys building? 89 comments Building a new shift-left approach for alerting 4 comments Building a new type of testing framework 17 comments Who's looking for open source contributors? (May 21 edition) 25 comments What made you look at a project and submit a PR? Or Not? 7 comments Show us your open-source project! 118 * 16 Open Source Alternatives to Replace Popular SaaS Software & Apps 👨‍💻🔥 Maxun: Open Source No-Code Web Data Extraction Platform⚡️ 9 Interesting Open Source Projects You Should Explore Right Now🥷🏻 🎉 I love Rust/Tauri & Svelte 8 Open-Source Tools to grow your app and reach new markets! 🔥 5 Open-Source Projects That Will Transform ⚡️ Your AI Workflow 💻 9 Tools Everyone Should Try🧙‍♂️🫵 What is Platform Engineering? 🚨💥 Top 5 Trending Open-source LLM Tools & Frameworks You Must Know About ✨🚀 21+ Best Free and Open-Source Icon Library for 2024 9 open-source AI coding tools that every developer should know 🎯 New Swagger-UI embedding Cloud TypeScript Editor with RPC SDK ✨8 Powerful Open-Source tools for Creating Accessible Web Apps ✨ Top 8 OpenSource Tools for AI Startups ChartDB: From Zero to 1.5K GitHub Stars in 3 Days - Here’s How 🚀⭐️ The Beginner's Guide to Understanding WebSocket 17 Best Free React Admin Template 2024 to Speed up Your Web App Development 🚀 🧑‍💻🔧 Build a homelab with these apps and develop ANYTHING! 🤩 ⚡ 🚀 Top 10 Trending GitHub Repositories, November 2024 🔥 6 Best Open-Source AI Chatbot Builders 🔥 recently queried Best VSCode Extensions Readme Template Peppermint Linux OS Pure OS Windows Terminal Color Schemes Sublime Text Color Schemes Windows 10 vs Linux Synaptic Package Manager OBS Recording Best Atom Packages scihub.tw * * ",
    "url": "https://dev.to/t/opensource"
  },
  {
    "body": "* # orm Follow Hide Create Post 192 Posts Published Older #orm posts 1 2 3 *. *! * Nov 7 Typing Prism*rm 21 * What is ORM Madhura Rahate Madhura Rahate Madhura Rahate Follow Oct 4 What is ORM #orm #designpatterns #database #oop *ção ao ORM do Django: Exercícios Práticos Gustavo Garcia Pereira Gustavo Garcia Pereira Gustavo Garcia Pereira Follow Jul 10 Introdução ao ORM do Django: Exercícios Práticos #webdev #django #orm #python * Gorm Pagination With Ease Sheena Zien Sheena Zien Sheena Zien Follow Jul 20 Gorm Pagination With Ease #go #gorm #orm #pagination Add Comment 3 min read Explorando ORM: Facilitando o Desenvolvimento com Bancos de Dados IamThiago-IT IamThiago-IT IamThiago-IT Follow Jun 10 Explorando ORM: Facilitando o Desenvolvimento com Bancos de Dados #database #orm #tutorial #developer Add Comment 3 min read Techniques for Synchronous DB Access in TypeScript koyopro koyopro koyopro Follow Jul 5 Techniques for Synchronous DB Access in TypeScript #typescript #node #orm #database Add Comment 4 min read Why We Adopted a Synchronous API for the New TypeScript ORM koyopro koyopro koyopro Follow Jun 20 Why We Adopted a Synchronous API for the New TypeScript ORM #typescript #orm #opensource #activerecord * Data Access with Dapper: A Lightweight ORM for .NET Apps Tapesh Mehta Tapesh Mehta Tapesh Mehta Follow for WireFuture Jun 27 Data Access with Dapper: A Lightweight ORM for .NET Apps #dapper #csharp #dotnet #orm 2 * Writing code like this improves efficiency by 100 times compared to directly using MyBatis Troy Troy Troy Follow Jun 19 Writing code like this improves efficiency by 100 times compared to directly using MyBatis #java #orm #beansearcher 2 reactions 1 comment 14 min read The Power of Less: Streamlining Dependencies with Remult JYC JYC JYC Follow Jun 13 The Power of Less: Streamlining Dependencies with Remult #webdev #fullstack #orm #*t 5 min read Seeking a Type-Safe Ruby on Rails in TypeScript, I Started Developing an ORM koyopro koyopro koyopro Follow Jun 11 Seeking a Type-Safe Ruby on Rails in TypeScript, I Started Developing an ORM #typescript #rails #orm #* TypeORM: O ORM que Você Precisa Conhecer para Trabalhar com Node.js e TypeScript IamThiago-IT IamThiago-IT IamThiago-IT Follow Jun 11 TypeORM: O ORM que Você Precisa Conhecer para Trabalhar com Node.js e TypeScript #database #orm #type*t 4 min read SQL generation: Golang's builder pattern vs Clojure's persistent map Vee Satayamas Vee Satayamas Vee Satayamas Follow Jun 8 SQL generation: Golang's builder pattern vs Clojure's persistent map #sql #datamapping #orm #builder * Introduction to \"Accel Record\": A TypeScript ORM Using the Active Record Pattern koyopro koyopro koyopro Follow Jun 4 Introduction to \"Accel Record\": A TypeScript ORM Using the Active Record Pattern #typescript #activerecord #orm #database 3 *d Difference Between ORM and ODM Saad Naeem Saad Naeem Saad Naeem Follow Jun 12 Difference Between ORM and ODM #orm #odm #database #saadnaeem * Most popular Postgres ORMs Shani Shoham Shani Shoham Shani Shoham Follow for Neurelo May 29 Most popular Postgres ORMs #postgres #orm #api #database * Introducing Stalactite ORM Guillaume Mary Guillaume Mary Guillaume Mary Follow for Codefilarete May 20 Introducing Stalactite ORM #java #orm #jpa #spring Add Comment 4 min read Advanced Django ORM Features (Q-Objects, F-Expressions, Aggregations and Annotations) S*n Follow May 19 Advanced Django ORM Features (Q-Objects, F-Expressions, Aggregations and Annotations) #python #django #orm #webdev 1 comment 1 min read Less Code (-75%) & More Power (💪) with Remult JYC JYC JYC Follow May 8 Less Code (-75%) & More Power (💪) with Remult #webdev #fullstack #orm #javascript 7 * A Software Engineer's Tips and Tricks #1: Drizzle alisdairbr alisdairbr alisdairbr Follow for Koyeb Apr 29 A Software Engineer's Tips and Tricks #1: Drizzle #webdev #sql #orm #tutorial 2 * Asgard saviour: Neurelo Pratham Pratham Pratham Follow Apr 29 Asgard saviour: Neurelo #database #orm #webdev #backend* 3 min read Prisma vs. Drizzle: A Comprehensive Guide for Your NextJS Project Fabrikapp Fabrikapp Fabrikapp Follow Apr 23 Prisma vs. Drizzle: A Comprehensive Guide for Your NextJS Project #prisma #drizzle #postgres #orm 38 * Using Django ORM only without web server Ivan Yu Ivan Yu Ivan Yu Follow Apr 20 Using Django ORM only without web server #django #sqlite #python #orm 2 *d Get started with Drizzle ORM and Xata's Postgres service Cezzaine Zaher Cezzaine Zaher Cezzaine Zaher Follow for Xata Apr 16 Get started with Drizzle ORM and Xata's Postgres service #database #postgres #orm #* Stalactite ORM 2.0.0 is out ! 🚀 Guillaume Mary Guillaume Mary Guillaume Mary Follow Mar 24 Stalactite ORM 2.0.0 is out ! 🚀 #java #orm #sql #architecture Add Comment 1 min read The Django ORM: The Magic between the Application and the Database Nick Nick Nick Follow Mar 17 The Django ORM: The Magic between the Application and the Database #django #orm #database #python * Go Bun ORM with PostgreSQL Quickly Example Luigi Escalante Luigi Escalante Luigi Escalante Follow Feb 12 Go Bun ORM with PostgreSQL Quickly Example #go #orm #postgres * Trysil - TWhereClause David Lastrucci David Lastrucci David Lastrucci Follow Feb 19 Trysil - TWhereClause #trysil #delphi #orm Add Comment 1 min read What are Object-Relational Mappers (ORMs)? Tahmid Bin Taslim Rafi Tahmid Bin Taslim Rafi Tahmid Bin Taslim Rafi Follow Feb 29 What are Object-Relational Mappers (ORMs)? #webdev #orm #database #tutorial 3 * Treat your frontend like a server application with Rattus ORM Alexey Solovyov Alexey Solovyov Alexey Solovyov Follow Feb 19 Treat your frontend like a server application with Rattus ORM #javascript #typescript #orm #webdev Add Comment 4 min read Trysil - Delphi ORM David Lastrucci David Lastrucci David Lastrucci Follow Feb 19 Trysil - Delphi ORM #trysil #delphi #orm Add Comment 1 min read Understanding Object Updates in SQLAlchemy ORM Geoffrey Kim Geoffrey Kim Geoffrey Kim Follow Feb 6 Understanding Object Updates in SQLAlchemy ORM #python #sqlalchemy #orm #webdev 4 reacti*ing Seeding with Prisma Melih Şahin Melih Şahin Melih Şahin Follow Feb 5 Creating Seeding with Prisma #prisma #orm #nextjs #* Popular ORMs and Their Difference: Prisma, TypeORM, and Sequelize Shariq Ahmed Shariq Ahmed Shariq Ahmed Follow Jan 24 Popular ORMs and Their Difference: Prisma, TypeORM, and Sequelize #orm #prisma #sequelize #w* read Go ORMs Compared Mar*erg Follow for Encore Jan 18 Go ORMs Compared #go #orm #sql #programming 31 * How to Write a SQL Subquery with Drizzle ORM Dave Gray Dave Gray Dave Gray Follow Jun 16 How to Write a SQL Subquery with Drizzle ORM #sql #drizzle #orm #mysql Add Comment 2 min read MikroORM 6: Polished Martin Adámek Martin Adámek Martin Adámek Follow Jan 8 MikroORM 6: Polished #typescript #sql #orm #database Add Comment 16 min read The Terminator of ORM Technology jbx1279 jbx1279 jbx1279 Follow Dec 30 '23 The Terminator of ORM Technology #orm #java #j2ee #webdev 5 * Understanding Many-to-One and Many-to-Many Relationships in Node.js mahdi mahdi mahdi Follow Dec 17 '23 Understanding Many-to-One and Many-to-Many Relationships in Node.js #orm #node #database #sequelize 4 * Configuring Delete Behaviour for One to Many Related Objects in SQLAlchemy 2.0 S*n Follow Dec 8 '23 Configuring Delete Behaviour for One to Many Related Objects in SQLAlchemy 2.0 #database #python #sql #orm Add Comment 1 min read Digging into Marten query sets Morgan Aubert Morgan Aubert Morgan Aubert Follow Nov 17 '23 Digging into Marten query sets #crystal #orm #database #marten 3 * What Are ORMs & Should You Use Them Adam Furmanek Adam Furmanek Adam Furmanek Follow for Metis Nov 14 '23 What Are ORMs & Should You Use Them #sql #database #orm Add Comment 7 min read Django ORM with objects Stefan Alfbo Stefan Alfbo Stefan Alfbo Follow Oct 28 '23 Django ORM with objects #100daystooffload #django #orm #python * Ruby Adventures with ArcadeDB Hartmut B. Hartmut B. Hartmut B. Follow Oct 25 '23 Ruby Adventures with ArcadeDB #ruby #nosql #orm #arcadedb 2 *d EntityManager is closed : Recovering from Doctrine exceptions Arthur TOUZARD Arthur TOUZARD Arthur TOUZARD Follow Oct 13 '23 EntityManager is closed : Recovering from Doctrine exceptions #doctrine #symfony #php #orm 10 *d How is your data actually flushed? Hibernate ActionQueue event priorities. Yevhenii Kukhol Yevhenii Kukhol Yevhenii Kukhol Follow Sep 23 '23 How is your data actually flushed? Hibernate ActionQueue event priorities. #hibernate #jpa #spring #orm 2 * Django's Object-Relational Mapping (ORM) Ajit Ajit Ajit Follow Sep 13 '23 Django's Object-Relational Mapping (ORM) #django #orm #python #w* read ERDIA: TypeORM entity specification documentation tool ByungJoon Lee ByungJoon Lee ByungJoon Lee Follow Aug 28 '23 ERDIA: TypeORM entity specification documentation tool #typescript #database #orm #documentation 9 *d What Is the N+1 Query Problem and How to Detect It LeeLussh LeeLussh LeeLussh Follow Aug 23 '23 What Is the N+1 Query Problem and How to Detect It #java #observability #sqlserver #orm 4 reactions 3 comments 8 min read Drizzle ORM SQLite and Nuxt - Integrating Nuxt Auth, Part 2 Aaron K Saunders Aaron K Saunders Aaron K Saunders Follow Aug 19 '23 Drizzle ORM SQLite and Nuxt - Integrating Nuxt Auth, Part 2 #nuxt #drizzle #orm #vue 9 * Discover the Benefits of Using Prisma in Your Next Project Brilworks Software Brilworks Software Brilworks Software Follow Aug 16 '23 Discover the Benefits of Using Prisma in Your Next Project #prisma #node #orm 2 *d Drizzle ORM SQLite and Nuxt - Integrating Nuxt Auth, Part 1 Aaron K Saunders Aaron K Saunders Aaron K Saunders Follow Aug 10 '23 Drizzle ORM SQLite and Nuxt - Integrating Nuxt Auth, Part 1 #nuxt #drizzle #vue #orm 3 * Drizzle ORM, SQLite and Nuxt JS - Getting Started Aaron K Saunders Aaron K Saunders Aaron K Saunders Follow Aug 7 '23 Drizzle ORM, SQLite and Nuxt JS - Getting Started #drizzle #orm #nuxt #vue 33 reactions 4 comments 6 min read ORM: Object Relational Mapping with Ruby zigzagoon1 zigzagoon1 zigzagoon1 Follow Aug 2 '23 ORM: Object Relational Mapping with Ruby #beginners #ruby #sql #orm Add Comment 6 min read How Metis Optimized Queries Executed by Sequelize - A Case Study Adam Furmanek Adam Furmanek Adam Furmanek Follow for Metis Jul 12 '23 How Metis Optimized Queries Executed by Sequelize - A Case Study #orm #sequelize #postgres #performance * Queryx: An Open-Source Golang ORM with Automatic Schema Management Wang Zuo Wang Zuo Wang Zuo Follow Jul 6 '23 Queryx: An Open-Source Golang ORM with Automatic Schema Management #go #orm #postgres * Taking Control with PostgreSQL Functions: Closing the Gap to ORM Functionality Jose Javier Sanahuja Jose Javier Sanahuja Jose Javier Sanahuja Follow Jun 8 '23 Taking Control with PostgreSQL Functions: Closing the Gap to ORM Functionality #postgres #plpgsql #orm 3 * Backend without ORM Eduard Dyckman Eduard Dyckman Eduard Dyckman Follow Jun 10 '23 Backend without ORM #orm #backend #typescript #database 11 * Real-time page views with Next.js, Turso and Drizzle ORM Ahmet ALMAZ Ahmet ALMAZ Ahmet ALMAZ Follow for News47ell Jun 2 '23 Real-time page views with Next.js, Turso and Drizzle ORM #webdev #turso #nextjs #orm * build dynamic query predicate in Linq Karim Fahmy Karim Fahmy Karim Fahmy Follow May 25 '23 build dynamic query predicate in Linq #csharp #dotnet #database #orm 2 reactions Add C*s ORM vs Query Builders vs Raw SQL 8 comments Do you use ORM? What about native SQL features? 13 comments ORM vs Core Database Driver New Sequalize model validation or express-validator? 5 comments Should I use SQL Views With ORM frameworks? 1 comment When to use/not use an ORM 6 * *! * * ",
    "url": "https://dev.to/t/orm"
  },
  {
    "body": "* # pdf Follow Hide Create Post 349 Posts Published Older #pdf posts 1 2 3 4 5 *. uniapp 入门实战 19：将前端页面导出成pdf FreeCoderX FreeCoderX FreeCoderX Follow Nov 7 uniapp 入门实战 19：将前端页面导出成pdf #uniapp #pdf #javascript #vue * Decoding 1D/2D B* * Nov 4 Decoding 1D/2D B* #cpp #node #pdf #barcode * Ferrum Doesn’t Work on Heroku? Yegor Chsherbakov Yegor Chsherbakov Yegor Chsherbakov Follow Oct 29 Ferrum Doesn’t Work on Heroku? #ferrum #pdf #rails #heroku 1 comment 1 min read Integrate PDF Conversion by Deploying Open-source Stirling PDF with Docker Derek Derek Derek Follow Nov 5 Integrate PDF Conversion by Deploying Open-source Stirling PDF with Docker #stirling #pdf #conversion * How to Automate PDF Document Creation with an HTML Renderer Florian Florian Florian Follow for ExoAPI Oct 18 How to Automate PDF Document Creation with an HTML Renderer #pdf #javascript #node #* fpdf2 latest news Lucas Cimon Lucas Cimon Lucas Cimon Follow Oct 14 fpdf2 latest news #news #python #fpdf2 #pdf Add Comment 1 min read How To Combine PDF Files on a Mac: A Simple Guide for Busy Developers Nitin Hepat Nitin Hepat Nitin Hepat Follow Oct 6 How To Combine PDF Files on a Mac: A Simple Guide for Busy Developers #webdev #pdf Add Comment 4 min read PDF binary format encoded to previewable decoded Shubham Sharma Shubham Sharma Shubham Sharma Follow Oct 3 PDF binary format encoded to previewable decoded #node #pdf Add Comment 1 min read How to customize PDF.js GleamTech GleamTech GleamTech Follow Oct 19 How to customize PDF.js #javascript #pdf #webdev Add Comment 3 min read Aspose PDF License & Support (Comparison vs. IronPDF) Zeeshan Wazir Zeeshan Wazir Zeeshan Wazir Follow Oct 25 Aspose PDF License & Support (Comparison vs. IronPDF) #pdf #license #support #csharp Add Comment 5 min read Convert Google Slides to PDF Jakub Krajniak Jakub Krajniak Jakub Krajniak Follow Sep 19 Convert Google Slides to PDF #googleslides #pdf #converter Add Comment 3 min read How to Convert PDFs to Markdown Using PyMuPDF4LLM and Its Evaluation M Sea Bass M Sea Bass M Sea Bass Follow Oct 7 How to Convert PDFs to Markdown Using PyMuPDF4LLM and Its Evaluation #pdf #markdown #llm #python 4 *d How to Create a Blazor Web App for Document PDF Viewing and Annotation * Sep 14 How to Create a Blazor Web App for Document PDF Viewing and Annotation #webdev #dotnet #blazor #pdf Add Comment 6 min read A privacy focused online PDF Editor Ekansh Ekansh Ekansh Follow Oct 17 A privacy focused online PDF Editor #pdf #opensource #javascript #webdev 5 *d Stirling-PDF: Your All-in-One PDF Solution Mohammed Muqtadir Ahad Mohammed Muqtadir Ahad Mohammed Muqtadir Ahad Follow Sep 11 Stirling-PDF: Your All-in-One PDF Solution #opensource #pdf #webdev #docker Add Comment 2 min read PHP Libraries for PDF Handling: Evaluation and Use Case Guide Prahlad Yeri Prahlad Yeri Prahlad Yeri Follow Oct 11 PHP Libraries for PDF Handling: Evaluation and Use Case Guide #php #pdf #webdev 5 * 🔥How to Render a Beautiful PDF Viewer for Vue.js in Minutes💅 Fang Tanbamrung Fang Tanbamrung Fang Tanbamrung Follow for Vue PDF Viewer Sep 25 🔥How to Render a Beautiful PDF Viewer for Vue.js in Minutes💅 #vue #frontend #pdf #*nt 5 min read PDF Extraction: Retrieving Text and Tables together using Python🐍 Rishab Dugar Rishab Dugar Rishab Dugar Follow Sep 22 PDF Extraction: Retrieving Text and Tables together using Python🐍 #datascience #python #computerscience #pdf 3 * How to Convert PDF Pages to Images in Node.js yashnarkhedkar yashnarkhedkar yashnarkhedkar Follow Sep 16 How to Convert PDF Pages to Images in Node.js #pdf #node #pdftoimage #javascript * Step-by-Step Guide to Generate and Download PDFs with React-PDF, FileSaver, and JSZip Abhay Kumar Abhay Kumar Abhay Kumar Follow Sep 12 Step-by-Step Guide to Generate and Download PDFs with React-PDF, FileSaver, and JSZip #webdev #beginners #react #pdf 2 *d Web PDF Viewer Techniques (React.js) Cybread Cybread Cybread Follow Aug 29 Web PDF Viewer Techniques (React.js) #pdf #webdev #react #* Transforming PDFs into Audio Roomal Seferaj Roomal Seferaj Roomal Seferaj Follow Aug 17 Transforming PDFs into Audio #ai #python #pdf #* Overcoming the PDF limitations in native Swift mobile apps John Pagley John Pagley John Pagley Follow for Joyfill Jul 25 Overcoming the PDF limitations in native Swift mobile apps #swift #pdf #tooling #mobile Add Comment 6 min read Easily Convert Your PDF to Images in C# Lucy Muturi Lucy Muturi Lucy Muturi Follow for Syncfusion, Inc. Aug 16 Easily Convert Your PDF to Images in C# #pdf #csharp #fileformats Add Comment 9 min read Komga PDF Viewer on QNAP NAS sumeshi_kun sumeshi_kun sumeshi_kun Follow Jul 20 Komga PDF Viewer on QNAP NAS #docker #pdf * an Angular Document Viewer for Image Loading, Annotation, and PDF Export * Aug 22 Building an Angular Document Viewer for Image Loading, Annotation, and PDF Export #webdev #angular #typescript #pdf 1 reaction A* iOS PDF Viewer with SwiftUI Derek Derek Derek Follow Aug 21 How to Build iOS PDF Viewer with SwiftUI #ios #pdf #swift #swiftui 2 * Transforme seus HTMLs em PDFs com facilidade usando wkhtmltopdf em sua VPS Fernando Valler Fernando Valler Fernando Valler Follow Jul 16 Transforme seus HTMLs em PDFs com facilidade usando wkhtmltopdf em sua VPS #vps #pdf #html Add Comment 2 min read ComPDFKit VS PDFTron Derek Derek Derek Follow Jul 16 ComPDFKit VS PDFTron #pdf #sdk #programming #product Add Comment 6 min read Converting Code-Flavored Markdown to PDF Otavio Monteagudo Otavio Monteagudo Otavio Monteagudo Follow Jul 29 Converting Code-Flavored Markdown to PDF #markdown #pdf #conversion #render 1 reaction 2 comments 3 min read Create an Engaging React PDF Viewer: a Step-by-Step Guide Titouan Launay Titouan Launay Titouan Launay Follow for Fileforge Jul 25 Create an Engaging React PDF Viewer: a Step-by-Step Guide #react #pdf #tailwindcss #fileforge 11 * Introduction to FastReport with C# Ravi Vijay Ravi Vijay Ravi Vijay Follow Jul 25 Introduction to FastReport with C# #csharp #fastreport #pdf #tutorial 2 * 1000 Files / Month Free Trial - Free PDF API for PDF Processing Derek Derek Derek Follow Jun 21 1000 Files / Month Free Trial - Free PDF API for PDF Processing #pdf #api #sdk * Instafill.ai PDF Filler Tech Stack Oleksandr Gamanyuk Oleksandr Gamanyuk Oleksandr Gamanyuk Follow for Instafill.ai Jun 21 Instafill.ai PDF Filler Tech Stack #instafill #techstack #pdf #genai 4 * Extracting Data from Tricky PDFs with Google Gemini in 10 lines of Python Emmett McFarlane Emmett McFarlane Emmett McFarlane Follow Jul 18 Extracting Data from Tricky PDFs with Google Gemini in 10 lines of Python #pdf #chatgpt #data #python 41 * 3 Easy Steps to Digitally Sign PDFs in Your Flutter App Jollen Moyani Jollen Moyani Jollen Moyani Follow for Syncfusion, Inc. Jul 17 3 Easy Steps to Digitally Sign PDFs in Your Flutter App #flutter #mobile #pdf #pdfviewer 2 reactions * Text Extraction from Multi-Page PDFs Using OCR API: A Step-by-Step Guide Tarana Murtuzova Tarana Murtuzova Tarana Murtuzova Follow for API4AI Jul 15 Mastering Text Extraction from Multi-Page PDFs Using OCR API: A Step-by-Step Guide #ocr #textrecognition #pdf #ai 1 reaction Add Comment 14 min read Unlocking Protected PDFs David Paluy David Paluy David Paluy Follow Jul 11 Unlocking Protected PDFs #javascript #googledrive #pdf * Document conversion APIs Nikolas Nikolas Nikolas Follow May 31 Document conversion APIs #api #pdf #conversion #apyhub * Generate Signable PDF Forms with React Titouan Launay Titouan Launay Titouan Launay Follow for Fileforge Jul 11 Generate Signable PDF Forms with React #pdf #react #typescript #fileforge 77 * Why PDF SDKs Fall Short as Fillable Form Solutions John Pagley John Pagley John Pagley Follow for Joyfill May 28 Why PDF SDKs Fall Short as Fillable Form Solutions #programming #ux #pdf #coding Add Comment 4 min read Job Adventures - PDF generation | Jun 2024 Gonçalo Amaral Gonçalo Amaral Gonçalo Amaral Follow Jun 23 Job Adventures - PDF generation | Jun 2024 #pdf #programming #newsletter #webdev * Mostrar archivo PDF alojado en un servidor FTP con C# Alonzo Vera Alonzo Vera Alonzo Vera Follow Jun 21 Mostrar archivo PDF alojado en un servidor FTP con C# #csharp #ftp #pdf Add Comment 1 min read How to Convert HTML to PDF in Python (Full Tutorial) UNC DroWzYOzIL gaming UNC DroWzYOzIL gaming UNC DroWzYOzIL gaming Follow Jun 20 How to Convert HTML to PDF in Python (Full Tutorial) #python #html #pdf #library 2 * How to Convert HTML to PDF in Node.js Zeeshan Wazir Zeeshan Wazir Zeeshan Wazir Follow Jun 7 How to Convert HTML to PDF in Node.js #node #html #pdf #javascript 8 * Open and Save PDF Files Locally in Flutter Jollen Moyani Jollen Moyani Jollen Moyani Follow for Syncfusion, Inc. Jun 6 Open and Save PDF Files Locally in Flutter #pdf #development #flutter #pdfviewer A* a JavaScript PDF Editor with pdf-lib Derek Derek Derek Follow May 29 How to Build a JavaScript PDF Editor with pdf-lib #webdev #javascript #pdf #opensource 5 *d Best C#/ .NET PDF Library 2024 Derek Derek Derek Follow May 22 Best C#/ .NET PDF Library 2024 #csharp #dotnet #pdf #sdk * How to Quickly Combine PDF Files on Your Mac Kyra Kyra Kyra Follow Apr 9 How to Quickly Combine PDF Files on Your Mac #macos #preview #pdf Add Comment 2 min read PDF to Excel Conversion: The Complete Beginner's Guide Lucy Baiz Lucy Baiz Lucy Baiz Follow May 10 PDF to Excel Conversion: The Complete Beginner's Guide #pdf #excel #conversion #microsoft 3 comments 2 min read How to Convert PDF File into a Google Docs Vikram Aruchamy Vikram Aruchamy Vikram Aruchamy Follow Apr 27 How to Convert PDF File into a Google Docs #pdf #googledocs #convert #editing Add Comment 4 min read Python com PDF Charles Santana Charles Santana Charles Santana Follow May 3 Python com PDF #python #tika #pdf #apache Add Comment 1 min read DEMO - Voice to PDF - Complete PDF documents with voice commands using the Claude 3 Opus API Juan Stoppa Juan Stoppa Juan Stoppa Follow Apr 27 DEMO - Voice to PDF - Complete PDF documents with voice commands using the Claude 3 Opus API #claude #promptengineering #speechtotext #pdf 2 * How To Easily Remove a Password From a PDF file Federico Trotta Federico Trotta Federico Trotta Follow Apr 24 How To Easily Remove a Password From a PDF file #pdf #tutorial #beginners 5 * How to Edit a PDF File in C# (Developer Tutorial) Zeeshan Wazir Zeeshan Wazir Zeeshan Wazir Follow Apr 25 How to Edit a PDF File in C# (Developer Tutorial) #pdf #edit #csharp #developer 10 * How to Merge PDF Files in C# (Developer Tutorial) Zeeshan Wazir Zeeshan Wazir Zeeshan Wazir Follow Apr 25 How to Merge PDF Files in C# (Developer Tutorial) #merge #pdf #csharp #developer 3 * How to Convert PDF to Image in C# (Developer Tutorial) Zeeshan Wazir Zeeshan Wazir Zeeshan Wazir Follow Apr 25 How to Convert PDF to Image in C# (Developer Tutorial) #pdf #image #convert #csharp 9 *d Turning Documents Into Engaging Presentations: Explore the World of PDF to Video Conversion Jennifer Allen Jennifer Allen Jennifer Allen Follow Apr 18 Turning Documents Into Engaging Presentations: Explore the World of PDF to Video Conversion #pdf #to #video Add Comment 5 min read Free API to render HTML to PDF - RenderPDF.io Seth Phat Seth Phat Seth Phat Follow Apr 16 Free API to render HTML to PDF - RenderPDF.io #programming #pdf #api #tutorial 8 *d Intro to DOMPDF - light and simple PHP library to generate PDF documents Prahlad Yeri Prahlad Yeri Prahlad Yeri Follow Apr 5 Intro to DOMPDF - light and simple PHP library to generate PDF documents #php #webdev #beginners #pdf 8 *d Open sourcing our new Chat With Your PDFs LLM app starter template Natalie Fagundo Natalie Fagundo Natalie Fagundo Follow for Inductor Sep 20 Open sourcing our new Chat With Your PDFs LLM app starter template #llm #ai #pdf #opensource *... #discuss How do I Convert a large PDF to text? 1 comment How do you create PDFs and why did you choose that tech? 5 comments Guide To Use Odin and the knowledge base to summarize a PDF | Odin AI * How to Convert PDF Pages to Images in Node.js 🔥How to Render a Beautiful PDF Viewer for Vue.js in Minutes💅 Stirling-PDF: Your All-in-One PDF Solution Step-by-Step Guide to Generate and Download PDFs with React-PDF, FileSaver, and JSZip How to Convert PDFs to Markdown Using PyMuPDF4LLM and Its Evaluation A privacy focused online PDF Editor * * ",
    "url": "https://dev.to/t/pdf"
  },
  {
    "body": "* PHP Follow Hide Home for all the PHP-related posts on Dev.to! * Let's please follow some simple, sensible guidelines: ✔ Posts should be directly related to the official PHP language, not FaceBook's Hack or some other dialect. ✔ If you need very specific help (deploying Laravel on shared hosting, using mcrypt_decrypt, etc., Dev.to might not be the best platform) ✔ Yes, PHP is an old tech with several flaws, but reiterating them doesn't help anyone. ✔ Don't post a video/image or your projects without a proper introduction. ✔ Always include relevant code snippets. ✔ Arguing is encouraged; being an asshole is not! about #php Created in 1994, PHP is the lingua franca for Web development. While it gets bashed a lot for bad design, the PHP 7 series has added everything a modern dev can ask for. Unless your needs are very specific and specialized, PHP is always a great choice for starting a new project! tag moderators 8279 Posts Published Older #php *37 *. * Unleash ServBay’s Powe* 5 *d Working with multiple image select in Laravel Livewire Ridwan Kasim Ridwan Kasim Ridwan Kasim Follow Nov 9 Working with multiple image select in Laravel Livewire #php #laravel #livewire #alpine Add Comment 2 min read 3133. Minimum Array End MD *QUE Follow Nov 9 3133. Minimum Array End #php #algorithms #leetcode #* Creating focused domain applications. A Symfony approach (Managing validation errors) Nacho Colomina Torregrosa Nacho Colomina Torregrosa Nacho Colomina Torregrosa Follow Nov 9 Creating focused domain applications. A Symfony approach (Managing validation errors) #php #symfony #ddd #cleancode Add Comment 4 min read Do Express.js para o PHP: Como o Lithe traz a experiência de desenvolvimento minimalista para o mundo PHP * Do Express.js para o PHP: Como o Lithe traz a experiência de desenvolvimento minimalista para o mundo PHP #php #javascript #express #lithe 2 *d From Express.js to PHP: How Lithe Brings the Minimalist Development Experience to the PHP World * From Express.js to PHP: How Lithe Brings the Minimalist Development Experience to the PHP World #php #javascript #lithe #express 2 *d Organizando Suas Rotas de Forma Modular e Automática no Lith* 8 Organizando Suas Rotas de Forma Modular e Automática no Lithe #php #webdev #lithe #rout*n read Organizing Your Routes Modularly and Automatically in Lith* 8 Organizing Your Routes Modularly and Automatically in Lithe #php #webdev #lithe #rout*n read 1829. Maximum XOR for Each Query MD *QUE Follow Nov 8 1829. Maximum XOR for Each Query #php #leetc* 4 min read Laravel Application Security Kachkol Asa Kachkol Asa Kachkol Asa Follow Nov 8 Laravel Application Security #webdev #php #laravel #security Add Comment 2 min read PHP opcode – I* without changing your code Valerio Valerio Valerio Follow for Inspector.dev Nov 8 PHP opcode – I* without changing your code #php #webdev #tutorial #p* 6 min read Nginx force http to https On 443 https Port Teddy Zugana Teddy Zugana Teddy Zugana Follow Nov 8 Nginx force http to https On 443 https Port #nginx #php Add Comment 1 min read 2275. Largest Combination With Bitwise AND Greater Than Zero MD *QUE Follow Nov 7 2275. Largest Combination With Bitwise AND Greater Than Zero #php #leetc* 3 min read Implementando uma Tabela Hash em PHP para Armazenar Dados de Artilheiros do Brasileirão lauriely lourenço lauriely lourenço lauriely lourenço Follow Nov 7 Implementando uma Tabela Hash em PHP para Armazenar Dados de Artilheiros do Brasileirão #php #algorithm*o Include JavaScript in Laravel 11: A Step-by-Step Guide for All Scenarios websilvercraft websilvercraft websilvercraft Follow Nov 7 How to Include JavaScript in Laravel 11: A Step-by-Step Guide for All Scenarios #laravel #php #javascript #webdev * Real-Time Chat with Laravel Reverb and Vue 3 - Step-by-Step Tutorial Harish Kumar Harish Kumar Harish Kumar Follow Nov 7 Building Real-Time Chat with Laravel Reverb and Vue 3 - Step-by-Step Tutorial #laravel #vue #php #*t 2 min read 3011. Find if Array Can Be Sorted MD *QUE Follow Nov 6 3011. Find if Array Can Be Sorted #php #leetc* 4 min read Introducing NexaPHP: A Lightweight MVC PHP Framework * Nov 7 Introducing NexaPHP: A Lightweight MVC PHP Framework #webdev #programming #php #tutorial * Clear illustration of how API Token Authentication works Daichi Izushi Daichi Izushi Daichi Izushi Follow Nov 5 Clear illustration of how API Token Authentication works #laravel #php #api #authentication Add Comment 7 min read Lloyds Payment Card Integration Using PHP: Cardnet Hosted Payment Page (Connect Solution) Godwin Incrisz Godwin Incrisz Godwin Incrisz Follow Nov 5 Lloyds Payment Card Integration Using PHP: Cardnet Hosted Payment Page (Connect Solution) #lloyds #php #cardnet Add Comment 4 min read How Lithe Makes Web Application Development in PHP Faster with Less Code * How Lithe Makes Web Application Development in PHP Faster with Less Code #programming #webdev #php #lithe 2 *d Como o Lithe Facilita o Desenvolvimento de Aplicações Web em PHP com Menos Código * Como o Lithe Facilita o Desenvolvimento de Aplicações Web em PHP com Menos Código #programming #php #webdev #lithe 2 *d Lithe Hash: Um Módulo Robusto para Hashing Seguro de Senhas Lithe Lithe Lithe Follow Nov 4 Lithe Hash: Um Módulo Robusto para Hashing Seguro de Senhas #php #lithe #hashing Add Comment 3 min read Unleash Ser* * Learning PHP and MySQL—Is Laravel the Next Step? SALMAN_DEV SALMAN_DEV SALMAN_DEV Follow Nov 9 Learning PHP and MySQL—Is Laravel the Next Step? #webdev #fullstackdevelopment #php #mysql * 2914. Minimum Number of Changes to Make Binary String Beautiful MD *QUE Follow Nov 5 2914. Minimum Number of Changes to Make Binary String Beautiful #php #algorithms #leetcode #* Protecting Your Application with CSRF in Lith* 4 Protecting Your Application with CSRF in Lithe #php #csrf #lithe #security 3 * SPA Development with Filamentphp Farhad Rahmani Farhad Rahmani Farhad Rahmani Follow Nov 7 SPA Development with Filamentphp #php #laravel #developer #webdev 6 *d Kong Admin API for PHP: A Framework-Agnostic Client for Seamless Kong Gateway Management * Nasrul Hazim Bin Mohamad Follow Nov 5 Kong Admin API for PHP: A Framework-Agnostic Client for Seamless Kong Gateway Management #api #apigateway #php * Lithe Crypt: Simplifying Encryption in PHP Applications Lithe Lithe Lithe Follow Nov 4 Lithe Crypt: Simplifying Encryption in PHP Applications #php #lithe #cryptography #webdev 8 *d Why Every Developer Should Embrace DevOps 🚀 Saif Uddin Saif Uddin Saif Uddin Follow Nov 5 Why Every Developer Should Embrace DevOps 🚀 #devops #kubernetes #softwaredevelopment #php * Lithe Mail: Simplificando o Envio de Emails em Aplicações PHP Lithe Lithe Lithe Follow Nov 4 Lithe Mail: Simplificando o Envio de Emails em Aplicações PHP #php #webdev #lithe 6 *d Improving the Performance of Your PHP Application with Lithe Cach* 4 Improving the Performance of Your PHP Application with Lithe Cache #php #webdev #caching #lithe 6 reacti* the management system on cloud for simple programmble controller. zhuyue zhuyue zhuyue Follow Oct 29 Develop the management system on cloud for simple programmble controller. #vue #php Add Comment 1 min read How to create ajax How to create ajax dependent dropdown in laravel 11 Saddam Hossain Saddam Hossain Saddam Hossain Follow Oct 29 How to create ajax How to create ajax dependent dropdown in laravel 11 #laravel #ajax #php #webdev Add Comment 2 min read Laravel 11 Localization Tutorials Saddam Hossain Saddam Hossain Saddam Hossain Follow Oct 29 Laravel 11 Localization Tutorials #webdev #laravel #tutorial #php Add Comment 1 min read Seeders no Lithe: Preenchendo seu Banco de Dados Facilmente Lithe Lithe Lithe Follow Oct 29 Seeders no Lithe: Preenchendo seu Banco de Dados Facilmente #php #seeders #lithe #database Add Comment 2 min read Laravel 11 Generate and Read Sitemap XML File Tutorial Saddam Hossain Saddam Hossain Saddam Hossain Follow Oct 27 Laravel 11 Generate and Read Sitemap XML File Tutorial #webdev #beginners #php #laravel Add Comment 2 min read How to Generate App Key in Laravel 11 Saddam Hossain Saddam Hossain Saddam Hossain Follow Oct 27 How to Generate App Key in Laravel 11 #laravel #php #webdev #* How to Image Upload with Summernote in Laravel 11 Tutorial Saddam Hossain Saddam Hossain Saddam Hossain Follow Oct 27 How to Image Upload with Summernote in Laravel 11 Tutorial #php #laravel #webdev #* How To Handle Custom S/DQL Queries On Different Database Engine with DoctrineExpression ucscode ucscode ucscode Follow Oct 27 How To Handle Custom S/DQL Queries On Different Database Engine with DoctrineExpression #symfony #doctrine #postgressql #php Add Comment 3 min read Laravel Mix vs Vite: Why did Laravel Transitioned to Vite varzoeaa varzoeaa varzoeaa Follow Nov 8 Laravel Mix vs Vite: Why did Laravel Transitioned to Vite #webdev #laravel #php #performance 3 *d How to update composer Antonio Silva Antonio Silva Antonio Silva Follow Oct 25 How to update composer #php #productivity #* WP Bones 1.7.0: Enhancing WordPress Development with Improved Logging and Database Handling wpbones wpbones wpbones Follow Oct 25 WP Bones 1.7.0: Enhancing WordPress Development with Improved Logging and Database Handling #wordpress #wpbones #laravel #php * Your First WhatsApp Bot in PHP: A Beginner's Guide to Code and Integration WhatsApp API for developers WhatsApp API for developers WhatsApp API for developers Follow Nov 6 Building Your First WhatsApp Bot in PHP: A Beginner's Guide to Code and Integration #php #beginners #whatsapp #api 3 * 2641. Cousins in Binary Tree II MD *QUE Follow Oct 23 2641. Cousins in Binary Tree II #php #leetc* 5 min read How to integrate MailCare with your Laravel 11 application Exorus Exorus Exorus Follow Oct 23 How to integrate MailCare with your Laravel 11 application #laravel #php #webdev #* Connecting to a MySQL Database in PHP Nick Orases Nick Orases Nick Orases Follow Oct 23 Connecting to a MySQL Database in PHP #mysql #database #php Add Comment 4 min read [Laravel v11 x Docker] Efficiently Set Up a Laravel App Dev Environment with Laravel Sail Daichi Izushi Daichi Izushi Daichi Izushi Follow Oct 22 [Laravel v11 x Docker] Efficiently Set Up a Laravel App Dev Environment with Laravel Sail #php #laravel #docker #laravelsail Add Comment 5 min read Melhorando o Desempenho da Sua Aplicação PHP com Lithe Cach* 4 Melhorando o Desempenho da Sua Aplicação PHP com Lithe Cache #php #lithe #caching #webdev 4 *d 3163. String Compression III MD *QUE Follow Nov 4 3163. String Compression III #php #leetc* 3 min read 1106. Parsing A Boolean Expression MD *QUE Follow Oct 20 1106. Parsing A Boolean Expression #php #leetc* 4 min read New `@bool` Blade directive in Laravel! CodeWithCaen CodeWithCaen CodeWithCaen Follow Oct 20 New `@bool` Blade directive in Laravel! #news #laravel #php #opensource Add Comment 1 min read RTC design with automatic cloud calibration for simple programmable controller based on ESP8266 zhuyue zhuyue zhuyue Follow Oct 20 RTC design with automatic cloud calibration for simple programmable controller based on ESP8266 #esp8266 #cloud #php #* How to Calculate the Sum of Multiple Columns Using Eloquent Saddam Hossain Saddam Hossain Saddam Hossain Follow Oct 20 How to Calculate the Sum of Multiple Columns Using Eloquent #laravel #php #webdev #* 1545. Find Kth Bit in Nth Binary String MD *QUE Follow Oct 19 1545. Find Kth Bit in Nth Binary String #php #leetc* 4 min read PHP BEGINNER GUIDE BY VIRTUALGROWHOUSE VGAI_BETA VGAI_BETA VGAI_BETA Follow Oct 19 PHP BEGINNER GUIDE BY VIRTUALGROWHOUSE #php #tutorial #beginners #webdev Add Comment 3 min read Transacciones en laravel Fernilo Fernilo Fernilo Follow Oct 21 Transacciones en laravel #laravel #php #database #webdev 1 reaction 2 comments 2 min read 670. Maximum Swap MD *QUE Follow Oct 17 670. Maximum Swa* #php Add Comment 2 min read How to implement OTA function for ESP8266 with SDK 2.xx(script programmable controller) zhuyue zhuyue zhuyue Follow Oct 17 How to implement OTA function for ESP8266 with SDK 2.xx(script programmable controller) #esp8266 #delphi #php #c Add Comment 3 min read DecenPHP Aiodrix Aiodrix Aiodrix Follow Nov 5 DecenPHP #php #decentralized #web3 Add Comment 1 min read Laravel Observers: The Silent Ninjas of Your Application Lifecycle Dharmik Bhadkoliya Dharmik Bhadkoliya Dharmik Bhadkoliya Follow Nov 6 Laravel Observers: The Silent Ninjas of Your Application Lifecycle #laravel #php *... #discuss Laravel Nightwatch: The Future of Laravel Application Monitoring Revealed at Laracon AU New t* Integrate Firebase with Laravel 11? How does the defer() function works in Laravel? Mastering Laravel Password Reset Customization: A Comprehensive Guide How to Fix Session store not set on request Laravel 11? Clean Code Architecture in Laravel: A Practical Guide Run WordPress locally using Docker! Is PHP still worth learning in 2025? Introducing Wave V3 – The Ultimate Laravel SaaS Starter Kit! Slim and Flight PHP Framework Comparison Sharing Authentication cookies across Laravel Apps Using Firebase Cloud Messaging(FCM) for Push Notifications in PHP: A Complete Guide Laravel Cloud: Why it matters? What are the most practical and noteworthy new features of PHP8.4 for developers? Why PHP is Gaining Popularity in 2024: The Unexpected Comeback of a Classic Language Laravel Nightwatch: The Future of Laravel Application Monitoring Revealed at Laracon AU A Simple Guide to Domain-Driven Design (DDD) in Laravel PHP Generics in Laravel 11 How to auto-generate the image Alt-Text using AI and Transformers PHP Part 1 - Deploying a PHP (Laravel) application to Amazon ECS Building a Simple CRUD Application with PHP and MySQL recently queried Sublime Text vs Vscode Laravel Docker PHP Round Number Color Palette Generator From Image PHP Array to String PHP Header Array Length PHP * * ",
    "url": "https://dev.to/t/php"
  },
  {
    "body": "* # pm2 Follow Hide Create Post 47 Posts Published *. Monitoring PM2 in production * Follow for New Relic Nov 1 * Add Comment 8 min read 🚀 Deploying Node.js Application with PM2, NGINX, and SSL Configuration 🚀 Mahinur Rahman Mahinur Rahman Mahinur Rahman Follow Oct 7 🚀 Deploying Node.js Application with PM2, NGINX, and SSL Configuration 🚀 #aws #ssl #nginx #pm2 * Mastering PM2: Optimizing Node.js and Next.js Applications for Performance and Scalability Sasith Warnaka Sasith Warnaka Sasith Warnaka Follow Oct 9 Mastering PM2: Optimizing Node.js and Next.js Applications for Performance and Scalability #pm2 #node #nextjs #performanceoptimization Add Comment 4 min read An example of a simple update of NestJS-mod libraries ILs*tov Follow Aug 15 An example of a simple update of NestJS-mod libraries #pm2 #bug #nestjsmod #fullstack Add Comment 4 min read Using pm2 to Manage Node.js Applications Hoai Tong Xuan Hoai Tong Xuan Hoai Tong Xuan Follow Aug 2 Using pm2 to Manage Node.js Applications #node #pm2 * Setting Up PM2 for Multi-User Access on Ubuntu Instance Manoj Swami Manoj Swami Manoj Swami Follow Aug 27 Setting Up PM2 for Multi-User Access on Ubuntu Instance #pm2 #ubuntu #node #javascript * Manual deployment of NestJS and Angular applications on a dedicated server via \"Docker Compose\" and \"PM2\" ILs*tov Follow Aug 22 Manual deployment of NestJS and Angular applications on a dedicated server via \"Docker Compose\" and \"PM2\" #pm2 #docker #nestjsmod #fullstack 1 reaction Add Comment 28 min read Build applications on NestJS and Angular and run them in two versions: via PM2 and via Docker Compose ILs*tov Follow Aug 20 Build applications on NestJS and Angular and run them in two versions: via PM2 and via Docker Compose #pm2 #docker #nestjsmod #fullstack Add Comment 33 min read Using Screen and PM2 for Deploying, Debugging, and Running NestJS in Production Akshay Joshi Akshay Joshi Akshay Joshi Follow Jul 22 Using Screen and PM2 for Deploying, Debugging, and Running NestJS in Production #webdev #nestjs #screen #pm2 2 *d Host Multiple Node Apps with nginx, pm2 with SSL certificate hussain mohammed hussain mohammed hussain mohammed Follow Jul 8 Host Multiple Node Apps with nginx, pm2 with SSL certificate #node #pm2 #nginx #linux 21 * Node.js PM2 Orchestration Explained Mirza Leka Mirza Leka Mirza Leka Follow Apr 24 Node.js PM2 Orchestration Explained #node #pm2 #javascript #monitoring 20 * Managing Logs with PM2 and pm2-logrotate Geoffrey Kim Geoffrey Kim Geoffrey Kim Follow Mar 3 Managing Logs with PM2 and pm2-logrotate #node #pm2 #logging #devops 3 *d Streamlining PM2 Startup for Node.js * Anup Tilak Anup Tilak Anup Tilak Follow Feb 27 Streamlining PM2 Startup for Node.js * #node #pm2 #autorestart #w* read Managing Next.js and NestJS Applications in Production with PM2 Geoffrey Kim Geoffrey Kim Geoffrey Kim Follow Feb 20 Managing Next.js and NestJS Applications in Production with PM2 #pm2 #nextjs #nestjs #node 24 *d Como utilizar o PM2 para gerenciar aplicações Augusto Klecz Augusto Klecz Augusto Klecz Follow Sep 21 '23 Como utilizar o PM2 para gerenciar aplicações #* #pm2 11 *d Guide to Running a Node Server in Nx Monorepo using PM2 Process Manager Jona Jona Jona Follow Jun 25 '23 Guide to Running a Node Server in Nx Monorepo using PM2 Process Manager #nx #pm2 #node 2 reactions A* old nodejs Project into new nodejs project Himanshu Gupta Himanshu Gupta Himanshu Gupta Follow Apr 9 '23 How to run old nodejs Project into new nodejs project #node #pm2 #run *ad CentOS 7 NodeJS Kurulumu Gürkan Biçer Gürkan Biçer Gürkan Biçer Follow Mar 13 '23 CentOS 7 NodeJS Kurulumu #centos #node #npm #pm2 * How to start node.js app with pm2 Himanshu Gupta Himanshu Gupta Himanshu Gupta Follow Jan 25 '23 How to start node.js app with pm2 #node #serverless #pm2 #beginners 12 *d Deploying Multiple NodeJS Servers on a Single DigitalOcean Droplet; Managed by PM2, Without Using an ecosystem.config.js file Chukwunazaekpere Chukwunazaekpere Chukwunazaekpere Follow Oct 5 '22 Deploying Multiple NodeJS Servers on a Single DigitalOcean Droplet; Managed by PM2, Without Using an ecosystem.config.js file #pm2 #node #servers #env Add Comment 2 min read Automatic deploys with PM2, Caddy, and GitHub Actions aaronblondeau aaronblondeau aaronblondeau Follow Sep 6 '22 Automatic deploys with PM2, Caddy, and GitHub Actions #devops #github #pm2 5 *d Utilizando PM2 (Basico) Miguelangel Parra Miguelangel Parra Miguelangel Parra Follow Sep 1 '22 Utilizando PM2 (Basico) #node #pm2 6 *d Experience on PM2 Tricks to manage your NodeJs processes Geofrey Bundala Geofrey Bundala Geofrey Bundala Follow for ClickPesa Aug 5 '22 Experience on PM2 Tricks to manage your NodeJs processes #backend #pm2 10 *d Deploy Nest JS App using PM2 on Linux (Ubuntu) Server Mrityunjaya Prajapati Mrityunjaya Prajapati Mrityunjaya Prajapati Follow Jun 11 '22 Deploy Nest JS App using PM2 on Linux (Ubuntu) Server #nestjs #devops #pm2 #ubuntu 44 * Install PM2 (Process Manager 2) Batkhuu Batkhuu Batkhuu Follow Apr 7 '22 Install PM2 (Process Manager 2) #pm2 #processmanager #monitoring #crossplatform 6 *d Generate server block (virtual hosts) for nginx dynamically Hiram Hiram Hiram Follow Jan 17 '22 Generate server block (virtual hosts) for nginx dynamically #nginx #pm2 #devops 11 * Easy node apps deployment with PM2 Hiram Hiram Hiram Follow Jan 11 '22 Easy node apps deployment with PM2 #node #pm2 #deployment 5 * Manage Node applications using PM2 Dibyojyoti Sanyal Dibyojyoti Sanyal Dibyojyoti Sanyal Follow Aug 24 '21 Manage Node applications using PM2 #node #webdev #pm2 4 *d PM2, node, NextJS, Express muckitymuck muckitymuck muckitymuck Follow Sep 3 '21 PM2, node, NextJS, Express #nextjs #node #pm2 #express 4 *d Why PM2 is the process manager you're missing Chris Bongers Chris Bongers Chris Bongers Follow Jun 20 '21 Why PM2 is the process manager you're missing #node #pm2 #management 21 react*ding a browser extension for PM2 Jody Heavener Jody Heavener Jody Heavener Follow Jun 14 '21 Building a browser extension for PM2 #pm2 #devtools #extension 3 *d Deploy Node on Digital Ocean with PM2 ajcwebdev ajcwebdev ajcwebdev Follow Jun 13 '21 Deploy Node on Digital Ocean with PM2 #javascript #node #pm2 #linux 4 * Pm2 Cheat Sheet Lam Lam Lam Follow May 13 '21 Pm2 Cheat Sheet #pm2 #cheatsheet 3 *d How to CI/CD using PM2 for your Node.js project Tayyib Cankat Tayyib Cankat Tayyib Cankat Follow Feb 15 '21 How to CI/CD using PM2 for your Node.js project #tutorial #pm2 #node #cicd 17 * Publishing a Web site using node, pm2 and nginx Erik Vullings Erik Vullings Erik Vullings Follow Nov 26 '20 Publishing a Web site using node, pm2 and nginx #node #nginx #pm2 #parcel 7 *d PM2 listening on port 443 shows EADDRINUSE: address already in use :::443 Doaa Mahely Doaa Mahely Doaa Mahely Follow Nov 9 '20 PM2 listening on port 443 shows EADDRINUSE: address already in use :::443 #help #node #pm2 7 reactions 15 comments 2 min read PM2 and Docker in the world of NodeJS Navneet Karnani Navneet Karnani Navneet Karnani Follow Oct 26 '20 PM2 and Docker in the world of NodeJS #docker #pm2 #node #cluster 21 * Preparar servidor para deploy NodeJs com PM2 Wanderson Alves Rodrigues Wanderson Alves Rodrigues Wanderson Alves Rodrigues Follow Sep 7 '20 Preparar servidor para deploy NodeJs com PM2 #javascript #node #pm2 10 * Setting up PM2 CI deployments with Github Actions Joseph Thomas Joseph Thomas Joseph Thomas Follow Aug 26 '20 Setting up PM2 CI deployments with Github Actions #pm2 #github #ci 49 reactions 7 comments 4 min read Deploy ReactJS Production Build with PM2 Taufiq Abdullah Taufiq Abdullah Taufiq Abdullah Follow Aug 10 '20 Deploy ReactJS Production Build with PM2 #javascript #react #pm2 #ubuntu 32 reactions 8 comments 2 min read How To Deploy NodeJS Apps With PM2 & NGINX In Cluster Mode On Production Environment Swapnil Abhimanyu Wagh Swapnil Abhimanyu Wagh Swapnil Abhimanyu Wagh Follow May 20 '20 How To Deploy NodeJS Apps With PM2 & NGINX In Cluster Mode On Production Environment #node #nginx #pm2 #devops 2*ad Setup a Next.js project with PM2, Nginx and Yarn on Ubuntu 18.04 react-stockholm react-stockholm react-stockholm Follow Feb 10 '20 Setup a Next.js project with PM2, Nginx and Yarn on Ubuntu 18.04 #react #javascript #nextjs #pm2 121 * How to save disk space when using PM2 Lucis Lucis Lucis Follow Feb 5 '20 How to save disk space when using PM2 #node #pm2 #logs #space 58 * Step-by-Step Guide to Setup Node With Docker Tommy May III Tommy May III Tommy May III Follow Nov 18 '18 Step-by-Step Guide to Setup Node With Docker #node #docker #javascript #pm2 111 reactions 6 comments 7 min read Graceful shutdown NodeJS HTTP server when using PM2 (4/4) Antonio Santiago Antonio Santiago Antonio Santiago Follow Oct 19 '18 Graceful shutdown NodeJS HTTP server when using PM2 (4/4) #node #cluster #pm2 #shutdown 21 * Using PM2 to manage NodeJS cluster (3/4) Antonio Santiago Antonio Santiago Antonio Santiago Follow Oct 9 '18 Using PM2 to manage NodeJS cluster (3/4) #node #cluster #pm2 #shutdown 29 * Running PM2 & Node.js in Production Environments Nick Parsons Nick Parsons Nick Parsons Follow Aug 6 '18 Running PM2 & Node.js in Production Environments #pm2 #node #processmanagement 33 * Deploy a Full Stack Web App to VPS Server with NGINX and PM2! Seymen Kılıç Seymen Kılıç Seymen Kılıç Follow Aug 28 '23 Deploy a Full Stack Web App to VPS Server with NGINX and PM2! #nginx #vps #pm2 #deployment Add Comment 2 min read How to start node.js app with pm2 Himanshu Gupta Himanshu Gupta Himanshu Gupta Follow Feb 22 '23 How to start node.js app with pm2 #pm2 #serverless #node #package * Node.js PM2 Cheatsheet Salman Khan Salman Khan Salman Khan Follow Jun 24 '21 Node.js PM2 Cheatsheet #node #pm2 * How to Start/ Run Angular application with pm2 in aws ec2 Jabir Jabir Jabir Follow Dec 30 '20 How to Start/ Run Angular application with pm2 in aws ec2 #angular #pm2 #ec2 #aws 1 comments 1 min read Deploying a react app using pm2 and serve Mohammed Modi Mohammed Modi Mohammed Modi Follow for LoginRadius Sep 3 '20 Deploying a react app using pm2 and serve #react #pm2 #deployment *... trending guides/resources Setting Up PM2 for Multi-User Access on Ubuntu Instanc*nsor Neon * ",
    "url": "https://dev.to/t/pm2"
  },
  {
    "body": "* # postgres Follow Hide Posts on tips and tricks, using and learning about PostgreSQL for database development and analysis. * Articles should be related to Postgres development, performance, scalability, optimisation or analysis in some way. tag moderators 3647 Posts Published Older #postgres posts 1 2 3 4 5 6 7 8 9 *. Advanced Techniques for Search Indexing with Go: Implementing Full-Text Search for Product Catalogs Muhammad Mahdi Ramadhan Muhammad Mahdi Ramadhan Muhammad Mahdi Ramadhan Follow Nov 10 Advanced Techniques for Search Indexing with Go: Implementing Full-Text Search for Product Catalogs #go #elasticsearch #postgres #searchengine Add Comment 1 min read * * 10 * #javascr*mment 4 min read Building a Full-Stack CRUD App with Next.js 14, Prisma, and PostgreSQL Abdur Rakib Rony Abdur Rakib Rony Abdur Rakib Rony Follow Nov 9 Building a Full-Stack CRUD App with Next.js 14, Prisma, and PostgreSQL #postgres #nextjs #prisma * Step-by-Step Guide: Querying From Databases Via a Single Database Helper in C# Using the Strategy Design Pattern David Au Yeung David Au Yeung David Au Yeung Follow Nov 8 Step-by-Step Guide: Querying From Databases Via a Single Database Helper in C# Using the Strategy Design Pattern #mysql #postgres #sqlserver #csharp * Como Tratar Diferentes Tipos de Logs em Go? Ortiz de Arcanjo Antonio David Ortiz de Arcanjo Antonio David Ortiz de Arcanjo Antonio David Follow Nov 7 Como Tratar Diferentes Tipos de Logs em Go? #go #postgres #* 1 min read How to deploy fastAPI app with postgreSQL database in AWS EC2 Shaikh Al Amin Shaikh Al Amin Shaikh Al Amin Follow Nov 7 How to deploy fastAPI app with postgreSQL database in AWS EC2 #fastapi #aws #ec2 #postgres Add Comment 3 min read Hello Khant Naing Set Khant Naing Set Khant Naing Set Follow Nov 1 Hello #k8s #postgre*o Document Your Database with a GUI Tool Roxana Maria Haidiner Roxana Maria Haidiner Roxana Maria Haidiner Follow Nov 4 How to Document Your Database with a GUI Tool #database #mysql #postgres #oracle 3 comments 8 min read * Hannah Liao Hannah Liao Hannah Liao Follow Oct 30 * #postgres #railway #node #* How indexes power your database Lucas Rivelles Lucas Rivelles Lucas Rivelles Follow Nov 3 How indexes power your database #database #learning #sql #postgres 3 * Top 🐘👀 Postgres Monitoring Tools 🧰 and Best Practices in 2024 🔝 Yiran Jing Yiran Jing Yiran Jing Follow for Bytebase Oct 30 Top 🐘👀 Postgres Monitoring Tools 🧰 and Best Practices in 2024 🔝 #database #sql #postgres #tooling 5 * Automating PostgreSQL Table Monitoring with Bash Dmi*off Follow Oct 29 Automating PostgreSQL Table Monitoring with Bash #bash #database #automation #postgres Add Comment 4 min read 📚 Understand More About RDBMS and NoSQL Through Analyzing PostgreSQL and MongoDB * Oct 28 📚 Understand More About RDBMS and NoSQL Through Analyzing PostgreSQL and MongoDB #webdev #database #postgres #mongodb 1 reaction Add Comment 12 min read Identifying Unused Indexes in PostgreSQL: A Bash Script Solution Dmi*off Follow Oct 29 Identifying Unused Indexes in PostgreSQL: A Bash Script Solution #database #devops #postgres #bash Add Comment 4 min read Exposing replica nodes in Percona Operator for PostgreSQL Sergey Pronin Sergey Pronin Sergey Pronin Follow Oct 24 Exposing replica nodes in Percona Operator for PostgreSQL #kubernetes #postgres #operators #* How to Simplify Database Management and Reduce Costs Vitaliy Kukharik Vitaliy Kukharik Vitaliy Kukharik Follow Nov 6 How to Simplify Database Management and Reduce Costs #opensource #cloud #database #postgres * Why Doesn't Postgres Use My Index Adam Furmanek Adam Furmanek Adam Furmanek Follow for Metis Oct 23 Why Doesn't Postgres Use My Index #sql #database #postgres Add Comment 16 min read PostgreSQL as a Celery Broker Kamal Mustafa Kamal Mustafa Kamal Mustafa Follow Oct 23 PostgreSQL as a Celery Broker #postgres #queue #celery Add Comment 1 min read Remedy for Poor-Performing SQL Queries Saby_Explain Saby_Explain Saby_Explain Follow Oct 22 Remedy for Poor-Performing SQL Queries #postgres #postgressql #dba #explain Add Comment 8 min read Create your own Event Scheduling API using Express and Supabase Amartya Chowdhury Amartya Chowdhury Amartya Chowdhury Follow Nov 4 Create your own Event Scheduling API using Express and Supabase #api #postgres #sql #*t 8 min read Best Practices for Bulk Optimization of Queries in PostgreSQL Saby_Explain Saby_Explain Saby_Explain Follow Oct 21 Best Practices for Bulk Optimization of Queries in PostgreSQL #postgres #autoexplain #postgressql #node Add Comment 18 min read Building a Fast and Efficient Semantic Search System Using OpenVINO and Postgres Dat Tran Dat Tran Dat Tran Follow Oct 21 Building a Fast and Efficient Semantic Search System Using OpenVINO and Postgres #python #machinelearning #postgres #aws 5 *d FastAPI, Pydantic, Psycopg3: the holy trinity for Python web APIs Sam Sam Sam Follow Oct 24 FastAPI, Pydantic, Psycopg3: the holy trinity for Python web APIs #python #webdev #postgres #tutorial Add Comment 9 min read Load Testing PostgreSQL on Kubernetes: A YAML-Only Approach Dmi*off Follow Oct 21 Load Testing PostgreSQL on Kubernetes: A YAML-Only Approach #devops #database #postgres #kubernetes Add Comment 3 min read Harnessing the Power of PostgreSQL, Prisma, and Docker for Robust and Scalable Applications codenextgen codenextgen codenextgen Follow Oct 16 Harnessing the Power of PostgreSQL, Prisma, and Docker for Robust and Scalable Applications #prisma #docker #postgre*o choose the right database? Kartikey Srivastava Kartikey Srivastava Kartikey Srivastava Follow Oct 16 How to choose the right database? #database #postgres #mysql #nosql Add Comment 4 min read Indexes Under The Hood Adam Furmanek Adam Furmanek Adam Furmanek Follow for Metis Oct 16 Indexes Under The Hood #sql #database #postgres 1 reaction Add Comment 14 min read 7+ Free PostgreSQL Hosting Platforms for Developers in 2024 Probir Sarkar Probir Sarkar Probir Sarkar Follow Nov 7 7+ Free PostgreSQL Hosting Platforms for Developers in 2024 #database #sql #postgres #webdev 12 * Optimizing Pagination in PostgreSQL: OFFSET/LIMIT vs. Keyset Nishant Nishant Nishant Follow Oct 20 Optimizing Pagination in PostgreSQL: OFFSET/LIMIT vs. Keyset #postgres #pagination #database 1 comment 4 min read How to self-host Postgres Database on Linux The Smartbug The Smartbug The Smartbug Follow Nov 7 How to self-host Postgres Database on Linux #postgres #database #raspberrypi #docker 2 *d PostgreSQL vs. SQLite: 멀티스레드 환경에서의 읽기-쓰기 * Robert Teminian Follow Oct 15 PostgreSQL vs. SQLite: 멀티스레드 환경에서의 읽기-쓰기 #postgres #sqlite Add Comment 1 min read PostgreSQL vs. SQLite: read & write in multithreaded environment * Robert Teminian Follow Oct 15 PostgreSQL vs. SQLite: read & write in multithreaded environment #postgres #sqlite Add Comment 2 min read What's behind the Call Home option? Franck Pachot Franck Pachot Franck Pachot Follow for YugabyteDB Distributed PostgreSQL Database Nov 7 What's behind the Call Home option? #yugabyted #distributed #database #postgres * Implementing Vector Search with OpenAI (Part 2) yukaty yukaty yukaty Follow Nov 7 Implementing Vector Search with OpenAI (Part 2) #postgres #ai #docker #openai * Deploying a Rails API-Only App with Postgres using Kamal 2 Max Moreno Max Moreno Max Moreno Follow Nov 6 Deploying a Rails API-Only App with Postgres using Kamal 2 #kamal #rails #postgres #ruby 4 * VACUUM In Postgres Demystified Adam Furmanek Adam Furmanek Adam Furmanek Follow for Metis Nov 6 VACUUM In Postgres Demystified #sql #database #postgres 2 * How to Set Up Postgres Using Docker Yiran Jing Yiran Jing Yiran Jing Follow for Bytebase Nov 5 How to Set Up Postgres Using Docker #database #docker #postgres #beginners 12 *d Prisma + Postgres awalias awalias awalias Follow Oct 30 Prisma + Postgres #prisma #postgres #postgressql 511 reactions 48 comments 3 min read Utilisation de Postman pour les Tests d'API : Un Guide Complet Fabrice Fabrice Fabrice Follow Nov 5 Utilisation de Postman pour les Tests d'API : Un Guide Complet #api #postman #code #postgres 3 * Geolocation in web apps made easy with haversine Petra Grunheidt Petra Grunheidt Petra Grunheidt Follow Nov 4 Geolocation in web apps made easy with haversine #postgres #webdev #tutorial #database 3 * How to import Excel into PostgreSQL only 1 step ryjfgjl ryjfgjl ryjfgjl Follow Oct 15 How to import Excel into PostgreSQL only 1 step #excel #import #postgres #converter Add Comment 2 min read Duckdb — O novo banco de dados dos Big Data * Airton Lira junior Follow Nov 2 Duckdb — O novo banco de dados dos Big Data #duckdb #postgres #docker #database 7 * Statement Timeout in PostgreSQL Jing Jing Jing Follow for Chat2DB Oct 10 Statement Timeout in PostgreSQL #programming #tutorial #database #postgres Add Comment 4 min read Fixing “Connection Refused” Error Between pgAdmin and Postgres in Docker Deni Sugiarto Deni Sugiarto Deni Sugiarto Follow Oct 10 Fixing “Connection Refused” Error Between pgAdmin and Postgres in Docker #webdev #docker #pgadmin #postgres Add Comment 3 min read 20 milhões de linhas em 20s Lucas *ewski Follow Oct 9 20 milhões de linhas em 20s #java #performance #postgres #c Add Comment 6 min read Optimizing PostgreSQL Mass Deletions with Table Partitioning stringintech stringintech stringintech Follow Oct 7 Optimizing PostgreSQL Mass Deletions with Table Partitioning #database #postgres #go * Fullstack app: Deploying the Fullstack Application on Render with Docker Matheus Bernardes Spilari Matheus Bernardes Spilari Matheus Bernardes Spilari Follow Oct 7 Fullstack app: Deploying the Fullstack Application on Render with Docker #fullstack #docker #tutorial #postgres Add Comment 4 min read 🚀 pgai Vectorizer: Automate AI Embeddings With One SQL Command in PostgreSQL Avthar Sewrathan Avthar Sewrathan Avthar Sewrathan Follow for Timescale Oct 29 🚀 pgai Vectorizer: Automate AI Embeddings With One SQL Command in PostgreSQL #ai #vectordatabase #postgres #opensource 86 reactions 12 comments 3 min read How to use Prisma Postgres 🚀 Thomas Bnt ☕ Thomas Bnt ☕ Thomas Bnt ☕ Follow Oct 31 How to use Prisma Postgres 🚀 #prisma #javascript #database #postgres 19 * Database Setup, JWT Implementation & API Michael M. Michael M. Michael M. Follow Oct 26 Database Setup, JWT Implementation & API #postgres #jwt #authentication 3 *d Use Transactions When Manually Accessing SQL Databases Brooks Patton Brooks Patton Brooks Patton Follow Oct 2 Use Transactions When Manually Accessing SQL Databases #sql #postgres #database Add Comment 3 min read Setup with PostgreSQL and pgvector (Part 1) yukaty yukaty yukaty Follow Nov 5 Setup with PostgreSQL and pgvector (Part 1) #postgres #docker #ai #* 3 min read Troubleshooting PostgreSQL Low Free Memory Adam Furmanek Adam Furmanek Adam Furmanek Follow for Metis Oct 2 Troubleshooting PostgreSQL Low Free Memory #sql #database #postgres Add Comment 11 min read 🧪 Golang Integration Test With Gin, Gorm, Testify, PostgreSQL * Oct 25 🧪 Golang Integration Test With Gin, Gorm, Testify, PostgreSQL #webdev #go #postgres #testing Add Comment 7 min read Speeding Up Foreign Key Constraints During Migrations Franck Pachot Franck Pachot Franck Pachot Follow for YugabyteDB Distributed PostgreSQL Database Nov 3 Speeding Up Foreign Key Constraints During Migrations #postgres #database #sql #yugabytedb 4 * Cloudflare + Remix + PostgreSQL with Prisma Accelerate's Self Hosting SoraKumo SoraKumo SoraKumo Follow Oct 14 Cloudflare + Remix + PostgreSQL with Prisma Accelerate's Self Hosting #cloudflare #prisma #remix #postgres Add Comment 4 min read Pagination in raw SQL with OFFSET M*i M* Nov 3 Pagination in raw SQL with OFFSET #sql #postgres #programming #database Add Comment 5 min read Open-Source Lightweight PostgreSQL Desktop Tool: Simplify Your Database Management with Dark Mode and Essential Features RQ LI RQ LI RQ LI Follow Sep 30 Open-Source Lightweight PostgreSQL Desktop Tool: Simplify Your Database Management with Dark Mode and Essential Features #postgres #webdev #javascript #* PostgreSQL Query Performance Tuning Tips Akshay Gupta Akshay Gupta Akshay Gupta Follow Nov 1 PostgreSQL Query Performance Tuning Tips #database #postgres #sql 5 reactions 4 comments 8 min read Reading and Interpreting PostgreSQL Query Plans – A Friendly Guide Akshay Gupta Akshay Gupta Akshay Gupta Follow Nov 1 Reading and Interpreting PostgreSQL Query Plans – A Friendly Guide #database #postgres #sql 6 * Part 1: เริ่มต้นใช้งาน Teable บน Docker Warun C. ⚡ Warun C. ⚡ Warun C. ⚡ Follow Oct 30 Part 1: เริ่มต้นใช้งาน Teable บน Docker #docker #postgres #nextjs Add Comment 1 min read PostgreSQL Everywhere and For Everything Adam Furmanek Adam Furmanek Adam Furmanek Follow for Metis Oct 30 PostgreSQL Everywhere and For Everything #sql #database #postgres 1 reaction Add Comment 2* 50x Faster Window Functions? PawSQL's Index Magic Revealed New Free SQL hosting providers ? 23 comments Dubai's Skyline Spectacle: Best Views and Vistas in the City New Implementing Graph Algorithms New Creating User-Centric and Responsive Interfaces New TIL: MySQL timestamp column can't go beyond '2038-01-19 03:14:07' 3 comments Optimizing Data Analysis with Binning in Apache Age New Optimizing Database Performance with Indexing in Apache AGE and PostgreSQL 2 comments Scaling Beyond Limits By Achieving High Performance with Horizontal Scaling in Apache Age New Revolutionizing Graph Database Management with Multimodal Capabilities New trending guides/resources Python CRUD Rest API using Flask, SQLAlchemy, Postgres, Docker, Docker Compose 🚀 pgai Vectorizer: Automate AI Embeddings With One SQL Command in PostgreSQL A brief example of an SQL serializable transaction Hierarchical data with PostgreSQL and Spring Data JPA Improving Performance of PostgreSQL queries How to Set Up a PostgreSQL Database on a VPS and Access It Remotely SQL-92 in TPC Benchmarks: Are They Still Relevant? How to integrate Drizzle ORM with Nest Js Building a RESTful API with Prisma, Express, TypeScript, and PostgreSQL Fullstack Serverless Starter with Hono.js, Cloudflare Workers, and Neon Postgres ERROR: index row size 3056 exceeds btree version 4 maximum 2704 for index Real-Time Chat Application Starter kit with Neon Postgres, NestJS, and WebSocket. Fixing a slow table join As Rails developers, why we are excited about PostgreSQL 17 Project Starter Kit: Neon Postgres Database + ExpressJs + TypeScript and TypeORM + CLI Tool Using Supabase SMS-Hook to Send Custom Authentication Messages in India Full Stack Auth Implementation using Next js and Neon DB for Neon Challenge Overview of PostgreSQL indexing A comprehensive comparison of PostgreSQL and MySQL Deploying Spring Boot Applications on Koyeb recently queried String Interpolation JavaScrip*nsor Neon * ",
    "url": "https://dev.to/t/postgres"
  },
  {
    "body": "* Prisma Follow Hide Next-generation Node.js and TypeScript ORM * Only concern the ORM Prisma ! about #prisma Prisma unlocks a new level of developer experience when working with databases thanks to its intuitive data model, automated migrations, type-safety & auto-completion. Website tag moderators 352 Posts Published Older #prisma posts 1 2 3 4 5 *. Building a Full-Stack CRUD App with Next.js 14, Prisma, and PostgreSQL Abdur Rakib Rony Abdur Rakib Rony Abdur Rakib Rony Follow Nov 9 Building a Full-Stack CRUD App with Next.js 14, Prisma, and PostgreSQL #postgres #nextjs #prisma * *! * Nov 7 Typing Prism*rm 21 * Harnessing the Power of PostgreSQL, Prisma, and Docker for Robust and Scalable Applications codenextgen codenextgen codenextgen Follow Oct 16 Harnessing the Power of PostgreSQL, Prisma, and Docker for Robust and Scalable Applications #prisma #docker #postgres Add Comment 3 min read Não use Prisma ORM antes de ler isso! Dev Doido Dev Doido Dev Doido Follow Oct 15 Não use Prisma ORM antes de ler isso! #prisma #javascript #node #braziliandevs * Prisma + Postgres awalias awalias awalias Follow Oct 30 Prisma + Postgres #prisma #postgres #postgressql 511 reactions 48 comments 3 min read How to use Prisma Postgres 🚀 Thomas Bnt ☕ Thomas Bnt ☕ Thomas Bnt ☕ Follow Oct 31 How to use Prisma Postgres 🚀 #prisma #javascript #database #postgres 19 * Cloudflare + Remix + PostgreSQL with Prisma Accelerate's Self Hosting SoraKumo SoraKumo SoraKumo Follow Oct 14 Cloudflare + Remix + PostgreSQL with Prisma Accelerate's Self Hosting #cloudflare #prisma #remix #postgres Add Comment 4 min read Error yang sering di jumpai ketika Setup NodeJS App pada cPanel. sumberweb sumberweb sumberweb Follow Sep 25 Error yang sering di jumpai ketika Setup NodeJS App pada cPanel. #webdev #prisma #javascript #cpanel Add Comment 2 min read Prisma error: Environmental variable not found: DATABASE_URL * Abdullah Bashir Follow Oct 28 Prisma error: Environmental variable not found: DATABASE_URL #javascript #database #prisma #webdev 11 *d Exploring Next.js 15: What’s New and Why It Matters Abdul Rehman Abdul Rehman Abdul Rehman Follow Oct 27 Exploring Next.js 15: What’s New and Why It Matters #nextjs #prisma #vite #webdev 4 *d i need help Jithendra Kolusu Jithendra Kolusu Jithendra Kolusu Follow Sep 22 i need help #react #nextjs #javascript #prisma Add Comment 1 min read Next.js Starter Kit: Build Fast & Secure Apps with Auth, Payments & More! Zubair Niazi Zubair Niazi Zubair Niazi Follow Oct 13 Next.js Starter Kit: Build Fast & Secure Apps with Auth, Payments & More! #nextjs #typescript #shadcnui #prisma * Como trabajar con Prisma ORM Oswaldo Oswaldo Oswaldo Follow Sep 19 Como trabajar con Prisma ORM #prisma *ting GitHub Authentication with NextAuth.js: A Step-by-Step Guide Hein Htoo Hein Htoo Hein Htoo Follow Sep 19 Integrating GitHub Authentication with NextAuth.js: A Step-by-Step Guide #authjs #nextjs #supabase #prisma Add Comment 2 min read We finally have a fullstack framework for MongoDB ringeringeraja ringeringeraja ringeringeraja Follow Sep 17 We finally have a fullstack framework for MongoDB #typescript #mongodb #prisma #mongoose Add Comment 2 min read Next.js and Prisma: Efficiently Creating Seed Data for Your App hayata-yamamoto hayata-yamamoto hayata-yamamoto Follow Oct 7 Next.js and Prisma: Efficiently Creating Seed Data for Your App #nextjs #prisma #testing #* Solving Common TypeScript Errors with bcryptjs and next Auth in Next.js Projects Seyed Ahmad Seyed Ahmad Seyed Ahmad Follow Oct 10 Solving Common TypeScript Errors with bcryptjs and next Auth in Next.js Projects #nextjs #bcrypt #typescript #prisma 1 reaction 1 comment 6 min read Nest-Connect API using NestJs, PassportJs, and Prisma Said MOUNAIM Said MOUNAIM Said MOUNAIM Follow Sep 6 Nest-Connect API using NestJs, PassportJs, and Prisma #nestjs #javascript #typescript #prisma 6 *d Authentication in NestJS with PassportJS and Prisma Said MOUNAIM Said MOUNAIM Said MOUNAIM Follow Sep 4 Authentication in NestJS with PassportJS and Prisma #nestjs #javascript #passportjs #prisma 6 *d Simple Next.js Magic Link JWT Authentication with Prisma, PostgreSQL, and Resend Diego Castillo Diego Castillo Diego Castillo Follow Oct 7 Simple Next.js Magic Link JWT Authentication with Prisma, PostgreSQL, and Resend #nextjs #prisma #authjs Add Comment 5 min read RentalYukk: Solusi Lengkap untuk Sewa Mobil dengan Next.js dan Supabase Vinn Bayo Vinn Bayo Vinn Bayo Follow Sep 16 RentalYukk: Solusi Lengkap untuk Sewa Mobil dengan Next.js dan Supabase #nextjs #typescript #prisma #webdev 1 comment 3 min read ORM and encapsulation demystifying Bruno Ciccarino λ Bruno Ciccarino λ Bruno Ciccarino λ Follow Oct 3 ORM and encapsulation demystifying #prisma #sql #hacktoberfest #oop * Use Atlas Search (MongoDB) in a Next.js app using Prisma ORM Omar Saúl Morales Ibarra Omar Saúl Morales Ibarra Omar Saúl Morales Ibarra Follow Sep 28 Use Atlas Search (MongoDB) in a Next.js app using Prisma ORM #javascript #nextjs #mongodb #prisma 5 *d Exploring Server-Side Rendering and Database Operations in Nuxt.js with Prisma ORM Elif Nur Turk Elif Nur Turk Elif Nur Turk Follow Sep 27 Exploring Server-Side Rendering and Database Operations in Nuxt.js with Prisma ORM #nuxt #prisma #typescript #javascript Add Comment 5 min read Prisma Recap: Everything You Need in 5 Minutes (cheat sheet) 🐳 keshav Sandhu keshav Sandhu keshav Sandhu Follow Sep 24 Prisma Recap: Everything You Need in 5 Minutes (cheat sheet) 🐳 #webdev #beginners #prisma #programming 1 reaction 2 comments 4 min read Integrating LinkedIn Authentication with NextAuth.js: A Step-by-Step Guide Hein Htoo Hein Htoo Hein Htoo Follow Sep 18 Integrating LinkedIn Authentication with NextAuth.js: A Step-by-Step Guide #authjs #nextjs #supabase #prisma 3 *d Implementing auth.js v5 with Prisma and Supabase in Next.js Hein Htoo Hein Htoo Hein Htoo Follow Sep 17 Implementing auth.js v5 with Prisma and Supabase in Next.js #authjs #nextjs #prisma #supabase Add Comment 4 min read FiveM x Prisma ORM Justin Martin Justin Martin Justin Martin Follow Sep 11 FiveM x Prisma ORM #prisma #gamedev #typescript * 3 Best Next.js ORM Ethan Lee Ethan Lee Ethan Lee Follow Sep 11 3 Best Next.js ORM #webdev #programming #nextjs #prisma 7 *d Prisma or TypeORM ? Vision Vision Vision Follow Aug 21 Prisma or TypeORM ? #javascript #prisma #typeorm #devops 1 comment 1 min read Schema + Data migration in Prisma (adding a new mandatory field) M*i M* Aug 7 Schema + Data migration in Prisma (adding a new mandatory field) #prisma #postgres #node #sql Add Comment 2 min read How to make Multi-tenant applications with NestJS and Prisma 🚀. Murilo Gervasio Murilo Gervasio Murilo Gervasio Follow Sep 9 How to make Multi-tenant applications with NestJS and Prisma 🚀. #node #prisma #nestjs #typescript 27 * API - Creating a Api in NodeJS with Prisma ORM & MongoDB Dhiman_aman Dhiman_aman Dhiman_aman Follow Sep 7 API - Creating a Api in NodeJS with Prisma ORM & MongoDB #devops #mongodb #node #prisma Add Comment 2 min read Must know concept for Backend Developers: Database transactions João Paulo João Paulo João Paulo Follow Sep 2 Must know concept for Backend Developers: Database transactions #typescript #database #backend #prisma 4 * Unlocking WhatsApp Secrets: Analyzing Chat Data with Next.js 14 Web App Rajesh Royal Rajesh Royal Rajesh Royal Follow Sep 1 Unlocking WhatsApp Secrets: Analyzing Chat Data with Next.js 14 Web App #javascript #nextjs #prisma #react 8 *d TypedSQL in Prisma: Type-Safe SQL Made Simple Fahim Ahammed Firoz Fahim Ahammed Firoz Fahim Ahammed Firoz Follow Aug 30 TypedSQL in Prisma: Type-Safe SQL Made Simple #typedsql #prisma #typesafe #sql 5 * PostgreSQL INTERVAL data type or ORM? M*i M* Aug 6 PostgreSQL INTERVAL data type or ORM? #postgres #rdbms #node #prisma * Embracing Type Safety and Database Pulling with Prisma Client Python viky viky viky Follow Aug 4 Embracing Type Safety and Database Pulling with Prisma Client Python #python #fastapi #prisma #postgres 1 comment 3 min read Prisma db push or pull stuck? * Abdullah Bashir Follow Aug 18 Prisma db push or pull stuck? #help #prisma #supabase #database 2 *d Connecting PrismaORM to the NestJS-mod application and checking its operation via REST ILs*tov Follow Aug 14 Connecting PrismaORM to the NestJS-mod application and checking its operation via REST #nestjs #prisma #nestjsmod #fullstack 1 reaction Add Comment 13 min read Automatically Generated GraphQL Middleware Service Niek de Wit Niek de Wit Niek de Wit Follow Aug 14 Automatically Generated GraphQL Middleware Service #graphql #apollo #typescript #prisma Add Comment 9 min read NextJS Starter Kit with NextAuth v4, Prisma, Typescript and Docker Vaibhav Arora Vaibhav Arora Vaibhav Arora Follow Aug 12 NextJS Starter Kit with NextAuth v4, Prisma, Typescript and Docker #nextjs #prisma #typescript #postgres 15 reactions 5 comments 1 min read Update to Prisma 5.18.0 in typegraphql-prisma-nestjs ILs*tov Follow Aug 8 Update to Prisma 5.18.0 in typegraphql-prisma-nestjs #prisma #nestjs #crud #typegraphql * Getting Started with Prisma React: Seamless Integration for Full-Stack Development Sarthak Niranjan Sarthak Niranjan Sarthak Niranjan Follow for CodeParrot Aug 7 Getting Started with Prisma React: Seamless Integration for Full-Stack Development #webdev #react #prisma 5 * Authenticated tests with Playwright, Prisma, Postgres, and NextAuth Amanda Amanda Amanda Follow Aug 6 Authenticated tests with Playwright, Prisma, Postgres, and NextAuth #playwright #nextjs #prisma #webdev 6 * Migration from NoSql to Sql , MongoDB to PostgreSql with PRISMA. Christian Birego Christian Birego Christian Birego Follow Jul 2 Migration from NoSql to Sql , MongoDB to PostgreSql with PRISMA. #javascript #prisma #mongodb #postgres 6 *d Stop drawing ERD, but just auto-generate by `prisma-markdown` Jeongho Nam Jeongho Nam Jeongho Nam Follow Jul 31 Stop drawing ERD, but just auto-generate by `prisma-markdown` #opensource #prisma #database #architecture 26 * Prisma migration stuck? * Abdullah Bashir Follow Jul 30 Prisma migration stuck? #help #prisma #database #supabase 2 * Prisma + Supabase Error P1001 * Abdullah Bashir Follow Jul 30 Prisma + Supabase Error P1001 #help #supabase #webdev #prisma 2 *d Error: P1003 : Prisma Migrate could not create the shadow database. Sarwar Hossain Sarwar Hossain Sarwar Hossain Follow Jul 30 Error: P1003 : Prisma Migrate could not create the shadow database. #prisma #postgres #p1003 #migrate Add Comment 1 min read Remix with PostgreSQL and Prisma from Local Environment Setup to Deploy to Fly.io Yuichi Nabeshima Yuichi Nabeshima Yuichi Nabeshima Follow Jul 27 Remix with PostgreSQL and Prisma from Local Environment Setup to Deploy to Fly.io #remix #postgres #prisma #fly * Extending Prisma ORM with Custom Middleware: Logging, Validation, and Security emal isuranga emal isuranga emal isuranga Follow Jul 13 Extending Prisma ORM with Custom Middleware: Logging, Validation, and Security #prisma #middleware #prismaorm #node Add Comment 6 min read Rendering Prisma Queries With React Table: The Low-Code Way * Jul 21 Rendering Prisma Queries With React Table: The Low-Code Way #prisma #react #api #frontend 16 * Understanding One-to-One Relations with Prisma ORM Leandro Martins Leandro Martins Leandro Martins Follow Jun 15 Understanding One-to-One Relations with Prisma ORM #prisma #javascriptlibraries #softwared* Stripe Subscription Payments With Nest.js and Prisma — Part 1 Ferhat Demir Ferhat Demir Ferhat Demir Follow Jul 19 Stripe Subscription Payments With Nest.js and Prisma — Part 1 #stripe #node #prisma #webdev * Docker Template for PERN Stack Project Byakkuya (ahmed zbaa) Byakkuya (ahmed zbaa) Byakkuya (ahmed zbaa) Follow Jul 17 Docker Template for PERN Stack Project #docker #nextjs #postgres #prisma 4 *d Entendendo o Fluxo de Trabalho do Prisma Utilizando Migrations Leandro Martins Leandro Martins Leandro Martins Follow Jul 17 Entendendo o Fluxo de Trabalho do Prisma Utilizando Migrations #prisma #* * Building Next.js Fullstack Blog with TypeScript, Shadcn/ui, MDX, Prisma and Vercel Postgres. Coding Jitsu Coding Jitsu Coding Jitsu Follow Jul 16 Building Next.js Fullstack Blog with TypeScript, Shadcn/ui, MDX, Prisma and Vercel Postgres. #webdev #nextjs #prisma #beginners * Discord bot dashboard with OAuth2 (Nextjs) clxrity clxrity clxrity Follow Jul 11 Discord bot dashboard with OAuth2 (Nextjs) #nextjs #prisma #oauth #discord 8 * Master Pagination, Search and Language Filtering in NextJS Server Actions | Code Snippet Sharing App Ghazi Khan Ghazi Khan Ghazi Khan Follow Jul 8 Master Pagination, Search and Language Filtering in NextJS Server Actions | Code Snippet Sharing App #webdev #nextjs #beginners #prisma 2 reactions Add C*s Give me a quick 101 in the Graphcool ecosystem (like Prisma) New t* make Multi-tenant applications with NestJS and Prisma 🚀. Unlocking WhatsApp Secrets: Analyzing Chat Data with Next.js 14 Web App Prisma + Postgres *! Solving Common TypeScript Errors with bcryptjs and next Auth in Next.js Projects Use Atlas Search (MongoDB) in a Next.js app using Prisma ORM How to use Prisma Postgres 🚀 Integrating LinkedIn Authentication with NextAuth.js: A Step-by-Step Guide Prisma error: Environmental variable not found: DATABASE_URL Building a Full-Stack CRUD App with Next.js 14, Prisma, and PostgreSQL API - Creating a Api in NodeJS with Prisma ORM & MongoDB Nest-Connect API using NestJs, PassportJs, and Prisma Authentication in NestJS with PassportJS and Prisma Exploring Next.js 15: What’s New and Why It Matters Must know concept for Backend Developers: Database transaction*nsor Neon * ",
    "url": "https://dev.to/t/prisma"
  },
  {
    "body": "* Productivity Follow Hide Productivity includes tips on how to use tools and software, process optimization, useful references, experience, and mindstate optimization. * Please check if your article contains information or discussion bases about productivity. From posts with the tag #productivity we expect tips on how to use tools and software, process optimization, useful references, experience, and mindstate optimization. Productivity is a very broad term with many aspects and topics. From the color design of the office to personal rituals, anything can contribute to increase / optimize your own productivity or that of a team. about #productivity Does my article fit the tag? It depends! Productivity is a very broad term with many aspects and topics. From the color design of the office to personal rituals, anything can contribute to increase / optimize your own productivity or that of a team. tag moderators 20949 Posts Published Older #productivity posts 1 2 3 4 5 6 7 8 9 …75 …349 *. 🌟 Extensions Dump: UnitFlux and CodeMorph! Alvin James Bellero Alvin James Bellero Alvin James Bellero Follow Nov 10 🌟 Extensions Dump: UnitFlux and CodeMorph! #vscode #extensions #productivity #developers 5 *d Cara Menggunakan AI untuk Meningkatkan Produktivitas dan Efisiensi Kerja * 10 Cara Menggunakan AI untuk Meningkatkan Produktivitas dan Efisiensi Kerja #openai #workplace #productivity #powerplatform 2 * 🔥 * 🚀 * Nov 9 🔥 * 🚀 #discuss #webdev #productivity #beginners 92 reactions 8 comments 70 min read Tough Task? Discover How Google’s AI Can Help You Understand Your Algorithm and Codes Faster. * Chiamaka Ebolue Follow Nov 10 Tough Task? Discover How Google’s AI Can Help You Understand Your Algorithm and Codes Faster. #google #beginners #productivity #coding * 🌐 Building a Custom Framework in Java: From Dependency Injection to AOP Saurabh Kurve Saurabh Kurve Saurabh Kurve Follow Nov 10 🌐 Building a Custom Framework in Java: From Dependency Injection to AOP #java #* 11 *d Threat Modeling for Non-Security Experts Nikola Popov Nikola Popov Nikola Popov Follow Nov 9 Threat Modeling for Non-Security Experts #security #devsecops #threatmanagement #productivity Add Comment 5 min read Code Review is Not Being a Human Linter Agbo, Daniel Onuoha Agbo, Daniel Onuoha Agbo, Daniel Onuoha Follow Nov 9 Code Review is Not Being a Human Linter #productivity #programming #career Add Comment 5 min read La Importancia de Aprender a Utilizar la Inteligencia Artificial Danny González Danny González Danny González Follow Nov 8 La Importancia de Aprender a Utilizar la Inteligencia Artificial #ai #productivity #inteligenciaartificial Add Comment 2 min read DevEnvironmentOrchestrator: Revolutionizing Development Environment Management with AI * Abiola Oludotun Follow Nov 8 DevEnvironmentOrchestrator: Revolutionizing Development Environment Management with AI #devops #ai #productivity #developer Add Comment 3 min read Blockchain Scalability: Making Room for Everyone on the Blockchain Highway Alex Roor Alex Roor Alex Roor Follow Nov 8 Blockchain Scalability: Making Room for Everyone on the Blockchain Highway #blockchain #webdev #productivity #cybersecurity Add Comment 2 min read Security by Design: Building Trust in Blockchain, One Block at a Time Dmytro Klimenko Dmytro Klimenko Dmytro Klimenko Follow Nov 8 Security by Design: Building Trust in Blockchain, One Block at a Time #security #blockchain #webdev #* Deploying PostgreSQL, MySQL, and MongoDB on Kubernetes: A Step-by-Step Guide Dmi*off Follow Nov 9 Deploying PostgreSQL, MySQL, and MongoDB on Kubernetes: A Step-by-Step Guide #kubernetes #devops #database #* 4 min read Simplifying Web Development: Rediscovering Ease with HTMX Diogo Eichert Diogo Eichert Diogo Eichert Follow Nov 8 Simplifying Web Development: Rediscovering Ease with HTMX #webdev #productivity #html #frontend Add Comment 1 min read How We Write Helm Charts 150% Faster in Our Organization Ori Granot Ori Granot Ori Granot Follow Nov 8 How We Write Helm Charts 150% Faster in Our Organization #devops #kubernetes #opensource #* Figma to React Native: Convert designs to clean code in a click Vishwas Vishwas Vishwas Follow for Builder.io Nov 8 Figma to React Native: Convert designs to clean code in a click #reactnative #figma #webdev #* 5 min read The Benefits of Omni-Channel Retailing for Supply Chains James Haddin James Haddin James Haddin Follow Nov 8 The Benefits of Omni-Channel Retailing for Supply Chains #productivity Add Comment 5 min read \"* Angular and React.js, and which is best to use for building a website?\" 08-ayush 08-ayush 08-ayush Follow Nov 8 \"* Angular and React.js, and which is best to use for building a website?\" #angular #react #productivity #webdev *ad My CS50 Final Project: iPlus Code – A Tech Blogging Platform vivekvohra vivekvohra vivekvohra Follow Nov 9 My CS50 Final Project: iPlus Code – A Tech Blogging Platform #webdev #cs50 #programming #productivity 4 *d #92 — Intersection, Union, And Difference in the Case of Simple Members — Multiple Sets Judith-Excel-Sharing Judith-Excel-Sharing Judith-Excel-Sharing Follow Nov 8 #92 — Intersection, Union, And Difference in the Case of Simple Members — Multiple Sets #* #productivity 6 * Getting Started with AWS Landing Zone: Tips for Terraform Setup Wojciech Kaczmarczyk Wojciech Kaczmarczyk Wojciech Kaczmarczyk Follow Nov 7 Getting Started with AWS Landing Zone: Tips for Terraform Setup #aws #terraform #* How to install Ferdium on Linux Kelvin Hey Kelvin Hey Kelvin Hey Follow Nov 7 How to install Ferdium on Linux #ferdium #linux #browser #* 1 min read Latest GitHub FAQ Collections by 0x3d.site 0x3d Site 0x3d Site 0x3d Site Follow Nov 8 Latest GitHub FAQ Collections by 0x3d.site #resources #github #opensource #productivity 13 *d Aplicación para Lista de Tareas: Organiza y Simplifica tu Día NextMob IT Solutions NextMob IT Solutions NextMob IT Solutions Follow Nov 7 Aplicación para Lista de Tareas: Organiza y Simplifica tu Día #* #mobile Add Comment 2 min read Writing Commit Messages using AI from CLI (no API key) jnsahaj jnsahaj jnsahaj Follow Nov 7 Writing Commit Messages using AI from CLI (no API key) #ai #git #productivity #* Choosing the Right Tech Stack for Your Project Vaishnavi Sonawane Vaishnavi * 7 Choosing the Right Tech Stack for Your Project #beginners #programming #opensource #productivity 1 reaction * the Significance of Semantic HTML in SEO and Accessibility Kendrick Osia Kendrick Osia Kendrick Osia Follow Nov 7 Understanding the Significance of Semantic HTML in SEO and Accessibility #webdev #html #productivity #* Boost Your Website Speed: HTML Tags That Could Be Slowing You Down and How to Optimize Them mahasun mahasun mahasun Follow Nov 6 Boost Your Website Speed: HTML Tags That Could Be Slowing You Down and How to Optimize Them #* #frontend * a Social Impact Project with React, Node.js, and MySQL: My Experience and Lessons Learned Vaishnavi Sonawane Vaishnavi * 6 Building a Social Impact Project with React, Node.js, and MySQL: My Experience and Lessons Learned #programming #react #productivity #* 3 * * Add Comment 1 min read The 2024 DORA Report: State of DevOps Breakdown Summary Shivam Chhuneja Shivam Chhuneja Shivam Chhuneja Follow for Middleware Nov 6 The 2024 DORA Report: State of DevOps Breakdown Summary #devops #productivity #programming #softwareengineering 20 *d The ultimate design tool - Paper (and markers) Jakub Bobkowski Jakub Bobkowski Jakub Bobkowski Follow Nov 5 The ultimate design tool - Paper (and markers) #design #ui #webdev #* 2 min read * Antoine Cusset Antoine Cusset Antoine Cusset Follow Nov 6 * #testing #typescript #productivity #react Add Comment 7 min read 7 Secrets to Optimize Your Web Performance Izabella Albuquerque Izabella Albuquerque Izabella Albuquerque Follow Nov 6 7 Secrets to Optimize Your Web Performance #* #* 2 min read Brainstorming with GenAI Ryan Bishop Ryan Bishop Ryan Bishop Follow Nov 5 Brainstorming with GenAI #ai #webdev #productivity Add Comment 7 min read Top 10 Lessons Every Freelancer Should Know Before Starting an Agency Sanjay M. Sanjay M. Sanjay M. Follow Nov 5 Top 10 Lessons Every Freelancer Should Know Before Starting an Agency #beginners #productivity #career Add Comment 5 min read Remote Work: A Blend of Challenges and Opportunities * Shinetech Software Follow Nov 5 Remote Work: A Blend of Challenges and Opportunities #career #tutorial #productivity #beginners Add Comment 5 min read Why is the demand for software developers continuously increasing in 2024？ * Shinetech Software Follow Nov 5 Why is the demand for software developers continuously increasing in 2024？ #career #tutorial #beginners #productivity Add Comment 4 min read How to Focus on the Right Content when Learning AI/ML Hilal Eylul Hilal Eylul Hilal Eylul Follow Nov 9 How to Focus on the Right Content when Learning AI/ML #machinelearning #ai #deeplearning #productivity Add Comment 7 min read Unleash Ser* * RESTART Series: Day 1 – Laying the Foundations Rachit Avasthi Rachit Avasthi Rachit Avasthi Follow Nov 4 RESTART Series: Day 1 – Laying the Foundation* #certification Add Comment 2 min read MySQL Terminal: Add and delete column Antonio Silva Antonio Silva Antonio Silva Follow Nov 4 MySQL Terminal: Add and delete column #mysql #productivity #tutorial #* What are your goals for week 45 of 2024? Chris Jarvis Chris Jarvis Chris Jarvis Follow Nov 4 What are your goals for week 45 of 2024? #discuss #motivation #* Regime.sh – A minimalist approach to daily scheduling maksimmuravev maksimmuravev maksimmuravev Follow Nov 4 Regime.sh – A minimalist approach to daily scheduling #productivity #calendar Add Comment 1 min read From Vanar Sena to Low Code Champions: Lessons from the Ramayana for Digital Transformation Bala Madhusoodhanan Bala Madhusoodhanan Bala Madhusoodhanan Follow Nov 4 From Vanar Sena to Low Code Champions: Lessons from the Ramayana for Digital Transformation #powerplatform #powerfuldevs #lowcode #productivity 5 * Discovery: Screenity - A powerful open-source screen capture tool Remi Remi Remi Follow for Pixium Digital Nov 4 Discovery: Screenity - A powerful open-source screen capture tool #webdev #productivity #software #* 🔒Zero Trust: Everything You Need to Know About the Cybersecurity Framework Bibek Thapa Bibek Thapa Bibek Thapa Follow Nov 8 🔒Zero Trust: Everything You Need to Know About the Cybersecurity Framework #cybersecurity #softwaredevelopment #programming #productivity 5 *d Our Startup Loves These AI Tools (we recorded a 14 min podcast ep. about why). Ivanha Paz Ivanha Paz Ivanha Paz Follow for Jam.dev Nov 8 Our Startup Loves These AI Tools (we recorded a 14 min podcast ep. about why). #tooling #ai #productivity #startup * 🚗 How Uber Handles Trillions of Transactions 💥 Harold Defree Harold Defree Harold Defree Follow Nov 8 🚗 How Uber Handles Trillions of Transactions 💥 #beginners #productivity #webdev #devops * How to Add Competitiveness to Your Remote Development Team * Shinetech Software Follow Nov 5 How to Add Competitiveness to Your Remote Development Team #career #learning #tutorial #* Top 10 API Testing Tools for Testers in 2024 Wanda Wanda Wanda Follow Nov 8 Top 10 API Testing Tools for Testers in 2024 #testing #tooling #productivity #qa 8 * AI Revolution: Shaping Our Futur* * 8 AI Revolution: Shaping Our Future #ai #programming #productivity #learning * How to Vet and Hire Engineers as a non-Technical Founder * JetThoughts Dev Follow for JetThoughts Nov 7 How to Vet and Hire Engineers as a non-Technical Founder #startup #developers #hiring #productivity 6 * Dev3loper on Co-Intelligence Justin L Beall Justin L Beall Justin L Beall Follow Nov 2 Dev3loper on Co-Intelligence #ai #productivity #performance #learning Add Comment 18 min read From Idea to Business Plan in Less Than an Hour with APEX Justin L Beall Justin L Beall Justin L Beall Follow Nov 2 From Idea to Business Plan in Less Than an Hour with APEX #softwaredevelopment #ai #agile #productivity Add Comment 9 min read Ruby's Enumerable Module Alexa Anderson Alexa Anderson Alexa Anderson Follow Nov 2 Ruby's Enumerable Module #ruby #webdev #productivity Add Comment 5 min read From Bricks& Beams to Bits&Bytes Meta__Architect Meta__Architect Meta__Architect Follow Nov 2 From Bricks& Beams to Bits&Bytes #xr #vr #mixedreality #* Art of saying no! Ahammad Sabir Ahammad Sabir Ahammad Sabir Follow Nov 2 Art of saying no! #* A Powerful Bookmark search engine Raj Nandan Sharma Raj Nandan Sharma Raj Nandan Sharma Follow Nov 3 A Powerful Bookmark search engine #go #svelte #saas #* 1 min read 📈✨9 Free (or access option) computer science courses for building your skills! Yassine Sallami Yassine Sallami Yassine Sallami Follow Nov 1 📈✨9 Free (or access option) computer science courses for building your skills! #programming #learning #productivity #* The Legend of the 10x Developer: Separating Myth from Reality High Octane High Octane High Octane Follow Nov 5 The Legend of the 10x Developer: Separating Myth from Reality #webdev #* * loading... #discuss 🔥 * 🚀 8 * How Senior Software Engineers Document Their Project 16 Open Source Alternatives to Replace Popular SaaS Software & Apps 👨‍💻🔥 How to write clean code 5 Best Note-Taking Apps 📝 9 Tools Everyone Should Try🧙‍♂️🫵 How I Cloned Myself with LLMs to Work 24/7 – Even While I Sleep Best Practices for Code Reviews That Foster Team Collaboration On Learning Vim ChartDB: From Zero to 1.5K GitHub Stars in 3 Days - Here’s How 🚀⭐️ ✨ Cursor AI Editor — Is It Actually Useful? 7 BEST VS Code Extensions for Faster Development — 2024 Edition 🚀 * 🧑‍💻🔧 Build a homelab with these apps and develop ANYTHING! 🤩 ⚡ 🚀 Top 10 Trending GitHub Repositories, October 2024 🔥 How to Do Software Testing 10x Faster A step-by-step guide to splitting commits using Git rebase Effortless Error Handling in JavaScript: How the Safe Assignment Operator Simplifies Your Code How to Build Your Online Presence as a Developer How to Stop Procrastination as a Work-from-Home Programmer Fast, Predictable & Self-hosted AI Code Completion recently queried Best Keyboard for Programming VS Code Shortcuts Best VSCode Extensions cURL vs Postman Pascal Case Ngrok Alternative Vscode Vim Textcontent vs Innerhtml Windows Keyboard on Mac Working from Home Zsh Autosuggestions Gray Rgb Sublime Text vs Vscode Peppermint Linux OS Programming Discord Zsh vs Bash Download Documentation Change Python Version Mac console.clear in Javascript Coding Note*nsor Neon * ",
    "url": "https://dev.to/t/productivity"
  },
  {
    "body": "* Programming Follow Hide The magic behind computers. 💻 🪄 Create Post tag moderators 52413 Posts Published Older #programming posts 1 2 3 4 5 6 7 8 9 …75 …873 *. *”? 🤔 * Nov 10 *”? 🤔 #discuss #* 10 *d * Vaishnavi Sonawane Vaishnavi * 10 * #react #webdev #programming #opensource * Strings: Understanding Mutability and Immutability Arshi Saxena Arshi Saxena Arshi Saxena Follow Nov 10 Strings: Understanding Mutability and Immutability #java #programming #interview #beginners 7 * Tech Made Simple: The Key to Understanding What Really Matters. * Chiamaka Ebolue Follow Nov 10 Tech Made Simple: The Key to Understanding What Really Matters. #beginners #tutorial #womenintech #p* 6 min read 🌐 Building a Custom Framework in Java: From Dependency Injection to AOP Saurabh Kurve Saurabh Kurve Saurabh Kurve Follow Nov 10 🌐 Building a Custom Framework in Java: From Dependency Injection to AOP #java #* 11 *d * Unleash ServBay’s Powe* 5 *d Top 20 System Design Terminologies You Must Know Abdulla Ansari Abdulla Ansari Abdulla Ansari Follow Nov 10 Top 20 System Design Terminologies You Must Know #systemdesign #systems #coding #* Day 8: User Input in Python | 100 Day Python Abdulla Ansari Abdulla Ansari Abdulla Ansari Follow Nov 10 Day 8: User Input in Python | 100 Day Python #100daysofcode #programming #beginners #python Add Comment 4 min read * Ashutosh Kumar Ashutosh Kumar Ashutosh Kumar Follow Nov 10 * #* #programming * Closures - Javascript Manoj Manoj Manoj Follow Nov 10 Closures - Javascript #* #learning 1 comment 2 min read 3133. Minimum Array End MD *QUE Follow Nov 9 3133. Minimum Array End #php #algorithms #leetcode #* Feedback on My Web Developer Portfolio – I'd Love Your Input! Rémy Canal Rémy Canal Rémy Canal Follow Nov 9 Feedback on My Web Developer Portfolio – I'd Love Your Input! #webdev #portfolio #design #* * Devops Den Devops Den Devops De* 3 min read New here * Ayush Kumar Vishwakarma Follow Nov 9 New here #webdev #* Add Comment 1 min read * 🚀 Trish Trish Trish Follow Nov 9 * 🚀 #rust #tutorial #programming #beginners 2 * * * Nov 9 * #webdev #react #javascript #* How Coding Impacts Our Lives – Transforming the Present and Shaping the Futur* * 9 How Coding Impacts Our Lives – Transforming the Present and Shaping the Future #ai #coding #programming #machinelearning * 💡 *! 💡 * Yanaiara Oliveira Follow Nov 9 💡 *! 💡 #javascript #frontend #webdev #* Unlock Your Coding Potential: IIT Madras' Free Programming Course GetVM GetVM GetVM Follow Nov 9 Unlock Your Coding Potential: IIT Madras' Free Programming Course #getvm #universitycourses #* 2 min read The effective Pull Request checklist Mario Ruci Mario Ruci Mario Ruci Follow Nov 9 The effective Pull Request checklist #programming #git #softwareengineering #software* Bind variables in Oracle SQL * Nov 9 Bind variables in Oracle SQL #oracle #webdev #* 2 min read Quantum Computing and its real world applications Atharv Gyan Atharv Gyan Atharv Gyan Follow Nov 9 Quantum Computing and its real world applications #atharvgyan #programming #ai #quantumcomputing * a JavaScript Object Using Python Techelopment Techelopment Techelopment Follow Nov 9 Creating a JavaScript Object Using Python #python #jav*ions Add Comment 2 min read * * Emma Richardson Follow Nov 9 * #* #* Java’s Journey: From Coffee to Code — Exploring 2024’s Most Resilient Language Lahrach Omar Lahrach Omar Lahrach Omar Follow Nov 9 Java’s Journey: From Coffee to Code — Exploring 2024’s Most Resilient Language #java #* 4 min read * Jefferson Jefferson Jefferso* 11 min read Code Review is Not Being a Human Linter Agbo, Daniel Onuoha Agbo, Daniel Onuoha Agbo, Daniel Onuoha Follow Nov 9 Code Review is Not Being a Human Linter #productivity #programming #career Add Comment 5 min read Automate Database Backup with Bash, Python, and PowerShell Oliver Bennet Oliver Bennet Oliver Bennet Follow for GraphPe Nov 9 Automate Database Backup with Bash, Python, and PowerShell #bash #linux #programming #tutorial * Test-Driven Development (TDD) in Front-end. Jayanta Deb Jayanta Deb Jayanta Deb Follow Nov 8 Test-Driven Development (TDD) in Front-end. #webdev #javascript #unittest #* * * 9 * #* #* * Grenish rai Grenish rai Grenish rai Follow Nov 9 * #* #tutorial 8 * Tic-Tac-Toe Game using * * 9 Tic-Tac-Toe Game using * #webdev #javascript #* Comment 3 min read 🚀 * MAHMUDUL HASAN NABIL MAHMUDUL HASAN NABIL MAHMUDUL HASAN NABIL Follow Nov 8 🚀 * #discuss #webdev #* 3 min read Object in Python Luqman Adelani Luqman Adelani Luqman Adelani Follow Nov 8 Object in Python #* useContext: React Hooks * Nov 8 useContext: React Hooks #react #webdev #javascript #* What enables a programming language to run a program in parallel? Adib-96 Adib-96 Adib-96 Follow Nov 8 What enables a programming language to run a program in parallel? #programming #coding #100daysofcode Add Comment 2 min read Stealthy Guardian Nmap Quest: Mastering Cybersecurity Reconnaissance Labby Labby Labby Follow for LabEx Nov 8 Stealthy Guardian Nmap Quest: Mastering Cybersecurity Reconnaissance #labex #cybersecurity #coding #* Working with Unary Operators Mercy Mercy Mercy Follow Nov 9 Working with Unary Operators #webdev #java #* Comment 4 min read JavaScript Journey Complete: What's Next? Imran Khan Imran Khan Imran Khan Follow Nov 9 JavaScript Journey Complete: What's Next? #javascript #webdev #learning #programming * TypeScript Mastery: Essential Learning Resources for Modern Web Developers GetVM GetVM GetVM Follow Nov 8 TypeScript Mastery: Essential Learning Resources for Modern Web Developers #getvm #typescript #programming #tutorials * a Responsive Four Card Feature Section Brian Meinert Brian Meinert Brian Meinert Follow Nov 8 Building a Responsive Four Card Feature Section #webdev #* Add Comment 5 min read NeoHtop: A Cross-Platform Activity Monitor Written in Svelte and Tauri🚀 Nasser El Idrissi Nasser El Idrissi Nasser El Idrissi Follow Nov 9 NeoHtop: A Cross-Platform Activity Monitor Written in Svelte and Tauri🚀 #* * Learning to Code? Avoid Overusing AI Tools Rizwanul Islam Rudra Rizwanul Islam Rudra Rizwanul Islam Rudra Follow Nov 8 Learning to Code? Avoid Overusing AI Tools #programming #ai #* 3 min read The I* Margaret Wanjiru Margaret Wanjiru Margaret Wanjiru Follow Nov 8 The I* #webdev #programming #* 9 min read 1829. Maximum XOR for Each Query MD *QUE Follow Nov 8 1829. Maximum XOR for Each Query #php #leetc* 4 min read CS50: The Ultimate Gateway to Computer Science for Aspiring Programmers GetVM GetVM GetVM Follow Nov 8 CS50: The Ultimate Gateway to Computer Science for Aspiring Programmers #getvm #videocourses #* 2 min read *: CSSOM * ⛩️ Cristiano Gonçalves ⛩️ Follow Nov 8 *: CSSOM #* #frontend Add Comment 5 min read Is AI-Generated Code Secure? Tutort Academy Tutort Academy Tutort Academy Follow Nov 8 Is AI-Generated Code Secure? #programming #ai Add Comment 4 min read 🚀What is Race Hazards and how to avoid it in C#🚀 Dot Net Tips Dot Net Tips Dot Net Tips Follow Nov 8 🚀What is Race Hazards and how to avoid it in C#🚀 #racehazard #programming #csharp Add Comment 2 min read PHP opcode – I* without changing your code Valerio Valerio Valerio Follow for Inspector.dev Nov 8 PHP opcode – I* without changing your code #php #webdev #tutorial #p* 6 min read Boost Your Java Back-End Performance: Essential Optimization Tips! Tamer Ardal Tamer Ardal Tamer Ardal Follow Nov 9 Boost Your Java Back-End Performance: Essential Optimization Tips! #java #webdev #programming #performance Add Comment 6 min read ChatGPT for Debugging Qamar Khan Qamar Khan Qamar Khan Follow Nov 8 ChatGPT for Debugging #* #ai Add Comment 2 min read Optimizing React Re-Renders: Best Practices for Performance Nenepo Nenepo Nenepo Follow Nov 8 Optimizing React Re-Renders: Best Practices for Performance #webdev #programming #react #performance Add Comment 2 min read My CS50 Final Project: iPlus Code – A Tech Blogging Platform vivekvohra vivekvohra vivekvohra Follow Nov 9 My CS50 Final Project: iPlus Code – A Tech Blogging Platform #webdev #cs50 #programming #productivity 4 *d js-framework-benchmark - variations of the ideal solution to the mathematical problem of speed or why it is standard antonmak1 antonmak1 antonmak1 Follow Nov 7 js-framework-benchmark - variations of the ideal solution to the mathematical problem of speed or why it is standard #* #coding Add Comment 4 min read Solving a DojoCode challenge in freefall Sebastian Sebastian Sebastian Follow Nov 7 Solving a DojoCode challenge in freefall #skydive #learning #programming #cloud Add Comment 1 min read Why Are Type Guards Necessary? Exploring Different Types and Their Use Cases Naym Hossen Naym Hossen Naym Hossen Follow Nov 8 Why Are Type Guards Necessary? Exploring Different Types and Their Use Case*ipt #programming * #92 — Intersection, Union, And Difference in the Case of Simple Members — Multiple Sets Judith-Excel-Sharing Judith-Excel-Sharing Judith-Excel-Sharing Follow Nov 8 #92 — Intersection, Union, And Difference in the Case of Simple Members — Multiple Sets #* #productivity 6 * Formulários com React Hook Form + Zod 👨‍💻 Lucas Silva 👨‍💻 Lucas Silva 👨‍💻 Lucas Silva Follow Nov 7 Formulários com React Hook Form + Zod #react #webdev #javascript #* Top 10 IT Skills U.S. Companies Seek in Latin America TeamStation AI TeamStation AI TeamStation AI Follow Nov 7 Top 10 IT Skills U.S. Companies Seek in Latin America #webdev #programming #ai #career Add Comment 4 min read * follow us: */ 01:13 * 10 (27 mins ago) * follow us: */ #webdev #javascript #* Comment 1 min read Understanding Technical Debt: An Ally and a Challenge in Software Development Agustín Rodríguez Agustín Rodríguez Agustín Rodríguez *derstanding Technical Debt: An Ally and a Challenge in Software Development #webdev #technicaldebt #programming #development Add Comment 5 min read loading... #discuss *”? 🤔 New 🚀 * New Go for DevOps: From scratch to Hero Guide 🚀 2 * 8 System Design Courses to learn Distributed System Architecture (2025) Stop Using Try-Catch: A Better Way to Handle Errors in JavaScript Top 10 Modern JavaScript Patterns for 2025 Scripting in DevOps: A Complete Guide from Beginner to Advanced No more Try/Catch: a better way to handle errors in TypeScript 10 Scalability Lessons from Zoom's Software Architecture Python for DevOps: A Comprehensive Guide from Beginner to Advanced Is System Design Interview Book by Alex Xu Worth Reading? Review Using Git as Your Personal To-Do List How does Apache Kafka work? Why is Kafka So fast? Why Go is Popular Right Now and Why I Started Learning Go as a Node.js Developer How to write clean code Design Patterns demystified with examples From Junior to Senior Developer: Essential Skills You Need in 2024 5 Open-Source Projects That Will Transform ⚡️ Your AI Workflow 💻 🚨💥 Top 5 Trending Open-source LLM Tools & Frameworks You Must Know About ✨🚀 Angular 19 - 5 Game-Changing Features You Need to Know How to become Great Software Developer A Comprehensive Introduction to CI/CD Pipelines 9 open-source AI coding tools that every developer should know 🎯 recently queried Production Environment Spotify Shuffle Sucks Is CSS a Programming Language Learn Linux Programming Algorithms Java Interview Questions for Experienced Html Highlight Text Golang Gin Xrange Python Regex Cheatsheet JavaScript Sort Array Should I Learn Java or Python Python Sum of List Learn Python for Free Free Apis Dynamic Ssh Repository Pattern Programmer Meme Linked List JavaScript Google Foobar * * ",
    "url": "https://dev.to/t/programming"
  },
  {
    "body": "* # rabbitmq Follow Hide Create Post 161 Posts Published Older #rabbitmq posts 1 2 *. Understanding RabbitMQ Virtual Hosts: A Key to Effective Messaging Systems * Understanding RabbitMQ Virtual Hosts: A Key to Effective Messaging Systems #eventdriven #rabbitmq #java #springboot Add Comment 2 min read 🚀 Exploring RabbitMQ Channels: Unlocking Efficient Messaging in Your Microservices Architecture 🐇 * 🚀 Exploring RabbitMQ Channels: Unlocking Efficient Messaging in Your Microservices Architecture 🐇 #java #springboot #rabbitmq #eventdriven Add Comment 2 min read 🌟 Unlocking the Power of RabbitMQ Connections 🌟 * 🌟 Unlocking the Power of RabbitMQ Connections 🌟 #eventdriven #rabbitmq #java #springboot * Message Rate in RabbitMQ * Understanding Message Rate in RabbitMQ #rabbitmq #eventdriven #java #springboot Add Comment 2 min read 🚀 Exploring RabbitMQ Queue Types: Routing Key, Dead Letter, and Parking Lot 🚀 * 🚀 Exploring RabbitMQ Queue Types: Routing Key, Dead Letter, and Parking Lot 🚀 #eventdriven #java #springboot #rabbitmq Add Comment 2 min read RabbitMQ: Powering Scalable Messaging Systems for Modern Applications * RabbitMQ: Powering Scalable Messaging Systems for Modern Applications #rabbitmq #eventdriven #java #springboot Add Comment 2 min read 🌟 Unlocking the Power of RabbitMQ Queues 🌟 * 🌟 Unlocking the Power of RabbitMQ Queues 🌟 #eventdriven #rabbitmq #springboot #microservices Add Comment 2 min read Message Brokers: The Unsung Heroes of Modern Distributed Systems * Message Brokers: The Unsung Heroes of Modern Distributed Systems #rabbitmq #sqs #springboot #eventdriven Add Comment 2 min read 📢 Unlocking the Power of RabbitMQ: Dead Letter Exchanges Explained 🚀 * 📢 Unlocking the Power of RabbitMQ: Dead Letter Exchanges Explained 🚀 #eventdriven #rabbitmq #java #springboot Add Comment 2 min read R* Aris Kurniawa* Follow Oct 29 R* #rabbitmq #node #javascript #erlang Add Comment 6 min read Spring Boot and RabbitMQ: Messaging with AMQP Igo*lli Follow Oct 31 Spring Boot and RabbitMQ: Messaging with AMQP #spring #rabbitmq #amqp #* 4 min read How To Deploy RabbitMQ On Public IP? Amr Saafan Amr Saafan Amr Saafan Follow for Nile Bits Aug 3 How To Deploy RabbitMQ On Public IP? #rabbitmq #aws #azure #erlang * started with RabbitMq using NodeJs vinayak vinayak vinayak Follow Sep 7 Getting started with RabbitMq using NodeJs #rabbitmq #node #*t 3 min read RabbitMQ vs. Kafka: Which One to Choose for Your Event-Driven Architecture? Guilherme Siqueira Guilherme Siqueira Guilherme Siqueira Follow Sep 3 RabbitMQ vs. Kafka: Which One to Choose for Your Event-Driven Architecture? #kafka #rabbitmq #eventdriven #microservices *ad RabbitMQ container with Docker Compose Željko Šević Željko Šević Željko Šević Follow Sep 2 RabbitMQ container with Docker Compose #dockercompose #rabbitmq 2 *d Messaging System with Flask App and RabbitMQ/Celery for Email Handling 🚀 akintola abdulazeez oladele akintola abdulazeez oladele akintola abdulazeez oladele Follow Jul 26 Messaging System with Flask App and RabbitMQ/Celery for Email Handling 🚀 #python #devops #celery #rabbitmq * How to Instantly Track Message Broker Job Status Within the Same Request With NestJS and RabbitMQ Lucas Silva Lucas Silva Lucas Silva Follow Jun 4 How to Instantly Track Message Broker Job Status Within the Same Request With NestJS and RabbitMQ #nestjs #rabbitmq #node #eventdriven * Implementing Fail-Safe OTP Verification for User Login Ahmad Budi Utomo Ahmad Budi Utomo Ahmad Budi Utomo Follow for Tentang Anak Tech Team Jul 1 Implementing Fail-Safe OTP Verification for User Login #rabbitmq #go #otp #dlq Add Comment 10 min read Getting Started with RabbitMQ and Python: A Practical Guide .·. Felipe Paz .·. .·. Felipe Paz .·. .·. Felipe Paz .·. Follow Jun 21 Getting Started with RabbitMQ and Python: A Practical Guide #rabbitmq #python 21 * Messaging queues (Rabbitmq as broker) codewitgabi codewitgabi codewitgabi Follow Jun 16 Messaging queues (Rabbitmq as broker) #backend #microservices #rabbitmq #broker 2 *d Kubernetes + RabbitMQ Nicolas de Souza Nicolas de Souza Nicolas de Souza Follow May 7 Kubernetes + RabbitMQ #k8s #rabbitmq #kubernetes #mensageria Add Comment 1 min read Como utilizar o Ack do RabbitMQ de forma eficiente Igor Diniz Igor Diniz Igor Diniz Follow Jun 6 Como utilizar o Ack do RabbitMQ de forma eficiente #rabbitmq #microservices #go #backend 18 * RabbitMQ Upgrade Best Practices Rasmus Larsson Rasmus Larsson Rasmus Larsson Follow May 29 RabbitMQ Upgrade Best Practices #rabbitmq 3 *d RabbitMQ on Kubernetes Jake Page Jake Page Jake Page Follow for Glasskube May 14 RabbitMQ on Kubernetes #devops #rabbitmq #kubernetes #opensource 92 reactions 9 comments 13 min read Wie man Ereignisse von PubNub zu RabbitMQ streamt * PubNub Developer Relations Follow for PubNub [Deutsch] Mar 7 Wie man Ereignisse von PubNub zu RabbitMQ streamt #rabbitmq #messagebroker #pubnub #pubnubevents* Kafka vs. RabbitMQ: Which is the Right Messaging Broker for your use case? yogini16 yogini16 yogini16 Follow Apr 10 Kafka vs. RabbitMQ: Which is the Right Messaging Broker for your use case? #kafka #rabbitmq #webdev #cloud 2 *d RabbitMQ + .NET + Mass Transit Nicolas de Souza Nicolas de Souza Nicolas de Souza Follow Apr 9 RabbitMQ + .NET + Mass Transit #rabbitmq #dotnet #masstransit * Gorabbit: RabbitMQ supercharged for Go Applications Alex Khoury Alex Khoury Alex Khoury Follow Apr 9 Gorabbit: RabbitMQ supercharged for Go Applications #go #rabbitmq #opensource #mqtt 3 * Comment streamer des événements de PubNub vers RabbitMQ * PubNub Developer Relations Follow for PubNub [Français] Mar 7 Comment streamer des événements de PubNub vers RabbitMQ #rabbitmq #messagebroker #pubnub #pubnubevents* How to Stream Events from PubNub to RabbitMQ * PubNub Developer Relations Follow for PubNub Mar 7 How to Stream Events from PubNub to RabbitMQ #rabbitmq #messagebroker #pubnub #pubnubevents* Jak przesyłać strumieniowo zdarzenia z PubNub do RabbitMQ * PubNub Developer Relations Follow for PubNub [Polski] Mar 7 Jak przesyłać strumieniowo zdarzenia z PubNub do RabbitMQ #rabbitmq #messagebroker #pubnub #pubnubevents* Introduction to Spring Cloud Function and Spring Cloud Stream Ishan Soni Ishan Soni Ishan Soni Follow Feb 8 Introduction to Spring Cloud Function and Spring Cloud Stream #spring #springcloudfunction #springcloudstream #rabbitmq * Amazon MQ RabbitMQ: A Reliable Messaging Solution for Your .NET Projects Rahul Nath Rahul Nath Rahul Nath Follow Feb 5 Amazon MQ RabbitMQ: A Reliable Messaging Solution for Your .NET Projects #dotnet #rabbitmq #microservices #aws 2 * Root Cause Chronicles: Quivering Queue Hashfyre Hashfyre Hashfyre Follow for InfraCloud Technologies Jan 16 Root Cause Chronicles: Quivering Queue #rca #rootcauseanalysis #rabbitmq #cloudnative Add Comment 11 min read What is RabbitMQ and why do you need a Message Broker? Ishan Soni Ishan Soni Ishan Soni Follow Feb 8 What is RabbitMQ and why do you need a Message Broker? #rabbitmq #asynchronous #messagebroker * How to deploy and manage a RabbitMQ cluster on Amazon EKS using Terraform and Helm Ashiqur Rahman Ashiqur Rahman Ashiqur Rahman Follow Jan 16 How to deploy and manage a RabbitMQ cluster on Amazon EKS using Terraform and Helm #rabbitmq #kubernetes #helm #terraform 12 * Message Brokers - Overview Binoy Vijayan Binoy Vijayan Binoy Vijayan Follow Jan 5 Message Brokers - Overview #kafka #queue #rabbitmq #beginners 5 *d Simplify RabbitMQ Integration in Node.js with @kazinaimul/rabbitmq Kazi Naimul Hoque Kazi Naimul Hoque Kazi Naimul Hoque Follow Dec 23 '23 Simplify RabbitMQ Integration in Node.js with @kazinaimul/rabbitmq #javascript #typescript #rabbitmq #npm Add Comment 2 min read Setup and Securing RabbitMQ Ryan Glass Ryan Glass Ryan Glass Follow Dec 17 '23 Setup and Securing RabbitMQ #rabbitmq #tutorial #homebrew Add Comment 2 min read RabbitMQ Retry Strategy: Delay with Retry Threshold Kishan Bhimani Kishan Bhimani Kishan Bhimani Follow Dec 8 '23 RabbitMQ Retry Strategy: Delay with Retry Threshold #rabbitmq #springboot #java #tutorial 7 * How to Build a System of Experts with LLMs Stephen Collins Stephen Collins Stephen Collins Follow Nov 22 '23 How to Build a System of Experts with LLMs #systemofexperts #microservices #rabbitmq #llms 3 * Trabalhando com Queues (Filas) no RabbitMQ utilizando C#/.NET Larissa Tavares Larissa Tavares Larissa Tavares Follow Nov 15 '23 Trabalhando com Queues (Filas) no RabbitMQ utilizando C#/.NET #rabbitmq #dotnet #csharp 12 * RabbitMQ Com Java e Spring : Parte 2 Kauê Gatto Kauê Gatto Kauê Gatto Follow Nov 13 '23 RabbitMQ Com Java e Spring : Parte 2 #braziliandevs #spring #java #rabbitmq 2 *d RabbitMQ Monitoring | Key Metrics & In-Built RabbitMQ Monitoring Tools Ankit Anand ✨ Ankit Anand ✨ Ankit Anand ✨ Follow for SigNoz Oct 31 '23 RabbitMQ Monitoring | Key Metrics & In-Built RabbitMQ Monitoring Tools #database #kafka #rabbitmq #monitoring 7 *ad Conceitos iniciais sobre RabbitMQ utilizando C#/.NET Larissa Tavares Larissa Tavares Larissa Tavares Follow Oct 21 '23 Conceitos iniciais sobre RabbitMQ utilizando C#/.NET #rabbitmq #broker #dotnet #csharp 5 * Migrating from Self-Managed RabbitMQ to Cloud-Native AWS Amazon MQ: A Technical Odyssey Sergey Podgornyy Sergey Podgornyy Sergey Podgornyy Follow for ottonova Oct 14 '23 Migrating from Self-Managed RabbitMQ to Cloud-Native AWS Amazon MQ: A Technical Odyssey #rabbitmq #aws #amazonmq #cloudnative 1 reaction 2 comments 4 min read How to Connect Express app to RabbitMQ Abhishek Yadav Abhishek Yadav Abhishek Yadav Follow Sep 26 '23 How to Connect Express app to RabbitMQ #rabbitmq #express #java*t 2 min read Commands for RabbitMQ Agus Sudarmanto Agus Sudarmanto Agus Sudarmanto Follow Aug 7 '23 Commands for RabbitMQ #rabbitmq #kubernetes #programming #cluster * Integrating Robyn with RabbitMQ | Python Carlos Armando Marcano Vargas Carlos Armando Marcano Vargas Carlos Armando Marcano Vargas Follow Aug 15 '23 Integrating Robyn with RabbitMQ | Python #python #robyn #rabbitmq Add Comment 4 min read RabbitMQ vs Kafka key differences mohamed ahmed mohamed ahmed mohamed ahmed Follow Aug 8 '23 RabbitMQ vs Kafka key differences #kafka #rabbitmq #microservices #eventdriven 2 * How to Build a Application Monitoring System with FastAPI and RabbitMQ | Python Carlos Armando Marcano Vargas Carlos Armando Marcano Vargas Carlos Armando Marcano Vargas Follow Jul 24 '23 How to Build a Application Monitoring System with FastAPI and RabbitMQ | Python #python #fastapi #rabbitmq #monitoring 7 reactions 3 comments 9 min read What is AmazonMQ, How you can Setup and Connect to a RabbitMQ Instance via the Browser. Asanka Boteju Asanka Boteju Asanka Boteju Follow Jul 16 '23 What is AmazonMQ, How you can Setup and Connect to a RabbitMQ Instance via the Browser. #aws #amazonmq #rabbitmq #messaging 2 * How to Send Logs to a Telegram Bot Using RabbitMQ and FastAPI Carlos Armando Marcano Vargas Carlos Armando Marcano Vargas Carlos Armando Marcano Vargas Follow Jul 11 '23 How to Send Logs to a Telegram Bot Using RabbitMQ and FastAPI #python #fastapi #rabbitmq Add Comment 14 min read RabbitMQ Exchange and Queue Playground in Docker Nathan Fries Nathan Fries Nathan Fries Follow Jul 1 '23 RabbitMQ Exchange and Queue Playground in Docker #rabbitmq #amqp #docker #node 2 * Handling Configuration in Your RabbitMQ and Python Project Bahman Shadmehr Bahman Shadmehr Bahman Shadmehr Follow Jun 27 '23 Handling Configuration in Your RabbitMQ and Python Project #python #rabbitmq #pyte #singleton 3 *d Connecting to RabbitMQ with Python Bahman Shadmehr Bahman Shadmehr Bahman Shadmehr Follow Jun 27 '23 Connecting to RabbitMQ with Python #programming #rabbitmq #pika #python 5 *d An Implementation of Microservice Messaging Using RabbitMQ and PHP M.Hakim Amransyah M.Hakim Amransyah M.Hakim Amransyah Follow Jun 23 '23 An Implementation of Microservice Messaging Using RabbitMQ and PHP #microservices #php #rabbitmq #messagebroke 4 *d Deploying RabbitMQ in Kubernetes with Custom Docker Image Akarshan Gandotra Akarshan Gandotra Akarshan Gandotra Follow Jun 15 '23 Deploying RabbitMQ in Kubernetes with Custom Docker Image #rabbitmq #kubernetes #docker #messaging 11 * Criando componentes do Rabbitmq de forma dinâmica no Spring Boot Daniel Arrais Daniel Arrais Daniel Arrais Follow May 22 '23 Criando componentes do Rabbitmq de forma dinâmica no Spring Boot #java #springboot #rabbitmq #properties Add Comment 4 min read A Comparison of Kafka Messaging and RabbitMQ Messaging Tanvir Rahman Tanvir Rahman Tanvir Rahman Follow May 25 '23 A Comparison of Kafka Messaging and RabbitMQ Messaging #kafka #rabbitmq #servicebus #* RabbitMQ vs Kafka: Choosing the Right Message Broker for Your Java Application * RabbitMQ vs Kafka: Choosing the Right Message Broker for Your Java Application #eventdriven #rabbitmq #kafka #java Add Comment 2 min read Publish Keycloak Events to RabbitMQ Kaiwalya Koparkar Kaiwalya Koparkar Kaiwalya Koparkar Follow for Elestio Jul 16 Publish Keycloak Events to RabbitMQ #rabbitmq #keycloak #elestio Add Comment 4 min read PubNub에서 RabbitMQ로 이벤트를 스트리밍하는 방법 * PubNub Developer Relations Follow for PubNub [韓国語] Mar 7 PubNub에서 RabbitMQ로 이벤트를 스트리밍하는 방법 #rabbitmq #messagebroker #pubnub #pubnubevents* PubNubからRabbitMQにイベントをストリーミングする方法 * PubNub Developer Relations Follow for PubNub [日本語] Mar 7 PubNubからRabbitMQにイベントをストリーミングする方法 #rabbitmq #messagebroker #pubnub #pubnubeventsactions Add C*s What is the purpose of using gRPC and rabbitmq in microservices? 10 comments Ruby on Rails with RabbitMQ, is possible to have different ips for connections or channels or anything else? New Implementing Rails and RabbitMQ for EventDriven Architecture 6 * RabbitMQ container with Docker Compose RabbitMQ vs. Kafka: Which One to Choose for Your Event-Driven Architecture? Getting started with RabbitMq using NodeJ*nsor Neon * ",
    "url": "https://dev.to/t/rabbitmq"
  },
  {
    "body": "* Ruby on Rails Follow Hide Ruby on Rails is a popular web framework that happens to power dev.to ❤️ Create Post about #rails Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License. It was released in 2005 and powers websites like GitHub, Basecamp, and many others. The framework and community prides itself on developer experience, sensible abstractions and empowering individual developers to accomplish a lot. tag moderators 5268 Posts Published Older #rails posts 1 2 3 4 5 6 7 8 9 *. Kamal: Speed up the image builds using managed third-party builders and GitHub Actions Eduardo Lomeli Eduardo Lomeli Eduardo Lomeli Follow Nov 10 Kamal: Speed up the image builds using managed third-party builders and GitHub Actions #kamal #rails Add Comment 1 min read Kamal: How to use Grafana Loki as a logging driver Eduardo Lomeli Eduardo Lomeli Eduardo Lomeli Follow Nov 10 Kamal: How to use Grafana Loki as a logging driver #kamal #rails Add Comment 1 min read Kamal: How to integrate with GitHub Actions using multiple destinations Eduardo Lomeli Eduardo Lomeli Eduardo Lomeli Follow Nov 10 Kamal: How to integrate with GitHub Actions using multiple destinations #kamal #rails Add Comment 3 min read Por que sua empresa deveria patrocinar eventos Cirdes Henrique Cirdes Henrique Cirdes Henrique Follow Nov 9 Por que sua empresa deveria patrocinar eventos #techtalks #rails #ruby #community Add Comment 4 min read Ruby on Rails 8: Simplifying Sharding with New Methods * JetThoughts Dev Follow for JetThoughts Nov 8 Ruby on Rails 8: Simplifying Sharding with New Methods #ruby #rails #webdev #tuto*n read Writing Clean Code in Ruby on Rails Applications 🧼💻 Anand Soni Anand Soni Anand Soni Follow Nov 7 Writing Clean Code in Ruby on Rails Applications 🧼💻 #ruby #rails #powerfuldevs #* Store UI State in localStorage with Stimulus R*r Follow Nov 7 Store UI State in localStorage with Stimulus #ruby #rails #hotwire #* 3 min read Leveraging Rails Counter Cache for Efficient Data Management Gonzalo Robaina Gonzalo Robaina Gonzalo Robaina Follow Nov 6 Leveraging Rails Counter Cache for Efficient Data Management #ruby #rails #performance Add Comment 3 min read error Command \"webpack\" not found Alexandre Calaça Alexandre Calaça Alexandre Calaça Follow Nov 6 error Command \"webpack\" not found #webdev #javascript #rails #alexandrecalaca Add Comment 2 min read gem install error: incompatible function pointer types passing sugiarto sugiarto sugiarto Follow Nov 6 gem install error: incompatible function pointer types passing #ruby #rails #gem #bundler * a Secure, Dynamic Domain Approval System for Embeddable Widgets in Ruby on Rails David Paluy David Paluy David Paluy Follow Nov 6 Implement a Secure, Dynamic Domain Approval System for Embeddable Widgets in Ruby on Rails #rails #widget #security #embed Add Comment 3 min read Embed JS Widgets with Rails: A Step-by-Step Guide David Paluy David Paluy David Paluy Follow Nov 5 Embed JS Widgets with Rails: A Step-by-Step Guide #rails #javascript #embed #widget Add Comment 5 min read Ruby on Rails 8: Custom Compression for Encrypted Data * JetThoughts Dev Follow for JetThoughts Nov 8 Ruby on Rails 8: Custom Compression for Encrypted Data #ruby #rails #webdev #tutorial 11 *d Ruby on Rails 8: How to Batch with Custom Columns * JetThoughts Dev Follow for JetThoughts Nov 8 Ruby on Rails 8: How to Batch with Custom Columns #rails #ruby #webdev #tuto*n read The 3 kinds of Enum in Rails Augusts Bautra Augusts Bautra Augusts Bautra Follow Nov 8 The 3 kinds of Enum in Rails #rails #ruby #enum 5 comments 2 min read Introducing A Monorepo Boilerplate for Building Rails APIs with Vite + React SPA hoshino tsuyoshi hoshino tsuyoshi hoshino tsuyoshi Follow Nov 2 Introducing A Monorepo Boilerplate for Building Rails APIs with Vite + React SPA #rails #ruby #spa #vite Add Comment 3 min read Use Action Cable with Your Main PostgreSQL Database R*r Follow Nov 5 Use Action Cable with Your Main PostgreSQL Database #ruby #rails #hotwire #webdev 2 *d Multiple deployments and High Availability with Mina and Ruby on Rails David Muñoz David Muñoz David Muñoz Follow Oct 29 Multiple deployments and High Availability with Mina and Ruby on Rails #rails #ruby #capistrano #ubuntu Add Comment 6 min read Cómo desplegar una app de Ruby on Rails en Ubuntu 22 David Muñoz David Muñoz David Muñoz Follow Oct 29 Cómo desplegar una app de Ruby on Rails en Ubuntu 22 #rails #ubuntu #nginx #puma Add Comment 6 min read Ferrum Doesn’t Work on Heroku? Yegor Chsherbakov Yegor Chsherbakov Yegor Chsherbakov Follow Oct 29 Ferrum Doesn’t Work on Heroku? #ferrum #pdf #rails #heroku 1 comment 1 min read Streamlining Rails Controllers with Simple PORO Validators Lucas M. Lucas M. Lucas M. Follow Nov 8 Streamlining Rails Controllers with Simple PORO Validators #rails #ruby #cleancode #learning 10 *d One Year of Toronto Ruby crespire crespire crespire Follow Oct 26 One Year of Toronto Ruby #ruby #rails #meetups Add Comment 2 min read Capybara: Debugging Your Specs with save_and_open_screenshot Method Gonzalo Robaina Gonzalo Robaina Gonzalo Robaina Follow Oct 25 Capybara: Debugging Your Specs with save_and_open_screenshot Method #rails #ruby #testing Add Comment 2 min read Problem with Rails... Antonio Antonio Antonio Follow Nov 6 Problem with Rails... #help #forem #ruby #rails 10 comments 5 min read Broadcast Turbo Streams without Redis R*r Follow Oct 24 Broadcast Turbo Streams without Redis #rails #ruby #hotwire 1 reaction 1 comment 8 min read Of Course I Need Fun Routes! 🌈 Anna Villarreal Anna Villarreal Anna Villarreal Follow Nov 6 Of Course I Need Fun Routes! 🌈 #rails #ruby #beginners #webdev 6 * Deploy your first Rails 8 application: from zero to production in under 10 minutes 🚀 Celeste van der Watt Celeste van der Watt Celeste van der Watt Follow for Upsun Nov 6 Deploy your first Rails 8 application: from zero to production in under 10 minutes 🚀 #webdev #coding #programming #rails * How do Turbo Streams Work (behind the scenes) R*r Follow Oct 22 How do Turbo Streams Work (behind the scenes) #hotwire #ruby #rails #* 3 min read minds on rails parametric search and semantic search Nguyễn Thanh Tùng Nguyễn Thanh Tùng Nguyễn Thanh Tùng Follow Oct 19 minds on rails parametric search and semantic search #rails #ruby #* TIL `bundle outdated` Augusts Bautra Augusts Bautra Augusts Bautra Follow Oct 17 TIL `bundle outdated` #rails #ruby Add Comment 1 min read Ruby exception Handling Pitfall: Understanding Rescue Clause Hierarchy Lucas M. Lucas M. Lucas M. Follow Oct 30 Ruby exception Handling Pitfall: Understanding Rescue Clause Hierarchy #ruby #rails #learning 9 *d Ruby on Rails: Autenticação utilizando Devise + Keycloak Alef Ojeda de Oliveira Alef Ojeda de Oliveira Alef Ojeda de Oliveira Follow Oct 16 Ruby on Rails: Autenticação utilizando Devise + Keycloak #ruby #rails #devise #authentication Add Comment 3 min read Benchmarking Crunchy Data for latency T Sudhish Nair T Sudhish Nair T Sudhish Nair Follow Oct 15 Benchmarking Crunchy Data for latency #webdev #database #rails #backend Add Comment 1 min read Deploying a Rails API-Only App with Postgres using Kamal 2 Max Moreno Max Moreno Max Moreno Follow Nov 6 Deploying a Rails API-Only App with Postgres using Kamal 2 #kamal #rails #postgres #ruby 4 * Changing CSS as You Scroll with Stimulus R*r Follow Oct 17 Changing CSS as You Scroll with Stimulus #hotwire #javascript #rails #webdev 2 * Weekly Updates - October 11, 2024 Caroline K Caroline K Caroline K Follow for Couchbase Oct 11 Weekly Updates - October 11, 2024 #couchbase #rails #ai #hacktoberfest Add Comment 1 min read Testing External Services with RSpec, VCR, and WebMock in Ruby on Rails David Paluy David Paluy David Paluy Follow Nov 2 Testing External Services with RSpec, VCR, and WebMock in Ruby on Rails #rspec #rails #vcr #webmock Add Comment 3 min read TIL: joining with LIKE Augusts Bautra Augusts Bautra Augusts Bautra Follow Nov 1 TIL: joining with LIKE #sql #rails 2 *d Rails Designer v1.7: Add Smooth Turbo Stream Transitions R*r Follow Oct 14 Rails Designer v1.7: Add Smooth Turbo Stream Transitions #ruby #rails #hotwire #tailwindcss * Short Ruby Newsletter - edition 109 published Lucian Ghinda Lucian Ghinda Lucian Ghinda Follow Oct 14 Short Ruby Newsletter - edition 109 published #ruby #rails 2 *d AI in Action: Enhancing and Not Replacing Jobs Ben Greenberg Ben Greenberg Ben Greenberg Follow for Couchbase Oct 9 AI in Action: Enhancing and Not Replacing Jobs #tutorial #ai #ruby #rails Add Comment 11 min read Why Ruby on Rails is Ideal for Startups Techcronus Business Solutions Pvt. Ltd. Techcronus Business Solutions Pvt. Ltd. Techcronus Business Solutions Pvt. Ltd. Follow Oct 9 Why Ruby on Rails is Ideal for Startups #rails #ruby Add Comment 2 min read Deploying Rails Apps to a Caprover Instance Given Ncube Given Ncube Given Ncube Follow Oct 8 Deploying Rails Apps to a Caprover Instance #ruby #rails #devops Add Comment 3 min read Senior vs Junior Petr Zaparka Petr Zaparka Petr Zaparka Follow Oct 7 Senior vs Junior #webdev #ruby #rails #developers Add Comment 1 min read Rails 8: Introducing the New Default Asset Pipeline – Propshaft * JetThoughts Dev Follow for JetThoughts Oct 29 Rails 8: Introducing the New Default Asset Pipeline – Propshaft #rails #ruby #changelog 13 reactions Add C* Gem narabikae: A New Position Management Algorithm Inspired by Figma’s Fractional Indexing matazou matazou matazou Follow Oct 6 Introduction to Gem narabikae: A New Position Management Algorithm Inspired by Figma’s Fractional Indexing #rails #ruby #algorithms #webdev Add Comment 4 min read Let's Read - Eloquent Ruby - Ch 22 Brandon Weaver Brandon Weaver Brandon Weaver Follow Oct 4 Let's Read - Eloquent Ruby - Ch 22 #ruby #rails #books Add Comment 5 min read Let's Read - Eloquent Ruby - Ch 21 Brandon Weaver Brandon Weaver Brandon Weaver Follow Oct 4 Let's Read - Eloquent Ruby - Ch 21 #ruby #rails #books Add Comment 6 min read ActiveStorage Direct Upload with Stimulus R*r Follow Oct 3 ActiveStorage Direct Upload with Stimulus #rails #ruby #hotwire #webdev * Adopt .strict_loading gradually Augusts Bautra Augusts Bautra Augusts Bautra Follow Oct 3 Adopt .strict_loading gradually #rails #ruby #performance Add Comment 1 min read What's New in Ruby on Rails 8 Damilola Olatunji Damilola Olatunji Damilola Olatunji Follow for AppSignal Oct 31 What's New in Ruby on Rails 8 #ruby #rails 11 * 📩My journey to send 100 mails to 500k effortlessly📩 Pimp My Ruby Pimp My Ruby Pimp My Ruby Follow Nov 4 📩My journey to send 100 mails to 500k effortlessly📩 #ruby #rails #programming #learning 12 * Handling Errors and Job Lifecycles in Rails 7.1: Master ActiveJob with `retry_on`, `discard_on`, and `after_discard` Shah Zaib Shah Zaib Shah Zaib Follow Nov 5 Handling Errors and Job Lifecycles in Rails 7.1: Master ActiveJob with `retry_on`, `discard_on`, and `after_discard` #rails #ruby #activitypub #webdev 4 * Use `gem \"oj\"` for free JSON performance Augusts Bautra Augusts Bautra Augusts Bautra Follow Oct 4 Use `gem \"oj\"` for free JSON performance #rails #ruby 5 *d Short Ruby News - edition 107 highlights Lucian Ghinda Lucian Ghinda Lucian Ghinda Follow Sep 30 Short Ruby News - edition 107 highlights #news #ruby #rails * How to continue to use Rails.application.secrets in Rails >= 7.2 Artem Yegorov Artem Yegorov Artem Yegorov Follow Oct 21 How to continue to use Rails.application.secrets in Rails >= 7.2 #ruby #rails #secrets #config * Hotwire and Stimulus Tools You Need to Know R*r Follow Oct 31 Hotwire and Stimulus Tools You Need to Know #rails #ruby #hotwire #webdev 8 *d Bug in `use_transactional_fixtures` Augusts Bautra Augusts Bautra Augusts Bautra Follow Sep 26 Bug in `use_transactional_fixtures` #rails #rspec Add Comment 2 min read Setting up Ruby on Rails with RVM, Puma, Mina, Nginx, Sidekiq and Redis on Amazon Linux 2 David Muñoz David Muñoz David Muñoz Follow Oct 29 Setting up Ruby on Rails with RVM, Puma, Mina, Nginx, Sidekiq and Redis on Amazon Linux 2 #rails #nginx #sidekiq #amazonlinux2 * ActiveAdmin v4 Beta: New Features, Upgrades, and How to Migrate BestWeb Ventures BestWeb Ventures BestWeb Ventures Follow for Bestweb Ventures Oct 28 ActiveAdmin v4 Beta: New Features, Upgrades, and How to Migrate #ruby #rails #webdev 13 * Is Ruby on Rails Worth Learning in 2024? A Quick Insight Adler Hsieh Adler Hsieh Adler Hsieh Follow Nov 3 Is Ruby on Rails Worth Learning in 2024? A Quick Insight #ruby #rails #programming *... #discuss Today I learned about the splat operator in Ruby. 5 comments The Evolution of Ruby Version Management New Is going for Devise for user authentication a good choice for a first Rails app or should I write it from scratch? 8 comments Which ruby book would you recommend? 20 comments What are your thoughts on the Rails community? 1 comment Show Dev: Klip Space - Copy, paste text across multiple devices 3 comments How to best organize a Rails app folder? 12 comments Is there good Ruby/Rails repos to read and learn good architecture/coding manners? 4 comments My mistakes & lessons for the Week 9 comments Why do you love Ruby, actually? An ode. 78 * Error: rbenv install 3.3.4 - ruby-build: definition not found: 3.3.4 Managing Ruby versions on macOS Apple Silicon with rbenv Rails 8: Introducing the New Default Asset Pipeline – Propshaft How to temporarily skip the pending migration check in Rails As Rails developers, why we are excited about PostgreSQL 17 redis ACTION REQUIRED: Version approaching end of life Automate Your Deployments with Kamal 2 and GitHub Actions Format on save for ERB and Ruby files in Zed IDE 🚩Effortless Feature Management in Rails : A Guide to Using Flipper with Active Admin Supercharge Your Rails Development: A Deep Dive into Vite-Rails and React Integration How to continue to use Rails.application.secrets in Rails >= 7.2 Efficient Chunked File Downloads in Rails: Streaming CSV Exports Use `gem \"oj\"` for free JSON performance Unlocking the Power of Ruby on Rails 8: What Developers Need to Know Drag & Drop Images with Preview using Stimulus Outlets Connected and Disconnected Target Callbacks with Stimulus Rails Console in the Browser (on-demand) TIL: joining with LIKE A Deep Dive into the Statesman Gem for Ruby: Building Flexible State Machines Smart way to update multiple models simultaneously in Rails recently queried Rails Transaction Ruby Tap Injection Ruby Docker Rails Deployment Rails Associations You Must Use Bundler 2 or Greater With This Lockfile. * * ",
    "url": "https://dev.to/t/rails"
  },
  {
    "body": "* # railway Follow Hide Create Post 23 Posts Published *. * Hannah Liao Hannah Liao Hannah Liao Follow Oct 30 * #postgres #railway #node #* Deploy a Static Sveltekit site to Railway Mark Munyaka Mark Munyaka Mark Munyaka Follow Oct 22 Deploy a Static Sveltekit site to Railway #railway #sveltekit #devop*y a Static Astro Site on Railway Mark Munyaka Mark Munyaka Mark Munyaka Follow Oct 20 Deploy a Static Astro Site on Railway #railway #astro #deploy #webdev Add Comment 2 min read Deploying a Static Next.js Site to Railway Mark Munyaka Mark Munyaka Mark Munyaka Follow Oct 19 Deploying a Static Next.js Site to Railway #webdev #railway #nextjs * Deploy a Static Nuxt site to Railway Mark Munyaka Mark Munyaka Mark Munyaka Follow Oct 21 Deploy a Static Nuxt site to Railway #nuxt #railway #w* read Deploy a PHP site to Railway Mark Munyaka Mark Munyaka Mark Munyaka Follow Oct 23 Deploy a PHP site to Railway #php #railway #deploy #website * How to Create an Admin Panel for Your PostgreSQL Database on Railway Cloud Nik Poltoratsky Nik Poltoratsky Nik Poltoratsky Follow Mar 12 How to Create an Admin Panel for Your PostgreSQL Database on Railway Cloud #webdev #lowcode #railway #postgres 18 * Streamlining Node.js App * Railway Olumide Nwosu Olumide Nwosu Olumide Nwosu Follow Jul 17 '23 Streamlining Node.js App * Railway #javascript #githubactions #node #railway 5 * Python, Flask: Railway.app deployment and Railway's Nixpacks Docker image build tool. Be Hai Nguyen Be Hai Nguyen Be Hai Nguyen Follow Jul 9 '23 Python, Flask: Railway.app deployment and Railway's Nixpacks Docker image build tool. #python #flask #railway #deployment 5 *ad Simplest way to deploy a Flutter Web App Benard Mseti Benard Mseti Benard Mseti Follow Jun 12 '23 Simplest way to deploy a Flutter Web App #webdev #flutter #railway #deploy 10 reacti*e and Deploy your first GraphQL API with Apollo Server 4, TypeGraphQL and Render Eder Eder Eder Follow Jun 8 '23 Create and Deploy your first GraphQL API with Apollo Server 4, TypeGraphQL and Render #graphql #railway #deploy #api 3 *d HOW TO HOST A DJANGO PROJECT ON RAILWAY Akinwande Tomisin Akinwande Tomisin Akinwande Tomisin Follow Apr 9 '23 HOW TO HOST A DJANGO PROJECT ON RAILWAY #django #railway #python #github 3 *d Download Railway database to localhost Michal Bryxí Michal Bryxí Michal Bryxí Follow Feb 26 '23 Download Railway database to localhost #railway #postgres #rails 5 * Moving a Hanami application from Heroku to Railway Jan Bajena Jan Bajena Jan Bajena Follow Dec 8 '22 Moving a Hanami application from Heroku to Railway #ruby #rails #railway #postgres 4 *d Cómo desplegar aplicación Node.js en Railway * Oct 27 '22 Cómo desplegar aplicación Node.js en Railway #railway #node #beginners #spanish 2 *d Heroku Postgres DB to Railway Postgres DB Migration(For Django Apps in Heroku using Postgres DB addon ) Teddy Otieno Teddy Otieno Teddy Otieno Follow Oct 25 '22 Heroku Postgres DB to Railway Postgres DB Migration(For Django Apps in Heroku using Postgres DB addon ) #heroku #railway #django #postgres 5 *d Deploy Nest Js applications to Railway.app Ronald Flores Sequeira Ronald Flores Sequeira Ronald Flores Sequeira Follow Oct 11 '22 Deploy Nest Js applications to Railway.app #nestjs #node #railway #deploy 10 * how to fix raise ImproperlyConfigured(\"settings.DATABASES is improperly configured. \" OlaNeat Ayoola OlaNeat Ayoola OlaNeat Ayoola Follow Sep 15 '22 how to fix raise ImproperlyConfigured(\"settings.DATABASES is improperly configured. \" #django #railway #drf #postgres 5 *d Deploying Strapi 4 to Railway Cândido Sales Gomes Cândido Sales Gomes Cândido Sales Gomes Follow Aug 3 '22 Deploying Strapi 4 to Railway #strapi #railway #cloudinary #cms 15 * How to connect railway. app with nextjs using Prisma. Next Dev Next Dev Next Dev Follow Jun 20 '22 How to connect railway. app with nextjs using Prisma. #nextjs #railway #prisma #database 11 *d Querying MongoDB with Prisma and Railway ajcwebdev ajcwebdev ajcwebdev Follow Feb 1 '22 Querying MongoDB with Prisma and Railway #mongodb #prisma #railway #database 13 reactions 9 comments 4 min read A First Look at PostGraphile with Railway ajcwebdev ajcwebdev ajcwebdev Follow Jul 17 '21 A First Look at PostGraphile with Railway #postgraphile #postgres #graphql #railway 8 *d a first look at redwoodJS part 3 - prisma migrate, railway ajcwebdev ajcwebdev ajcwebdev Follow Jun 23 '20 a first look at redwoodJS part 3 - prisma migrate, railway #redwoodjs #react #postgres #railway 6 * All Gophers aboard! Deploying your first Go app to Railway 🛤️ Adelina Simion 🥑 Adelina Simion 🥑 Adelina Simion 🥑 Follow Aug 25 '23 All Gophers aboard! Deploying your first Go app to Railway 🛤️ #go #railway #github* Using staticfiles in a Django app deployed on Railway Davide Fiorini Davide Fiorini Davide Fiorini Follow Jul 3 '23 Using staticfiles in a Django app deployed on Railway #django #railway #deploy #python Add Comment 2 min read Migrating your Heroku app to Railway Kera Cudmore Kera Cudmore Kera Cudmore Follow Apr 18 '23 Migrating your Heroku app to Railway #hosting #railway #webdev #tutorial Add C* Is Railway app more popular than Heroku among developers? 6 * Deploy a Static Nuxt site to Railway Deploy a PHP site to Railw*onsor Neon * ",
    "url": "https://dev.to/t/railway"
  },
  {
    "body": "* React Follow Hide Official tag for Facebook's React JavaScript library for building user interfaces * 1️⃣ Post Facebook's React ⚛ related posts/questions/discussion topics here~ 2️⃣ There are no silly posts or questions as we all learn from each other👩‍🎓👨‍🎓 3️⃣ Adhere to dev.to 👩‍💻👨‍💻Code of Conduct about #react React is a declarative, component-based library, you can learn once, and write anywhere Editor Guide Check out this Editor Guide or this post to learn how to add code syntax highlights, embed CodeSandbox/Codepen, etc Official Documentations & Source Docs Tutorial Community Blog Source code on GitHub Improving Your Chances for a Reply by putting a minimal example to either JSFiddle, Code Sandbox, or StackBlitz. Describe what you want it to do, and things you've tried. Don't just post big blocks of code! Where else to ask questions StackOverflow tagged with [reactjs] Beginner's Thread / Easy Questions (Jan 2020) on r/reactjs subreddit. Note: a new \"Beginner's Thread\" created as sticky post on the first day of each month Learn in Public Don't afraid to post an article or being wrong. Learn in public. tag moderators 37527 Posts Published Older #react posts 1 2 3 4 5 6 7 8 9 …75 …625 *. Let’s create numeric range input with attached scale * Dima Vyshniakov Follow Nov 10 Let’s create numeric range input with attached scale #webdev #react #ui #*t 4 min read * Vaishnavi Sonawane Vaishnavi * 10 * #react #webdev #programming #opensource * Decoding StyleX: Meta's Cutting-Edge Styling System Supriya M Supriya M Supriya M Follow Nov 10 Decoding StyleX: Meta's Cutting-Edge Styling System #css #react #styling #webdev Add Comment 9 min read Timer - * 10 Timer - Custom Hooks #webdev #react #learning #* Custom Hooks in React Cheryl Mataitini Cheryl Mataitini Cheryl Mataitini Follow Nov 10 Custom Hooks in React #react #javascript #webdev * Redux Simple Guide * Nov 9 Redux Simple Guide #redux #react #*mment 5 min read * Gabriel Duete Gabriel Duete Gabriel Duete Follow Nov 9 * #webdev #javascript #react #* Redux: Intro + Building a Modern State Management System with Redux Toolkit * Nov 9 Redux: Intro + Building a Modern State Management System with Redux Toolkit #redux #react #webdev #beginners Add Comment 8 min read * * Nov 9 * #webdev #react #javascript #* Centralized API Logic in Next.js with an External Backend Animesh Srivastava Animesh Srivastava Animesh Srivastava Follow Nov 9 Centralized API Logic in Next.js with an External Backend #nextjs #react #webdev #cleancoding Add Comment 2 min read * 🚨 mohiyaddeen7 mohiyaddeen7 mohiyaddeen7 Follow Nov 9 * 🚨 #*l 5 *d Enhanced Chat Component Design for a Better User Experience! 🎁 Joodi Joodi Joodi Follow Nov 9 Enhanced Chat Component Design for a Better User Experience! 🎁 #react #nextjs #tailwindcss #* Employee Leave Management App Angular 18 Akanksha Asutkar Akanksha Asutkar Akanksha Asutkar Follow Nov 9 Employee Leave Management App Angular 18 #angular #javascript #react #dotnet Add Comment 2 min read Modular React architecture Michael Mazzone Michael Mazzone Michael Mazzone Follow Nov 9 Modular React architecture #react #softwaredevelopment #* 7 min read Dominando Compound Components: Construindo Componentes React Flexíveis e Reutilizáveis Gabriel Duete Gabriel Duete Gabriel Duete Follow Nov 8 Dominando Compound Components: Construindo Componentes React Flexíveis e Reutilizáveis #braziliandevs #javascript #react #designpatterns 2 * New Here! Introducing Chipster: A Flexible Multi-Entry Input for React – Feedback Welcome Alvaro Gallego De Paz Alvaro Gallego De Paz Alvaro Gallego De Paz Follow Nov 8 New Here! Introducing Chipster: A Flexible Multi-Entry Input for React – Feedback Welcome #react #opensource #frontend #webcomponents Add Comment 1 min read Episode 4: Defensive Strategies with Commander Redux * vigneshiyergithub Follow Nov 8 Episode 4: Defensive Strategies with Commander Redux #react #* 5 min read * * Nov 8 * #*l Add Comment 4 min read useContext: React Hooks * Nov 8 useContext: React Hooks #react #webdev #javascript #* Introducing ThrusterKit: A Boilerplate to Speed Up Your SaaS App Launch Matt Nutsch Matt Nutsch Matt Nutsch Follow Nov 8 Introducing ThrusterKit: A Boilerplate to Speed Up Your SaaS App Launch #webdev #javascript #beginners #react Add Comment 1 min read \"Getting Started with React : A Beginner's Guide\" wicked sarkar wicked sarkar wicked sarkar Follow Nov 8 \"Getting Started with React : A Beginner's Guide\" #webdev #javascript #react Add Comment 2 min read Chapter 1: The Lifecycle Crisis * vigneshiyergithub Follow Nov 8 Chapter 1: The Lifecycle Crisis #react #webdev #javascript * CSR vs SSR vs SSG vs ISR: A Deep Dive for Modern Web Development Yug Jadvani Yug Jadvani Yug Jadvani Follow Nov 8 CSR vs SSR vs SSG vs ISR: A Deep Dive for Modern Web Development #webdev #nextjs #frontend #react Add Comment 6 min read Top Front-End Frameworks for Web Development in 2024 Philip Philip Philip Follow Nov 8 Top Front-End Frameworks for Web Development in 2024 #webdev #react #javascript #echoapi Add Comment 6 min read ¿Cómo definir el estado? Octavio Martinez Octavio Martinez Octavio Martinez Follow Nov 8 ¿Cómo definir el estado? #react #* How to Track User Inactivity on Your Website and Why It Matters Nilesh Kumar Nilesh Kumar Nilesh Kumar Follow Nov 8 How to Track User Inactivity on Your Website and Why It Matters #gyantocode #userinactive #react #webdev Add Comment 6 min read New Feed Component Variations 🚀 Wind UI Wind UI Wind UI Follow Nov 8 New Feed Component Variations 🚀 #news #tailwindcss #react #html Add Comment 1 min read React lifecycles - * 8 React lifecycles - Custom Hooks #webdev #react #beginners #learning * Design * Ketan Jakhar K* Comparing CSS Styling Methods in React: Making the Choice Easier with Code Examples Abdulkadir Saloum Abdulkadir Saloum Abdulkadir Saloum Follow Nov 8 Comparing CSS Styling Methods in React: Making the Choice Easier with Code Examples #webdev #css #react #* * 2/2) Joan Roucoux Joan *L Shortener with Node.js (Part 2/2) #react #rtkquery #materialui Add Comment 9 min read \"* Angular and React.js, and which is best to use for building a website?\" 08-ayush 08-ayush 08-ayush Follow Nov 8 \"* Angular and React.js, and which is best to use for building a website?\" #angular #react #productivity #webdev *ad Optimizing React Re-Renders: Best Practices for Performance Nenepo Nenepo Nenepo Follow Nov 8 Optimizing React Re-Renders: Best Practices for Performance #webdev #programming #react #performance Add Comment 2 min read What are Deploy Tokens? A Beginner's Guide DeployTokens DeployTokens DeployTokens Follow Nov 8 What are Deploy Tokens? A Beginner's Guide #blockchain #react #development #* The Heart of React: Understanding Component Rerendering Mahipal Singh Mahipal Singh Mahipal Singh Follow Nov 8 The Heart of React: Understanding Component Rerendering #react #webdev #javascript #performanceoptimization Add Comment 4 min read Formulários com React Hook Form + Zod 👨‍💻 Lucas Silva 👨‍💻 Lucas Silva 👨‍💻 Lucas Silva Follow Nov 7 Formulários com React Hook Form + Zod #react #webdev #javascript #* 🌟 Introducing the My 3D Model Viewer! 🌟 Alberts Kresi Alberts Kresi Alberts Kresi Follow Nov 7 🌟 Introducing the My 3D Model Viewer! 🌟 #discuss #webdev #react #devops Add Comment 1 min read Best Version Control Practices Every React Development Team Needs To Know Joseph Abraham Joseph Abraham Joseph Abraham Follow Nov 7 Best Version Control Practices Every React Development Team Needs To Know #* #react 3 reactions Add Comment 33 min read Building a Custom Audio Player in React: A Step-by-Step Guide Nilesh Kumar Nilesh Kumar Nilesh Kumar Follow Nov 7 Building a Custom Audio Player in React: A Step-by-Step Guide #gyantocode #audioplayer #customaudioplayer #react Add Comment 4 min read Possible to Do Panoramic Image Stitching in React Native? Javad İbrahimli Javad İbrahimli Javad İbrahimli Follow Nov 7 Possible to Do Panoramic Image Stitching in React Native? #react #reactnative #cpp #android Add Comment 1 min read Tech Watch 3 56kode 56kode 56kode Follow Nov 7 Tech Watch 3 #javascript #react #nextjs #html * React Native New Architecture Neha Sharma Neha Sharma Neha Sharma Follow Nov 9 React Native New Architecture #react #reactnative #javascript #webdev 27 * The Ultimate Cleanup Sidekick for Lazy (but Efficient!) React Developers Selvin PaulRaj Selvin PaulRaj Selvin PaulRaj Follow Nov 7 The Ultimate Cleanup Sidekick for Lazy (but Efficient!) React Developers #webdev #javascript #react #tailwindcss Add Comment 3 min read React Select + Custom Style ramadhan.dev ramadhan.dev ramadhan.dev Follow Nov 7 React Select + Custom Style #react #javascript #frontend #indonesia Add Comment 2 min read Recursively rendering comments for a developer content creation site ♻️ Oscar Oscar Oscar Follow Nov 6 Recursively rendering comments for a developer content creation site ♻️ #webdev #computerscience #react #django 6 * Async derivations in React Felipe Gustavo Felipe Gustavo Felipe Gustavo Follow Nov 7 Async derivations in React #javascript #beginners #react #reactnative Add Comment 4 min read Uvod u Modularizaciju u React-u: AMD i CommonJS modularizacija Jelena Petkovic Jelena Petkovic Jelena Petkovic Follow Nov 6 Uvod u Modularizaciju u React-u: AMD i CommonJS modularizacija #javascript #module #react Add Comment 4 min read How to use Infinity Queries (TanStack Query) to do infinite scrolling Davi Rezende Davi Rezende Davi Rezende Follow Nov 6 How to use Infinity Queries (TanStack Query) to do infinite scrolling #react #typescript #* 3 min rea*ensource #*in read Why does it throw the error \"'process' is not defined.\"? Hoàng Nguyễn Hoàng Nguyễn Hoàng Nguyễn Follow Nov 6 Why does it throw the error \"'process' is not defined.\"? #webdev #javascript #vite #react * a Social Impact Project with React, Node.js, and MySQL: My Experience and Lessons Learned Vaishnavi Sonawane Vaishnavi * 6 Building a Social Impact Project with React, Node.js, and MySQL: My Experience and Lessons Learned #programming #react #productivity #learning * Methodical Naming in React: How It Improves Code Organization khaled-17 khaled-17 khaled-17 Follow Nov 6 Methodical Naming in React: How It Improves Code Organization #cleancoding #react #nextjs #* Can you please explain why React does not allow simple JSX variables to be used as components to reduce the boilerplate? me nefcanto me nefcanto me nefcanto Follow Nov 6 Can you please explain why React does not allow simple JSX variables to be used as components to reduce the boilerplate? #react Add Comment 1 min read I used GitHub as a CMS potyoma potyoma potyoma Follow Nov 7 I used GitHub as a CMS #remix #react #github #redis Add Comment 4 min read React.FC is better than you think! Karim Shalapy Karim Shalapy Karim Shalapy Follow Nov 6 React.FC is better than you think! #react #typescript #webdev #nextjs 1 reaction 1 comment 9 min read My Notes on React Ganessh Kumar Ganessh Kumar Ganessh Kumar Follow Nov 5 My Notes on React #react * Recharts: A Comprehensive Guide to Creating Charts in ReactJS Tahrim Bilal Tahrim Bilal Tahrim Bilal Follow Nov 5 Mastering Recharts: A Comprehensive Guide to Creating Charts in ReactJS #javascript #react #recharts #* * Antoine Cusset Antoine Cusset Antoine Cusset Follow Nov 6 * #testing #typescript #productivity #react Add Comment 7 min read Creating Theme Systems in React with SCSS and Redux M1dnightGMR M1dnightGMR M1dnightGMR Follow Nov 6 Creating Theme Systems in React with SCSS and Redux #webdev #javascript #react #redux * How to tackle your first Hacktober Fest Rabdeep Kaur Rabdeep Kaur Rabdeep Kaur Follow Nov 5 How to tackle your first Hacktober Fest #opensource #webdev #beginners #react Add Comment 3 min read Complete Guide: Implementing Live Streaming in React Native tags: reactnative, javascript, mobile, streaming Muhammad Aamir Yameen Muhammad Aamir Yameen Muhammad Aamir Yameen Follow Nov 10 (39 mins ago) Complete Guide: Implementing Live Streaming in React Native tags: reactnative, javascript, mobile, streaming #react #reactnative #mobile #streaming Add Comment 1 min read Intro Voke Voke Voke Follow Nov 10 (4 hours ago) Intro #react #hungry #developer Add Comment 1 min read How to define the state? Octavio Martinez Octavio Martinez Octavio Martinez Follow Nov 10 (6 hours ago) How to define the state? #react Add Comment 1 min read Promises in JavaScript and React Native: Creation, Usage, and Common Scenarios Ajmal Hasan Ajmal Hasan Ajmal Hasan Follow Nov 9 (22 hours ago) Promises in JavaScript and React Native: Creation, Usage, and Common Scenarios #javascript #react #reactnative #webdev Add Comment 4 min read Handling Component-Specific Loading and Data State with Redux for API Calls in React Native Ajmal Hasan Ajmal Hasan Ajmal Hasan Follow Nov 9 (22 hours ago) Handling Component-Specific Loading and Data State with Redux for API Calls in React Native #reactnative #react #javascript #redux Add Comment 3 min read looking forward to meeting senior frontend developers samsandhu samsandhu samsandhu Follow Nov 9 looking forward to meeting senior frontend developers #react #javascript Add C* 🌟 Introducing the My 3D Model Viewer! 🌟 New trending guides/resources Top UI Component Libraries for React 10 React One-Liners Every UI Developer Should Know Libraries You Should Know When Building with React Why Virtual DOM: Render and Performance 🔥 * 🚀 React 18: Must-Know Features & Upgrades for Beginners Sentry can’t fix React hydration errors, but it can really help you debug them JavaScript Performance Optimization 17 Best Free React Admin Template 2024 to Speed up Your Web App Development 🚀 How to Validate File Inputs in TypeScript with Zod Simplifying State Management in React Native with Zustand Journeying from React to React Native: Differences & Similarities React 18 vs React 19 (RC): Key Differences and Migration Tips with Examples What's New in Next.js 15: New Hooks, Turbopack and more Tailwind vs Custom CSS: What Should You Choose? How to make your Web Page Responsive Part 3/3: How to Implement Refresh Tokens through Http-Only Cookie in NestJS and React Build an image editor with Fabric.js v6 Comparing The Top React Frameworks How To: 3D Flip Cards using Tailwind CSS recently queried React Native Carousel JavaScript Playground Geoguessr Multiplayer ReactJs setState useReducer vs useState React Google Maps Tree Shaking in React React Graph React Hooks Componentdidmount Laravel React Web Components vs React React Debounce Formik Material UI React Search Bar Golang Gin useReducer TypeScript For Loop in React React Router Redirect React Pure Component What Is Webpack * * ",
    "url": "https://dev.to/t/react"
  },
  {
    "body": "* # redis * 916 Posts Published Older #redis posts 1 2 3 4 5 6 7 8 9 *. * 1/* How to Move Data From MySQL to Redis in Real Time BladePipe BladePipe BladePipe Follow Nov 8 How to Move Data From MySQL to Redis in Real Time #mysql #redis #database #* I used GitHub as a CMS potyoma potyoma potyoma Follow Nov 7 I used GitHub as a CMS #remix #react #github #redis Add Comment 4 min read Redis + Redundância com Sentinel + Docker * Airton Lira junior Follow Nov 2 Redis + Redundância com Sentinel + Docker #redis #sentinel #redissentinel #docker Add Comment 5 min read Why Redis? An Intro with Practical Use Cases for Developers Kisore Subburaman Kisore Subburaman Kisore Subburaman Follow Nov 6 Why Redis? An Intro with Practical Use Cases for Developers #redis #webdev #database #learn*n read 🎉 Landmark API vAlpha 1.0 is here! 🎉 Marceli Borowczak Marceli Borowczak Marceli Borowczak Follow Oct 24 🎉 Landmark API vAlpha 1.0 is here! 🎉 #api #go #devops #redi*o Generate and Verify OTPs in Next.js Hadiza Mohammed Hadiza Mohammed Hadiza Mohammed Follow Oct 24 How to Generate and Verify OTPs in Next.js #nextjs #typescript #authentication #redis Add Comment 4 min read Sending Emails with Queues in Node.js - Improve Your App’s Email Deliverys Muhammad ABir Muhammad ABir Muhammad ABir Follow Nov 6 Sending Emails with Queues in Node.js - Improve Your App’s Email Deliverys #node #redis #queue #backend Add Comment 4 min read Setting up Redis in a Next.js Application Hadiza Mohammed Hadiza Mohammed Hadiza Mohammed Follow Oct 23 Setting up Redis in a Next.js Application #redis #nextjs #tutorial #*t 4 min read Scaling Web-Socket to million users William Edwardo Gunawan William Edwardo Gunawan William Edwardo Gunawan Follow Oct 24 Scaling Web-Socket to million users #redis #kafka #websockets * Building a High-Performance Cache Manager in Node.js with TypeScript and ioredis ... ... ... Follow Oct 27 Building a High-Performance Cache Manager in Node.js with TypeScript and ioredis #node #typescript #redis #javascript * Preventing Duplicate Requests in Laravel: The AtomicLockMiddleware Hafiq Iqmal Hafiq Iqmal Hafiq Iqmal Follow Oct 21 Preventing Duplicate Requests in Laravel: The AtomicLockMiddleware #laravel #webdev #database #redis Add Comment 6 min read Efficiently Manage Distributed Locks with Redis: A Go-Based Solution JingIsCoding JingIsCoding JingIsCoding Follow Oct 20 Efficiently Manage Distributed Locks with Redis: A Go-Based Solution #redis #go #distributedsystems * a Scalable Slot Booking System with Redis Distributed Locks Abhinav Abhinav Abhinav Follow Oct 22 Building a Scalable Slot Booking System with Redis Distributed Lock*rs #redis 2 * Caching — An overview Kartikey Srivastava Kartikey Srivastava Kartikey Srivastava Follow Oct 15 Caching — An overview #caching #redis #apacheignite #performance Add Comment 4 min read Redis Implementation and best Practices Yuvraj Chaurasia Yuvraj Chaurasia Yuvraj Chaurasia Follow Nov 6 Redis Implementation and best Practices #javascript #redis #backend 5 * Implementing Caching Strategies for Improved Performance Obinna Obinna Obinna Follow Nov 6 Implementing Caching Strategies for Improved Performance #weboptimization #redis #backendperformance #caching 6 * Integrating Redis with Django for High-Performance Caching Praseesh P Praseesh P Praseesh P Follow Nov 4 Integrating Redis with Django for High-Performance Caching #python #django #redis #nosql * Redis on Windows & Rate Limiting: A Practical Guide Suryansh Singh Suryansh Singh Suryansh Singh Follow Oct 10 Redis on Windows & Rate Limiting: A Practical Guide #redis #webdev #typescript #* Case Study: Migrating from Redis to Dragonfly to Scale IoT Infrastructure Dragonfly Dragonfly Dragonfly Follow Oct 9 Case Study: Migrating from Redis to Dragonfly to Scale IoT Infrastructure #casestudy #migration #iot #redis Add Comment 4 min read Maximizing Redis Efficiency: Cutting Memory Costs with Redis Hashes Kiran U Kamath Kiran U Kamath Kiran U Kamath Follow Oct 8 Maximizing Redis Efficiency: Cutting Memory Costs with Redis Hashes #redis Add Comment 5 min read PHP/MySQL/Nginx/Redis Application Docker Sidgley de Almeida Guedes Sidgley de Almeida Guedes Sidgley de Almeida Guedes Follow Oct 9 PHP/MySQL/Nginx/Redis Application Docker #docker #php #redis #mysql * Building a Redis Clone: A Deep Dive into In-Memory Data Storage * Nov 4 Building a Redis Clone: A Deep Dive into In-Memory Data Storage #opensource #redis #go #rust 14 * Redis caching with Mongoose Ayanabilothman Ayanabilothman Ayanabilothman Follow Oct 1 Redis caching with Mongoose #redis #caching #node #mongodb * a URL Shortener with Rate Limiting and Redis in Go * Nov 4 Building a URL Shortener with Rate Limiting and Redis in Go #webdev #go #redis #programming * 🌐 Golang RESTful API with Gin, Gorm, Redis Cache 💾 * Oct 31 🌐 Golang RESTful API with Gin, Gorm, Redis Cache 💾 #webdev #go #redis #tutorial 25 *d Monitoring Redis with Prometheus Exporter and Grafana Rayan Slim Rayan Slim Rayan Slim Follow Oct 18 Monitoring Redis with Prometheus Exporter and Grafana #devops #redis #kubernetes #monitoring Add Comment 3 min read My Fourth and Final Contribution to Hacktoberfest Kannav Sethi Kannav Sethi Kannav Sethi Follow Oct 28 My Fourth and Final Contribution to Hacktoberfest #hacktoberfest #go #redis #* Persistent Storage vs. Cache Storage: Understanding the Differences and Use Cases Mohamed Thanveer Mohamed Thanveer Mohamed Thanveer Follow Sep 20 Persistent Storage vs. Cache Storage: Understanding the Differences and Use Cases #mongodb #redis #database #*mment 3 min read How Redis works(deep dive) * Prashant Mishra Follow Oct 20 How Redis works(deep dive) #redis #systemdesign #interview * 📝 30 COMMON REDIS INTERVIEW QUESTIONS 💾 * Oct 18 📝 30 COMMON REDIS INTERVIEW QUESTIONS 💾 #redis #interview #*mment 5 min read Caching in FastAPI: Unlocking High-Performance Development: sivakumarmanoharan sivakumarmanoharan sivakumarmanoharan Follow Oct 18 Caching in FastAPI: Unlocking High-Performance Development: #webdev #python #fastapi #redis Add Comment 4 * AWS ElastiCache with Valkey 7.2: Lower Costs, Serverless Flexibility, and Performance Gains Harsh Viradia Harsh Viradia Harsh Viradia Follow Oct 16 Unlocking the Power of AWS ElastiCache with Valkey 7.2: Lower Costs, Serverless Flexibility, and Performance Gains #cloud #serverless #redis #devops 3 *d My Hacktoberfest Contribution To DiceDB Kannav Sethi Kannav Sethi Kannav Sethi Follow Oct 10 My Hacktoberfest Contribution To DiceDB #database #redis #opensource #hacktoberfest 2 * Mastering Full Stack Development Dan @roadmap.sh Dan @roadmap.sh Dan @roadmap.sh Follow Oct 9 Mastering Full Stack Development #fullstack #javascript #redis #python Add Comment 4 min read 🚀Redis 101: Iniciante Edinei Cavalcanti Edinei Cavalcanti Edinei Cavalcanti Follow for edinei.dev Oct 7 🚀Redis 101: Iniciante #webdev #beginners #braziliandevs #redis * key-value storage for a Redis clone Dheeraj Gopinath Dheeraj Gopinath Dheeraj Gopinath Follow Sep 2 Building key-value storage for a Redis clone #redis #tokio #rust #database Add Comment 11 min read Handle Redis PING command Dheeraj Gopinath Dheeraj Gopinath Dheeraj Gopinath Follow Aug 29 Handle Redis PING command #redis #rust #tokio #database Add Comment 6 min read Password Reset Feature: Using OTP to Reset Password Yash Jaiswal Yash Jaiswal Yash Jaiswal Follow Oct 1 Password Reset Feature: Using OTP to Reset Password #webdev #go #redis #mongodb Add Comment 2 min read Password Reset Feature: Sending Email in Golang Yash Jaiswal Yash Jaiswal Yash Jaiswal Follow Sep 30 Password Reset Feature: Sending Email in Golang #webdev #go #redis Add Comment 5 min read Using Redis for Caching in Laravel: A Step-by-Step Guide Carlos Talavera Carlos Talavera Carlos Talavera Follow Sep 29 Using Redis for Caching in Laravel: A Step-by-Step Guide #laravel #php #redis #backend 11 *d Implementing Redis Sentinel - Ensuring High Availability of Redis for Your Application Toan Nguyen Truong Toan Nguyen Truong Toan Nguyen Truong Follow Sep 29 Implementing Redis Sentinel - Ensuring High Availability of Redis for Your Application #redis #redissentinel #cachingredis #dockerize 5 * Redis Explained: Key Features, Use Cases, and a Hands-on Project Amit Chandra Amit Chandra Amit Chandra Follow Sep 29 Redis Explained: Key Features, Use Cases, and a Hands-on Project #redis #datastructures #python #datascience 3 * Set up Redis diskless replication Ježek Ježek Ježek Follow Sep 24 Set up Redis diskless replication #redis Add Comment 9 min read Improving Performance in .NET Applications with Asynchronous Programming and Caching Leandro Veiga Leandro Veiga Leandro Veiga Follow Sep 22 Improving Performance in .NET Applications with Asynchronous Programming and Caching #csharp #redis #webdev #programming 9 * Set up a Redis Sentinel Ježek Ježek Ježek Follow Sep 18 Set up a Redis Sentinel #redis 5 * Spring Boot Caching: A Comprehensive Guide to Improve Application Performance Tharindu Dulshan Fernando Tharindu Dulshan Fernando Tharindu Dulshan Fernando Follow Sep 17 Spring Boot Caching: A Comprehensive Guide to Improve Application Performance #springboot #springcache #redis #rediscaching * 4 Best Rate Limiting Solutions for Next.js Apps (2024) Ethan Lee Ethan Lee Ethan Lee Follow Sep 16 4 Best Rate Limiting Solutions for Next.js Apps (2024) #webdev #nextjs #redis #* 3 min read Redis with Node application * Sep 12 Redis with Node application #redis #database #devops #git Add Comment 2 min read How to Implement Rate Limiting in Next.js Quickly and Easily Asadbek Karimov Asadbek Karimov Asadbek Karimov Follow Sep 12 How to Implement Rate Limiting in Next.js Quickly and Easily #nextjs #redis #ratelimit #upstash 4 *d Supercharge your applications queries with caching sdbarlow sdbarlow sdbarlow Follow Sep 10 Supercharge your applications queries with caching #redis #cache #performance #flask 7 * Setting Up Redis as a Message Queue: A Step-by-Step Guide Chanh Le Chanh Le Chanh Le Follow Sep 10 Setting Up Redis as a Message Queue: A Step-by-Step Guide #redis #messagequeue #alarmsystems #distributedsystems Add Comment 4 min read System Architecture Overview for Message-Oriented Alarm Processing System Chanh Le Chanh Le Chanh Le Follow Sep 10 System Architecture Overview for Message-Oriented Alarm Processing System #distributedsystems #redis #eventdriven #moa Add Comment 4 min read Can Postgres replace Redis as a cache? Raphael De Lio Raphael De Lio Raphael De Lio Follow Sep 10 Can Postgres replace Redis as a cache? #redis #postgres #database #cache * Resolvendo Problemas de Performance com Redis e Bull * Rafael Avelar Campos Follow for 3X Pay Sep 10 Resolvendo Problemas de Performance com Redis e Bull #redis #bullmq #queue #nestjs 2 * Implement List Data Type for a Redis Clone Dheeraj Gopinath Dheeraj Gopinath Dheeraj Gopinath Follow Sep 9 Implement List Data Type for a Redis Clone #redis #rust #tokio #database Add Comment 10 min read How to implement a Distributed Lock using Redis server side digest server side digest server side digest Follow Aug 31 How to implement a Distributed Lock using Redis #webdev #tutorial #java #redis 215 reactions 15 comments 4 min read Laravel Redis Throttle Fine Tuning: Tutorial Valerio Valerio Valerio Follow for Inspector.dev Sep 2 Laravel Redis Throttle Fine Tuning: Tutorial #webdev #laravel #redis #devops 3 * 🚀 Ready-to-Use Node.js, Redis, and Docker Template shay bush shay bush shay bush Follow Aug 31 🚀 Ready-to-Use Node.js, Redis, and Docker Template #redis #docker #node #javascript 9 * Singleton Pattern, Backend State management and Pub Subs Jayant Jayant Jayant Follow Aug 28 Singleton Pattern, Backend State management and Pub Subs #backend #redis #redux #webdev 3 * SockManage — 🔌 Manage single active WebSocket connections per user with Redis-powered persistence S M Mahmudul Hasan S M Mahmudul Hasan S M Mahmudul Hasan Follow Oct 30 SockManage — 🔌 Manage single active WebSocket connections per user with Redis-powered persistence #node #websockets #redis #* Rest API: How to Prevent Duplicate Requests Effectively Hùng Trần Hùng Trần Hùng Trần Follow Oct 3 Rest API: How to Prevent Duplicate Requests Effectively #redis #springboot3 #deduplication #java17 Add Comment 10 min read 💻 Common Redis Commands 💾 * Oct 30 💻 Common Redis Commands 💾 #webdev #redis #cli #tutorial *... #discuss A Dating Tool for Returning Inmates 14 comments Is a Redis ORM a Horrible Idea? 33 comments When Shouldn't You Use Redis? New Why hosting more than one service on a single host in production can be a big problem New Community Discussion Thread — Redis x DEV Hackathon 22 comments Redis should solve data management... right? 14 comments Redis is redefining itself New Understanding Redis 3 comments Redis as primary database? New What do you use Redis for? 4 * How to implement a Distributed Lock using Redis Set up a Redis Sentinel 4 Best Rate Limiting Solutions for Next.js Apps (2024) Unlocking the Power of AWS ElastiCache with Valkey 7.2: Lower Costs, Serverless Flexibility, and Performance Gains Password Reset Feature: Sending Email in Golang Setting up Redis in a Next.js Application Using Redis for Caching in Laravel: A Step-by-Step Guide Build a Bare-Bones RESP parser Building a Scalable Slot Booking System with Redis Distributed Locks 🌐 Golang RESTful API with Gin, Gorm, Redis Cache 💾 Resolvendo Problemas de Performance com Redis e Bull Singleton Pattern, Backend State management and Pub Subs How to Implement Rate Limiting in Next.js Quickly and Easily Setting Up Redis as a Message Queue: A Step-by-Step Guide Supercharge your applications queries with caching 🚀 Ready-to-Use Node.js, Redis, and Docker Template 📝 30 COMMON REDIS INTERVIEW QUESTIONS 💾 Redis Implementation and best Practices Why Redis? An Intro with Practical Use Cases for Developers Building a Redis Clone: A Deep Dive into In-Memory Data Storag*nsor Neon * ",
    "url": "https://dev.to/t/redis"
  },
  {
    "body": "* Regular Expressions Follow Hide A regular expression (shortened as regex or regexp also referred to as regular expression) is a sequence of characters that specifies a search pattern. Create Post tag moderators 505 Posts Published Older #regex posts 1 2 3 4 5 6 7 8 *. 📝 *! * Nov 4 📝 *, * Add Comment 2 min read Build up your confidence with Regex: 5 Techniques to make it STICK Rijul Rajesh Rijul Rajesh Rijul Rajesh Follow Nov 3 Build up your confidence with Regex: 5 Techniques to make it STICK #regex #webdev #learning #productivity 10 *d From Regex Rampage to Lazy Bliss: My rjq Performance Adventure Mainak Bhattacharjee Mainak Bhattacharjee Mainak Bhattacharjee Follow Oct 12 From Regex Rampage to Lazy Bliss: My rjq Performance Adventure #rust #regex #performance #linux Add Comment 3 min read Regular Expressions Cristian Alaniz Cristian Alaniz Cristian Alaniz Follow Oct 10 Regular Expressions #regex #webdev #softwaredevelopment #python Add Comment 3 min read Regex for a Java Software Engineer Joao Marques Joao Marques Joao Marques Follow Oct 28 Regex for a Java Software Engineer #java #regex #beginners 13 * Building a Regex Engine in Go: Introducing MatchGo * Nov 4 Building a Regex Engine in Go: Introducing MatchGo #go #regex #* 3 min read Mastering Regular Expressions: A Semantic Approach to Regex Fábio Leal Fábio Leal Fábio Leal Follow Sep 29 Mastering Regular Expressions: A Semantic Approach to Regex #regex #webdev #javascript #productivity Add Comment 4 min read js / ts - expressão regular Leonardo Minora Leonardo Minora Leonardo Minora Follow Sep 20 js / ts - expressão regular #javascript #typescript #regex #webdev Add Comment 1 min read Intro to Regular Expressions Jae Jeong Jae Jeong Jae Jeong Follow Sep 12 Intro to Regular Expressions #regex #* Intro to Regular Expressions Jae Jeong Jae Jeong Jae Jeong Follow Sep 12 Intro to Regular Expressions #regex #* The importance of the environment in Regex pattern matching Lucas M. Lucas M. Lucas M. Follow Oct 16 The importance of the environment in Regex pattern matching #ruby #rails #regex #learning 3 * A Guide to Splitting Strings in JavaScript by Regex JAVATPOINT JAVATPOINT JAVATPOINT Follow Sep 4 A Guide to Splitting Strings in JavaScript by Regex #java #javascript #webdev #regex Add Comment 3 min read Taming the Regex Beast: A Beginner's Guide to Regular Expressions Baransel Baransel Baransel Follow Aug 30 Taming the Regex Beast: A Beginner's Guide to Regular Expressions #regex #beginners #programming #* 3 min read The JS string replace() method ChooKing ChooKing ChooKing Follow Jul 25 The JS string replace() method #javascript #string #regex #replace Add Comment 4 min read Learn Enough Regex Without Losing Your Mind Mohammad Kareem Mohammad Kareem Mohammad Kareem Follow Aug 17 Learn Enough Regex Without Losing Your Mind #regex #* Python RegEx Cheat Sheet Volodyslav Volodyslav Volodyslav Follow Jul 11 Python RegEx Cheat Sheet #python #regex #* 1 min read Converting snake_case to camelCase with vscode Alan Schio Alan Schio Alan Schio Follow Jul 17 Converting snake_case to camelCase with vscode #javascript #vscode #regex 4 * Improve Your Python Regex Performance Using Rust Adarsh Adarsh Adarsh Follow Jun 29 Improve Your Python Regex Performance Using Rust #python #rust #regex #programming * Regex, the good bits. Vincent Ge Vincent Ge Vincent Ge Follow Jun 25 Regex, the good bits. #regex #tooling #cli #javascript 66 reactions 9 comments 8 min read The interesting regex for Identifying Prime Numbers João Paulo João Paulo João Paulo Follow Jun 28 The interesting regex for Identifying Prime Numbers #regex #math Add Comment 1 min read Capturing named regex groups with JavaScript HAPPYCODING HAPPYCODING HAPPYCODING Follow May 25 Capturing named regex groups with JavaScript #regex #javascript 2 comments 2 min read ChatGPT - Prompts to Create Regular Expression Sandeep Kumar Sandeep Kumar Sandeep Kumar Follow Jun 13 ChatGPT - Prompts to Create Regular Expression #chatgpt #promptengineering #ai #regex 10 * Finding all HTML tags in a project not being self-closed Daniel Rotter Daniel Rotter Daniel Rotter Follow May 14 Finding all HTML tags in a project not being self-closed #html #regex #vue #cli Add Comment 2 min read Sorcerer’s Code: Spellbinding Regex match in Power Automate’s C# Plugin Bala Madhusoodhanan Bala Madhusoodhanan Bala Madhusoodhanan Follow Jun 10 Sorcerer’s Code: Spellbinding Regex match in Power Automate’s C# Plugin #powerautomate #powerfuldevs #regex #hacks 11 *d Learning Rust: Recursive Descent Parser prefixsum prefixsum prefixsum Follow Jun 8 Learning Rust: Recursive Descent Parser #rust #regex 4 * Automatically Test Your Regex Without Writing a Single C# Line of Code Dmitry Dorogoy Dmitry Dorogoy Dmitry Dorogoy Follow Jun 7 Automatically Test Your Regex Without Writing a Single C# Line of Code #regex #unittest #csharp 2 reactions * Regex: From Beginner to Expert in Find and Replace Silverindigo Silverindigo Silverindigo Follow May 27 Mastering Regex: From Beginner to Expert in Find and Replace #regex #pattern #search *ção às Expressões Regulares (Regex) Thiago Honorato Thiago Honorato Thiago Honorato Follow May 26 Introdução às Expressões Regulares (Regex) #regex #webdev #beginners #braziliandevs * Find What You Need: Pattern Matching in SQL Lohith Lohith Lohith Follow May 21 Find What You Need: Pattern Matching in SQL #sql #postgres #regex #pattern Add Comment 4 min read Demystifying Regex in Go Cherrypick14 Cherrypick14 Cherrypick14 Follow May 19 Demystifying Regex in Go #go #regex #beginners #programming 5 * Vamos falar de RegEx?(Parte2) Colocando o DART/FLUTTER em prática Toshi Ossada Toshi Ossada Toshi Ossada Follow for flutterbrasil Apr 20 Vamos falar de RegEx?(Parte2) Colocando o DART/FLUTTER em prática #regex #regularexpression #flutter #dart Add Comment 3 min read Vamos falar de RegEx? Toshi Ossada Toshi Ossada Toshi Ossada Follow for flutterbrasil Apr 20 Vamos falar de RegEx? #regex #regularexpression #flutter #dart Add Comment 10 min read C# Regex Performance: How To Squeeze Out Performance Dev Leader Dev Leader Dev Leader Follow Apr 15 C# Regex Performance: How To Squeeze Out Performance #regex #csharp #coding #performance Add Comment 7 min read Regular Expressions In C#: 3 Examples You Need To Know Dev Leader Dev Leader Dev Leader Follow Apr 10 Regular Expressions In C#: 3 Examples You Need To Know #regex #csharp #* 6 min read Regex Options In C#: A Beginner’s Guide To Powerful Pattern Matching Dev Leader Dev Leader Dev Leader Follow Apr 9 Regex Options In C#: A Beginner’s Guide To Powerful Pattern Matching #regex #csharp #* 8 min read Release 1.8 Contributions : ChatCraft.org🤖 Rachit Chawla Rachit Chawla Rachit Chawla Follow Apr 8 Release 1.8 Contributions : ChatCraft.org🤖 #typescript #regex #opensource #ai * Efficient String Matching Techniques in Python using regex SK RAJIBUL SK RAJIBUL SK RAJIBUL Follow Apr 7 Mastering Efficient String Matching Techniques in Python using regex #regex #python #softwaredevelopment #coding Add Comment 4 min read Improve your content searching/filtering workflow productivity with regexp-it-cli akgondber akgondber akgondber Follow May 5 Improve your content searching/filtering workflow productivity with regexp-it-cli #regex #node #cli #* 2 min read Regex pattern in Python: A beginners guide Osahenru Osahenru Osahenru Follow Apr 26 Regex pattern in Python: A beginners guide #python #beginners #regex #webdev 6 * C# Regular Expression Benchmarks – How To Avoid My Mistakes! Dev Leader Dev Leader Dev Leader Follow Apr 16 C# Regular Expression Benchmarks – How To Avoid My Mistakes! #performance #regex #dotnet #coding * Using Regex Search for MongoDB Queries Andrew Chaa Andrew Chaa Andrew Chaa Follow Mar 11 Using Regex Search for MongoDB Queries #mongodb #regex #* Manipulação de dados desnormalizados em Python: Utilizando re e lstrip() Ana Carolina Fonseca Barreto Ana Carolina Fonseca Barreto Ana Carolina Fonseca Barreto Follow for WoMakersCode Mar 28 Manipulação de dados desnormalizados em Python: Utilizando re e lstrip() #python #beginners #regex #wecoded 3 * Code cycle: may be the syntax query that currently supports the most languages wszgrcy wszgrcy wszgrcy Follow Feb 23 Code cycle: may be the syntax query that currently supports the most languages #search #regex #ast #parser Add Comment 2 min read Regex - Understanding those [^Str|ng\\$] for Beginners Elise Erickson Elise Erickson Elise Erickson Follow Mar 7 Regex - Understanding those [^Str|ng\\$] for Beginners #regex #beginners #cheatsheet #tutorial * Building a syntax highlighting extension for VS Code Matouš Borák Matouš Borák Matouš Borák Follow Mar 1 Building a syntax highlighting extension for VS Code #vscode #slim #rails #regex 8 *ad Practicing Raku Grammars On Exercism Daniel Mita Daniel Mita Daniel Mita Follow Feb 29 Practicing Raku Grammars On Exercism #raku #grammar #exercism #regex 2 * Understanding Regular Expressions in Python Kartik Mehta Kartik Mehta Kartik Mehta Follow Feb 9 Understanding Regular Expressions in Python #python #regex #tutorial #* Specifying Ranges Of Characters| Regular Expressions For the Absolute Beginner S*n Follow Jan 30 Specifying Ranges Of Characters| Regular Expressions For the Absolute Beginner #regex #* Add Comment 1 min read Demystifying Regular Expressions (Regex): A Chat Sheet Guide Md Hamim Md Hamim Md Hamim Follow Dec 27 '23 Demystifying Regular Expressions (Regex): A Chat Sheet Guide #regex #tutorial #cheatsheet Add Comment 2 min read Matching a character in a Character-set | Regular expressions for The Absolute Beginner S*n Follow Jan 28 Matching a character in a Character-set | Regular expressions for The Absolute Beginner #* #regex * Matching Special Characters (metacharacters) | Regular Expressions for the Absolute Beginner S*n Follow Jan 28 Matching Special Characters (metacharacters) | Regular Expressions for the Absolute Beginner #regex #* * Finding Characters at Positions in Text | Regular Expressions for the Absolute Beginner S*n Follow Jan 28 Finding Characters at Positions in Text | Regular Expressions for the Absolute Beginner #regex #* 1 min read Matching Any character (Using the dot (.))| Regular Expressions for the Absolute Beginner S*n Follow Jan 28 Matching Any character (Using the dot (.))| Regular Expressions for the Absolute Beginner #regex #programming #tutorial #basics Add Comment 1 min read Matching literal Strings | Regular expressions for The Absolute Beginner S*n Follow Jan 28 Matching literal Strings | Regular expressions for The Absolute Beginner #regex #programming #basic*o use PostgreSQL® SUBSTRING Francesco Tisiot Francesco Tisiot Francesco Tisiot Follow Jan 19 How to use PostgreSQL® SUBSTRING #postgres #string #substring #regex * 𝗪𝗵𝗮𝘁 𝗮𝗿𝗲 𝘁𝗵𝗲 𝗥𝗲𝗴𝗘𝘅 𝗣𝗮𝘁𝘁𝗲𝗿𝗻𝘀? Amr Azzam Amr Azzam Amr Azzam Follow Jan 17 𝗪𝗵𝗮𝘁 𝗮𝗿𝗲 𝘁𝗵𝗲 𝗥𝗲𝗴𝗘𝘅 𝗣𝗮𝘁𝘁𝗲𝗿𝗻𝘀? #regex #patterns * 𝗛𝗼𝘄 𝘁𝗼 𝘂𝘀𝗲 𝗥𝗲𝗴𝗘𝘅 𝗶𝗻 𝗗𝗮𝗿𝘁? Amr Azzam Amr Azzam Amr Azzam Follow Jan 17 𝗛𝗼𝘄 𝘁𝗼 𝘂𝘀𝗲 𝗥𝗲𝗴𝗘𝘅 𝗶𝗻 𝗗𝗮𝗿𝘁? #flutter #dart #regex 3 *d Applying regular expressions – matching single-letter words in text Alois Sečkár Alois Sečkár Alois Sečkár Follow Jan 14 Applying regular expressions – matching single-letter words in text #programming #productivity #learning #regex Add Comment 7 min read Regex in JS Explained Simon Chukwuebuka Simon Chukwuebuka Simon Chukwuebuka Follow Jan 20 Regex in JS Explained #javascript #regex #programming #beginners 5 * Transform Class React Components to Functional Chanvin Xiao Chanvin Xiao Chanvin Xiao Follow Dec 30 '23 Transform Class React Components to Functional #react #functionalreactiveprogramming #regex 1 reaction Add C* What are your code smells and/or best practices with regular expressions? 24 comments How do you feel about regex? 73 comments How do you regex? 24 comments Regex solution 4 comments What are some Regular Expression concepts you find hard to grok? 13 comments Should I share my love for regex ? New Where to start with regular expressions? New Regex..why can’t you just be normal? 🤯 9 comments My RegExp nightmare 27 comments What are you using RegEx for? 3 * Regex for a Java Software Engineer Build up your confidence with Regex: 5 Techniques to make it STICK Taming the Regex Beast: A Beginner's Guide to Regular Expressions The importance of the environment in Regex pattern matching recently queried SSN Validation Vim Delete Line Regular Expressions Not Regex Whitespac*nsor Neon * ",
    "url": "https://dev.to/t/regex"
  },
  {
    "body": "* Rust Follow Hide This tag is for posts related to the Rust programming language, including its libraries. * All articles and discussions should be about the Rust programming language and related frameworks and technologies. Questions are encouraged! Including the #help tag will make them easier to find. about #rust Rust is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. tag moderators 3901 Posts Published Older #rust posts 1 2 3 4 5 6 7 8 9 *. Rewind AI + Cursor AI = screenpipe: how we built a high performance Rust frame streaming API (OSS) Louis Beaumont Louis Beaumont Louis Beaumont Follow Nov 10 Rewind AI + Cursor AI = screenpipe: how we built a high performance Rust frame streaming API (OSS) #rust #ai #llm #tauri Add Comment 1 min read * 🚀 Trish Trish Trish Follow Nov 9 * 🚀 #rust #tutorial #programming #beginners 2 * Automated Testing With Rust TheoForger TheoForger TheoForger Follow Nov 9 Automated Testing With Rust #opensource #begin #rust Add Comment 3 min read napi-rs的使用 朱重迁 朱重迁 朱重迁 Follow Nov 5 napi-rs的使用 #rust Add Comment 1 min read Daliy.rust day 3 xavier2code xavier2code xavier2code Follow Nov 5 Daliy.rust day 3 #rust #beginners #* Daily.rust day 2 xavier2code xavier2code xavier2code Follow Nov 5 Daily.rust day 2 #rust #* 1 min read Daily.rust day 1 xavier2code xavier2code xavier2code Follow Nov 5 Daily.rust day 1 #rust #* 1 min read AI and I: 30 Rust Libraries in 10 Days bensatlantik bensatlantik bensatlantik Follow Nov 9 AI and I: 30 Rust Libraries in 10 Days #rust #ai Add Comment 4 min read * Megan Le* Nov 6 * #webdev #node #rust 2 * Introducing: From Scratch Code Jones Beach Jones Beach Jones Beach Follow Nov 4 Introducing: From Scratch Code #rust #python #mentorship #mentalhealth Add Comment 4 min read Impl Snake For Micro:bit - Embedded async Rust on BBC Micro:bit with Embassy Cyril Marpaud Cyril Marpaud Cyril Marpaud Follow Oct 28 Impl Snake For Micro:bit - Embedded async Rust on BBC Micro:bit with Embassy #rust #embeddedsystems #embassy #microbit 1 reaction Add Comment 17 min read Ownership xavier2code xavier2code xavier2code Follow Oct 28 Ownership #rust Add Comment 1 min read Variables and Data types in Rust: A simplified approach. Aliyu Adeniji Aliyu Adeniji Aliyu Adeniji Follow Oct 25 Variables and Data types in Rust: A simplified approach. #webdev #blockchain #rust #web3 Add Comment 7 min read Go and Rust comparison - building a task scheduler hiro hiro hiro Follow Oct 23 Go and Rust comparison - building a task scheduler #go #rust Add Comment 3 min read Boost Your Cybersecurity: Easy Guide to the Rust IP Port Sniffer! bhattji007 bhattji007 bhattji007 Follow Oct 22 Boost Your Cybersecurity: Easy Guide to the Rust IP Port Sniffer! #cybersecurity #rust #networkanalysis #webdev Add Comment 3 min read Rust + WASI: Application Monitoring Zane Zane Zane Follow Oct 23 Rust + WASI: Application Monitoring #webdev #programming #rust #javascript 6 * Extending a CLI Program with Subcommands in Rust Jaken Herman Jaken Herman Jaken Herman Follow Oct 17 Extending a CLI Program with Subcommands in Rust #cli #rust #clap #commandline * a CHIP-8 Emulator in Rust - An Advanced Adventure Trish Trish Trish Follow Oct 30 Building a CHIP-8 Emulator in Rust - An Advanced Adventure #rust #emulation #tutorial #programming 11 * Rust TUI Chat Application - Mastering Terminal User Interfaces Trish Trish Trish Follow Oct 29 Rust TUI Chat Application - Mastering Terminal User Interfaces #rust #tui #tutorial #programming 7 reactions Add C* Cargo and cargo.toml Alex Merced Alex Merced Alex Merced Follow Nov 5 Introduction to Cargo and cargo.toml #rust 10 * A simple tool for automated MySQL database dumps and restores Kremilly Kremilly Kremilly Follow Nov 5 A simple tool for automated MySQL database dumps and restores #rust #mysql #sysadmin #backup 7 * From Regex Rampage to Lazy Bliss: My rjq Performance Adventure Mainak Bhattacharjee Mainak Bhattacharjee Mainak Bhattacharjee Follow Oct 12 From Regex Rampage to Lazy Bliss: My rjq Performance Adventure #rust #regex #performance #linux Add Comment 3 min read Starting to Rust Doken Edgar Doken Edgar Doken Edgar Follow Nov 4 Starting to Rust #todayilearned #rust #* 7 min read Today We Rewrite History! TheoForger TheoForger TheoForger Follow Oct 12 Today We Rewrite History! #beginners #rust #git #* Interview with Prabhu Kiran Konda, Creator of Snail AI! CrabNebula CrabNebula CrabNebula Follow for CrabNebulaDev Oct 10 Interview with Prabhu Kiran Konda, Creator of Snail AI! #rust #tauri #svelte #sveltekit 7 *d How to Deploy Your Rig App on AWS Lambda: A Step-by-Step Guide Garance Buricatu Garance Buricatu Garance Buricatu Follow Nov 1 How to Deploy Your Rig App on AWS Lambda: A Step-by-Step Guide #rust #aws #llm #devops 10 *d Either Algebraic Data Type Alessandro Maclaine Alessandro Maclaine Alessandro Maclaine Follow Oct 9 Either Algebraic Data Type #functional #typescript #functionalreactiveprogramming #rust Add Comment 6 min read Interview with Klauss Andrei, Creator of FocusPocus.io! CrabNebula CrabNebula CrabNebula Follow for CrabNebulaDev Oct 7 Interview with Klauss Andrei, Creator of FocusPocus.io! #tauri #rust 11 *d Criando um Simulador de Banco de Dados em Rust: Parsing, Compilação e Execução de Consultas SQL Rafael Toledo Rafael Toledo Rafael Toledo Follow Oct 7 Criando um Simulador de Banco de Dados em Rust: Parsing, Compilação e Execução de Consultas SQL #rust #sql Add Comment 3 min read Using Polars in Rust for high-performance data analysis Megan Le* Oct 30 Using Polars in Rust for high-performance data analysis #webdev #rust 8 * An Introduction to the Arch Network: Decentralized Oracles for Web3 Rahul Biradar Rahul Biradar Rahul Biradar Follow Oct 6 An Introduction to the Arch Network: Decentralized Oracles for Web3 #rust #archnetwork #web3 #bitcoin Add Comment 2 min read Continuous Contribution * Amir Mullagaliev Follow Oct 5 Continuous Contribution #opensource #rust Add Comment 2 min read I love Rust/Tauri & Svelte Nasser El Idrissi Nasser El Idrissi Nasser El Idrissi Follow Nov 1 I love Rust/Tauri & Svelte #tauri #rust #svelte #opensource 167 reactions 24 comments 2 min read Actix Web - The Rust Framework for Web Development - Hello World Francesco Ciulla Francesco Ciulla Francesco Ciulla Follow Nov 5 Actix Web - The Rust Framework for Web Development - Hello World #programming #opensource #rust #beginners 18 reactions 5 comments 3 min read * - [4] Implement Plugin System ayou ayou ayou Follow Nov 5 * - [4] Implement Plugin System #webpack #rust 6 reactions 3 comments 6 min read Why Learn Rust Programming Language? Tech Guru Tech Guru Tech Guru Follow Nov 5 Why Learn Rust Programming Language? #webdev #rust #tutorial #learninhindi 3 react*ding a Redis Clone: A Deep Dive into In-Memory Data Storage * Nov 4 Building a Redis Clone: A Deep Dive into In-Memory Data Storage #opensource #redis #go #rust 14 * Starting to Rust Doken Edgar Doken Edgar Doken Edgar Follow Nov 4 Starting to Rust #todayilearned #rust #* 3 comments 7 min read Iterators in Rust Francesco Ciulla Francesco Ciulla Francesco Ciulla Follow Oct 15 Iterators in Rust #programming #opensource #rust #beginners * Survey: C to Rust conversion and corresponding tools Ayushi Sharma Ayushi Sharma Ayushi Sharma Follow Oct 1 Survey: C to Rust conversion and corresponding tools #rust #survey #c #development Add Comment 1 min read rs4j: Building a JNI Framework RedstoneWizard08 RedstoneWizard08 RedstoneWizard08 Follow Oct 1 rs4j: Building a JNI Framework #java #rust #framework #programming Add Comment 9 min read Setting up helix with rust on Alpine mutterings in the dark mutterings in the dark mutterings in the dark Follow Sep 30 Setting up helix with rust on Alpine #alpine #rust Add Comment 2 min read WebForms Core Technology in Rust, Ruby, Swift, GO, R, Elixir elanatframework elanatframework elanatframework Follow Sep 29 WebForms Core Technology in Rust, Ruby, Swift, GO, R, Elixir #go #rust #ruby #swift Add Comment 8 min read All the Rust Features Francesco Ciulla Francesco Ciulla Francesco Ciulla Follow Nov 1 All the Rust Features #programming #opensource #rust #* 5 min read Hacking WKWebview and WebContainers // or WebContainers are we there yet? Greg, The JavaScript Whisperer Greg, The JavaScript Whisperer Greg, The JavaScript Whisperer Follow Nov 1 Hacking WKWebview and WebContainers // or WebContainers are we there yet? #javascript #rust #macos #webassembly * A recap about the Zentrox development Wervice Wervice Wervice Follow Sep 28 A recap about the Zentrox development #rust #homelab #linux Add Comment 5 min read A Rusty Three-Way Merge TheoForger TheoForger TheoForger Follow Sep 27 A Rusty Three-Way Merge #opensource #beginners #git #rust Add Comment 4 min read Interview with Eson (Seven), Creator of DocKit! CrabNebula CrabNebula CrabNebula Follow for CrabNebulaDev Sep 26 Interview with Eson (Seven), Creator of DocKit! #rust #tauri #gui #interview 10 *d * - [3] Using NAPI-RS to Create Node.js Addons ayou ayou ayou Follow Oct 31 * - [3] Using NAPI-RS to Create Node.js Addons #webpack #rust 2 reactions * React v18 from Scratch Using WASM and Rust - [27] Implement useTransition ayou ayou ayou Follow Sep 26 Implement React v18 from Scratch Using WASM and Rust - [27] Implement useTransition #react #webassembly #rust 4 *d Secure Shell (SSH) Crates in Rust Michael Olayemi Michael Olayemi Michael Olayemi Follow Oct 18 Secure Shell (SSH) Crates in Rust #rust #beginners #learning * 2D Game Renderer in Rust - Let's Make a Mini RPG! Trish Trish Trish Follow Oct 28 2D Game Renderer in Rust - Let's Make a Mini RPG! #rust #gamedev #tutorial #programming 8 * * - [2] MVP Version ayou ayou ayou Follow Oct 28 * - [2] MVP Version #webpack #rust 10 react*d Inventory Software [Rust / Cursive] Bek Brace Bek Brace Bek Brace Follow Oct 28 Build Inventory Software [Rust / Cursive] #rust #programming #newbie #terminal 2 reactions Ad*🥁 my CLI based NUMERICAL SYSTEM CALCULATOR and SCRIPT DETECTOR Abhiram Abhiram Abhiram Follow Sep 23 Introducing🥁 my CLI based NUMERICAL SYSTEM CALCULATOR and SCRIPT DETECTOR #showdev #rust #cli #sharepoint Add Comment 2 min read Result<T, E> type in PHP Harutyun Mardirossian Harutyun Mardirossian Harutyun Mardirossian Follow Oct 26 Result<T, E> type in PHP #discuss #rust #go #php 3 reactions 7 comments 2 min read Building RustyNum: a NumPy Alternative with Rust and Python IgorSusmelj IgorSusmelj IgorSusmelj Follow Sep 22 Building RustyNum: a NumPy Alternative with Rust and Python #rust #python #* 🛠️ Rust vs Go: The Ultimate Showdown for Backend Development ⚡ * Sep 22 🛠️ Rust vs Go: The Ultimate Showdown for Backend Development ⚡ #rust #go #backenddevelopment #programming * Getting Started with Rust David Solé David Solé David Solé Follow Oct 25 Getting Started with Rust #rust #learning 2 *d * - [1] Parsing and Modifying JS Code Using Oxc ayou ayou ayou Follow Oct 24 * - [1] Parsing and Modifying JS Code Using Oxc #webpack #rust 11 * (not) Adding A Code Linter, and Why Rust is Awesome TheoForger TheoForger TheoForger Follow Nov 2 (not) Adding A Code Linter, and Why Rust is Awesome #opensource #beginners #rust * What makes Rust so difficult to learn? Eduardo Zepeda Eduardo Zepeda Eduardo Zepeda Follow Oct 24 What makes Rust so difficult to learn? #rust #opinion #* 7 min read loading... #discuss Result<T, E> type in PHP 7 comments What's your go to Rust resources? 16 comments The Rise of Rust in Cybersecurity: What You Need to Know 2 comments Rust: The Language That Won’t Let You Shoot Yourself in the Foot (Unlike C++) New Exploring Development Paradigms: Sequential, Asynchronous, and Multithreading Link Checkers in Rust New Golang or Rust, that is the question. 50 comments Design Patterns with Rust Types 1 comment Go vs Rust for web dev 14 comments Rust vs C and C++: A Concise Comparison for Developers 🚀 3 comments Tech Transfer from Old Languages to GO and Rust New trending guides/resources I love Rust/Tauri & Svelte Rust vs Go? Which Should You Learn in 2024 Rust fullstack web app! WASM + YEW + ROCKET 3 ways to use environment Variables in Rust Leptos + Tauri Tutorial ⚡ **Rust vs Node.js vs Go: Performance Comparison for Backend Development** 🏎️ ⚔️ Rust vs Go vs Bun vs Node.js: The Ultimate 2024 Performance Showdown 🚀 Why might Rust be a smart choice for developers today? In-Depth Guide to Working with Strings in Rust ⚔️ Rust vs Node.js: The Battle for Web Development Supremacy in 2024 🚀 Build YouTube API Data Fetching Using Rust Why Rig? 5 Compelling Reasons to Use Rig for Your Next LLM Project Working with Collections in Rust | A Comprehensive Guide Building cross-platform GUI apps in Rust using egui Building a JavaScript Runtime in Rust powered by the Nova engine Reading Files in Rust 2D Polygon Boolean Operations A Compelling Case for the Comma Operator How to Run Multiple Tokio Runtimes in a Rust Application 🚀 Optimized API Calls with TypeScript: Performance Showdown vs. Rust & Go 🛠️ recently queried Rust vs C++ Rust for Web Rust Calculator Rust gRPC * * ",
    "url": "https://dev.to/t/rust"
  },
  {
    "body": "* Security Follow Hide Hopefully not just an afterthought! * Write as you are pleased, be mindful and keep it civil. tag moderators 8813 Posts Published Older #security *46 *. The Most Potent Security Control on AWS Gaurav Raje Gaurav Raje Gaurav Raje * Nov 9 The Most Potent Security Control on AWS #iam #security #aws #* Authentication vs. Authorization: Key Differences and Security Risks Explained Golam_Mostafa Golam_Mostafa Golam_Mostafa Follow Nov 9 Authentication vs. Authorization: Key Differences and Security Risks Explained #webdev #security Add Comment 2 min read Threat Modeling for Non-Security Experts Nikola Popov Nikola Popov Nikola Popov Follow Nov 9 Threat Modeling for Non-Security Experts #security #devsecops #threatmanagement #productivity *ng JWT Security Principle Mohammad Tahzeeb Khan Mohammad Tahzeeb Khan Mohammad Tahzeeb Khan Follow Nov 9 Understanding JWT Security Principle #security #backend #json #jsonwebtoken Add Comment 2 min read Schema V*mSher* Security news weekly round-up - 8th November 2024 Habdul Hazeez Habdul Hazeez Habdul Hazeez Follow Nov 8 Security news weekly round-up - 8th November 2024 #security Add Comment 4 min read BSides Orlando 2024: Insights, Innovations, and Security Adventures Dwayne McDaniel Dwayne McDaniel Dwayne McDaniel Follow for GitGuardian Nov 8 BSides Orlando 2024: Insights, Innovations, and Security Adventures #techtalks #security #cybersecurity #devops Add Comment 7 min read Role-Based Access Control (RBAC) with Feature-Centric Approach Sushant Rahate Sushant Rahate Sushant Rahate Follow Nov 9 Role-Based Access Control (RBAC) with Feature-Centric Approach #rbac #webdev #tutorial #security * Security by Design: Building Trust in Blockchain, One Block at a Time Dmytro Klimenko Dmytro Klimenko Dmytro Klimenko Follow Nov 8 Security by Design: Building Trust in Blockchain, One Block at a Time #security #blockchain #webdev #* Hardware Security Modules: Preparing for the Post-Quantum Era Jet Jet Jet Follow Nov 8 Hardware Security Modules: Preparing for the Post-Quantum Era #cybersecurity #hsm #security Add Comment 5 min read Laravel Application Security Kachkol Asa Kachkol Asa Kachkol Asa Follow Nov 8 Laravel Application Security #webdev #php #laravel #security Add Comment 2 min read Migrando Aplicativos de uma Nuvem para Outra - Parte 1 rafaelbonilha rafaelbonilha rafaelbonilha Follow Nov 7 Migrando Aplicativos de uma Nuvem para Outra - Parte 1 #cloud #security #api #migration * Stored XSS Attacks and How to Mitigate Them with Hono kaazzu kaazzu kaazzu Follow Nov 7 Understanding Stored XSS Attacks and How to Mitigate Them with Hono #security #xss #hono Add Comment 3 min read How to Debug Ansible Playbooks * Nov 7 How to Debug Ansible Playbooks #ansible #devops #security 5 * What Was GCHQ's Project Tempora? Is This Still Was? Ethereal Aether Ethereal Aether Ethereal Aether Follow Nov 8 What Was GCHQ's Project Tempora? Is This Still Was? #techtalks #freedomofinternet #security #privacy 1 reaction Add Comment 13 min read Achieving Excellence in Analytics: Strengthening Data Security with Snowflake & Databricks Digital PES IT Digital PES IT Digital PES IT Follow Nov 7 Achieving Excellence in Analytics: Strengthening Data Security with Snowflake & Databricks #data #security #snowflakes #databricks Add Comment 2 min read 7 firewall management best practices in 2024 swetha suresh swetha suresh swetha suresh Follow Nov 7 7 firewall management best practices in 2024 #security #cybersecurity Add Comment 4 min read How to Reset Your Local Git Branch * Nov 7 How to Reset Your Local Git Branch #git #devops #security Add Comment 5 min read Greatly improve your Health Endpoint with these tips! Luca Luca Luca Follow Nov 6 Greatly improve your Health Endpoint with these tips! #api #programming #django #security 1 reaction * Kubernetes Jobs * Nov 6 Understanding Kubernetes Jobs #kubernetes #devops #security 4 *d Securing external-dns: Encrypting TXT Registry Records suin suin suin Follow Nov 6 Securing external-dns: Encrypting TXT Registry Records #kubernetes #aws #security #devops Add Comment 5 min read Guide to Writing Security Technology Blog Articles TECNO Security TECNO Security TECNO Security Follow Nov 6 Guide to Writing Security Technology Blog Articles #cybersecurity #writing #security 2 *d Learn about basic Authentication Isaac Tonyloi - SWE Isaac Tonyloi - SWE Isaac Tonyloi - SWE Follow Nov 5 Learn about basic Authentication #authentication #backenddevelopment #security * Implement a Secure, Dynamic Domain Approval System for Embeddable Widgets in Ruby on Rails David Paluy David Paluy David Paluy Follow Nov 6 Implement a Secure, Dynamic Domain Approval System for Embeddable Widgets in Ruby on Rails #rails #widget #security #embed Add Comment 3 min read Using SSH to Connect Local Git to Remote Repositories Bryan Lumbantobing Bryan Lumbantobing Bryan Lumbantobing Follow Nov 9 Using SSH to Connect Local Git to Remote Repositories #ssh #github #git #security 5 * Managing Dependabot PRs with dependabot-pr-manager 🤖 Tássio Tássio Tássio Follow Nov 8 Managing Dependabot PRs with dependabot-pr-manager 🤖 #security #management #dependabot #automation 14 * LINUX CHALLENGE, DAY 4 Blessing Ndubuisi Blessing Ndubuisi Blessing Ndubuisi Follow Nov 9 LINUX CHALLENGE, DAY 4 #devops #linux #security * Secure Video Conferencing and Encryption is the Future Krideo Krideo Krideo Follow Nov 5 Secure Video Conferencing and Encryption is the Future #videoconferencing #security #dataprivacy #endtoendencryption * a Reverse Proxy? How It Works and Why You Need It MarsProxies MarsProxies MarsProxies Follow Nov 5 What is a Reverse Proxy? How It Works and Why You Need It #proxy #security #tutorial Add Comment 8 min read Git Undo Last Commit * Nov 5 Git Undo Last Commit #git #devops #security 4 * Deleting Git Commits * Nov 5 Deleting Git Commits #git #devops #security 4 *d What is VPC Flow Log ? How to Enable VPC Log Orhan Kamo Orhan Kamo Orhan Kamo Follow Nov 4 What is VPC Flow Log ? How to Enable VPC Log #aws #vpc #security #awsvpc Add Comment 2 min read OWASP Global AppSec SF 2024: Empowering Developer Security As A Community Dwayne McDaniel Dwayne McDaniel Dwayne McDaniel Follow for GitGuardian Nov 4 OWASP Global AppSec SF 2024: Empowering Developer Security As A Community #security #cybersecurity #owasp #devops Add Comment 14 min read Fleet & CIS Benchmarks: Simplified, Cross-Platform Security * Nov 4 Fleet & CIS Benchmarks: Simplified, Cross-Platform Security #security #cis #cloud #learning Add Comment 3 min read Protecting Your Application with CSRF in Lith* 4 Protecting Your Application with CSRF in Lithe #php #csrf #lithe #security 3 * How to Safely Delete Local and Remote Branches in Git * Nov 4 How to Safely Delete Local and Remote Branches in Git #git #devops #security 7 * 𝖤𝗇𝖼𝗋𝗒𝗉𝗍𝗂𝗈𝗇 𝖺𝗇𝖽 𝖧𝖺𝗌𝗁𝗂𝗇𝗀: 𝖧𝗈𝗐 𝖳𝗁𝖾𝗒 𝖯𝗋𝗈𝗍𝖾𝖼𝗍 𝖸𝗈𝗎𝗋 𝖣𝖺𝗍𝖺 𝖣𝗂𝖿𝖿𝖾𝗋𝖾𝗇𝗍𝗅𝗒 Shahzaib Haider Shahzaib Haider Shahzaib Haider Follow Nov 2 𝖤𝗇𝖼𝗋𝗒𝗉𝗍𝗂𝗈𝗇 𝖺𝗇𝖽 𝖧𝖺𝗌𝗁𝗂𝗇𝗀: 𝖧𝗈𝗐 𝖳𝗁𝖾𝗒 𝖯𝗋𝗈𝗍𝖾𝖼𝗍 𝖸𝗈𝗎𝗋 𝖣𝖺𝗍𝖺 𝖣𝗂𝖿𝖿𝖾𝗋𝖾𝗇𝗍𝗅𝗒 #security #cybersecurity #hashing Add Comment 2 min read Advanced JWT Exploitation Techniques: Going Beyond the Basics Genius_InTrouble Genius_InTrouble Genius_InTrouble Follow Nov 2 Advanced JWT Exploitation Techniques: Going Beyond the Basics #webdev #security #jwt #testing Add Comment 5 min read What Does a Cyber Security Analyst Do? Turing Turing Turing Follow Nov 1 What Does a Cyber Security Analyst Do? #infosec #information #security Add Comment 2 min read Mseal in Linux: An un-hackable solution? Tawhid Tawhid Tawhid Follow Oct 31 Mseal in Linux: An un-hackable solution? #linux #opensource #security * The Human Hack: When Cybercriminals Become Master Manipulators Enzo dechaene Enzo dechaene Enzo dechaene Follow Oct 31 The Human Hack: When Cybercriminals Become Master Manipulators #security #beginners #career #cybersecurity Add Comment 2 min read Disable password expiration in Windows Sergio Peris Sergio Peris Sergio Peris Follow Oct 31 Disable password expiration in Windows #windows #security Add Comment 1 min read 🔒 Protégez votre site WordPress : Sécurité et Backup, les indispensables pour bien débuter 🔒 Clémentin Ly Clémentin Ly Clémentin Ly Follow Oct 31 🔒 Protégez votre site WordPress : Sécurité et Backup, les indispensables pour bien débuter 🔒 #wordpress #security #backup * What is CDR? Turing Turing Turing Follow Oct 31 What is CDR? #cdr #cyber #security #infosec Add Comment 3 min read Preventing Secrets from Leaking in Code with Talisman and Git Hooks 🔐 Dan Lucio Prada Dan Lucio Prada Dan Lucio Prada Follow Oct 31 Preventing Secrets from Leaking in Code with Talisman and Git Hooks 🔐 #devops #security #secrets #git Add Comment 1 min read 10 LLM Security Tools to Know in 2024 Pynt.io Pynt.io Pynt.io Follow Oct 31 10 LLM Security Tools to Know in 2024 #security #ai #tooling #cybersecurity Add Comment 1 min read Two Unconventional Ways to store Passwords: Honeywords & Rock Salt Marius V Marius V Marius V Follow Oct 31 Two Unconventional Ways to store Passwords: Honeywords & Rock Salt #honeywords #passwords #security #hashing Add Comment 5 min read OAuth2 Client Credentials Grant Type: When and How to Use It Igo*lli Follow Oct 30 OAuth2 Client Credentials Grant Type: When and How to Use It #security #authentication #clientcredentials #oauth2 Add Comment 4 min read OAuth2 vs. OpenID Connect: Understanding the Differences Igo*lli Follow Oct 30 OAuth2 vs. OpenID Connect: Understanding the Differences #security #openid #oidc #oauth2 Add Comment 3 min read Securing REST APIs with OAuth2 and JWT: A Comprehensive Guide Igo*lli Follow Oct 30 Securing REST APIs with OAuth2 and JWT: A Comprehensive Guide #security #spring #api #authentication Add Comment 4 min read Spring Security: Implementing JWT Authentication in Your Java Application Igo*lli Follow Oct 30 Spring Security: Implementing JWT Authentication in Your Java Application #security #spring #authentication #jwt Add Comment 4 min read Why You Should Be Using a Password Manager Igo*lli Follow Oct 30 Why You Should Be Using a Password Manager #security #password Add Comment 3 min read Passwordless Authentication Igo*lli Follow Oct 30 Passwordless Authentication #security #passwordless #authentication * VPNs: How They Work and Why You Need One Igo*lli Follow Oct 30 Understanding VPNs: How They Work and Why You Need One #security #vpn Add Comment 4 min read When to Start Secret Rotation Amin Rashidbeigi Amin Rashidbeigi Amin Rashidbeigi Follow Oct 30 When to Start Secret Rotation #security #secretrotation Add Comment 2 min read Securing Software Development with Secrets Vaults: A Comprehensive Guide Igo*lli Follow Oct 30 Securing Software Development with Secrets Vaults: A Comprehensive Guide #security #keyvault #secrets #vault Add Comment 3 min read Common OAuth2 Misconceptions: Debunking Myths for a Secure Implementation Igo*lli Follow Oct 30 Common OAuth2 Misconceptions: Debunking Myths for a Secure Implementation #security #authentication #authorization #oauth2 Add Comment 3 min read RFC 9068: The JWT Profile for OAuth2 Access Tokens — A Standard for Seamless Integration Igo*lli Follow Oct 30 RFC 9068: The JWT Profile for OAuth2 Access Tokens — A Standard for Seamless Integration #security #accesstoken #jwt #oauth2 Add Comment 3 min read Embracing Zero Trust Architecture: A Paradigm Shift in Cybersecurity Igo*lli Follow Oct 30 Embracing Zero Trust Architecture: A Paradigm Shift in Cybersecurity #security #zerotrust Add Comment 3 min read Safeguarding Your Data with AWS S3 Pre-Signed URLs: A Comprehensive Guide Igo*lli Follow Oct 30 Safeguarding Your Data with AWS S3 Pre-Signed URLs: A Comprehensive Guide #cloud #security #saws #s3 Add Comment 2 min read Securing Your AWS EC2 and S3 Communication: Best Practices for Enhanced Security rotem levi # Cloud Security rotem levi # Cloud Security rotem levi # Cloud Security Follow Nov 10 (1 hour ago) Securing Your AWS EC2 and S3 Communication: Best Practices for Enhanced Security #aws #security #ec2 #s3 Add C*s A beginner's guide to Termius: the ultimate terminal 10 comments What's the best VPN service? 21 comments Top 10 Cybersecurity Threats You Need to Know About This Year 2024 New How to ask for payment when finding security issues in a big website 6 comments Learn 10 Free Tips to Squash Digital Viruses During a Novel Work-From-Home Era 5 comments Artificial Intelligence and Coding 6 comments What is Apple thinking? 52 comments Who is a Hacker? New Password manager recommendations? 140 comments What are the worst security practices you've ever witnessed? 169 * Top 5 AI Models YOU Can Run Locally on YOUR Device! 🤯 Storing passwords safely (C#) Dockerfile Best Practices: Writing Efficient and Secure Docker Images Mastering Docker: Essential Best Practices for Efficiency and Security👮🏻 Resolve \"Blocked by CORS Policy: No 'Access-Control-Allow-Origin'\" in Laravel How to remove a leaked .env file from GitHub permanently... How to install all the tools you need and want in Kali Linux with one command (From top 10 to default to everything) About the gosec G115 drama, or how I faced back integer conversion overflow in Go 🤯 Database 101: SSL/TLS for beginners The Most Important Setting in Your Power Platform AuthenticationHandler in ASPNET Using reCAPTCHA v3 with Next.js 14 Securing APIs with YARP: Authentication and Authorization in .NET 8 Minimal APIs How to use PwnFox with Burp Suite Implement mTLS on AWS ALB with Self-Signed Certificates 🌐 Securing Kubernetes Secrets in AKS: Using Azure Key Vault with Managed and User Assigned Identities 🚀 Resolve Lambda URL Error - signature not match when using POST/PUT Manage secrets in AWS EKS with AWS Secrets Manager securely Session, Cookie, JWT, Token, SSO, and OAuth 2.0 Fetch External APIs in Next.js recently queried Zap Reports CTF for Beginners Letsencrypt Wildcard SSH Port Forwarding Ximertracks Javascript Environment Variables SSH Agent Forwarding Slowloris (Computer Security) Reverse Engineering Softwar*nsor Neon * ",
    "url": "https://dev.to/t/security"
  },
  {
    "body": "* # server Follow Hide Create Post 348 Posts Published Older #server posts 1 2 3 4 5 *. VPS Servers for Linux - Everything You Need to Know SSD Nodes SSD Nodes SSD Nodes Follow Nov 5 VPS Servers for Linux - Everything You Need to Know #linux #server #vps #ssdnodes Add Comment 9 min read How to write *ment 9 min read Path-Based Reverse Proxying with Caddy Sam Newby Sam Newby Sam Newby Follow for Vizalo Oct 30 Path-Based Reverse Proxying with Caddy #caddy #server #vps #webserver Add Comment 2 min read How I Set Up My Own Server (and Why You Should Too) Amélie Amélie Amélie Follow Oct 27 How I Set Up My Own Server (and Why You Should Too) #server #beginners #cpu #ram Add Comment 4 min read Unlock Efficient Data Exchange: Import & Export Excel in ASP.NET Core Ava Parker Ava Parker Ava Parker Follow Oct 10 Unlock Efficient Data Exchange: Import & Export Excel in ASP.NET Core #net #active #server #pages Add Comment 8 min read Copy file between server and local machine ( from windows to linux server ) hardyweb hardyweb hardyweb Follow Sep 5 Copy file between server and local machine ( from windows to linux server ) #scp #server #copy #windows * Client Boundaries Luigi Nicoletti Luigi Nicoletti Luigi Nicoletti Follow Aug 21 Client Boundaries #servercomponent #clientcomponent #client #server Add Comment 1 min read Server actions in Next.js Syed Mohammed Faham Syed Mohammed Faham Syed Mohammed Faham Follow Sep 6 Server actions in Next.js #server #actions #nextjs #security 3 * Self-host - Part 3 - MySQL and PostgreSQL Database Backup to Local Drive Davor Jovanović Davor Jovanović Davor Jovanović Follow Aug 13 Self-host - Part 3 - MySQL and PostgreSQL Database Backup to Local Drive #docker #database #shell #server 1 reaction 3 comments 12 min read need suggestions Monwar Hussain Monwar Hussain Monwar Hussain Follow Aug 13 need suggestions #networking #dns #protocol #server 1 comment 1 min read SQL Operators Made Easy for Beginners Shikha Gupta Shikha Gupta Shikha Gupta Follow Jul 9 SQL Operators Made Easy for Beginners #operators #beginners #server * Localhost in Development Mode? Richard Shaju Richard Shaju Richard Shaju Follow Aug 4 What is Localhost in Development Mode? #localhost #server #development #port 10 *d How to Customize the Fastify Logger Manuel Salinardi Manuel Salinardi Manuel Salinardi Follow Aug 21 How to Customize the Fastify Logger #fastify #pino #logging #server 2 *ad Websocket starter in Rust with client and server example George O. E. Campbell George O. E. Campbell George O. E. Campbell Follow Jul 30 Websocket starter in Rust with client and server example #rust #websocket #server #client 4 *d Unraid: Das ultimative Tool für deine Heimserver 🚀 Marco Marco Marco Follow Jun 26 Unraid: Das ultimative Tool für deine Heimserver 🚀 #unraid #homelab #server #nas Add Comment 7 min read Drawbacks to Using Rack Server Unit as Desktop Computer? Yash sharma Yash sharma Yash sharma Follow Jun 27 Drawbacks to Using Rack Server Unit as Desktop Computer? #rack #server #rackserver 1 comment 1 min read NextJs Server Actions: Why and How Harshal Ranjhani Harshal Ranjhani Harshal Ranjhani Follow for CodeParrot Aug 1 NextJs Server Actions: Why and How #webdev #nextjs #server #actions 7 * Self-host - Part 2 - Zero-Downtime Deployment using Docker Swarm Davor Jovanović Davor Jovanović Davor Jovanović Follow Jul 18 Self-host - Part 2 - Zero-Downtime Deployment using Docker Swarm #docker #shell #compose #server 2 * Decoding Web Hosting: Understanding the landlords of the digital Realm Landscape Freweini Beyene Freweini Beyene Freweini Beyene Follow Jun 12 Decoding Web Hosting: Understanding the landlords of the digital Realm Landscape #web #hosting #website #server Add Comment 3 min read Netex Server - Netex Sensör - Ağ Keşif Eklentisi Yaren Sarı Yaren Sarı Yaren Sarı Follow for Açıklab Jun 13 Netex Server - Netex Sensör - Ağ Keşif Eklentisi #netex #network #liman #server * Kaptan ve Tayfa - Kaptan Sunucu Kurulumu Yaren Sarı Yaren Sarı Yaren Sarı Follow for Açıklab Jun 4 Kaptan ve Tayfa - Kaptan Sunucu Kurulumu #kaptan #tayfa #liman #server * Server side (vulnerability scanning) BEIDI DINA SAMUEL BEIDI DINA SAMUEL BEIDI DINA SAMUEL Follow Jul 5 Server side (vulnerability scanning) #server #dirbuster #vulnerability #skipfish 6 reactions 1 comment 10 min read Next.js Server Actions Nafiz Mahmud Nafiz Mahmud Nafiz Mahmud Follow Jun 24 Next.js Server Actions #react #nextjs #server #fullstack 2 *d Advantages of Outsourcing Server Management supportfly supportfly supportfly Follow May 18 Advantages of Outsourcing Server Management #outsource #outsourcingservermanagement #server #webserver Add Comment 4 min read What happens when you type https://www.google.com in your browser and press Enter? Prince NZAMUWE(Fudji Bokande) Prince NZAMUWE(Fudji Bokande) Prince NZAMUWE(Fudji Bokande) Follow Apr 14 What happens when you type https://www.google.com in your browser and press Enter? #server #database #security #http Add Comment 4 min read Ways to Reduce Server Response Time lease packet lease packet lease packet Follow Mar 28 Ways to Reduce Server Response Time #server #dedicatedserver #cloudserve #leasepacket Add Comment 7 min read Setting Up a VPS on DigitalOcean to Build Your Blockchain Nodes Thomas Cosialls Thomas Cosialls Thomas Cosialls Follow Apr 23 Setting Up a VPS on DigitalOcean to Build Your Blockchain Nodes #vps #server #blockchain #nodes 4 *d Goodbye SSH: Discover Stalwart's Web-Based Admin Interface Stalwart Labs Stalwart Labs Stalwart Labs Follow Apr 9 Goodbye SSH: Discover Stalwart's Web-Based Admin Interface #web #admin #mail #server * Configuring SSH to Access Remote Server Eugene Zimin Eugene Zimin Eugene Zimin Follow Apr 7 Configuring SSH to Access Remote Server #server #ssh #remote #googlecloud 3 *ad Understanding Firewalls: A Comprehensive Guide Prashant Sharma Prashant Sharma Prashant Sharma Follow Mar 17 Understanding Firewalls: A Comprehensive Guide #firewall #server #backend #webdev 5 *d JSON Server and its Uses JustinW7 JustinW7 JustinW7 Follow Mar 24 JSON Server and its Uses #json #server #javascript * Ubuntu 22.04’e MinIO Server Kurulumu Yaren Sarı Yaren Sarı Yaren Sarı Follow for Açıklab Mar 17 Ubuntu 22.04’e MinIO Server Kurulumu #minio #server #ubuntu #opensource *ad Planning my Linux Homelab sureshsaragadam sureshsaragadam sureshsaragadam Follow Mar 16 Planning my Linux Homelab #webserver #server #linux Add Comment 1 min read Clonezilla ISO Kurulumu Yaren Sarı Yaren Sarı Yaren Sarı Follow for Açıklab Mar 11 Clonezilla ISO Kurulumu #clonezilla #iso #pardus #server 4 reactions Ad* Distributed SMTP Queues & Expressions Stalwart Labs Stalwart Labs Stalwart Labs Follow Feb 14 Introducing Distributed SMTP Queues & Expressions #smtp #distributed #mail #server Add Comment 3 min read How web technology works? - Part 01 Amjad C P Amjad C P Amjad C P Follow Feb 11 How web technology works? - Part 01 #learning #webtechnology #server #client 3 *d Exploring the Dynamics of Client-Server Architecture Akash Dev Akash Dev Akash Dev Follow Jan 24 Exploring the Dynamics of Client-Server Architecture #architecture #client #server #networking Add Comment 3 min read Hardening The Home Lab ODOT! ODOT! ODOT! Follow Jan 31 Hardening The Home Lab #linux #server #security #pentesting 11 *d Secure NextJS Server Actions Using Body Validation Timo Wernars Timo Wernars Timo Wernars Follow Jan 25 Secure NextJS Server Actions Using Body Validation #nextjs #react #server #actions 6 * understand short polling with example Ritu Raj Singh Ritu Raj Singh Ritu Raj Singh Follow Jan 23 understand short polling with example #rookiebackend #client #server #communication Add Comment 3 min read Things to Note Before Migrating Servers Akshay Kaushik Akshay Kaushik Akshay Kaushik Follow Jan 3 Things to Note Before Migrating Servers #server #node #django #ubuntu Add Comment 4 min read SMTP Smuggling: What it is and how Stalwart is protected Stalwart Labs Stalwart Labs Stalwart Labs Follow Jan 2 SMTP Smuggling: What it is and how Stalwart is protected #email #server #smtp #smuggling Add Comment 3 min read Local DNS cache server - Smartdns-rs hardyweb hardyweb hardyweb Follow Jan 1 Local DNS cache server - Smartdns-rs #server #dns #dnscache #internet * Elevating Performance and Flexibility in Stalwart Mail Server Stalwart Labs Stalwart Labs Stalwart Labs Follow Dec 27 '23 Elevating Performance and Flexibility in Stalwart Mail Server #email #server #performance * RAID Server commands | tw_cli | MegaCli | mdadm HasOne HasOne HasOne Follow Dec 21 '23 RAID Server commands | tw_cli | MegaCli | mdadm #linux #raid #sysadmin #server * Linux VPS vs. Windows VPS: Which One Should You Choose? Josie-Peterson Josie-Peterson Josie-Peterson Follow for KemuHost Dec 18 '23 Linux VPS vs. Windows VPS: Which One Should You Choose? #linux #windows #vps #server 5 * 13 Tips to Reduce Energy Costs on Your HomeLab Server Anurag Vishwakarma Anurag Vishwakarma Anurag Vishwakarma Follow for firstfinger Nov 21 '23 13 Tips to Reduce Energy Costs on Your HomeLab Server #devops #cloud #network #server 2 *d Server Rack Malaysia Server 2umalaysia Server 2umalaysia Server 2umalaysia Follow Oct 18 '23 Server Rack Malaysia #serverless #server Add Comment 3 min read How to build the Client-Server Architecture using Self Hosted WCF Service and WPF Client? Harshal Suthar Harshal Suthar Harshal Suthar Follow Nov 8 '23 How to build the Client-Server Architecture using Self Hosted WCF Service and WPF Client? #webdev #wpf #wcf #server 3 * Build WebSocket Server and Client in Python Sachin Sachin Sachin Follow Oct 29 '23 Build WebSocket Server and Client in Python #python #websocket #server #programming 5 * 50 Essential Linux Server Security Hardening Tips Josie-Peterson Josie-Peterson Josie-Peterson Follow Sep 26 '23 50 Essential Linux Server Security Hardening Tips #linux #server #security #web 4 * Isolating AWS Resources for a Secure Multi-Tenant SaaS Public Cloud Group Public Cloud Group Public Cloud Group Follow for kreuzwerker Sep 25 '23 Isolating AWS Resources for a Secure Multi-Tenant SaaS #aws #cloud #server #saas * OpenBSD httpd 7.3: Web サーバー nabbisen nabbisen nabbisen Follow Aug 6 '23 OpenBSD httpd 7.3: Web サーバー #openbsd #httpd #web #server 3 *d Step-by-Step Guide: Linux Server Backup Methods jchristopher0033 jchristopher0033 jchristopher0033 Follow Jul 26 '23 Step-by-Step Guide: Linux Server Backup Methods #linux #server #backup 4 * Connect swagger in NodeJS server Bipon Biswas Bipon Biswas Bipon Biswas Follow Jul 9 '23 Connect swagger in NodeJS server #node #server #swagger * a Ktor Server with Gradle and SDKMAN!: A Step-by-Step Guide Cherif Bouchelaghem Cherif Bouchelaghem Cherif Bouchelaghem Follow Jul 8 '23 Creating a Ktor Server with Gradle and SDKMAN!: A Step-by-Step Guide #ktor #kotlin #server #gradle 5 *d Web server, database and other important settings schBenedikt schBenedikt schBenedikt Follow for Technology Schächner Jul 7 '23 Web server, database and other important settings #discuss #server #tutorial #database Add Comment 2 min read How to install Ubuntu on ANY PC (EASY! 💯% + Working) schBenedikt schBenedikt schBenedikt Follow for Technology Schächner Jul 2 '23 How to install Ubuntu on ANY PC (EASY! 💯% + Working) #ubuntu #server #tutorial #selfhosted Add Comment 3 min read Host your own server schBenedikt schBenedikt schBenedikt Follow for Technology Schächner Jul 2 '23 Host your own server #server #selfhosted #tutorial 1 comment 1 min read Remote SSH Server Ubuntu with Terminal Command Asep Septiadi Asep Septiadi Asep Septiadi Follow Jun 20 '23 Remote SSH Server Ubuntu with Terminal Command #remote #server #ssh * Unlocking the Power of AWS Route 53: Your Complete Guide to DNS Management S3CloudHub S3CloudHub S3CloudHub Follow Sep 25 Unlocking the Power of AWS Route 53: Your Complete Guide to DNS Management #aws #route53 #dns #server Add Comment 5 min read Exploring Add-On Cards: Enhancing Your Computer's Capabilities avaanderson avaanderson avaanderson Follow Apr 3 Exploring Add-On Cards: Enhancing Your Computer's Capabilities #tech #hardware #server #blink Add C* Which is the best Linux server distro? 81 comments What do you use Cron jobs for? 25 comments Which Server Framework do you prefer? 6 comments How do you setup your website? 2 comments Web server, database and other important settings New Discord Servers 2 comments Can it be done to make a server with an old computer just to upload my website? 2 comments Serverless or Server? 4 comments Handling server/application crashes New Your preference between Apache and NGINX? 2 * Server actions in Next.js recently queried Node Express Murmur Server*nsor Neon * ",
    "url": "https://dev.to/t/server"
  },
  {
    "body": "* Serverless Follow Hide All computing — without servers! Create Post tag moderators 5729 Posts Published Older #serverless posts 1 2 3 4 5 6 7 8 9 *. A Decade of AWS Lambda and ECS: My Journey of Growth and Gratitude Avinash Dalvi Avinash Dalvi Avinash Dalvi * Nov 9 A Decade of AWS Lambda and ECS: My Journey of Growth and Gratitude #lambda #ecs #aws #serverless 5 * Obteniendo una insignia Serverless de AWS kevin kevin kevin Follow Nov 6 Obteniendo una insignia Serverless de AWS #aws #serverless #* Optimizaciones Lambda AWS 👨‍💻 kevin kevin kevin Follow Nov 6 Optimizaciones Lambda AWS 👨‍💻 #aws #lambda #serverless #* Creating AWS layer with Docker. Anariak Anariak Anariak Follow Nov 6 Creating AWS layer with Docker. #aws #serverless #python #docker Add Comment 2 min read Query DynamoDB with SQL using Athena - Leveraging DynamoDB Exports to S3 (1/2) * Marko - ServerlessLife.com Follow Nov 5 Query DynamoDB with SQL using Athena - Leveraging DynamoDB Exports to S3 (1/2) #aws #dynamodb #athena #serverless Add Comment 2 min read Going Serverless with Dart: AWS Lambda for Flutter Devs Dinko Marinac Dinko Marinac Dinko Marinac Follow Nov 4 Going Serverless with Dart: AWS Lambda for Flutter Devs #aws #dart #lambda #serverless Add Comment 8 min read Why serverless is no magic wand? John Antony John Antony John Antony Follow Nov 8 Why serverless is no magic wand? #cloudcomputing #lambda #serverless Add Comment 4 min read Leveraging GenServer and Queueing Techniques: Handling API Rate Limits to AI Inference services Ahsan Nabi Dar Ahsan Nabi Dar Ahsan Nabi Dar Follow Nov 2 Leveraging GenServer and Queueing Techniques: Handling API Rate Limits to AI Inference services #elixir #api #serverless #ai Add Comment 3 min read * Serverless Web App on AWS Yuvraj Thapa Chhetri Yuvraj Thapa Chhetri Yuvraj Thapa Chhetri Follow Nov 6 * Serverless Web App on AWS #aws #awscommunitybuilder #serverless #devops 2 * Securing Customer Support with AWS Services and Slack Integration Nada Ahmed Nada Ahmed Nada Ahmed Follow Oct 30 Securing Customer Support with AWS Services and Slack Integration #serverless #dynamodb #s3 #securitycommunication * How to resolv*' * Oct 25 How to resolv*' #yaml #node #serverless #lambda Add Comment 1 min read Say Goodbye to Orphaned Snapshots: Automate Cleanup with Serverless, Terraform, and AWS EventBridge! Vikas Arora Vikas Arora Vikas Arora Follow Oct 29 Say Goodbye to Orphaned Snapshots: Automate Cleanup with Serverless, Terraform, and AWS EventBridge! #devops #python #serverless #aws * Using Google Cloud Functions for Three-Tier Data Processing with Google Composer and Automated Deployments via GitHub Actions Jader Lima Jader Lima Jader Lima Follow Oct 25 Using Google Cloud Functions for Three-Tier Data Processing with Google Composer and Automated Deployments via GitHub Actions #gcp #python #airflow #serverless Add Comment 11 min read AWS IoT Core Simplified - Part 4: Rules Robert Slootjes Robert Slootjes Robert Slootjes Follow Oct 18 AWS IoT Core Simplified - Part 4: Rules #serverless #mqtt #aws #iot Add Comment 4 min read Zero-Touch Cloud Security: Automating Threat Detection & Remediation with Wiz, AWS Security Hub, and GitHub Actions * Oct 18 Zero-Touch Cloud Security: Automating Threat Detection & Remediation with Wiz, AWS Security Hub, and GitHub Actions #cspm #wiz #aws #serverless * AWS OpenSearch Serverless Pricing: How It Differs from Traditional Serverless Services Salam Shaik Salam Shaik Salam Shaik * Oct 21 Exploring AWS OpenSearch Serverless Pricing: How It Differs from Traditional Serverless Services #aws #opensearch #awscost #serverless 3 * Modernize or Build New Cloud Apps Without the Headaches Marcio Figueiredo 👨‍💻 Marcio Figueiredo 👨‍💻 Marcio Figueiredo 👨‍💻 Follow Oct 16 Modernize or Build New Cloud Apps Without the Headaches #gcp #google #cloud #serverless Add Comment 4 min read Diving into Serverless: Azure Durable Functions in Node JS (+Troubleshooting) Subhodeep Sarkar Subhodeep Sarkar Subhodeep Sarkar Follow Oct 16 Diving into Serverless: Azure Durable Functions in Node JS (+Troubleshooting) #azure #cloud #serverless #javascript * Unlocking AWS Lambda@Edge: Bringing Serverless to the Edge of the Cloud Ahmad Mirzay Ahmad Mirzay Ahmad Mirzay Follow Oct 16 Unlocking AWS Lambda@Edge: Bringing Serverless to the Edge of the Cloud #programming #devops #serverless #aws Add Comment 4 min read Deploying a Serverless Application with AWS Lambda and EventBridge: A Detailed Guide Day 30 of my 90 -Day Devops Journey Arbythecoder Arbythecoder Arbythecoder Follow Oct 15 Deploying a Serverless Application with AWS Lambda and EventBridge: A Detailed Guide Day 30 of my 90 -Day Devops Journey #serverless #aws #devops #* 3 min read Effortless Debugging: AWS CDK TypeScript Projects in VSCode Ian Ian Ian Follow Oct 27 Effortless Debugging: AWS CDK TypeScript Projects in VSCode #aws #serverless #cdk #vscode 6 *d Smart File Organizer Using AWS Lambda & S3 - (Let's Build 🏗️ Series) awedis awedis awedis Follow for AWS Heroes Nov 4 Smart File Organizer Using AWS Lambda & S3 - (Let's Build 🏗️ Series) #aws #serverless #terraform #go 7 * * 4 Measuring cold and warm starts using different Lambda memory settings Vadym Kazulkin Vadym Kazulkin Vadym Kazulkin * Nov 4 * 4 Measuring cold and warm starts using different Lambda memory settings #java #aws #serverless #graalvm 9 *d Open Unclickable Instagram Post Description Links with AWS Lambda and iOS Shortcuts Gabriel Koo Gabriel Koo Gabriel Koo * Nov 3 Open Unclickable Instagram Post Description Links with AWS Lambda and iOS Shortcuts #instagram #serverless #ios #aws 4 * AWS Lambda with RDS Data API (TypeScript) szymon-szym szymon-szym szymon-szym * Nov 2 AWS Lambda with RDS Data API (TypeScript) #aws #serverless #typescript #node 9 *d Custom API Analytics with AWS Serverless Vibhor Agarwal Vibhor Agarwal Vibhor Agarwal Follow Oct 9 Custom API Analytics with AWS Serverless #timestream #aws #serverless #sqs Add Comment 12 min read Self-Hosting vs. Serverless: A Deep Dive into the Debate Developer Service Developer Service Developer Service Follow Oct 8 Self-Hosting vs. Serverless: A Deep Dive into the Debate #selfhosting #serverless Add Comment 6 min read Serverless App - Extração de Textos com Exibição de Layouts com Textract Gustavo Mainchein Gustavo Mainchein Gustavo Mainchein Follow Oct 7 Serverless App - Extração de Textos com Exibição de Layouts com Textract #amazontextract #aws #serverless #community Add Comment 9 min read How to optimize BitNinja for weak servers ispmanager.com ispmanager.com ispmanager.com Follow for Ispmanager Oct 10 How to optimize BitNinja for weak servers #security #serverless #ai 8 *d How We Moved from AWS to Fly.io Peter Mbanugo Peter Mbanugo Peter Mbanugo Follow Nov 1 How We Moved from AWS to Fly.io #webdev #cloud #serverless 188 reactions * DynamoDB: Batch Operations Explained Lorenzo Hidalgo Gadea Lorenzo Hidalgo Gadea Lorenzo Hidalgo Gadea * Oct 16 Mastering DynamoDB: Batch Operations Explained #dynamodb #aws #serverless #nosql 6 * Jamstack Architecture: The Future of Fast, Secure Websites Okoye *amaka Follow Oct 3 Jamstack Architecture: The Future of Fast, Secure Websites #jamstack #webdev #serverless #nextjs * an AI-Powered iOS Chat App with Amazon Bedrock and Swift Rashwan Lazkani Rashwan Lazkani Rashwan Lazkani * Oct 31 Building an AI-Powered iOS Chat App with Amazon Bedrock and Swift #aws #serverless #ai #ios 18 reactions 7 comments 7 min read Unleashing the Power of Serverless Computing: A Comprehensive Guide Ashis*apati Follow Oct 16 Unleashing the Power of Serverless Computing: A Comprehensive Guide #tutorial #productivity #serverless #fullstack * AWS Serverless: How to Stop EC2 using Event Bridge and Lambda Girish Bhatia Girish Bhatia Girish Bhatia Follow Oct 3 AWS Serverless: How to Stop EC2 using Event Bridge and Lambda #lambda #aws #eventbridge #serverless 2 *d Lightweight Kubernetes and Wasm is a Perfect Combo Jasmine Mae Jasmine Mae Jasmine Mae Follow for Fermyon Nov 1 Lightweight Kubernetes and Wasm is a Perfect Combo #kubernetes #webassembly #serverless #spinkube 48 * Serverless Developer Experience is Finally Great with Lambda Live Debugger * Marko - ServerlessLife.com Follow Sep 30 Serverless Developer Experience is Finally Great with Lambda Live Debugger #lambda #serverless #aws * Automatically transcribe your video files uploaded to S3 using AWS Transcribe Ahamed Ruyefa Ahamed Ruyefa Ahamed Ruyefa Follow Oct 21 Automatically transcribe your video files uploaded to S3 using AWS Transcribe #aws #s3 #lambda #serverless 6 * AWS re:Invent 2024 — My Selection Of Sessions Ran Isenberg Ran Isenberg Ran Isenberg Follow for AWS Heroes Oct 2 AWS re:Invent 2024 — My Selection Of Sessions #aws #reinvent #serverless #vegas 2 *ad Serverless AI powered content moderation service Jimmy Dahlqvist Jimmy Dahlqvist Jimmy Dahlqvist Follow for AWS Heroes Oct 31 Serverless AI powered content moderation service #aws #ai #security #serverless 8 * Why It's Time to Challenge the Status Quo of CMS Development Byron Wade Byron Wade Byron Wade Follow Oct 1 Why It's Time to Challenge the Status Quo of CMS Development #opensource #serverless #wordpress #nextjs * Simplicity Is An Achievement Seth Orell Seth Orell Seth Orell * Oct 29 Simplicity Is An Achievement #aws #serverless #progress * Parameter Management at Scale: How Multi-Region Configurations Saved My Application Daniele Frasca Daniele Frasca Daniele Frasca * Oct 29 Parameter Management at Scale: How Multi-Region Configurations Saved My Application #aws #serverless #awssam 2 * * 3 Measuring cold and warm starts Vadym Kazulkin Vadym Kazulkin Vadym Kazulkin * Oct 28 * 3 Measuring cold and warm starts #java #aws #serverless #graalvm 3 *d Testing EventBridge with Serverless Seth Orell Seth Orell Seth Orell * Oct 15 Testing EventBridge with Serverless #aws #serverless #eventdriven #testing 6 * Data API for Amazon Aurora Serverless v2 with AWS SDK for Java - Part 10 Aurora Serverless v2 Data API meets DevOps Guru or not? Vadym Kazulkin Vadym Kazulkin Vadym Kazulkin * Oct 14 Data API for Amazon Aurora Serverless v2 with AWS SDK for Java - Part 10 Aurora Serverless v2 Data API meets DevOps Guru or not? #aws #java #serverless #database 4 * Hosting a Next.js (App Router) app on Amazon S3 Simone Lusenti Simone Lusenti Simone Lusenti Follow Oct 23 Hosting a Next.js (App Router) app on Amazon S3 #nextjs #aws #serverless * GCP Tech Stack for a Serverless NextJS Web App * Charlotte Towell Follow Oct 23 GCP Tech Stack for a Serverless NextJS Web App #nextjs #googlecloud #webdev #serverless * Serverless Integration: Automate Your Workflow with Logic App Celestina Odili Celestina Odili Celestina Odili Follow Sep 18 Serverless Integration: Automate Your Workflow with Logic App #logicapps #serverless #automation #devops Add Comment 3 min read Hosting apps in the cloud with Google App Engine in 2024 Wesley Chun (@wescpy) Wesley Chun (@wescpy) Wesley Chun (@wescpy) Follow Oct 22 Hosting apps in the cloud with Google App Engine in 2024 #python #webdev #googlecloud #serverless 1 reaction 1 comment 20 min read Deploy ComfyUI with RunPod Serverless Husnain Mustafa Husnain Mustafa Husnain Mustafa Follow Oct 22 Deploy ComfyUI with RunPod Serverless #comfy #runpod #serverless #s3 6 * Crowdstrike enters the Serverless market Thijs de Z Thijs de Z Thijs de Z Follow Oct 22 Crowdstrike enters the Serverless market #serverless #lambda #security #vercel Add Comment 4 min read Serverless Architecture with Next.js 14 and Next.js Actions: A Practical Guide saurabh kamble saurabh kamble saurabh kamble Follow Oct 21 Serverless Architecture with Next.js 14 and Next.js Actions: A Practical Guide #nextjs #mongodb #serverless #typescript 2 reactions * AWS Availability Zones: Boosting SaaS Resilience and Uptime Ran Isenberg Ran Isenberg Ran Isenberg Follow for AWS Heroes Oct 21 Understanding AWS Availability Zones: Boosting SaaS Resilience and Uptime #aws #serverless #vpc #availability 3 *d * 2 How to develop and deploy Lambda function with Custom Runtime Vadym Kazulkin Vadym Kazulkin Vadym Kazulkin * Oct 21 * 2 How to develop and deploy Lambda function with Custom Runtime #java #aws #serverless #graalvm 6 * 70% Faster Deployments and High-Performance Private Network alisdairbr alisdairbr alisdairbr Follow for Koyeb Sep 17 70% Faster Deployments and High-Performance Private Network #networking #cloud #serverless #* New Dashboard: Build, Run, and Scale Apps in Minutes with a Simple and Elegant Interface alisdairbr alisdairbr alisdairbr Follow for Koyeb Sep 16 New Dashboard: Build, Run, and Scale Apps in Minutes with a Simple and Elegant Interface #ux #ui #cloud #serverless Add Comment 5 min read Exploring the Matillion API in Data Productivity Cloud (DPC): Generic Pipeline Monitoring as well as Execution * Dr. Malte Polley Follow Sep 16 Exploring the Matillion API in Data Productivity Cloud (DPC): Generic Pipeline Monitoring as well as Execution #matillion #aws #serverless #eventdriven Add Comment 9 min read Part 1 - Deploying a PHP (Laravel) application to Amazon ECS Simone Lusenti Simone Lusenti Simone Lusenti Follow Oct 19 Part 1 - Deploying a PHP (Laravel) application to Amazon ECS #aws #docker #serverless #php 2 * AWS Lambda with Go, initial boilerplate szymon-szym szymon-szym szymon-szym * Oct 16 AWS Lambda with Go, initial boilerplate #go #aws #serverless 8 * * Ray-D-Song Ray-D-Song Ray-D-Song Follow Nov 10 (6 hours ago) * #* #serverless Add C* You're running an online conference but get called out for having an all-male speaker lineup 2 days prior. Yo, What do you do? 19 comments What's the WORST thing about serverless? 43 comments Serverless OR Microservices 2 comments Best Headless CMS for 2020 40 comments Why Do You Need a Backend? 32 comments Infrastructure from code - not 'as', but 'from' 2 comments What's your most commonly used serverless function ? 2 comments Amazon FBA Pros and Cons: Is It Right for Your E-Commerce Business? New How feasible is Serverless technology for startups? 19 comments Can you use Serverless Everywhere? Any Drawbacks? 2 * How We Moved from AWS to Fly.io Lightweight Kubernetes and Wasm is a Perfect Combo Serverless CI/CD: How to Build a Pipeline Without Servers Part 1 - Deploying a PHP (Laravel) application to Amazon ECS Exploring AWS OpenSearch Serverless Pricing: How It Differs from Traditional Serverless Services Unlocking the Power of AWS ElastiCache with Valkey 7.2: Lower Costs, Serverless Flexibility, and Performance Gains Spring Boot 3 application on AWS Lambda - Part 11 Measuring cold and warm starts of Lambda function using Docker Container Image Deploying a Serverless Function with AWS Lambda * 2 - introducing Bref runtime AWS Lambda and S3 Just Got Smarter: How AWS Prevents Recursive Loops Automatically AWS re:Invent 2024 — My Selection Of Sessions Build your own edge computing app * 2 How to develop and deploy Lambda function with Custom Runtime * 1 - What's serverless? Smart File Organizer Using AWS Lambda & S3 - (Let's Build 🏗️ Series) * 1 Introduction to GraalVM and its native image capabilities Implementing a Visitor Counter on Azure Resume Challenge * How to choose a hosting control panel: a review of 5 popular options AWS Lambda with Go, initial boilerplate recently queried Azure Free Tier How to Add Commands on Twitch * * ",
    "url": "https://dev.to/t/serverless"
  },
  {
    "body": "* Side Projects * 687 Posts Published Older #sideprojects posts 1 2 3 4 5 6 7 8 9 *. From AI Code to $266 MRR in 7 Days: The TweetFast Story Carlos Arthur Carlos Arthur Carlos Arthur Follow Nov 7 From AI Code to $266 MRR in 7 Days: The TweetFast Story #beginners #ai #sideprojects #typescript Add Comment 3 * * Add Comment 1 min read Feedback Glow - Canny alternative for indie makers and small teams Nguyen Xuan hoa Nguyen Xuan hoa Nguyen Xuan hoa Follow Nov 6 Feedback Glow - Canny alternative for indie makers and small teams #nextjs #laravel #sideprojects #saas Add Comment 1 min read Monitoring and Logging in Jenkins: A Complete Guide Avesh Avesh Avesh Follow Nov 2 Monitoring and Logging in Jenkins: A Complete Guide #jenkins #docker #monitoring #sideprojects Add Comment 5 min read I built my own search engine FDiaz FDiaz FDiaz Follow Nov 1 I built my own search engine #searchengine #go #docker #sideprojects Add Comment 5 min read Starting a new project - Probtrix Umair Iftikhar Umair Iftikhar Umair Iftikhar Follow Oct 22 Starting a new project - Probtrix #sideprojects #idea #random #probtrix Add Comment 1 min read Automating Kubernetes Cluster Deployment with Jenkins and Terraform: A Complete Guide to CI/CD for Infrastructure as Code Avesh Avesh Avesh Follow Oct 31 Automating Kubernetes Cluster Deployment with Jenkins and Terraform: A Complete Guide to CI/CD for Infrastructure as Code #jenkins #terraform #kubernetes #sideprojects 2 *d My Portfolio Chandransh Ranjan Chandransh Ranjan Chandransh Ranjan Follow Oct 11 My Portfolio #portfolio #sideprojects #cybersecurity Add Comment 1 min read No Single LLM Can Be Trusted in Isolation Frank Fiegel Frank Fiegel Frank Fiegel Follow Oct 10 No Single LLM Can Be Trusted in Isolation #ai #llm #sideprojects * Different Types of Jenkins Architecture for Large-Scale Projects Avesh Avesh Avesh Follow Oct 30 Understanding Different Types of Jenkins Architecture for Large-Scale Projects #docker #jenkins #sideprojects #100daysofcode * The TypeScript Intervention: Breaking Your Runtime Check Addiction with Byzantium Ja Ja Ja Follow Oct 26 The TypeScript Intervention: Breaking Your Runtime Check Addiction with Byzantium #showdev #typescript #javascript #sideprojects 6 * Automating a 3-Tier Application Deployment with Docker & Jenkins Avesh Avesh Avesh Follow Oct 25 Automating a 3-Tier Application Deployment with Docker & Jenkins #docker #jenkins #sideprojects * Building XPromise: A Deep Dive into Custom JavaScript Promises * Oct 25 Building XPromise: A Deep Dive into Custom JavaScript Promises #* #sideprojects Add Comment 4 min read 3 Docker Project Ideas: Step-by-Step with Code and Explanations Avesh Avesh Avesh Follow Oct 24 3 Docker Project Ideas: Step-by-Step with Code and Explanations #docker #sideprojects #pushercontest #100daysofcode * Guide to Passive Income in Tech: Coding Your Way to Wealth Alex (Techbalance Collective) Alex (Techbalance Collective) Alex (Techbalance Collective) Follow Oct 23 Guide to Passive Income in Tech: Coding Your Way to Wealth #passiveincome #sideprojects #wealth #income * I Built a Collection of 100+ Open-Source SVG Spinners Shubham Jain Shubham Jain Shubham Jain Follow Oct 17 I Built a Collection of 100+ Open-Source SVG Spinners #webdev #frontend #css #sideprojects 20 * I created an AI-powered platform that generates interactive knowledge trees for visual exploration of complex topics. オウムガイ オウムガイ オウムガイ Follow Oct 16 I created an AI-powered platform that generates interactive knowledge trees for visual exploration of complex topics. #tool #sideprojects #ai * Building cssclip: My Fun Side Project for Frontend Developers Shubhadip Bhowmik Shubhadip Bhowmik Shubhadip Bhowmik Follow Sep 25 Building cssclip: My Fun Side Project for Frontend Developers #css #webdev #sideprojects 2 *d Lessons I learned while building out Nova Chukwuemeka Prince Ngumoha Chukwuemeka Prince Ngumoha Chukwuemeka Prince Ngumoha Follow Sep 23 Lessons I learned while building out Nova #webdev #react #typescript #sideprojects Add Comment 4 min read This is how I built a sauce recipe directory in 1 month using Vue.js + Supabase kolort kolort kolort Follow Oct 9 This is how I built a sauce recipe directory in 1 month using Vue.js + Supabase #vue #webdev #sideprojects 5 * Building an Orders Processing Service with ChatGPT (contribute 70–80% efforts) and Finished in 2 Days Jacky Jacky Jacky Follow Sep 25 Building an Orders Processing Service with ChatGPT (contribute 70–80% efforts) and Finished in 2 Days #chatgpt #ai #sideprojects #java *ad Complicate Your Personal Projects Mateus Cechetto Mateus Cechetto Mateus Cechetto Follow Oct 4 Complicate Your Personal Projects #discuss #career #sideprojects 2 * Looking for Feedback: Find the best YouTube videos with AI silentfox silentfox silentfox Follow Aug 30 Looking for Feedback: Find the best YouTube videos with AI #ai #youtube #startup #sideprojects * 🎉 Celebrating the Launch of Justablog: New Features & Exciting Updates! 🚀 Mohammad Kareem Mohammad Kareem Mohammad Kareem Follow Sep 3 🎉 Celebrating the Launch of Justablog: New Features & Exciting Updates! 🚀 #sideprojects #php #laravel #github Add Comment 2 min read Coding with Speed of AI: If you build it, they will come Peter Csiba Peter Csiba Peter Csiba Follow Sep 20 Coding with Speed of AI: If you build it, they will come #chatgpt #development #sideprojects #10x 3 * How to Create 3D Flip Card Animation Using HTML and CSS Kaja Uvais Kaja Uvais Kaja Uvais Follow Sep 29 How to Create 3D Flip Card Animation Using HTML and CSS #html #css #javascript #sideprojects 5 *d Stop Supabase Projects From Being Paused Travis Travis Travis Follow Sep 27 Stop Supabase Projects From Being Paused #nextjs #sideprojects #postgres #webdev 5 *d Cover All Python Fundamentals with these 7 projects🔥 | From Quizzes to Password Manager. 🔐 Dipsan Kadariya Dipsan Kadariya Dipsan Kadariya Follow Sep 5 Cover All Python Fundamentals with these 7 projects🔥 | From Quizzes to Password Manager. 🔐 #python #sideprojects #* 11 min read Creating art similar to 1.2 million pounds worth of painting Siddharth Singh Tanwar Siddharth Singh Tanwar Siddharth Singh Tanwar Follow Aug 22 Creating art similar to 1.2 million pounds worth of painting #python #programming #sideprojects #* Devchat: Building my first social app Luqman Shaban Luqman Shaban Luqman Shaban Follow Sep 24 Devchat: Building my first social app #webdev #opensource #sideprojects #developer * The Problem with Eating an Elephant One Bite at a Time Philippe Vaillancourt Philippe Vaillancourt Philippe Vaillancourt Follow Aug 19 The Problem with Eating an Elephant One Bite at a Time #productivity #sideprojects #motivation Add Comment 3 min read Output Hub - Knowledge Management System For LLM & GPT Outputs (Project Outline) Daniel Rosehill Daniel Rosehill Daniel Rosehill Follow Sep 21 Output Hub - Knowledge Management System For LLM & GPT Outputs (Project Outline) #llm #chatgpt #knowledgemanagement #sideprojects * Baby Steps Learning Laravel Mohammad Kareem Mohammad Kareem Mohammad Kareem Follow Aug 30 Baby Steps Learning Laravel #webdev #php #laravel #sideprojects * a bill splitting app - splitBhai (1/n) as a side project Abhishek Kumar Abhishek Kumar Abhishek Kumar Follow Sep 15 Building a bill splitting app - splitBhai (1/n) as a side project #bills #opensource #sideprojects #splitbills 2 * How to build an AI wrapper in 1 day + AI startup ideas & examples Kacper Kacper Kacper Follow Sep 13 How to build an AI wrapper in 1 day + AI startup ideas & examples #ai #openai #startup #sideprojects 3 reactions 1 comment 15 min read Building a Palindrome Checker 🚀 Karan Karan Karan Follow Aug 6 Building a Palindrome Checker 🚀 #palindrome #css #animation #sideprojects Add Comment 3 min read Bringing remote work to a whole new level - working on the Atlantic Ocean on my side-project Thomas Wink Thomas Wink Thomas Wink Follow Aug 6 Bringing remote work to a whole new level - working on the Atlantic Ocean on my side-project #sideprojects #marketing #motivation #remote * Why You Should Use TypeScript for Medium or Larger Projects Homayoun Homayoun Homayoun Follow Aug 28 Why You Should Use TypeScript for Medium or Larger Projects #typescript #startup #sideprojects 6 * My First CSS Responsive Project: A Tech Blog Built from Scratch Shivanshu Prajapati Shivanshu Prajapati Shivanshu Prajapati Follow Aug 28 My First CSS Responsive Project: A Tech Blog Built from Scratch #css #sideprojects #*mment 1 min read Voltigo - job searching / bulk applications Dariusz Dariusz Dariusz Follow Aug 3 Voltigo - job searching / bulk applications #showdev #webdev #sideprojects Add Comment 2 min read From Side Hustle to Payday How I Earned My First $100 Boopathi Boopathi Boopathi Follow Sep 4 From Side Hustle to Payday How I Earned My First $100 #sidehustle #node #mongodb #sideprojects 15 *d 🚀 Day 7: Pizza Restaurant Menu Project 🚀 Mayuresh Surve Mayuresh Surve Mayuresh Surve Follow Aug 5 🚀 Day 7: Pizza Restaurant Menu Project 🚀 #react #webdev #beginners #sideprojects 2 *d How to Generate Random HEX Color in JavaScript? [Easy Guide] Faruk Sardar Faruk Sardar Faruk Sardar Follow Jul 31 How to Generate Random HEX Color in JavaScript? [Easy Guide] #sideprojects #javascript #webdev #beginners 2 * Free alternatives to tech bootcamps & influencer courses Junaid Khan Junaid Khan Junaid Khan Follow Aug 19 Free alternatives to tech bootcamps & influencer courses #showdev #sideprojects #programming #career * Pickup Project: Ruby Gemmine Author Author Author Follow Aug 19 Pickup Project: Ruby Gemmine #ruby #hackathon #sideprojects #startup * You can do anything. But if you try to do everything, you'll end up doing nothing. MousePotatoDoesStuff MousePotatoDoesStuff MousePotatoDoesStuff Follow Aug 11 You can do anything. But if you try to do everything, you'll end up doing nothing. #timemanagement #sideprojects #sql #beginners 17 reactions 7 comments 2 min read CipherLab: A Versatile GUI Tool for Encryption, Decryption, and More Using AES, RSA, and Blowfish Pranjal Sailwal Pranjal Sailwal Pranjal Sailwal Follow Aug 20 CipherLab: A Versatile GUI Tool for Encryption, Decryption, and More Using AES, RSA, and Blowfish #python #sideprojects 1 comment 2 min read Real-Time Resume Ready DevOps Projects H A R S H H A A H A R S H H A A H A R S H H A A Follow for ProDevOpsGuy Tech Community Aug 1 Real-Time Resume Ready DevOps Projects #devops #opensource #beginners #sideprojects 28 * From 0 to 1000 Users in 3 Weeks: Launching My First Side Project While Working a Day Job Oliver Parker Oliver Parker Oliver Parker Follow Jul 30 From 0 to 1000 Users in 3 Weeks: Launching My First Side Project While Working a Day Job #ai #sideprojects #nextjs #webdev 3 comments 2 min read Another Linktree Clone? Asadbek Karimov Asadbek Karimov Asadbek Karimov Follow Jul 30 Another Linktree Clone? #sideprojects #saas #marketing #startup 5 *d Tips for popularising an open source project? Tony-Rome Tony-Rome Tony-Rome Follow Jul 16 Tips for popularising an open source project? #discuss #opensource #sideprojects 2 comments 1 min read 16 Free New APIs to Supercharge Your Next Project Halim Shams Halim Shams Halim Shams Follow Jul 15 16 Free New APIs to Supercharge Your Next Project #api #programming #sideprojects 5 * Making a Chess.com clone - 1 Jayant Jayant Jayant Follow Jul 23 Making a Chess.com clone - 1 #websockets #buildinpublic #sideprojects #learning 4 * The Struggles of Manual Project Timeline Visualization Nguyen Xuan hoa Nguyen Xuan hoa Nguyen Xuan hoa Follow Jul 14 The Struggles of Manual Project Timeline Visualization #sideprojects #management #startup #buildinpublic 5 *d 5 Unique Project Ideas to Make Your Software Engineering Resume Stand Out Halim Shams Halim Shams Halim Shams Follow Jul 10 5 Unique Project Ideas to Make Your Software Engineering Resume Stand Out #sideprojects #resume #career #softwareengineering 3 react*te an AI Version of Yourself with LogiChat Dale Nguyen Dale Nguyen Dale Nguyen Follow May 28 Create an AI Version of Yourself with LogiChat #ai #portfolio #sideprojects #buildinpublic Add Comment 2 min read How I grew my open-source project to 1k stars 🌟 Max Shen Max Shen Max Shen Follow Jun 16 How I grew my open-source project to 1k stars 🌟 #opensource #github #sideprojects #marketing 59 reactions 12 comments 5 min read i got 100x % increase in my side projects in just 9 months - here's how i did it Kathan Mehta Kathan Mehta Kathan Mehta Follow Jun 16 i got 100x % increase in my side projects in just 9 months - here's how i did it #sideprojects #webdev #javascript #* I went from 0 to 300+ Users in 24 Hours for my side project - Open Source & Lessons Learned Kathan Mehta Kathan Mehta Kathan Mehta Follow Jun 10 I went from 0 to 300+ Users in 24 Hours for my side project - Open Source & Lessons Learned #javascript #webdev #softaware #sideprojects 2 *d The $4.99 Feature That Landed Multiple Paid Customers for My Side Project 💰 Kathan Mehta Kathan Mehta Kathan Mehta Follow Jun 7 The $4.99 Feature That Landed Multiple Paid Customers for My Side Project 💰 #sideprojects #webdev #softwareengineering #javascript 8 *d Built a JSON Formatter & Manager with Tabs and Local Storage – Looking for Feedback! dytra dytra dytra Follow Oct 29 Built a JSON Formatter & Manager with Tabs and Local Storage – Looking for Feedback! #sideprojects #json Add C* Got any weekend projects on the go? 78 comments Side Project Sunday! Hacking on anything? 97 comments Startup idea failed - what’s next? 7 comments Complicate Your Personal Projects New What are some side project suggestions? 55 comments Side Project Sunday! What do you have going on? 61 comments Side Project Sunday! What do you have going on? 43 comments syntackle.live is now syntackle.com 5 comments Tips for popularising an open source project? 2 comments When do you work on your side projects? 76 * Stop Supabase Projects From Being Paused From Side Hustle to Payday How I Earned My First $100 How to Create 3D Flip Card Animation Using HTML and CSS Guide to Passive Income in Tech: Coding Your Way to Wealth Why You Should Use TypeScript for Medium or Larger Projects I Built a Collection of 100+ Open-Source SVG Spinners Building cssclip: My Fun Side Project for Frontend Developers Output Hub - Knowledge Management System For LLM & GPT Outputs (Project Outline) Building a bill splitting app - splitBhai (1/n) as a side project Building an Orders Processing Service with ChatGPT (contribute 70–80% efforts) and Finished in 2 Days The TypeScript Intervention: Breaking Your Runtime Check Addiction with Byzantium Coding with Speed of AI: If you build it, they will come Devchat: Building my first social app This is how I built a sauce recipe directory in 1 month using Vue.js + Supabase From AI Code to $266 MRR in 7 Days: The TweetFast Story Complicate Your Personal Projects How to build an AI wrapper in 1 day + AI startup ideas & example*nsor Neon * ",
    "url": "https://dev.to/t/sideprojects"
  },
  {
    "body": "* # softwareengineering * 1887 Posts Published Older #softwareengineering posts 1 2 3 4 5 6 7 8 9 *. The effective Pull Request checklist Mario Ruci Mario Ruci Mario Ruci Follow Nov 9 The effective Pull Request checklist #programming #git #softwareengineering #software* Como Tratar Diferentes Tipos de Logs em Go? Ortiz de Arcanjo Antonio David Ortiz de Arcanjo Antonio David Ortiz de Arcanjo Antonio David Follow Nov 7 Como Tratar Diferentes Tipos de Logs em Go? #go #postgres #* 1 min read 💡 ¿Qué es el perfilado de código PGO y cómo mejora el rendimiento en Go 1.23? Roberto Morais Roberto Morais Roberto Morais Follow Nov 7 💡 ¿Qué es el perfilado de código PGO y cómo mejora el rendimiento en Go 1.23? #go #*ing Add Comment 2 min read A Journey of Learning: From Software Engineer to Team Leader Brian Baliach Brian Baliach Brian Baliach Follow Nov 7 A Journey of Learning: From Software Engineer to Team Leader #leadership #sof* Introduction to series on Testing Amandeep Singh Amandeep Singh Amandeep Singh Follow Nov 6 Introduction to series on Testing #testing #programming #beginners #sof* The Relevance of computer theory for Software Engineers Felipe Alexandre Felipe Alexandre Felipe Alexandre Follow Nov 6 The Relevance of computer theory for Software Engineers #softwareengineering #computerscience #* 5 min read Size Doesn't Matter: Why Your Elasticsearch Fields Need to Stop Caring About Length Prem Prem Prem Follow Nov 6 Size Doesn't Matter: Why Your Elasticsearch Fields Need to Stop Caring About Length #elasticsearch #fulltextsearch #softwareengineering #softwared* The 2024 DORA Report: State of DevOps Breakdown Summary Shivam Chhuneja Shivam Chhuneja Shivam Chhuneja Follow for Middleware Nov 6 The 2024 DORA Report: State of DevOps Breakdown Summary #devops #productivity #programming #softwareengineering 20 *d The illusion of simplicity: how OOP can overcomplicate simple problems Prahlad Yeri Prahlad Yeri Prahlad Yeri Follow Nov 5 The illusion of simplicity: how OOP can overcomplicate simple problems #agile #programming #softwareengineering * Software Migration Strategies: The Strangler Fig Pattern Chinonso Amadi Chinonso Amadi Chinonso Amadi Follow Nov 5 Software Migration Strategies: The Strangler Fig Pattern #softwareengineering #architecture #microservices #eventdriven Add Comment 3 min read Programmer Stereotypes (100% Accurate) 🤖💻 Harold Defree Harold Defree Harold Defree Follow Nov 9 Programmer Stereotypes (100% Accurate) 🤖💻 #programming #developerlife #devhumor #softwareengineering * A Detailed Guide to Microservices and Containers Shani Shoham Shani Shoham Shani Shoham Follow Nov 4 A Detailed Guide to Microservices and Containers #architecture #microservices #softwareengineering #containers Add Comment 6 min read Event Sourcing Yousef Refaat Yousef Refaat Yousef Refaat Follow Nov 4 Event Sourcing #eventdriven #software #softwareengineering #architecture Add Comment 3 min read Preparing for the Tech World of 2025: Essential Skills for Future Success Vikas76 Vikas76 Vikas76 Follow Nov 4 Preparing for the Tech World of 2025: Essential Skills for Future Success #ai #programming #beginners #softwareengineering * 📝 *! * Nov 4 📝 *, * Add Comment 2 min read How Real-Time Editing Works: Understanding Event Ordering in Distributed Systems Ujjwal Raj Ujjwal Raj Ujjwal Raj Follow Nov 2 How Real-Time Editing Works: Understanding Event Ordering in Distributed Systems #techtalks #distributedsystems #softwareengineering #systemdesign Add Comment 4 min read I'm done with multiplatform software development Adam Świderski Adam Świderski Adam Świderski Follow Nov 1 I'm done with multiplatform software development #kotlin #multiplatform #softwareengineering #mobile Add Comment 3 min read My Thoughts on The Clean Coder Book Amin Rashidbeigi Amin Rashidbeigi Amin Rashidbeigi Follow Oct 30 My Thoughts on The Clean Coder Book #unclebob #cleancoder #software #* 4 min read Enhancing Code Readability and Reducing Cyclomatic Complexity with Return in Conditionals Igo*lli Follow Oct 30 Enhancing Code Readability and Reducing Cyclomatic Complexity with Return in Conditionals #softwareengineering #scyclomaticcomplexity * Staff Augmentation? Benefits and Best Practices Filip Kalanoski Filip Kalanoski Filip Kalanoski Follow Oct 30 What is Staff Augmentation? Benefits and Best Practices #management #tutorial #softwareengineering 1 comment 6 min read CQRS Yousef Refaat Yousef Refaat Yousef Refaat Follow Nov 3 CQRS #eventdriven #software #softwareengineering #architecture Add Comment 4 min read Tough Times, Tough Men... Simon Rabuogi Simon Rabuogi Simon Rabuogi Follow Oct 29 Tough Times, Tough Men... #ai #career #softwaredevelopment #sof* The Must-Have Skill Every Senior Developer Needs Pawel Kadluczka Pawel Kadluczka Pawel Kadluczka Follow Nov 2 The Must-Have Skill Every Senior Developer Needs #career #softwareengineering #beginners #productivity 2 *d A Gamer's Lament: The Paradox of a Software Engineer expertgamer168 expertgamer168 expertgamer168 Follow Oct 29 A Gamer's Lament: The Paradox of a Software Engineer #gamesandgadget #game #softwareengineering #software* DATATYPES IN C (double, long double, void, bool) Frank Frank Frank Follow Oct 28 DATATYPES IN C (double, long double, void, bool) #softwareengineering #computerscience #c #* Ping & Heartbeat in distributed systems Ujjwal Raj Ujjwal Raj Ujjwal Raj Follow Oct 27 Ping & Heartbeat in distributed systems #distributedsystems #softwareengineering #learning #software Add Comment 3 min read Uncovering developer discontent: Why are so many software engineers unhappy? Sergio Fiorillo Sergio Fiorillo Sergio Fiorillo Follow Oct 30 Uncovering developer discontent: Why are so many software engineers unhappy? #*ing #management #developers 2 comments 5 min read Navigating Dependency Complexity: Effective Strategies for Software Engineers * Aditya Pratap Bhuyan Follow Oct 26 Navigating Dependency Complexity: Effective Strategies for Software Engineers #dependencycomplexity #* 5 min read Reflecting on The 10 commandments of Egoless Programming ᗰṳhumuzå ₱ɨuṩ ᗰṳhumuzå ₱ɨuṩ ᗰṳhumuzå ₱ɨuṩ Follow Oct 26 Reflecting on The 10 commandments of Egoless Programming #egolessprogramming #softwareengineering #softwareprojectmanagement #* 5 min read How to quickly ramp up on new codebases Pawel Kadluczka Pawel Kadluczka Pawel Kadluczka Follow Nov 8 How to quickly ramp up on new codebases #beginners #softwareengineering #productivity #career 3 * Concurrency vs. Parallelism Teiva Harsanyi Teiva Harsanyi Teiva Harsanyi Follow for The Coder Cafe Oct 24 Concurrency vs. Parallelism #coding #*ing #* What is Polymorphism in C# - Explained with a Code Example Danny Adams Danny Adams Danny Adams Follow Oct 24 What is Polymorphism in C# - Explained with a Code Example #csharp #oop #*ing 3 reactions *ng Stack Operations: How Programs Store and Release Data in Memory Md Abu Musa Md Abu Musa Md Abu Musa Follow Oct 25 Understanding Stack Operations: How Programs Store and Release Data in Memory #programming #dsa #webdev #softwareengineering * Processes: The Ultimate Guide to Understanding and Managing System Operations ym qu ym qu ym qu Follow Nov 6 Mastering Processes: The Ultimate Guide to Understanding and Managing System Operations #tutorial #computerscience #programming #softwareengineering 8 * My Journey into Embedded Software Engineering #4: Tackling Legacy Code and Learning on the Fly Ivan Delgado Ivan Delgado Ivan Delgado Follow Oct 24 My Journey into Embedded Software Engineering #4: Tackling Legacy Code and Learning on the Fly #programming #*ing #raspberrypi Add Comment 3 min read Comparison between CORE and Other Software Development Methodologies José Guilherme Maragno Luiz José Guilherme Maragno Luiz José Guilherme Maragno Luiz Follow Oct 23 Comparison between CORE and Other Software Development Methodologies #scrum #*ing #agile Add Comment 5 min read Why I Created the CORE Framework José Guilherme Maragno Luiz José Guilherme Maragno Luiz José Guilherme Maragno Luiz Follow Oct 23 Why I Created the CORE Framework #*ing #software #myhistory Add Comment 2 min read Why Strong DSA Knowledge is Essential for Software Engineers Anwar Hossain Anwar Hossain Anwar Hossain Follow Oct 23 Why Strong DSA Knowledge is Essential for Software Engineers #softwareengineering #* Add Comment 3 min read How I Improved Video Streaming with FFmpeg and Node.js Mohamed Mayallo Mohamed Mayallo Mohamed Mayallo Follow Nov 5 How I Improved Video Streaming with FFmpeg and Node.js #node #tutorial #* 10 * Dive into Jackson for JSON in Java: Understanding JsonNode, ArrayNode, and ObjectMapper abharan gupta abharan gupta abharan gupta Follow Oct 22 Dive into Jackson for JSON in Java: Understanding JsonNode, ArrayNode, and ObjectMapper #java #json #softwareengineering #developer Add Comment 5 min read Table Selection in Software Engineering luminousmen luminousmen luminousmen Follow Oct 22 Table Selection in Software Engineering #career #* 6 min read How to Use Twitter and Not Want to Kill Yourself Ola Linczewska Ola Linczewska Ola Linczewska Follow Oct 21 How to Use Twitter and Not Want to Kill Yourself #twitter #*ing #community Add Comment 3 min read Aplicações Local-First: O Futuro da Web? Lucas Faria Lucas Faria Lucas Faria Follow Oct 25 Aplicações Local-First: O Futuro da Web? #braziliandevs #architecture #softwareengineering 1 reaction 1 comment 8 min read Understanding System Models in Distributed system Ujjwal Raj Ujjwal Raj Ujjwal Raj Follow Oct 20 Understanding System Models in Distributed system #distributedsystems #softwareengineering #learning #software 2 comments 3 min read Dangerous Software #1: Therac-25 Thodoris Kouleris Thodoris Kouleris Thodoris Kouleris Follow Oct 20 Dangerous Software #1: Therac-25 #software #softwareengineering #testing Add Comment 2 min read How Documentation Can Help Your Team Scale Ikechukwu Vincent Ikechukwu Vincent Ikechukwu Vincent Follow Oct 23 How Documentation Can Help Your Team Scale #softwareengineering #leadership #* 5 min read Monolith vs. Microservices Architecture Shani Shoham Shani Shoham Shani Shoham Follow Oct 31 Monolith vs. Microservices Architecture #architecture #microservices #softwareengineering 4 * Use Cases of the CORE Framework José Guilherme Maragno Luiz José Guilherme Maragno Luiz José Guilherme Maragno Luiz Follow Oct 22 Use Cases of the CORE Framework #scrum #devops #*ing Add Comment 6 min read Embedding Design Into Code Ivan Zakutnii Ivan Zakutnii Ivan Zakutnii Follow Oct 16 Embedding Design Into Code #softwareengineering #design *e Your Java Tasks with Quartz: A Practical Guide Birks Sachdev Birks Sachdev Birks Sachdev Follow Oct 16 Automate Your Java Tasks with Quartz: A Practical Guide #java #automation #backend #* 9 min read Understanding SOLID principles Md Abu Musa Md Abu Musa Md Abu Musa Follow Oct 29 Understanding SOLID principles #solidprinciples #softwareengineering #backenddevelopmen*ad SAGA Pattern Yousef Refaat Yousef Refaat Yousef Refaat Follow Oct 28 SAGA Pattern #eventdriven #software #softwareengineering #architecture Add Comment 5 min read AI and the Dawn of a Mediocre Era frontpills frontpills frontpills Follow Oct 15 AI and the Dawn of a Mediocre Era #ai #engineering #machinelearning #softwareengineering * Tech Debt: A Bigger Problem Than AI Takeover Priya Moghe Priya Moghe Priya Moghe Follow Oct 27 Tech Debt: A Bigger Problem Than AI Takeover #technicaldebt #softwareengineering #ai #cleancode 2 * Using Design Patterns as Communication Skill Adam Świderski Adam Świderski Adam Świderski Follow Oct 13 Using Design Patterns as Communication Skill #designpatterns #softwareengineering #programm*ment 9 min read Understanding Latency in Applications: A Guide for Backend Developers Sam-Oladapo Ebenezer Sam-Oladapo Ebenezer Sam-Oladapo Ebenezer Follow Oct 13 Understanding Latency in Applications: A Guide for Backend Developers #backend #softwareengineering #developers Add Comment 5 min read Algorithm Design Technique I: Introduction Olagunju Joshua Gbolahan Olagunju Joshua Gbolahan Olagunju Joshua Gbolahan Follow Oct 11 Algorithm Design Technique I: Introduction #beginners #development #computerscience #sof* Object Oriented Design Balance With Understanding Anti-Single Responsibility Principle Rasul Rasul Rasul Follow Nov 2 Object Oriented Design Balance With Understanding Anti-Single Responsibility Principle #solidprinciples #oop #softwareengineering 7 * As a software engineer or UX UI, you must be good at data analysis 👌 Nada Aldubaie Nada Aldubaie Nada Aldubaie Follow Nov 2 As a software engineer or UX UI, you must be good at data analysis 👌 #programming #softwareengineering #ux #developer 8 *d Programming Paradigm Amaresh Barik Amaresh Barik Amaresh Barik Follow Oct 10 Programming Paradigm #webdev #programmingparadigm #*ing Add C* Why 90% of 'Software Engineers' Are Actually Just Code Monkeys New Do software engineers at the largest tech companies (i.e. Google, Facebook, Apple, etc.) use Github for version control? 25 comments Bike shedding Triviality in software development 2 comments Top Payment App Development Companies: Who Can Turn Your Idea into the Next Big Thing? New Your Input Needed: 5-Minute Survey on use of AI-generated code in Software Development New iSAQB certifications are worthless... Or, are they? New Why Use Nix package manager, Even on macOS? New Why Writing Your Own Tools is More Important Than You Think 4 comments How To Build a Basic Search Engine Like Google New 🎯 Top 3 software development Skills you don't learn as a beginner, but you really should. New trending guides/resources 10 Scalability Lessons from Zoom's Software Architecture How does Apache Kafka work? Why is Kafka So fast? Top 16 System Design Resources for Programming Interviews Roadmap to Learning C Programming Understanding and Implementing the Repository Pattern in .NET What is Clean Architecture: Part 16 - Adding Data Persistence with Entity Framework Core What is Clean Architecture: Part 10 - Writing the Application Logic in the Request Handler Implementing the CQRS in a .NET Comprehensive Guide to Top Monitoring and Logging Services What is Clean Architecture: Part 18 - Adding API What is Clean Architecture: Part 9 - Setting Up the Application Project in Visual Studio Optimiser la gestion des comportements avec le Pattern Strategy en PHP et Symfony You shouldn't use AI for programming What is Clean Architecture: Part 8 - Designing the Application Project Software Design Principles I - Interface Segregation Principle (ISP) The Importance of Ergonomics for Software Engineers: A Comprehensive Guide Mastering JavaScript Arrays: Techniques, Best Practices, and Advanced Uses Mastering System Design for Junior Engineers These 5 habits will make you a great code reviewer recently queried Why use Golang * * ",
    "url": "https://dev.to/t/softwareengineering"
  },
  {
    "body": "* Solid Follow Hide The tag for Solid, a JavaScript framework for building performant user interfaces. Create Post about #solidjs Solid is a declarative JavaScript library for creating user interfaces. It does not use a Virtual DOM. Instead, it opts to compile its templates down to real DOM nodes and wrap updates in fine-grained reactions. tag moderators 206 Posts Published Older #solidjs posts 1 2 3 *. * * Follow * Add Comment 4 min read This Month in Solid #9: SolidHack started, new fellow and API change 😎 * Nov 5 This Month in Solid #9: SolidHack started, new fellow and API change 😎 #news #webdev #javascript #solidjs Add Comment 4 min read The Problems with Signals: A Tale of Power and Responsibility PRANTA Dutta PRANTA Dutta PRANTA Dutta Follow Nov 8 The Problems with Signals: A Tale of Power and Responsibility #signals #reactivity #web #solidjs * The Future of Web Development: How Astro and Solid Start are Redefining Performance and Flexibility in 2024 404_CHRONICLES 404_CHRONICLES 404_CHRONICLES Follow Oct 4 The Future of Web Development: How Astro and Solid Start are Redefining Performance and Flexibility in 2024 #javascript #webdev #astro #solidjs Add Comment 4 min read WordHoop: A Lightweight Word Game Built with SolidJS arminbro arminbro arminbro Follow Oct 23 WordHoop: A Lightweight Word Game Built with SolidJS #solidjs #tailwindcss #performance * This Month in Solid #7: SolidHack 2024😎 * Sep 4 This Month in Solid #7: SolidHack 2024😎 #news #webdev #javascript #solidjs 5 *d This Month in Solid #8: Meta RFC, 1.9.0 and SolidHack begins 😎 * Oct 2 This Month in Solid #8: Meta RFC, 1.9.0 and SolidHack begins 😎 #news #webdev #javascript #solidjs 4 * The Difference Between Software Architecture Patterns and Design Principles Wafa Bergaoui Wafa Bergaoui Wafa Bergaoui Follow Sep 27 The Difference Between Software Architecture Patterns and Design Principles #architecture #designpatterns #designsystem #solidjs 21 * SOLID: D - Dependency Inversion Principle (DIP) Paulo Messias Paulo Messias Paulo Messias Follow Aug 22 SOLID: D - Dependency Inversion Principle (DIP) #programming #solidjs #beginners #tutorial * Principios SOLID Sebastián Barrera Herrera Sebastián Barrera Herrera Sebastián Barrera Herrera Follow Aug 20 Principios SOLID #solidjs #webdev #spanish #poo Add Comment 4 min read I'm Joining Sentry Ryan Carniato Ryan Carniato Ryan Carniato Follow Sep 3 I'm Joining Sentry #sentry #solidjs #opensource 127 reactions 16 comments 2 min read 💎 of solid-primitives, part 3: set, map, trigger * Sep 10 💎 of solid-primitives, part 3: set, map, trigger #solidjs #* 14 * SOLID: I - Interface Segregation Principle (ISP) Paulo Messias Paulo Messias Paulo Messias Follow Aug 21 SOLID: I - Interface Segregation Principle (ISP) #programming #solidjs #tutorial #beginners 4 *d SOLID: L - Liskov Substitution Principle (LSP) Paulo Messias Paulo Messias Paulo Messias Follow Aug 20 SOLID: L - Liskov Substitution Principle (LSP) #solidjs #* * SOLID: O - Open/Closed Principle (OCP) Paulo Messias Paulo Messias Paulo Messias Follow Aug 19 SOLID: O - Open/Closed Principle (OCP) #solidjs #programming #tutorial #* 4 min read SOLID: S - Single Responsibility Principle (SRP) Paulo Messias Paulo Messias Paulo Messias Follow Aug 18 SOLID: S - Single Responsibility Principle (SRP) #solidjs #* 6 * SolidJs vs React: A Comprehensive Comparison Sarthak Niranjan Sarthak Niranjan Sarthak Niranjan Follow for CodeParrot Aug 17 SolidJs vs React: A Comprehensive Comparison #webdev #javascript #react #solidjs 9 * Async Derivations in Reactivity Ryan Carniato Ryan Carniato Ryan Carniato Follow for This is Learning Aug 6 Async Derivations in Reactivity #javascript #webdev #signals #solidjs 63 reactions 3 comments 11 min read Two-way Binding is a Two-way Street Ryan Carniato Ryan Carniato Ryan Carniato Follow for This is Learning Jul 31 Two-way Binding is a Two-way Street #javascript #vue #svelte #solidjs 78 reactions 5 comments 6 min read Two-way Binding can be a One-way Street Michael Rawlings Michael Rawlings Michael Rawlings Follow Aug 1 Two-way Binding can be a One-way Street #marko #solidjs #react #javascript 16 * This Month in Solid #6: corvu updates, clerk SDK, and more 😎 * Aug 1 This Month in Solid #6: corvu updates, clerk SDK, and more 😎 #news #webdev #javascript #solidjs * In 2024, should we still use React and check out other frameworks too? Jawnchuks Jawnchuks Jawnchuks Follow Jul 2 In 2024, should we still use React and check out other frameworks too? #react #frontend #svelte #solidjs * Build a Customer Review APP with Strapi and Solid.js Strapi Strapi Strapi Follow for Strapi Jul 8 Build a Customer Review APP with Strapi and Solid.js #solidjs #strapi 2 * This Month in Solid #5: Data APIs RFC 😎 * Jul 1 This Month in Solid #5: Data APIs RFC 😎 #news #webdev #javascript #solidjs * This Month in Solid #4: The Shape of Frameworks to Come 😎 * Jun 29 This Month in Solid #4: The Shape of Frameworks to Come 😎 #webdev #javascript #solidjs #frameworks 5 * This Month in Solid #2: Welcome to ClownTown, Start docs, and more 😎 * Apr 17 This Month in Solid #2: Welcome to ClownTown, Start docs, and more 😎 #news #solidjs #webdev #*t 5 min read How HomeTriangle Boosted Its Website Performance by Migrating from Next.js to Astro with SolidJS Maruthi N Maruthi N Maruthi N Follow Apr 16 How HomeTriangle Boosted Its Website Performance by Migrating from Next.js to Astro with SolidJS #astro #nextjs #solidjs #performance Add Comment 3 min read 10 Impressive Websites Built with Astro Tarik Tarik Tarik Follow May 15 10 Impressive Websites Built with Astro #astro #vue #solidjs #website 3 *d React Native, SOLID, and TypeScript: Improving Your Code Quality Paulo Messias Paulo Messias Paulo Messias Follow May 9 React Native, SOLID, and TypeScript: Improving Your Code Quality #reactnative #solidjs #solidprinciples #*t 3 min read Solid's Resource is great! Daniel Macák Daniel Macák Daniel Macák Follow May 7 Solid's Resource is great! #solidjs #webdev #javascript 2 * This Month in Solid #3: The Progress so Far, Meta Docs, New Fellows, and Production stories 😎 * May 1 This Month in Solid #3: The Progress so Far, Meta Docs, New Fellows, and Production stories 😎 #news #solidjs #webdev #*t 5 min read SolidJS use:validation directive Sylvain Dethier Sylvain Dethier Sylvain Dethier Follow Apr 27 SolidJS use:validation directive #solidjs #directive #validation * Type safe SolidJS Router `useParam` utility Type Sylvain Dethier Sylvain Dethier Sylvain Dethier Follow Apr 19 Type safe SolidJS Router `useParam` utility Type #solidjs #typescript #useparam #routedefinition * Imperative-reactive vs Functional-reactive: can you tell the difference? Dario Mannu Dario Mannu Dario Mannu Follow Apr 12 Imperative-reactive vs Functional-reactive: can you tell the difference? #react #solidjs #angular #svelte Add Comment 4 min read Creating a Browser Extension using SolidJS + WXT II Michael Essiet Michael Essiet Michael Essiet Follow Mar 22 Creating a Browser Extension using SolidJS + WXT II #solidjs #browserextension #typescript #webdev Add Comment 15 min read Why you should NOT use Jest w/ Solid Daniel Macák Daniel Macák Daniel Macák Follow Mar 6 Why you should NOT use Jest w/ Solid #javascript #solidjs #jest #vitest * This Month In Solid: SolidStart 0.6.0, Solid Docs Beta, and more 😎 * Mar 1 This Month In Solid: SolidStart 0.6.0, Solid Docs Beta, and more 😎 #news #webdev #javascript #solidjs 6 * Thoughts on Improving Web Application Performance: Web Workers and RxJS - - - Follow Mar 1 Thoughts on Improving Web Application Performance: Web Workers and RxJS #webworker #solidjs #rxjs #threejs Add Comment 8 min read SOLID.JS & SUPABASE Authentication App Bek Brace Bek Brace Bek Brace Follow Feb 26 SOLID.JS & SUPABASE Authentication App #solidjs #database #react #vercel 13 reactions Ad* Your Forms: The Ultimate Form Builder for Notion (Beta) Ashutosh Kumar Singh Ashutosh Kumar Singh Ashutosh Kumar Singh Follow Feb 11 Introducing Your Forms: The Ultimate Form Builder for Notion (Beta) #notion #solidjs #daisy 2 *d 💎 of solid-primitives, part 1: context * Feb 5 💎 of solid-primitives, part 1: context #solidjs #* 13 * The zen of state in Solid.js * Jan 24 The zen of state in Solid.js #solidjs #frontend #javascript 25 reactions 3 comments 6 min read Yet Another Newsletter LOL: A Solid and Astronomical Week Nick Taylor Nick Taylor Nick Taylor Follow Jan 28 Yet Another Newsletter LOL: A Solid and Astronomical Week #css #astro #solidjs #react 7 * Popularity is not Efficiency: Solid.js vs React.js Makanju Oluwafemi Makanju Oluwafemi Makanju Oluwafemi Follow Jan 1 Popularity is not Efficiency: Solid.js vs React.js #frontend #solidjs #react #javascript 95 reactions 82 comments 4 min read Recording 'From Vanilla JS to Solid.js' Video Series Konstantin Komelin Konstantin Komelin Konstantin Komelin Follow Jan 4 Recording 'From Vanilla JS to Solid.js' Video Series #pwa #solidjs #firebase #youtube * SolidJS: Purpose of the `keyed` attribute in <Show> Daniel Macák Daniel Macák Daniel Macák Follow Jan 2 SolidJS: Purpose of the `keyed` attribute in <Show> #solidjs #tutorial #webdev 6 * Cara Mudah Fetch API pada Solidjs Nazan H. Nazan H. Nazan H. Follow Dec 12 '23 Cara Mudah Fetch API pada Solidjs #indonesia #solidjs Add Comment 1 min read The Difference you didn't know existed between Solid.js and Svelte Shariq Ahmed Shariq Ahmed Shariq Ahmed Follow Dec 10 '23 The Difference you didn't know existed between Solid.js and Svelte #svelte #sveltekit #solidjs #javascript 6 *d SpecFlow - Integrating Hanko and Supabase in a Solid.js client-side application Riccardo Perra Riccardo Perra Riccardo Perra Follow Oct 28 '23 SpecFlow - Integrating Hanko and Supabase in a Solid.js client-side application #hanko #solidjs #supabase #hackathon 18 *d Thinking Locally with Signals Ryan Carniato Ryan Carniato Ryan Carniato Follow for This is Learning Oct 13 '23 Thinking Locally with Signals #javascript #webdev #react #solidjs 99 reactions 17 comments 5 min read Tailwind Elements Stable v1.0.0. - a free, open-source UI Kit with 500+ components integrated with Solid - is out. Maciej Maciej Maciej Follow Oct 9 '23 Tailwind Elements Stable v1.0.0. - a free, open-source UI Kit with 500+ components integrated with Solid - is out. #news #solidjs #webdev #css 36 *d Yet Another Newsletter LOL: Pizza Byte Nick Taylor Nick Taylor Nick Taylor Follow Oct 8 '23 Yet Another Newsletter LOL: Pizza Byte #solidjs #javascript #iot #css 9 * React.js vs Solid.js V Sai Harsha V Sai Harsha V Sai Harsha Follow Sep 13 '23 React.js vs Solid.js #webdev #javascript #react #solidjs Add Comment 3 min read Princípios SOLID, KISS, DRY e YAGNI Aplicados no Desenvolvimento com React Jhonata Vinicius Da Silva Araujo Jhonata Vinicius Da Silva Araujo Jhonata Vinicius Da Silva Araujo Follow Aug 8 '23 Princípios SOLID, KISS, DRY e YAGNI Aplicados no Desenvolvimento com React #javascript #webdev #solidjs #designpatterns 2 *d How SolidJS Works? The Easiest Introduction! Ayoub Alouane Ayoub Alouane Ayoub Alouane Follow for This is Learning Jul 16 '23 How SolidJS Works? The Easiest Introduction! #solidjs #javascript #frontend #development 8 * A new CSS-in-JS package for SolidJS NDREAN NDREAN NDREAN Follow Jul 3 '23 A new CSS-in-JS package for SolidJS #showdev #solidjs #css Add Comment 2 min read React와 Solid의 차이점 톺아보기 Composite Composite Composite Follow Jun 29 '23 React와 Solid의 차이점 톺아보기 #solidjs #javascript #korean #react * SolidStart, Netlify and Forms Matti Bar-Zeev Matti Bar-Zeev Matti Bar-Zeev Follow Jun 23 '23 SolidStart, Netlify and Forms #solidjs #netlify #webdev #tutorial 6 * Yet Another Newsletter LOL: Living on the Edge Nick Taylor Nick Taylor Nick Taylor Follow Jun 12 '23 Yet Another Newsletter LOL: Living on the Edge #css #astro #solidjs 9 react*ding English Quiz App - My First SolidJS App as a React Developer SeongKuk Han SeongKuk Han SeongKuk Han Follow Jun 11 '23 Building English Quiz App - My First SolidJS App as a React Developer #solidjs #tutorial #react #webdev 6 reactions 3 comments 16 min read loading... #discuss ReactJS vs SolidJS New trending guides/resources The Difference Between Software Architecture Patterns and Design Principles I'm Joining Sentry This Month in Solid #7: SolidHack 2024😎 💎 of solid-primitives, part 3: set, map, trigger This Month in Solid #8: Meta RFC, 1.9.0 and SolidHack begins 😎 The Problems with Signals: A Tale of Power and Responsibility Aplicando SOLID no NestJS * * ",
    "url": "https://dev.to/t/solidjs"
  },
  {
    "body": "* Spanish Follow Hide La etiqueta oficial para post en español. * Sé una persona amable y respetuosa. Intenta usar un español lo más neutro posible, evitando usar localismos, para que una mayor cantidad de usuarios puedan disfrutar de tus post. about #spanish Puedes agregar a tu post la etiqueta #spanish para que otras personas hispanohablantes puedan encontrarlo junto con otros post en español. tag moderators 1480 Posts Published Older #spanish posts 1 2 3 4 5 6 7 8 9 *. * * Nov 7 * #spanish #webdev #laravel #* ¿Cómo calcular el máximo y mínimo en Java usando Streams? * Nov 6 ¿Cómo calcular el máximo y mínimo en Java usando Streams? #java #programming #spanish Add Comment 3 min read Instalar PN* DowarD* ¿Cómo funciona Comparator en Java? * Nov 4 ¿Cómo funciona Comparator en Java? #java #programming #spanish Add Comment 6 mi* Sealed Classes en Java * Oct 28 Sealed Classes en Java #java #programming #spanish Add Comment 5 min read var en Java * Oct 23 var en Java #java #programming #spanish Add Comment 4 min read Setters en un Record en Java * Oct 21 Setters en un Record en Java #java #record #programming #spanish Add Comment 3 min read Records en Java: qué son y cómo utilizarlos * Oct 14 Records en Java: qué son y cómo utilizarlos #java #record #programming #spanish Add Comment 6 min read Bulkhead: Compartimentando tus Microservicios diek diek diek Follow Nov 6 Bulkhead: Compartimentando tus Microservicios #spanish #designpatterns #cloud Add Comment 3 min read Ibuprofeno.py💊| #190: *ernando Cristian Fernando Follow Oct 9 Ibuprofeno.py💊| #190: Explica este código Python #beginners #learning #python #spanish Add Comment 1 min read ¿Cómo usar la clase Properties en Java? * Oct 30 ¿Cómo usar la clase Properties en Java? #java #programming #spanish 3 *d Ibuprofeno.py💊| #188: *ernando Cristian Fernando Follow Oct 4 Ibuprofeno.py💊| #188: Explica este código P* #python Add Comment 1 min read Records vs Clases en Java * Oct 16 Records vs Clases en Java #java #record #programming #spanish 4 *d Ibuprofeno.py💊| #187: *ernando Cristian Fernando Follow Oct 2 Ibuprofeno.py💊| #187: Explica este código Python #learning #beginners #python #spanish 1 reaction *85: *erna* 27 Ibuprofeno.py💊| #185: Explica este cód*inners Add Comment 1 min read El método definitivo para aprender a programar. Diego Enríquez Puig Diego Enríquez Puig Diego Enríquez Puig Follow Sep 24 El método definitivo para aprender a programar. #beginners #tutorial #learning #spanish * Ibuprofeno.py💊| #184: *erna* 25 Ibuprofeno.py💊| #184: Explica este código Python #spanish #learning #python #beginners *89: *ernando Cristian Fernando Follow Oct 7 Ibuprofeno.py💊| #189: Explica este cód*inners 1 reaction *83: *erna* 23 Ibuprofeno.py💊| #183: Explica este código Python #spanish #learning #python #* Programación Orientada a Objetos... sin if's. * * * Follow Sep 24 Programación Orientada a Objetos... sin if's. #discuss #spanish #programming #poo Add Comment 4 min read Registro 004-1. Domina Flutter con Clean Architecture: Integración de Supabase y Repositorios Simplificada JR Saucedo JR Saucedo JR Saucedo Follow Sep 22 Registro 004-1. Domina Flutter con Clean Architecture: Integración de Supabase y Repositorios Simplificada #spanish #flutter #dart #supabase Add Comment 6 min read Ibuprofeno.py💊| #182: *erna* 20 Ibuprofeno.py💊| #182: * #learning #spanish #beginners *81: *erna* 18 Ibuprofeno.py💊| #181: Explica este cód*inners Add Comment 1 min read Google Analytics y Analizadores WPO Manuel Canga Manuel Canga Manuel Canga Follow Sep 17 Google Analytics y Analizadores WPO #spanish #javascript #webperf #seo Add Comment 3 min read Ibuprofeno.py💊| #180: *erna* 16 Ibuprofeno.py💊| #180: Explica este cód*inners Add Comment 1 min read Cómo obtener el número de seguidores de Twitch en el proceso de build para Astro Daniel J. Saldaña Daniel J. Saldaña Daniel J. Saldaña Follow Sep 16 Cómo obtener el número de seguidores de Twitch en el proceso de build para Astro #desarrollo #twitch #astro #spanish Add Comment 3 min read Cómo escribir archivos de log en Go Fabián Karaben Fabián Karaben Fabián Karaben Follow Sep 14 Cómo escribir archivos de log en Go #go #logging #spanish Add Comment 5 min read Ibuprofeno.py💊| #179: *erna* 13 Ibuprofeno.py💊| #179: Explica este cód*inners *ando Despliegues Blue-Green con AWS Route 53 diek diek diek Follow Oct 15 Implementando Despliegues Blue-Green con AWS Route 53 #spanish #deployment #aws #designpatterns Add Comment 4 min read Cuando tu factura de AWS se convierte en un meme y tu departamento financiero en un meme-lord 🚀💸 diek diek diek Follow Oct 14 Cuando tu factura de AWS se convierte en un meme y tu departamento financiero en un meme-lord 🚀💸 #spanish #finops #aws #humor Add Comment 3 min read Arrays paralelos * * * Follow Sep 23 Arrays paralelos #discuss #spanish #* Ibuprofeno.py💊| #177: *erna* 9 Ibuprofeno.py💊| #177: Explica este código Python #spanish #learning #python #beginners *86: *erna* 30 Ibuprofeno.py💊| #186: Explica este cód*inners * Pruebas Unitarias en Laravel con Sanctum Marco Ramírez Marco Ramírez Marco Ramírez Follow Sep 7 Pruebas Unitarias en Laravel con Sanctum #php #laravel #spanish #backend Add Comment 9 min read Ibuprofeno.py💊| #178: *erna* 11 Ibuprofeno.py💊| #178: Explica este código P* #python *76: *erna* 6 Ibuprofeno.py💊| #176: Explica este cód*inners Add Comment 1 min read Circuit Breaker: Protegiendo la Estabilidad de tus Microservicios diek diek diek Follow Oct 9 Circuit Breaker: Protegiendo la Estabilidad de tus Microservicios #spanish #designpatterns #cloud Add Comment 5 min read WordPress es un CMS lento Manuel Canga Manuel Canga Manuel Canga Follow Sep 5 WordPress es un CMS lento #spanish #wordpress #php #webperf Add Comment 7 min read Optimización \"Creación de cuenta\" en Apps 📱 Gabriela Muñoz Gabriela Muñoz Gabriela Muñoz Follow Sep 8 Optimización \"Creación de cuenta\" en Apps 📱 #ux #design #spanish #app Add Comment 2 min read Ibuprofeno.py💊| #174: *erna* 2 Ibuprofeno.py💊| #174: Explica este cód*inners Add Comment 1 min read 🌈 La propiedad border-radius para redondear esquinas en elementos CSS Lupita Code 🌄 Lupita Code 🌄 Lupita Code 🌄 Follow Oct 5 🌈 La propiedad border-radius para redondear esquinas en elementos CSS #css #tutorial #webdev #spanish 4 * Ibuprofeno.py💊| #173: *erna* 30 Ibuprofeno.py💊| #173: Explica este cód*inners Add Comment 1 min read Retgistro 003 — Flutter desde Cero: Simplificando tu main.dart y Dominando la Inyección de Dependencias JR Saucedo JR Saucedo JR Saucedo Follow Aug 28 Retgistro 003 — Flutter desde Cero: Simplificando tu main.dart y Dominando la Inyección de Dependencias #flutter #spanish #supabase #dependencyinjection Add Comment 6 min read Helm Charts: Empaquetando tu aplicación Guillermo Garcia Guillermo Garcia Guillermo Garcia Follow Aug 28 Helm Charts: Empaquetando tu aplicación #cloud #helm #kubernetes #spanish Add Comment 4 min read Ibuprofeno.py💊| #172: *erna* 28 Ibuprofeno.py💊| #172: Explica este cód*inners * Como consumir una API con REACT 19 | use - suspense Pablo Mchn Pablo Mchn Pablo Mchn Follow Sep 30 Como consumir una API con REACT 19 | use - suspense #spanish #react #webdev #* Cómo hacer que ESLint 9.11.1 funcione en Vue 3 Francisco Zapata Francisco Zapata Francisco Zapata Follow Sep 27 Cómo hacer que ESLint 9.11.1 funcione en Vue 3 #vue #eslint #frontend #spanish * Ibuprofeno.py💊| #169: *erna* 23 Ibuprofeno.py💊| #169: * #learning #spanish #beginners *71: *erna* 26 Ibuprofeno.py💊| #171: Explica * #beginners #learning 1 reaction *75: *erna* 4 Ibuprofeno.py💊| #175: Explica este cód*inners * Principios SOLID Sebastián Barrera Herrera Sebastián Barrera Herrera Sebastián Barrera Herrera Follow Aug 20 Principios SOLID #solidjs #webdev #spanish #poo Add Comment 4 min read Cómo integré la validación facial de Azure en mi web hecha con Astro y Next.js Daniel J. Saldaña Daniel J. Saldaña Daniel J. Saldaña Follow Sep 23 Cómo integré la validación facial de Azure en mi web hecha con Astro y Next.js #nextjs #azure #astro #spanish * Ibuprofeno.py💊| #166: *erna* 20 Ibuprofeno.py💊| #166: Explica este cód*inners *65: *erna* 19 Ibuprofeno.py💊| #165: Explica este código P* #python Add Comment 1 min read Protege tu web Astro con React y Next.js: Moderación de comentarios con Azure Content Safety Daniel J. Saldaña Daniel J. Saldaña Daniel J. Saldaña Follow Aug 18 Protege tu web Astro con React y Next.js: Moderación de comentarios con Azure Content Safety #nextjs #azure #astro #spanish Add Comment 4 min read Ibuprofeno.py💊| #163: *erna* 16 Ibuprofeno.py💊| #163: Explica este cód*inners *64: *erna* 16 Ibuprofeno.py💊| #164: Explica este código Python #spanish #learning #python #beginners *62: *erna* 15 Ibuprofeno.py💊| #162: * #learning #beginners #spanish Add Comment 1 min read Pesadillas con If/else * * * Follow Sep 18 Pesadillas con If/else #discuss #spanish #* Actualización devtospanish Danniel Navas Danniel Navas Danniel Navas Follow Oct 16 Actualización devtospanish #spanish #comunidad #web Add C* Lunes de música... ¿Qué estás escuchando? 🎵 (13-junio) 5 comments Lunes de música... ¿Qué estás escuchando? 🎵 (30-mayo) 4 comments Lunes de música... ¿Qué estás escuchando? 🎵 (23-mayo) 6 comments Lunes de música... ¿Qué estás escuchando? 🎵 (16-mayo) 1 comment Lunes de música... ¿Qué estás escuchando? 🎵 (09-mayo) 2 comments Lunes de música... ¿Qué estás escuchando? 🎵 1 comment Lunes de música... ¿Qué estás escuchando? 🎵 6 comments Programación Orientada a Objetos... sin if's. New Paracetamol.js💊| #117: Explica este código JavaScript 3 comments Arrays paralelos New trending guides/resources Records vs Clases en Java Despliega un WordPress de Alta Disponibilidad en AWS con Terraform en 30 Minutos: Guía Paso a Paso El futuro de Angular es AlphaFold: Hacia Posibilidades Infinitas y el Próximo Paso en la Evolución Humana Manual de supervivencia Git de Ned 📚 Ibuprofeno.py💊| #189: Explica este código Python ¿Cómo usar la clase Properties en Java? Usar OpenAI como Asistente para tu equipo de trabajo: Implementación y ventajas El Principio de Inversión de Dependencias: Construyendo una casa inteligente flexible Aprende a pelear tus batallas Encontrando Tu Propio Camino 🌈 La propiedad border-radius para redondear esquinas en elementos CSS * * ",
    "url": "https://dev.to/t/spanish"
  },
  {
    "body": "* # systemdesign * 660 Posts Published Older #systemdesign posts 1 2 3 4 5 6 7 8 9 *. Understanding Database Sharding * 10 Understanding Database Sharding #knowledgebytes #databasesharding #systemdesign Add Comment 2 min read Top 20 System Design Terminologies You Must Know Abdulla Ansari Abdulla Ansari Abdulla Ansari Follow Nov 10 Top 20 System Design Terminologies You Must Know #systemdesign #systems #coding #* System Design: Building a Parking Lot System in Go Saloni Agarwal Saloni Agarwal Saloni Agarwal Follow Nov 9 System Design: Building a Parking Lot System in Go #go #systemdesign #lld #parkinglot 2 * System Design 07 - CDNs: The Speed Boosters for Your Content * Nov 9 System Design 07 - CDNs: The Speed Boosters for Your Content #systemdesign #cdn #basic Add Comment 2 min read System Design 06 - Message Queues: The Secret Schedulers Behind Scalable Systems * Nov 8 System Design 06 - Message Queues: The Secret Schedulers Behind Scalable Systems #systemdesign #messagequeues #eventdriven Add Comment 2 min read WhatsApp System Design: A Humorous Journey Through High-Level and Low-Level Architecture Harshit Singh Harshit Singh Harshit Singh Follow Nov 9 WhatsApp System Design: A Humorous Journey Through High-Level and Low-Level Architecture #webdev #java #systemdesign #wittedtech 1 reaction 1 comment 6 min rea*in read Understanding Zero Downtime Deployments * 7 Understanding Zero Downtime Deployments #devops #zerodowntime #knowledgebyte #systemdesign Add Comment 2 min read Design Patterns: Adapter - *anna Rodda*s: Adapter - using GoLang #systemdesign #beginners #* 3 min read Design Pattern: Builder - *anna Rodda*: Builder - using GoLang #systemdesign #beginners #progr* read Design Pattern: Abstract Factory - *anna Rodda*: Abstract Factory - using GoLang #* #systemdesign Add Comment 4 min read Design Pattern: Factory - *anna Rodda*: Factory - using GoLang #systemdesign #tutorial #programming #beginners * API Rate Limiting * 5 Understanding API Rate Limiting #apisecurity #systemdesign #architecture Add Comment 2 min read System design | High Level Design and Low Level Design | Part 2 * Nov 8 System design | High Level Design and Low Level Design | Part 2 #systemdesign #fullstack #devops #database 5 *d System design | Components | Part 1 * Nov 8 System design | Components | Part 1 #systemdesign #fullstack #devops #webdev 5 *d System Design 05 - Databases: The Backbone of Data and Digital Nostalgia * Nov 7 System Design 05 - Databases: The Backbone of Data and Digital Nostalgia #systemdesign #database * How Real-Time Editing Works: Understanding Event Ordering in Distributed Systems Ujjwal Raj Ujjwal Raj Ujjwal Raj Follow Nov 2 How Real-Time Editing Works: Understanding Event Ordering in Distributed Systems #techtalks #distributedsystems #softwareengineering #systemdesign Add Comment 4 min read Designing The Perfect Incentivised System - Part 2 Kumar Anirudha Kumar Anirudha Kumar Anirudha Follow Nov 2 Designing The Perfect Incentivised System - Part 2 #perpetual #incentive #rating #systemdesign Add Comment 8 min read 7. Understanding the Circuit Breaker Pattern * 2 7. Understanding the Circuit Breaker Pattern #systemdesign #springboot #microservices #knowledgebytes Add Comment 2 min read Cache NLogN🏎️ Anurag choudhary Anurag choudhary Anurag choudhary Follow Nov 1 Cache NLogN🏎️ #cache #webdev #systemdesign #* System Design 02 - Caching: The Art of Keeping Users Happy Without Breaking a Sweat * Nov 5 System Design 02 - Caching: The Art of Keeping Users Happy Without Breaking a Sweat #systemdesign #cache #basic * Designing The Perfect Incentivised System - Part 1 Kumar Anirudha Kumar Anirudha Kumar Anirudha Follow Oct 29 Designing The Perfect Incentivised System - Part 1 #perpetual #incentive #systemdesign #rating * Session Management, Tokens & Refresh Tokens Sudhi Ranjan Gupta Sudhi Ranjan Gupta Sudhi Ranjan Gupta Follow Oct 27 Session Management, Tokens & Refresh Tokens #blog #webdev #systemdesign #security 2 * System Design 04 - API Gateway: Your System’s VIP Entrance * Nov 6 System Design 04 - API Gateway: Your System’s VIP Entrance #systemdesign #apigateway #api * Introduction to System Design Adarsh Kumar Debata Adarsh Kumar Debata Adarsh Kumar Debata Follow Oct 22 Introduction to System Design #systemdesign #beginners #learn*ment 10 min read System Design 01 - Data Storage: Pick Your Poison Wisely * Nov 4 System Design 01 - Data Storage: Pick Your Poison Wisely #systemdesign #database #choice * Tackling Complex Software Issues: Insights for QA Engineers Shoeib Shargo Shoeib Shargo Shoeib Shargo Follow Oct 19 Tackling Complex Software Issues: Insights for QA Engineers #testing #qa #microservices #systemdesign Add Comment 6 min read Database Replication NLogN🔄 Anurag choudhary Anurag choudhary Anurag choudhary Follow Oct 17 Database Replication NLogN🔄 #systemdesign #webdev #beginners #database Add Comment 2 min read Exploring the 9 Essential Software Architecture Patterns * Oct 16 Exploring the 9 Essential Software Architecture Patterns #dsa #architecture #learning #systemdesign A* System Design: Load Balancer Nishant Naithani Nishant Naithani Nishant Naithani Follow Nov 7 Simplifying System Design: Load Balancer #systemdesign #architecture #learning #makingtecheasy * System Design: Building a Simple Social Media Platform in Go Saloni Agarwal Saloni Agarwal Saloni Agarwal Follow Nov 7 System Design: Building a Simple Social Media Platform in Go #lld #systemdesign #socialmedia #go 2 * Designing Idempotent APIs Bibek Ray Bibek Ray Bibek Ray Follow Oct 15 Designing Idempotent APIs #systemdesign #webdev #stripe * Idempotency in API * 6 Understanding Idempotency in API #apidesign #reliability #systemdesign #knowledgebyte 8 *d Design Pattern: Prototype - *anna Rodda*: Prototype - using GoLang #systemdesign #beginners #programming #tuto*n read Load Balancer NLogN 🏗️ Anurag choudhary Anurag choudhary Anurag choudhary Follow Oct 13 Load Balancer NLogN 🏗️ #systemdesign #scalability #webdev #* Simplifying System Design: Scaling (Vertical VS Horizontal) Nishant Naithani Nishant Naithani Nishant Naithani Follow Nov 5 Simplifying System Design: Scaling (Vertical VS Horizontal) #systemdesign #architecture #learning #makingtecheasy 8 *d System Design 03 - Load Balancing: Because Even Your System Needs to Chill * Nov 5 System Design 03 - Load Balancing: Because Even Your System Needs to Chill #systemdesign #loadbalancer #interview * Top 50 Must-Know System Design Interview Terminologies Akash Singh Akash Singh Akash Singh Follow Oct 13 Top 50 Must-Know System Design Interview Terminologies #systemdesign #webdev Add Comment 8 min read Using CDC or Outbox pattern in microservices for decentralized data propagation Meidi Airouche Meidi Airouche Meidi Airouche Follow Nov 4 Using CDC or Outbox pattern in microservices for decentralized data propagation #development #eventdriven #systemdesign #architecture * Designing a Developer Toolchain for a Frontend Library Biswas Prasana Swain Biswas Prasana Swain Biswas Prasana Swain Follow Oct 12 Designing a Developer Toolchain for a Frontend Library #webdev #javascript #react #systemdesign * Choosing Between Microservices and Monolithic Architecture * 4 Choosing Between Microservices and Monolithic Architecture #systemdesign #springboot #microservices #interview 7 *d Application Dependency Mapping: A Real-World Example Thomas Johnson Thomas Johnson Thomas Johnson Follow Oct 10 Application Dependency Mapping: A Real-World Example #systemdesign #architecture #softwaredevelopment #devops Add Comment 2 min read 8 System Design Courses to learn Distributed System Architecture (2025) Soma Soma Soma Follow Oct 25 8 System Design Courses to learn Distributed System Architecture (2025) #programming #development #systemdesign #softwaredevelopment 732 reactions 3 comments 15 min read System design: TinyURL * Jayaprasanna Roddam Follow Oct 7 System design: TinyURL #design #tinyurl #designpatterns #systemdesign * Design Rate Limiter * Prashant Mishra Follow Oct 6 Design Rate Limiter #systemdesign #softwaredevelopment #hld Add Comment 5 min read Data at Scale: Unlocking the Secrets of Hive and Cassandra in Distributed Systems Arnab Chatterjee Arnab Chatterjee Arnab Chatterjee Follow for CreoWis Oct 27 Data at Scale: Unlocking the Secrets of Hive and Cassandra in Distributed Systems #systemdesign #programming #learning #database 10 *d System design: Designing an Online Book Reader System(Like Kindle) * Jayaprasanna Roddam Follow Oct 8 System design: Designing an Online Book Reader System(Like Kindle) #systemdesign #interview #design #designpatterns Add Comment 5 min read Strategy design pattern Rajender Singh Banoula Rajender Singh Banoula Rajender Singh Banoula Follow Oct 3 Strategy design pattern #systemdesign #designpatterns #cpp #lowleveldesign Add Comment 4 min read System design: Design Patterns in System Architecture * Jayaprasanna Roddam Follow Oct 7 System design: Design Patterns in System Architecture #systemdesign #programming #architecture #designpatterns Add Comment 5 min read System design: Building a Vending Machine in Go Saloni Agarwal Saloni Agarwal Saloni Agarwal Follow Nov 4 System design: Building a Vending Machine in Go #lld #go #systemdesign #designpatterns 6 * Design Spotify * Prashant Mishra Follow Oct 2 Design Spotify #spotify #systemdesign #sof* System Design Covering Fundamental Concepts Nitin Dahiya Nitin Dahiya Nitin Dahiya Follow Oct 14 System Design Covering Fundamental Concepts #systemdesign #softwaredevelopment #architecture #kubernetes * Choosing database in system design * Prashant Mishra Follow Oct 2 Choosing database in system design #systemdesign #database #softwared* Building a High-Performance Full-Text Search Engine in Go * Oct 31 Building a High-Performance Full-Text Search Engine in Go #go #programming #systemdesign #tutorial 11 *ad System Design: Library Management System Saloni Agarwal Saloni Agarwal Saloni Agarwal Follow Oct 31 System Design: Library Management System #go #systemdesign #lld 2 *d Design Twitter * Prashant Mishra Follow Sep 28 Design Twitter #systemdesign #dsa #interview * Top 50 System Design Terminologies You Must Know Bonaventure Ogeto Bonaventure Ogeto Bonaventure Ogeto Follow Oct 30 Top 50 System Design Terminologies You Must Know #systemdesign #architecture #softwareengineering #designsystem * Moving from Junior to Senior Developer: Key Skills to Master on Your Journey Okoye *amaka Follow Oct 19 Moving from Junior to Senior Developer: Key Skills to Master on Your Journey #webdev #softwaredevelopment #systemdesign #mentorship * System Design of YouTube: A Detailed Deep Dive into the Video Giant Harshit Singh Harshit Singh Harshit Singh Follow Oct 27 System Design of YouTube: A Detailed Deep Dive into the Video Giant #webdev #java #systemdesign #witttedtech 117 reactions 12 comments 6 min read Unveiling the Backbone of YouTube Live Streaming: A Deep Dive into YouTube’s Architecture and Real-Time Video Processing Harshit Singh Harshit Singh Harshit Singh Follow Oct 29 Unveiling the Backbone of YouTube Live Streaming: A Deep Dive into YouTube’s Architecture and Real-Time Video Processing #webdev #youtube #systemdesign #wittedtech 4 * 8. The Journey of Data in a Web Application * 3 8. The Journey of Data in a Web Application #systemdesign #springboot #microservices #interview Add Comment 2 min read D-Smart.io AWS Web Application d-smart d-smart d-smart Follow Oct 29 D-Smart.io AWS Web Application #python #aws #terraform #systemdesign Add C* What is Distributed systems? 4 comments FlashFetch: Concurrent, Multi-part file downloader 1 comment AMDEC : Analyse des Modes de Défaillance, de leurs Effets et de leurs Criticités New What to think about when designing, building, managing and operating data systems. New HELP!! How to limit multiple API calls after the first call New trending guides/resources 8 System Design Courses to learn Distributed System Architecture (2025) Is System Design Interview Book by Alex Xu Worth Reading? Review How does Apache Kafka work? Why is Kafka So fast? Proxy Design Pattern System Design of YouTube: A Detailed Deep Dive into the Video Giant Builder Design Pattern Top 16 System Design Resources for Programming Interviews 14 Case Studies: Master System Design in a Month Twitter System Design Example for Tech Interviews Low level design and SOLID Principles Building a High-Performance Full-Text Search Engine in Go Abstract Factory Design Pattern Unveiling the Backbone of YouTube Live Streaming: A Deep Dive into YouTube’s Architecture and Real-Time Video Processing 50 System Design Terms That Will Make You Sound Like a Pro ### Day 1: Introduction to System Design Elevator Scheduling Algorithms: FCFS, SSTF, SCAN, and LOOK Prototype Design Pattern System Design: Availability Patterns Top 10 System Designs || Interview Guide ACID Transaction*nsor Neon * ",
    "url": "https://dev.to/t/systemdesign"
  },
  {
    "body": "* # telegram Follow Hide Create Post 240 Posts Published Older #telegram posts 1 2 3 4 *. Scraping New Telegram Channels pauq pauq pauq Follow Nov 7 Scraping New Telegram Channels #telegram #python #webscraping #* Pavel Durov's Arrest: A Clash of Free Speech and Tech Accountability SnapNews SnapNews SnapNews Follow Oct 15 Pavel Durov's Arrest: A Clash of Free Speech and Tech Accountability #freespeech #telegram #paveldurov #techindustry * a Telegram Bot with Python and AWS: A Step-by-Step short Guide Alexander_Yizchak Alexander_Yizchak Alexander_Yizchak Follow Oct 8 Creating a Telegram Bot with Python and AWS: A Step-by-Step short Guide #telegram #aws Add Comment 2 min read A Python Framework for Telegram Bots BotMaker BotMaker BotMaker Follow Oct 22 A Python Framework for Telegram Bots #telegram #python #chatbot #flask * Pavel Durov's Arrest: What It Means for Free Speech & Tech Innovation SnapNews SnapNews SnapNews Follow Oct 8 Pavel Durov's Arrest: What It Means for Free Speech & Tech Innovation #paveldurov #telegram #freespeech #legalissues Add Comment 3 min read The Arrest of Pavel Durov: A Misstep in the Fight for Free Speech? SnapNews SnapNews SnapNews Follow Oct 8 The Arrest of Pavel Durov: A Misstep in the Fight for Free Speech? #paveldurov #freespeech #socialmedia #telegram Add Comment 2 min read Análise de Rompimentos no Ativo US30: Um Script Python para Traders Usando MetaTrader 5 Henrique Vital Henrique Vital Henrique Vital Follow Oct 4 Análise de Rompimentos no Ativo US30: Um Script Python para Traders Usando MetaTrader 5 #telegram #metatrader5 #pythontrading Add Comment 3 min read Guia Completo: Construindo um Bot Seguro de Integração entre Telegram e MetaTrader5 em Python Henrique Vital Henrique Vital Henrique Vital Follow Oct 4 Guia Completo: Construindo um Bot Seguro de Integração entre Telegram e MetaTrader5 em Python #telegram #metatrader5 #python Add Comment 22 min read The Controversy Behind Pavel Durov's Arrest: What You Need to Know SnapNews SnapNews SnapNews Follow Sep 24 The Controversy Behind Pavel Durov's Arrest: What You Need to Know #paveldurov #telegram #socialmedia #freespeech Add Comment 2 min read Monitoring servers with Telegram BotMaker BotMaker BotMaker Follow Oct 22 Monitoring servers with Telegram #telegram #python #l Add Comment 2 min read Pavel Durov's Arrest: A Misstep or a Warning for Digital Freedom? SnapNews SnapNews SnapNews Follow Sep 10 Pavel Durov's Arrest: A Misstep or a Warning for Digital Freedom? #digitalfreedom #paveldurov #telegram #contentmoderation Add Comment 3 min read Multi Tap issue when developing the Telegram miniapp. luckybutter luckybutter luckybutter Follow Aug 22 Multi Tap issue when developing the Telegram miniapp. #telegram #javascript #typescript #bot Add Comment 1 min read 아이폰 단축어에서 POST API 호출해서 텔레그램으로 인증코드 공유하기 Beaver Bridge Beaver Bridge Beaver Bridge Follow Aug 22 아이폰 단축어에서 POST API 호출해서 텔레그램으로 인증코드 공유하기 #iphone #telegram #restapi * Your First BotMate Plugin: A Step-by-Step Guide Monawwar Abdullah Monawwar Abdullah Monawwar Abdullah Follow Sep 20 Building Your First BotMate Plugin: A Step-by-Step Guide #typescript #react #tailwindcss #telegram 3 * Create a Telegram Bot on Python Dmitry Koleev Dmitry Koleev Dmitry Koleev Follow Sep 19 Create a Telegram Bot on Python #python #telegram #programming #webdev * BroadcastChannel - Turn your Telegram Channel into a MicroBlog MT MT MT Follow Aug 11 BroadcastChannel - Turn your Telegram Channel into a MicroBlog #telegram #astro #microblog #github Add Comment 2 min read Host Telegram Bot on Raspberry Pi 5 Dmitry Koleev Dmitry Koleev Dmitry Koleev Follow Sep 24 Host Telegram Bot on Raspberry Pi 5 #telegram #raspberrypi #python #bot 1 comment 4 min read Introducing telAdviser: Your Ultimate Telegram Assistant Meisam Maani Meisam Maani Meisam Maani Follow Aug 18 Introducing telAdviser: Your Ultimate Telegram Assistant #node #telegram #bypass Add Comment 1 min read Supercharge Your Telegram Experience with Our Chrome Extension Meisam Maani Meisam Maani Meisam Maani Follow Aug 18 Supercharge Your Telegram Experience with Our Chrome Extension #extensions #telegram #webdev #* Serverless Telegram Bot: Setting up our environment in AWS with CDK Nicolás Vera Nicolás Vera Nicolás Vera Follow Aug 27 Serverless Telegram Bot: Setting up our environment in AWS with CDK #cdk #lambda #aws #telegram * Telegram Mini Apps Journey Haowang Haowang Haowang Follow Aug 24 Telegram Mini Apps Journey #telegram #react #nextjs 2 *d Como hice dinero (USD 2.500) con Telegram en Chile Oscar Carvajal Oscar Carvajal Oscar Carvajal Follow Aug 19 Como hice dinero (USD 2.500) con Telegram en Chile #español #chile #telegram #startup 4 *d Telegram weather bot kyoresuas kyoresuas kyoresuas Follow Jul 6 Telegram weather bot #* #telegram Add Comment 1 min read Using Nuxt 3 server routes for telegram bot api Alexander Kim Alexander Kim Alexander Kim Follow Jul 21 Using Nuxt 3 server routes for telegram bot api #telegram #nuxt 9 *d how do i open a html file with a button? anton y anton y anton y Follow May 30 how do i open a html file with a button? #telegram Add Comment 1 min read Phone Number Verification Bot 📞✅ Dakidarts Dakidarts Dakidarts Follow Jul 3 Phone Number Verification Bot 📞✅ #telegram #telegrambot #dakidarts #bot 7 * Hamster Kombat: listing is coming! Nishant Bijani Nishant Bijani Nishant Bijani Follow Jun 28 Hamster Kombat: listing is coming! #hamsterkombat #cryptocurrency #cryptogames #telegram 48 reactions 7 comments 9 min read Push notifications from server with Telegram Bot API Alin Climente Alin Climente Alin Climente Follow Jun 16 Push notifications from server with Telegram Bot API #telegram #python 10 * Automating Telegram Bot * Docker * Jun 12 Automating Telegram Bot * Docker #docker #githubactions #telegrambot #telegram Add Comment 9 min read Share your content with Contentful and Telegram William Iommi William Iommi William Iommi Follow Jun 3 Share your content with Contentful and Telegram #contentful #telegram #extensibility #headlesscms 2 *d How to build a fully-fledged telegram bot in Python Edun Rilwan Edun Rilwan Edun Rilwan Follow May 31 How to build a fully-fledged telegram bot in Python #python #telegram #chatbot #database 5 reactions 2 comments 25 min read How to Fix The Telegram Mini App Scrolling Collapse Issue: A Handy Trick nimaxin nimaxin nimaxin Follow May 28 How to Fix The Telegram Mini App Scrolling Collapse Issue: A Handy Trick #telegram #telegrambot #javascript 41 reactions 8 comments 3 min read Send Message BOT Telegram NodeJs ilhamsabir ilhamsabir ilhamsabir Follow Mar 13 Send Message BOT Telegram NodeJs #node #telegram #bot #webdev Add Comment 1 min read Making a Telegram bot with BotticelliBots BotticelliBots BotticelliBots BotticelliBots Follow Apr 10 Making a Telegram bot with BotticelliBots #bot #telegram #botticellibots #csharp * Telegram bot with Camel & Spring boot silenzzz silenzzz silenzzz Follow Apr 4 Telegram bot with Camel & Spring boot #springboot #java #apachecamel #telegram 4 *d How to Build a Telegram Bot: A Beginner’s Step-by-Step Guide * Mar 9 How to Build a Telegram Bot: A Beginner’s Step-by-Step Guide #telegram #telegrambot #chatbot #python * Telegram bot for viewing, receiving and sending emails from any mail server including Gmail. Anton MegaPort Anton MegaPort Anton MegaPort Follow Mar 6 Telegram bot for viewing, receiving and sending emails from any mail server including Gmail. #telegram #bot #email #gmail Add Comment 2 min read Deploying Cloud Instances Made Easy: Explore the Compute Deployer Telegram Bot SpheronStaff SpheronStaff SpheronStaff Follow for Spheron Jan 29 Deploying Cloud Instances Made Easy: Explore the Compute Deployer Telegram Bot #telegram #bot #deployment #spheron Add Comment 6 min read Telegraf JS: Library for creating telegram bot using Javascript Humehr Sanatkar Humehr Sanatkar Humehr Sanatkar Follow Jan 14 Telegraf JS: Library for creating telegram bot using Javascript #javascript #node #telegram 4 reactions 6 comments 2 min read How to Host a Telegram Bot on Ubuntu: A Step-by-Step Guide * Jan 14 How to Host a Telegram Bot on Ubuntu: A Step-by-Step Guide #ubuntu #telegram #telegrambot #hosting 3 * Introduction to C# User Bots with WTelegramClient Ali Salehi Ali Salehi Ali Salehi Follow Dec 17 '23 Introduction to C# User Bots with WTelegramClient #csharp #telegram #opensource #tutorial 15 reactions 3 comments 7 min read Monetization plan for a Telegram Bot: From zero to first profit. Alex Dro Alex Dro Alex Dro Follow Dec 12 '23 Monetization plan for a Telegram Bot: From zero to first profit. #monetization #telegram #startup #telegrambot 3 *d Laravel package to integrate telegram bot api Milly Khamroev Milly Khamroev Milly Khamroev Follow Nov 26 '23 Laravel package to integrate telegram bot api #laravel #telegram #telegrambot #api 8 reacti*ing a telegram bot shushugah shushugah shushugah Follow Nov 8 '23 Creating a telegram bot #telegram #bot #zapier 2 reacti*ing Telegram Mini App with Drayman Framework Yan Ivan Evdokimov Yan Ivan Evdokimov Yan Ivan Evdokimov Follow Nov 2 '23 Building Telegram Mini App with Drayman Framework #drayman #telegram #typescript #webdev 32 reactions 3 comments 16 min read Telegram ML Competition 2023: TonRadar Solution Mehran Davoudi Mehran Davoudi Mehran Davoudi Follow Oct 22 '23 Telegram ML Competition 2023: TonRadar Solution #telegram #machinelearning #python #azure *ad Building Powerful Telegram Chatbots: Top Bot API Library Examples Harshvardhan Basava Harshvardhan Basava Harshvardhan Basava Follow Oct 12 '23 Building Powerful Telegram Chatbots: Top Bot API Library Examples #chatbots #telegram #telegrambots #explore Add Comment 2 min read Top 10 Frameworks for Creating Telegram Bots - A Developer's Guide Harshvardhan Basava Harshvardhan Basava Harshvardhan Basava Follow Oct 11 '23 Top 10 Frameworks for Creating Telegram Bots - A Developer's Guide #telegram #telegrambot #chatbots 17 *d Как сделать TG Instant View из страницы Notion artpani artpani artpani Follow Sep 18 '23 Как сделать TG Instant View из страницы Notion #notion #instantview #telegram #markdown 10 *d Creando un notificador en Telegram con Bash Vay3t Vay3t Vay3t Follow Aug 26 '23 Creando un notificador en Telegram con Bash #telegram #bash #python #notificador * How to Create a Telegram Bot to Monitor Your Service Uptime in Python (Part 1: Instant Metrics) Kirill Balakhonov Kirill Balakhonov Kirill Balakhonov Follow Jul 24 '23 How to Create a Telegram Bot to Monitor Your Service Uptime in Python (Part 1: Instant Metrics) #python #web3 #linux #telegram 2 * How to build a Telegram Bot with ChatGPT integration. hayerhans hayerhans hayerhans Follow Jul 10 '23 How to build a Telegram Bot with ChatGPT integration. #chatgpt #telegram #bot #python 20 * Writing a Telegram bot with SvelteKit and Vercel Alexander Demin Alexander Demin Alexander Demin Follow Jul 8 '23 Writing a Telegram bot with SvelteKit and Vercel #svelte #sveltekit #telegram #vercel 3 *d Part 2 - Saving data. Creating a Ruby App to get notified about Epic Free Games. Eloy Pérez Eloy Pérez Eloy Pérez Follow Jun 27 '23 Part 2 - Saving data. Creating a Ruby App to get notified about Epic Free Games. #ruby #telegram #games #sequel Add Comment 6 min read Part 1 - Fetching Data. Creating a Ruby App to get notified about Epic Free Games. Eloy Pérez Eloy Pérez Eloy Pérez Follow Jun 23 '23 Part 1 - Fetching Data. Creating a Ruby App to get notified about Epic Free Games. #ruby #telegram #games #sequel 3 * Making a Password Generator Bot in 9 Languages Kidus Kidus Kidus Follow Jun 11 '23 Making a Password Generator Bot in 9 Languages #bot #telegram #beginners #webdev Add Comment 3 min read Get the rain alerts in Telegram Jaime Jaime Jaime Follow May 27 '23 Get the rain alerts in Telegram #node #typescript #aemet #telegram Add Comment 6 min read Video Downloader Bot for Telegram - Tutorial Vlyth_r Vlyth_r Vlyth_r Follow May 26 '23 Video Downloader Bot for Telegram - Tutorial #bot #videodownloader #telegram #tutorial 40 * Building a Weather and Time Telegram Bot using Node.js Chris Achinga Chris Achinga Chris Achinga Follow May 15 '23 Building a Weather and Time Telegram Bot using Node.js #telegram #bot #node 6 * Get a Telegram message when someone connects via ssh on your linux server Xabi Xabi Xabi Follow Mar 30 '23 Get a Telegram message when someone connects via ssh on your linux server #linux #telegram #tutorial #bash 8 * Fi* Telegram #webdev #*d The Importance & Uses of Telegram Channels/Group Links for Jobs, Education, & Awareness Danish Danish Danish Follow Nov 6 The Importance & Uses of Telegram Channels/Group Links for Jobs, Education, & Awareness #socialmedia #telegram #telegramchannel*o build a Telegram AI bot with N8N Kaiwalya Koparkar Kaiwalya Koparkar Kaiwalya Koparkar Follow for Elestio Jul 5 How to build a Telegram AI bot with N8N #gettingstarted #n8n #elestio #telegram *... #discuss possible to use td with golang New Build mobile app with TDLib for Telegram New GDPR and Telegram Bots 3 * Create a Telegram Bot on Python Serverless Telegram Bot: Setting up our environment in AWS with CDK Building Your First BotMate Plugin: A Step-by-Step Guide A Python Framework for Telegram Bot*nsor Neon * ",
    "url": "https://dev.to/t/telegram"
  },
  {
    "body": "* # telegrambot Follow Hide Create Post 32 Posts Published *. Phone Number Verification Bot 📞✅ Dakidarts Dakidarts Dakidarts Follow Jul 3 Phone Number Verification Bot 📞✅ #telegram #telegrambot #dakidarts #bot 7 * Automating Telegram Bot * Docker * Jun 12 Automating Telegram Bot * Docker #docker #githubactions #telegrambot #telegram Add Comment 9 min read How to Fix The Telegram Mini App Scrolling Collapse Issue: A Handy Trick nimaxin nimaxin nimaxin Follow May 28 How to Fix The Telegram Mini App Scrolling Collapse Issue: A Handy Trick #telegram #telegrambot #javascript 41 reactions 8 comments 3 min read Creating Your First Telegram Bot: Step-by-Step Guide with BotFather | Part 1 Ehsan Ehsan Ehsan Follow May 27 Creating Your First Telegram Bot: Step-by-Step Guide with BotFather | Part 1 #pythonproject #telegrambot #telebot #python* 1 min read How to Dockerize a Telegram Bot: A Step-by-Step Guide * Apr 1 How to Dockerize a Telegram Bot: A Step-by-Step Guide #docker #cloud #hosting #telegrambot 6 * How to Build a Telegram Bot: A Beginner’s Step-by-Step Guide * Mar 9 How to Build a Telegram Bot: A Beginner’s Step-by-Step Guide #telegram #telegrambot #chatbot #python * How to Host a Telegram Bot on Ubuntu: A Step-by-Step Guide * Jan 14 How to Host a Telegram Bot on Ubuntu: A Step-by-Step Guide #ubuntu #telegram #telegrambot #hosting 3 * Monetization plan for a Telegram Bot: From zero to first profit. Alex Dro Alex Dro Alex Dro Follow Dec 12 '23 Monetization plan for a Telegram Bot: From zero to first profit. #monetization #telegram #startup #telegrambot 3 *d Laravel package to integrate telegram bot api Milly Khamroev Milly Khamroev Milly Khamroev Follow Nov 26 '23 Laravel package to integrate telegram bot api #laravel #telegram #telegrambot #api 8 *d Top 10 Frameworks for Creating Telegram Bots - A Developer's Guide Harshvardhan Basava Harshvardhan Basava Harshvardhan Basava Follow Oct 11 '23 Top 10 Frameworks for Creating Telegram Bots - A Developer's Guide #telegram #telegrambot #chatbots 17 reacti*e a Telegram Bot with Node.js Nirmal Kumar Nirmal Kumar Nirmal Kumar Follow Oct 9 '23 Create a Telegram Bot with Node.js #node #telegrambot #api #bot * Telegram AI bot creation using ChatGPT and AWS Lambda (Python) Ritesh Yadav Ritesh Yadav Ritesh Yadav Follow for Python Discipline @EPAM India Apr 5 '23 Telegram AI bot creation using ChatGPT and AWS Lambda (Python) #chatgpt #telegrambot #aws #python 9 * AI makes telegram bot with aiogram! 🤯 Nurjalol Nurjalol Nurjalol Follow Jan 12 '23 AI makes telegram bot with aiogram! 🤯 #ai #python #telegrambot #programming 4 * Build a Bot with ZettaBlock GraphQL API Kamal Nayan Kamal Nayan Kamal Nayan Follow Jan 1 '23 Build a Bot with ZettaBlock GraphQL API #api #zettablock #javascript #telegrambot 2 *d Telegram bot with Golang and Mongodb Mathias Jiya Mathias Jiya Mathias Jiya Follow Sep 5 '22 Telegram bot with Golang and Mongodb #telegrambot #go #bot #mongodb 1 reaction 2 comments 5 min read Deploying Python Telegram Bot On Heroku Without Using Flask Dominic Koech Dominic Koech Dominic Koech Follow Aug 22 '22 Deploying Python Telegram Bot On Heroku Without Using Flask #python #telegrambot #heroku #beginners 7 * Telegram Games: An Intermediate Guide Wen Jun Wen Jun Wen Jun Follow Aug 1 '22 Telegram Games: An Intermediate Guide #telegram #bot #telegrambot #game 110 * Create a feed reader bot with PHP (2) Muhammad MP Muhammad MP Muhammad MP Follow Jul 30 '22 Create a feed reader bot with PHP (2) #telegram #telegrambot #php #tutorial 8 * Create a feed reader bot with PHP (1) Muhammad MP Muhammad MP Muhammad MP Follow Jul 28 '22 Create a feed reader bot with PHP (1) #telegram #telegrambot #php #tutorial 30 * Building a JAVA Telegram Bot and Deploying in heroku VINU VINU VINU Follow Mar 5 '22 Building a JAVA Telegram Bot and Deploying in heroku #java #telegrambot #heroku #spring 22 * How to Deploy a Telegram Bot with Flask, pyTelegramBotAPI, Gunicorn and PostgreSQL to Heroku Joseph Adediji Joseph Adediji Joseph Adediji Follow Aug 6 '21 How to Deploy a Telegram Bot with Flask, pyTelegramBotAPI, Gunicorn and PostgreSQL to Heroku #deployment #heroku #telegrambot #python 8 *d JavaSript Bot Server Serverlesskiy Server Serverlesskiy Server Serverlesskiy * Mar 26 '21 JavaSript Bot #javascript #reactnative #awsamplify #telegrambot 12 *d Zoom Meetings Automation Yash Mahagaonkar Yash Mahagaonkar Yash Mahagaonkar Follow Feb 6 '21 Zoom Meetings Automation #python #zoommeetings #telegrambot #database 4 *d Telegram uchun Python dasturlash tili uchun Bot yaratish Shavkat Toshpulotov Shavkat Toshpulotov Shavkat Toshpulotov Follow Feb 5 '21 Telegram uchun Python dasturlash tili uchun Bot yaratish #telegrambot 3 *d My First Telegram Bot Bervianto Leo Pratama Bervianto Leo Pratama Bervianto Leo Pratama Follow Dec 31 '20 My First Telegram Bot #machinelearning #pdftoimage #pdfconverter #telegrambot * Telegram Quote Bot 📚 Karan Batra Karan Batra Karan Batra Follow Sep 15 '20 Telegram Quote Bot 📚 #python #telegrambot #books #quotes 8 *d Building a Serverless Telegram Chatbot with Dialogflow and Firebase Functions Varun Raj Varun Raj Varun Raj Follow for Skcript Aug 17 '20 Building a Serverless Telegram Chatbot with Dialogflow and Firebase Functions #firebase #dialogflow #chatbots #telegrambot 18 * How to send messages to all users that interact with a Telegram bot Matei Tudose Matei Tudose Matei Tudose Follow Jun 11 '20 How to send messages to all users that interact with a Telegram bot #automation #python #telegrambot #database 20 * Optimising Your Telegram Bot Response Times ImTheDeveloper ImTheDeveloper ImTheDeveloper Follow Oct 24 '19 Optimising Your Telegram Bot Response Times #optimisation #telegrambot #bots #telegram 14 * How I wrote a Telegram bot for Bitbucket using Heroku and Python. Deepjyoti Barman Deepjyoti Barman Deepjyoti Barman Follow Oct 24 '19 How I wrote a Telegram bot for Bitbucket using Heroku and Python. #python #telegrambot #bitbucket #heroku 9 *d Guide on How to Create and Deploy a Telegram Bot Django Stars Django Stars Django Stars Follow for Django Stars Jul 24 '18 Guide on How to Create and Deploy a Telegram Bot #python #telegrambot #development #chatbots 87 reactions 5 comments 10 min read Building a chat bot using Nest.js and Telegram Oluyemi Oluyemi Oluyemi Follow May 15 '18 Building a chat bot using Nest.js and Telegram #nestjsandtelegram #telegrambot #buildingachatbot #bots 48 * Fi* Telegram #webdev #*d Telegram Bots: Making Things Easier and Better Communication Anzhelika Anzhelika Anzhelika Follow Feb 25 Telegram Bots: Making Things Easier and Better Communication #development #telegram #bot #telegrambot * Rails broadcast report to telegram dynamically radin reth radin reth radin reth Follow Jul 22 '21 Rails broadcast report to telegram dynamically #rails #telegrambot #chartjs #wickedpdf 1 reaction Add Comment 1 *onsor Neon * ",
    "url": "https://dev.to/t/telegrambot"
  },
  {
    "body": "* Testing Follow Hide Find those bugs before your users do! 🐛 Create Post tag moderators 9691 Posts Published Older #testing *61 *. Automated Testing with Pytest arinak1017 arinak1017 arinak1017 Follow Nov 10 Automated Testing with Pytest #testing #python Add Comment 5 min read Automate Web Testing in C#: A Guide with PuppeteerSharp and SpecFlow Mukarram Javid Mukarram Javid Mukarram Javid Follow Nov 9 Automate Web Testing in C#: A Guide with PuppeteerSharp and SpecFlow #dotnet #specflow #testing #puppeteer Add Comment 6 min read Is Your Test Automation Effective? Metrics That Matter.. Akansh Singhal Akansh Singhal Akansh Singhal Follow Nov 9 Is Your Test Automation Effective? Metrics That Matter.. #automation #testing #testcoverage #testautomation Add Comment 3 min read Top 4 Popular Android Test Automation Frameworks During an Economic Downturn Jennifer Smith Jennifer Smith Jennifer Smith Follow Nov 8 Top 4 Popular Android Test Automation Frameworks During an Economic Downturn #testing #automation #android #mobile Add Comment 7 min read How Mobile Friendly Test Improves User Experience and App Design Steve Wortham Steve Wortham Steve Wortham Follow Nov 8 How Mobile Friendly Test Improves User Experience and App Design #webdev #ai #test*ment 5 min read How Equivalence Partitioning & Boundary Value Analysis Improve Test Accuracy Robort Robort Robort Follow Nov 8 How Equivalence Partitioning & Boundary Value Analysis Improve Test Accuracy #testing #ecp #bva #* 3 useful VS Code extensions for testing Ruby code Jokūbas Jokūbas Jokūbas Follow Nov 8 3 useful VS Code extensions for testing Ruby code #ruby #vscode #extensions #testing Add Comment 2 min read The internet with Cypress: Real-World Scenarios from Heroku’s “The Internet” Playground Jean Paiva Jean Paiva Jean Paiva Follow Nov 7 The internet with Cypress: Real-World Scenarios from Heroku’s “The Internet” Playground #testing #playwright #javascript #beginners * Multitenancy Is Fundamental to Shift-Left Testing Signadot Signadot Signadot Follow Nov 7 Multitenancy Is Fundamental to Shift-Left Testing #testing #qualityassurance #microservices #devops * How to Implement Regression Testing in Agile Environment Robort Robort Robort Follow Nov 7 How to Implement Regression Testing in Agile Environment #discuss #regressiontesting #tutorial #testing Add Comment 4 min read Testing Push Notification: Test Push Notification in iOS Simulator & Android satyaprakash behera satyaprakash behera satyaprakash behera Follow Nov 7 Testing Push Notification: Test Push Notification in iOS Simulator & Android #webdev #testing #software #ai Add Comment 8 min read API Testing – The Most Comprehensive Guide Ever Steve Wortham Steve Wortham Steve Wortham Follow Nov 7 API Testing – The Most Comprehensive Guide Ever #webdev #testing #ai #softwaredevelopment 1 reaction 1 comment 11 min read Distributed Load Testing with JMeter in Testkube Juan Ibarra Juan Ibarra Juan Ibarra Follow for Kubeshop Nov 6 Distributed Load Testing with JMeter in Testkube #kubernetes #testing #jmeter #testkube Add Comment 10 min read Test Execution: A 5-Step Framework for Success Juan Ibarra Juan Ibarra Juan Ibarra Follow for Kubeshop Nov 6 Test Execution: A 5-Step Framework for Success #kubernetes #framewor #testing #testkube Add Comment 6 min read Introduction to series on Testing Amandeep Singh Amandeep Singh Amandeep Singh Follow Nov 6 Introduction to series on Testing #testing #programming #beginners #sof* Stubbing HTTP communication in E2E test with Hoverfly Bartek Wilczek Bartek Wilczek Bartek Wilczek Follow Nov 6 Stubbing HTTP communication in E2E test with Hoverfly #e2e #testing #hoverfly #proxy Add Comment 8 min read Boas Práticas de Testes de Endpoints e Coleta de Evidências com Postman Elves Santos Elves Santos Elves Santos Follow Nov 6 Boas Práticas de Testes de Endpoints e Coleta de Evidências com Postman #java #testing #postman #braziliandevs Add Comment 5 min read Аutomated email-sending Vladimir Dimitrov Vladimir Dimitrov Vladimir Dimitrov Follow Nov 6 Аutomated email-sending #webdev #programming #python #testing 5 *d Test Plan vs Test Case: Key Differences Nazneenahmad Nazneenahmad Nazneenahmad Follow Nov 6 Test Plan vs Test Case: Key Differences #testplan #testing #qa #softwaretesting Add Comment 18 min read AI Test Report - Summarize Failed Tests SpecialBroccoli SpecialBroccoli SpecialBroccoli Follow Nov 5 AI Test Report - Summarize Failed Tests #ai #testing #cicd #testautomation Add Comment 5 min read Beyond Automation: How AI is Redefining the Role of QA in Software Development Shashank Arora Shashank Arora Shashank Arora Follow Nov 5 Beyond Automation: How AI is Redefining the Role of QA in Software Development #testing #playwright #ai Add Comment 4 min read * Antoine Cusset Antoine Cusset Antoine Cusset Follow Nov 6 * #testing #typescript #productivity #react Add Comment 7 min read What is Test Observability and How Does it Improve the Testing Process? John Stein John Stein John Stein Follow Nov 5 What is Test Observability and How Does it Improve the Testing Process? #observability #testing Add Comment 4 min read What is Automating UI Tests: Benefits and Best Practices Ronika Kashyap Ronika Kashyap Ronika Kashyap Follow Nov 5 What is Automating UI Tests: Benefits and Best Practices #testing #ui #ios #mobile Add Comment 5 min read Shift-Left Testing: The Key to Accelerating Quality in Agile Development * Aditya Pratap Bhuyan Follow Nov 5 Shift-Left Testing: The Key to Accelerating Quality in Agile Development #testing #agile #shiftlefttesting Add Comment 8 min read Exploring Test Automation in Embedded Systems Testing talent talent talent Follow Nov 4 Exploring Test Automation in Embedded Systems Testing #testing #automation #python #systems * Challenges and Solutions in Implementing AI for Software Testing Anil @ C Simplify IT Anil @ C Simplify IT Anil @ C Simplify IT Follow Nov 4 Challenges and Solutions in Implementing AI for Software Testing #testing Add Comment 5 *d Comment 3 min read Black Box Testing: A Complete Overview Emma Thomsan Emma Thomsan Emma Thomsan Follow Nov 4 Black Box Testing: A Complete Overview #testing #playwright #ai #devops Add Comment 8 min read 🚀 Building an AI-Powered Call Intelligence System: A Developer's Epic Journey Biswajit Patra Biswajit Patra Biswajit Patra Follow Nov 4 🚀 Building an AI-Powered Call Intelligence System: A Developer's Epic Journey #ai #python #tutorial #testing * Strategies to simplify your BDD step definitions Rosie Sherry Rosie Sherry Rosie Sherry Follow for Ministry of Testing Nov 8 Strategies to simplify your BDD step definitions #bdd #qa #testing Add Comment 14 * Boosting ROI through Secured Cloud-based Testing Abhay Chaturvedi Abhay Chaturvedi Abhay Chaturvedi Follow Nov 4 A Comprehensive Guide to Boosting ROI through Secured Cloud-based Testing #cloud #testing #roi #webdev Add Comment 8 min read Top 10 API Testing Tools for Testers in 2024 Wanda Wanda Wanda Follow Nov 8 Top 10 API Testing Tools for Testers in 2024 #testing #tooling #productivity #qa 8 * Incorrect calculations: cos(x) near x=k*π+π/2 Caleb Zhao Caleb Zhao Caleb Zhao Follow Nov 8 Incorrect calculations: cos(x) near x=k*π+π/2 #matlab #testing #cos #ai Add Comment 1 min read Convert a Charles session to a Postman collection Mona M. Abd El-Rahman Mona M. Abd El-Rahman Mona M. Abd El-Rahman Follow Nov 4 Convert a Charles session to a Postman collection #api #testing #charles #postman * Incorrect calculations: sin(x) near x=k*π Caleb Zhao Caleb Zhao Caleb Zhao Follow Nov 8 Incorrect calculations: sin(x) near x=k*π #testing #matlab #sin #ai *ing Unit Testing in ReadmeGenie Henrique Sagara Henrique Sagara Henrique Sagara Follow Nov 7 Implementing Unit Testing in ReadmeGenie #opensource #testing #python #unittest * Who Should Run Tests? On the Future of QA Signadot Signadot Signadot Follow Nov 4 Who Should Run Tests? On the Future of QA #qa #testing #microservices #devops * Visualize Code coverage in .NET applications using NDepend and NUnit Olabamiji Oyetubo Olabamiji Oyetubo Olabamiji Oyetubo Follow Nov 6 Visualize Code coverage in .NET applications using NDepend and NUnit #dotnet #csharp #testing #opensource * Chekhov's gun principle for testing Paweł Świątkowski Paweł Świątkowski Paweł Świątkowski Follow Nov 2 Chekhov's gun principle for testing #testing #elixir * Advanced JWT Exploitation Techniques: Going Beyond the Basics Genius_InTrouble Genius_InTrouble Genius_InTrouble Follow Nov 2 Advanced JWT Exploitation Techniques: Going Beyond the Basics #webdev #security #jwt #testing Add Comment 5 min read Continuous Testing : Improve Efficiency and Ship Better Software Steve Wortham Steve Wortham Steve Wortham Follow Nov 1 Continuous Testing : Improve Efficiency and Ship Better Software #webdev #testing #software #ai Add Comment 8 min read Real GigaChads Debug in Production: Why We Don’t Need No Sandbox, Just Pure Grit - For Gen-Z High Octane High Octane High Octane Follow Nov 5 Real GigaChads Debug in Production: Why We Don’t Need No Sandbox, Just Pure Grit - For Gen-Z #webdev #programming #testing #* 10 Best Postman Alternatives in 2024 | Free & Open Source Tools Patrick Patrick Patrick Follow Nov 5 10 Best Postman Alternatives in 2024 | Free & Open Source Tools #postmanapi #webdev #apidebug #testing * Testing the startup time for your Fire OS app Moses Roth Moses Roth Moses Roth Follow for Amazon Appstore Developers Oct 31 Testing the startup time for your Fire OS app #testing #firetv #performance #github Add Comment 3 min read Shifting Testing Left: The Request Isolation Solution Signadot Signadot Signadot Follow Oct 31 Shifting Testing Left: The Request Isolation Solution #devex #microservices #testing #devops Add Comment 6 min read When k6 eats up your RAM: Slashing memory usage in load tests Siddhant Khare Siddhant Khare Siddhant Khare Follow Oct 31 When k6 eats up your RAM: Slashing memory usage in load tests #k6 #testing #performance #devops 6 *d SDLC - Software Development Life Cycle Kavindya Perera Kavindya Perera Kavindya Perera Follow Oct 31 SDLC - Software Development Life Cycle #beginners #tutorial #testing #softwaredevelopmentlifecycle Add Comment 4 min read Make accessibility a default: Practical tips for Front-End developers Viviane Dias Viviane Dias Viviane Dias Follow Nov 4 Make accessibility a default: Practical tips for Front-End developers #frontend #a11y #testing #tips 3 *d A Beginner’s Guide to Component Testing with Playwright satyaprakash behera satyaprakash behera satyaprakash behera Follow Nov 4 A Beginner’s Guide to Component Testing with Playwright #webdev #testing #ai #software 1 reaction 1 comment 6 min read Unsung Testing Heroes: Bugs Squashed Before They Could Strike Paradith Paradith Paradith Follow Oct 30 Unsung Testing Heroes: Bugs Squashed Before They Could Strike #beginners #testing #learning #career * An Innovative Way to Create REST APIs Wanda Wanda Wanda Follow Oct 30 An Innovative Way to Create REST APIs #api #testing #tooling #rest 7 *d Leveraging Testkube for Complex System Testing Juan Ibarra Juan Ibarra Juan Ibarra Follow for Kubeshop Oct 29 Leveraging Testkube for Complex System Testing #kubernetes #testing #testkube #complexsystem Add Comment 7 min read How to Shift Testing Left: 4 Tactical Models Signadot Signadot Signadot Follow Oct 29 How to Shift Testing Left: 4 Tactical Models #devops #microservices #testing #agile Add Comment 9 min read How To Select Mobile App Testing Platforms satyaprakash behera satyaprakash behera satyaprakash behera Follow Oct 29 How To Select Mobile App Testing Platforms #webdev #testing #mobile #ai Add Comment 4 min read A Guide to Scalable and Heavy Load Testing with k6 + Testkube Juan Ibarra Juan Ibarra Juan Ibarra Follow for Kubeshop Oct 28 A Guide to Scalable and Heavy Load Testing with k6 + Testkube #testing #k6 #testkube #kubernetes Add Comment 4 min read Best 6 Tools for Handling Flaky Tests in Automated Testing Mangai Ram Mangai Ram Mangai Ram Follow Oct 28 Best 6 Tools for Handling Flaky Tests in Automated Testing #qa #automation #testing #* How AI Accelerates Test Automation Capabilities Joe Gray Joe Gray Joe Gray Follow Oct 28 How AI Accelerates Test Automation Capabilities #testautomation #aiintesting #automationtesting #testing Add Comment 6 min read Comparing the K6 Operator vs Testkube for Load Testing Juan Ibarra Juan Ibarra Juan Ibarra Follow for Kubeshop Oct 28 Comparing the K6 Operator vs Testkube for Load Testing #loadtesting #kubernetes #k6vstestkubet #testing * AI in Automation Testing: A Game-Changer for Quality Assurance (QA) Abhay Chaturvedi Abhay Chaturvedi Abhay Chaturvedi Follow Oct 28 AI in Automation Testing: A Game-Changer for Quality Assurance (QA) #ai #automation #testing #mobile *... #discuss How to Implement Regression Testing in Agile Environment New t* Do Software Testing 10x Faster Best Free Postman Alternatives 2024 Supercharge Your E2E Tests with Playwright-Network-Cache If you don't write unit tests... it's a skill issue Testing React Applications with Vitest: A Comprehensive Guide Reliable Component Testing with Vitest's Browser Mode and Playwright End-to-End Testing React Components with Playwright: (Part 1) Effective Visual Regression Testing for Developers: Vitest vs Playwright 5 API Testing Tools That Offer More Than Postman Advanced Playwright Testing: Leveraging the Page Object Model (Part 2) The Developer’s Guide to Speeding Up Development with Mock Service Worker (MSW) There is No Such Thing as a Unit Test How to test authentication JWT on Thunder Client Top 20 API Testing Tools Similar to Rest Assured Why Traditional Bake Times Are Wasteful: Embrace Purposeful Baking with Model-Based Testing Test Reporting Tools - Exploring the Best Why Companies Should Self-Host Hoppscotch for Their API Testing Integration tests on Symfony with Testcontainers How to Test Functions That Return Functions in TypeScript with Jest Part 4 - Using Cursor and Claude to Create Automated Tests with Playwright recently queried cURL vs Postman Zap Reports Supertest Jest How to Click Faster Jest vs Mocha Web Application Development Mockito Tutorial * * ",
    "url": "https://dev.to/t/testing"
  },
  {
    "body": "* # tutorial Follow Hide Tutorial is a general purpose tag. We welcome all types of tutorial - code related or not! It's all about learning, and using tutorials to teach others! * Tutorials should teach by example. This can include an interactive component or steps the reader can follow to understand. tag moderators 46312 Posts Published Older #tutorial posts 1 2 3 4 5 6 7 8 9 …75 …771 *. Tech Made Simple: The Key to Understanding What Really Matters. * Chiamaka Ebolue Follow Nov 10 Tech Made Simple: The Key to Understanding What Really Matters. #beginners #tutorial #womenintech #p* 6 min read Setting up Zed for Elixir development 💧 Paulo Henrique da Silva Paulo Henrique da Silva Paulo Henrique da Silva Follow Nov 9 Setting up Zed for Elixir development 💧 #elixir #zed #webdev #tutorial 1 comment 3 min read * Bhuwan chettri Bhuwan chettri Bhuwan chettri Follow Nov 9 * #javascript #*t 1 min read List all Visual Studio solutions Karen Payne Karen Payne Karen Payne Follow Nov 9 List all Visual Studio solutions #csharp #dotnetcore #tutorial #learning * * 🚀 Trish Trish Trish Follow Nov 9 * 🚀 #rust #tutorial #programming #beginners 2 * How to create a Load Balancer in Azure Adedapo Adedapo Adedapo Follow Nov 9 How to create a Load Balancer in Azure #beginners #tutorial #cloud #devops Add Comment 2 min read Unlock Your Coding Potential: IIT Madras' Free Programming Course GetVM GetVM GetVM Follow Nov 9 Unlock Your Coding Potential: IIT Madras' Free Programming Course #getvm #universitycourses #* 2 min read Bind variables in Oracle SQL * Nov 9 Bind variables in Oracle SQL #oracle #webdev #* 2 min read * 🚨 mohiyaddeen7 mohiyaddeen7 mohiyaddeen7 Follow Nov 9 * 🚨 #*l 5 *d Data Structures: Concepts and Implementations – Part 1: Arrays João Vitor João Vitor João Vitor Follow Nov 9 Data Structures: Concepts and Implementations – Part 1: Arrays #tutorial #learning #csharp #datastructures Add Comment 5 min read Estruturas de Dados: Conceitos e Implementações – Parte 1: Arrays João Vitor João Vitor João Vitor Follow Nov 9 Estruturas de Dados: Conceitos e Implementações – Parte 1: Arrays #braziliandevs #tutorial #learning #csharp Add Comment 6 min read * * Emma Richardson Follow Nov 9 * #* #javascript * REST APIs - A Guide for the Impatient Camdyn Rasque Camdyn Rasque Camdyn Rasque Follow Nov 9 Understanding REST APIs - A Guide for the Impatient #rest #api #* 5 min read Q-Seg: Quantum Magic for Image Segmentation (Yes, You Heard Right) Supreeth Mysore Venkatesh Supreeth Mysore Venkatesh Supreeth Mysore Venkatesh Follow Nov 9 Q-Seg: Quantum Magic for Image Segmentation (Yes, You Heard Right) #quantum #ai #tutorial #* Automate Database Backup with Bash, Python, and PowerShell Oliver Bennet Oliver Bennet Oliver Bennet Follow for GraphPe Nov 9 Automate Database Backup with Bash, Python, and PowerShell #bash #linux #programming #tutorial * Genmo Mochi 1 — SOTA Video Generation Model — Full Tutorial With SwarmUI — Locally Generate Amazing AI Videos for Free Furkan Gözükara Furkan Gözükara Furkan Gözükara Follow Nov 9 Genmo Mochi 1 — SOTA Video Generation Model — Full Tutorial With SwarmUI — Locally Generate Amazing AI Videos for Free #ai #tutorial #opensource #machinelearning 5 * * * 9 * #* #* * Grenish rai Grenish rai Grenish rai Follow Nov 9 * #* #tutorial 8 * * * Nov 8 * #*l Add Comment 4 min read C++ Problem Solving Tutorial: Vector Pair Sorting, Quick Pair Creation, and Lambda Expressions for Efficient Problem Solving * Nov 8 C++ Problem Solving Tutorial: Vector Pair Sorting, Quick Pair Creation, and Lambda Expressions for Efficient Problem Solving #cpp #coding #tutorial Add Comment 7 min read Role-Based Access Control (RBAC) with Feature-Centric Approach Sushant Rahate Sushant Rahate Sushant Rahate Follow Nov 9 Role-Based Access Control (RBAC) with Feature-Centric Approach #rbac #webdev #tutorial #security * Building a Responsive Four Card Feature Section Brian Meinert Brian Meinert Brian Meinert Follow Nov 8 Building a Responsive Four Card Feature Section #webdev #* * and deploying a smart contract with OpenZepplin and Solidity in less than 10 minutes Josh Fischer Josh Fischer Josh Fischer Follow Nov 8 Building and deploying a smart contract with OpenZepplin and Solidity in less than 10 minutes #web3 #opensource #* 5 min read CS50: The Ultimate Gateway to Computer Science for Aspiring Programmers GetVM GetVM GetVM Follow Nov 8 CS50: The Ultimate Gateway to Computer Science for Aspiring Programmers #getvm #videocourses #* 2 min read Comparing CSS Styling Methods in React: Making the Choice Easier with Code Examples Abdulkadir Saloum Abdulkadir Saloum Abdulkadir Saloum Follow Nov 8 Comparing CSS Styling Methods in React: Making the Choice Easier with Code Examples #webdev #css #react #* How to Stop Spam Comments on WordPress WITHOUT Any Plugin Adeleye Ayodeji Adeleye Ayodeji Adeleye Ayodeji Follow Nov 8 How to Stop Spam Comments on WordPress WITHOUT Any Plugin #webdev #javascript #tutorial #wordpress *ing RAG Systems with Unstructured Data: A Comprehensive Guide VISDOM 04 VISDOM 04 VISDOM 04 Follow Nov 8 Implementing RAG Systems with Unstructured Data: A * #tutorial #ai Add Comment 1 min read How Equivalence Partitioning & Boundary Value Analysis Improve Test Accuracy Robort Robort Robort Follow Nov 8 How Equivalence Partitioning & Boundary Value Analysis Improve Test Accuracy #testing #ecp #bva #* Ruby on Rails 8: Simplifying Sharding with New Methods * JetThoughts Dev Follow for JetThoughts Nov 8 Ruby on Rails 8: Simplifying Sharding with New Methods #ruby #rails #webdev #tuto*n read PHP opcode – I* without changing your code Valerio Valerio Valerio Follow for Inspector.dev Nov 8 PHP opcode – I* without changing your code #php #webdev #tutorial #p* 6 min read 🚀 Awesome Resources For Learning About System Design ⚡ * Nov 8 🚀 Awesome Resources For Learning About System Design ⚡ #webdev #kubernetes #tutorial #devops *ting Azure Policy in your AKS cluster using Terraform Will Velida Will Velida Will Velida Follow Nov 8 Integrating Azure Policy in your AKS cluster using Terraform #azure #kubernetes #devops #tutorial * Error: externally-managed-environment on python package installation Chan Chan Chan Follow Nov 8 Error: externally-managed-environment on python package installation #python #* #92 — Intersection, Union, And Difference in the Case of Simple Members — Multiple Sets Judith-Excel-Sharing Judith-Excel-Sharing Judith-Excel-Sharing Follow Nov 8 #92 — Intersection, Union, And Difference in the Case of Simple Members — Multiple Sets #* #productivity 6 * How to Move Data From MySQL to Redis in Real Time BladePipe BladePipe BladePipe Follow Nov 8 How to Move Data From MySQL to Redis in Real Time #mysql #redis #database #* Freshman in College? Here’s How I Started with Web Development Metta Surendhar Metta Surendhar Metta Surendhar Follow Nov 7 Freshman in College? Here’s How I Started with Web Development #javascript #webdev #* 3 min read Manual Testing: Essential Practices for Quality Software Development * 7 Manual Testing: Essential Practices for Quality Software Development #webdev #javascript #progr* read How to Implement Regression Testing in Agile Environment Robort Robort Robort Follow Nov 7 How to Implement Regression Testing in Agile Environment #discuss #regressiontesting #tutorial #testing Add Comment 4 min read Using bounded contexts to build a Java application alexia cismaru alexia cismaru alexia cismaru Follow Nov 7 Using bounded contexts to build a Java application #java #tutorial #programming #eventdriven Add Comment 5 min read Computing for Computer Scientists: A Game-Changing Resource for Tech Enthusiasts GetVM GetVM GetVM Follow Nov 7 Computing for Computer Scientists: A Game-Changing Resource for Tech Enthusiasts #getvm #universitycourses #* 2 min read * * Nov 7 * #spanish #webdev #laravel #* Apa Itu CI/CD? Muhammad Adam Fahmil 'Ilmi Muhammad Adam Fahmil 'Ilmi Muhammad Adam Fahmil 'Ilmi Follow Nov 7 Apa Itu CI/CD? #cicd #tutorial #* Functional Programming in C# aelassas aelassas aelassas Follow Nov 8 Functional Programming in C# #discuss #csharp #dotnet #tutorial Add Comment 28 min read Exploring Node.js: What Makes It a Powerful Choice for Server-Side Development * 6 Exploring Node.js: What Makes It a Powerful Choice for Server-Side Development #* #* Guide: How to build an AI Agent for SRE Teams Kelsey Ellis Kelsey Ellis Kelsey Ellis Follow for Aptible AI Nov 7 Guide: How to build an AI Agent for SRE Teams #ai #tutorial #python #sitereliabilityengineering 1 comment 30 min read Optimizaciones Lambda AWS 👨‍💻 kevin kevin kevin Follow Nov 6 Optimizaciones Lambda AWS 👨‍💻 #aws #lambda #serverless #* Creating and Connecting to Linux Virtual Machine using a Public Key OLALEKAN john Ayansola OLALEKAN john Ayansola OLALEKAN john Ayansola Follow Nov 6 Creating and Connecting to Linux Virtual Machine using a Public Key #tutorial #devops #learning #cloud Add Comment 3 min read How to use Infinity Queries (TanStack Query) to do infinite scrolling Davi Rezende Davi Rezende Davi Rezende Follow Nov 6 How to use Infinity Queries (TanStack Query) to do infinite scrolling #react #typescript #* 3 min read Cloud Computing Mastery: Carnegie Mellon's Game-Changing Online Course GetVM GetVM GetVM Follow Nov 6 Cloud Computing Mastery: Carnegie Mellon's Game-Changing Online Course #getvm #universitycourses #* 3 min read Introducing NexaPHP: A Lightweight MVC PHP Framework * Nov 7 Introducing NexaPHP: A Lightweight MVC PHP Framework #webdev #programming #php #tutorial * How to create a Virtual Machine Scale Set in Azure Portal Adedapo Adedapo Adedapo Follow Nov 6 How to create a Virtual Machine Scale Set in Azure Portal #beginners #tutorial #learning #cloud Add Comment 2 min read How to Design a Tangram Puzzle Using 3D CAD Software Juliana Misiko Juliana Misiko Juliana Misiko Follow Nov 6 How to Design a Tangram Puzzle Using 3D CAD Software #tutorial #3dprinting *e Flutter iOS App * Codemagic CLI Nandani Sharma Nandani Sharma Nandani Sharma Follow for Canopas Software Nov 6 Automate Flutter iOS App * Codemagic CLI #ios #flutter #* 6 min read Instalar PN* DowarD* Design Patterns: Adapter - *anna Rodda*s: Adapter - using GoLang #systemdesign #beginners #* 3 min read Design Pattern: Builder - *anna Rodda*: Builder - using GoLang #systemdesign #beginners #progr* read Design Pattern: Abstract Factory - *anna Rodda*: Abstract Factory - using GoLang #* #systemdesign Add Comment 4 min read Design Pattern: Factory - *anna Rodda*: Factory - using GoLang #systemdesign #tutorial #* 4 min read Here’s a brief guide on creating a virtual machine using the Azure portal: Creating a Virtual Machine in Azure Portal Busa Ayim-Odu Busa Ayim-Odu Busa Ayim-Odu Follow Nov 5 Here’s a brief guide on creating a virtual machine using the Azure portal: Creating a Virtual Machine in Azure Portal #beginners #tutorial #devops #learning * Recharts: A Comprehensive Guide to Creating Charts in ReactJS Tahrim Bilal Tahrim Bilal Tahrim Bilal Follow Nov 5 Mastering Recharts: A Comprehensive Guide to Creating Charts in ReactJS #javascript #react #recharts #* *? taylor taylor taylor Follow Nov 10 (5 hours ago) *? #javascript #*t 2 min read loading... #discuss Functional Programming in C# New How to Implement Regression Testing in Agile Environment New trending guides/resources Building a Meta Tags Scraping API in Under 40 Lines of Code How to Dockerize and Deploy Express.js APIs 10 React One-Liners Every UI Developer Should Know How I Cloned Myself with LLMs to Work 24/7 – Even While I Sleep Efficient API consumption for huge data in JavaScript Top 5 AI Models YOU Can Run Locally on YOUR Device! 🤯 Top 8 dev-tools you can use to get anything you want in life 🤯 7 BEST VS Code Extensions for Faster Development — 2024 Edition 🚀 4 Easy Ways to Backup Docker Volumes Designing Better Tables: Using Popovers for Extra Data npm Vs npx Resolve \"Blocked by CORS Policy: No 'Access-Control-Allow-Origin'\" in Laravel Stopping Errors Before They Stop You Dynamic NestJS Listeners: Discover the Power of Lazy Loading Deploying to Azure with Terraform and GitHub Actions Building an MLOps pipeline with Dagger.io and KitOps Database 101: SSL/TLS for beginners How To: 3D Flip Cards using Tailwind CSS Expo/React Native Drag and Drop Example How to Set OpenAI API Key as an Environment Variable? recently queried JavaScript * JavaScipt Hack Ruby Tap Joi JS Python Instantiate Class Foreign Key Mysql League of Legends Summoner Lookup Tic Tac Toe Python Laravel React Blackjack Python Flexbox Cheat Sheet Javascript Array to Object React Router Redirect Download Documentation Change Python Version Mac C++ & How to Make Your Own Programming Language Webpack Tutorial Python Sum of List Appendchild JavaScrip*nsor Neon * ",
    "url": "https://dev.to/t/tutorial"
  },
  {
    "body": "* TypeScript Follow Hide Optional static type-checking for JavaScript. * Client-side, server-side, WASM, deno, it doesn't matter. This tag should be used for anything TypeScript focused. about #typescript For more information about TypeScript, visit the official site https://www.typescriptlang.org. tag moderators 15291 Posts Published Older #typescript posts 1 2 3 4 5 6 7 8 9 …75 …254 *. Let’s create numeric range input with attached scale * Dima Vyshniakov Follow Nov 10 Let’s create numeric range input with attached scale #webdev #react #ui #*t 4 min read Biome.js, a toolchain to format and lint your web project * Nov 10 Biome.js, a toolchain to format and lint your web project #javascript #typescript #opensource #biome Add Comment 2 min read * Ashutosh Kumar Ashutosh Kumar Ashutosh Kumar Follow Nov 10 * #* #programming * How does shareReplay() works in RxJs/angular? * Soft Heart Engineer Follow Nov 10 How does shareReplay() works in RxJs/angular? #webdev #angular #frontend #* How to manage SSL Certs with Caddy Mert Enercan Mert Enercan Mert Enercan Follow Nov 9 How to manage SSL Certs with Caddy #elysiajs #caddy #typescript #virtualmachine * Enhanced Chat Component Design for a Better User Experience! 🎁 Joodi Joodi Joodi Follow Nov 9 Enhanced Chat Component Design for a Better User Experience! 🎁 #react #nextjs #tailwindcss #* *p aelassas aelassas aelassas Follow Nov 9 *p #discuss #webdev #javascript #* 19 min read Guys I am facing this problem Please help me to out this situation: \"Not able to send UDP message to Virtual Device Emulator.\" Test Test Test Follow Nov 9 Guys I am facing this problem Please help me to out this situation: \"Not able to send UDP message to Virtual Device Emulator.\" #android #reactnative #typescript #ios * * * Follow * Add Comment 4 min read TypeScript Mastery: Essential Learning Resources for Modern Web Developers GetVM GetVM GetVM Follow Nov 8 TypeScript Mastery: Essential Learning Resources for Modern Web Developers #getvm #typescript #programming #tutorials Add Comment 3 min read Bunchee, a bundler for JS/TS package * Nov 8 Bunchee, a bundler for JS/TS package #javascript #typescript #bundler #bunchee Add Comment 3 min read Generate a documentation site using Nextra * Nov 8 Generate a documentation site using Nextra #javascript #typescript #nextjs #* StepWise: A Powerful C# Workflow Engine for Task Execution Xiaoyun Zhang Xiaoyun Zhang Xiaoyun Zhang Follow Nov 7 StepWise: A Powerful C# Workflow Engine for Task Execution #dotnet #tooling #typescript Add Comment 2 min read Why Are Type Guards Necessary? Exploring Different Types and Their Use Cases Naym Hossen Naym Hossen Naym Hossen Follow Nov 8 Why Are Type Guards Necessary? Exploring Different Types and Their Use Case*ipt #programming * Creare Concetti Filosofici Usando TypeScript e Literal Template Types francesco agati francesco agati francesco agati Follow Nov 7 Creare Concetti Filosofici Usando TypeScript e Literal Template Types #typescript Add Comment 4 min read Strongly typed web APIs with gRPC Niko Kiirala Niko Kiirala Niko Kiirala Follow Nov 7 Strongly typed web APIs with gRPC #webdev #typescript #fullstack #grpc * From AI Code to $266 MRR in 7 Days: The TweetFast Story Carlos Arthur Carlos Arthur Carlos Arthur Follow Nov 7 From AI Code to $266 MRR in 7 Days: The TweetFast Story #beginners #ai #sideprojects #* How to use Infinity Queries (TanStack Query) to do infinite scrolling Davi Rezende Davi Rezende Davi Rezende Follow Nov 6 How to use Infinity Queries (TanStack Query) to do infinite scrolling #react #typescript #* 3 min read React.FC is better than you think! Karim Shalapy Karim Shalapy Karim Shalapy Follow Nov 6 React.FC is better than you think! #react #typescript #webdev #nextjs 1 reaction 1 comment 9 min read differenceInDays not working. Timezones and date-fns classic issues Julio Lugo Julio Lugo Julio Lugo Follow Nov 5 differenceInDays not working. Timezones and date-fns classic issues #timezones #typescript #datefns Add Comment 1 min read # Todo App with JWT-Based Authentication 🚀 Sowparna Shome Sowparna Shome Sowparna Shome Follow Nov 5 # Todo App with JWT-Based Authentication 🚀 #beginners #webdev #learning #typescript Add Comment 2 min read * Antoine Cusset Antoine Cusset Antoine Cusset Follow Nov 6 * #testing #typescript #productivity #react Add Comment 7 min read I made a Dependency Graph Library for JavaScript & TypeScript jn jn jn Follow Nov 5 I made a Dependency Graph Library for JavaScript & TypeScript #opensource #javascript #typescript #* Here’s how Lobechat applies typesafety to its environment variables in Next app * Nov 5 Here’s how Lobechat applies typesafety to its environment variables in Next app #javascript #typescript #lobechat #typesafe * a TypeScript Video Editor as a Solo Dev Lukáš Lukáš Lukáš Follow Nov 4 Building a TypeScript Video Editor as a Solo Dev #svelte #* Add Comment 8 * Getting Started with TypeScript: Installation, Version Management, and Your First Program! Md Shakil Hossain Md Shakil Hossain Md Shakil Hossain Follow Nov 4 Getting Started with TypeScript: Installation, Version Management, and Your First Program! #typescript #programming #webdev #* How to configure TSC + Webpack + ESM for NodeJS M*i M* Nov 4 How to configure TSC + Webpack + ESM for NodeJS #webpack #typescript #javascript #tooling Add Comment 4 min read *) Mehedi Hasan Mehedi Hasan Mehedi Hasan Follow Nov 4 *) #typescript #node #express #graphql * and Securing JWT Authentication in a Web App Kosa Matyas Kosa Matyas Kosa Matyas Follow Nov 8 Creating and Securing JWT Authentication in a Web App #* #* 3 min read * Car Rental Website and Mobile App aelassas aelassas aelassas Follow Nov 8 * Car Rental Website and Mobile App #discus*ipt 5 reactions 1 comment 16 min read Scaling Zensearch's capabilities to query the whole database FDiaz FDiaz FDiaz Follow Nov 8 Scaling Zensearch's capabilities to query the whole database #webdev #networking #typescript #go * the JavaScript Event Loop 🔄 Joodi Joodi Joodi Follow Nov 8 Understanding the JavaScript Event Loop 🔄 #eventloop #javascript #typescript #nextjs Add Comment 1 min read *n E-commerce Site aelassas aelassas aelassas Follow Nov 7 *n E-commerce Site #discus*ipt 3 reactions 1 comment 11 min read [At Run Time] Adaptative Log Function François-Emmanuel CORTES François-Emmanuel CORTES François-Emmanuel CORTES Follow Nov 3 [At Run Time] Adaptative Log Function #typescript #beginners #log #runtime Add Comment 3 min read Dark mode & light mode in next. Js 14 app router with material-ui without ui flickering Peter Kelvin Torver Peter Kelvin Torver Peter Kelvin Torver Follow Nov 7 Dark mode & light mode in next. Js 14 app router with material-ui without ui flickering #nextjs #react #mui #typescript Add Comment 8 min read Incremental Hydration in Angular 19: Take Your App’s Performance to the Next Level Naveed Ahmed Naveed Ahmed Naveed Ahmed Follow for Mustakbil Nov 2 Incremental Hydration in Angular 19: Take Your App’s Performance to the Next Level #angular #* Add Comment 10 min read Apredendo construção de apis com node e TypeScript Michael Moranis Michael Moranis Michael Moranis Follow Nov 2 Apredendo construção de apis com node e TypeScript #api #programmer #typescript #webdeveloper Add Comment 3 min read Declaration Merging in TS M*i M* Nov 2 Declaration Merging in TS #typescript #javascript #learning #node Add Comment 3 min read arrayToDict function in tRPC source code * Nov 2 arrayToDict function in tRPC source code #javascript #typescript #opensource #arrays Add Comment 2 min read Manage your versioning and changelogs using Changesets * Nov 6 Manage your versioning and changelogs using Changesets #javascript #typescript #npm #changeset * 🚨Error Handling & Result Management : Debugging Disasters and Tiny Victories ALI ALHARBI ALI ALHARBI ALI ALHARBI Follow Nov 6 🚨Error Handling & Result Management : Debugging Disasters and Tiny Victories #javascript #typescript #api * httpBatchLink types in tRPC source code explained * Nov 1 httpBatchLink types in tRPC source code explained #javascript #trpc #nextjs #* React Refs advanced usage: normalization, cloning and linking * Dima Vyshniakov Follow Nov 5 React Refs advanced usage: normalization, cloning and linking #react #webdev #typescript #javascript 7 *d * * Nov 5 * #typescript #javascript #node #react * Creating a NextJS Web App With 0 Web Dev Experience * Charlotte Towell Follow Nov 1 Creating a NextJS Web App With 0 Web Dev Experience #nextjs #webdev #javascript #* How to Add 100% Free Support Chat to Your Application with Tawk.to Asim khan Asim khan Asim khan Follow Oct 31 How to Add 100% Free Support Chat to Your Application with Tawk.to #chatgpt #nextjs #typescript #coding Add Comment 4 min read Choosing Remix as a Server-Side Rendering (SSR) Framework John Fisher John Fisher John Fisher Follow for Vandebron Oct 31 Choosing Remix as a Server-Side Rendering (SSR) Framework #remix #ssr #typescript #react Add Comment 5 min read YouTube's Metered Count sndp sndp sndp Follow Oct 31 YouTube's Metered Count #react #typescript #frontend * Hello I am new Here ouerghi01 ouerghi01 ouerghi01 Follow Oct 31 Hello I am new Here #typescript #nest #* AWS CDK + Localstack (API Gateway, Lambda, SQS, DynamoDB,TypeScript) gins p cyriac gins p cyriac gins p cyriac Follow Nov 3 AWS CDK + Localstack (API Gateway, Lambda, SQS, DynamoDB,TypeScript) #aws #typescript #cdk #webdev 3 * *! * Nov 7 Typing Prism*rm 21 * frontend developer NDTIEZN NDTIEZN NDTIEZN Follow Oct 29 frontend developer #javascript #programming #typescript #softwaredevelopment Ad* implicit contexts in LogTape 0.7.0 Hong Minhee Hong Minhee Hong Minhee Follow Oct 29 Introducing implicit contexts in LogTape 0.7.0 #logging #logger #typescript #javascript * How to use Conditional Types in typescript? Vishesh Tiwari Vishesh Tiwari Vishesh Tiwari Follow Oct 29 How to use Conditional Types in typescript? #typescript #javascript #conditiontypes * Better LiveView Hooks with Typescript Mykolas Mankevicius Mykolas Mankevicius Mykolas Mankevicius Follow Oct 29 Better LiveView Hooks with Typescript #liveview #elixir #phoenix #* Usage of Dexie, an IndexedDB wrapper, in Lobechat * Oct 28 Usage of Dexie, an IndexedDB wrapper, in Lobechat #javascript #typescript #opensource #dexie Add Comment 3 min read React Dynamic Template Demo Enrico Graziani Enrico Graziani Enrico Graziani Follow Oct 28 React Dynamic Template Demo #webdev #javascript #react #* TypeScript vs Go: Choosing Your Backend Language Mar*erg Follow for Encore Nov 8 TypeScript vs Go: Choosing Your Backend Language #go #* 34 *ad * Kaue Campos Kaue Campos Kaue Campos Follow Oct 31 * #javascript #node #typescript 4 * Auxiliary Routes in Angular Muhammad Awais Muhammad Awais Muhammad Awais Follow for This is Angular Nov 10 (48 mins ago) Auxiliary Routes in Angular #javascript #angular #type*ent 3 min read Streamlining API Calls in Angular v18 with TanStack Angular Query Muhammad Awais Muhammad Awais Muhammad Awais Follow Nov 10 (54 mins ago) Streamlining API Calls in Angular v18 with TanStack Angular Query #angular #webdev #typescript #* Why are Type Guards Necessary? Discuss Various Types of Type Guards and Their Use Cases. Mitu M Mitu M Mitu M Follow Nov 10 (1 hour ago) Why are Type Guards Necessary? Discuss Various Types of Type Guards and Their Use Cases. #typescript #* * Ray-D-Song Ray-D-Song Ray-D-Song Follow Nov 10 (6 hours ago) * #* #serverless Add C* *p New * Car Rental Website and Mobile App 1 comment *n E-commerce Site * No more Try/Catch: a better way to handle errors in TypeScript *? Building a Meta Tags Scraping API in Under 40 Lines of Code Functional Programming in TypeScript How to Write Better TypeScript Code: Best Practices for Clean, Effective, and Scalable Code New Swagger-UI embedding Cloud TypeScript Editor with RPC SDK 20 TypeScript * 🚀 Applying SOLID Principles in JavaScript and TypeScript Framework * Technical Interview Questions - Part 2 - Typescript The Myth of GraphQL NestJS vs Encore.ts: Choo* How to make your Express app 9x faster (and type-safe) What's New in Next.js 15: New Hooks, Turbopack and more Dynamic NestJS Listeners: Discover the Power of Lazy Loading Build an image editor with Fabric.js v6 This TypeScript framework * ⚡️ Fast, Predictable & Self-hosted AI Code Completion Remix + Express + TS 5 Top Tools for Task Scheduling in Next.js (2024) recently queried Angular State Management Flow vs Typescript Tree Shaking in React Anonymous Function JavaScript useReducer TypeScript Jest Typescript Angular Hostlistener Dino Tutorial Install Typescript node vs deno JavaScrpt typeOf JavaScript Week of the Year Electron TypeScript Deno REST API How to Add Commands on Twitch Express Typescript React Moment Svelte Typescript Typescript Foreach String Interpolation JavaScrip*nsor Neon * ",
    "url": "https://dev.to/t/typescript"
  },
  {
    "body": "* # v8 Follow Hide Create Post 49 Posts Published *. Criando uma Runtime Lucas *ewski Follow Oct 25 Criando uma Runtime #cpp #node #v8 #javascript Add Comment 6 min read Array.reduce() in JavaScript Andrew Elans Andrew Elans Andrew Elans Follow Apr 26 Array.reduce() in JavaScript #javascript #v8 #reduce Add Comment 1 min read How exactly does NodeJS use the V8 engine? Mateus Toledo Mateus Toledo Mateus Toledo Follow Apr 4 How exactly does NodeJS use the V8 engine? #javascript #node #v8 #runtime 7 *d Top 8 Recent V8 Updates * Antonello Zanini Follow for AppSignal Mar 13 Top 8 Recent V8 Updates #v8 #node * Be aware of Arrays - V8 engine advice Alireza Ebrahimkhani Alireza Ebrahimkhani Alireza Ebrahimkhani Follow Feb 13 Be aware of Arrays - V8 engine advice #javascript #v8 105 reactions 13 comments 6 min read The Magical World of JavaScript Engines: Everything you Need to Know Rajaniraiyn R Rajaniraiyn R Rajaniraiyn R Follow May 6 '23 The Magical World of JavaScript Engines: Everything you Need to Know #javascript #webdev #v8 #engine 19 reactions 2 comments 3 *: How Does V8 Implement a JavaScript Object? 灰豆 灰豆 灰豆 Follow Sep 7 '22 Let’s Understand Chrome V8: How Does V8 Implement a JavaScript Object? #javascript #v8 #chrome #cpp * * 16: What is Runtime? Why is it important? 灰豆 灰豆 灰豆 Follow Sep 5 '22 * 16: What is Runtime? Why is it important? #javascript #cpp #chrom #v8 3 * * 14: What in V8 is the JS Dynamically Type? 灰豆 灰豆 灰豆 Follow Sep 1 '22 * 14: What in V8 is the JS Dynamically Type? #javascript #chrome #v8 #cpp 5 * * 11: Bytecode Dispatch 灰豆 灰豆 灰豆 Follow Aug 23 '22 * 11: Bytecode Dispatch #javascript #cpp #chrome #v8 3 * * 9: Builtin 灰豆 灰豆 灰豆 Follow Aug 21 '22 * 9: Builtin #javascript #v8 #chrome #cpp * * 8: V8 Interpreter Ignition 灰豆 灰豆 灰豆 Follow Aug 19 '22 * 8: V8 Interpreter Ignition #javascript #chrome #v8 #cpp Add Comment 5 min read * 10: Ignition Execution Unit 灰豆 灰豆 灰豆 Follow Aug 22 '22 * 10: Ignition Execution Unit #javascript #cpp #chrome #v8 4 * * 15: How can we debug V8 more easily 灰豆 灰豆 灰豆 Follow Sep 2 '22 * 15: How can we debug V8 more easily #javascript #chrome #v8 #cpp 2 *d * 12: What is JSFunction? 灰豆 灰豆 灰豆 Follow Aug 28 '22 * 12: What is JSFunction? #javascript #cpp #chrome #v8 2 * * 7: Stack Frame 灰豆 灰豆 灰豆 Follow Aug 17 '22 * 7: Stack Frame #javascript #v8 #cpp #chrome * * 6: Bytecode Generation 灰豆 灰豆 灰豆 Follow Aug 15 '22 * 6: Bytecode Generation #javascript #programming #v8 #cpp Add Comment 6 min read * 4: Scanner, Token generation 灰豆 灰豆 灰豆 Follow Aug 13 '22 * 4: Scanner, Token generation #javascript #webdev #v8 #chrome 5 * Let’s understand Chrome V8 — Chapter 3: Compilation pipeline, Scanner 灰豆 灰豆 灰豆 Follow Aug 13 '22 Let’s understand Chrome V8 — Chapter 3: Compilation pipeline, Scanner #javascript #chrome #cpp #v8 9 * if javascript only needs the browser to compile why can't other languages do it brsnumget brsnumget brsnumget Follow Apr 24 '22 if javascript only needs the browser to compile why can't other languages do it #javascript #webdev #v8 8 reactions 10 comments 1 min read Memory Management in V8, garbage collection and improvements Jennie Jennie Jennie Follow Nov 4 '21 Memory Management in V8, garbage collection and improvements #javascript #v8 #memory #gc 23 * Imagine Call Stack Sergii Kirianov Sergii Kirianov Sergii Kirianov Follow Sep 20 '21 Imagine Call Stack #javascript #programming #v8 #node 4 *d Conheça o SparkPlug, o novo compilador de JS do V8 * for Microsoft Azure Sep 3 '21 Conheça o SparkPlug, o novo compilador de JS do V8 #v8 #javascript #chrome #google 5 *d JavaScript is interpreted or compiled? Ahmed Radwan Ahmed Radwan Ahmed Radwan Follow Jan 17 '21 JavaScript is interpreted or compiled? #javascript #jit #v8 3 *d Tim sort, the fastest sort used in v8 and Python Jennie Jennie Jennie Follow Sep 2 '20 Tim sort, the fastest sort used in v8 and Python #timsort #v8 #sort #algorithms 6 reactions 2 comments 9 min read Over Explained - JavaScript and V8 Shivam Mishra Shivam Mishra Shivam Mishra Follow Aug 24 '20 Over Explained - JavaScript and V8 #javascript #browser #v8 8 reactions 2 comments 10 min read Node.js membuat Javascript luar biasa Sulton Sulton Sulton Follow Aug 2 '20 Node.js membuat Javascript luar biasa #javascript #node #v8 2 reactions * JavaScript high performance Marc Marc Marc Follow Jun 3 '20 Mastering JavaScript high performance #webperf #javascript #frontend #v8 31 * Node.js por Baixo dos Panos #10 - Otimizações do Compilador * May 21 '20 Node.js por Baixo dos Panos #10 - Otimizações do Compilador #node #v8 #computerscience #javascript 46 reactions 3 comments 9 min read Understanding Call Stacks In Java Script jerry enebeli jerry enebeli jerry enebeli Follow May 16 '20 Understanding Call Stacks In Java Script #javascript #callstack #memory #v8 7 *d Node.js Under The Hood #10 - Compiler Optimizations! * Apr 6 '20 Node.js Under The Hood #10 - Compiler Optimizations! #node #v8 #computerscience #javascript 48 reactions 8 comments 8 min read Node.js Por Baixo dos Panos #9: Coletando o Lixo * Apr 6 '20 Node.js Por Baixo dos Panos #9: Coletando o Lixo #node #javascript #v8 #computerscience 18 *d Node.js Under the Hood #9: Collecting the Garbage * Mar 17 '20 Node.js Under the Hood #9: Collecting the Garbage #node #javascript #v8 #computerscience 69 * Node.js por Baixo dos Panos #8 - Entendendo Bytecodes * Mar 18 '20 Node.js por Baixo dos Panos #8 - Entendendo Bytecodes #node #javascript #v8 #assembly 19 *d Memory size of Javascript Boolean Nik Shevchenko Nik Shevchenko Nik Shevchenko Follow Feb 20 '20 Memory size of Javascript Boolean #javascript #v8 #architecture #research 14 * Node.js Por Baixo dos Panos #7 - O Novo V8 * Feb 19 '20 Node.js Por Baixo dos Panos #7 - O Novo V8 #node #javascript #v8 31 * Node.js Under the Hood #8 - Understanding Bytecodes * Feb 4 '20 Node.js Under the Hood #8 - Understanding Bytecodes #node #javascript #v8 #assembly 78 * Node.js Por Baixo dos Panos #6 - O Antigo V8 * Jan 14 '20 Node.js Por Baixo dos Panos #6 - O Antigo V8 #node #javascript #v8 #chrome 38 * Everything you needed to know and more about Array.map Safia Abdalla Safia Abdalla Safia Abdalla Follow Jan 8 '20 Everything you needed to know and more about Array.map #javascript #map #codedeepdives #v8 87 reactions 4 comments 4 min read Node.js Under The Hood #7 - The new V8 * Jan 5 '20 Node.js Under The Hood #7 - The new V8 #node #javascript #v8 136 reactions 7 comments 6 min read Node.js Por Baixo Dos Panos #5 - Hidden Classes e Alocações de Variáveis * Dec 7 '19 Node.js Por Baixo Dos Panos #5 - Hidden Classes e Alocações de Variáveis #node #javascript #v8 #cpp 35 * Node.js Under The Hood #6 - The Old V8 * Dec 5 '19 Node.js Under The Hood #6 - The Old V8 #node #javascript #v8 #chrome 56 * Node.js Under The Hood #5 - Hidden Classes & Variable Allocations * Nov 19 '19 Node.js Under The Hood #5 - Hidden Classes & Variable Allocations #node #javascript #v8 #cpp 100 * ELI5: v8 Isolates and Contexts aafrey aafrey aafrey Follow Nov 29 '18 ELI5: v8 Isolates and Contexts #explainlikeimfive #v8 #javascript #node 12 reactions 9 comments 1 min read How to build plv8 2.3.0 for Raspberry Pi 3 Junichi Kajiwara Junichi Kajiwara Junichi Kajiwara Follow Mar 22 '18 How to build plv8 2.3.0 for Raspberry Pi 3 #raspberrypi #postgres #javascript #v8 8 *d V8Ception | How to implement V8 into your .NET applications. Jochem Stoel Jochem Stoel Jochem Stoel Follow Jan 7 '18 V8Ception | How to implement V8 into your .NET applications. #tutorial #v8 #javascript #csharp 27 reactions 12 comments 6 min read V8 6.3 shipped New ECMAScript features Masashi Hirano Masashi Hirano Masashi Hirano Follow Nov 30 '17 V8 6.3 shipped New ECMAScript features #javascript #ecmascript #node #v8 13 * How to build plv8 on Windows Junichi Kajiwara Junichi Kajiwara Junichi Kajiwara Follow Nov 15 '17 How to build plv8 on Windows #windows #postgres #v8 7 *d Node.js - a tale of two bugs Mike Ralphson Mike Ralphson Mike Ralphson Follow Oct 11 '17 Node.js - a tale of two bugs #node #performance #v8 22 reactions Add Comment 4 *onsor Neon * ",
    "url": "https://dev.to/t/v8"
  },
  {
    "body": "* Web Development Follow Hide Because the internet... * Be nice. Be respectful. Assume best intentions. Be kind, rewind. tag moderators 95019 Posts Published Older #webdev *583 *. *”? 🤔 * Nov 10 *”? 🤔 #discuss #* 10 *d Database Monitoring: Importance, Tools, and Best Practices for Performance Optimization Nozibul Islam Nozibul Islam Nozibul Islam Follow Nov 10 Database Monitoring: Importance, Tools, and Best Practices for Performance Optimization #database #monitoring #performance #webdev 15 *d Let’s create numeric range input with attached scale * Dima Vyshniakov Follow Nov 10 Let’s create numeric range input with attached scale #webdev #react #ui #*t 4 min read 🔥 * 🚀 * Nov 9 🔥 * 🚀 #discuss #webdev #productivity #beginners 93 reactions 8 comments 70 min read * Vaishnavi Sonawane Vaishnavi * 10 * #react #webdev #programming #opensource * Decoding StyleX: Meta's Cutting-Edge Styling System Supriya M Supriya M Supriya M Follow Nov 10 Decoding StyleX: Meta's Cutting-Edge Styling System #css #react #styling #webdev Add Comment 9 min read 🌐 Building a Custom Framework in Java: From Dependency Injection to AOP Saurabh Kurve Saurabh Kurve Saurabh Kurve Follow Nov 10 🌐 Building a Custom Framework in Java: From Dependency Injection to AOP #java #* 11 *d * Unleash ServBay’s Powe* 5 *d Timer - * 10 Timer - Custom Hooks #webdev #react #learning #* * Ashutosh Kumar Ashutosh Kumar Ashutosh Kumar Follow Nov 10 * #* #programming * Closures - Javascript Manoj Manoj Manoj Follow Nov 10 Closures - Javascript #* #learning 1 comment 2 min read How does shareReplay() works in RxJs/angular? * Soft Heart Engineer Follow Nov 10 How does shareReplay() works in RxJs/angular? #webdev #angular #frontend #* *) Sakis Pal Sakis Pal Sakis Pal Follow Nov 9 *) #webdev #express #netlify #* Custom Hooks in React Cheryl Mataitini Cheryl Mataitini Cheryl Mataitini Follow Nov 10 Custom Hooks in React #react #javascript #webdev * Путеводитель по HTTP-кодам в Java: Как понять, что сервер от тебя хочет? Olga Lugacheva Olga Lugacheva Olga Lugacheva Follow Nov 9 Путеводитель по HTTP-кодам в Java: Как понять, что сервер от тебя хочет? #java #webdev #* Setting up Zed for Elixir development 💧 Paulo Henrique da Silva Paulo Henrique da Silva Paulo Henrique da Silva Follow Nov 9 Setting up Zed for Elixir development 💧 #elixir #zed #webdev #tutorial 1 comment 3 min read 6 Ways Handle WebSocket Load Balancing Without Losing the Connection Thread * ) Hoài Nhớ ( Nick ) Follow Nov 9 6 Ways Handle WebSocket Load Balancing Without Losing the Connection Thread #webdev #websocket #beginners #devops 5 *ad test md Ijat Ayam Ijat Ayam Ijat Ayam Follow Nov 9 test md #sdf #dfd #*mment 8 min read * Bhuwan chettri Bhuwan chettri Bhuwan chettri Follow Nov 9 * #javascript #*t 1 min read Feedback on My Web Developer Portfolio – I'd Love Your Input! Rémy Canal Rémy Canal Rémy Canal Follow Nov 9 Feedback on My Web Developer Portfolio – I'd Love Your Input! #webdev #portfolio #design #* * Devops Den Devops Den Devops De* 3 min read Guia Comp* Souza * Follow Nov 10 Guia Comp* #node * Automating JavaScript execution in the browser Sergey-Sharyk Sergey-Sharyk Sergey-Sharyk Follow Nov 9 Automating JavaScript execution in the browser #javascript #webdev #dx #automation * New here * Ayush Kumar Vishwakarma Follow Nov 9 New here #webdev #* Add Comment 1 min read Redux Simple Guide * Nov 9 Redux Simple Guide #redux #react #*mment 5 min read * Gabriel Duete Gabriel Duete Gabriel Duete Follow Nov 9 * #webdev #javascript #react #* Authentication vs. Authorization: Key Differences and Security Risks Explained Golam_Mostafa Golam_Mostafa Golam_Mostafa Follow Nov 9 Authentication vs. Authorization: Key Differences and Security Risks Explained #webdev #security Add Comment 2 min read The power of asking for help Gabriel Toma Gabriel Toma Gabriel Toma Follow Nov 9 The power of asking for help #webdev #beginners #leadership #career * Javascript setTimeout method - All you need to know alienfoxx alienfoxx alienfoxx Follow Nov 9 Javascript setTimeout method - All you need to know #javascript #beginners #webdev Add Comment 11 min read Redux: Intro + Building a Modern State Management System with Redux Toolkit * Nov 9 Redux: Intro + Building a Modern State Management System with Redux Toolkit #redux #react #webdev #beginners Add Comment 8 min read * * Nov 9 * #webdev #react #javascript #* 💡 *! 💡 * Yanaiara Oliveira Follow Nov 9 💡 *! 💡 #javascript #frontend #webdev #programming * Node.js * Bind variables in Oracle SQL * Nov 9 Bind variables in Oracle SQL #oracle #webdev #* 2 min read How to Generate and Display Swagger (OpenAPI) Documentation for Your Laravel API * Sospeter Mong'are Follow Nov 9 How to Generate and Display Swagger (OpenAPI) Documentation for Your Laravel API #api #laravel #webdev #openapi Add Comment 4 min read Five Essential Traits of Successful Programmers Jose Maria Iriarte Jose Maria Iriarte Jose Maria Iriarte Follow Nov 9 Five Essential Traits of Successful Programmers #beginners #career #webdev #community * HTML Basics: What I Learned in My First Lesson Byali Macqueline Byali Macqueline Byali Macqueline Follow Nov 9 HTML Basics: What I Learned in My First Lesson #webdev #beginners #html #codingbasics Add Comment 3 min read A.I. As I See It Stephen Sauceda Stephen Sauceda Stephen Sauceda Follow Nov 9 A.I. As I See It #ai #development #web #webdev Add Comment 4 min read Creating a JavaScript Object Using Python Techelopment Techelopment Techelopment Follow Nov 9 Creating a JavaScript Object Using Python #python #jav*ions Add Comment 2 min read Centralized API Logic in Next.js with an External Backend Animesh Srivastava Animesh Srivastava Animesh Srivastava Follow Nov 9 Centralized API Logic in Next.js with an External Backend #nextjs #react #webdev #cleancoding Add Comment 2 min read * 🚨 mohiyaddeen7 mohiyaddeen7 mohiyaddeen7 Follow Nov 9 * 🚨 #*l 5 *d How to Build Your Own Website with a Raspberry Pi: An Entertaining Guide Yongkang Cheng Yongkang Cheng Yongkang Cheng Follow Nov 9 How to Build Your Own Website with a Raspberry Pi: An Entertaining Guide #beginners #raspberrypi #webdev Add Comment 12 min read *p aelassas aelassas aelassas Follow Nov 9 *p #discuss #webdev #javascript #* 19 min read Unofficial Internship for students Friptu Teodor Friptu Teodor Friptu Teodor Follow Nov 9 Unofficial Internship for students #webdev #beginners #learning #career Add Comment 1 min read 🚀 Exciting News for Agile Teams! 🚀 Anton Boltnev Anton Boltnev Anton Boltnev Follow Nov 9 🚀 Exciting News for Agile Teams! 🚀 #agile #sprintdemo #startup #webdev * * Jefferson Jefferson Jefferso* 11 min read Modular React architecture Michael Mazzone Michael Mazzone Michael Mazzone Follow Nov 9 Modular React architecture #react #softwaredevelopment #* 7 min read Task manger app Farouk Farouk Farouk Follow Nov 9 Task manger app #webdev #javascript #frontend #taskmanager * Tipos Primitivos e Classes Invólucras (Wrapper Classes) em Java Emanoel Carvalho Emanoel Carvalho Emanoel Carvalho Follow Nov 8 Tipos Primitivos e Classes Invólucras (Wrapper Classes) em Java #webdev #oop #java Add Comment 3 min read Test-Driven Development (TDD) in Front-end. Jayanta Deb Jayanta Deb Jayanta Deb Follow Nov 8 Test-Driven Development (TDD) in Front-end. #webdev #javascript #unittest #* Organizando Suas Rotas de Forma Modular e Automática no Lith* 8 Organizando Suas Rotas de Forma Modular e Automática no Lithe #php #webdev #lithe #rout*n read Tic-Tac-Toe Game using * * 9 Tic-Tac-Toe Game using * #webdev #javascript #* Comment 3 min read The Role of Semantic HTML in Enhancing SEO and Web Accessibility Wangari gracious Wangari gracious Wangari gracious Follow Nov 8 The Role of Semantic HTML in Enhancing SEO and Web Accessibility #webdev #semantichtml #seo Add Comment 3 min read Episode 4: Defensive Strategies with Commander Redux * vigneshiyergithub Follow Nov 8 Episode 4: Defensive Strategies with Commander Redux #react #* 5 min read * * Nov 8 * #*l Add Comment 4 min read The i*. Vivian Otieno Vivian Otieno Vivian Otieno Follow Nov 8 The i*. #webdev #seo #a11y #html Add Comment 2 min read 🚀 * MAHMUDUL HASAN NABIL MAHMUDUL HASAN NABIL MAHMUDUL HASAN NABIL Follow Nov 8 🚀 * #discuss #webdev #* 3 min read I Created a Developer Portfolio inspired by the macOS interface Anshuman Anshuman Anshuman Follow Nov 9 I Created a Developer Portfolio inspired by the macOS interface #showdev #webdev #svelte #tailwindcss * useContext: React Hooks * Nov 8 useContext: React Hooks #react #webdev #javascript #* Roniere Marques: Um Desenvolvedor em Destaque Roniere da silva marques Roniere da silva marques Roniere da silva marques Follow Nov 8 Roniere Marques: Um Desenvolvedor em Destaque #webdev #* * follow us: */ 01:13 * 10 (28 mins ago) * follow us: */ #webdev #javascript #* Comment 1 min read Add Crazy Cursor Click Effect on your website.. Anoop Patel Anoop Patel Anoop Patel Follow Nov 10 (27 mins ago) Add Crazy Cursor Click Effect on your website.. #webdev #animation #javascript #css * Stopwatch using html css and javascript follow us on the instagram... */ * 10 (46 mins ago) Stopwatch using html css and javascript follow us on the instagram... */ #webdev #vscode #frontend #javascript * Auxiliary Routes in Angular Muhammad Awais Muhammad Awais Muhammad Awais Follow for This is Angular Nov 10 (48 mins ago) Auxiliary Routes in Angular #javascript #angular #type*ent 3 min read test Eslam ALmasoudy Eslam ALmasoudy Eslam ALmasoudy Follow Nov 10 (42 mins ago) test #webdev #* Transform Your JavaScript: Functional Programming Concepts and Practical Tips Okoye *amaka Follow Nov 10 (1 hour ago) Transform Your JavaScript: Functional Programming Concepts and Practical Tips #javascript #webdev #codingtips #scala Add Comment 5 min read Streamlining API Calls in Angular v18 with TanStack Angular Query Muhammad Awais Muhammad Awais Muhammad Awais Follow Nov 10 (55 mins ago) Streamlining API Calls in Angular v18 with TanStack Angular Query #angular #webdev #typescript #* *? taylor taylor taylor Follow Nov 10 (5 hours ago) *? #javascript #*t 2 min read Understanding Technical Debt: An Ally and a Challenge in Software Development Agustín Rodríguez Agustín Rodríguez Agustín Rodríguez *derstanding Technical Debt: An Ally and a Challenge in Software Development #webdev #technicaldebt #programming #development Add Comment 5 min read * Ray-D-Song Ray-D-Song Ray-D-Song Follow Nov 10 (6 hours ago) * #* #serverless Add C* *”? 🤔 New 🔥 * 🚀 8 comments *p New 🚀 * New * Car Rental Website and Mobile App 1 comment *n E-commerce Site 1 comment 🌟 Introducing the My 3D Model Viewer! 🌟 New trending guides/resources Top 10 Modern JavaScript Patterns for 2025 No more Try/Catch: a better way to handle errors in TypeScript How We Moved from AWS to Fly.io Maxun: Open Source No-Code Web Data Extraction Platform⚡️ 2* Must Know 🚀 *? 20 Git Command-Line * How to Flirt with a Developer: Learn to Debug Your Love Life 9 Interesting Open Source Projects You Should Explore Right Now🥷🏻 🎉 9 must-know open-source tools that will make you better than 99% of developers Why Go is Popular Right Now and Why I Started Learning Go as a Node.js Developer Proxy Design Pattern How to write clean code 8 Open-Source Tools to grow your app and reach new markets! 🔥 Design Patterns demystified with examples System Design of YouTube: A Detailed Deep Dive into the Video Giant Builder Design Pattern Building a Meta Tags Scraping API in Under 40 Lines of Code From Junior to Senior Developer: Essential Skills You Need in 2024 How to Dockerize and Deploy Express.js APIs recently queried Best Keyboard for Programming VS Code Shortcuts Best VSCode Extensions cURL vs Postman Production Environment Button Animation CSS JavaScript Playground Django Allauth JavaScript * JavaScipt Hack Textcontent vs Innerhtml Coding Games for Beginners Freenom Domain Geoguessr Multiplayer Method vs Function Zap Reports Flow vs Typescript Learn Linux JS Expressions Landing Page Templat*nsor Neon * ",
    "url": "https://dev.to/t/webdev"
  },
  {
    "body": "* # yaml Follow Hide Create Post 136 Posts Published Older #yaml posts 1 2 *. How to resolv*' * Oct 25 How to resolv*' #yaml #node #serverless #lambda Add Comment 1 min read Update the Backstage catalog instantly without touching any YAML Sam Blausten Sam Blausten Sam Blausten Follow for Roadie Oct 22 Update the Backstage catalog instantly without touching any YAML #backstage #internaldeveloperportal #yaml Add Comment 4 min read Organizing YAML files by creating directories like `config/x` in Rails hoshino tsuyoshi hoshino tsuyoshi hoshino tsuyoshi Follow Oct 20 Organizing YAML files by creating directories like `config/x` in Rails #rails #ruby #configuration #yaml 4 *d YAML vs JSON - Best Format for Astro, React & AI Projects. A Developers Guide: Part 1 dansasser dansasser dansasser Follow Sep 4 YAML vs JSON - Best Format for Astro, React & AI Projects. A Developers Guide: Part 1 #json #yaml #webdev #*t 6 min read Extending YAML p.1 - structuring a meta-programming language Mimopotato Mimopotato Mimopotato Follow Aug 3 Extending YAML p.1 - structuring a meta-programming language #ruby #yaml #kubernetes #funcml Add Comment 4 min read K8s QuickBites: Creating Secure TLS Certificates for Kubernetes Deployments Kaye Alvarado Kaye Alvarado Kaye Alvarado Follow for Developers @ Asurion Aug 21 K8s QuickBites: Creating Secure TLS Certificates for Kubernetes Deployments #kubernetes #secret #yaml #devops 2 *d Cerbos Hub: A complete authz management system Dan Dan Dan Follow for Cerbos Jul 25 Cerbos Hub: A complete authz management system #authz #webassembly #yaml #accesscontrol Add Comment 3 min read YAML reference and important concepts. MorphZG MorphZG MorphZG Follow Jul 21 YAML reference and important concepts. #yaml #configuration #reference 2 reacti* My Perfect Home Assistant Dashboard Bruno Sabot Bruno Sabot Bruno Sabot Follow Jul 13 Crafting My Perfect Home Assistant Dashboard #homeassistant #homeautomation #dashboard #yaml Add Comment 10 min read Kubernetes as a Database? What You Need to Know About CRDs Amr Saafan Amr Saafan Amr Saafan Follow for Nile Bits Jun 29 Kubernetes as a Database? What You Need to Know About CRDs #kubernetes #crds #yaml #go Add Comment 6 min read Redirect YAML From Ghost Data Using JQ Kyra Kyra Kyra Follow May 23 Redirect YAML From Ghost Data Using JQ #ghost #yaml #json #jq Add Comment 5 min read Simple YAML Linter/Validator Workflow for GitHub Actions CodeWithCaen CodeWithCaen CodeWithCaen Follow Jun 23 Simple YAML Linter/Validator Workflow for GitHub Actions #github #githubactions #tutorial #yaml * Unlock Efficient CI/CD: How YAML Anchors Transform Your Bitrise Setup Daniel Tavares Daniel Tavares Daniel Tavares Follow May 7 Unlock Efficient CI/CD: How YAML Anchors Transform Your Bitrise Setup #bitrise #yaml #cicd #mobile Add Comment 4 min read Taming FluxCD HelmReleases: The Kustomize Way approach Kevin Davin Kevin Davin Kevin Davin Follow Jun 4 Taming FluxCD HelmReleases: The Kustomize Way approach #kubernetes #fluxcd #yaml #helm 7 * Using Handlebars Code to Generate Ghost YAML Kyra Kyra Kyra Follow May 30 Using Handlebars Code to Generate Ghost YAML #ghost #yaml #json Add Comment 3 min read Script Files as Configs (Instead of JSON and YAML) amu amu amu Follow Mar 23 Script Files as Configs (Instead of JSON and YAML) #softwaredesign #json #yaml #xml Add Comment 2 min read Kubernetes Through the Developer's Perspective Juraj Juraj Juraj Follow for Cyclops UI Mar 26 Kubernetes Through the Developer's Perspective #kubernetes #opensource #yaml #devops 132 reactions 16 comments 5 min read YAML-based Database Docu Christian Himpe Christian Himpe Christian Himpe Follow Mar 8 YAML-based Database Docu #yaml #sql #nosql #database Add Comment 2 min read GitHub Actions Explained Akebu Akebu Akebu Follow Jan 31 GitHub Actions Explained #github #githubactions #yaml #git 1 reaction * and Creating ReplicaSets in Kubernetes Vladimir Romanov Vladimir Romanov Vladimir Romanov Follow Feb 22 Understanding and Creating ReplicaSets in Kubernetes #kubernetes #devops #bash #yaml * Build a ChatGPT 4 Blackjack Game with AI Coaching (49 Lines of Code) Rob McCormack Rob McCormack Rob McCormack Follow Feb 18 Build a ChatGPT 4 Blackjack Game with AI Coaching (49 Lines of Code) #chatgpt #chatgptbuilder #yaml #aimarkdown 2 *d ResponseDial: Take Control of ChatGPT Responses Rob McCormack Rob McCormack Rob McCormack Follow Feb 16 ResponseDial: Take Control of ChatGPT Responses #chatgpt #chatgptbuilder #yaml #aimarkdown * Pytest How to pass .yaml file as argument in pytest command line Dinesh Dinesh Dinesh Follow Feb 1 Pytest How to pass .yaml file as argument in pytest command line #pytest #parameter #argument #yaml Add Comment 1 min read Escalating NeoGPT contribution Bryce Seefieldt Bryce Seefieldt Bryce Seefieldt Follow Jan 1 Escalating NeoGPT contribution #python #gpt3 #opensource #yaml Add Comment 2 min read Kubernetes Deployment Barbara Barbara Barbara Follow Nov 15 '23 Kubernetes Deployment #yaml #rollback #deployment #kubernetes 5 reactions Ad* a YAML configuration file? | A Step-by-Step Guide for Beginners Shamim Ansari Shamim Ansari Shamim Ansari Follow Oct 9 '23 How to write a YAML configuration file? | A Step-by-Step Guide for Beginners #devops #yaml #opensource #cloud 17 * 🩰 Schedule automated tests; become premier ballet artiste ruthmoog ruthmoog ruthmoog Follow Sep 1 '23 🩰 Schedule automated tests; become premier ballet artiste #playwright #yaml #tests 11 * Convert complex YAML to .NET types with custom YamlDotNet type converters Anthony Simmon Anthony Simmon Anthony Simmon Follow Sep 10 '23 Convert complex YAML to .NET types with custom YamlDotNet type converters #programming #dotnet #csharp #yaml 3 * A few words about data objects and what better use? Serhii Korol Serhii Korol Serhii Korol Follow Jul 22 '23 A few words about data objects and what better use? #csharp #json #bson #yaml Add Comment 7 min read A Step-by-Step Guide to Using Spheron's GitHub Actions Shivam Agarwal Shivam Agarwal Shivam Agarwal Follow Jul 14 '23 A Step-by-Step Guide to Using Spheron's GitHub Actions #spheron #githubactions #cicd #yaml * Setting Up Pre-Commit Hooks in GitHub: Ensuring Code Quality and Consistency angu10 angu10 angu10 Follow Jul 11 '23 Setting Up Pre-Commit Hooks in GitHub: Ensuring Code Quality and Consistency #githubactions #yaml #python 5 *d OSDC-Assigment9-GithubActions(CI) zoharasulin zoharasulin zoharasulin Follow May 31 '23 OSDC-Assigment9-GithubActions(CI) #osdc #yaml #git #github * 📝 YAML: Making Data Structured and Readable! 😄 Anil K Anil K Anil K Follow Jun 23 '23 📝 YAML: Making Data Structured and Readable! 😄 #yaml Add Comment 3 min read Loading config files in Python Brett Weir Brett Weir Brett Weir Follow for BrettOps May 31 '23 Loading config files in Python #attrs #config #python #yaml * Moving Config Docs From YAML to Markdown Amara Graham Amara Graham Amara Graham Follow May 3 '23 Moving Config Docs From YAML to Markdown #documentation #yaml #markdown 4 *d How to Pass Environment Variables to a YAML File in a Node.js Application using EJS Templating Engine Mekzy Mekzy Mekzy Follow Apr 16 '23 How to Pass Environment Variables to a YAML File in a Node.js Application using EJS Templating Engine #yaml #node #ejs #env 6 * Why YAML is better than JSON (read before screaming) Alienor Alienor Alienor Follow for Lenra Mar 17 '23 Why YAML is better than JSON (read before screaming) #yaml #json #programming #webdev 3 * How can I read variables into Terraform from a YAML file to deploy the resources on the AWS Cloud? Hugo Thomaz Hugo Thomaz Hugo Thomaz Follow Feb 13 '23 How can I read variables into Terraform from a YAML file to deploy the resources on the AWS Cloud? #awsnetwork #terraform #yaml #networking Add Comment 5 min read Quick guide for YAML Maria 🍦 Marshmallow Maria 🍦 Marshmallow Maria 🍦 Marshmallow Follow Feb 10 '23 Quick guide for YAML #yaml #beginners #programming #webdev 247 reactions 25 comments 5 min read How To provisioning DataSources in Grafana with Kubernetes Der Sascha Der Sascha Der Sascha Follow Feb 25 '23 How To provisioning DataSources in Grafana with Kubernetes #kubernetes #grafana #devops #yaml 2 *d Handy Yaml Tricks! Marc Dougherty Marc Dougherty Marc Dougherty Follow Feb 9 '23 Handy Yaml Tricks! #yaml * Puppet ist YAML Martin Alfke Martin Alfke Martin Alfke Follow for betadots Feb 8 '23 Puppet ist YAML #puppet #yaml #automation #learning 3 *d Puppet is YAML Martin Alfke Martin Alfke Martin Alfke Follow for betadots Feb 8 '23 Puppet is YAML #puppet #yaml #education #configuration 3 * The yaml document from hell — JavaScript edition Phil Nash Phil Nash Phil Nash Follow Feb 2 '23 The yaml document from hell — JavaScript edition #javascript #yaml #node Add Comment 8 min read DO YOU YAML? Jonathan Fetterolf Jonathan Fetterolf Jonathan Fetterolf Follow Jan 17 '23 DO YOU YAML? #datascience #yaml #python #tutorial * Flexible and dynamic flow control of Azure DevOps YAML Pipelines using variables Eana Hufwe Eana Hufwe Eana Hufwe Follow Jan 17 '23 Flexible and dynamic flow control of Azure DevOps YAML Pipelines using variables #automation #azuredevops #pipelines #yaml * Parsing YAML file with Python Dmi*off Follow Jan 10 '23 Parsing YAML file with Python #python #yaml #devops #codenewbie 2 * YAML collections: Sequences and mappings Lars Gyrup Brink Nielsen Lars Gyrup Brink Nielsen Lars Gyrup Brink Nielsen Follow for This is Learning Nov 21 '22 YAML collections: Sequences and mappings #yaml #beginners 16 *d YAML for Dummies 🤔 Kaiwalya Koparkar Kaiwalya Koparkar Kaiwalya Koparkar Follow Nov 21 '22 YAML for Dummies 🤔 #todayilearned #programming #yaml 7 *d REST, GraphQL API testing with declarative YAML specs Kiran Kiran Kiran Follow Nov 1 '22 REST, GraphQL API testing with declarative YAML specs #testing #yaml #api #graphql 4 *d SparrowCI - DSL is dead, long live DSL! Alexey Melezhik Alexey Melezhik Alexey Melezhik Follow Oct 25 '22 SparrowCI - DSL is dead, long live DSL! #cicd #pipelines #dsl #yaml 3 *d YAML Buildpack: Auto Validate Configuration Repositories Mohammed Ammer Mohammed Ammer Mohammed Ammer Follow Sep 30 '22 YAML Buildpack: Auto Validate Configuration Repositories #yaml #buildpack #gitlab #autodevops 3 * Tree - A simple structure for dealing with dynamic or unknown JSON/YAML in Go mojatter mojatter mojatter Follow Aug 9 '22 Tree - A simple structure for dealing with dynamic or unknown JSON/YAML in Go #go #json #yaml 6 *d Use yaml format for Kubernetes from VS Code extension Shahriyar Al Mustakim Mitul Shahriyar Al Mustakim Mitul Shahriyar Al Mustakim Mitul Follow Jul 29 '22 Use yaml format for Kubernetes from VS Code extension #kubernetes #yaml * CKA & CKAD Series (Part2): Basics of Yaml & creating a pod using yaml Shahriyar Al Mustakim Mitul Shahriyar Al Mustakim Mitul Shahriyar Al Mustakim Mitul Follow Jul 29 '22 CKA & CKAD Series (Part2): Basics of Yaml & creating a pod using yaml #kubernetes #yaml 2 * Shared configuration stacks with AWS Systems Manager Christian Nunciato Christian Nunciato Christian Nunciato Follow for Pulumi Jul 1 '22 Shared configuration stacks with AWS Systems Manager #pulumi #aws #cloud #yaml 7 * Introducing multi-service deployments via Serverless Framework Compose We're Serverless! We're Serverless! We're Serverless! Follow for Serverless Inc. Apr 20 '22 Introducing multi-service deployments via Serverless Framework Compose #serverless #serverlessframework #serverlesscompose #yaml 4 *d YAML Pipelines in Azure DevOps: tips and advice Isaac Lyman Isaac Lyman Isaac Lyman Follow May 10 '22 YAML Pipelines in Azure DevOps: tips and advice #devops #azuredevops #azuredevopspipelines #yaml 8 *d Replacing YAML with TypeScript Nabeel Sulieman Nabeel Sulieman Nabeel Sulieman Follow Apr 30 '22 Replacing YAML with TypeScript #kubernetes #typescript #yaml 7 * yamlier: a Super simple cli yaml editor. gyudoza gyudoza gyudoza Follow Apr 25 '22 yamlier: a Super simple cli yaml editor. #cli #yaml #yml #bash 14 *d TIL how to define different Helm-Repos in a template rndmh3ro rndmh3ro rndmh3ro Follow Sep 14 TIL how to define different Helm-Repos in a template # todayilearned #helm #yaml #template Add Comment 2 min read Kustomize Your Kubernetes: The No-Fuss Guide to Better YAML Management John Potter John Potter John Potter Follow Oct 10 '23 Kustomize Your Kubernetes: The No-Fuss Guide to Better YAML Management #yaml #kubernetes Add Comment 1 min read Simplify Data Cleansing with YAML Configurations Serge Artishev Serge Artishev Serge Artishev Follow Oct 7 '23 Simplify Data Cleansing with YAML Configurations #typescript #datacleansing #dataprocessing #yaml * YAML? subbaramireddy subbaramireddy subbaramireddy Follow Sep 24 '23 What is YAML? #yaml #devops #programming Add C* YAML (and JSONC) failed as a data transfer format with comments 5 comments Which YAML style do you prefer? 4 * YAML vs JSON - Best Format for Astro, React & AI Projects. A Developers Guide: Part 1 Organizing YAML files by creating directories like `config/x` in Rail*nsor Neon * ",
    "url": "https://dev.to/t/yaml"
  },
  {
    "body": "* # yarn Follow Hide Create Post 172 Posts Published Older #yarn posts 1 2 *. -? What is YARN ?- nobody-99 nobody-99 nobody-99 Follow Nov 3 -? What is YARN ?- #yarn #javascript #webdev #node Add Comment 3 min read [21/52] Random Software Project: Solar Planets Brian Kirkpatrick Brian Kirkpatrick Brian Kirkpatrick Follow Sep 28 [21/52] Random Software Project: Solar Planets #javascript #space #yarn #numerics Add Comment 13 min read Bundling your phaser.js game with esbuild Kevin Potschien Kevin Potschien Kevin Potschien Follow Sep 16 Bundling your phaser.js game with esbuild #phaser #esbuild #typescript #yarn Add Comment 3 min read Package Manager Fight: npm vs pnpm vs npx vs yarn vs bun Nikhil Vikraman Nikhil Vikraman Nikhil Vikraman Follow Sep 15 Package Manager Fight: npm vs pnpm vs npx vs yarn vs bun #npm #npx #pnpm #yarn * ⚔️NPM vs YARN battle of ages⚔️ Rabbi lii Rabbi lii Rabbi lii Follow Sep 7 ⚔️NPM vs YARN battle of ages⚔️ #npm #yarn #webdev Add Comment 1 min read How to stop Storybook opening a new webpage on start (automatically with zsh) timreach timreach timreach Follow May 21 How to stop Storybook opening a new webpage on start (automatically with zsh) #zsh #webdev #storybook #yarn * Unbelieable Yarn Issue - Solution with node version Winston Sosa Winston Sosa Winston Sosa Follow May 13 Unbelieable Yarn Issue - Solution with node version #blockchain #yarn #ubuntu #node 2 *d React JS with Yarn 4 Prateek Wayne Prateek Wayne Prateek Wayne Follow May 18 React JS with Yarn 4 #react #yarn #webdev #javascript 9 * Maximizing Code Reusability with Yarn Workspaces (Monorepo) Abhishek Tomar Abhishek Tomar Abhishek Tomar Follow Mar 18 Maximizing Code Reusability with Yarn Workspaces (Monorepo) #yarn #react #designpatterns Add Comment 2 min read How To: Build and Run a Yarn Project with Docker Shipyard DevRel Shipyard DevRel Shipyard DevRel Follow Apr 2 How To: Build and Run a Yarn Project with Docker #node #docker #yarn #* 6 min read Resolving Node.js and npm Issues on macOS Geoffrey Kim Geoffrey Kim Geoffrey Kim Follow Mar 29 Resolving Node.js and npm Issues on macOS #node #npm #yarn #troubleshooting * Removing \"✨ Done in X.XXs.\" with Yarn kosei kosei kosei Follow Mar 6 Removing \"✨ Done in X.XXs.\" with Yarn #yarn #javascript #node 3 *d Tilde or Caret in package.json - Stop copying and start choosing Mateus Malaquias Mateus Malaquias Mateus Malaquias Follow Feb 26 Tilde or Caret in package.json - Stop copying and start choosing #node #npm #yarn 5 *d What Is PNPM ? How To Migarte From Npm/Yarn To Pnpm ? swhabitation swhabitation swhabitation Follow Feb 21 What Is PNPM ? How To Migarte From Npm/Yarn To Pnpm ? #pnpm #npm #yarn #frontend * * NPM And Yarn ? swhabitation swhabitation swhabitation Follow Feb 19 * NPM And Yarn ? #javascript #npm #yarn #packagemanager * npm vs yarn: Choose the Right Package Manager for Your Next Project Gautam Vaja Gautam Vaja Gautam Vaja Follow for CodeParrot Jan 31 npm vs yarn: Choose the Right Package Manager for Your Next Project #webdev #npm #yarn #javascript 7 *d Streamlining JavaScript Development with PackageFlex: One-Click Copy for npm Install Commands Bhoomit Ganatra Bhoomit Ganatra Bhoomit Ganatra Follow Jan 27 Streamlining JavaScript Development with PackageFlex: One-Click Copy for npm Install Commands #chromeextension #npm #yarn #bunjs 5 * How to install latest yarn version Muneer Syed Muneer Syed Muneer Syed Follow Dec 24 '23 How to install latest yarn version #yarn #node #* Maximising React Development Efficiency with Monorepo Architecture Abhishek Tomar Abhishek Tomar Abhishek Tomar Follow Jan 6 Maximising React Development Efficiency with Monorepo Architecture #javascript #monorepo #react #yarn * Upgrading to Yarn 4 Max Rohde Max Rohde Max Rohde Follow Dec 30 '23 Upgrading to Yarn 4 #javascript #yarn #w* read Dependency hoisting in Yarn monorepos Jono M Jono M Jono M Follow Nov 17 '23 Dependency hoisting in Yarn monorepos #webdev #javascript #yarn Add Comment 2 min read Package manager wars. The real picture Wojciech Maj Wojciech Maj Wojciech Maj Follow Oct 21 '23 Package manager wars. The real picture #npm #yarn #pnpm #javascript 10 reactions 8 comments 4 min read How to use Prettier plugins with Yarn PnP in VSCode? Javien Lee Javien Lee Javien Lee Follow Oct 7 '23 How to use Prettier plugins with Yarn PnP in VSCode? #yarn #prettier #vscode 4 * Preventing Multiple Lock Files in Your Git Repository using Husky Niraj Niroula Niraj Niroula Niraj Niroula Follow Aug 16 '23 Preventing Multiple Lock Files in Your Git Repository using Husky #husky #npm #yarn #javascript * Optimize Dockerfile By `Yarn Prune` Berk Berk Berk Follow Aug 17 '23 Optimize Dockerfile By `Yarn Prune` #yarn #docker #optimize #node 8 * Não se preocupe mais com o package manager do seu projeto NodeJS Marco Ollivier Marco Ollivier Marco Ollivier Follow Jul 6 '23 Não se preocupe mais com o package manager do seu projeto NodeJS #node #yarn #npm #pnpm 7 *d Yarn Modern with Plug’n’Play and \"Zero-Installs\" Spencer Carney Spencer Carney Spencer Carney Follow May 26 '23 Yarn Modern with Plug’n’Play and \"Zero-Installs\" #yarn #plugnplay #javascript #tooling 5 * Package Managers: Understanding npm, npx and yarn Renan Braga Renan Braga Renan Braga Follow May 25 '23 Package Managers: Understanding npm, npx and yarn #javascript #npm #yarn #node 2 * Improving Code Coverage Reporting in Monorepos Michael Musatov Michael Musatov Michael Musatov Follow May 22 '23 Improving Code Coverage Reporting in Monorepos #jest #turborepo #yarn #coverage 6 * Husky with Yarn Monorepo 🐶🐱 Lucas Martin Lucas Martin Lucas Martin Follow May 8 '23 Husky with Yarn Monorepo 🐶🐱 #javascript #typescript #yarn #webdev 3 react*d Yarn Monorepo with Workspaces 🐈 Lucas Martin Lucas Martin Lucas Martin Follow Apr 24 '23 Build Yarn Monorepo with Workspaces 🐈 #yarn #* 2 * Yarn essentials Hari Kotha Hari Kotha Hari Kotha Follow Apr 10 '23 Yarn essentials #yarn #npm #react #* How to install Yarn Philip Mac Philip Mac Philip Mac Follow Apr 6 '23 How to install Yarn #webdev #javascript #react #yarn * Alternative ni written in fish Karibash Karibash Karibash Follow Mar 29 '23 Alternative ni written in fish #node #yarn #pnpm #bunj*o fix 'Unsupported platform for fsevents@1.2.9: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}) ADEKOLA Abdwahab ADEKOLA Abdwahab ADEKOLA Abdwahab Follow Mar 16 '23 How to fix 'Unsupported platform for fsevents@1.2.9: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}) #npm #ignoreengines #javascript #yarn * Say Goodbye to Package Manager Chaos with ni Yoav Ganbar Yoav Ganbar Yoav Ganbar Follow for Builder.io Feb 23 '23 Say Goodbye to Package Manager Chaos with ni #webdev #programming #npm #yarn 4 * Split a commit into 2 commits with `git rebase` Sean Larkin Sean Larkin Sean Larkin Follow Dec 5 '22 Split a commit into 2 commits with `git rebase` #git #pnpm #yarn #javascript 36 * yarn: command not found on Windows 10 Jeremy Ikwuje Jeremy Ikwuje Jeremy Ikwuje Follow for Monierate Engineering Blog Nov 17 '22 yarn: command not found on Windows 10 #yarn #git #testing 30 *d Yarn Workspace Scripts Refactor - A Case Study Matti Bar-Zeev Matti Bar-Zeev Matti Bar-Zeev Follow Nov 11 '22 Yarn Workspace Scripts Refactor - A Case Study #yarn #tutorial #webdev #testing 3 *d Configuring workspace monorepo to use prettier and eslint with typescript Vinicius Blazius Goulart Vinicius Blazius Goulart Vinicius Blazius Goulart Follow Nov 3 '22 Configuring workspace monorepo to use prettier and eslint with typescript #eslint #prettier #monorepo #yarn 6 *d How to handle yarn's parse error Katz Ueno Katz Ueno Katz Ueno Follow Oct 12 '22 How to handle yarn's parse error #yarn #debug Add Comment 2 min read 🧶YarnLocking🔓 your dependencies Anton Korzunov Anton Korzunov Anton Korzunov Follow Oct 9 '22 🧶YarnLocking🔓 your dependencies #yarn #webdev #*t 11 min read Setup Node on Debian ..and !Yarn Christian Sedlmair Christian Sedlmair Christian Sedlmair Follow Sep 20 '22 Setup Node on Debian ..and !Yarn #node #yarn 6 *d Fixed Yarn error insufficient permissions Agik Setiawan Agik Setiawan Agik Setiawan Follow Sep 17 '22 Fixed Yarn error insufficient permissions #yarn #nextapp 5 *d Setting up TypeScript with NodeJS Rashwan Lazkani Rashwan Lazkani Rashwan Lazkani Follow Sep 3 '22 Setting up TypeScript with NodeJS #typescript #node #javascript #yarn 12 *d Frontline: Preparing Grounds Hossomi Hossomi Hossomi Follow Aug 14 '22 Frontline: Preparing Grounds #frontend #typescript #yarn 3 react*d Just What You Need Matti Bar-Zeev Matti Bar-Zeev Matti Bar-Zeev Follow Jul 29 '22 Build Just What You Need #webdev #github #yarn #* 5 min read Introduction to Monorepos with Yarn Workspaces José Miguel Álvarez Vañó José Miguel Álvarez Vañó José Miguel Álvarez Vañó Follow Jul 20 '22 Introduction to Monorepos with Yarn Workspaces #yarn #monorepo #javascript #beginners 4 *d YARN Cheatsheet Manthan Ankolekar Manthan Ankolekar Manthan Ankolekar Follow Jul 16 '22 YARN Cheatsheet #yarn 3 * How to optimize production Docker images running Node.js with Yarn Natalia Vayngolts Natalia Vayngolts Natalia Vayngolts Follow for Otomato Jul 5 '22 How to optimize production Docker images running Node.js with Yarn #node #yarn #docker 31 * Patch an NPM dependency with yarn Alexandru Bereghici Alexandru Bereghici Alexandru Bereghici Follow May 30 '22 Patch an NPM dependency with yarn #yarn #npm #javascript #webdev 6 *d Install multiple versions of same package using yarn Aashutosh Poudel Aashutosh Poudel Aashutosh Poudel Follow Jun 15 '22 Install multiple versions of same package using yarn #yarn #npm #alias 8 *d Speed up your Yarn Workspace with Nx Emily Xiong Emily Xiong Emily Xiong Follow for Nx Jun 1 '22 Speed up your Yarn Workspace with Nx #nx #yarn #monorepo #expo 8 * Switch Package Manager Camilo Martinez Camilo Martinez Camilo Martinez Follow May 23 '22 Switch Package Manager #showdev #npm #yarn #pnpm 15 *d npm vs yarn vs pnpm vs bun commands cheatsheet Camilo Martinez Camilo Martinez Camilo Martinez Follow May 10 '22 npm vs yarn vs pnpm vs bun commands cheatsheet #npm #yarn #pnpm #bunjs 51 * Lerna is no longer maintained. Now what? - Part 1 Matti Bar-Zeev Matti Bar-Zeev Matti Bar-Zeev Follow Apr 29 '22 Lerna is no longer maintained. Now what? - Part 1 #webdev #npm #yarn #tutorial 11 reactions 10 comments 4 min read WebDev 101: How to use Node, NPM, and Yarn Corbin Crutchley Corbin Crutchley Corbin Crutchley Follow for This is Learning Apr 19 '22 WebDev 101: How to use Node, NPM, and Yarn #javascript #node #npm #yarn 18 reactions 2 comments 17 min read yarn berryで依存パッケージのバージョンを指定する Yuta Goto Yuta Goto Yuta Goto Follow Apr 16 '22 yarn berryで依存パッケージのバージョンを指定する #javascript #yarn 5 *d NPM vs Yarn: let's settle things out. Ayoub Abidi Ayoub Abidi Ayoub Abidi Follow Apr 12 '22 NPM vs Yarn: let's settle things out. #npm #yarn #javascript #webdev 8 * Build a React application using yarn package manager Rohith ND Rohith ND Rohith ND Follow Apr 7 '22 Build a React application using yarn package manager #yarn #react 17 *d Embracing Efficiency: Yarn Berry vs. pnpm and the Power of Monorepos Geoffrey Kim Geoffrey Kim Geoffrey Kim Follow Feb 21 Embracing Efficiency: Yarn Berry vs. pnpm and the Power of Monorepos #yarn #pnpm #monorepo #packagemanagement Add Comment 3 min read Resolving Yarn Install and TypeScript Issues in a NestJS Project Geoffrey Kim Geoffrey Kim Geoffrey Kim Follow Feb 20 Resolving Yarn Install and TypeScript Issues in a NestJS Project #nestjs #typescript #vscode #yarn * Gerenciadores de pacotes Javascript Felipe Campara Silva Felipe Campara Silva Felipe Campara Silva Follow Oct 24 '23 Gerenciadores de pacotes Javascript #gerenciadoresdepacotes #npm #yarn #pnpm Add Comment 2 min read Yarn authentication settings(authToken) in .npmrc Chen XXX Chen XXX Chen XXX Follow Oct 26 '23 Yarn authentication settings(authToken) in .npmrc #yarn #npm Add Comment 3 min read Install Yarn Aji Maulana Aji Maulana Aji Maulana Follow Oct 9 '23 Install Yarn #yarn #webdev #* 1 min read npm and Yarn: Package Managers for JavaScript Projects Riski Aris Sandy Riski Aris Sandy Riski Aris Sandy Follow Oct 8 '23 npm and Yarn: Package Managers for JavaScript Projects #javascript #webdev #npm #yarn Add Comment 2 min read Buns Kingslee Kingslee Kingslee Follow Sep 11 '23 Buns #javascript #bunjs #npm #yarn 1 reaction Add C* Yarn vs NPM New Would you use NPM (not Yarn or PNPM) in Sep 2020? 5 comments Have you migrated to Yarn 2? New Yarn workspaces - splitting React app by routes 2 * Package Manager Fight: npm vs pnpm vs npx vs yarn vs bun Bundling your phaser.js game with esbuil*nsor Neon * ",
    "url": "https://dev.to/t/yarn"
  },
  {
    "body": "* # zookeeper Follow Hide Create Post 22 Posts Published *. * 1/* No More ZooKeeper Jaydeep Jaydeep Jaydeep Follow Aug 22 No More ZooKeeper #kafka #zookeeper #microservices #pubsub Add Comment 3 min read Setting up a Local Kafka Environment on Windows Code Green Code Green Code Green Follow for CodeGreen Jun 9 Setting up a Local Kafka Environment on Windows #java #kafka #zookeeper 5 * ZooKeeper Chronicles: Navigating EOFException and the Enigma of 0-Length Files Suave Bajaj Suave Bajaj Suave Bajaj Follow Dec 18 '23 ZooKeeper Chronicles: Navigating EOFException and the Enigma of 0-Length Files #zookeeper #kafka #cloud #distributedsystems 5 *d It’s Time to Break Out of the Zoo: Running Apache Kafka® without ZooKeeper™ Brianna Blacet Brianna Blacet Brianna Blacet Follow for Outshift By Cisco Apr 3 '23 It’s Time to Break Out of the Zoo: Running Apache Kafka® without ZooKeeper™ #kafka #zookeeper #kraft 10 *d An exciting Apache ZooKeeper Desktop GUI Redisant Redisant Redisant Follow Feb 20 '23 An exciting Apache ZooKeeper Desktop GUI #zookeeper #apache #gui 6 *d Geliştirme ortamı için basitçe Kafka kurulumu Ali Orhun Akkirman Ali Orhun Akkirman Ali Orhun Akkirman Follow for Açıklab Jul 7 '22 Geliştirme ortamı için basitçe Kafka kurulumu #kafka #zookeeper #topic #docker 14 *d Messaging with Cloud Native Kubernetes Apache Kafka Cluster Gayathri R Gayathri R Gayathri R Follow May 4 '22 Messaging with Cloud Native Kubernetes Apache Kafka Cluster #kubernetes #kafka #zookeeper #cloudnative 15 * Kafkadan veriler nasıl okunur? 💫 🌌 ✨ Gülsen Keskin Gülsen Keskin Gülsen Keskin Follow Jan 20 '22 Kafkadan veriler nasıl okunur? 💫 🌌 ✨ #kafka #apache #consumer #zookeeper 10 *d Multi Node Kafka Cluster Installation, Configuration and Test (Java, zookeeper, kafka, cmak) on Ubuntu20 Fatih ASLAN Fatih ASLAN Fatih ASLAN Follow Dec 8 '21 Multi Node Kafka Cluster Installation, Configuration and Test (Java, zookeeper, kafka, cmak) on Ubuntu20 #kafka #zookeeper #java #cmak 5 *d Basic CLI Implementation of Producer & Consumer using - Apache Kafka Broker & Zookeeper priyankanandula priyankanandula priyankanandula Follow Jun 27 '21 Basic CLI Implementation of Producer & Consumer using - Apache Kafka Broker & Zookeeper #apachekafka #zookeeper 7 * Installing Apache Kafka on Windows (For Development) Dendi Handian Dendi Handian Dendi Handian Follow Jun 4 '21 Installing Apache Kafka on Windows (For Development) #kafka #java #windows #zookeeper 10 * Look ma, no Zookeeper Aditya Kanekar Aditya Kanekar Aditya Kanekar Follow May 3 '21 Look ma, no Zookeeper #kafka #zookeeper 5 *d ZooKeeper cluster with Docker Compose Javier Vidal Javier Vidal Javier Vidal Follow Jan 26 '21 ZooKeeper cluster with Docker Compose #clickhouse #zookeeper #docker 2 * ZooKeeper cluster with Vagrant Javier Vidal Javier Vidal Javier Vidal Follow Jan 25 '21 ZooKeeper cluster with Vagrant #clickhouse #zookeeper #vagrant 3 *d Como monitorar o Apache Zookeeper com o Metricbeat Beatriz Oliveira Beatriz Oliveira Beatriz Oliveira Follow for Sysadminas Dec 21 '20 Como monitorar o Apache Zookeeper com o Metricbeat #zookeeper #elasticsearch #metricbeat 5 *d Deleting ClickHouse replication entries from ZooKeeper Javier Vidal Javier Vidal Javier Vidal Follow Oct 28 '20 Deleting ClickHouse replication entries from ZooKeeper #clickhouse #zookeeper 11 *d Replacing ZooKeeper with Kafka shubham1932 shubham1932 shubham1932 Follow Jul 30 '20 Replacing ZooKeeper with Kafka #java #messagechannel #zookeeper #kafka 2 *d Cleaning up Zookeeper Logs and Snapshots Bryan Sazon Bryan Sazon Bryan Sazon Follow Apr 16 '20 Cleaning up Zookeeper Logs and Snapshots #zookeeper #devops #sre #clickhouse 8 *d One to run them all Marcos Maia Marcos Maia Marcos Maia Follow Jun 16 '19 One to run them all #docker #kafka #zookeeper #kafkamanager 28 * Processing Streaming Twitter Data using Kafka and Spark — Part 1: Setting Up Kafka Cluster Dhoomil B Sheta Dhoomil B Sheta Dhoomil B Sheta Follow Nov 5 '18 Processing Streaming Twitter Data using Kafka and Spark — Part 1: Setting Up Kafka Cluster #kafka #zookeeper #bigdata 18 * Building a Cluster Using Elasticsearch, Kibana, Zookeeper, Kafka and Rsyslog Kiran Gutha Kiran Gutha Kiran Gutha Follow Jun 25 '18 Building a Cluster Using Elasticsearch, Kibana, Zookeeper, Kafka and Rsyslog #elasticsearch #kibana #zookeeper #kafka 25 reactions 2 comments 14 min read KAFKA ve KRaft Eyüp Akdeniz Eyüp Akdeniz Eyüp Akdeniz Follow Oct 3 '23 KAFKA ve KRaft #kafka #zookeeper #kraft Add Comment 4 min read Can I terminate a process gracefully before the hard eviction with a prestop hook? Nushaba M. Gadimli Nushaba M. Gadimli Nushaba M. Gadimli Follow Feb 24 '21 Can I terminate a process gracefully before the hard eviction with a prestop hook? #kubernetes #go #zookeeper #prestophook Add Comment 1 min read Apache Zookeeper - Changing Kerberos Principal - AuthFailedException Kevin Risden Kevin Risden Kevin Risden Follow Mar 21 '18 Apache Zookeeper - Changing Kerberos Principal - AuthFailedException #bigdata #apache #zookeeper #kerberos 1 reaction Add Comment 3 *onsor Neon * ",
    "url": "https://dev.to/t/zookeeper"
  },
  {
    "body": "**5 * 1 2 3 4 5 6 7 8 9 …75 …277 *. * Unleash ServBay’s Powe* 5 *d * * 10 * #javascr*mment 4 min read Guia Comp* Souza * Follow Nov 10 Guia Comp* #node 1 reaction Add Comment 3 *sing in Node.js wi* * #*sain Follow Nov 9 Multi-stage Buil* * Node.js Arjun Tripath*llow Nov 8 Schema V* **ead Deploy* * ** *ment 9 min read 📝 *! * Nov 4 📝 *, * Add Comment 2 min read *) Mehedi Hasan Mehedi Hasan Mehedi Hasan Follow Nov 4 *) #typescript #node #express #* * * Nov 8 * #webdev #devops #node #github 1 comment 6 min read User Authentication API with Express, JWT, Bcrypt, and MySQL gautam kumar gautam kumar gautam kumar Follow Nov 4 User Authentication API with Express, JWT, Bcrypt, and MySQL #webdev #javascript #* 6 min read -? What is YARN ?- nobody-99 nobody-99 nobody-99 Follow Nov 3 -? What is YARN ?- #yarn #javascript #webdev #node Add Comment 3 m* 7 * #webdev #javascript #node #* 4 min read *) * Nov 7 *) #react #node #* 3 min read Decoding 1D/2D B* * Nov 4 Decoding 1D/2D B* #cpp #node #pdf #barcode * * 🎨 * Noureddine Belguinan Follow Nov 6 * 🎨 #node #bunjs #npm #*t 2 min read Declaration Merging in TS M*i M* Nov 2 Declaration Merging in TS #typescript #javascript #learning #node Add Comment 3 min read * Megan Le* Nov 6 * #webdev #node #rust 2 * * W*f Follow for WavePlay Nov 1 * #hacktoberfest #javascript #discord #node Add Comment 1 min read 📢 * * Matheus Vieira do Nascimento Follow Nov 1 📢 * #git #frontend #react #node Add Comment 2 min read Monitoring PM2 in production * Follow for New Relic Nov 1 * Add Comment 8 min read * * Nov 5 * #typescript #javascript #node #react * MYSQL GUI SHASHI KUMAR KASTURI SHASHI KUMAR KASTURI SHASHI KUMAR KASTURI Follow Nov 1 MYSQL GUI #webdev #opensource #productivity #node Add Comment 1 min read *! kit2d2 kit2d2 kit2d2 Follow Nov 1 *! #javascript #gamedev #* 1 min read iFrame biPass Zia Ur Rehman Zia Ur Rehman Zia Ur Rehman Follow Oct 31 iFrame biPass #javascript #webdev #extensions #node * *. * Oct 31 *. #node #mongodb #javascript #express Add Comment 6 min read * Hannah Liao Hannah Liao Hannah Liao Follow Oct 30 * #postgres #railway #node #* *! * Nov 7 Typing Prism*rm 21 * * * Oct 28 * #javascript #node #npm #webdev Add Comment 2 min read * * * Oct 28 * #node #nvm Add Comment 1 min read *) * Oct 28 *) #javascript #beginners #api #node 5 reactions 1 comment 17 min read R* Aris Kurniawa* Follow Oct 29 R* #rabbitmq #node #javascript #erlang Add Comment 6 min read * Kaue Campos Kaue Campos Kaue Campos Follow Oct 31 * #javascript #node #typescript 4 * How to Integrate HashiCorp Vault with Node.js: Securely Manage Sensitive Data Gowtham S Gowtham S Gowtham S Follow Oct 27 How to Integrate HashiCorp Vault with Node.js: Securely Manage Sensitive Data #javascript #node #webdev #* * * Elasticsearch in Express #elasticsearch #expres* Criando uma Runtime Lucas *ewski Follow Oct 25 Criando uma Runtime #cpp #node #v8 #javascript Add Comment 6 min read * * Oct 25 * #webdev #node #api #netlify Add Comment 3 min read *? Jatin Anand Jatin Anand Jatin Anand Follow Nov 8 *? #node #npm #opensource #webdev * How to resolv*' * Oct 25 How to resolv*' #yaml #node #serverless #lambda Add Comment 1 min rea* Fi* Telegram #webdev #*d loading... #discuss Java* 28 comments We reach 750+ Stars on our Repository! 1 comment JavaScript One-Liners That Make Me Excited 56 comments Why Typescript Vs JavaScript discussion is still hot? 16 comments How to test REST API where major bussiness logic is written in SQL 3 comments 🌟 U* 🚀 New What JS Logging library / tool do you use? 44 comments How to start your development career as a Freelance developer ? 4 comments Buy Verified Paxful Account New Migrating API from Laravel to NestJS 10 * *? Java* 🔥 * 🚀 * * 10 JavaScript concepts every Node developer must master * How to make your Express app 9x faster (and type-safe) npm Vs npx Part 3/3: How to Implement Refresh Tokens through Http-Only Cookie in NestJS and React This TypeScript framework * ⚡️ Deno 2.0: The Next Evolution in JavaScript Runtimes – Is It Better Than Node.js? * *) How to make your Express.js APIs 9x faster with Encore.ts Setting Up PM2 for Multi-User Access on Ubuntu Instance * Building a Visual Studio Code Extension to Generate Files from Templates * * recently queried Coding Games for Beginners NodeJs MySQL Flow vs Typescript Node Scheduler Reddit Bot Node Express Rust for Web package-lock.json vs package.json Supertest Jest Stop Node Server JavaScript || What Is Webpack Javascript Environment Variables Memoization Body Parser npm Create Package JSon node vs deno Node JS Resume Points How to Add Commands on Twitch Express Typescrip*nsor Neon * ",
    "url": "https://dev.to/tag/node#main-content"
  },
  {
    "body": "* Tags Following tags Hidden tags #webdev 192,336 posts Because the internet... Follow Hide #javascript 181,577 posts Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code. JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other! Follow Hide #beginners 130,184 posts \"A journey of a thousand miles begins with a single step.\" -Chinese Proverb Follow Hide #programming 117,118 posts The magic behind computers. 💻 🪄 Follow Hide #tutorial 83,969 posts Tutorial is a general purpose tag. We welcome all types of tutorial - code related or not! It's all about learning, and using tutorials to teach others! Follow Hide #ai 34,777 posts Artificial intelligence leverages computers and machines to mimic the problem-solving and decision-making capabilities found in humans and in nature. Follow Hide #react 75,307 posts Official tag for Facebook's React JavaScript library for building user interfaces Follow Hide #devops 45,393 posts Content centering around the shifting left of responsibility, deconstruction of responsibility silos, and the automation of repetitive work tasks. Follow Hide #python 59,184 posts import antigravity Follow Hide #productivity 46,434 posts Productivity includes tips on how to use tools and software, process optimization, useful references, experience, and mindstate optimization. Follow Hide #opensource 39,551 posts May The Source Be With You! Articles about Open Source and Free Software as a philosophy, and its application to software development and project management. Follow Hide #aws 36,629 posts Amazon Web Services (AWS) is a collection of web services for computing, storage, machine learning, security, and more There are over 200+ AWS services as of 2023. Follow Hide #career 35,400 posts This tag is for anything relating to careers! Job offers, workplace conflict, interviews, resumes, promotions, etc. Follow Hide #learning 17,481 posts “I have no special talent. I am only passionately curious.” - Albert Einstein Follow Hide #node 40,963 posts A JavaScript *. Follow Hide #java 25,015 posts More than just a cup of coffee, Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. Follow Hide #typescript 32,348 posts Optional static type-checking for JavaScript. Follow Hide #css 38,954 posts Cascading Style Sheets (CSS) is a simple language for adding style (e.g., fonts, colors, spacing) to HTML documents. It describes how HTML elements should be displayed. Follow Hide #database 22,304 posts Posts on building, using, and learning about databases. Follow Hide #machinelearning 16,534 posts A branch of artificial intelligence (AI) and computer science which focuses on the use of data and algorithms to imitate the way that humans learn, gradually improving its accuracy. Follow Hide #news 44,716 posts Expect to see announcements of new and updated products, services, and features for languages & frameworks. You also will find high-level news relevant to the tech and software development industry covered here. Follow Hide #testing 18,668 posts Find those bugs before your users do! 🐛 Follow Hide #cloud 16,754 posts There is no cloud, only other peoples computers. Follow Hide #docker 16,417 posts Stories about Docker as a technology (containers, CLI, Engine) or company (Docker Hub, Docker Swarm). Follow Hide #api 15,396 posts Application Programming Interface Follow Hide #security 17,857 posts Hopefully not just an afterthought! Follow Hide #php 19,602 posts Home for all the PHP-related posts on Dev.to! Follow Hide #dotnet 16,351 posts .NET is an open source developer platform, created by Microsoft, for building many types of applications. With .NET, you can use multiple languages, editors, and libraries to build for web, mobile, desktop, gaming, and IoT. Find more at https://dot.net Follow Hide #datascience 13,709 posts Data Science allows us to extract meaning from and interpret data. Follow Hide #discuss 31,425 posts Discussion threads targeting the whole community Follow Hide #linux 18,283 posts What are clouds made of? Linux servers, mostly. Follow Hide #android 29,445 posts Brought to you by the good folks at Google... Follow Hide #go 18,580 posts A statically typed, compiled programming language designed at Google Follow Hide #html 23,825 posts Hypertext Markup Language — the standard markup language for documents designed to be displayed in a web browser. Follow Hide #csharp 12,130 posts Official tag for the C# programming language. Follow Hide #nextjs 16,809 posts Next.js gives you hybrid static and server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed. Follow Hide #frontend 13,326 posts \"If you're already a front-end developer, well, pretend you're also wearing a pirate hat.\" - Ethan Marcotte Follow Hide #development 14,186 posts Follow Hide #kubernetes 16,920 posts An open-source container orchestration system for automating software deployment, scaling, and management. Follow Hide #coding 11,109 posts while (!(succeed = try())) Follow Hide #blockchain 13,381 posts A decentralized, distributed, and oftentimes public, digital ledger consisting of records called blocks that are used to record transactions across many computers so that any involved block cannot be altered retroactively, without the alteration of all subsequent blocks. Follow Hide #github 19,895 posts \"Where the world builds software\" Follow Hide #softwaredevelopment 11,631 posts Follow Hide #mobile 16,263 posts iOS, Android, and any other types of mobile development... all are welcome! Follow Hide #angular 17,852 posts One of the world's most popular frontend JavaScript frameworks. Follow Hide #git 12,587 posts Software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Follow Hide #architecture 9,294 posts The fundamental structures of a software system. Follow Hide #codepen 7,832 posts A social development environment for front-end designers and developers. Follow Hide #cybersecurity 5,561 posts Articles related to cybersecurity and much more Follow Hide #azure 12,750 posts The dev.to tag for Microsoft Azure, the Cloud Computing Platform. Follow Hide #laravel 10,904 posts A PHP web application framework with expressive, elegant syntax. Follow Hide #cryptocurrency 6,315 posts Follow Hide #ruby 13,829 posts This tag is for posts related to the Ruby language, including its libraries. Follow Hide #web3 7,428 posts Web3 refers to the next generation of the internet that leverages blockchain technology to enable decentralized and trustless systems for financial transactions, data storage, and other applications. Follow Hide #reactnative 10,115 posts An open-source JavaScript framework, designed for building apps on multiple platforms like iOS, Android, and also web applications. Follow Hide #design 10,654 posts More than just making things look nice... Follow Hide #ios 7,614 posts This tag is for anything related to Apple's iOS devices, operating system, and development environment. Development, usage, apps, tips, requests for help: if it's related to iOS it's welcome here! Follow Hide #postgres 9,283 posts Posts on tips and tricks, using and learning about PostgreSQL for database development and analysis. Follow Hide #automation 5,913 posts Follow Hide #vscode 9,121 posts Official tag for Visual Studio Code, Microsoft's open-source editor Follow Hide #rust 11,479 posts This tag is for posts related to the Rust programming language, including its libraries. Follow Hide #rails 8,843 posts Ruby on Rails is a popular web framework that happens to power dev.to ❤️ Follow Hide #sql 8,025 posts Posts on tips and tricks, using and learning about SQL for database development and analysis. Follow Hide #gamedev 8,436 posts 👾 👾 👾 Follow Hide #algorithms 8,328 posts Heap, Binary Tree, Data Structure it doesn't matter. This tag should be used for anything Algorithm & Data Structure focused. Follow Hide #vue 15,274 posts Official tag for the Vue.js JavaScript Framework Follow Hide #startup 7,716 posts A company or project undertaken by an entrepreneur to seek, develop, and validate a scalable business model. Follow Hide #chatgpt 4,695 posts GPT models are capable of natural language processing tasks such as text generation, summarization, and analysis. ChatGPT interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer follow-up questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests. Follow Hide #softwareengineering 6,243 posts Follow Hide #software 5,289 posts Follow Hide #showdev 12,687 posts Show off what you've built! Follow Hide #hacktoberfest 4,750 posts Happy hacking! 🎃 Follow Hide #interview 5,542 posts Follow Hide #flutter 10,283 posts An open source framework by Google for building beautiful, natively compiled, multi-platform applications from a single codebase. Follow Hide #backend 4,820 posts Follow Hide #web 6,112 posts Follow Hide #devchallenge 2,942 posts This is the official tag for submissions and announcements related to DEV Challenges. Follow Hide #computerscience 8,821 posts This tag is for sharing and asking questions about anything related to computer science, including data structures, algorithms, research, and white papers! 🤓 Follow Hide #microservices 5,214 posts An architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs Follow Hide #bitcoin 4,083 posts Follow Hide #serverless 9,400 posts All computing — without servers! Follow Hide #performance 6,425 posts Tag for content related to software performance. Follow Hide #developer 5,347 posts Follow Hide #tailwindcss 5,550 posts A utility-first CSS framework Follow Hide #kotlin 5,219 posts a cross-platform, statically typed, general-purpose programming language with type inference Follow Hide #django 6,257 posts Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It’s free and open source. Follow Hide #ubuntu 4,789 posts Canonical, Ubuntu, Linux and related technology. Follow Hide #data 3,898 posts Follow Hide #community 6,175 posts Follow Hide #terraform 3,760 posts All subjects concerning Hashicorp's IaC tool `Terraform`. Follow Hide #tooling 3,972 posts Working with a new tool you want to share? Created a new workflow for a task? Found some great configurations? Share them with the community! Follow Hide #braziliandevs 3,491 posts Tag dedicada a comunidade brasileira, com foco em conteúdo em Português do Brasil. Follow Hide #100daysofcode 6,004 posts The 100 Days of Code is a coding challenge created by Alexander Kallaway to encourage people to learn new coding skills. Follow Hide #cpp 6,302 posts Official tag for the C++ programming language. Follow Hide #wordpress 5,949 posts the world’s most popular website builder Follow Hide #springboot 2,779 posts Follow Hide #llm 2,341 posts Follow Hide #archlinux 53,495 posts A lightweight and flexible Linux distribution that tries to Keep It Simple. Follow Hide #mysql 3,547 posts Posts on tips and tricks, using and learning about MySQL for database development and analysis. Follow Hide #mongodb 6,267 posts A popular NoSQL database Follow Hid*nsor Neon * ",
    "url": "https://dev.to/tags"
  },
  {
    "body": "* Follow Report Abuse Taslim Arif Software Engineer, Backend Developer, and algorithm lover. Hyderabad, India Joined on Jan 18, 2021 taslimarif600@gmail.com Pronouns He Work Software Engineer More info about @tastaslim Badges * Three * t* it * Data Structures, React.js, Typescript, Node.js, Nest.js, GraphQL, TypeOrm, Linux, C++, Git , Docker Currently learning Python, Javascript, AWS and Microservices Available for Python, AWS, Microservices, REST, Typescript, Node.js, React.js, Docker 6 posts published 10 comments written 9 tags followed How to Enable Password Authentication in AWS ec2 Instances Taslim Arif Taslim Arif Taslim Arif Follow Jun 8 '23 How to Enable Password Authentication in AWS ec2 Instances 18 reactions Add C*ith Taslim Arif? * Taslim Arif. * What the heck is SSH? Taslim Arif Taslim Arif Taslim Arif Follow Jun 5 '23 What the heck is SSH? #ssh #networking #softwareengineering #security 5 * Reasons behind bad Softwares (Technical Debts) and Refactoring Taslim Arif Taslim Arif Taslim Arif Follow Sep 26 '21 Reasons behind bad Softwares (Technical Debts) and Refactoring #programming #codequality #computerscience 13 * Clean Code Taslim Arif Taslim Arif Taslim Arif Follow Sep 26 '21 Clean Code #programming #productivity #codequality #computerscience 149 reactions 20 comments 3 min read Circular Linked List: Taslim Arif Taslim Arif Taslim Arif Follow Sep 19 '21 Circular Linked List: #programming #algorithms #datastructures #linkedlist 5 * An Introduction to Linked List Taslim Arif Taslim Arif Taslim Arif Follow Sep 19 '21 An Introduction to Linked List #programming #algorithms #datastructures #linkedlist 6 * * ",
    "url": "https://dev.to/tastaslim"
  },
  {
    "body": "* 88 Add reaction 75 Like 13 *s 0 Fire 21 Jump to Comments 47 * Taylor Beeston Posted on Jun 9, 2020 75 13 Body Parser You probably don't need body-parser in your Express apps #javascript #node #webdev What is body-parser? Often, when I see a blog post or article describing an Express.js server, it usually starts out with something similar to the following: npm init -y npm i express body-parser Followed by the classic * bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.json()); // more express stuff I used to have these four lines of code in practically every Express app I've ever made! However, a few weeks ago I was poring over the Express Docs and noticed that as of version 4.16.0 (which came out three years ago!), Express basically comes with body-parser out of the box! How do I use the Express version? Well, you can pretty much just search bodyParser, and replace it with express! This means our four lines of code above can be refactored into the following three lines of code: * app = express(); app.use(express.json()); If you are using Babel (which I would highly recommend!), you can even use a named import to make the code even more concise: import express, { json } from 'express'; const app = express(); app.use(json()); Heroku *refer* Top comments (21) * Salah Bentayeb Salah Bentayeb Salah Bentayeb Follow Passionate about IT & Security , Also Web Developer. Location Algérie, ORAN Education Bachelor degree in Computer Science Work Web Developer at HalasProject Joined Jun 10, 2020 • Jun 10 '* it proves that the majority prefer to follow the tutorials than to read the documentation ... I am part of the majority 👀, I just learned this technique thanks for sharing 🙏 16 likes Like Reply Taylor Beeston Taylor Beeston Taylor Beeston Follow Father of four under four, three boys and one girl! Full-Stack dev programming mostly in Javascript/TypeScript these days, with a decent amount of Rust on the side Location Lake Stevens, Washington Work Full Stack Dev at WeLibrary Joined Nov 17, 2019 • Jun 10 '* No problem! 1 like Like Reply Mohamad Kalaaji Mohamad Kalaaji Mohamad Kalaaji Follow Full Stack Web Developer Location Beirut, Lebanon Joined Jul 2, 2017 • Jun 10 '* It has been there for quite some time 🙃 body parser became part of express You can use both, they perform the exact same job but one thing you need to keep in mind that if there is an issue with the express build in body parser then you have to update express as whole, as for the independent body parser package if there is an issue with it then you have to update that package only 6 likes Like Reply Taylor Beeston Taylor Beeston Taylor Beeston Follow Father of four under four, three boys and one girl! Full-Stack dev programming mostly in Javascript/TypeScript these days, with a decent amount of Rust on the side Location Lake Stevens, Washington Work Full Stack Dev at WeLibrary Joined Nov 17, 2019 • Jun 10 '* That is a good point that I hadn't thought of. Though at least mostly in my limited experience, express upgrades have been pretty painless 1 like Like Reply Jater Loh Jater Loh Jater Loh Follow Location Singapore Work Software Engineer at Singapore Joined Oct 1, 2019 • Jun 9 '20 *, thanks for sharing! I was not aware that express ships with bodyParser now, I have to give this a try. In regards to named imports, it does make the code more concise. But I think it may be a tad confusing to have a function named json. 6 likes Like Reply Taylor Beeston Taylor Beeston Taylor Beeston Follow Father of four under four, three boys and one girl! Full-Stack dev programming mostly in Javascript/TypeScript these days, with a decent amount of Rust on the side Location Lake Stevens, Washington Work Full Stack Dev at WeLibrary Joined Nov 17, 2019 • Jun 9 '* At first I thought it would be weird too, but I've found that only using it on routes that actually need to parse json actually doesn't look so bad. For example import { Router, json } from 'express'; const router = Router(); router.route('/').get((_, response) => { return response.status(200).send(\"No parsing needed here\"); }); router.route('/').post(json(), (request, response) => { return response.status(200).json(request.body); }); export default router; It might still be better to just use express.json or to rename it to something like jsonMiddleware though 6 likes Like Reply Tobias SN Tobias SN Tobias SN Follow You lack the required permissions to view this bio. Joined Aug 13, 2018 • Jun 9 '* Express also has built-in middleware for raw data (express.raw) and text (express.text) since 4.17.0. 8 likes Like Reply Taylor Beeston Taylor Beeston Taylor Beeston Follow Father of four under four, three boys and one girl! Full-Stack dev programming mostly in Javascript/TypeScript these days, with a decent amount of Rust on the side Location Lake Stevens, Washington Work Full Stack Dev at WeLibrary Joined Nov 17, 2019 • Jun 9 '* That is true! They've also got express.urlencoded, 7 likes Like Reply Ingo Steinke, web developer Ingo Steinke, web developer Ingo Steinke, web developer Follow Ingo has developed websites for more than 20 years. A creative web developer focused on creating and improving websites to make the web more accessible, sustainable, and user-friendly. Location Berlin / Düsseldorf / Cologne , Germany Pronouns he/him Work Creative Web Developer (Freelancer) Joined Sep 21, 2019 • Apr 20 '21 Copy l* your post! When following tutorials, even if they do not seem outdated at first sight, once I ask myself: do I really have to do this now in 202... (add current year) chances are, I don't. No Babel, no manual HTTP CORS headers, and no external body parser. 2 likes Like Reply Yuri Silva Yuri Silva Yuri Silva Follow Student of IT, trying to learn technologies and usages so that I can get a job. Education Centro Universitário UniFavip Wyden Work Mostly self - IT Student Joined Dec 18, 2021 • Apr 18 '* Yes, I was searching ways of deploy a express API in Firebase and every tutorial I saw was saying to install body-parser framework, those which are from 2021/22, which made me think: WHY are they keeping using it ? Does express body parser performs bad or is outshined by the other one ? 1 like Like Reply Josué Gabuardi Josué Gabuardi Josué Gabuardi Follow Software Developer with designer nuances interested in learning all about web development. I really enjoy reading good articles. Location San José, Costa Rica Education Latin American University for Science and Technology (ULACIT) Work Security Software Engineer at IBM Joined Sep 18, 2019 • Jul 26 '* Now read the NPM documentation... since now you don't need Babel... you only need the attribute type: module in your package.json and node.js will use ESM imports by default. 2 likes Like Reply Day Souza Day Souza Day Souza Follow Location Curitiba, Brazil Work System Analyst at ExxonMobil Joined Sep 21, 2019 • Jun 9 '* That's so cool! I just tested it, thanks! 3 likes Like Reply Taylor Beeston Taylor Beeston Taylor Beeston Follow Father of four under four, three boys and one girl! Full-Stack dev programming mostly in Javascript/TypeScript these days, with a decent amount of Rust on the side Location Lake Stevens, Washington Work Full Stack Dev at WeLibrary Joined Nov 17, 2019 • Jun 9 '* No problem! Glad you found it useful! 2 likes Like Reply Robin Goudeketting Robin Goudeketting Robin Goudeketting Follow JavaScript & TypeScript Full-stack developer Location Netherlands Joined May 23, 2020 • Jul 16 '* What I understood is that the parser in express is actually the same one, since they always are used together, they just integrated it. 1 like Like Reply Jerry Nwosu Jerry Nwosu Jerry Nwosu Follow Ninja Email jerrynwosu007@gmail.com Location Lagos, Nigeria Education World wide web Work Hire me Joined Sep 6, 2019 • Oct 27 '20 Co*s. This was helpful. 1 like Like Reply Arya Arya Arya Follow Software Engineer Location Tehran Work Software Engineer Joined Sep 22, 2019 • Jul 14 '* Excuse me if my question seems amateur, but why doesn't express parse the body automatically and needs to be told so? *ion (21 comments) *. * Neon **. Try Neon for Free → Read next Evaluating Medical Retrieval-Augmented Generation (RAG) with NVIDIA AI Endpoints and Ragas KAMAL KISHOR - Nov 7 Best Version Control Practices Every React Development Team Needs To Know Joseph Abraham - Nov 7 Mastering JavaScript Memory Management: Essential Guide to Garbage Collection & Memory Leaks Okoye Ndidiamaka - Nov 7 How to Include JavaScript in Laravel 11: A Step-by-Step Guide for All Scenarios websilvercraft - Nov 7 Taylor Beeston Follow Father of four under four, three boys and one girl! Full-Stack dev programming mostly in Javascript/TypeScript these days, with a decent amount of Rust on the side Location Lake Stevens, Washington Work Full Stack Dev at WeLibrary Joined Nov 17, 2019 More from Taylor Beeston Resizing images client-side with vanilla JS #javascript #tutorial #webdev Updating callback-style code to use async/await #javascript #tutorial #productivity Heroku *references R* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/taylorbeeston/you-probably-don-t-need-body-parser-in-your-express-apps-3nio"
  },
  {
    "body": "* Web Site Terms and Conditions of Use 1. Terms By accessing this web site, you are agreeing to be bound by these web site Terms and Conditions of Use, our Privacy Policy, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this web site are protected by applicable copyright and trade mark law. 2. Use License Permission is granted to temporarily download one copy of the materials (information or software) on DEV Community's web site for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not: modify or copy the materials; use the materials for any commercial purpose, or for any public display (commercial or non-commercial); attempt to decompile or reverse engineer any software contained on DEV Community's web site; remove any copyright or other proprietary notations from the materials; or transfer the materials to another person or \"mirror\" the materials on any other server. This license shall automatically terminate if you violate any of these restrictions and may be terminated by DEV Community at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format. 3. Disclaimer The materials on DEV Community's web site are provided \"as is\". DEV Community makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties, including without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. Further, DEV Community does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its Internet web site or otherwise relating to such materials or on any sites linked to this site. 4. Limitations In no event shall DEV Community or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption,) arising out of the use or inability to use the materials on DEV Community's Internet site, even if DEV Community or an authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you. 5. Revisions and Errata The materials appearing on DEV Community's web site could include technical, typographical, or photographic errors. DEV Community does not warrant that any of the materials on its web site are accurate, complete, or current. DEV Community may make changes to the materials contained on its web site at any time without notice. DEV Community does not, however, make any commitment to update the materials. 6. Links DEV Community has not reviewed all of the sites linked to its Internet web site and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by DEV Community of the site. Use of any such linked web site is at the user's own risk. 7. Copyright / Takedown Users agree and certify that they have rights to share all content that they post on DEV Community — including, but not limited to, information posted in articles, discussions, and comments. This rule applies to prose, code snippets, collections of links, etc. Regardless of citation, users may not post copy and pasted content that does not belong to them. Users assume all risk for the content they post, including someone else's reliance on its accuracy, claims relating to intellectual property, or other legal rights. If you believe that a user has plagiarized content, misrepresented their identity, misappropriated work, or otherwise run afoul of DMCA regulations, please email support@dev.to. DEV Community may remove any content users post for any reason. 8. Site Terms of Use Modifications DEV Community may revise these terms of use for its web site at any time without notice. By using this web site you are agreeing to be bound by the then current version of these Terms and Conditions of Use. 9. DEV Community Trademarks and Logos Policy All uses of the DEV Community logo, DEV Community badges, brand slogans, iconography, and the like, may only be used with express permission from DEV Community. DEV Community reserves all rights, even if certain assets are included in DEV Community open source projects. Please contact support@dev.to with any questions or to request permission. 10. Reserved Names DEV Community has the right to maintain a list of reserved names which will not be made publicly available. These reserved names may be set aside for purposes of proactive trademark protection, avoiding user confusion, security measures, or any other reason (or no reason). Additionally, DEV Community reserves the right to change any already-claimed name at its sole discretion. In such cases, DEV Community will make reasonable effort to find a suitable alternative and assist with any transition-related concerns. 11. Content Policy The following policy applies to comments, articles, and all other works shared on the DEV Community platform: Users must make a good-faith effort to share content that is on-topic, of high-quality, and is not designed primarily for the purposes of promotion or creating backlinks. Posts must contain substantial content — they may not merely reference an external link that contains the full post. If a post contains affiliate links, that fact must be clearly disclosed. For instance, with language such as: “This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.” DEV Community reserves the right to remove any content that it deems to be in violation of this policy at its sole discretion. Additionally, DEV Community reserves the right to restrict any user’s ability to participate on the platform at its sole discretion. 12. Fees, Payment, Renewal Fees for Paid Services.Fees for Paid Services. Some of our Services may be offered for a fee (collectively, “Paid Services”). This section applies to any purchases of Paid Services. By using a Paid Service, you agree to pay the specified fees. Depending on the Paid Service, there may be different kinds of fees, for instance some that are one-time, recurring, and/or based on an advertising campaign budget that you set. For recurring fees (AKA Subscriptions), your subscription begins on your purchase date, and we’ll bill or charge you in the automatically-renewing interval (such as monthly, annually) you select, on a pre-pay basis until you cancel, which you can do at any time by contacting plusplus@dev.to. Payment.You must provide accurate and up-to-date payment information. By providing your payment information, you authorize us to store it until you request deletion. If your payment fails, we suspect fraud, or Paid Services are otherwise not paid for or paid for on time (for example, if you contact your bank or credit card company to decline or reverse the charge of fees for Paid Services), we may immediately cancel or revoke your access to Paid Services without notice to you. You authorize us to charge any updated payment information provided by your bank or payment service provider (e.g., new expiration date) or other payment methods provided if we can’t charge your primary payment method. Automatic Renewal. By enrolling in a subscription, you authorize us to automatically charge the then-applicable fees for each subsequent subscription period until the subscription is canceled. If you received a discount, used a coupon code, or subscribed during a free trial or promotion, your subscription will automatically renew for the full price of the subscription at the end of the discount period. This means that unless you cancel a subscription, it’ll automatically renew and we’ll charge your payment method(s). The date for the automatic renewal is based on the date of the original purchase and cannot be changed. You can view your renewal date(s), cancel, or manage subscriptions by contacting plusplus@dev.to. Fees and Changes. We may change our fees at any time in accordance with these Terms and requirements under applicable law. This means that we may change our fees going forward or remove or update features or functionality that were previously included in the fees. If you don’t agree with the changes, you must cancel your Paid Service. Refunds.There are no refunds and all payments are final. European Users: You have the right to withdraw from the transaction within fourteen (14) days from the date of the purchase without giving any reason as long as your purchase was not of downloadable content or of a customized nature, and (i) the service has not been fully performed, or (ii) subject to other limitations as permitted by law. If you cancel this contract, we will reimburse you all payments we have received from you, without undue delay and no later than within fourteen days from the day on which we received the notification of your cancellation of this contract. For this repayment, we will use the same means of payment that you used for the original transaction, unless expressly agreed otherwise with you; you will not be charged for this repayment. You may exercise your right to withdrawal by sending a clear, email request to plusplus@dev.to with the following information: List of services you wish to withdraw from List the date that you purchased the goods or services. If this is a recurring subscription, please list the most recent renewal date List your full legal name and the email associated with your account List the address in which you legally reside Today's Date 13. Governing Law Any claim relating to DEV Community's web site shall be governed by the laws of the State of New York without regard to its conflict of law provisions. General Terms and Conditions applicable to Use of a Web Site. * * ",
    "url": "https://dev.to/terms"
  },
  {
    "body": "* Follow Report Abuse The Guild A group of open source developers, bringing a different approach for sustainable open source. Our philosophy is to place our libraries under a person's name. Joined on Jul 21, 2021 Support email contact@the-guild.dev Meet the team 147 posts published 2 members How to write G*eGuildBot Follow Nov * min read The Guild acquires Stellate * Sep 10 The Guild acquires Stellate #graphql #company * Introducing GraphQL Mesh v1 and Hive Gateway v1 * Sep 10 Introducing GraphQL Mesh v1 and Hive Gateway v1 #graphql #mesh #graphqlhive * Audit of GraphQL Gateways Supporting Apollo Federation * Sep 10 Audit of GraphQL Gateways Supporting Apollo Federation #graphql * Building Type-Safe Random GIF Generator with feTS * May 2 Building Type-Safe Random GIF Generator with feTS #fets Add Comment 3 min read GraphQL Request Cancellation in JavaScript * Apr 29 GraphQL Request Cancellation in JavaScript #graphql #javascript #typescript Add Comment 7 min read The Guild - Rebranding in open source * Feb 24 The Guild - Rebranding in open source #opensource #branding #marketing Add Comment 6 min read Announcing Accounts.js 1.0 Release Candidate * Jan 8 Announcing Accounts.js 1.0 Release Candidate #accountsjs #graphqlmodules #graphql Add Comment 8 min read Building Open Source GraphQL Security * Dec 7 '23 Building Open Source GraphQL Security #graphql Add Comment 9 min read Open Source composition and validation library for Apollo Federation * Oct 10 '23 Open Source composition and validation library for Apollo Federation #graphql Add Comment 4 min read GraphQLConf 2023 Recap * Sep 26 '23 GraphQLConf 2023 Recap #graphql Add Comment 8 min read Hive Summer Update 2023 * Jul 20 '23 Hive Summer Update 2023 #* 3 min read The complete GraphQL Scalar Guide * Jun 27 '23 The complete GraphQL Scalar Guide #graphql #scalars #codegen #node * How Much Are GitHub Stars Worth to You? * Jun 1 '23 How Much Are GitHub Stars Worth to You? #opensource Add Comment 7 min read Build a GraphQL server running on Cloudflare Workers. * May 30 '23 Build a GraphQL server running on Cloudflare Workers. #graphql #node #typescript #yoga * Using @defer Directive with GraphQL Code Generator * May 24 '23 Using @defer Directive with GraphQL Code Generator #graphql #codegen Ad* Schema Policy in Hive * May 16 '23 Introducing Schema Policy in Hive #graphql #hive Add Comment 3 min read Consume OpenAPI in TypeScript Without Code Generation * May 8 '23 Consume OpenAPI in TypeScript Without Code Generation #openapi #* Optimize your Bundle Size with SWC and *GuildBot Follow Apr 18 '23 Optimize your Bundle Size with SWC and GraphQL Codegen #clientpreset #* GraphQL over Internet * Apr 6 '23 GraphQL over Internet #graphql #http #ws #sse Add Comment 8 min read Announcing GraphQL Network Inspector * Feb 22 '23 Announcing GraphQL Network Inspector #graphql #graphqlnetworkinspector Add Comment 2 min read GraphQL Cursor Pagination with PostgreSQL * Feb 15 '23 GraphQL Cursor Pagination with PostgreSQL #graphql #sql #postgres Add Comment 8 min read GraphQL Hive - Improvements in Schema Registry * Feb 7 '23 GraphQL Hive - Improvements in Schema Registry #* 2 min read How we shipped CDN access tokens with Cloudflare Workers and R2 * Feb 1 '23 How we shipped CDN access tokens with Cloudflare Workers and R2 #graphqlhive #javascript #cloudflare #whatwg Add Comment 10 min read On-Demand Shared GraphQL Subscriptions with RxJS * Jan 27 '23 On-Demand Shared GraphQL Subscriptions with RxJS #graphql #subscriptions #typescript #rxjs Add Comment 12 min read Flutter GraphQL | The Guild * Jan 25 '23 Flutter GraphQL | The Guild #graphql #deepdive #flutter * Scalable APIs with GraphQL Server Codegen Preset * Jan 24 '23 Scalable APIs with GraphQL Server Codegen Preset #* * Nextra 2 – Next.js Static Site Generator * Jan 23 '23 Nextra 2 – Next.js Static Site Generator #nextra #nextjs #react 5 react*d realtime GraphQL backends with Grafbase * Jan 17 '23 Build realtime GraphQL backends with Grafbase #graphql #realtime #livequery * GraphQL-ESLint v3.14 - What's New? * Dec 29 '22 GraphQL-ESLint v3.14 - What's New? #graphql #eslint #linter 2 * GraphQXL - The Missing GraphQL Language Extension? * Dec 12 '22 GraphQXL - The Missing GraphQL Language Extension? #graphql 5 *d Announcing GraphQL Yoga v3 * Nov 17 '22 Announcing GraphQL Yoga v3 #graphql #node #typescript #yoga 4 reactions 1 comments 4 min read Announcing free SSO (Single Sign On) for GraphQL Hive * Nov 7 '22 Announcing free SSO (Single Sign On) for GraphQL Hive #graphql #graphqlhive 2 *d How ClickHouse helps us track billions of GraphQL requests monthly * Nov 3 '22 How ClickHouse helps us track billions of GraphQL requests monthly #graphql #graphqlhive 2 * Getting the Best of TypeScript and GraphQL: Union Types * Oct 18 '22 Getting the Best of TypeScript and GraphQL: Union Type*n 5 react*ding Slack Bot with Cloudflare Workers * Oct 12 '22 Building Slack Bot with Cloudflare Workers #graphql #codegen * Announcing self-hosted GraphQL Hive * Oct 5 '22 Announcing self-hosted GraphQL Hive #* 2 min read Unleash the power of Fragments with *GuildBot Follow Aug 30 '22 Unleash the power of Fragments with GraphQL Codegen #graphql #codegen #react #typescript Add Comment 6 min read Improved Security with GraphQL Armor support for Yoga Server 2 * Aug 30 '22 Improved Security with GraphQL Armor support for Yoga Server 2 #graphql #graphqltools #security * runs everywhere, so should your servers - here is how * Aug 30 '22 JavaScript runs everywhere, so should your servers - here is how #fetch #whatwg #node #graphql * Building GraphQL Servers in 2022 * Aug 30 '22 Building GraphQL Servers in 2022 #graphql #conference #yoga * Announcing GraphQL Yoga 2.0! * Aug 30 '22 Announcing GraphQL Yoga 2.0! #server #envelop #node #graphql * Announcing GraphQL Hive, the complete GraphQL API manager * Aug 30 '22 Announcing GraphQL Hive, the complete GraphQL API manager #* 5 min read Announcing GraphQL Yoga 2.0! * Mar 29 '22 Announcing GraphQL Yoga 2.0! #server #envelop #node #graphql 10 reactions 1 comments 6 min read GraphQL error handling to the max with Typescript, codegen and fp-ts * Mar 7 '22 GraphQL error handling to the max with Typescript, codegen and fp-t*n #fpts 10 reactions Add Comment 16 *onsor Neon * ",
    "url": "https://dev.to/the-guild"
  },
  {
    "body": "* 0 *ead 0 * 0 * TheGuildBot for The Guild Posted on Nov 4 • Originally published at the-guild.dev How to write G*ver This article was published on Monday, November 4, 2024 by Eddy Nguyen @ The Guild Blog Resolvers are the fundamental building blocks of a GraphQL server. To build a robust and scalable GraphQL server, we must understand h*. In this blog post, we will explore: how resolvers work concepts such as resolver map, resolver chain, defer resolve and mappers tools and best practices Glossary Resolver map: An object containing resolvers that match the types and fields in the GraphQL schema. Resolver chain: The order of resolvers execution when the GraphQL server handles a request. Mapper: The shape of the data returned by a resolver to become the parent parameter of the next resolver in the resolver chain. Defer resolve: A technique to avoid unnecessary resolver execution of a field early in the resolver chain. What Are Resolvers? In a GraphQL server, a resolver is a function that \"resolves\" a value which means doing arbitrary combination of logic to return a value. For example: returning a value statically fetching data from a database or an external API to return a value executing a complex business logic to return a value Each field in a GraphQL schema has an optional corresponding resolver function. When a client queries a field, the server executes the resolver function to resolve the field. Given this example schema: ```graphql filename=\"src/graphql/schema.graphql\" type Query { movie(id: ID!): Movie } type Movie { id: ID! name: String! actors: [Actor!]! } type Actor { id: ID! stageName: String! } We can write a **resolver map** like this: ```ts filename=\"src/graphql/resolvers.ts\" const resolvers = { Query: { movie: () => {} // `Query.movie` resolver }, Movie: { id: () => {}, // `Movie.id` resolver name: () => {}, // `Movie.name` resolver actors: () => {} // `Movie.actors` resolver }, Actor: { id: () => {}, // `Actor.id` resolver stageName: () => {} // `Actor.stageName` resolver } } We will discuss how the code flows through resolvers when the server handles a request in the next section. Code Flow and Resolver Chain Using the same schema, we may send a query like this: query Movie { movie(id: \"1\") { id name actors { id stageName } } } Once the server receives this query, it starts at Query.movie resolver, and since it returns a nullable Movie object type, two scenarios can happen: If Query.movie resolver returns null or undefined, the code flow stops here, and the server returns movie: null to the client. If Query.movie resolver returns anything else (e.g. objects, class instances, number, non-null falsy values, etc.), the code flow continues. Whatever being returned - usually called mapper - will be the first argument of the Movie resolvers i.e. Movie.id and Movie.name resolvers. This process repeats itself until a GraphQL scalar field needs to be resolved. The order of the resolvers execution is called the resolver chain. For the example request, the resolver chain may look like this: flowchart LR A[Query.movie] --> B(Movie.id) A[Query.movie] --> C(Movie.name) A[Query.movie] --> D(Movie.actors) D --> E(Actor.id) D --> F(Actor.stageName) There are four positonal arguments of a resolver function: parent: the value returned by the parent resolver. For root-level resolvers like Query.movie, parent is always undefined. For other object-type resolvers like Movie.id and Movie.name, parent is the value returned by parent resolvers like Query.movie args: this is the arguments passed by client operations. In our example query, Query.movie resolver would receive { id: \"1\" } as args context: An object passed through the resolver chain. It is useful for passing information between resolvers, such as authentication information, database connection, etc. info: An object containing information about the operation, such as operation AST, path to the resolver, etc. We must return a value that can be handled by the scalars. In our example: Movie.id and Actor.id resolvers must return a non-nullable value that can be coerced into the ID scalar i.e. string or number values. Movie.name and Actor.stageName resolver must return a non-nullable value that can be coerced into the String scalar i.e. string, boolean or number values. You can learn about GraphQL Scalar, including native Scalar and coercion concept, in this guide here It is important to remember that we will encounter runtime errors if the resolver returns unexpected values. Some common scenarios are: a resolver returns null to a non-nullable field a resolver returns a value that cannot be coerced into the expected scalar type a resolver returns a non-array value to an array field, such as Movie.actors How to Implement Resolvers Implementing Resolvers - Or Not If an empty resolver map is provided to the GraphQL server, the server still tries to handle incoming requests. However, it will return null for every root-level field in the schema. This means if a root-level field like Query.movie's return type is non-nullable, we will encounter runtime error. If object type resolvers are omitted, the server will try to return the property of the same name from parent. Here's what Movie resolvers may look like if they are omitted: const resolvers = { Movie: {}, // 👈 Empty `Movie` resolvers object, Movie: undefined, // 👈 or undefined/omitted `Movie` resolvers object... // 👇 ...are the equivalent of the following `Movie` resolvers: Movie: { id: parent => parent.id, name: parent => parent.name, actors: parent => parent.actors } } This means if Query.movie resolver returns an object with id, name, and actors properties, we can omit the Movie and Actor resolvers: const resolvers = { Query: { movie: () => { return { id: '1', name: 'Harry Potter and the Half-Blood Prince', actors: [ { id: '1', stageName: 'Daniel Radcliffe' }, { id: '2', stageName: 'Emma Watson' }, { id: '3', stageName: 'Rupert Grint' } ] } } } // 💡 `Movie` and `Actor` resolvers are omitted here but it still works, // Thanks to default resolvers! } In this very simple example where we are returning static values, this will work. However, in a real-world scenario where we may fetch data from a database or an external API, we must consider the response data shape, and the app performance. We will try to simlulate a real-world scenario in the next section. Implementing Resolvers for Real-World Scenarios Below is an object this can be used as an in-memory database: const database = { movies: { // Movies table '1': { id: '1', movieName: 'Harry Potter and the Half-Blood Prince' } }, actors: { // Actors table '1': { id: '1', stageName: 'Daniel Radcliffe' }, '2': { id: '2', stageName: 'Emma Watson' }, '3': { id: '3', stageName: 'Rupert Grint' } }, movies_actors: { // Table containing movie-actor relationship '1': { // Movie ID actorIds: ['1', '2', '3'] } } } We usually pass database connection through context, so we might update Query.movie to look like this: const resolvers = { Query: { movie: (_, { id }, { database }) => { const movie = database.movies[id] // 🔄 Database access counter: (1) if (!movie) { return null } return { id: movie.id, name: movie.movieName, actors: (database.movies_actors[id] || []).actorIds // 🔄 (2) .map(actorId => { return database.actors[actorId] // 🔄 (3), 🔄 (4), 🔄 (5) }) } } } } This works, however, there are a few issues: We are accessing the database 5 times every time Query.movie runs (Counted using 🔄 emoji in the previous code snippet). Even if the client may not request for actors field, this still happens. So, we are making unnecessary database calls. This is called eager resolve. We are mapping movie.movieName in the return statement. This is fine here, but our schema may scale to have multiple fields returning Movie, and we may have to repeat the same mapping logic in multiple resolvers. To improve this implementation, we can use mappers and defer resolve to avoid unnecessary database calls and reduce code duplication: type MovieMapper = { // 1. id: string movieName: string } type ActorMapper = string // 2. const resolvers = { Query: { movie: (_, { id }, { database }): MovieMapper => { const movie = database.movies[id] if (!movie) { return null } return movie // 3. } }, Movie: { name: (parent: MovieMapper) => parent.movieName, // 4. actors: (parent: MovieMapper, _, { database }): ActorMapper[] => database.movies_actors[parent.id].actorIds // 5. // 6. }, Actor: { id: (parent: ActorMapper) => parent, // 7. stageName: (parent: ActorMapper, _, { database }) => database.actors[parent].stageName // 8. } } We define a MovieMapper type to represent the shape of the object returned by Query.movie resolver. Similarly, we define ActorMapper to be returned wherever Actor type is expected. Note that in this example, ActorMapper is a string representing the ID of an actor in this case, instead of an object. The MovieMapper is returned by Query.movie resolver, and it becomes the parent of Movie resolvers in (4) and (5). Since MovieMapper has movieName property, but the GraphQL type expects String scalar for name instead. So, we need to return the mapper's movieName to the schema's Movie.name field. MovieMapper doesn't have actors property, so we must find all the related actors from the database. Here, we expect an array of ActorMapper (i.e. an array of string) to be returned, which is the actorIds array in the database. This just means the parent of each Actor resolver is a string in (7) and (8) We can skip implementing Movie.id resolver because by default it passes MovieMapper.id property safely. Because each ActorMapper is the ID of an actor, we return the parent instead of parent.id Similarly, we use parent as the ID of the actor to fetch the actor's stageName from the database. By using mappers and defer resolve techniques, we avoid unnecessary database calls and reduce code duplication. The next time we need to write a resolver that returns Movie, Actor objects, we can simply return the corresponding mapper objects. Implementing Resolvers with Mappers and Defer Resolve Best Practices We saw the benefits of using mappers and defer resolve in the previous section. Here are some TypeScript best practices to keep in mind when implementing these techniques, failing to enforce them may result in runtime errors: Mappers MUST be correctly typed as the return type of a resolver and the parent type of the next resolver. Object resolvers MUST be implemented if the expected schema field does not exist in the mapper or, the mapper's field cannot be coerced into the expected schema type of the same name. At a small scale, it is easy to keep track of the types and mappers. However, as our schema grows, it becomes harder to maintain the typing and remembering which resolvers to implement. This is where tools like GraphQL Code Generator and Server Preset can be used: GraphQL Code Generator: generates TypeScript types for the resolvers, focusing on correct nullability, array and types. Server Preset: generates and wires up resolvers conveniently, and runs analysis to suggests resolvers that require implementation, reducing the risk of runtime errors. To get started, install the required packages: ```sh npm2yarn npm i -D @graphql-codegen/cli @eddeee888/gcg-typescript-resolver-files Next, create a `codegen.ts` file at the root of your project: ```ts filename=\"codegen.ts\" import { defineConfig } from '@eddeee888/gcg-typescript-resolver-files' import type { CodegenConfig } from '@graphql-codegen/cli' const config: CodegenConfig = { schema: 'src/graphql/schema.graphql', generates: { 'src/graphql': defineConfig({ resolverGeneration: 'minimal' }) } } export default config Then, add mappers into schema.mappers.ts file, in the same directory as schema.graphql: ```ts filename=\"src/graphql/schema.mappers.ts\" type MovieMapper = { id: string movieName: string } type ActorMapper = string <Callout type=\"info\" emoji=\"💡\"> Server Preset automatically detects and wires up mappers if they follow the convention: 1. The mappers are declared in a file in the same directory as the schema source file, and has the file name ending with `.mappers.ts` segment instead of the schema source file's extension. For example: * If your schema file is `schema.graphql`, the mappers file is `schema.mappers.ts`. * If your schema file is `schema.graphql.ts`, the mappers file is `schema.graphql.mappers.ts`. 2. The mapper type names are in the format of `<TypeName>Mapper` where `<TypeName>` is the GraphQL schema name. For example: * If the schema type is `Movie`, then the mapper type is `MovieMapper`. </Callout> Finally, run codegen to generate resolvers: ```sh npm2yarn npm run graphql-codegen We will see generated resolver files in src/graphql directory: ```ts filename=\"src/graphql/resolvers/Query/movie.ts\" import type { QueryResolvers } from './../../types.generated' export const movie: NonNullable = async (_parent, _arg, _ctx) => { /* Implement Query.movie resolver logic here */ } ```ts filename=\"src/graphql/resolvers/Movie.ts\" import type { MovieResolvers } from './../types.generated' export const Movie: MovieResolvers = { /* Implement Movie resolver logic here */ actors: async (_parent, _arg, _ctx) => { /* Movie.actors resolver is required because Movie.actors exists but MovieMapper.actors does not */ }, name: async (_parent, _arg, _ctx) => { /* Movie.name resolver is required because Movie.name exists but MovieMapper.name does not */ } } ```ts filename=\"src/graphql/resolvers/Actor.ts\" import type { ActorResolvers } from './../types.generated' export const Actor: ActorResolvers = { /* Implement Actor resolver logic here / id: async (_parent, _arg, _ctx) => { / Actor.id resolver is required because Actor.id exists but ActorMapper.id does not / }, stageName: async (_parent, _arg, _ctx) => { / Actor.stageName resolver is required because Actor.stageName exists but ActorMapper.stageName does not */ } } By providing mappers, codegen is smart enough to understand that we want to defer resolve, and we need to write logic for `Movie.actors`, `Movie.name`, `Actor.id` and `Actor.stageName` resolvers to ensure we don't encounter runtime errors. <Callout type=\"info\" emoji=\"💡\"> Learn how to set up GraphQL Code Generator and Server Preset for GraphQL Yoga and Apollo Server in this guide [here](https://the-guild.dev/graphql/codegen/docs/guides/graphql-server-apollo-yoga-with-server-preset). </Callout> ## Summary In this article, we have explored how resolvers work in a GraphQL server resolver code flow and **resolver chain**, and how to write resolvers effectively using **mappers** and **defer resolve** techniques. Finally, we add GraphQL Code Generator and Server Preset to automatically generate resolvers and their types to ensure strong type-safety and reduce runtime errors. Heroku *refer* Top comments (0) * * Stellar Development Foundation Promoted * A brief tutorial on creating on setting up your local environment for Rust development Follow our step-by-step guide to develop smart contracts on Soroban. Start Building Read next How to Build a Telegram Bot in 5 Simple Steps Esther - Oct 14 10 Things I Wish I Knew When I Started with React Mourya Vamsi Modugula - Oct 3 \"Module vs Main: The Modern Hero vs The Vintage Legend of package.json!\" Ramesh - Oct 13 Stop Writing Logs into Files Rishi Kumar - Sep 9 The Guild Follow More from The Guild The Guild acquires Stellate #graphql #company Introducing GraphQL Mesh v1 and Hive Gateway v1 #graphql #mesh #graphqlhive Audit of GraphQL Gateways Supporting Apollo Federation #graphql Hazelcast Promoted * Realize your real-time potential with Hazelcast. Accelerate app development and deployment for real-time and AI-driven applications. Learn more 👋 ** * ",
    "url": "https://dev.to/the-guild/how-to-write-graphql-resolvers-effectively-4031"
  },
  {
    "body": "* Follow Report Abuse TheGuildBot 404 bio not found Joined on Jul 22, 2021 More info about @theguild_ Badges Three * three years. Got it * T*. ** Organizations The Guild 147 posts *owed How to write *ment 9 min read The Guild acquires Stellate * for The Guild Sep 10 The Guild acquires Stellate #graphql #company * Introducing GraphQL Mesh v1 and Hive Gateway v1 * for The Guild Sep 10 Introducing GraphQL Mesh v1 and Hive Gateway v1 #graphql #mesh #graphqlhive * Audit of GraphQL Gateways Supporting Apollo Federation * for The Guild Sep 10 Audit of GraphQL Gateways Supporting Apollo Federation #graphql * Building Type-Safe Random GIF Generator with feTS * for The Guild May 2 Building Type-Safe Random GIF Generator with feTS #fets Add Comment 3 min read GraphQL Request Cancellation in JavaScript * for The Guild Apr 29 GraphQL Request Cancellation in JavaScript #graphql #javascript #typescript Add Comment 7 min read The Guild - Rebranding in open source * for The Guild Feb 24 The Guild - Rebranding in open source #opensource #branding #marketing Add Comment 6 min read Announcing Accounts.js 1.0 Release Candidate * for The Guild Jan 8 Announcing Accounts.js 1.0 Release Candidate #accountsjs #graphqlmodules #graphql Add Comment 8 min read Building Open Source GraphQL Security * for The Guild Dec 7 '23 Building Open Source GraphQL Security #graphql Add Comment 9 min read Open Source composition and validation library for Apollo Federation * for The Guild Oct 10 '23 Open Source composition and validation library for Apollo Federation #graphql Add Comment 4 min read GraphQLConf 2023 Recap * for The Guild Sep 26 '23 GraphQLConf 2023 Recap #graphql Add Comment 8 min read Hive Summer Update 2023 * for The Guild Jul 20 '23 Hive Summer Update 2023 #* 3 min read The complete GraphQL Scalar Guide * for The Guild Jun 27 '23 The complete GraphQL Scalar Guide #graphql #scalars #codegen #node * How Much Are GitHub Stars Worth to You? * for The Guild Jun 1 '23 How Much Are GitHub Stars Worth to You? #opensource Add Comment 7 min read Build a GraphQL server running on Cloudflare Workers. * for The Guild May 30 '23 Build a GraphQL server running on Cloudflare Workers. #graphql #node #typescript #yoga * Using @defer Directive with GraphQL Code Generator * for The Guild May 24 '23 Using @defer Directive with GraphQL Code Generator #graphql #codegen Ad* Schema Policy in Hive * for The Guild May 16 '23 Introducing Schema Policy in Hive #graphql #hive Add Comment 3 min read Consume OpenAPI in TypeScript Without Code Generation * for The Guild May 8 '23 Consume OpenAPI in TypeScript Without Code Generation #openapi #* Optimize your Bundle Size with SWC and *G*pr 18 '23 Optimize your Bundle Size with SWC and GraphQL Codegen #clientpreset #* GraphQL over Internet * for The Guild Apr 6 '23 GraphQL over Internet #graphql #http #ws #sse Add Comment 8 min read Announcing GraphQL Network Inspector * for The Guild Feb 22 '23 Announcing GraphQL Network Inspector #graphql #graphqlnetworkinspector Add Comment 2 min read GraphQL Cursor Pagination with PostgreSQL * for The Guild Feb 15 '23 GraphQL Cursor Pagination with PostgreSQL #graphql #sql #postgres Add Comment 8 min read GraphQL Hive - Improvements in Schema Registry * for The Guild Feb 7 '23 GraphQL Hive - Improvements in Schema Registry #* 2 min read How we shipped CDN access tokens with Cloudflare Workers and R2 * for The Guild Feb 1 '23 How we shipped CDN access tokens with Cloudflare Workers and R2 #graphqlhive #javascript #cloudflare #whatwg Add Comment 10 min read On-Demand Shared GraphQL Subscriptions with RxJS * for The Guild Jan 27 '23 On-Demand Shared GraphQL Subscriptions with RxJS #graphql #subscriptions #typescript #rxjs Add Comment 12 min read Flutter GraphQL | The Guild * for The Guild Jan 25 '23 Flutter GraphQL | The Guild #graphql #deepdive #flutter * Scalable APIs with GraphQL Server Codegen Preset * for The Guild Jan 24 '23 Scalable APIs with GraphQL Server Codegen Preset #* * Nextra 2 – Next.js Static Site Generator * for The Guild Jan 23 '23 Nextra 2 – Next.js Static Site Generator #nextra #nextjs #react 5 react*d realtime GraphQL backends with Grafbase * for The Guild Jan 17 '23 Build realtime GraphQL backends with Grafbase #graphql #realtime #livequery * GraphQL-ESLint v3.14 - What's New? * for The Guild Dec 29 '22 GraphQL-ESLint v3.14 - What's New? #graphql #eslint #linter 2 * GraphQXL - The Missing GraphQL Language Extension? * for The Guild Dec 12 '22 GraphQXL - The Missing GraphQL Language Extension? #graphql 5 *d GraphQL Yoga NestJS integration now supports NestJS v9 and Yoga v3 * for The Guild Dec 7 '22 GraphQL Yoga NestJS integration now supports NestJS v9 and Yoga v3 #graphql #node #typescript #yoga Add Comment 1 min read Announcing GraphQL Yoga v3 * for The Guild Nov 17 '22 Announcing GraphQL Yoga v3 #graphql #node #typescript #yoga 4 * Announcing free SSO (Single Sign On) for GraphQL Hive * for The Guild Nov 7 '22 Announcing free SSO (Single Sign On) for GraphQL Hive #graphql #graphqlhive 2 *d How ClickHouse helps us track billions of GraphQL requests monthly * for The Guild Nov 3 '22 How ClickHouse helps us track billions of GraphQL requests monthly #graphql #graphqlhive 2 * Getting the Best of TypeScript and GraphQL: Union Types * for The Guild Oct 18 '22 Getting the Best of TypeScript and GraphQL: Union Type*n 5 react*ding Slack Bot with Cloudflare Workers * for The Guild Oct 12 '22 Building Slack Bot with Cloudflare Workers #graphql #codegen * Announcing self-hosted GraphQL Hive * for The Guild Oct 5 '22 Announcing self-hosted GraphQL Hive #* 2 min read Unleash the power of Fragments with *Guild* Unleash the power of Fragments with GraphQL Codegen #graphql #codegen #react #typescript Add Comment 6 min read Improved Security with GraphQL Armor support for Yoga Server 2 * for The Guild Aug 30 '22 Improved Security with GraphQL Armor support for Yoga Server 2 #graphql #graphqltools #security Add Comment 3 min read Bringing the best GraphQL experience to Svelte * for The Guild Aug 30 '22 Bringing the best GraphQL experience to Svelte #graphql #svelte Add Comment 4 min read GraphQL Response Caching with Envelop * for The Guild Aug 30 '22 GraphQL Response Caching with Envelop #graphql Add Comment 7 min read JavaScript runs everywhere, so should your servers - here is how * for The Guild Aug 30 '22 JavaScript runs everywhere, so should your servers - here is how #fetch #whatwg #node #graphql * Building GraphQL Servers in 2022 * for The Guild Aug 30 '22 Building GraphQL Servers in 2022 #graphql #conference #yoga * Announcing GraphQL Yoga 2.0! * for The Guild Aug 30 '22 Announcing GraphQL Yoga 2.0! #server #envelop #node #graphql * Announcing GraphQL Hive, the complete GraphQL API manager * for The Guild Aug 30 '22 Announcing GraphQL Hive, the complete GraphQL API manager #* 5 min read Announcing GraphQL Yoga 2.0! * for The Guild Mar 29 '22 Announcing GraphQL Yoga 2.0! #server #envelop #node #graphql 10 * GraphQL error handling to the max with Typescript, codegen and fp-ts * for The Guild Mar 7 '22 GraphQL error handling to the max with Typescript, codegen and fp-t*n #fpts 10 reactions Add Comment 16 min read How not to learn GraphQL * for The Guild Feb 14 '22 How not to learn GraphQL #graphql 9 reactions 1 comment 13 min read The Anatomy of a GraphQL Request * for The Guild Jan 30 '22 The Anatomy of a GraphQL Request #graphql 5 * Caching data with DataLoader * for The Guild Jan 26 '22 Caching data with DataLoader #cache #data #server #graphql 5 * GraphQL Code Generator with TypeScript and Prisma models * for The Guild Dec 20 '21 GraphQL Code Generator with TypeScript and Prisma model*n #prisma 10 * GraphQL AuthZ - GraphQL Authorization layer * for The Guild Dec 20 '21 GraphQL AuthZ - GraphQL Authorization layer #graphql #authorization #graphqlauthz 10 * GraphQL Authentication with Envelop and Auth0 * for The Guild Dec 20 '21 GraphQL Authentication with Envelop and Auth0 #graphql #authentication #envelop 7 * GraphQL over SSE (Server-Sent Events) * for The Guild Sep 1 '21 GraphQL over SSE (Server-Sent Events) #graphql #graphqlsubscriptions 7 * GraphQL Response Caching with Envelop * for The Guild Aug 19 '21 GraphQL Response Caching with Envelop #graphql 5 * What does it take to support Node.js ESM? * for The Guild Aug 12 '21 What does it take to support Node.js ESM? #node #mjs #esm #typescript 5 * What's new in GraphQL-Codegen v2? * for The Guild Aug 5 '21 What's new in GraphQL-Codegen v2? #graphql #codegen #typescript 5 * SwiftGraphQL - A GraphQL client for Swift lovers. * for The Guild Aug 2 '21 SwiftGraphQL - A GraphQL client for Swift lovers. #graphql #swift #client #swiftgraphql 9 * Introducing Envelop - The GraphQL Plugin System * for The Guild Jul 29 '21 Introducing Envelop - The GraphQL Plugin System #graphql #server #node #plugins 11 reactions Add Comment 11 *onsor Neon * ",
    "url": "https://dev.to/theguild_"
  },
  {
    "body": "* 224 Add reaction 176 Like 48 *s 0 Fire 33 Jump to Comments 271 * Dan Vega Posted on Feb 12, 2019 • Updated on May 8, 2019 • Originally published at danvega.me 176 48 npm Create Package JSon Creating your first npm package #node #npm #javascript This weekend I started working on my first ever npm package. I can't believe for how long I have been writing code that I never bothered to create my own npm package but here we are. I built my newest site using Gridsome and markdown and you can read all about that here. In the markdown files, I wanted an easy way to insert a twitter status and embed the tweet. I will tell you more about that Gridsome plugin in a future blog post but for now, I want to show you how you can create your very first npm package. I learned a few things while working on this and I would like to share them with you. Prerequisites I am going to assume you at least know what node & npm is and have written JavaScript before. If you don't know either of these and want me to write something up on getting started with those please let me know. There are a few things that you're going to need before we dive in and start writing some code. Visual Studio Code or your favorite editor Node & NPM NPM Account Creating your npm package The first thing you are going to do is create a new folder to hold your npm package. For this example, I am going to create a new directory called wrap-with-poo. Yes, you read that correctly. Go into that folder and type the following: npm init This will ask you a bunch of questions and then create a package.json. If you don't know answers to certain questions just yet don't worry, you can come back and answer them later. This utility will walk you through creating a package.json file. It only covers the most common items and tries to guess sensible defaults. See `npm help json` for definitive documentation on these fields and exactly what they do. Use `npm install <pkg>` afterward to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: (wrap-with-poop) version: (0.1.0) 0.1.0 description: This package will take any string you give it and wrap it with the poop emjoi entry point: (index.js) test command: git repository: keywords: node,npm author: Dan Vega license: (ISC) MIT About to write to /Users/vega/dev/npm/wrap-with-poop/package.json: { \"name\": \"wrap-with-poop\", \"version\": \"0.1.0\", \"description\": \"This package will take any string you give it and wrap it with the poop emjoi\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\": [ \"node\", \"npm\" ], \"author\": \"Dan Vega\", \"license\": \"MIT\" } Is this OK? (yes) yes Writing your plugin Next open this project up in Visual Studio Code and create index.js. The reason you're creating this file is that in your package.json you said that this was your entry point. In your index.js add the following code: module.exports = (str) => { return `💩${str}💩`; } The module.exports object allows us to organize some related code and then expose it as a module. This means that when we are done we could import this module into another application. In this case, we are assigning an arrow function which means we are exposing a single function that takes an argument called str and returns that string wrapped with the poo emoji. That is all you need to do with this project. It is a pretty simple package but it will help walk through a few things. npm local development Now that you have our package ready to go you need to test it in another project. In the real world, you should be writing some unit tests against it but I want to save that for another article & screencast. Next, create a new directory (outside of your package) called wrap-with-poo-testing. You will again need to run npm init but this time you can add the -y argument to skip all of the questions, they are less important this time. npm init -y Wrote to /Users/vega/dev/npm/wrap-with-poo/package.json: { \"name\": \"wrap-with-poop\", \"version\": \"0.1.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\" } NPM Install In this project create a new file called app.js. This is where you are going to use your new wrap-with-poo package. This is normally where you would normally install the npm package you needed by running the following command. npm install wrap-with-poo The problem with this is that you haven't published your new plugin yet so it isn't in npm. You need a way to reference the package locally while you're developing it. You could run npm install with the absolute path to the package. npm install /Users/vega/dev/npm/wrap-with-poo Which would update your package.json to look like this { \"name\": \"npm\", \"version\": \"0.1.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"wrap-with-poo\": \"file:../wrap-with-poo\" } } If you need to test out pre-install/post-install hooks in your package then you will want to use this approach. If you don't care about the best way to develop NPM projects locally is by using npm link. NPM Link npm link is a process that allows you to create a symbolic link between your project and the dependency. First, you need to move into the directory wrap-with-poo and run the following command. npm link This will take your package and create a symbolic link in the npm global folder to it. /Users/vega/.nvm/versions/node/v10.15.0/lib/node_modules/wrap-with-poo -> /Users/vega/dev/npm/wrap-with-poo This means that your project can be used in any project with one more simple step. The next thing you need to do is to move into the project wrap-with-poo-testing and run the following command. npm link wrap-with-poo This will output the following: /Users/vega/dev/npm/wrap-with-poo-testing/node_modules/wrap-with-poo -> /Users/vega/.nvm/versions/node/v10.15.0/lib/node_modules/wra p-with-poo -> /Users/vega/dev/npm/wrap-with-poo That is all there is to it, no need to install the dependency. You are ready to begin writing some code to play with you new plugin. Open up the app.js and add the following code. const poo = require('wrap-with-poo'); const boring = 'This is a boring string'; const fun = poo(boring); console.log(fun); And run the following command from the integrated terminal node app.js And you will get the following output 💩This is a boring string💩 Publish Source Code Now that we know our project works its time to make it public for everyone to use. If you haven't done so yet I would add your project to Github or whatever source code hosting you prefer. git init git add . git commit -m \"Initial commit\" git remote add origin https://github.com/cfaddict/wrap-with-poo.git git push -u origin master Now that it is on Github go back and add an entry to your package.json so everyone knows where to find the source code using the homepage key. { \"name\": \"wrap-with-poo\", \"version\": \"0.1.0\", \"description\": \"This package will wrap any string you give it with the poop emoji\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\": [ \"node\", \"npm\", \"poop\" ], \"author\": \"Dan Vega\", \"license\": \"MIT\", \"homepage\": \"https://github.com/cfaddict/wrap-with-poo\" } Publishing NPM Package It is now time to publish our project to npm so that anyone can use it. If this is your first time publishing a package open up a terminal in the wrap-with-poo directory and type the following command. npm adduser This will ask you for your npm account information such as username, password, and email. vega wrap-with-poo (master) $ npm adduser Username: therealdanvega Password: Email: (this IS public) danvega@gmail.com Logged in as therealdanvega on https://registry.npmjs.org/. Now you're ready to publish but there are a couple of things you need to remember. First every npm package must have a unique name. I would head over to npm and do a quick search for your package. I have already published the package wrap-with-poo so yours will need a new unique name. The next thing you need to know is that your version number matters. I start with 0.0.1 and work my way up from there. Once you publish a specific version you can't publish the same version again. It is a good idea to build a number of features into a version and then publish that. If you run npm version It will tell you what your current version is. { 'wrap-with-poo': '0.1.0', npm: '6.7.0', ares: '1.15.0', cldr: '33.1', http_parser: '2.8.0', icu: '62.1', modules: '64', napi: '3', nghttp2: '1.34.0', node: '10.15.0', openssl: '1.1.0j', tz: '2018e', unicode: '11.0', uv: '1.23.2', v8: '6.8.275.32-node.45', zlib: '1.2.11' } If everything looks good you can publish your new project by running npm publish This might take a few seconds but if everything went ok your package should now be live on npm. Congrats on publishing your first npm package!!! Now you can go into any project that already has a package.json and type the following npm install wrap-with-poo And use it just like we did in our testing example above. Documentation I know some people say that you should create documentation from the beginning but I am not always sure what my code is going to end up looking like so I usually wait on this. Create a README.md in the root of your project and add some information about your project. What does your npm package do? Why did you create it. How do you install it? Are there any configuration options? Conclusion As I said at the beginning of this article I can't believe I published my first npm package this weekend. I just never really had a need to do so until now but I was really excited to learn how easy it was. If this is your first npm package please leave me some comments or tweet at me when yours is live! Happy Coding! Dan This article was first posted on my blog at https://www.danvega.dev/blog. If you found this article interesting please consider subscribing to my newsletter or following me on Twitter. *et up your Developer Sandbox Deploy a full-stack Javascript application with the Developer Sandbox for Red Hat OpenShift. Get started Top comments (33) * Sung M. Kim Sung M. Kim Sung M. Kim Follow Exploring the world of TypeScript, React & Node Location NYC - the Big 🍎 Education SUNY Stony Brook Joined Aug 5, 2017 • *buse This is an article I wish I had read before struggling so long to publish an NPM package 👍 11 likes Like Reply Dan Vega Dan Vega *. Email danvega@gmail.com * • *buse Aww thank you for the kind words :) 5 likes Like Reply Jake Varness Jake Varness Jake Varness Follow Staff Software Engineer at Storable, husband, father, nerd Education Eastern Washington University, BS in Computer Science Work Staff Software Engineer at Storable Joined Nov 12, 2017 • *buse Totes gonna use wrap-with-poo in my next package. 9 likes Like Reply Juan F Gonzalez Juan F Gonzalez Juan F Gonzalez Follow Frontend dev. Online writer. Lifelong learner. Sharing practical knowledge. Education Computer science & software engineering Work Freelance writer & web developer Joined Jun 1, 2018 • Feb 13 '* As always you bringing in the real value Dan, thanks a lot for this! Been wanting to do this for quite some time but it seemed so daunting 6 likes Like Reply Dan Vega Dan Vega *. Email danvega@gmail.com * • Feb 13 '19 * are too kind Juan. Thank you, my friend :) It does seem pretty overwhelming until you realize it isn't :) 2 likes Like Reply GifCo GifCo GifCo Follow It's me Location Toronto Canada Pronouns King/The King Work Web dev, 3D Joined Feb 12, 2019 • *buse Ok this is great and all but it's 2019 and your example would be most suitable for front end use so why would you NOT even mention that thia should be published as an ESM not common.js. or ideally both. 3 likes Like Reply Dan Vega Dan Vega *. Email danvega@gmail.com * • *buse Great questions. I just thought this was a good starting point. It's hard to talk about something new and not include everything the reader might need. I thought I would keep this simple and stick to the basics but I do appreciate your feedback. Thank you, Giff. 6 likes Like Reply Chinmay Joshi Chinmay Joshi Chinmay Joshi Follow Focusing. Email chinmayj93@gmail.com Location San Francisco Bay Area Education MS - User Experience and Interaction Design Work Person wearing many hats at LevelOps Joined Nov 13, 2017 • Feb 13 '* Timing of your blog couldn't be better. I'm struggling with some problems, and going to refer this to solve the issues. Thanks!!! 5 likes Like Reply Dan Vega Dan Vega *. Email danvega@gmail.com * • Feb 13 '19 * to hear. Let me know if you run into any issues, I am always looking for something to write about. 4 likes Like Reply Mert Simsek Mert Simsek Mert Simsek Follow #gnu/linux #symfony #googlecloud #docker Joined Aug 9, 2018 • Feb 12 '19 • Edited on Feb 12 • * Thank you for article, that's a spirit :) 4 likes Like Reply Feralamillo Feralamillo Feralamillo Follow Fintech RocknRolla Location Brighton Work Frontend Developer at Benchmark Capital Joined Feb 25, 2019 • Oct 14 '19 * tutorial!! I followed and have my first npm package live: npmjs.com/package/check-osaurus thank you very much for the tips. I wonder if there is a better way to connect directly from github instead of having to do it manually. 1 like Like Reply Apol0x Apol0x Apol0x Follow Front-end Developer in love with ReactJS library and all about Javascript. Always learning with humbly but with strength. Location Seville Work Frontend developer at consulting company Joined Nov 4, 2018 • Feb 13 '19 Copy * so much for the post,I thought a lot of times inform myself about this, and you explain it very clear 2 likes Like Reply Dan Vega Dan Vega *. Email danvega@gmail.com * • Feb 13 '19 Copy * :) 1 like Like Reply Craig Wayne Craig Wayne Craig Wayne Follow Joined Jul 2, 2019 • Sep 9 '19 Copy * Dan! Been meaning to actually start packaging our angular components into independent npm packages. Didn't know where to start! So thank you so much for this 🥳 2 likes Like Reply Anton Reshetov Anton Reshetov Anton Reshetov Follow I'am a self taught frontend developer who started his journey into the world of JS at 30, creator of massCode & MySigMail. Education Self taught Joined Nov 23, 2018 • *buse It is very strange to start with version 0.0.1, that is, with fix bug 1 like Like Reply Dan Vega Dan Vega *. Email danvega@gmail.com * • *buse Why is it strange? I am saying that this is the very first release of my plugin. It has some work to do before I consider it a stable 1.0 release. 2 likes Like Reply Anton Reshetov Anton Reshetov Anton Reshetov Follow I'am a self taught frontend developer who started his journey into the world of JS at 30, creator of massCode & MySigMail. Education Self taught Joined Nov 23, 2018 • *buse Because it is incorrect to start versioning from the version which is intended for a fix of any bug semver.org/#how-should-i-deal-with... 3 likes Like Thread Dan Vega Dan Vega *. Email danvega@gmail.com * • *buse Oh, I thought it was at 0.1.0. Yes, I would agree with that. Will update, thank you! 2 *ion (33 comments) * Sentry *r* You Should Be Shipping a Manifest with Your Web Components Burton Smith - Nov 7 Understanding “Failed to Fetch” JavaScript Errors and How to Fix Them Todd H. Gardner - Oct 22 Software Engineering Postmortem: Real-time Chat Microservice Victoria - Oct 18 Angular 19 - 5 Game-Changing Features You Need to Know Ingila Ejaz - Nov 6 *. * More from Dan Vega Lessons learned from redesigning my website #css #javascript #vue #webdev Vue 3: Smaller, Faster & Stronger. #vue #javascript #webdev Triggering events from Vue Router views #vue #javascript #webdev #tutorial * * * * ",
    "url": "https://dev.to/therealdanvega/creating-your-first-npm-package-2ehf"
  },
  {
    "body": "* 511 Add reaction 462 Like 11 Unicorn 10 Exploding Head 15 Raised Hands 13 Fire 39 Jump to Comments 575 * USMAN AWAN Posted on Oct 5 462 11 10 15 13 10 JavaScript concepts every Node developer must master #javascript #node #webdev #programming Node.js has quickly become a standard for building web apps and systems software, thanks to its ability to leverage JavaScript on the back end. Popular frameworks like Express and tools like Webpack contribute to its widespread use. Although competitors like Deno and Bun exist, Node remains the leading server-side JavaScript platform. JavaScript's multiparadigm nature allows for various programming styles, but it also poses risks like scope and object mutation. The lack of tail-call optimization makes large recursive iterations dangerous, and Node’s single-threaded architecture requires asynchronous code for efficiency. Despite its challenges, following key concepts and best practices in JavaScript can help Node.js developers write scalable and efficient code. 1. JavaScript closures A closure in JavaScript is an inner function that has access to its outer function’s scope, even after the outer function has returned control. A closure makes the variables of the inner function private. Functional programming has exploded in popularity, making closures an essential part of the Node developer’s kit. Here’s a simple example of a closure in JavaScript: The variable count is assigned an outer function. The outer function runs only once, which sets the counter to zero and returns an inner function. The _counter variable can be accessed only by the inner function, which makes it behave like a private variable. The example here is a higher-order function (or metafunction, a function that takes or returns another function). Closures are found in many other applications. A closure happens anytime you define a function inside another function and the inner function gets both its own scope and access to the parent scope—that is, the inner function can “see” the outer variables, but not vice versa. This also comes in handy with functional methods like map(innerFunction), where innerFunction can make use of variables defined in the outer scope. 2. JavaScript prototypes Every JavaScript function has a prototype property that is used to attach properties and methods. This property is not enumerable. It allows the developer to attach methods or member functions to its objects. JavaScript supports inheritance only through the prototype property. In case of an inherited object, the prototype property points to the object’s parent. A common approach to attach methods to a function is to use prototypes as shown here: Although modern JavaScript has pretty sophisticated class support, it still uses the prototype system under the hood. This is the source of much of the language’s flexibility. 3. Defining private properties using hash names In the olden days, the convention of prefixing variables with an underscore was used to indicate that a variable was supposed to be private. However, this was just a suggestion and not a platform-enforced restriction. Modern JavaScript offers hashtag private members and methods for classes: Private hash names is a newer and very welcome feature in JavaScript! Recent Node versions and browsers support it, and Chrome devtools lets you directly access private variables as a convenience. 4. Defining private properties using closures Another approach that you will sometimes see for getting around the lack of private properties in JavaScript’s prototype system is using a closure. Modern JavaScript lets you define private properties by using the hashtag prefix, as shown in the above example. However, this does not work for the JavaScript prototype system. Also, this is a trick you will often find in code and its important to understand what it is doing. Defining private properties using closures lets you simulate a private variable. The member functions that need access to private properties should be defined on the object itself. Here’s the syntax for making private properties using closures: 5. JavaScript modules Once upon a time, JavaScript had no module system, and developers devised a clever trick (called the module pattern) to rig up something that would work. As JavaScript evolved, it spawned not one but two module systems: the CommonJS include syntax and the ES6 require syntax. Node has traditionally used CommonJS, while browsers use ES6. However, recent versions of Node (in the last few years) have also supported ES6. The trend now is to use ES6 modules, and someday we’ll have just one module syntax to use across JavaScript. ES6 looks like so (where we export a default module and then import it): You’ll still see CommonJS, and you’ll sometimes need to use it to import a module. Here’s how it looks to export and then import a default module using CommonJS: 6. Error handling No matter what language or environment you are in, error handling is essential and unavoidable. Node is no exception. There are three basic ways you’ll deal with errors: try/catch blocks, throwing new errors, and on() handlers. Blocks with try/catch are the tried-and-true means for capturing errors when things go wrong: In this case, we log the error to the console with console.error. You could choose to throw the error, passing it up to the next handler. Note that this breaks code flow execution; that is, the current execution stops and the next error handler up the stack takes over: Modern JavaScript offers quite a few useful properties on its Error objects, including Error.stack for getting a look at the stack trace. In the above example, we are setting the Error.message property and Error.cause with the constructor arguments. Another place you’ll find errors is in asynchronous code blocks where you handle normal outcomes with .then(). In this case, you can use an on(‘error’) handler or onerror event, depending on how the promise returns the errors. Sometimes, the API will give you back an error object as a second return value with the normal value. (If you use await on the async call, you can wrap it in a try/catch to handle any errors.) Here’s a simple example of handling an asynchronous error: No matter what, don’t ever swallow errors! I won’t show that here because someone might copy and paste it. Basically, if you catch an error and then do nothing, your program will silently continue operating without any obvious indication that something went wrong. The logic will be broken and you’ll be left to ponder until you find your catch block with nothing in it. (Note, providing a finally{} block without a catch block will cause your errors to be swallowed.) 7. JavaScript currying Currying is a method of making functions more flexible. With a curried function, you can pass all of the arguments that the function is expecting and get the result, or you can pass only a subset of arguments and receive a function back that waits for the remainder of the arguments. Here’s a simple example of a curry: The original curried function can be called directly by passing each of the parameters in a separate set of parentheses, one after the other: This is an interesting technique that allows you to create function factories, where the outer functions let you partially configure the inner one. For example, you could also use the above curried function like so: In real-world usage, this idea can be a help when you need to create many functions that vary according to certain parameters. 8. JavaScript apply, call, and bind methods Although it’s not every day that we use them, it’s good to understand what the call, apply, and bind methods are. Here, we are dealing with some serious language flexibility. At heart, these methods allow you to specify what the this keyword resolves to. In all three functions, the first argument is always the this value, or context, that you want to give to the function. Of the three, call is the easiest. It’s the same as invoking a function while specifying its context. Here’s an example: Note that apply is nearly the same as call. The only difference is that you pass arguments as an array and not separately. Arrays are easier to manipulate in JavaScript, opening a larger number of possibilities for working with functions. Here’s an example using apply and call: The bind method allows you to pass arguments to a function without invoking it. A new function is returned with arguments bounded preceding any further arguments. Here’s an example: 9. JavaScript memoization Memoization is an optimization technique that speeds up function execution by storing results of expensive operations and returning the cached results when the same set of inputs occur again. JavaScript objects behave like associative arrays, making it easy to implement memoization in JavaScript. Here’s how to convert a recursive factorial function into a memoized factorial function: 10. JavaScript IIFE An immediately invoked function expression (IIFE) is a function that is executed as soon as it is created. It has no connection with any events or asynchronous execution. You can define an IIFE as shown here: The first pair of parentheses function(){...} converts the code inside the parentheses into an expression.The second pair of parentheses calls the function resulting from the expression. An IIFE can also be described as a self-invoking anonymous function. Its most common usage is to limit the scope of a variable made via var or to encapsulate context to avoid name collisions. There are also situations where you need to call a function using await, but you’re not inside an async function block. This happens sometimes in files that you want to be executable directly and also imported as a module. You can wrap such a function call in an IIFE block like so: 11. Useful argument features Although JavaScript doesn’t support method overloading (because it can handle arbitrary argument counts on functions), it does have several powerful facilities for dealing with arguments. For one, you can define a function or method with default values: You can also accept and handle all the arguments at once, so that you can handle any number of arguments passed in. This uses the rest operator to collect all the arguments into an array: If you really need to deal with differing argument configurations, you can always check them: Also, remember that JavaScript includes a built-in arguments array. Every function or method automatically gives you the arguments variable, holding all the arguments passed to the call. Conclusion As you become familiar with Node, you’ll notice there are many ways to solve almost every problem. The right approach isn’t always obvious. Sometimes, there are several valid approaches to a given situation. Knowing about the many options available helps. The 10 JavaScript concepts discussed here are basics every Node developer will benefit from knowing. But they’re the tip of the iceberg. JavaScript is a powerful and complex language. The more you use it, the more you will understand how vast JavaScript really is, and how much you can do with it. Coherence Promoted * The Next Generation Developer Platform Coherence is the first Platform-as-a-Service you can control. Unlike \"black-box\" platforms that are opinionated about the infra you can deploy, Coherence is powered by CNC, the open-source IaC framework, which offers limitless customization. Learn more Top comments (39) * Serhiy Serhiy Serhiy Follow I'm a PO/PdM/BA passionate about web development. Location Lviv, Ukraine Work PO/PdM/BA Joined Sep 21, 2020 • *e but why do you use var? 14 likes Like Reply WORMSS WORMSS WORMSS Follow Joined Mar 4, 2018 • *e I am guessing someone who likes the nasty habit of hoisting. I would put money on them not being fans of Typescript. I don't mind function hoisting, but I don't know of anyone who likes variable hoisting. Though, I find people who use let for absolutely everything to be strange also.. I use const for everything unless I absolutely HAVE to use a reassigning variable, which is maybe only 1% of the time at most. 7 likes Like Reply Jonathan DS Jonathan DS Jonathan DS Follow Joined Nov 18, 2019 • *e Is it hoisting or just global scope? 2 likes Like Thread WORMSS WORMSS WORMSS Follow Joined Mar 4, 2018 • *e Hoisting. Because if you are inside another scope (closure for example) it's no longer globally available. 2 likes Like Reply minoblue minoblue minoblue Follow Joined Aug 16, 2020 • Oct 14 • Edited on Oct 14 • * One usecase is when we want to access variable outside the block within the function. function example() { if (true) { var x = 10; // 'var' is function-scoped, not block-scoped let y = 20; // 'let' is block-scoped } console.log(x); // Accessing 'x' outside the 'if' block console.log(y); // ReferenceError: y is not defined } 1 like Like Reply Adnan Babakan (he/him) Adnan Babakan (he/him) Adnan Babakan (he/him) Follow I'm Adnan Babakan and I'm from Iran. I started programming since I was 8 and now I'm 24. I love programming! Email adnanbabakan.personal@hotmail.com Location Iran Work Full-stack Web Developer Joined Oct 2, 2019 • Oct 6 * points to remember in JS. I really enjoyed reading it. 9 likes Like Reply USMAN AWAN USMAN AWAN USMAN AWAN Follow I am a skilled Full Stack web developer with Front-end skills HTML, CSS, JavaScript, ReactJs, NextJs, Bootstrap, Tailwind CSS and Back-end skills NodeJs, ExpressJs, mongoDb, Docker, Vercel and JestJs. Email usmanaugust28@gmail.com Location Abbottabad, Pakistan Education * and Technology, Islamabad Work Front-end Developer at Octate. Joined Sep 23, *t abuse Thank you very much 😊 4 likes Like Reply Brad Brad Brad Follow Full-stack TypeScript developer, loves a challenge and learning new fun things! Location Los Angeles Work Software Engineer Joined Oct 25, 2018 • *e I gotta point it out. It seems like the code examples have inconsistent indentation? 🤔 5 likes Like Reply shield8994 shield8994 shield8994 Follow node.js pro Joined Sep 13, 2024 • *e Your article is well written. I am the operator of servbay. Can you promote our products? Our official website is servbay.com. If you are willing, we can give you some channel discounts. 3 likes Like Reply USMAN AWAN USMAN AWAN USMAN AWAN Follow I am a skilled Full Stack web developer with Front-end skills HTML, CSS, JavaScript, ReactJs, NextJs, Bootstrap, Tailwind CSS and Back-end skills NodeJs, ExpressJs, mongoDb, Docker, Vercel and JestJs. Email usmanaugust28@gmail.com Location Abbottabad, Pakistan Education * and Technology, Islamabad Work Front-end Developer at Octate. Joined Sep 23, 2024 • *e I would be an honour 😊😋 4 likes Like Reply shield8994 shield8994 shield8994 Follow node.js pro Joined Sep 13, 2024 • *e How can I contact you? Email? 2 likes Like Thread Abid Abid Abid Follow Full Stack Software Engineer Joined Oct 8, 2024 • *e Hi, is it not for windows users? I can not find any link for windows on your website. 1 like Like Reply Yurii Timofeev Yurii Timofeev Yurii Timofeev Follow Location Russia Work Senior Dev at IT Joined Dec 4, 2019 • Oct 8 * advice... for 2014 5 likes Like Reply Shahadat Hossain Shahadat Hossain Shahadat Hossain Follow Javascript, PHP Developer. Love coding, biking, and Gardening https://mshossain.me Location Dhaka, Bangladesh Work Full Stack Developer at Working as freelancer Joined Apr 10, 2019 • *e Javascript and Node becoming more popular among developers. it is not bind only for web applications; we are building more complex applications like IOT, machine learning, chatbots, ect. it is a really game changer for developer. 3 likes Like Reply Friday candour Friday candour Friday candour Follow I solve problems qualitatively. creator of all Uiedbook's packages https://github.com/Uiedbook . Email fridaycandours@gmail.com Education Computer science Pronouns He/him Work Developer Joined Jan 9, 2021 • *e It's for beginners 4 likes Like Reply WORMSS WORMSS WORMSS Follow Joined Mar 4, 2018 • *e Technically it's for 'everyone'. Beginners will be learning about it, and for advanced people, it's a checkbox exercise to say \"yep, I know these concepts\".. It's not like, once you are past the beginners stage, you can forget these concepts.. It's always good to remember that async/await is sugar for Promises/then, and class declarations is sugar for prototype. It's good to remember that these are what is happening under the hood. Even if you don't touch these old ways anymore. 8 likes Like Reply Marc Marc Marc Follow Full-stack developer for many (many) years. Team player. Experience in small, medium and large projects. Fields: Finance and insurance, content, industry. Father. Dog owner. Location Germany Joined Sep 22, 2017 • *e advanced beginners ;-) 5 likes Like Reply Tom Pereira Tom Pereira Tom Pereira Follow Location London, UK Work Software Engineer at ASOS Joined Jun 10, 2020 • *e Shouldn't: the CommonJS include syntax and the ES6 require syntax. ...read: the CommonJS require syntax and the ES6 include syntax. 3 likes Like Reply William Bernfield William Bernfield William Bernfield Follow Joined Jul 6, 2024 • *se Hello everyone, id live to get some help, Also how do you all feel about Quantum capabilities ? Early access 2 likes Like Reply almogzur almogzur almogzur Follow Information Technology Tire 2 admin Full stack web div . Js.Ts Education Pe. In Electronic Work Self employed Joined May 13, 2022 • *e Vary nice 3 likes Like Reply Robert Snedeker Robert Snedeker Robert Snedeker Follow I'm a website and discord bot developer. But I like creating other wacky things outside of just that with my coding ability. Email rsnedeker20@gmail.com Location Pennsylvania, United States Joined Jun 11, 2024 • Oct 7 * article! I recently discovered the # private property/method thing in JS. But now that I use TS it's not something I use, still cool to see that JS is getting more OOP features though. 4 *ion (39 comments) *. * Sentry *r* Linux Text Cutting: Mastering Text Manipulation in the Wizarding World Labby - Oct 26 Angular 19 - 5 Game-Changing Features You Need to Know Ingila Ejaz - Nov 6 Troubleshooting Common Issues of React Native Firebase- Cloud Messaging Virali Vasa - Oct 31 How to Use the Sui TypeScript SDK Ukeje Chukwuemeriwo Goodness - Oct 26 USMAN AWAN Follow I am a skilled Full Stack web developer with Front-end skills HTML, CSS, JavaScript, ReactJs, NextJs, Bootstrap, Tailwind CSS and Back-end skills NodeJs, ExpressJs, mongoDb, Docker, Vercel and JestJs. Location Abbottabad, Pakistan Education * and Technology, Islamabad Work Front-end Developer at Octate. Joined Sep 23, 2024 More from USMAN AWAN Express v5: What You Need to Know About Express v5 #javascript #node #webdev #programming Exploring REST and GraphQL APIs: Advantages, Challenges, and Use Cases #node #webdev #programming #api 10 Useful GitHub Repos Made for Front-End Developers in 2024 #javascript #opensource #webdev #programming Heroku *referenc* 👋 Kindness is contagious * * * ",
    "url": "https://dev.to/usman_awan/10-javascript-concepts-every-node-developer-must-master-2na"
  },
  {
    "body": "* Follow Report Abuse Uzoma Nwanne I am a web developer with interest in the MERN technology stack. Prior to migrating to the MERN stack, I had over six years of experience developing applications using PHP and Java. Calabar, Nigeia Joined on Oct 7, 2022 https://uzoma-portofolio.netlify.app/ Education University of Ibadan (MSc), Federal University of Technology, Owerri Work Application Developer @ FCIID More info about @uzomanwanne Badges Two * two years. Got it * * JavaScript, React, NodeJS, Git, Java, PHP, HTML, CSS/SASS, Zeplin, WordPress, MySQL, PostgreSQL, getPostMan Currently learning Node, React,Docker Currently hacking on Web Store (https://peppy-marshmallow-6cffa5.netlify.app/), Office Automation Application, Face Identification Available for I am open to open-source projects where I can learn and improve myself. 4 posts published 3 comments written 21 tags followed How to resolv*' * Oct 25 How to resolv*' #yaml #node #serverless #lambda Add C*ith Uzoma Nwanne? * Uzoma Nwanne. * What I learnt creating a custom File Upload Button * Jul 1 '23 What I learnt creating a custom File Upload Button Add Comment 2 min read The Broken Window Theory * Dec 6 '22 The Broken Window Theory #discuss #programming #productivity #devjournal 1 reaction 4 comments 1 min read Crown Clothing Web Store * Oct 7 '22 Crown Clothing Web Store #webdev #react #* 1 *onsor Neon * ",
    "url": "https://dev.to/uzomanwanne"
  },
  {
    "body": "* 0 *ead 0 * 0 * Uzoma Nwanne Posted on Oct 25 How to resolv*' #yaml #node #serverless #lambda Today, I was trying to run serverless, an npm package that allows us to run AWS serverless function on our local machine. After setting it up and executing the command, it started successfully but ended up showing the error messag*'. I did a lot of things to resolve this issue. However, all was to no avail until I had a look at the .yml file associated with serverless. The file was serverless.yml in my case. SOLUTION I now had to remove all the indentations to be sure they were not indentated using tabs and this fixed the issue in my case. In case, you see this error, checking the .yml file and ensuring the indentation is done using space characters might be the fix you are looking for. Happy coding. Top comments (0) * * Radar Promoted * Up to 90% less expensive than Google Maps 📉 Cut your Google Maps or Mapbox bill in half with our cost-effective geocoding APIs, autocomplete APIs, routing APIs, and base maps. Start for free Read next Deploy ComfyUI with RunPod Serverless Husnain Mustafa - Oct 22 How to Prepare Your Application to Handle Multiple Requests on Black Friday Wallace Freitas - Oct 21 Serverless Architecture with Next.js 14 and Next.js Actions: A Practical Guide saurabh kamble - Oct 21 Session Management In Node JS AKINTOLA STEPHEN IYANU - Oct 10 Uzoma Nwanne Follow I am a web developer with interest in the MERN technology stack. Prior to migrating to the MERN stack, I had over six years of experience developing applications using PHP and Java. Location Calabar, Nigeia Education University of Ibadan (MSc), Federal University of Technology, Owerri Work Application Developer @ FCIID Joined Oct 7, 2022 Trending on DEV Community * Meme Monday #discuss #watercooler #jokes * 🚀 #we* Heroku *refer* 👋 *** * ",
    "url": "https://dev.to/uzomanwanne/how-to-resolve-yaml-found-character-that-cannot-start-any-token-2818"
  },
  {
    "body": "* DEV Community on Video 01:13 * follow us: */ Prince 12:48 Exploring Pawapay Deposits, Refunds, and Payouts: A Hands-On Preview katorymnddev 09:55 Account Abstraction's Role in Decentralized Innovation | Michael Messele | Etherspot | ZebuLive 2024 Alexandra 05:24 Video - Caching HTML Tags Using WebForms Core Technology elanatframework 1:01:43 The 2024 State of RAG Podcast Daniel Davis 00:48 Resilience: Overcoming Setbacks Mercy 58:11 Live Building a Mobile Auto Repair AI Scheduler with No Code Alex 00:10 FREE Visual AI Course Now Live! Jimmy Guerrero 02:13 I Believe in this Technology elanatframework 00:30 Human-like Episodic Memory for Infinite Context LLMs Mike Young 1:00:49 Momen vs Bubble: Key differences and pricing explained Alex 46:25 Are LLMs Still Lost in the Middle? Daniel Davis 00:59 Image slider carosual using html css and javascript */ Prince 01:53 Meta AI's CoTracker3: Enhanced Point Tracking with Less Data Jimmy Guerrero 02:16 Goliath Dashboard Demo: Open Source Alternative Daniel J. Saldaña 47:21 Permission and Data Security in No-Code: Why it matters and How to control Alex 1:04:00 S1E3 : Code & Deploy: Craft a Very Demure, Very Mindful Skincare Routine With GenA Eze Lanza 21:29 Backtracking: Solving the N-Queens Problem and Python Implementation Bonaventure Ogeto 00:28 Tech Spotlight: Daily Tech News TechDogs 31:04 Visual AI in Healthcare: Advancing Comparative Computational AI in Veterinary Oncology Jimmy Guerrero 23:00 Vector Podcast from Berlin Buzzwords’24: Sonam Pankaj, EmbedAnything Dmitry Kan 00:25 Diamond Pattern Printing using javascript Prince 00:25 Future Of AI In Influencer Marketing TechDogs 33:42 Computer Vision Meetup: It's in the Air Tonight. Sensor Data in RAG Jimmy Guerrero 40:56 Computer Vision Meetup: Reducing Hallucinations in ChatGPT and Similar AI Systems Jimmy Guerrero 00:58 BUBBLE SORT USING ANIMATION HTML CSS JS Prince 09:46 This is How I Code Peter Vivo 00:53 Interactive stock market S&P 500 line chart using Bokeh, Python, JS, Pyscript and a movable angle finder for Trend Line Analysis Rick Delpo 11:25 Computer Vision Meetup: Using Elastic Vector Search in FiftyOne Jimmy Guerrero 27:49 Computer Vision Meetup: RGB-X Model Development: Exploring Four Channel ML Workflows Jimmy Guerrero 1:10:47 Developing FiftyOne Computer Vision Plugins Workshop - Oct 9, 2024 Jimmy Guerrero 33:00 Computer Vision Meetup: How Renault Leveraged Machine Learning to Scale Electric Vehicle Sales Jimmy Guerrero 00:55 JavaScript AbortController - 3 use cases Mahmoud Elmahdi 2:01:24 Master Cypress Testing with Full-Stack App | E2E Test | Auth, Maps, CRUD, GitHub Actions Hasan 00:23 Tech Spotlight: Daily Tech News TechDogs 00:17 SOS in Morse Code Souvik Paul 00:28 Tech Spotlight: Daily Tech News TechDogs 06:09 Introducing Hexabot: Your 100% Open-Source Chatbot Solution Med Marrouchi 06:28 Hexabot Setup & Visual Editor Tutorial: Build Your First AI Chatbot Med Marrouchi 01:50 Connexion à une Base de données PostgreSQL Fabrice 00:29 Tech Spotlight: Daily Tech News TechDogs 00:12 Tech Spotlight: Daily Tech News TechDogs 02:05 What is GenAIScript? Nick Taylor 20:38 Computer Vision Meetup: Elasticsearch is for the Birds: Identifying Embeded Images with Vector Similarity Search Jimmy Guerrero 16:46 * (feature comparison and migration guide) Simon Johansson 00:12 Tech Spotlight: Daily Tech News TechDogs 1:03:59 Sept 24 - Getting Started with the Open Source FiftyOne Computer Vision Toolset Jimmy Guerrero 21:09 Visual AI in Healthcare: NVIDIA’s VISTA-3D and MedSAM-2 Medical Imaging Models Jimmy Guerrero * * ",
    "url": "https://dev.to/videos"
  },
  {
    "body": "* Follow Report Abuse Vishnu Satheesh Passionate full stack developer | MERN stack enthusiast | Building scalable web applications Mangalore Joined on May 18, 2023 Education NMAM Institution of Technology, Nitte Work Virtual-Origami Technologies LLP One * one year. Got it * 100 Thumbs Up Milestone Awarded for giving 100 thumbs ups (👍) to a variety of posts across DEV. This is a mod-exclusive badge. Got it Thumbs Up Contest Winner 2023 Awarded to the top 10 DEV moderators who left the most thumbs ups across DEV from August 14th -28th 2023. This is a mod-exclusive badge. Got it *. Got it *le week. Got it More info about @vishnusatheesh Skills/Languages React.js, Node.js, Full Stack Development, Javascript 13 posts published 15 * How to Use Context Manager Pattern in JavaScript for Efficient Code Execution Vis*esh Follow Oct 10 How to Use Context Manager Pattern in JavaScript for Efficient Code Execution #javascript #python #beginners #programming 1 reaction Ad*h Vishnu Satheesh? * Vishnu Satheesh. * How to Build Reusable List Components in React with Custom Render Functions? Vis*esh Follow Sep 23 How to Build Reusable List Components in React with Custom Render Functions? #react #javascript #tutorial #webdev 3 *d Master the Art of Focus: Proven Strategies for Programmers to Boost Productivity Vis*esh Follow Sep 16 Master the Art of Focus: Proven Strategies for Programmers to Boost Productivity #beginners #productivity #career #programming 9 * Top Free Chrome Extensions You Need to Download Today Vis*esh Follow Jul 15 Top Free Chrome Extensions You Need to Download Today #webdev #beginners #tutorial #productivity 2 *d React JS Fragments Vis*esh Follow Apr 17 React JS Fragments #react #beginners #programming #*t 2 min read Essential React js Shorthand Techniques Vis*esh Follow Apr 13 Essential React js Shorthand Techniques #react #beginners #javascript #productivity 12 * Controlled and Uncontrolled components in react Vis*esh Follow Apr 10 Controlled and Uncontrolled components in react #react #beginners #webdev #javascript 10 * Strict Mode in React Vis*esh Follow Apr 3 Strict Mode in React #react #webdev #beginners #javascript 5 * Master MongoDB: Comprehensive Cheat Sheet for Developers Vis*esh Follow Mar 23 Master MongoDB: Comprehensive Cheat Sheet for Developers #mongodb #beginners #tutorial #* 7 min read Top React Component UI Libraries to Enhance Your Web Development Projects Vis*esh Follow Nov 30 '23 Top React Component UI Libraries to Enhance Your Web Development Projects #react #webdev #frontend #javascript 4 * Top 10 Best Web Optimization Services and Tools for an Efficient Online Presence Vis*esh Follow Jul 1 '23 Top 10 Best Web Optimization Services and Tools for an Efficient Online Presence #webdev #tutorial #productivity #performance 4 *d Top 8 Essential JavaScript Console Methods You Should Know Vis*esh Follow Jun 20 '23 Top 8 Essential JavaScript Console Methods You Should Know #* #beginners 34 reactions 9 comments 3 min read Top 5 free website hosting platforms for your next project Vis*esh Follow May 27 '23 Top 5 free website hosting platforms for your next project #webdev #deployment #learning #hostingplatforms 144 reactions 10 comments 3 *onsor Neon * ",
    "url": "https://dev.to/vishnusatheesh"
  },
  {
    "body": "* Follow Report Abuse Lucas Wasilewski Aspiring programmer, always creating something new Joined on Nov 6, 2023 More info about @wasix Badges One * one year. Got it * 4 * 9 tags followed Criando uma Runtime Lucas *ewski Follow Oct 25 Criando uma Runtime #cpp #node #v8 #javascript Add Comment 6 min read 20 milhões de linhas em 20s Lucas *ewski Follow Oct 9 20 milhões de linhas em 20s #java #performance #postgres #c Add Comment 6 min read Do it Yourself: CPU Lucas *ewski Follow Jul 29 Do it Yourself: CPU #c #assembly #emulator #algorithms Add Comment 6 min read Bootloader 101 Lucas *ewski Follow Mar 15 Bootloader 101 #assembly #opensource #softwaredevelopment #braziliandevs 5 reactions Add Comment 5 *onsor Neon * ",
    "url": "https://dev.to/wasix"
  },
  {
    "body": "* 0 *ead 0 * 0 * Lucas Wasilewski Posted on Oct 25 Criando uma Runtime #cpp #node #v8 #javascript Olá, meu nome é Lucas Wasilewski e assim como coloquei na descrição do projeto no meu github desde que eu comecei a programar com o NodeJS (lá no início de 2021) eu sempre quis escrever algo que parecesse com a ferramenta, isso só aumentou depois que eu assisti o documentário sobre o projeto e fiquei de boca aberta em como o mundo open source pode ter várias reviravoltas e se mostrar muito acolhedor quando quer. E depois de uma semana de muita bateção de cabeça resolvi escrever esse artigo para que assim os futuros loucos programadores que quiserem esse desafio não cometam os mesmos erros que eu. Runtimes de Javascript Esse termo pode facilmente enganar qualquer pessoa que não entenda muito do assunto e então é preciso de uma boa definição: Uma runtime de Javascript é uma ferramenta que permite executar a linguagem fora do navegador Hoje em dia existem 3 runtimes populares: NodeJS, Deno (Node Killer) e o Bun (Deno Killer), mas elas basicamente fazem a mesma coisa: permitem você usar o javascript longe do navegador e usam de outras bibliotecas para criar funcionalidades novas, e isso é muito bom, uma vez que você pode usar qualquer uma delas para subir um servidor, criar bibliotecas e até mesmo aplicações mobile ou de terminal. Ambos Node e Deno foram criados pela mesma pessoa: Ryan Dahl, e ele lá em 2009 criou a ferramenta para possibilitar que os desenvolvedores pudessem criar aplicações \"async IO\", ou seja, que não bloqueassem a thread principal mas ainda continuassem respondendo aos pedidos, com isso em mente ele criou a Libuv uma biblioteca que faz justamente isso. Até ai o projeto era apenas um grande amontoado de C e se ele quisesse mas pessoas usando a ferramenta ele precisava de alguma linguagem mais fácil de entender e usar, coincidentemente, nessa mesma época o Google lança a V8, que de um modo geral é um compilador ultra rápido de javascript, isso fez ele unir os dois e assim criar o Node. Algum bom tempo depois (9 anos mais especificamente), Ryan saí do projeto e vai trabalhar em outras coisas que considerava mais interessante, isso fez ele perceber alguns vários erros que podiam ser corrigidos no Node, mas a comunidade já estava muito grande e ter que dar um grande passo para trás era impossível, então, determinado a fazer um trabalho melhor ele cria o Deno, outra runtime IO que promete ser muito superior ao Node, até a data de hoje (2024) o Deno está na versão 2.0 e está bem estável para projetos e comunidade. Toda essa história fez mais pessoas entrarem na comunidade das runtimes e isso também nos levou a criação do Bun, e muito melhor, da minha e da sua runtime! Agora vamos ao que interessa. Compilando a V8 Como dito anteriormente a V8 é o motor do Node, por isso vamos ter que realmente baixá-la e compilar manualmente para assim ter acesso as suas bibliotecas e headers. Por ser um projeto do Google eles tem os próprios métodos de baixar e compilar, então pra isso vamos ter que seguir o manual deles: link, apenas copiar e colar vai te levar ao comando finais. Porém, aqui eu cometi um erro que demorou 3 dias para me tocar que estava fazendo tudo de errado. Após gerar os arquivos de configuração de build com: tools/dev/v8gen.py x64.release Você precisar tomar muito cuidado com o arquivo args.gn dentro da pasta out.gn/x64.release/ porque nele tem a configuração de build que o ninja (ferramenta de compilação) vai utilizar para gerar os arquivos da biblioteca, alguns tutoriais antigos usam o parâmetro v8_monolithic = true, mas nas versões recentes isso não é mais utilizado. De acordo com esse comentário do StackOverflow, nós precisamos agora usar o parâmetro is_component_build = true para gerar os arquivos certos e modificar as flags ao compilar o arquivo, algo muito bobo que se você não prestar atenção pode gastar um tempo precioso. Após colocar o resto das flags corretamente, apenas precisamos rodar o comando para compilar o projeto ninja -C out.gn/x64.release Enquanto isso vá comer alguma coisa, porque a V8 é um projeto bem extenso e com inúmeros testes, dependendo da sua máquina esse processo pode facilmente levar 1 hora ou mais, então deixe rodando e continue lendo. Cadê o console.log? Após compilar você pode dar uma olhada no v8/samples/hello-world.cc e já começar a ter uma ideia de como compilar javascript, mas especificamente essas linhas: v8::Local<v8::String> source = v8::String::NewFromUtf8Literal(isolate, \"'Hello' + ', World!'\"); // Compile the source code. v8::Local<v8::Script> script = v8::Script::Compile(context, source).ToLocalChecked(); Vá em frente e dê uma brincada com a string que contêm o \"Hello World\", crie funções, loops, condicionais e se veja maluco ao perceber que se você incluir o clássico console.log() vai receber um undefined, isso primeiramente me deixou perplexo, eu sempre achei que o objeto console fazia parte da própria V8, mas na verdade quem o inclui é o próprio Node e os navegadores o incluem como parte do DOM (post de 2012 falando que o console.log provavelmente não é suportado pelos navegadores), ou seja, vamos ter que criá-lo nós mesmos. Olá, Mundo! Para conseguir criar nossas próprias funções primeiro precisamos entender que a V8 trabalha com vários escopos, um deles é o de contexto, onde é através dele que a runtime sabe onde e como executar o script de forma individual, dentro dele pode haver um objeto global que é compartilhado entre todos os outros, e é dentro dele que vamos inserir nossas funções customizadas. v8::Local<v8::ObjectTemplate> global = v8::ObjectTemplate::New(GetIsolate()); global->Set(GetIsolate(), \"print\", v8::FunctionTemplate::New(GetIsolate(), this->Print)); v8::Local<v8::Context> context = v8::Context::New(GetIsolate(), nullptr, global); Com essas linhas conseguimos criar um objeto que se chama global, inserimos um template de função \"print\" que ao ser executado chama a função Print. static void Print(const v8::FunctionCallbackInfo<v8::Value>& info) { v8::HandleScope handle_scope(info.GetIsolate()); for(int i = 0; i < info.Length(); i++) { if(i != 0) printf(\" \"); v8::String::Utf8Value str(info.GetIsolate(), info[i]); const char *c = ToCString(str); printf(\"%s\", c); } printf(\"\\n\"); fflush(stdout); } A função Print recebe esse parâmetro maluco que contém informações sobre a chamada da função dentro do javascript e é através dele que iteramos sobre todos os itens dentro dela, os transformamos em uma string C e printamos na tela, bem direta, bem simples e que cumpre com seu papel, isso já é o suficiente para colocar em um arquivo, lê-lo e jogar para a V8 (deixo essa em suas mãos). // test.js print(\"Olá, mundo!\") Libuv Bom, espero que até aqui você esteja conseguindo acompanhar e até tenha parado de ler para fazer algumas implementações únicas para o seu Node caseiro, porém a V8 só vai nós levar até certo ponto, para conseguirmos chegar mais perto de uma runtime profissional precisamos fazer com que o javascript consiga realizar mais operações, para tal vamos utilizar da Libuv que foi criada justamente para isso. Você pode achar o tutorial para instalar e compilar aqui. O importante a se notar aqui é que ela nos dá a liberdade de fazer operações assíncronas, ou seja, sem bloquear a thread principal, permitindo assim que o programa continue executando enquando faz um trabalha mais pesado (como abrir um arquivo ou esperar por requisições em um socket de servidor). Ela mesma já vem embutido com a funcionalidade de criar um servidor http, então só precisamos sincronizá-la com as chamadas da V8. Não se engane, isso não é uma tarefa fácil, até porque a interface das duas bibliotecas se diferem bastante então é difícil conectar ambas, mas sempre há um jeito e o código fonte do node é aberto então certifique-se de roubar algumas ideias de lá Conclusões Chegamos ao final de mais um artigo e com eles vamos a alguns detalhes que eu percebi durante a implementação. A primeira com certeza é a complexidade, claro, não é um projeto simples, mas depois que você entender como interagir com a interface da V8 as coisas andam bem rápido. Esse projeto me fez entender o Node muito melhor também. A questão que a runtime é apenas um conglomerado de bibliotecas se comunicando faz ser muito fácil entender como as coisas mais complexas (como o \"event-loop\") funcionam. Caso você queira olhar o que eu fiz de certo, ou provavelmente de muito errado, por favor dê uma olhada no projeto pelo github: done Talk is cheap, show me the code - Linus Torvalds ## Refêrencias https://github.com/libuv/libuv https://v8.dev/docs https://stackoverflow.com/questions/71213580/cant-get-v8-monolith-to-genorate https://github.com/ErickWendel/myownnode https://github.com/WasixXD/done Sentry Promoted * Hydration errors suck But Sentry can help you debug them. Read full post → Top comm* next Top 25 React Tips Every Developer Should Know — Part 2 Yogesh Chavan - Nov 8 From Concept to Code: Building a Simple Endless Runner Game Chipm0nk - Nov 5 What is JavaScript ? Muhammad Bilal - Nov 4 Claude AI now runs JavaScript, Python beats JavaScript on GitHub, new Node.js versions and more James - Nov 3 Lucas Wasilewski Follow Aspiring programmer, always creating something new Joined Nov 6, 2023 Trending on DEV Community Meme Monday #discuss #watercooler #jokes * * 🚀 #we* Heroku *refer* 👋 ** * ",
    "url": "https://dev.to/wasix/criando-uma-runtime-4i2d"
  },
  {
    "body": "* Follow Report Abuse WavePlay 404 bio not found Joined on Oct 11, 2023 Meet the team 22 posts published 2 members * W*f Follow Nov 1 * #hacktoberfest #javascript #discord #node Add Comment 1 min read * 🎉 W*f Follow Oct 11 * 🎉 #javascript #hacktoberfest #programming #discord 7 *d * 🎉 W*f Follow Oct 2 * 🎉 #node #javascript #discord #hacktoberfest 8 * *! W*f Follow Oct 1 *! #javascript #discord #programming #*in read * W*f Follow Sep 17 * #discord #node #javascript #* 3 min read Build a Portable AI Companion with Discord’s User-Installable Apps (GPT 4o) W*f Follow Jun 18 Build a Portable AI Companion with Discord’s User-Installable Apps (GPT 4o) #discord #node #programming #javascript 8 *d Resolve Content Security Policy (CSP) Issues in Your Discord Activity Using a Node.js Proxy W*f Follow Jun 17 Resolve Content Security Policy (CSP) Issues in Your Discord Activity Using a Node.js Proxy #discord #programming #node #*nt 5 min read Achieve Game-Like Scaling in Discord Activities and Web Apps Using CSS W*f Follow Jun 3 Achieve Game-Like Scaling in Discord Activities and Web Apps Using CSS #javascript #programming #node #discord 6 * Add Advanced Features to Your Discord Bot Without Code (Discord.js + Robo.js) W*f Follow May 31 Add Advanced Features to Your Discord Bot Without Code (Discord.js + Robo.js) #javascript #node #programming #discord 2 *d How to Fix Stuck Ready Event in Discord Embedded App SDK W*f Follow May 27 How to Fix Stuck Ready Event in Discord Embedded App SDK #* #node 5 * How to Add Multiplayer to Your Discord Activity W*f Follow May 21 How to Add Multiplayer to Your Discord Activity #* #node 10 * Use Your Discord Bot Everywhere: User-Installable Apps (Discord.js + Robo.js) W*f Follow May 14 Use Your Discord Bot Everywhere: User-Installable Apps (Discord.js + Robo.js) #discord #javascript #programming #node 7 *d Modern new way to use Discord.js command options (Robo.js) W*f Follow May 6 Modern new way to use Discord.js command options (Robo.js) #node #* 4 *d Getting credentials for your Discord Activity W*f Follow Apr 18 Getting credentials for your Discord Activity #discord #activity #javascript #* 2 min read Robo.js v0.10 is here - more than just Discord.js bots W*f Follow Apr 16 Robo.js v0.10 is here - more than just Discord.js bots #javascript #node #programming #discord * a Discord Activity in seconds with Robo.js W*f Follow Apr 9 Creating a Discord Activity in seconds with Robo.js #discord #sdk #javascript #bot 23 * Now Live: Free Dedicated Discord Bot Hosting on RoboPlay (Read for Invites Codes) W*f Follow Feb 16 Now Live: Free Dedicated Discord Bot Hosting on RoboPlay (Read for Invites Codes) #discord #node #programming #*t 3 min read Better Discord.js Chatbots: Revamped AI Plugin for Robo.js W*f Follow Dec 15 '23 Better Discord.js Chatbots: Revamped AI Plugin for Robo.js #node #programming #discord #ai 4 * Introducing Sage CLI: A Magic Tool for Robo.js W*f Follow Dec 12 '23 Introducing Sage CLI: A Magic Tool for Robo.js #discord #programming #javascript #*in read Introducing DevTools Plugin for Enhanced Robo.js Development W*f Follow Dec 3 '23 Introducing DevTools Plugin for Enhanced Robo.js Development #javascript #programming #node #discord 2 reactions Ad* the Moderation Tools Plugin for Robo.js W*f Follow Nov 27 '23 Introducing the Moderation Tools Plugin for Robo.js #discord #node #javascript #programming 7 *d A Big Thank You to Our Robo.js Hacktoberfest Contributors! W*f Follow Nov 25 '23 A Big Thank You to Our Robo.js Hacktoberfest Contributors! #javascript #discord #node #framework 3 * * ",
    "url": "https://dev.to/waveplay"
  },
  {
    "body": "* Follow Report Abuse WavePlay Staff We turn tech into an adventure! 🚀 AI, music, bots, hosting, services… we make it fun! Follow us for new products, how-tos, announcements, events, tutorials, and more. ✨ https://roboplay.dev/discord Los Angeles, California Joined on Oct 2, 2023 https://waveplay.com More info about @waveplay-staff Badges One * one year. Got it * 1 We*t *t it Hacktoberfest 2023 Pledge Earned by pledging commitment and authoring a post about Hackathon experience or Hacktoberfest goals. This achievement sets participants on the path to earning other badges. Got it Organizations WavePlay Skills/Languages Psst… check out Robo.js! https://roboplay.dev/docs 23 posts published 3 * * W*f Follow for WavePlay Nov 1 * #hacktoberfest #javascript #discord #node Add C*ith WavePlay Staff? * WavePlay Staff. * * 🎉 W*f Follow for WavePlay Oct 11 * 🎉 #javascript #hacktoberfest #programming #discord 7 *d * 🎉 W*f Follow for WavePlay Oct 2 * 🎉 #node #javascript #discord #hacktoberfest 8 * *! W*f Follow for WavePlay Oct 1 *! #javascript #discord #programming #*in read * W*f Follow for WavePlay Sep 17 * #discord #node #javascript #* 3 min read Build a Portable AI Companion with Discord’s User-Installable Apps (GPT 4o) W*f Follow for WavePlay Jun 18 Build a Portable AI Companion with Discord’s User-Installable Apps (GPT 4o) #discord #node #programming #javascript 8 *d Resolve Content Security Policy (CSP) Issues in Your Discord Activity Using a Node.js Proxy W*f Follow for WavePlay Jun 17 Resolve Content Security Policy (CSP) Issues in Your Discord Activity Using a Node.js Proxy #discord #programming #node #*nt 5 min read Achieve Game-Like Scaling in Discord Activities and Web Apps Using CSS W*f Follow for WavePlay Jun 3 Achieve Game-Like Scaling in Discord Activities and Web Apps Using CSS #javascript #programming #node #discord 6 * Add Advanced Features to Your Discord Bot Without Code (Discord.js + Robo.js) W*f Follow for WavePlay May 31 Add Advanced Features to Your Discord Bot Without Code (Discord.js + Robo.js) #javascript #node #programming #discord 2 *d How to Fix Stuck Ready Event in Discord Embedded App SDK W*f Follow for WavePlay May 27 How to Fix Stuck Ready Event in Discord Embedded App SDK #* #node 5 * How to Add Multiplayer to Your Discord Activity W*f Follow for WavePlay May 21 How to Add Multiplayer to Your Discord Activity #* #node 10 * Use Your Discord Bot Everywhere: User-Installable Apps (Discord.js + Robo.js) W*f Follow for WavePlay May 14 Use Your Discord Bot Everywhere: User-Installable Apps (Discord.js + Robo.js) #discord #javascript #programming #node 7 *d Modern new way to use Discord.js command options (Robo.js) W*f Follow for WavePlay May 6 Modern new way to use Discord.js command options (Robo.js) #node #* 4 *d Getting credentials for your Discord Activity W*f Follow for WavePlay Apr 18 Getting credentials for your Discord Activity #discord #activity #javascript #* 2 min read Robo.js v0.10 is here - more than just Discord.js bots W*f Follow for WavePlay Apr 16 Robo.js v0.10 is here - more than just Discord.js bots #javascript #node #programming #discord * a Discord Activity in seconds with Robo.js W*f Follow for WavePlay Apr 9 Creating a Discord Activity in seconds with Robo.js #discord #sdk #javascript #bot 23 * Now Live: Free Dedicated Discord Bot Hosting on RoboPlay (Read for Invites Codes) W*f Follow for WavePlay Feb 16 Now Live: Free Dedicated Discord Bot Hosting on RoboPlay (Read for Invites Codes) #discord #node #programming #*t 3 min read Better Discord.js Chatbots: Revamped AI Plugin for Robo.js W*f Follow for WavePlay Dec 15 '23 Better Discord.js Chatbots: Revamped AI Plugin for Robo.js #node #programming #discord #ai 4 * Introducing Sage CLI: A Magic Tool for Robo.js W*f Follow for WavePlay Dec 12 '23 Introducing Sage CLI: A Magic Tool for Robo.js #discord #programming #javascript #*in read Introducing DevTools Plugin for Enhanced Robo.js Development W*f Follow for WavePlay Dec 3 '23 Introducing DevTools Plugin for Enhanced Robo.js Development #javascript #programming #node #discord 2 reactions Ad* the Moderation Tools Plugin for Robo.js W*f Follow for WavePlay Nov 27 '23 Introducing the Moderation Tools Plugin for Robo.js #discord #node #javascript #programming 7 *d A Big Thank You to Our Robo.js Hacktoberfest Contributors! W*f Follow for WavePlay Nov 25 '23 A Big Thank You to Our Robo.js Hacktoberfest Contributors! #javascript #discord #node #framework 3 reactions *st with Robo.js: Build Bots or Plugins & Win Stuff! W*f Follow Oct 2 '23 Hacktoberfest with Robo.js: Build Bots or Plugins & Win Stuff! #hacktoberfest23 #hacktoberfest #robojs #bots 5 * * ",
    "url": "https://dev.to/waveplay-staff"
  },
  {
    "body": "* 0 *ead 0 * 0 * WavePlay Staff for WavePlay Posted on Nov 1 * #hacktoberfest #javascript #discord #node Now that October is over, all good things must come to an end, right? Not so for Robo.js! We're extending our Hacktoberfest event until November 30. This means you have an extra month to create templates, plugins, video tutorials, or general contributions. The more you contribute, the more points you earn, and the better prizes you unlock. See our main post for more: 🎃 Hacktoberfest: Build stuff, win free swag ✨ Updated Grading Criteria We've also updated the grading criteria. Templates can now earn you up to 5 points, and general contributions may earn you between 1 and 10 points based on complexity. See the Points label on GitHub issues tagged #hacktoberfest. Leaderboard We now have a leaderboard to see how you're doing compared to others. Join our Discord server and check out the #leaderboard channel! Web version of the leaderboard coming soon. Discord: Join the Community 👋 Before you go * Your next step Do your career a favor. *orth it * (0) * * * *, exploring frameworks like Elysia and Nest, and sharing best practices via GitHub repositories. * Mastering JavaScript Memory Management: Essential Guide to Garbage Collection & Memory Leaks Okoye Ndidiamaka - Nov 7 How to Include JavaScript in Laravel 11: A Step-by-Step Guide for All Scenarios websilvercraft - Nov 7 Deploy a bento to GitHub Pages K Om Senapati - Nov 9 Understanding * - Nov 6 WavePlay Follow More from WavePlay * 🎉 #javascript #hacktoberfest #programming #discord * 🎉 #node #javascript #discord #hacktoberfest *! #javascript #discord #programming #node _Su* UI Component * retain full ownership *ion limits. Learn more 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/waveplay/hacktoberfest-extended-until-november-30-for-robojs-h2i"
  },
  {
    "body": "* 37 Add reaction 28 Like 9 *s 0 Fire 8 Jump to Comments 18 * Nikita Sobolev for wemake.services Posted on Apr 2, 2019 • Updated on Jun 29, 2019 28 9 Flow vs Typescript From Flow to Typescript. Why? #javascript #typescript #node #webdev advanced-vue-typing (2 Part Series) 1 From Flow to Typescript. Why? 2 Really typing Vue Originally published in my blog: https://sobolevn.me/2019/03/from-flow-to-typescript It all started almost two years ago. I was sick with constant silly javascript mistakes like undefined is not a function in my apps. So, I have decided to add optional static typing. Two years ago the javascript land was completely different. Both Flow and TypeScript had a lot of disadvantages: poor libraries support, from none to almost none IDE support, type issues, and limitations. I have chosen Flow just because it was easier to start with. Plug it into your .babelrc and start working. Almost 6 months ago I have made a decision to move all our frontend projects from Flow to TypeScript. It was a tough battle inside my head. So, I have decided to write it down to help other people to choose the right tool. And not to make my mistakes. These tools are quite similar, both providing type-safety to plain javascript. And this article is not about types or differences between structural and nominal subtyping. It more about the current state of these tools. You rarely change typing tools because of types. Hype I will start with the most important aspect of all technical decisions. Yes, it is about hype-driven-development. Please, do not make your face like this. I will explain how it works, and possibly you will change your mind. I quite often speak about our stack, write articles about it, etc. And every time I said that we were using Flow other developers asked me: \"But why not TypeScript\"? And every time I had to explain my choice. Going deep into details, history, and tooling. Sometimes even explaining the state of current projects and our workflow. This was not a pleasant experience when you are not advocating for something. I was just a user. I do not really prefer one to another. And it felt really strange to had this conversation over and over again. Moreover, we make services for our clients, and we hire other developers. And some of them literally wants to work with TypeScript and does not want to work with Flow. Why? Because they heard about TypeScript and how awesome it is. While the hype train around Flow is not so massive. Me: Hi, we use X, Y, Z, and Flow for this project Dev: Flow? Why not TypeScript? Me: Oh, are kidding me? 🤦 If you do not want to fight this hype train but make it work for you it is better to step aside and use whatever is hyped. Keeping in mind that there's no massive change for your current workflow. Infrastructure Vue 3.0 will support TypeScript out of the box, Nuxt already supports TypeScript. There are a lot of projects that ship types together with the source code. axios, vuex, vue-router, lodash to name a few. What about Flow support? Vue currently uses Flow for typing (switching to TypeScript starting from 3.0), but these types are development only. You cannot take them and use in your own projects. Maybe there are different types? Yes, Flow has its own repository for types. The problem is that installing types is a whole new extra step. You have to configure postinstall hook to make sure that types are also rebased after each npm install call (yes, they use git rebase). When you will dig into flow-typed packages you will find that it is mostly React oriented. Flow even has a lot of React primitives in the standard library. Which I find really strange. But what about Vue specific types (since we use Vue a lot)? Yes, you can find @vue-flow-type package maintained by a single person. The sad thing is that I am this single person. I am really tired of maintaining types for several popular projects. And as you can imagine there are bugs, type changes, new releases, etc. TypeScript wins this one for me. Its distribution system does not force me to do extra work. Just install something and it will work. Because types/ subfolder is shipped together with the source code via npm. No extra steps are required. Library authors maintain types/ folder together with the rest of codebase. They can be sure that everything works correctly. IDE Let's discuss IDE support for Flow projects. Or I would say \"no IDE support\". That's not a big thing, I can write my code using just nano. But I spend a lot of my life inside text editors and I want them to be friendly. Sadly, Flow plugins for all major IDEs (and text editors) are buggy and unreliable. For example, VSCode plugin does not work at all. And at the same time, VSCode is known for its first-class TypeScript support. With intellisense, type-checking, and autocomplete out of the box. Have a look at our VSCode + TS + Vue setup. With this simple feature, your development workflow starts to feel more responsive, and the feedback loop time is significantly decreased. Unfixed bugs The other thing that was ruining my Flow experience is the number of unfixed bugs in Flow itself. For example, when you install Vuex all Vue components are extended with an extra property which can be accessed with this.$store. The thing is there's no way to tell Flow that Vuex was added. And this bug is opened since 2015, for 4 years now! Of course, you can still write your own types: // @flow import Vue from 'vue' import type { Store } from 'vuex' import type { State } from '~/types/vuex' /** * Represents our extended Vue instance. * * We just use the annotations here, since properties are already injected. * You will need to add new annotations in case you will extend Vue with new * plugins. */ export default class CustomVue extends Vue { $store: Store<State> } But now you have to maintain your own types by yourself. Do you want to add this.$router property? Please, add it yourself. Nuxt specific types? You are on your own. Compare it with the standard TypeScript approach: import Vue, { ComponentOptions } from \"vue\"; import { Store } from \"./index\"; declare module \"vue/types/options\" { interface ComponentOptions<V extends Vue> { store?: Store<any>; } } declare module \"vue/types/vue\" { interface Vue { $store: Store<any>; } } Existing types can be extended with special declarations. And library authors do that for you. Remember what I said about types distribution? This feature makes the distribution even better. The second well-known bug from 2015 is that you cannot annotate this even if you have to. Some libraries have strange APIs. With Flow you just cannot do anything, typing is lost there. But with TypeScript you can annotate what this means in every context. And it is great for a lot of use-cases. Why these bugs are not fixed? I don't know. They brought a lot of attention during the years. A lot of people wanted these things, but Flow team does not share their vision on the project. And they release things that they want, not the community. Releases Talking about releases I must mention their policy: \"just release things and make users fix their code\". Here's the release history and what it has done to my project. Almost every release breaks my code. Considering that it is a template with almost no code – it is really scary. By the way, Flow team does not follow SemVer, they just release incrementally. After one release jsx inside .vue files stopped working. I was not able to fix it ever again on new versions. I took the lazy path: pinned the version and just ignored the updates after this incident. TypeScript has clear release policy, SemVer, and wide attention to the community. It is much better to maintain in the long run. Conclusion We have made our choice and said \"Good bye\" to Flow. Now all our projects and our project template supports TypeScript. And we regret nothing! By the way, our template is truly awesome. It supports: Nuxt for server-side rendering and boilerplate isolation TypeScript everywhere: code, tests, configuration Jest for unit tests, TestCafe for E2E tests Docker for development and production Awesome documentation that covers every aspect of the project Try it out! advanced-vue-typing (2 Part Series) 1 From Flow to Typescript. Why? 2 Really typing Vue 👋 While you are here * Reinvent your career. *orth it * (8) * 🇨🇵️ Nathan Graule 🇨🇵️ Nathan Graule 🇨🇵️ Nathan Graule Follow 4 hands AZERTY keyboard player. Location Toulouse, France Joined Aug 26, 2018 • Apr 3 '* I'm someone who hasn't used Flow at all, but has always seemed to me that Flow was a tool made for React first and foremost, with a specific workflow in mind. That's what turned me off of it (that, and, well Facebook let's be honest) and I got into TypeScript instead. 1 like Like Reply Saurabh Sharma Saurabh Sharma Saurabh Sharma Follow Fullstack Web developer. Location Delhi, India Work Fullstack Web Developer at Codeword Tech Joined Nov 13, 2017 • Apr 2 '* typescript is ❤ 1 like Like Reply Nikita Sobolev Nikita Sobolev Nikita Sobolev Follow Email mail@sobolevn.me Location Moscow, Russia Work CTO at wemake.services Joined Jul 9, 2017 • Apr 2 '* Have you tried Flow? You can love TypeScript even more after ~2 years of work with Flow! 4 likes Like Reply Templar++ Templar++ Templar++ Follow Joined Apr 9, 2018 • Apr 3 '19 * can also love CoffeeScript and it isn't bad either, but TypeScript is taking over as it seems. 2 likes Like Reply Saurabh Sharma Saurabh Sharma Saurabh Sharma Follow Fullstack Web developer. Location Delhi, India Work Fullstack Web Developer at Codeword Tech Joined Nov 13, 2017 • Apr 6 '* Nah, never tried flow coming from JavaScript 1 like Like Reply hiredgunhouse hiredgunhouse hiredgunhouse Follow Joined Jan 15, 2020 • Feb 21 '* TypeScript is definitely not following SemVer, where did you get that impression from? 1 like Like Reply Templar++ Templar++ Templar++ Follow Joined Apr 9, 2018 • Apr 3 '* Resistance is futile. TypeScript is the future of course - Anders Hejlsberg stands behind it. 1 like Like Reply Aaron Gong Aaron Gong Aaron Gong Follow Fullstack Developer always improving code to minimize tech debt and obsolescence, maximize agility and scalability Location Singapore Work Fullstack at Anything involving VueJS and ExpressJS Joined Jun 26, 2019 • Nov 2 '* I do not use either... Will use whichever if ever there is native support on the browser or on NodeJS 1 like Like Reply * DEV Community * Trending in TypeScript Developers are interested in writing cleaner TypeScript, exploring functional programming, and debating frameworks like NestJS and Encore.ts for microservices. How to Write Better TypeScript Code: Best Practices for Clean, Effective, and Scalable Code Yug Jadvani ・ Nov 2 #typescript #development #cleancode *? *t #webdev Functional Programming in TypeScript aelassas ・ Oct 28 #* #discuss Typing Prisma Jso*rm NestJS vs Encore.ts: Choo* Marcus Kohlberg for Encore ・ Oct 30 #javascript #typescript #microservices #webdev Read next 15 Essential tools and resources for Frontend developers ⚡️ Paul - Nov 7 Why Web/App Developers Should Learn from Game Developers Tom J. - Nov 6 MarkoJS Frontend Development with Generative AI: A Modern Approach Harshal Shah - Nov 6 🚀 12 Dev Tools + Gen Z UX Secrets + CSS Animations (5-min read) Adam Marsden - Nov 6 wemake.services Follow We sell repeatable software development process We craft large applications and start up new companies using brand new software development process: RSDP. It is so cool that we have open-sourced everything we have about it. Change the world More from wemake.services Higher Kinded Types in Python #python #mypy #webdev #beginners How async should have been #python #async #webdev #django Do not log #python #beginners #devops #webdev 👋 ** * ",
    "url": "https://dev.to/wemake-services/from-flow-to-typescript-why-1k7m"
  },
  {
    "body": "* 18 Add reaction 12 Like 6 *s 0 Fire 5 Jump to Comments 24 * Wes Copeland Posted on Aug 2, 2020 12 6 How to Add Commands on Twitch How to Build & Test Twitch Chat Bot Commands with Next.js #javascript #node #serverless #typescript Intro I recently worked on a side project that involved building custom chat commands for a bot on Twitch.tv. The commands themselves required a lot of heavy lifting with the Google Sheets API - something that was the perfect candidate for a Node.js server. This wasn't the first time I've done custom bot work on Twitch or Discord. For previous projects, I've always spun up a custom server to manage the bot that was then deployed (at cost) to Heroku. However, after a few hours of initial work on this new project, I discovered it would be much easier to tackle the bot commands using modern serverless technologies. After all, each bot command is just a function. In theory, this could be done using anything that lets you easily host an API endpoint without a server. I chose Next.js because a lot of similar non-bot-related feature work lived in the same Next.js project. How it works 🤖 Your Twitch channel is running Nightbot, which supports custom API-based \"UrlFetch\" commands. Nightbot is free to use and takes less than 20 seconds to set up on your channel. 👨‍💻 You use Next.js's API routes support to build serverless backend microservice functions. 😎 You deploy your project to Vercel or Netlify for free. 📡 You create a custom command with Nightbot leveraging UrlFetch and your newly-deployed API route. 🔧 Let's build it Set up a fresh Next.js project Let's create a new Next.js project. I'll be using TypeScript for this project, but this can easily be adapted to work with JavaScript instead. In your terminal in the directory you'd like to create the project, run: npx create-next-app --example with-typescript OR yarn create next-app --example with-typescript After a few minutes, your project should be ready to go, and a dev server can be started with npm run dev or yarn dev. Add a new API route Creating serverless functions in Next.js is so easy it feels like cheating. You should have a pages folder in your project. Create an api folder inside pages and within it create a new file: ping.ts. Your file structure should look something like this (I have not modified the TypeScript example project): With your dev server running at yarn dev, http://localhost:3000/api/ping now automagically maps to your ping.ts file! But it isn't doing anything yet. Make the API route useful for Nightbot Our custom chat command will be very simple. There will be no heavy lifting involved. For this article, we want the command to say hello, print the initiator's username, and print the current channel. Like so: Let's get coding. Open up ping.ts and paste this content in: // ping.ts import { NextApiRequest, NextApiResponse } from 'next'; export default async function (req: NextApiRequest, res: NextApiResponse) { res.status(200).send('Hello!'); } With your local dev server running (npm run dev or yarn dev), if you visit localhost:3000/api/ping, you should see \"Hello!\" printed to the screen. Cool! Some things to note if this is your first Next.js rodeo: req and res may look like conventional Express.js request and response arguments, but they are not. NextApiRequest and NextApiResponse are Express-like. Docs here on response helpers might be useful. If all of this looks like moon language, the Next.js API routes documentation is a pretty good first start. By default, Nightbot expects a plain-text response. JSON is supported, but beyond the scope of this article. Alright, we're printing \"Hello\" to the screen, but what about the username and the current channel? When Nightbot sends an API request, it sends along headers with all that metadata too! Info on these headers can be found on the UrlFetch docs page: We're specifically interested in Nightbot-User and Nightbot-Channel. Nightbot sends data in these headers along as query strings, like this: req.headers['nightbot-channel'] = 'name=kongleague&displayName=KongLeague&provider=twitch&providerId=454709668'; req.headers['nightbot-user'] = 'name=wescopeland&displayName=WesCopeland&provider=twitch&providerId=52223868&userLevel=moderator' We can use JavaScript's built-in URLSearchParams constructor to parse these pretty easily. Add these functions to your ping.ts file: // somewhere in ping.ts const parseNightbotChannel = (channelParams: string) => { const params = new URLSearchParams(channelParams); return { name: params.get('name'), displayName: params.get('displayName'), provider: params.get('provider'), providerId: params.get('providerId') }; }; const parseNightbotUser = (userParams: string) => { const params = new URLSearchParams(userParams); return { name: params.get('name'), displayName: params.get('displayName'), provider: params.get('provider'), providerId: params.get('providerId'), userLevel: params.get('userLevel') }; }; Updating the ping.ts API function to display the username and channel is now relatively straightforward! // ping.ts export default async function (req: NextApiRequest, res: NextApiResponse) { const channel = parseNightbotChannel( req.headers['nightbot-channel'] as string ); const user = parseNightbotUser(req.headers['nightbot-user'] as string); res .status(200) .send( `Hello! Your username is ${user.displayName} and the current channel is ${channel.displayName}.` ); } ✅ Let's test it Our endpoint is built, but how would we go about building a unit test for it? You'll see below this is not too difficult. Note that Jest does not ship with new Next.js projects by default, but it is simple to set up. Add a testing dev dependency To make life less painful, I recommend installing the node-mocks-http library: npm i node-mocks-http --save-dev OR yarn add -D node-mocks-http If you're a regular Express.js user, you may be familiar with testing API endpoints using supertest. Unfortunately, supertest cannot help us with Next.js serverless API routes. Create the test file Your natural inclination might be to put a ping.test.ts file in the same directory as ping.ts. This is a good pattern to follow, but due to how Next.js's folder-based routing works it isn't a great idea because Vercel will then try to deploy your tests 😱 I recommend creating a __tests__ folder at the root of your project where tests for anything inside of pages can live. Inside of __tests__, create an api folder that contains ping.test.ts. Write the tests Building the test code from here is pretty straightforward: import { createMocks } from 'node-mocks-http'; import ping from '../../pages/api/ping'; describe('Api Endpoint: ping', () => { it('exists', () => { // Assert expect(ping).toBeDefined(); }); it('responds with details about the user and channel', async () => { // Arrange const { req, res } = createMocks({ method: 'GET', headers: { 'nightbot-channel': 'name=kongleague&displayName=KongLeague&provider=twitch&providerId=454709668', 'nightbot-user': 'name=wescopeland&displayName=WesCopeland&provider=twitch&providerId=52223868&userLevel=moderator' } }); // Act await ping(req, res); const resData = res._getData(); // Assert expect(resData).toContain('Your username is WesCopeland'); expect(resData).toContain('the current channel is KongLeague'); }); }); 🤖 Finally, set up Nightbot Go to the Nightbot website, sign up, and click the \"Join Channel\" button in your Nightbot dashboard. Nightbot will now be on your Twitch (or YouTube!) channel. I am assuming you've deployed your Next.js project somewhere. You should be able to hit your newly created ping route inside your browser. If you're new to this, deploying to Vercel is probably easiest for Next.js projects. It should just be a matter of signing up, pointing to your GitHub repo, and clicking Deploy. Now that Nightbot is in your Twitch channel, go to your chat on Twitch. Create a new Nightbot command by entering in the chat: !commands add !ping $(urlfetch https://YOUR_URL/api/ping) After this is done, Nightbot should respond saying the command has been added. You should now be able to type \"!ping\" in the chat and see your API response! You're all set! 🔒 Don't forget security Anyone can access Nightbot's list of commands for your Twitch channel just by using \"!commands\". Nightbot hides API route addresses, treating them like secrets or environment variables, but anyone who knows the address to one of your endpoints can mock headers and pretend to be someone they're not in Postman or Insomnia. In other words, you need another layer of security if you want to treat the initiator of the chat command as being \"authenticated\". If this is important to you (typical in advanced use cases involving things like channel points or user roles), I recommend adding code to your endpoint that ensures the API call actually came from Twitch or Nightbot itself. It's possible to check for this in the request headers of the API call. 👋 That's all! Thanks for reading, hopefully this was helpful to someone out there! If you're interested in any of my future content, be sure to follow me here on dev.to. * UI Libraries for Surveys and Forms SurveyJS lets you build a JSON-based *, giving you *. * ty*me analytics & more. Learn more Top comments (5) * Colum Ferry Colum Ferry Colum Ferry Follow Full Stack JS Developer and JS Enthusiast Location Northern Ireland W* Jun 21, 2019 • Aug 2 '* but due to how Next.js's folder-based routing works it isn't a great idea because Vercel will then try to deploy your tests This is interesting, I didn't know this. Awesome article! You make creating a bot for Twitch look easy! Can you do slack next 🤣 6 likes Like Reply Wes Copeland Wes Copeland Wes Copeland Follow 👋 Classic arcade nerd, passionate about developer experience and learning new things. Email wlcopeland1@gmail.com Location Boston, MA Work Senior Front-end Software Engineer at ApartmentAdvisor Joined Apr 21, 2019 • Aug *use Hey Colum, It looks like this is relatively straightforward to do with Slack :-) This article is a great reference that takes a very similar approach. It looks like all that needs to be done is: Create a new Slack app. Create a command with a Request URL. Install the app to your workspace. ... and you're done! 5 likes Like Reply Colum Ferry Colum Ferry Colum Ferry Follow Full Stack JS Developer and JS Enthusiast Location Northern Ireland W* Jun 21, 2019 • Aug *use That looks a lot nicer than some of the tutorials from slack themselves. 1 like Like Reply jonwiesman jonwiesman jonwiesman Follow Joined Jun 30, 2023 • Jun 30 '* I tried following the instructions and it created my project but when I tried npm run dev I got a ton of errors: SyntaxError: Unexpected token '??=' at wrapSafe (*:979:16) at Module._compile (*:1027:27) at Object.Module._extensions..js (*:1092:10) at Module.load (*:928:32) at Function.Module._load (*:769:14) at Module.require (*:952:19) at require (internal/modules/cjs/helpers.js:88:18) at Object. (C:\\Projects\\twitchbot\\node_modules\\next\\dist\\telemetry\\post-payload.js:17:20) at Module._compile (*:1063:30) at Object.Module._extensions..js (*:1092:10) npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! @ dev: next npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the @ dev script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. Is this out of date? 1 like Like Reply Miguel Manjarres Miguel Manjarres Miguel Manjarres Follow Passionate about software development. Always learning and studying new things. Location Colombia Education System Engineer Joined Jun 12, 2020 • Aug 2 '* Interesting and well explained 2 likes Like Reply * * memory management for JavaScript apps, *sia, and sharing GitHub resources for learning. * Inject HTML snippet from file Andrew Elans - Nov 5 UseEffect Behind the scenes in React joedev090 - Nov 5 Building a Modern React Library Star*rup Pal - Nov 9 React + AWS Cognito: Email Authentication Setup Guide (First Part) Jaime - Nov 5 Wes Copeland Follow 👋 Classic arcade nerd, passionate about developer experience and learning new things. Location Boston, MA Work Senior Front-end Software Engineer at ApartmentAdvisor Joined Apr 21, 2019 More from Wes Copeland Cypress Super-patterns: How to elevate the quality of your test suite #testing #react #angular #javascript How to Unit Test Firestore with Jest #testing #firebase #typescript #node Easier Angular Unit Testing #angular #testing #webdev #typescript Heroku *refer* 👋 ** * ",
    "url": "https://dev.to/wescopeland/how-to-build-test-twitch-chat-bot-commands-with-next-js-4j1g"
  },
  {
    "body": "* Follow Report Abuse M Fariz Wisnu prananda BackEnd Engineer at BlueBird Group | Programmer newbie | Wibu | my goal is to master Golang, Javascript, Laravel, React | I Love Vini Indonesia Joined on Dec 3, 2020 https://github.com/xvbnm48 Work BackEnd Engineer At BlueBird Group More info about @xvbnm48 Badges * Three * three years. Got it 1 * *20 *20 * Skills/Languages JAVASCRIPT,php,BOOTSTRAP, LARAVEL, NODE JS,Golang Currently learning Golang Available for collaborations 4 posts published 21 comments written 31 tags followed An Introduction to HTML: The Programming Language for Creating Web Pages * M Fariz Wisnu prananda Follow Dec 16 '22 An Introduction to HTML: The Programming Language for Creating Web Pages #webdev #html Ad*h M Fariz Wisnu prananda? * M Fariz Wisnu prananda. * Variable on Golang * M Fariz Wisnu prananda Follow Oct 30 '21 Variable on Golang #go #functional #beginners #tutorial 8 * How to calculate your age on mars * M Fariz Wisnu prananda Follow Oct 16 '21 How to calculate your age on mars #go #tutorial #beginners 6 *d Hello World with Go! * M Fariz Wisnu prananda Follow Sep 1 '21 Hello World with Go! #go 5 *n * ",
    "url": "https://dev.to/xvbnm48"
  },
  {
    "body": "* Follow Report Abuse ymc9 CTO | Full-stack developer | Blogger | Creator of ZenStack Joined on Aug 11, 2022 yiming@whimslab.io https://zenstack.dev Two * two years. Got it 2 Top 7 Awarded for having at least one post featured in the weekly \"must-reads\" list at any point. 🙌 Got it * Next.js Awarded to the top Next.js author each week Got it React Awarded to the top React author each week Got it One * one year. Got it 16 Week Writing Streak You are a writing star! *or 16 straight weeks. Congratulations! Got it 2 Week Co* 8 Week Writing Streak The st* * JavaScript Awarded to the top JavaScript author each week ** 1 We*t * More info about @ymc9 Organizations ZenStack Currently learning WASM Currently hacking on https://zenstack.dev 56 posts published 45 comments written 8 tags followed Pinned Things That Will Happen to Javascript Full-Stack Development in 2023 * Dec 30 '22 Things That Will Happen to Javascript Full-Stack Development in 2023 #javascript #fullstack #webdev #typescript 21 * 11 Tips That Make You a Better Typescript Programmer * Dec 23 '22 11 Tips That Make You a Better Typescript Programmer #* #frontend 526 reactions 37 comments 9 min read *! * Nov 7 Typing Prism*rm 21 reactions Add C*h ymc9? * ymc9. * Programmers, Will AI Work For You, With You, or Without You? * Oct 14 Programmers, Will AI Work For You, With You, or Without You? #ai #programming 20 * Rendering Prisma Queries With React Table: The Low-Code Way * Jul 21 Rendering Prisma Queries With React Table: The Low-Code Way #prisma #react #api #frontend 16 * Low-Code Backend Solution for Refine.dev Using Prisma and ZenStack * May 27 Low-Code Backend Solution for Refine.dev Using Prisma and ZenStack #webdev #react #lowcode #authorization 20 * Adapting ZenStack to the Edge: Our Struggles and Learnings * Apr 19 Adapting ZenStack to the Edge: Our Struggles and Learnings #webdev #edge #nextjs #prisma 19 *d The Many Ways Not to Build an API * Apr 1 The Many Ways Not to Build an API #api #webdev #restapi #graphql 24 * Building an Admin Console With Minimum Code Using React-Admin, Prisma, and Zenstack * Mar 11 Building an Admin Console With Minimum Code Using React-Admin, Prisma, and Zenstack #webdev #react #typescript #prisma 33 *ad * 2 * Feb 5 * 2 #webdev #authorization #security 25 *d Why Do Rubber Ducks Work? * Jan 30 Why Do Rubber Ducks Work? #programming #psychology #career 139 reactions 10 comments 6 min read How Much Work Does It Take to Build a Programming Language? * Jan 22 How Much Work Does It Take to Build a Programming Language? #compiler #language #typescript #dsl 34 reactions 6 comments 8 min read Modeling Authorization in Prisma - No Theory, Just Code * Jan 15 Modeling Authorization in Prisma - No Theory, Just Code #prisma #authorization #webdev #typescript 52 *d The Secrets to Having a Long and Fulfilling Career as a Programmer * Jan 8 The Secrets to Having a Long and Fulfilling Career as a Programmer 20 *d * - #4 Into the AI Era * Dec 29 '23 * - #4 Into the AI Era #webdev #ai #database #sql 57 *d Tackling Polymorphism in Prisma * Dec 21 '23 Tackling Polymorphism in Prisma #webdev #prisma #typescript #database 36 * * 1 * Dec 14 '23 * 1 #webdev #authorization #security 62 * * - #3 Better Developer Experience * Dec 8 '23 * - #3 Better Developer Experience #database #sql #webdev 24 * From Prisma to TanStack Query: Fast Lane to Full-Stack Type Safety * Nov 28 '23 From Prisma to TanStack Query: Fast Lane to Full-Stack Type Safety #prisma #fullstack #react #typescript 81 * Using AI to Generate Database Query Is Cool. But What About Access Control? * Nov 6 '23 Using AI to Generate Database Query Is Cool. But What About Access Control? #ai #webdev #javascript #prisma 88 * Is Next.js 13 + RSC a Good Choice? I Built an App Without Client-Side Javascript to Find Out * Oct 26 '23 Is Next.js 13 + RSC a Good Choice? I Built an App Without Client-Side Javascript to Find Out #nextjs #react #webdev #fullstack 102 reactions 4 comments 7 min read Drizzle or Prisma? I Built an App Twice to Find Out Which Is Better * Oct 10 '23 Drizzle or Prisma? I Built an App Twice to Find Out Which Is Better #webdev #prisma #drizzle #typescript 53 * * - #2 New Ways to Program * Sep 26 '23 * - #2 New Ways to Program #database #webdev #api #sql 38 * Building a Secure RESTful API Using NestJS and Prisma With Minimum Code * Sep 6 '23 Building a Secure RESTful API Using NestJS and Prisma With Minimum Code #nestjs #restapi #prisma #typescript 34 * ZenStack: The Complete Authorization Solution for Prisma Projects * Aug 29 '23 ZenStack: The Complete Authorization Solution for Prisma Projects #webdev #prisma #authorization #security 29 * * - #1 Serverless & Edge * Aug 16 '23 * - #1 Serverless & Edge #database #webdev #serverless #edge 29 * Replacing Google Firebase - An Open-Source Alternative Stack * Jul 24 '23 Replacing Google Firebase - An Open-Source Alternative Stack #webdev #firebase #opensource #database 19 *d Limitation of TRPC's Type Inference and How We Improved It * Jul 11 '23 Limitation of TRPC's Type Inference and How We Improved It #* #trpc 20 * Streamlining Form Validation in Your Javascript Stack * Jul 4 '23 Streamlining Form Validation in Your Javascript Stack #webdev #javascript #fullstack #tutorial 36 * Implementing Flexible Authorization in RedwoodJS Projects * Jun 22 '23 Implementing Flexible Authorization in RedwoodJS Projects #fullstack #webdev #redwood #javascript 20 *d Our Open Source Journey: Seven Months In and Counting * Jun 13 '23 Our Open Source Journey: Seven Months In and Counting #opensource #career #startup #webdev 19 * How to Host a RESTful API on Vercel * Jun 4 '23 How to Host a RESTful API on Vercel #api #rest #vercel #webdev 92 reactions 9 comments 14 min read For Most of Us, Simplification Rules * May 7 '23 For Most of Us, Simplification Rules #architecture #career #programming #startup 13 * Prisma + ZenStack: An Alternative to PostgREST * Apr 24 '23 Prisma + ZenStack: An Alternative to PostgREST #webdev #api #security #database 17 * Business Logic Inside Database - How Evil Is It? * Apr 17 '23 Business Logic Inside Database - How Evil Is It? #database #webdev 12 * Where Shall We Have Lunch? - From Survival To Sophistication * Apr 10 '23 Where Shall We Have Lunch? - From Survival To Sophistication #webdev #javascript #learning 12 * Three Ways to Secure Database APIs: Which Is Right for You? * Apr 3 '23 Three Ways to Secure Database APIs: Which Is Right for You? #api #security #orm #webdev 6 * Migrating From Django to Next.js: What’s the Equivalent for Django-Guardian? * Mar 26 '23 Migrating From Django to Next.js: What’s the Equivalent for Django-Guardian? #django #webdev #fullstack #python 8 react*ding a Secure Database-Centric OpenAPI in 15 Minutes * Mar 19 '23 Building a Secure Database-Centric OpenAPI in 15 Minutes #openapi #prisma #database #api 16 * Prisma Client Extensions: Use Cases and Pitfalls * Mar 12 '23 Prisma Client Extensions: Use Cases and Pitfalls #prisma #database #webdev #typescript 9 *d 8 Meta-learning Tips To Grow Your Skills as a Software Engineer * Mar 2 '23 8 Meta-learning Tips To Grow Your Skills as a Software Engineer #career #learning #beginners 14 * Exposing Databases to the Internet: Seriously? * Feb 24 '23 Exposing Databases to the Internet: Seriously? #database #security #webdev 32 * What Made Me Pay That $10/Mon For GitHub Copilot * Feb 17 '23 What Made Me Pay That $10/Mon For GitHub Copilot #programming #ai #productivity #github 6 *d Decoding the Evolving Landscape of Web Development * Feb 11 '23 Decoding the Evolving Landscape of Web Development #webdev #programming #javascript #fullstack 8 * Modern Web Architecture Without a Backend With Prisma + ZenStack * Feb 9 '23 Modern Web Architecture Without a Backend With Prisma + ZenStack #webdev #fullstack #prisma #database 8 react*ding a Cal.com Clone With Remix + Prisma + ZenStack * Feb 4 '23 Building a Cal.com Clone With Remix + Prisma + ZenStack #remix #webdev #prisma #tutorial 12 *ad Implementing Cross-cut Concerns with Javascript Proxy: A Practical Example * Jan 28 '23 Implementing Cross-cut Concerns with Javascript Proxy: A Practical Example #* #prisma 13 * Full-stack Without Coding a Backend Using Supabase * Jan 20 '23 Full-stack Without Coding a Backend Using Supabase #webdev #fullstack #frontend #supabase 19 * Backend-less Web Development With PostgREST * Jan 13 '23 Backend-less Web Development With PostgREST #webdev #frontend #postgres #fullstack 36 * What Are People Building With WebAssembly? * Jan 6 '23 What Are People Building With WebAssembly? 106 reactions 10 comments 6 min read Authorize Users Like a Pro: Libraries That Help You Implement Access Control With Node.js * Dec 16 '22 Authorize Users Like a Pro: Libraries That Help You Implement Access Control With Node.js #security #javascript #node #webdev 40 reactions 5 comments 9 min read Deep Dive Into Next.js 13 Data Fetching * Dec 9 '22 Deep Dive Into Next.js 13 Data Fetching #react #webdev #fullstack #nextjs 38 reactions 4 comments 8 min read Quick Overview of Next.js 13 Routing System * Dec 1 '22 Quick Overview of Next.js 13 Routing System #nextjs #react #fullstack #webdev 20 * Fun With Next.js 13 Server Components * Nov 25 '22 Fun With Next.js 13 Server Components #nextjs #react #fullstack #webdev 46 reactions 11 comments 5 min read Frontend, Backend, and the Blurring Line In-Between * Nov 17 '22 Frontend, Backend, and the Blurring Line In-Between #fullstack #webdev #backend #frontend 23 reactions Ad* ZenStack: a schema-first toolkit for creating CRUD services in Next.js projects * Nov 13 '22 Introducing ZenStack: a schema-first toolkit for creating CRUD services in Next.js projects #nextjs #crud #fullstack #type* 1 *onsor Neon * ",
    "url": "https://dev.to/ymc9"
  },
  {
    "body": "* Follow Report Abuse Yousuf Kalim Web developer building great user experiences and occasionally participate in hackathons. Lahore, Pakistan Joined on Nov 25, 2021 https://yousufkalim.com Education BSSE - University of Lahore Work MERN Stack Team Lead More info about @yousufkalim Badges * Two * two years. Got it * HTML, CSS, JavaScript, TypeScript, React, Redux, Angular, Node, Express, MongoDB, AWS, GC, DigitalOcean, Firebase & etc Currently learning I’m currently learning Python and mathematics required for ML and Data Science. Available for I’m looking to collaborate on some cool and open source Javascript projects. 1 post published 4 * Use GitHub Actions to Automate Your CI/CD for React and Node.js Applications on Ubuntu Yousuf Kalim Yousuf Kalim Yousuf Kalim Follow May 18 '23 Use GitHub Actions to Automate Your CI/CD for React and Node.js Applications on Ubuntu #githubactions #react #node #cicd 4 *d Want to connect with Yousuf Kalim? * Yousuf Kalim. * * * ",
    "url": "https://dev.to/yousufkalim"
  },
  {
    "body": "* Follow Report Abuse Xiao Ling 404 bio not found Joined on Mar 10, 2021 Three * three years. Got it * 16 Week Writing Streak You are a writing star! *or 16 straight weeks. Congratulations! Got it Two * two years. ** * One * one year. ** More info about @yushulx GitHub Repositories flutter_barcode_sdk Build barcode QR detection apps for Windows, Linux, macOS, Android, iOS and web. C • 46 stars flutter_qrcode_scanner Java • 3 stars 173 posts published 4 * How to Create an MRZ Scanner App for Android and iOS with .NET MAUI * Nov 8 How to Create an MRZ Scanner App for Android and iOS with .NET MAUI #dotnet #dotnetmaui #mrz #mobile Add Comment 5 min read Want to connect with Xiao Ling? * Xiao Ling. * Creating a .NET MAUI Document Scanner: Capture, Normalize, and Share Documents Effortlessly * Nov 6 Creating a .NET MAUI Document Scanner: Capture, Normalize, and Share Documents Effortlessly #dotnet #dotnetmaui #android #ios Add Comment 4 min read Decoding 1D/2D B* * Nov 4 Decoding 1D/2D B* #cpp #node #pdf #barcode * How to Build a PWA Document Scanner: Capture, Edit and Upload as PDF * Oct 24 How to Build a PWA Document Scanner: Capture, Edit and Upload as PDF #webdev #javascript #pwa #document * How to Build a Python Barcode Scanner for Windows, Linux, and macOS * Oct 22 How to Build a Python Barcode Scanner for Windows, Linux, and macOS #programming #python #barcode #qrcode 4 *d How to Implement Machine Readable Zone (MRZ) Recognition in Python * Oct 18 How to Implement Machine Readable Zone (MRZ) Recognition in Python #programming #python #mrz #passport * How to Implement Document Detection in Python Using Dynamsoft Capture Vision SDK * Oct 16 How to Implement Document Detection in Python Using Dynamsoft Capture Vision SDK #python #document #macos #* 7 min read How to Digitize Documents in a Blazor Web App Using TWAIN, WIA, SANE, ICA, and eSCL Scanners * Sep 25 How to Digitize Documents in a Blazor Web App Using TWAIN, WIA, SANE, ICA, and eSCL Scanners #webdev #blazor #dotnet #javascript Add Comment 6 min read How to Integrate MRZ Recognition into a Blazor Web Application * Sep 20 How to Integrate MRZ Recognition into a Blazor Web Application #webdev #dotnet #blazor #mrz Add Comment 8 min read How to Create a Blazor Web App for Document PDF Viewing and Annotation * Sep 14 How to Create a Blazor Web App for Document PDF Viewing and Annotation #webdev #dotnet #blazor #pdf Add Comment 6 min read How to Build a .NET Blazor Application for Scanning Barcode and QR Code * Sep 12 How to Build a .NET Blazor Application for Scanning Barcode and QR Code #webdev #dotnet #blazor #qrcode 3 * Developing a Desktop MRZ Scanner for Passports, IDs, and Visas with Dynamsoft C++ Capture Vision SDK * Sep 6 Developing a Desktop MRZ Scanner for Passports, IDs, and Visas with Dynamsoft C++ Capture Vision SDK #cpp #mrz #passport #ocr Add Comment 11 min read Effortlessly Recognize US Driver's Licenses in Android Apps * Aug 30 Effortlessly Recognize US Driver's Licenses in Android Apps #android #driverlicense #pdf417 #mobile 2 react*ding an Angular Document Viewer for Image Loading, Annotation, and PDF Export * Aug 22 Building an Angular Document Viewer for Image Loading, Annotation, and PDF Export #webdev #angular #typescript #pdf * Building Document PDF Scanner for Windows, Android and iOS with .NET MAUI Blazor * Aug 12 Building Document PDF Scanner for Windows, Android and iOS with .NET MAUI Blazor #dotnet #blazor #csharp #webview * Steps to Develop an Angular Passport MRZ Reader & Scanner * Aug 6 Steps to Develop an Angular Passport MRZ Reader & Scanner #webdev #typescript #angular #ocr * Switching from .NET MAUI Blazor to WebView Control for Document Scanning * Jul 29 Switching from .NET MAUI Blazor to WebView Control for Document Scanning #dotnet #programming #webview #javascript Add Comment 9 min read Developing a Desktop Document Scanner Application with .NET MAUI Blazor * Jul 18 Developing a Desktop Document Scanner Application with .NET MAUI Blazor #dotnet #csharp #blazor #webview 2 * Building a .NET TWAIN Document Scanner Application for Windows and macOS using MAUI * Jul 9 Building a .NET TWAIN Document Scanner Application for Windows and macOS using MAUI #dotnet #maui #document #scanner * Building .NET MAUI Barcode Scanner with Visual Studio Code on macOS * Jul 3 Building .NET MAUI Barcode Scanner with Visual Studio Code on macOS #dotnet #maui #csharp #android Add Comment 8 min read Building a Desktop C++ Barcode Scanner with Slimmed-Down OpenCV and Webcam * Jun 19 Building a Desktop C++ Barcode Scanner with Slimmed-Down OpenCV and Webcam #cpp #opencv #cmake #camera * Scanning Documents to Web Pages with JavaScript and Dynamic Web TWAIN RESTful API * Jun 18 Scanning Documents to Web Pages with JavaScript and Dynamic Web TWAIN RESTful API #* #restapi A* a Command-Line Barcode Reader with Rust and C++ Barcode SDK * Jun 6 How to Build a Command-Line Barcode Reader with Rust and C++ Barcode SDK #rust #cpp #windows #linux 4 * Mastering Parcel Scanning with C++: Barcode and OCR Text Extraction * May 24 Mastering Parcel Scanning with C++: Barcode and OCR Text Extraction #cpp #ocr #barcode #desktop Add Comment 8 min read Web Parcel Management: Scan 1D Barcodes and Recognize Surrounding Text in Any Orientation * May 16 Web Parcel Management: Scan 1D Barcodes and Recognize Surrounding Text in Any Orientation #webdev #javascript #ocr #barcode Add Comment 6 min read Implementing Flutter QR Code Scanner with Swift and AVFoundation for iOS * May 8 Implementing Flutter QR Code Scanner with Swift and AVFoundation for iOS #flutter #ios #swift #dart * Implementing Flutter Barcode Scanner with Kotlin and CameraX for Android * Apr 28 Implementing Flutter Barcode Scanner with Kotlin and CameraX for Android #flutter #android #kotlin #camera 2 *d Integrating Third-Party iOS Frameworks into a Qt6 Barcode and QR Code Scanner * Apr 9 Integrating Third-Party iOS Frameworks into a Qt6 Barcode and QR Code Scanner #qt #ios #qrcode #cpp Add Comment 7 min read Developing a Web Application for Reading Multiple Barcodes with Go and HTML5 * Mar 26 Developing a Web Application for Reading Multiple Barcodes with Go and HTML5 Add Comment 5 min read Linking and Loading *.dylib Files in Go Barcode Reader Modules on macOS * Mar 20 Linking and Loading *.dylib Files in Go Barcode Reader Modules on macOS #go #macos #cgo Add Comment 5 min read Integrating Dynamsoft's C++ Barcode SDK v10 into Go Module with a C Wrapper * Mar 18 Integrating Dynamsoft's C++ Barcode SDK v10 into Go Module with a C Wrapper #go #cpp #cgo Add Comment 7 min read Developing .NET MAUI iOS Apps to Scan Barcode, Document and MRZ * Mar 7 Developing .NET MAUI iOS Apps to Scan Barcode, Document and MRZ #dotnet #maui #ios #csharp 1 comment 6 min read How to Build a NuGet Package with iOS Frameworks for .NET MAUI Development * Feb 29 How to Build a NuGet Package with iOS Frameworks for .NET MAUI Development #ios #mobile #dotnet #maui * How to Build a Web App to Scan Barcode, Document, and MRZ with JavaScript APIs * Feb 21 How to Build a Web App to Scan Barcode, Document, and MRZ with JavaScript APIs #webdev #* 10 *ad Empowering .NET MAUI Android Apps with Document and MRZ Detection * Jan 25 Empowering .NET MAUI Android Apps with Document and MRZ Detection #dotnet #maui #android #programming Add Comment 9 min read Integrating Document and MRZ Detection SDK into .NET MAUI for Windows * Jan 18 Integrating Document and MRZ Detection SDK into .NET MAUI for Windows #csharp #dotnet #maui #window*o Edit and Convert PDF, PNG, JPEG, and TIFF Files in Blazor Apps * Jan 12 How to Edit and Convert PDF, PNG, JPEG, and TIFF Files in Blazor Apps #blazor #webdev #csharp #programming Add Comment 9 min read How to Build Flet Chat App with Barcode and Gemini APIs * Jan 8 How to Build Flet Chat App with Barcode and Gemini API*o Develop Web Document Image Viewer, Editor and Converter in JavaScript * Jan 5 How to Develop Web Document Image Viewer, Editor and Converter in JavaScript #* #document Add Comment 6 min read * Document Detection and Rectification * Dec 28 '23 * Document Detection and Rectification #dotnet #blazor #csharp #webdev 2 * * Passport MRZ Recognition * Dec 21 '23 * Passport MRZ Recognition #webdev #dotnet #csharp #razor Add Comment 8 min read * Web Camera Access * Dec 15 '23 * Web Camera Access #webdev #dotnet #csharp #blazor 2 comments 7 min read How to Upload Images in Power Apps for Barcode, MRZ, and Document Detection * Dec 11 '23 How to Upload Images in Power Apps for Barcode, MRZ, and Document Detection #powerapps #powerplatform #powerautomate #lowcode 4 * How to Build REST Endpoints with Node.js and Dynamsoft Vision SDKs * Dec 5 '23 How to Build REST Endpoints with Node.js and Dynamsoft Vision SDKs #node #javascript #programming #restapi * an AR-Enhanced Pharma Lookup App with Flutter, Dynamsoft Barcode SDK and Database * Nov 30 '23 Building an AR-Enhanced Pharma Lookup App with Flutter, Dynamsoft Barcode SDK and Database #flutter #webdev #programming #mobile * Windows Desktop Barcode Reader with Win32 API and Dynamsoft C++ Barcode SDK * Nov 28 '23 Building Windows Desktop Barcode Reader with Win32 API and Dynamsoft C++ Barcode SDK #cpp #windows #win32 #barcode Add Comment 6 min read How to Create A Windows Installer for Dynamsoft Service and .NET Document Scanner Application * Nov 23 '23 How to Create A Windows Installer for Dynamsoft Service and .NET Document Scanner Application #windows #installer #wix #msi * * JavaScript Barcode Scanner * Nov 20 '23 * JavaScript Barcode Scanner #webdev #dotnet #csharp #blazor Add Comment 6 min read * JavaScript Barcode Reader * Nov 14 '23 * JavaScript Barcode Reader #webdev #blazor #dotnet #csharp * Building Node.js C++ Addon for Document Edge Detection and Rectification * Nov 8 '23 Building Node.js C++ Addon for Document Edge Detection and Rectification #node #javascript #cpp #programming 9 reactions 1 comment 14 min read Blazor WebAssembly: Building Web Apps for Digitizing Documents with C# and .NET * Nov 2 '23 Blazor WebAssembly: Building Web Apps for Digitizing Documents with C# and .NET #blazor #csharp #dotnet #webdev * a .NET RESTful Service with Dynamsoft's Document, Barcode, and MRZ SDKs * Oct 27 '23 Building a .NET RESTful Service with Dynamsoft's Document, Barcode, and MRZ SDKs #webdev #dotnet #csharp #javascript Add Comment 12 min read How to Build an Online MRZ Generator with Python, Pyodide and HTML5 * Oct 16 '23 How to Build an Online MRZ Generator with Python, Pyodide and HTML5 #python #webdev #javascript #webassembly * Building .NET Apps for Scanning Documents from TWAIN, WIA, SANE, and eSCL Scanners * Oct 11 '23 Building .NET Apps for Scanning Documents from TWAIN, WIA, SANE, and eSCL Scanners #dotnet #csharp #* 8 min read How to Scan Documents from TWAIN, WIA, SANE Compatible Scanners in Python * Sep 28 '23 How to Scan Documents from TWAIN, WIA, SANE Compatible Scanners in Python #python #flet #scanner #* Power Apps Dev: Integrating Document Scanning Functionality into Canvas App * Sep 22 '23 Power Apps Dev: Integrating Document Scanning Functionality into Canvas App #powerapps #powerautomate #powerplatform #documentscan * Integrating Android MRZ Recognition in .NET MAUI: From AAR Files to a NuGet Package to a Complete App * Sep 21 '23 Integrating Android MRZ Recognition in .NET MAUI: From AAR Files to a NuGet Package to a Complete App #dotnet #android #androiddev #maui * a Document Digitization App with Flutter for TWAIN, WIA, and eSCL Scanners * Sep 15 '23 Building a Document Digitization App with Flutter for TWAIN, WIA, and eSCL Scanners #flutter #dart #scanner #* How to Enhance Passport MRZ Detection in Python by Correcting Image Orientation * Sep 13 '23 How to Enhance Passport MRZ Detection in Python by Correcting Image Orientation #python #mrz #passport #computervision 4 * Dynamsoft Service REST API Preview - Scan Documents in Node.js * Sep 11 '23 Dynamsoft Service REST API Preview - Scan Documents in Node.js #node #javascript #programming #desktop Add Comment 7 *onsor Neon * ",
    "url": "https://dev.to/yushulx"
  },
  {
    "body": "* 1 A*ead 0 * 0 * Xiao Ling Posted on Nov 4 • Originally published at dynamsoft.com 1 Decoding 1D/2D B* #cpp #node #pdf #barcode While many barcode SDKs can decode barcodes from images, only a few excel at extracting 1D and 2D barcodes from multi-page PDF files. This is where the Dynamsoft Barcode Reader SDK stands out, offering robust capabilities to accurately scan and decode barcodes across multiple pages within PDFs. In this tutorial, we will start by using Dynamsoft C++ Barcode SDK v10.x to tackle the challenges of PDF barcode decoding and then integrate the functionality into a Node.js addon, helping developers streamline barcode extraction from complex PDF documents. Node.js Barcode Reader Demo Video Prerequisites Obtain a Dynamsoft Capture Vision Trial License. Create a multi-page PDF file using this free online tool provided by Dynamsoft. A Simple C++ Program to Decode Barcodes from Images To get started with the C++ API of the Dynamsoft Barcode Reader SDK, you can refer to the ReadAnImage.cpp file provided in the official repository. #include <iostream> #include <string> #include \"../../../Include/DynamsoftCaptureVisionRouter.h\" using namespace std; using namespace dynamsoft::license; using namespace dynamsoft::cvr; using namespace dynamsoft::dbr; using namespace dynamsoft::basic_structures; #if defined(_WIN64) || defined(_WIN32) #ifdef _WIN64 #pragma comment(lib, \"../../../Distributables/Lib/Windows/x64/DynamsoftLicensex64.lib\") #pragma comment(lib, \"../../../Distributables/Lib/Windows/x64/DynamsoftCaptureVisionRouterx64.lib\") #else #pragma comment(lib, \"../../../Distributables/Lib/Windows/x86/DynamsoftLicensex86.lib\") #pragma comment(lib, \"../../../Distributables/Lib/Windows/x86/DynamsoftCaptureVisionRouterx86.lib\") #endif #endif int main() { int errorCode = 1; char errorMsg[512]; errorCode = CLicenseManager::InitLicense(\"LICENSE-KEY\", errorMsg, 512); if (errorCode != ErrorCode::EC_OK && errorCode != ErrorCode::EC_LICENSE_CACHE_USED) { cout << \"License initialization failed: ErrorCode: \" << errorCode << \", ErrorString: \" << errorMsg << endl; } else { CCaptureVisionRouter *cvr = new CCaptureVisionRouter; string imageFile = \"../../../Images/GeneralBarcodes.png\"; CCapturedResult *result = cvr->Capture(imageFile.c_str(), CPresetTemplate::PT_READ_BARCODES); if (result->GetErrorCode() != 0) { cout << \"Error: \" << result->GetErrorCode() << \",\" << result->GetErrorString() << endl; } CDecodedBarcodesResult *barcodeResult = result->GetDecodedBarcodesResult(); if (barcodeResult == nullptr || barcodeResult->GetItemsCount() == 0) { cout << \"No barcode found.\" << endl; } else { int barcodeResultItemCount = barcodeResult->GetItemsCount(); cout << \"Decoded \" << barcodeResultItemCount << \" barcodes\" << endl; for (int j = 0; j < barcodeResultItemCount; j++) { const CBarcodeResultItem *barcodeResultItem = barcodeResult->GetItem(j); cout << \"Result \" << j + 1 << endl; cout << \"Barcode Format: \" << barcodeResultItem->GetFormatString() << endl; cout << \"Barcode Text: \" << barcodeResultItem->GetText() << endl; } } if (barcodeResult) barcodeResult->Release(); if (result) result->Release(); delete cvr, cvr = NULL; } cout << \"Press any key to quit...\" << endl; cin.ignore(); return 0; } The primary methods used in the code snippet above are InitLicense() and Capture(): InitLicense() initializes the SDK with your license key. Capture() processes the specified image file to decode barcodes and returns the results. Note: Supported image formats include BMP, JPEG, PNG, single-page TIFF and single-page PDF. For multi-page TIFF/PDF files, use the CFileFetcher class to handle page-by-page processing. Reading Barcodes from Multi-Page PDFs Let's modify the implementation to read barcodes from multi-page PDF files. Create a MyImageSourceStateListener class that inherits from CImageSourceStateListener. This class listens for image source states and stops capturing when the image source is exhausted. class MyImageSourceStateListener : public CImageSourceStateListener { private: CCaptureVisionRouter *m_router; public: MyImageSourceStateListener(CCaptureVisionRouter *router) { m_router = router; } virtual void OnImageSourceStateReceived(ImageSourceState state) { if (state == ISS_EXHAUSTED) m_router->StopCapturing(); } }; Create a MyCapturedResultReceiver class that inherits from CCapturedResultReceiver. This class receives decoded barcode results from any image source. The fileTag->GetPageNumber() method retrieves the page number of the image in the PDF or TIFF file. class MyCapturedResultReceiver : public CCapturedResultReceiver { virtual void OnDecodedBarcodesReceived(CDecodedBarcodesResult *pResult) override { if (pResult->GetErrorCode() != EC_OK) { cout << \"Error: \" << pResult->GetErrorString() << endl; } else { auto tag = pResult->GetOriginalImageTag(); if (tag) { cout << \"ImageID:\" << tag->GetImageId() << endl; CFileImageTag *fileTag = (CFileImageTag *)tag; cout << \"Page number:\" << fileTag->GetPageNumber() << endl; } int count = pResult->GetItemsCount(); cout << \"Decoded \" << count << \" barcodes\" << endl; for (int i = 0; i < count; i++) { const CBarcodeResultItem *barcodeResultItem = pResult->GetItem(i); if (barcodeResultItem != NULL) { cout << \"Result \" << i + 1 << endl; cout << \"Barcode Format: \" << barcodeResultItem->GetFormatString() << endl; cout << \"Barcode Text: \" << barcodeResultItem->GetText() << endl; } } } cout << endl; } }; Instantiate the CFileFetcher class and set the PDF file path. CFileFetcher *fileFetcher = new CFileFetcher(); cvr->SetInput(fileFetcher); Read barcodes from the PDF file. Setting the second parameter of StartCapturing() to true blocks the main thread until the capturing process is complete. cvr->SetInput(fileFetcher); cvr->AddResultReceiver(capturedReceiver); cvr->AddImageSourceStateListener(listener); char errorMsg[512] = {0}; int errorCode = cvr->StartCapturing(CPresetTemplate::PT_READ_BARCODES, true, errorMsg, 512); The Complete C++ Program #include <stdio.h> #include <string> #include <vector> #if defined(_WIN32) || defined(_WIN64) #include <windows.h> #include <conio.h> #include <io.h> #else #include <cstring> #include <dirent.h> #include <sys/time.h> #endif #include <fstream> #include <streambuf> #include <iostream> #include <sstream> #include \"DynamsoftCaptureVisionRouter.h\" #include \"DynamsoftUtility.h\" #include \"template.h\" using namespace std; using namespace dynamsoft::license; using namespace dynamsoft::cvr; using namespace dynamsoft::dbr; using namespace dynamsoft::utility; using namespace dynamsoft::basic_structures; class MyCapturedResultReceiver : public CCapturedResultReceiver { virtual void OnDecodedBarcodesReceived(CDecodedBarcodesResult *pResult) override { if (pResult->GetErrorCode() != EC_OK) { cout << \"Error: \" << pResult->GetErrorString() << endl; } else { auto tag = pResult->GetOriginalImageTag(); if (tag) { cout << \"ImageID:\" << tag->GetImageId() << endl; CFileImageTag *fileTag = (CFileImageTag *)tag; cout << \"Page number:\" << fileTag->GetPageNumber() << endl; } int count = pResult->GetItemsCount(); cout << \"Decoded \" << count << \" barcodes\" << endl; for (int i = 0; i < count; i++) { const CBarcodeResultItem *barcodeResultItem = pResult->GetItem(i); if (barcodeResultItem != NULL) { cout << \"Result \" << i + 1 << endl; cout << \"Barcode Format: \" << barcodeResultItem->GetFormatString() << endl; cout << \"Barcode Text: \" << barcodeResultItem->GetText() << endl; } } } cout << endl; } }; class MyImageSourceStateListener : public CImageSourceStateListener { private: CCaptureVisionRouter *m_router; public: MyImageSourceStateListener(CCaptureVisionRouter *router) { m_router = router; } virtual void OnImageSourceStateReceived(ImageSourceState state) { if (state == ISS_EXHAUSTED) m_router->StopCapturing(); } }; bool GetImagePath(char *pImagePath) { std::string input; while (true) { std::cout << \"\\n>> Step 1: Input your image file's full path:\\n\"; std::getline(std::cin, input); input.erase(0, input.find_first_not_of(\" \\t\\n\\r\\\"\\'\")); // Trim leading input.erase(input.find_last_not_of(\" \\t\\n\\r\\\"\\'\") + 1); // Trim trailing if (input == \"q\" || input == \"Q\") { return true; } std::strncpy(pImagePath, input.c_str(), 511); pImagePath[511] = '\\0'; std::ifstream file(pImagePath); if (file.good()) { file.close(); return false; } std::cout << \"Please input a valid path.\\n\"; } } int main(int argc, char *argv[]) { printf(\"*************************************************\\r\\n\"); printf(\"Welcome to Dynamsoft Barcode Demo\\r\\n\"); printf(\"*************************************************\\r\\n\"); printf(\"Hints: Please input 'Q' or 'q' to quit the application.\\r\\n\"); int iRet = -1; char szErrorMsg[256]; iRet = CLicenseManager::InitLicense(LICENSE-KEY, szErrorMsg, 256); if (iRet != EC_OK) { cout << szErrorMsg << endl; } int errorCode = 1; char errorMsg[512] = {0}; CCaptureVisionRouter *cvr = new CCaptureVisionRouter; errorCode = cvr->InitSettings(jsonString.c_str(), errorMsg, 512); if (errorCode != EC_OK) { cout << \"error:\" << errorMsg << endl; return -1; } char pszImageFile[512] = {0}; bool bExit = false; CImageSourceStateListener *listener = new MyImageSourceStateListener(cvr); CFileFetcher *fileFetcher = new CFileFetcher(); CCapturedResultReceiver *capturedReceiver = new MyCapturedResultReceiver; cvr->SetInput(fileFetcher); cvr->AddResultReceiver(capturedReceiver); cvr->AddImageSourceStateListener(listener); while (1) { bExit = GetImagePath(pszImageFile); if (bExit) break; float costTime = 0.0; int errorCode = 0; string path = string(pszImageFile); fileFetcher->SetFile(pszImageFile); errorCode = cvr->StartCapturing(CPresetTemplate::PT_READ_BARCODES, true, errorMsg, 512); } delete cvr, cvr = NULL, listener, capturedReceiver, fileFetcher; return 0; } Integrating C++ Barcode Decoding Functionality into a Node.js Addon We have an existing Node.js barcode SDK project, barcode4nodejs, built with Dynamsoft C++ Barcode SDK v9.x. The following steps outline how to upgrade the underlying C++ barcode decoding functionality to v10.x with minimal changes: no modifications are needed for the JavaScript code, while only a few adjustments are required for the C++ part. Update the shared libraries in the platforms folder for Windows, Linux and macOS. Modify the binding.gyp to link the new shared libraries. { ... \"targets\": [ { ... \"conditions\": [ [\"OS=='linux'\", { \"defines\": [\"LINUX_DBR\"], \"cflags\": [\"-std=c++11\", \"-DNAPI_CPP_EXCEPTIONS\", \"-fexceptions\"], \"cflags_cc\": [\"-std=c++11\", \"-DNAPI_CPP_EXCEPTIONS\", \"-fexceptions\"], \"ldflags\": [\"-Wl,-rpath,'$$ORIGIN'\"], \"libraries\": [ \"-lDynamsoftCore\", \"-lDynamsoftLicense\", \"-lDynamsoftCaptureVisionRouter\", \"-lDynamsoftUtility\", \"-L../platforms/linux/<(arch)\" ], \"copies\": [ { \"destination\": \"build/Release/\", \"files\": [ \"./*icImage.*ibDynamicPdf.*ibDynamicPdfCore.*ibDynamsoftBarcodeReader.*ibDynamsoftCaptureVisionRouter.*ibDynamsoftCore.*ibDynamsoftImageProcessing.*ibDynamsoftLicense.*ibDynamsoftUtility.so\", ] } ] }], [\"OS=='win'\", { \"defines\": [\"WINDOWS_DBR\", \"NAPI_CPP_EXCEPTIONS\"], \"libraries\": [ \"-l../platforms/windows/DynamsoftCorex64.lib\", \"-l../platforms/windows/DynamsoftLicensex64.lib\", \"-l../platforms/windows/DynamsoftCaptureVisionRouterx64.lib\", \"-l../platforms/windows/DynamsoftUtilityx64.lib\" ], \"copies\": [ { \"destination\": \"build/Release/\", \"files\": [ \"./platforms/windows/DynamicImagex6*icPdfCorex6*icPdfx6*softBarcodeReaderx6*softCaptureVisionRouterx6*softCorex6*softImageProcessingx6*softLicensex6*softUtility*/vcomp140.dll\" ] } ] }], [\"OS=='mac'\", { \"defines\": [\"MAC_DBR\"], \"cflags\": [\"-std=c++11\", \"-DNAPI_CPP_EXCEPTIONS\"], \"cflags_cc\": [\"-std=c++11\", \"-DNAPI_CPP_EXCEPTIONS\"], \"ldflags\": [\"-Wl,-rpath,@loader_path\"], \"libraries\": [ \"-lDynamsoftCore\", \"-lDynamsoftLicense\", \"-lDynamsoftCaptureVisionRouter\", \"-lDynamsoftUtility\", \"-L../platforms/macos\" ], \"copies\": [ { \"destination\": \"build/Release/\", \"files\": [ \"./platforms/macos/libDynamicImagex64.*icPdf.*icPdfCore.*softBarcodeReader.*softCaptureVisionRouter.*softCore.*softImageProcessing.*softLicense.*softUtility.dylib\", ] } ] }] ] } ] } Copy the necessary header files to the src folder. DynamsoftBarcodeReader.h DynamsoftCaptureVisionRouter.h DynamsoftCodeParser.h DynamsoftCore.h DynamsoftDocumentNormalizer.h DynamsoftImageProcessing.h DynamsoftLabelRecognizer.h DynamsoftLicense.h DynamsoftUtility.h template.h Add CCaptureVisionRouter *, CFileFetcher *, CImageSourceStateListener *, and MyCapturedResultReceiver * pointers as members of the BarcodeReader class in dbr.h. #ifndef DBR_H #define DBR_H #include <napi.h> #include <string> #include <uv.h> #include <vector> #include \"DynamsoftCaptureVisionRouter.h\" #include \"DynamsoftUtility.h\" using namespace std; using namespace dynamsoft::license; using namespace dynamsoft::cvr; using namespace dynamsoft::dbr; using namespace dynamsoft::utility; using namespace dynamsoft::basic_structures; class MyCapturedResultReceiver : public CCapturedResultReceiver { public: vector<CDecodedBarcodesResult *> results; public: virtual void OnDecodedBarcodesReceived(CDecodedBarcodesResult *pResult) override; }; typedef enum { NO_BUFFER, FILE_STREAM, YUYV_BUFFER, BASE64, RGB_BUFFER, } BufferType; struct BarcodeWorker { uv_work_t request; Napi::FunctionReference callback; int iFormat; std::string filename; vector<CDecodedBarcodesResult *> pResults; unsigned char *buffer; int size; int errorCode; int width; int height; BufferType bufferType; bool useTemplate; int stride; std::string base64string; std::string templateContent; int elapsedTime; CCaptureVisionRouter *handler; MyCapturedResultReceiver *capturedReceiver; CFileFetcher *fileFetcher; }; class MyImageSourceStateListener : public CImageSourceStateListener { private: CCaptureVisionRouter *m_router; BarcodeWorker *m_worker; public: MyImageSourceStateListener(CCaptureVisionRouter *router); virtual void OnImageSourceStateReceived(ImageSourceState state) override; }; class BarcodeReader : public Napi::ObjectWrap<BarcodeReader> { ... private: CCaptureVisionRouter *handler; CFileFetcher *fileFetcher; CImageSourceStateListener *listener; MyCapturedResultReceiver *capturedReceiver; static Napi::FunctionReference constructor; ... }; #endif // DBR_H Update C++ implementation in dbr.cc: Instantiate CCaptureVisionRouter, MyImageSourceStateListener, CFileFetcher, and MyCapturedResultReceiver in the BarcodeReader constructor. BarcodeReader::BarcodeReader(const Napi::CallbackInfo &info) : Napi::ObjectWrap<BarcodeReader>(info) { Napi::Env env = info.Env(); handler = new CCaptureVisionRouter; char errorMsgBuffer[256]; int ret = handler->InitSettings(jsonString.c_str(), errorMsgBuffer, 256); if (ret) { printf(\"InitSettings: %s\\n\", errorMsgBuffer); } listener = new MyImageSourceStateListener(handler); fileFetcher = new CFileFetcher(); handler->SetInput(fileFetcher); capturedReceiver = new MyCapturedResultReceiver; handler->AddResultReceiver(capturedReceiver); handler->AddImageSourceStateListener(listener); } Implement the callback functions to track the image processing lifecycle and store barcode results for later use. Use Retain() to prevent auto-release of results. void MyCapturedResultReceiver::OnDecodedBarcodesReceived(CDecodedBarcodesResult *pResult) { pResult->Retain(); results.push_back(pResult); } MyImageSourceStateListener::MyImageSourceStateListener(CCaptureVisionRouter *router) { m_router = router; } void MyImageSourceStateListener::OnImageSourceStateReceived(ImageSourceState state) { if (state == ISS_EXHAUSTED) { m_router->StopCapturing(); } } Call StartCapturing() in the ProcessImage() function to initiate barcode detection on the built-in thread pool. The main thread will remain blocked until all barcode decoding tasks are complete. void BarcodeReader::ProcessImage(BarcodeWorker *worker) { CCaptureVisionRouter *handler = worker->handler; CCapturedResult *result = NULL; if (!worker->useTemplate) { SimplifiedCaptureVisionSettings pSettings = {}; handler->GetSimplifiedSettings(\"\", &pSettings); pSettings.barcodeSettings.barcodeFormatIds = worker->iFormat <= 0 ? BF_ALL : worker->iFormat; char szErrorMsgBuffer[256]; handler->UpdateSettings(\"\", &pSettings, szErrorMsgBuffer, 256); } else { char errorMessage[256]; int ret = handler->InitSettings(worker->templateContent.c_str(), errorMessage, 256); if (ret) { printf(\"Returned value: %d, error message: %s\\n\", ret, errorMessage); } } int starttime = gettime(); int ret = 0; switch (worker->bufferType) { case FILE_STREAM: if (worker->buffer) { worker->fileFetcher->SetFile(worker->buffer, worker->size); } break; case YUYV_BUFFER: if (worker->buffer) { int width = worker->width, height = worker->height; int size = width * height; int index = 0; unsigned char *data = new unsigned char[size]; for (int i = 0; i < size; i++) { data[i] = worker->buffer[index]; index += 2; } CImageData *imageData = new CImageData(size, data, width, height, width, IPF_GRAYSCALED); worker->fileFetcher->SetFile(imageData); delete imageData, imageData = NULL; delete[] data, data = NULL; } break; case BASE64: if (worker->base64string != \"\") { worker->fileFetcher->SetFile(worker->buffer, worker->size); } break; case RGB_BUFFER: if (worker->buffer) { int width = worker->width, height = worker->height, stride = worker->stride; ImagePixelFormat format = IPF_RGB_888; if (width == stride) { format = IPF_GRAYSCALED; } else if (width * 3 == stride) { format = IPF_RGB_888; } else if (width * 4 == stride) { format = IPF_ARGB_8888; } CImageData *imageData = new CImageData(stride * height, worker->buffer, width, height, stride, format); worker->fileFetcher->SetFile(imageData); delete imageData, imageData = NULL; } break; default: worker->fileFetcher->SetFile(worker->filename.c_str()); } char errorMsg[512] = {0}; int errorCode = worker->handler->StartCapturing(\"\", true, errorMsg, 512); if (errorCode != 0) { printf(\"StartCapturing: %s\\n\", errorMsg); } int endtime = gettime(); int elapsedTime = endtime - starttime; worker->pResults = worker->capturedReceiver->results; worker->errorCode = ret; worker->elapsedTime = elapsedTime; } Use Napi::Object to encapsulate barcode results, making them accessible in the JavaScript layer. void BarcodeReader::WrapResults(BarcodeWorker *worker, Napi::Env env, Napi::Object &result) { vector<CDecodedBarcodesResult *> pResults = worker->pResults; Napi::Array barcodeResults = Napi::Array::New(env); for (int j = 0; j < pResults.size(); j++) { CDecodedBarcodesResult *barcodeResult = pResults[j]; if (barcodeResult) { CFileImageTag *fileTag = (CFileImageTag *)barcodeResult->GetOriginalImageTag(); int count = barcodeResult->GetItemsCount(); for (int i = 0; i < count; i++) { const CBarcodeResultItem *barcodeResultItem = barcodeResult->GetItem(i); CPoint *points = barcodeResultItem->GetLocation().points; Napi::Object res = Napi::Object::New(env); res.Set(\"format\", barcodeResultItem->GetFormatString()); res.Set(\"value\", barcodeResultItem->GetText()); res.Set(\"x1\", Napi::Number::New(env, points[0][0])); res.Set(\"y1\", Napi::Number::New(env, points[0][1])); res.Set(\"x2\", Napi::Number::New(env, points[1][0])); res.Set(\"y2\", Napi::Number::New(env, points[1][1])); res.Set(\"x3\", Napi::Number::New(env, points[2][0])); res.Set(\"y3\", Napi::Number::New(env, points[2][1])); res.Set(\"x4\", Napi::Number::New(env, points[3][0])); res.Set(\"y4\", Napi::Number::New(env, points[3][1])); res.Set(\"page\", Napi::Number::New(env, fileTag->GetPageNumber())); res.Set(\"time\", Napi::Number::New(env, worker->elapsedTime)); res.Set(\"angle\", Napi::Number::New(env, barcodeResultItem->GetAngle())); res.Set(\"isMirrored\", Napi::Number::New(env, barcodeResultItem->IsMirrored())); barcodeResults.Set(i + j * count, res); } barcodeResult->Release(); } } result = barcodeResults; worker->pResults.clear(); } Build the Node.js Addon Use node-gyp to build the Node.js barcode SDK module. node-gyp configure node-gyp build On macOS, you'll need to run the following commands to ensure the .dylib files are accessible: install_name_tool -change @rpath/libDynamsoftCore.dylib @loader_path/libDynamsoftCore.dylib build/Release/dbr.node install_name_tool -change @rpath/libDynamsoftLicense.dylib @loader_path/libDynamsoftLicense.dylib build/Release/dbr.node install_name_tool -change @rpath/libDynamsoftCaptureVisionRouter.dylib @loader_path/libDynamsoftCaptureVisionRouter.dylib build/Release/dbr.node install_name_tool -change @rpath/libDynamsoftUtility.dylib @loader_path/libDynamsoftUtility.dylib build/Release/dbr.node install_name_tool -change @rpath/libDynamsoftImageProcessing.dylib @loader_path/libDynamsoftImageProcessing.dylib build/Release/libDynamsoftUtility.dylib Reading Barcodes from Multi-Page PDFs in Node.js Create a test.js file with the following code: var dbr = require('barcode4nodejs'); var barcodeTypes = dbr.barcodeTypes; var readline = require('readline'); var fs = require('fs'); dbr.initLicense(\"LICENSE-KEY\"); function decodeFileStreamAsync(fileName) { let stats = fs.statSync(fileName); let fileSize = stats['size']; fs.open(fileName, 'r', function (status, fd) { if (status) { console.log(status.message); return; } let buffer = Buffer.alloc(fileSize); fs.read(fd, buffer, 0, fileSize, 0, function (err, bytesRead, data) { (async function () { try { var result = await dbr.decodeFileStreamAsync(buffer, fileSize, barcodeTypes, \"\"); console.log(result); setTimeout(() => { console.log('terminated'); }, 1000); } catch (error) { console.log(error); } })(); }); }); } let args = process.argv; if (args.includes('-f')) { let fIndex = args.indexOf('-f'); if (args[fIndex + 1]) { decodeFileStreamAsync(args[fIndex + 1]); } else { console.log('Please add a file.'); } } You need to replace LICENSE-KEY with your own. Run the script with the PDF file created earlier. node test.js -f multipage.pdf Source Code https://github.com/yushulx/cmake-cpp-barcode-qrcode-mrz/tree/main/examples/10.x/command-line https://github.com/yushulx/barcode4nodejs/tree/main/examples/command-line Highlight Promoted * Self-Host Your Observability Stack Take control of your data and privacy. With Highlight.io, you can self-host your entire observability stack, giving you full visibility without sacrificing security or compliance. Monitor, debug, and optimize – on your terms. Start self-hosting with Highlight.io today. Get Started *enc* Read next Convert Google Slides to PDF Jakub Krajniak - Sep 19 Create a Slack Bot with NodeJS and Slack Bolt API Olibhia Ghosh - Oct 16 Building a Custom Backend * Ashish prajapati - Oct 18 Using AWS IAM roles with Node SDKv3 Moray Macdonald - Oct 8 Xiao Ling Follow Joined Mar 10, 2021 More from Xiao Ling How to Build a Python Barcode Scanner for Windows, Linux, and macOS #programming #python #barcode #qrcode How to Create a Blazor Web App for Document PDF Viewing and Annotation #webdev #dotnet #blazor #pdf Developing a Desktop MRZ Scanner for Passports, IDs, and Visas with Dynamsoft C++ Capture Vision SDK #cpp #mrz #passport #ocr Heroku *references R* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/yushulx/decoding-1d2d-barcodes-from-multi-page-pdfs-using-c-and-nodejs-4376"
  },
  {
    "body": "* Follow Report Abuse Keme Kenneth Developer | Social Media Strategist | New Technologies Enthusiast | Aspiring Googler | COO Azusion Nigeria Joined on Sep 17, 2019 Five * five years. Got it * Four * four years. ** T* years. G* @zeelz Organizations AWS Community Builders Skills/Languages DevOps, Docker, NodeJS, ExpressJS, Typescript, React.js, NextJS, SQL/NoSQL, HTML/CSS Currently hacking on Serverless high-availability web socket app on AWS 9 * 18 tags followed How I made any browser tab my Notepad * Nov 21 '23 How I made any browser tab my Notepad Add C*ith Keme Kenneth? * Keme Kenneth. * Slot ads in between your articles in Laravel * Oct 22 '23 Slot ads in between your articles in Laravel * AWS NETWORKING 101 * Oct 8 '23 AWS NETWORKING 101 5 * Dividing IPs for Multiple Subnets in a VPC * Oct 1 '23 Dividing IPs for Multiple Subnets in a VPC #vpc #cidr #aws #subnets 2 *d Tailwind CSS and HTML for Production without Framework * May 5 '23 Tailwind CSS and HTML for Production without Framework * Downgrade create-react-app@latest to @17 * Oct 24 '22 Downgrade create-react-app@latest to @17 2 *d Promise.all(), Promise.any() as Simple as ABC * Oct 21 '22 Promise.all(), Promise.any() as Simple as ABC * Scaling & Load-balancing NodeJS Containers with Nginx * Oct 8 '22 Scaling & Load-balancing NodeJS Containers with Nginx #docker #nginx #node #containerapps 18 *d Beautiful color scheme for iTerm2/Terminal * Oct 8 '22 Beautiful color scheme for iTerm2/Terminal 1 reaction Add Comment 1 *onsor Neon * ",
    "url": "https://dev.to/zeelz"
  },
  {
    "body": "* Follow Report Abuse ZenStack TypeScript toolkit simplifies the development of backend A toolkit that supercharges Prisma ORM with a powerful access control layer, unlocking its full potential for web development. Joined on Nov 3, 2022 Support email contact@zenstack.dev Meet the team Our stack Next.js Typescript Prisma NextAuth 103 posts published 2 members *! ymc9 ymc9 ymc9 Follow Nov 7 Typing Prism*rm 21 * Programmers, Will AI Work For You, With You, or Without You? ymc9 ymc9 ymc9 Follow Oct 14 Programmers, Will AI Work For You, With You, or Without You? #ai #programming 20 * Supabase RLS Alternative JS JS JS Follow Jul 24 Supabase RLS Alternative #webdev #database #opensource #supabase 54 reactions 6 comments 11 min read Rendering Prisma Queries With React Table: The Low-Code Way ymc9 ymc9 ymc9 Follow Jul 21 Rendering Prisma Queries With React Table: The Low-Code Way #prisma #react #api #frontend 16 * PHP: Laravel, Ruby: Rails, JavaScript:? JS JS JS Follow May 28 PHP: Laravel, Ruby: Rails, JavaScript:? #* #learning 173 reactions 15 comments 5 min read Low-Code Backend Solution for Refine.dev Using Prisma and ZenStack ymc9 ymc9 ymc9 Follow May 27 Low-Code Backend Solution for Refine.dev Using Prisma and ZenStack #webdev #react #lowcode #authorization 20 * Stories Behind ZenStack V2! JS JS JS Follow Apr 29 Stories Behind ZenStack V2! #showdev #webdev #prisma #javascript 21 * Adapting ZenStack to the Edge: Our Struggles and Learnings ymc9 ymc9 ymc9 Follow Apr 19 Adapting ZenStack to the Edge: Our Struggles and Learnings #webdev #edge #nextjs #prisma 19 *d The Many Ways Not to Build an API ymc9 ymc9 ymc9 Follow Apr 1 The Many Ways Not to Build an API #api #webdev #restapi #graphql 24 * End-To-End Polymorphism: From Database to UI, Achieving SOLID Design JS JS JS Follow Mar 28 End-To-End Polymorphism: From Database to UI, Achieving SOLID Design #webdev #database #javascript #tutorial 22 *ad Building an Admin Console With Minimum Code Using React-Admin, Prisma, and Zenstack ymc9 ymc9 ymc9 Follow Mar 11 Building an Admin Console With Minimum Code Using React-Admin, Prisma, and Zenstack #webdev #react #typescript #prisma 33 *ad What Are the Chances of You Creating a Programming Language JS JS JS Follow Feb 7 What Are the Chances of You Creating a Programming Language #programming #psychology #career #learning 34 * * 2 ymc9 ymc9 ymc9 Follow Feb 5 * 2 #webdev #authorization #security 25 *d Why Do Rubber Ducks Work? ymc9 ymc9 ymc9 Follow Jan 30 Why Do Rubber Ducks Work? #programming #psychology #career 139 reactions 10 comments 6 min read How Much Work Does It Take to Build a Programming Language? ymc9 ymc9 ymc9 Follow Jan 22 How Much Work Does It Take to Build a Programming Language? #compiler #language #typescript #dsl 34 reactions 4 comments 8 min read Modeling Authorization in Prisma - No Theory, Just Code ymc9 ymc9 ymc9 Follow Jan 15 Modeling Authorization in Prisma - No Theory, Just Code #prisma #authorization #webdev #typescript 52 *d The Secrets to Having a Long and Fulfilling Career as a Programmer ymc9 ymc9 ymc9 Follow Jan 8 The Secrets to Having a Long and Fulfilling Career as a Programmer 20 *d * - #4 Into the AI Era ymc9 ymc9 ymc9 Follow Dec 29 '23 * - #4 Into the AI Era #webdev #ai #database #sql 57 *d What Will Happen to the Full-Stack Framework in the Future? JS JS JS Follow Dec 21 '23 What Will Happen to the Full-Stack Framework in the Future? #webdev #fullstack #javascript #ai 59 reactions 1 comments 4 min read Tackling Polymorphism in Prisma ymc9 ymc9 ymc9 Follow Dec 21 '23 Tackling Polymorphism in Prisma #webdev #prisma #typescript #database 36 * * 1 ymc9 ymc9 ymc9 Follow Dec 14 '23 * 1 #webdev #authorization #security 62 * * - #3 Better Developer Experience ymc9 ymc9 ymc9 Follow Dec 8 '23 * - #3 Better Developer Experience #database #sql #webdev 24 * Contributing To Open Source Projects Might Be Easier Than You Think JS JS JS Follow Dec 5 '23 Contributing To Open Source Projects Might Be Easier Than You Think #opensource #webdev #learning #beginners 30 * From Prisma to TanStack Query: Fast Lane to Full-Stack Type Safety ymc9 ymc9 ymc9 Follow Nov 28 '23 From Prisma to TanStack Query: Fast Lane to Full-Stack Type Safety #prisma #fullstack #react #typescript 81 reactions 1 comments 5 min read Using AI to Generate Database Query Is Cool. But What About Access Control? ymc9 ymc9 ymc9 Follow Nov 6 '23 Using AI to Generate Database Query Is Cool. But What About Access Control? #ai #webdev #javascript #prisma 88 * Is Next.js 13 + RSC a Good Choice? I Built an App Without Client-Side Javascript to Find Out ymc9 ymc9 ymc9 Follow Oct 26 '23 Is Next.js 13 + RSC a Good Choice? I Built an App Without Client-Side Javascript to Find Out #nextjs #react #webdev #fullstack 102 reactions 4 comments 7 min read How To Get Type-Safe Frontend Queries Like GraphQL Without GraphQL Using Typescript JS JS JS Follow Oct 24 '23 How To Get Type-Safe Frontend Queries Like GraphQL Without GraphQL Using Typescript #webdev #frontend #typescript #api 72 *d Drizzle or Prisma? I Built an App Twice to Find Out Which Is Better ymc9 ymc9 ymc9 Follow Oct 10 '23 Drizzle or Prisma? I Built an App Twice to Find Out Which Is Better #webdev #prisma #drizzle #typescript 53 * * - #2 New Ways to Program ymc9 ymc9 ymc9 Follow Sep 26 '23 * - #2 New Ways to Program #database #webdev #api #sql 38 reactions 1 comments 6 min read How To Build a High-Concurrency Ticket Booking System With Prisma JS JS JS Follow Sep 18 '23 How To Build a High-Concurrency Ticket Booking System With Prisma #webdev #database #performance #typescript 118 reactions 12 comments 5 min read Building a Secure RESTful API Using NestJS and Prisma With Minimum Code ymc9 ymc9 ymc9 Follow Sep 6 '23 Building a Secure RESTful API Using NestJS and Prisma With Minimum Code #nestjs #restapi #prisma #typescript 34 * ZenStack: The Complete Authorization Solution for Prisma Projects ymc9 ymc9 ymc9 Follow Aug 29 '23 ZenStack: The Complete Authorization Solution for Prisma Projects #webdev #prisma #authorization #security 29 * * - #1 Serverless & Edge ymc9 ymc9 ymc9 Follow Aug 16 '23 * - #1 Serverless & Edge #database #webdev #serverless #edge 29 * Why Do I Need RSC(react server components) if I Already Have Remix JS JS JS Follow Aug 8 '23 Why Do I Need RSC(react server components) if I Already Have Remix #webdev #react #frontend #remix 37 * Soft Delete: Dealing With Unique Constraint in Real-World Case JS JS JS Follow Jul 26 '23 Soft Delete: Dealing With Unique Constraint in Real-World Case #webdev #database #sql #typescript 16 *d Replacing Google Firebase - An Open-Source Alternative Stack ymc9 ymc9 ymc9 Follow Jul 24 '23 Replacing Google Firebase - An Open-Source Alternative Stack #webdev #firebase #opensource #database 19 *d RLS of Supabase(PostgreSQL) Is Good, But …🤔 JS JS JS Follow Jul 17 '23 RLS of Supabase(PostgreSQL) Is Good, But …🤔 #webdev #database #security #backend 54 reactions 4 comments 6 min read What's the Best Practice for Auth and Why JS JS JS Follow Jul 12 '23 What's the Best Practice for Auth and Why #webdev #security #authorization #architecture 63 * Limitation of TRPC's Type Inference and How We Improved It ymc9 ymc9 ymc9 Follow Jul 11 '23 Limitation of TRPC's Type Inference and How We Improved It #* #trpc 20 * Embrace Dissent: Finding Value in Opposite Views JS JS JS Follow Jul 4 '23 Embrace Dissent: Finding Value in Opposite Views #community #webdev #twitter #vue 18 * Streamlining Form Validation in Your Javascript Stack ymc9 ymc9 ymc9 Follow Jul 4 '23 Streamlining Form Validation in Your Javascript Stack #webdev #javascript #fullstack #tutorial 36 * Is Code Generation a Bad Idea? 🤔 JS JS JS Follow Jun 27 '23 Is Code Generation a Bad Idea? 🤔 #webdev #javascript #development #api 32 reactions 15 comments 4 min read Implementing Flexible Authorization in RedwoodJS Projects ymc9 ymc9 ymc9 Follow Jun 22 '23 Implementing Flexible Authorization in RedwoodJS Projects #fullstack #webdev #redwood #javascript 20 *d How To Build a Scalable SaaS Backend in 10 Minutes With 100 Lines of Code 🚀 JS JS JS Follow Jun 21 '23 How To Build a Scalable SaaS Backend in 10 Minutes With 100 Lines of Code 🚀 #* #architecture 98 reactions 3 comments 6 min read Our Open Source Journey: Seven Months In and Counting ymc9 ymc9 ymc9 Follow Jun 13 '23 Our Open Source Journey: Seven Months In and Counting #opensource #career #startup #webdev 19 reactions Add Comment 6 *onsor Neon * ",
    "url": "https://dev.to/zenstack"
  },
  {
    "body": "* 21 Add reaction 6 Like 4 Unicorn 4 Exploding Head 4 Raised Hands 3 Fire 0 Jump to Comments 12 * ymc9 for ZenStack Posted on Nov 7 • Originally published at zenstack.dev 6 4 4 4 3 Typing Prism*rm SQL databases provide us with many benefits, the most important of which is strong schema enforcement. Yes, you pay the cost of migration when the schema changes, but the gain is far more significant - your code is clean because it can assume all data are in correct shapes. However, once in a while, we want to break free from such strong guarantees for valid reasons. You may have some tiny objects that you want to attach to the main entities (e.g., metadata of an image) without formalizing them into a separate table. Or you need to store records with many possible sparse fields but want to avoid creating wide tables. Prisma's JSON type provides a generic escape hatch for such scenarios. It allows storing arbitrary data and gives you a generic JsonValue type in the query results. // schema.prisma model Image { id Int @id @default(autoincrement()) metadata Json } // TS code type Metadata { width: number height: number format: string } const image = await prisma.image.findFirstOrThrow(); // an explicit cast into the desired type const metadata = image.metadata as Metadata; console.log('Image dimensions:', metadata.width, 'by', metadata.height); This is not always ideal because, in practice, many people use JSON type in a \"controlled\" way - only data of specific fixed shapes are stored in a field. So, regaining some of the strong typing capabilities would be very beneficial. ZenStack's new \"strongly typed JSON field\" feature is designed to address this need. It allows you to define shapes of JSON data in the schema, and \"fixes\" PrismaClient to return data with correct types. The feature is in preview and only supports PostgreSQL for now. Using strongly typed JSON fields The first step is to use the new type keyword to define the shape of the JSON data in the ZModel schema (a DSL extended from Prisma schema): // schema.zmodel type Metadata { width Int height Int format String } model Image { id Int @id @default(autoincrement()) metadata Metadata @json } Types have a structure similar to models but are not mapped to database tables. They only exist for typing and validation purposes. You can not have relations to other models in types. However, you can include fields of other types to form a nested structure. When you run zenstack generate, the compiler will transform the typed JSON fields back into the regular Prisma Json type: // schema.prisma model Image { id Int @id @default(autoincrement()) metadata Json } So, where did the Metadata type go? It's compiled into a TypeScript type declaration, which is used to type the query results when you use the ZenStack-enhanced PrismaClient: // TS code import { enhance } from '@zenstackhq/runtime'; const db = enhance(prisma); const image = await db.image.findFirstOrThrow(); // image.metadata is now directly typed as // { width: number, height: number, format: string } console.log('Image dimensions:', image.metadata.width, 'by', image.metadata.height); When you create or update, the input is also properly typed so you get nice auto-completion and typechecking for the payload: // TS code await db.image.create({ data: { metadata: { width: 1920, height: '1080', // <- type error here format: 'jpeg' } } }); Straightforward, isn't it? But the feature doesn't stop here. How about some runtime validation? For mutations, ZenStack also validates the input data's shape at runtime by deriving a Zod schema from the type declaration. You can also add additional constraints to fields the same way you can do with models: // schema.zmodel type Metadata { width Int @gt(0) @lt(10000) height Int @gt(0) @lt(10000) format String } Mutation calls violating these constraints will be rejected: // TS code await db.image.create({ data: { metadata: { width: 1920, height: 10800, // <- runtime error here format: 'jpeg' } } }); Error calling enhanced Prisma method `image.create`: denied by policy: image entities failed 'create' check, input failed validation: Validation error: Number must be less than 10000 at \"metadata.height\" Is it really type-safe? JSON fields are meant to hold arbitrary data types, so there isn't really a way to guarantee data consistency. As such, to preserve enough flexibility, ZenStack doesn't validate if the query results comply with the type declaration. This effectively means you can't trust the TypeScript typings alone if you know the column contains mixed data. One way to mitigate the problem is to validate the data with the generated Zod schemas explicitly: import { MetadataSchema } from '@zenstackhq/runtime/zod/models'; const image = await db.image.findFirstOrThrow(); const metadata = MetadataSchema.parse(image.metadata); Next steps One area that's not addressed by this feature yet is the filtering part. The where clause still follows Prisma's Json filter format: // find images with width greater than 102 const images = await db.image.findMany({ where: { metadata: { path: ['width'], gt: 1024 } } }); We can potentially \"enhance\" that part to provide a typed experience like: const images = await db.image.findMany({ where: { metadata: { width: { gt: 1024 } } } }); Is it useful, or can it be confusing (as it looks the same as relation filters)? Let us know by leaving a comment below. You can also learn more about this feature in the official guide. About ZenStack ZenStack is a TypeScript toolkit that systematically extends Prisma ORM's power. Besides strongly typed JSON fields, it offers a set of other capabilities that may greatly simplify your full-stack development: Authorization rules in schema Auto RESTful API generation Frontend query hooks generation ... Make sure you check it out if you're using Prisma. Heroku *references R* *enc* Read next Scaling Zensearch's capabilities to query the whole database FDiaz - Nov 8 -? What is YARN ?- nobody-99 - Nov 3 * Abhishek Jaiswal - Nov 7 *) gitter4coding - Nov 7 ZenStack Follow TypeScript toolkit simplifies the development of backend See how ZenStack helps you simplify full-stack development: Homepage More from ZenStack Rendering Prisma Queries With React Table: The Low-Code Way #prisma #react #api #frontend Stories Behind ZenStack V2! #webdev #prisma #showdev #javascript Adapting ZenStack to the Edge: Our Struggles and Learnings #webdev #edge #nextjs #prisma Heroku *references R* 👋 *** * ",
    "url": "https://dev.to/zenstack/typing-prisma-json-fields-yes-you-can-2in4"
  },
  {
    "body": "* 9 Add reaction 5 Like 1 Unicorn 1 Exploding Head 1 Raised Hands 1 Fire 3 Jump to Comments 3 * zenstok Posted on Oct 6 5 1 1 1 1 * #webdev #node #javascript #nestjs Hey, folks! Have you ever wondered if it's possible to send a file of unlimited size to your users, all while giving them real-time feedback during the download process? Well, today, we're diving into exactly that. Let’s explore how we can achieve this in NestJS using one of Node.js's most powerful features—Streams. In this guide, I’m not just going to show you how to download files of unlimited size—I’ll also walk you through the magic of streams and how they really work behind the scenes. The Scenario: A Manager's Report Download Imagine a manager needs to download a dynamically generated report containing invoice data, based on a user-defined date range. The twist? We have no idea how big the report will be because the user sets the parameters. We need to stream this data efficiently without overwhelming our server’s memory. Here’s where chunked transfer encoding comes into play. By setting the Transfer-Encoding header to chunked (learn more here), we can send the data in chunks, eliminating the need for a predetermined file size. But wait—how do we handle massive file sizes? The answer is simple: Node.js Streams. Why Not Buffers? At first, you might think we can handle this using file buffers. However, buffers are limited by the server’s memory. If you’re dealing with large files, buffers will quickly hit a ceiling. Instead, we turn to streams, which are the backbone of Node.js when it comes to data management. Streams process data in small chunks, sending it out without holding everything in memory. This way, we can handle \"infinite\" files, or at least ones large enough to blow your mind. What are streams? Streams in Node.js are powerful objects that let us process batches of data without loading everything into memory. Instead of holding the entire dataset, streams process chunks of data and pass them along as they go. So, because they don’t hold all the data in memory, they can handle massive files. But where do these chunks go? They’re passed on to other streams! There are two key types of streams you’ll be working with in Node.js: readable and writable streams. Let’s break it down with an example: If you’re reading a file’s contents, you’d use the fs.createReadStream method. This returns a readable stream object, which gives you chunks of the file’s data bit by bit. But once you’ve read the data, how do you send it to the user as an HTTP response? Well, here’s the cool part: in Node.js, the response object itself is a writable stream. What does that mean? It means you can take the data you’re reading from the readable stream and send it directly to the writable stream (the HTTP response) using a method called .pipe. With just a few lines of code, the .pipe method lets you effortlessly stream file content directly to the client as an HTTP response—no need to worry about memory limits or large file sizes. Simple, right? The Three Methods to Stream Large Files in NestJS We’ll walk through three different ways to stream large files in NestJS, ranging from basic to more advanced, giving you both performance and flexibility. The Easy Version: Node.js Out of the Box The Performant Version: String-Based Stream Chunks The Buffer Version: For When Precision Matters 1. The Easy Version In this approach, we use Node.js's built-in interfaces to handle the heavy lifting for us. Here’s what the controller code looks like: @Get('/simple') @Header('Content-Disposition', `attachment; filename=\"bigJson.json\"`) @Header('Content-Type', 'application/json') @Header('Transfer-Encoding', 'chunked') getBigFileSimple(@Res() res: Response) { this.simpleService.getBigFile(res); } The @Header decorators set the file to be an attachment, specify the content type, and enable chunked transfer encoding. This allows us to send the file in parts without knowing its total size upfront. In our service, we have the following method: @Injectable() export class SimpleService { constructor(private readonly jsonService: JsonService) {} getBigFile(res: Response) { return this.jsonService.createBigJsonFileStream().pipe(res); } } With just one line of code, we pipe the file stream to the response! This elegant solution leverages Node.js's stream piping, making it both simple and powerful. Now, you might wonder—what exactly is this createBigJsonFileStream() method doing? @Injectable() export class JsonService { createBigJsonFileStream(rowsLength = 25000000): Readable { let currentRow = 1; rowsLength = this.getRandomLengthFromRange(rowsLength / 2, rowsLength); const stream = new Readable({ read() { if (currentRow === 1) { this.push('['); this.push(`{\"id\":${currentRow},\"name\":\"element${currentRow}\"},`); } else if (currentRow === rowsLength) { this.push(`{\"id\":${currentRow},\"name\":\"element${currentRow}\"}`); this.push(']'); this.push(null); } else { this.push(`{\"id\":${currentRow},\"name\":\"element${currentRow}\"},`); } currentRow++; }, }); return stream; } private getRandomLengthFromRange(min: number, max: number): number { return *) + min); } } In this case, we’re not serving a file from disk. Remember, the scenario we’re addressing is where a manager wants to download a report, choosing their own start and end dates. This means we need to dynamically generate the file based on the user's request. And how do we do that? You guessed it—with streams! What’s happening here? We’re creating a readable stream using Node.js’s Readable constructor (documentation here). We’re keeping things simple by focusing on the required read() method. Here’s how it works: every time the stream has data to offer, the read() method is called. As long as we keep pushing data into the stream (and don’t push null), the stream will stay active and keep sending data. In this example, we’ve set a rowsLength—the total number of rows our JSON file will have. (Note: We’re dynamically altering the rowsLength to simulate the manager selecting a start and end date, creating a random value to represent the report’s size.) Based on this, we push one row at a time into the stream. It’s that simple! We’re dynamically creating a huge JSON file, sending data chunk by chunk, and handling it all seamlessly without loading everything into memory. 2. The Performant Version: String-Based Chunks In this approach, we fine-tune performance by manually controlling how the data is written to the response stream: @Injectable() export class PerformantService { constructor(private readonly jsonService: JsonService) {} getBigFile(res: Response) { const jsonStream = this.jsonService.createBigJsonFileStream(); jsonStream.setEncoding('utf-8'); let chunkSize = 0; let bigChunk = ''; jsonStream.on('data', (chunk: string) => { bigChunk += chunk; chunkSize++; if (chunkSize === 1000) { const writable = res.write(bigChunk); if (!writable) { jsonStream.pause(); } bigChunk = ''; chunkSize = 0; } }); res.on('drain', () => { jsonStream.resume(); }); jsonStream.on('error', (err) => { console.error(err); res.end(); }); jsonStream.on('end', () => { if (bigChunk.length) { res.write(bigChunk); } res.end(); }); } } So, what do we have here? What do we have here? Well, the logic might look a bit complex, but that's because we’re handling the process of writing to the res writable stream manually. Why? We believe that our approach is faster than simply piping the stream. So, how do we do it? First, we set the encoding of our JSON stream to UTF-8 using jsonStream.setEncoding('utf-8');. This ensures that instead of receiving default Buffer objects from the stream, we get data as UTF-8 encoded strings. Next, we define two variables: chunkSize, initialized to 0, and bigChunk, an empty string. The cool thing about streams is that we can listen to events on them. For example, the data event gives us a data chunk every time the stream is read. But when is read called? It's triggered as soon as the readable stream is instantiated and continues until all the data is read—pretty cool, right? We know the stream has finished reading when we hit the end event. Now, when data arrives from the stream, we want to be efficient. Instead of sending small chunks to the res stream, we batch 1,000 chunks together and send them as one large chunk to our HTTP response, which is itself a writable stream. But wait—why does the write method return a boolean? This introduces us to a crucial concept in Node.js streams: backpressure. As Node.js describes it, “backpressure occurs when data builds up behind a buffer during data transfer.” In simpler terms, it means the res stream is telling us, \"Slow down! I can't keep up!\"\" The solution? We stop sending data! This is done by calling jsonStream.pause(), which halts the stream from reading further. But what happens next? Now, we need to listen for another stream event—this time on the res writable stream. We need the stream to signal when it has recovered from the backpressure. This is where the \"drain\" event comes in. The \"drain\" event is emitted when it’s appropriate to resume writing data to the stream. So, once we catch this event, we simply resume reading from our big JSON stream! Finally, when the JSON stream reaches the end event, we check if there’s any leftover data in bigChunk and write it to the res stream. After that, we call res.end() to signal that the response is complete. And just like that, we’ve manually controlled how the data flows through the streams, handled backpressure, and delivered a dynamic file as a response! 3. The Buffer Version: Chunking with Buffers For a more complex scenario, say we want to send large buffer chunks. Here's how we can handle it: @Injectable() export class BufferService { constructor(private readonly jsonService: JsonService) {} getBigFile(res: Response) { const jsonStream = this.jsonService.createBigJsonFileStream(); const sendingChunkSize = 50 * 1024 * 1024; // 50 MiBs, Make sure to set the sending chunk size larger than the chunk buffer size to avoid unnecessary iterations in the while loop. let currentChunkSize = 0; let sendingChunk = Buffer.alloc(sendingChunkSize); jsonStream.on('data', (chunk: Buffer) => { while (chunk.byteLength > 0) { const availableSpace = sendingChunkSize - currentChunkSize; if (chunk.byteLength <= availableSpace) { // If the chunk fits within the remaining space chunk.copy(sendingChunk, currentChunkSize); currentChunkSize += chunk.byteLength; break; } // Fill the remaining space in the sendingChunk chunk.subarray(0, availableSpace).copy(sendingChunk, currentChunkSize); currentChunkSize += availableSpace; // Send the filled buffer const writable = res.write(sendingChunk); if (!writable) { jsonStream.pause(); } // Reset for the next chunk sendingChunk = Buffer.alloc(sendingChunkSize); currentChunkSize = 0; chunk = chunk.subarray(availableSpace); // Process the rest of the chunk } }); res.on('drain', () => { jsonStream.resume(); // Resume when writable }); jsonStream.on('end', () => { // Send any remaining data that hasn't been flushed if (currentChunkSize > 0) { res.write(sendingChunk.subarray(0, currentChunkSize)); } res.end(); }); jsonStream.on('error', (err) => { console.error(err); // Log error for debugging res.end(); }); } } Oh no, what’s going on here? It looks so complicated! Well, that’s because it is a bit tricky! But here’s the backstory: we received a request from our boss to send file downloads in chunks of 50 MiB, because he has blazing-fast internet, he wants to take full advantage of it. So, what’s the plan? We start by setting our sending chunk size to 50 MiB. Next, we initialize a currentChunkSize variable to 0 and create a new buffer object, allocating exactly 50 MiB of memory. Now, here’s where it gets interesting. Since we’re using fixed-size buffers, we need to ensure that all the JSON data fits perfectly within the allocated space. To do this, we calculate the available space in the current sending chunk. As long as the JSON chunk fits within the remaining space, we copy it to the sending chunk and update the currentChunkSize: chunk.copy(sendingChunk, currentChunkSize); currentChunkSize += chunk.byteLength; The copy() method copies the bytes from the chunk buffer into sendingChunk, starting at the currentChunkSize (which marks the first free byte in the buffer). What if the available space is larger than the JSON chunk? This is where things get a bit messy! In this case, we need to extract exactly the right number of bytes from the JSON chunk to fill the available space in the sending chunk. Once it’s perfectly full, we send the chunk to the HTTP response. After that, we reset the sendingChunk to a fresh buffer and set currentChunkSize back to 0. But what about the rest of the JSON chunk? Good question! Any remaining data in the JSON chunk is processed in the next iteration of our loop. The loop ensures that this remaining data is added to the new sendingChunk. This loop continues as long as the JSON chunk is larger than the available space in the buffer. Technically, we could set the buffer size to send chunks as small as 1 byte to the response stream, but that would be incredibly inefficient. So, to avoid unnecessary iterations in the while loop, it’s important to set a reasonable chunk size. Demo For the demo, let's git clone the project here. After cloning, install the dependencies using npm install, and then run the project with npm run start. On the index page, you’ll find a tutorial that explains how to call each version in action, as shown in the screenshot below: Conclusion By leveraging the power of Node.js streams, we can deliver files of virtually any size without consuming large amounts of memory. Whether you're aiming for simplicity, performance, or handling large buffer sizes, these approaches have you covered. I hope this guide helped you understand how to work with large file downloads in NestJS. Have any ideas or topics you'd like me to cover next? Drop a comment! And don’t forget to subscribe to my newsletter on rabbitbyte.club for more tips! _SurveyJS Promoted * Simplify data collection in your JS app with a fully integrated form management platform. * ty*me analytics & more. Integrates with any backend system, giving you *. Learn more Top comments (3) * Achim Nohl Achim Nohl Achim Nohl Follow Location Aachen, Germany Work Principal Software Engineer at Synopsys Joined Sep 13, 2020 • Oct 22 C* is a very useful article putting it all together! Thank you for sharing 2 likes Like Reply Nguyen Duy Long Nguyen Duy Long Nguyen Duy Long Follow Joined Sep 18, 2023 • Oct 7 • Edited on Oct 7 • * Thanks, it's Beneficial! 2 likes Like Reply Костя Третяк Костя Третяк Костя Третяк Follow Author of Ditsmod (NodeJS framework written in TypeScript) Location Kharkiv, Ukraine Work TypeScript full stack developer Joined May 29, 2020 • Oct * Just use @ts-stack/multer for this. 1 like Like Reply *. * * React makes yo* Is React-query out of date? This new favorite makes cross-component requests a breeze! Eddie Kimpel - Oct 30 🔥14 game-changing open-source tools every developer should know 🚀 Nevo David - Nov 8 How to Use the Sui TypeScript SDK Ukeje Chukwuemeriwo Goodness - Oct 26 Can Web Development Make You Rich? Tutort Academy - Oct 30 zenstok Follow I’m passionate about creating software people love and helping others build high-quality apps. https://buymeacoffee.com/zenstok Joined May 28, 2023 More from zenstok How to Avoid the Single-Threaded Trap in JavaScript #javascript #nestjs #webdev #programming Part 3/3: How to Implement Refresh Tokens through Http-Only Cookie in NestJS and React #webdev #node #nestjs #react Part 2/3: How to Integrate Refresh Tokens in React #webdev #javascript #react #tutorial Payara Promoted * Engineering docs you can RUN! Eng docs made interactive and reliable, cloud console integrated, and built in Markdown to fit your GitOps. Store Notebook sessions and metadata for team troubleshooting while you build your DevOps knowledge base. Sign up for free 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/zenstok/how-to-create-and-download-files-of-unlimited-size-in-nodejsnestjs-48al"
  },
  {
    "body": "* 16 Add reaction 16 Like 0 *s 0 Fire 0 Jump to Comments 2 * zenstok Posted on Sep 2 16 Part 3/3: How to Implement Refresh Tokens through Http-Only Cookie in NestJS and React #webdev #node #nestjs #react Hello everyone, Welcome to the final episode of our three-part series on token management in a NestJS + React application. In the first two posts, we walked through the process of implementing refresh token logic by storing tokens in local storage. Today, we’ll advance to a more secure method by implementing HTTP-only cookies for refresh tokens. Why Use HTTP-Only Cookies? HTTP-only cookies allow us to store sensitive data, such as refresh tokens, in a way that cannot be accessed by JavaScript. This means that even if there are vulnerabilities in your code or third-party libraries, a hacker won't be able to retrieve the refresh token. However, even with HTTP-only cookies, there's still a risk of requests being made on behalf of the user through XSS attacks. The key advantage is that hackers will not be able to access the value of the refresh token directly; they would need to execute targeted XSS attacks on the application's endpoints, which requires prior knowledge of the system. Why Not Store Both Access and Refresh Tokens in HTTP-Only Cookies? By keeping the access token out of cookies, we protect against CSRF (Cross-Site Request Forgery) attacks. To mitigate XSS attacks, we set a short expiry time on the access token, limiting the damage even if it’s compromised. Should We Worry About CSRF on the /refresh-tokens Endpoint? Not really. Since this endpoint doesn’t compromise the system or user data, CSRF attacks here are less of a concern. Enhancing Security: Hashing Refresh Tokens To further improve security, we also hash the refresh tokens in the database. We use a hashing algorithm without salt, allowing us to reproduce the same hash for previously used tokens to check if they have been blacklisted. With this improvement, in case of database leaks, the hacker will not be able to read any refresh tokens! Getting Started To begin, ensure you've completed the guides in Part 1 and Part 2 for app installation. Afterward, follow these steps to implement the necessary changes. If you want to jump straight into the code, you can check out the repository here on the \"part-3\" branch. Step 1: Define Cookie Configuration and Helper Function First, set up a cookie configuration and create a helper function to extract the refresh token from cookies: import { Request } from 'express'; export const cookieConfig = { refreshToken: { name: 'refreshToken', options: { path: '/', // For production, use '/auth/api/refresh-tokens'. We use '/' for localhost in order to work on Chrome. httpOnly: true, sameSite: 'strict' as 'strict', secure: true, maxAge: 1000 * 60 * 60 * 24 * 30, // 30 days; must match Refresh JWT expiration. }, }, }; export const extractRefreshTokenFromCookies = (req: Request) => { const cookies = req.headers.cookie?.split('; '); if (!cookies?.length) { return null; } const refreshTokenCookie = cookies.find((cookie) => cookie.startsWith(`${cookieConfig.refreshToken.name}=`) ); if (!refreshTokenCookie) { return null; } return refreshTokenCookie.split('=')[1] as string; }; Step 2: Enable CORS to Accept Cookies Ensure the CORS policy allows credentials so that our backend can receive cookies from the frontend: app.enableCors({ origin: true, credentials: true }); // Set the correct origin for production. Step 3: Update the Token Generation Method Modify the generateTokenPair method to set the refresh token as an HTTP-only cookie whenever it's called: async generateTokenPair( user: Express.User, res: Response, currentRefreshToken?: string, currentRefreshTokenExpiresAt?: Date, ) { const payload = { sub: user.id, role: user.role }; res.cookie( cookieConfig.refreshToken.name, await this.generateRefreshToken( user, currentRefreshToken, currentRefreshTokenExpiresAt, ), { ...cookieConfig.refreshToken.options, }, ); return { access_token: this.jwtService.sign(payload), // JWT module is configured in auth.module.ts for access token. }; } Step 4: Update JWT Strategy to Use Cookies Modify the refresh JWT strategy to retrieve the token from cookies instead of using bearer token authentication: jwtFromRequest: ExtractJwt.fromExtractors([ (req: Request) => extractRefreshTokenFromCookies(req), ]), Step 5: Adjust Token Handling and Add Cookie Clearing Endpoint When calling the /refresh-tokens endpoint, the token should now be extracted from the HTTP-only cookie, replacing the previous method of using Bearer authorization. Additionally, we must implement a /clear-auth-cookie endpoint to remove the cookie. This endpoint should be invoked during the logout action on the frontend. The reason for this is that HTTP-only cookies cannot be cleared programatically from the frontend, so this ensures the user is properly logged out. @Public() @UseGuards(JwtRefreshAuthGuard) @Post('refresh-tokens') refreshTokens( @Req() req: Request, @Res({ passthrough: true }) res: Response, ) { if (!req.user) { throw new InternalServerErrorException(); } return this.authRefreshTokenService.generateTokenPair( (req.user as any).attributes, res, extractRefreshTokenFromCookies(req) as string, (req.user as any).refreshTokenExpiresAt, ); } @Public() @Post('clear-auth-cookie') clearAuthCookie(@Res({ passthrough: true }) res: Response) { res.clearCookie(cookieConfig.refreshToken.name); } Step 6: Update Frontend Logic Now regarding the frontend project, we will actually simplify the logic a little bit. Remove Refresh Token from Local Storage: Clear any references to the refresh token in the AuthClientStore class: const ACCESS_TOKEN_KEY = \"rabbit.byte.club.access.token\"; class AuthClientStore { static getAccessToken() { return localStorage.getItem(ACCESS_TOKEN_KEY); } static setAccessToken(token: string) { localStorage.setItem(ACCESS_TOKEN_KEY, token); } static removeAccessToken(): void { localStorage.removeItem(ACCESS_TOKEN_KEY); } } export default AuthClientStore; Update Request Methods: Remove the refreshToken variable from the sendProtectedRequest method, as it's no longer needed. const sendProtectedRequest = ( method: ApiMethod, path: string, // eslint-disable-next-line body?: any, init?: RequestInit, ) => { const authToken = AuthClientStore.getAccessToken(); if (!authToken) { throw new Error(\"No auth token found\"); } return sendRequest(method, path, body, authToken, init); }; Include Credentials in Requests: Very important: Update the login and refresh token API integration methods to include credentials, ensuring that cookies can be set and sent correctly. const login = async (email: string, password: string) => { const response = await sendRequest( ApiMethod.POST, routes.auth.login, { email, password, }, undefined, { credentials: \"include\" }, // Required update ); AuthClientStore.setAccessToken(response.access_token); return response; }; const refreshTokens = async () => { clearTimeout(timeout); if (!debouncedPromise) { debouncedPromise = new Promise((resolve, reject) => { debouncedResolve = resolve; debouncedReject = reject; }); } timeout = setTimeout(() => { const executeLogic = async () => { const response = await sendRequest( ApiMethod.POST, routes.auth.refreshTokens, undefined, undefined, { credentials: \"include\" }, // Required update ); AuthClientStore.setAccessToken(response.access_token); }; executeLogic().then(debouncedResolve).catch(debouncedReject); debouncedPromise = null; }, 200); return debouncedPromise; }; Define Clear Auth Cookie API Call: Implement the clearAuthCookie API call: const clearAuthCookie = () => { return sendRequest( ApiMethod.POST, routes.auth.clearAuthCookie, undefined, undefined, { credentials: \"include\" }, ); }; Call clearAuthCookie on Logout: Ensure the auth cookie is cleared on logout: const logout = () => { AuthClientStore.removeAccessToken(); return clearAuthCookie(); }; And that's it! With these steps, the refresh token logic is now integrated into an HTTP-only cookie. You can proceed to Part 2 of the tutorial to test the solution. If you'd like me to cover more interesting topics about the node.js ecosystem, feel free to leave your suggestions in the comments section. Don't forget to subscribe to my newsletter on rabbitbyte.club for updates! *? Manage p* Top comments (0) * * * *, exploring frameworks like Elysia and Nest, and sharing best practices via GitHub repositories. * Essential Laravel Tips form and for Entry-Level Developers 🚀 Harold Defree - Nov 3 Exploring ChatGPT's New Search Feature: A Powerful Tool for Real-Time Information Muhammad Essa - Nov 3 AI Tools Every Mobile Developer Needs to Use Anna Boiko - Oct 30 AI Web Developer - GitHub Spark TheDev - Oct 31 zenstok Follow I’m passionate about creating software people love and helping others build high-quality apps. https://buymeacoffee.com/zenstok Joined May 28, 2023 More from zenstok How to Avoid the Single-Threaded Trap in JavaScript #javascript #nestjs #webdev #programming * #webdev #node #javascript #nestjs Part 2/3: How to Integrate Refresh Tokens in React #webdev #javascript #react #tutorial Heroku *refer* 👋 ** * ",
    "url": "https://dev.to/zenstok/part-33-how-to-implement-refresh-tokens-through-http-only-cookie-in-nestjs-and-react-265e"
  },
  {
    "body": "* Follow Report Abuse Zia Ur Rehman frontEnd Developer at VirtueNetz Joined on Oct 31, 2024 More info about @zia_ur_rehman Badges * * 8 tags followed iFrame biPass Zia Ur Rehman Zia Ur Rehman Zia Ur Rehman Follow Oct 31 iFrame biPass #javascript #webdev #extension* 1 *onsor Neon * ",
    "url": "https://dev.to/zia_ur_rehman"
  },
  {
    "body": "* 1 A*ead 0 * 0 * Zia Ur Rehman Posted on Oct 31 1 iFrame biPass #javascript #webdev #extensions #node i am developing a chrome extension which requires the biPass of third party iframe access and i want to manipulate the third party iframe for content updation on the DOM. can anyone guide how i can bi pass it using javascript. i have tried but browser is injecting CORS (cross origin resource sharing security). please guide how to hunt it safely. Thanks in advance. Top comm* next Claude AI now runs JavaScript, Python beats JavaScript on GitHub, new Node.js versions and more James - Nov 3 The Evolution of Frontend Development: Exploring Different Architectures Valentin Turbins - Nov 3 How to Install Bootstrap 5 in Laravel 11 with Vite? Saddam Hossain - Nov 4 -? What is YARN ?- nobody-99 - Nov 3 Zia Ur Rehman Follow frontEnd Developer at VirtueNetz Joined Oct 31, * Best IDEs for Node.js Development in 2025 #webdev #programming #node #devops Best Practices for Code Reviews That Foster Team Collaboration #webdev #coding #beginners #productivity * Heroku *referenc* 👋 **ond Sponsor Neon * ",
    "url": "https://dev.to/zia_ur_rehman/iframe-bipass-427m"
  },
  {
    "body": "* Follow Report Abuse Zameer Fouzan 404 bio not found Bangalore, India Joined on Jul 23, 2020 https://www.linkedin.com/in/zmrfzn/ Work Senior Developer Relations Engineer More info about @zmrfzn Badges Four * four years. Got it * Three * t* it One * one year. Got it Organizations New Relic GitHub Repositories lambda-opentelemetry AWS Lambda instrumentation using Open Telemetry SDKs. Project initialised using serverless framework JavaScript • 1 star lambda-opentelemetry-amazon-distro Observability with OpenTelemetry on Lambda via Amazon's Distro for OpenTelemetry(ADOT) JavaScript microfront-end_NR TypeScript pern-js JavaScript pern-js-otel JavaScript 3 posts published 3 comments written 17 tags followed Monitoring PM2 in production * Follow for New Relic Nov 1 * Add Comment 8 min read Want to connect with Zameer Fouzan? * Zameer Fouzan. * Instrumenting AWS Lambda functions with OpenTelemetry SDKs * Follow for New Relic Nov 25 '23 Instrumenting AWS Lambda functions with OpenTelemetry SDKs #aws #node #opentelemetry #serverless * How to import Google Cloud logs without an agent * Follow for New Relic Mar 10 '23 How to import Google Cloud logs without an agent #agentless #logs #newrelic #googlecloud 3 reactions Add Comment 6 *onsor Neon * ",
    "url": "https://dev.to/zmrfzn"
  },
  {
    "body": "* Follow Report Abuse Zoranildo Santos I am a experienced software developer. I really enjoy learning about new techniques and technologies. Joined on Jul 18, 2023 Work Software Engineer More info about @zorasantos Badges One * one year. Got it * GitHub Repositories zorasantos About me Skills/Languages TypeScript React Vue node AWS 8 * 41 tags followed API Node Desacoplada: Criando os AdaptRouter para o Express e o Fastify Zoran* Santos Follow Aug 1 '23 API Node Desacoplada: Criando os AdaptRouter para o Express e o Fastify #typescript #node #api #webdev 4 *d API Node Desacoplada: Criando Interfaces para Requisições e Respostas HTTP Zoran* Santos Follow Aug 1 '23 API Node Desacoplada: Criando Interfaces para Requisições e Respostas HTTP #typescript #node #webdev #api 3 *d API Node Desacoplada: Criando Cadastro de Usuários Zoran* Santos Follow Jul 28 '23 API Node Desacoplada: Criando Cadastro de Usuários #typescript #node #api #webdev 3 * API Node Desacoplada: Criando servers com express e fastify Zoran* Santos Follow Jul 26 '23 API Node Desacoplada: Criando servers com express e fastify #node #typescript #api #webdev 3 *d Guia Prático: Aprenda a Construir uma API Node.js Desacoplada Zoran* Santos Follow Jul 26 '23 Guia Prático: Aprenda a Construir uma API Node.js Desacoplada #node #cleancode #typescript #api * Aprenda a Criar um Bouncy Loading Animation Apenas com CSS Zoran* Santos Follow Jul 19 '23 Aprenda a Criar um Bouncy Loading Animation Apenas com CSS #webdev #css #html #frontend Add Comment 3 min read Docker Descomplicado: Um Resumo Prático dos Principais Comandos Zoran* Santos Follow Jul 18 '23 Docker Descomplicado: Um Resumo Prático dos Principais Comandos #docker #devops #beginners 4 * Bootcamp React Feature Toggle - Apresentação do projeto Zoran* Santos Follow Jul 18 '23 Bootcamp React Feature Toggle - Apresentação do projeto #react #frontend #vite #webdev Add Comment 1 *onsor Neon * ",
    "url": "https://dev.to/zorasantos"
  },
  {
    "body": " * A curated list of delightful Node.js modules and resources Find the software you need Node.js LibHunt Info Categories 75 Tags 5457 Projects 935 Subscribe to our Node.js newsletter to know all the trending modules, news and articles. * featured www.saashub.com All Categories Ast 4 Authentication 6 Authorization 3 Automation 4 Benchmarking 2 Blogging 4 Build Tools 16 Command-line apps 16 Command Line Apps 64 Command-line utilities 17 Compression 13 Content Management Systems 9 Control Flow 31 Cross-platform integration 4 Database 49 Data Validation 13 Date 9 Debugging / Profiling 24 Distributed Computing 2 Documentation 13 Email 4 Filesystem 24 Forum 1 Functional Programming 17 Hardware 12 HTTP 34 Humanize 7 Image 14 Job Queues 13 Logging 16 Mad Science 28 Math 7 Minifiers 6 Miscellaneous 59 Natural Language Processing 7 Network 6 Node.Js Management 7 Number 4 P2P 5 Package Manager 4 Parsing 34 Polyfills 24 Process Management 11 Real-time 4 Real Time 13 Resources 1 Search 1 Security 15 Serialization 4 Static Site Generators 9 Streams 19 Templating 7 Testing 40 Text 24 Third-party APIs 5 Url 8 Utilities 23 Web Frameworks 66 Weird 9 MORE - Discover trending JavaScript project*. The Awesome Node.js fe*. Promo coderabbit.ai Today JavaScript Meta Programming: In-Depth Guide on Proxy, Reflect, and Object Property Control * ActionHero Actionhero is a realtime multi-transport nodejs API Server with integrated cluster capabilities and delayed tasks Featured Module // Category Web Frameworks Yesterday mathjs An extensive math library for JavaScript and Node.js Featured Module // Category Math Last 7 Days *! * Awesome Node.js Weekly » 442 Top Stories *? * Java* Feathers The API and real-time application framework Featured Module // Category Web Frameworks We reach 750+ Stars on our Repository! * CodeceptJS Supercharged End 2 End Testing Framework for NodeJS Featured Module // Category Testing Understanding JavaScript Closures: A Comprehensive Guide * Java* * * * UglifyJS2 JavaScript parser / mangler / compressor / beautifier toolkit Featured Module // Category Minifiers How I Improved Video Streaming with FFmpeg and Node.js * pino 🌲 super fast, all natural json logger Featured Module // Category Logging * * xior A lite request lib based on fetch with plugin support and similar API to axios. Featured Module // Category HTTP Last 30 Days marko A declarative, HTML-based language that makes building web apps fun Featured Module // Category Templating * * Node vs Rails performance Article Popular Story // youtu.be WebdriverIO Next-gen browser and mobile automation test framework for Node.js Featured Module // Category Testing *? * Deprecating Node JS REST APIs in 6 Frameworks Article Popular Story // zuplo.com Fix an issue on my Dockerfile: ARG Scope in Multi-Stage Docker Build * Awesome Node.js Weekly » 441 Top Stories Node.js 22 LTS released 🔥 * 🚀 Validating API Requests with JSON Schema BitcoinJS A javascript Bitcoin library for node.js and browsers. Featured Module // Category Mad Science MongoDB The official MongoDB Node.js driver Featured Module // Category Drivers 🔥 * 🚀 * How to Properly Deprecate a REST API Article Popular Story // zuplo.com Node.js 22 LTS released Article Popular Story // nodejs.org oclif CLI for generating, building, and releasing oclif CLIs. Built by Salesforce. Featured Module // Category Command-line utilitie*",
    "url": "https://nodejs.libhunt.com/"
  },
  {
    "body": " * * » 281 Release Date Oct 07, 2021 Popular News and Articles Create a backend in Javascript: NodeJS Module System dev.to Fetching data in React: Quick guide dev.to How to build 7,000+ REST APIs within 2 mins (Node.js + MySQL) !! dev.to * Polymorphism without objects via multimethods blog.klipse.tech Medium Web Scraping with Node.js in 5 Minutes javascript.plainenglish.io In Interviews, Solving Coding Challenges May Not Matter as Much as You Think medium.com How to Create a Resumable MultiFile Uploader with NodeJs medium.com * JavaScript Data Structures: What Are They And Why Learn Them link.medium.com Using Prisma ORM to build a Node.js application with MySQL blog.tericcabrel.com API with NestJS #50. Introduction to logging with the built-in logger and TypeORM wanago.io *rks. Medusa » API » Composable The world's most flexible commerce platform. mjml-react » Email » HTML React component library to generate the HTML emails on the fly shader-school :mortar_board: A workshopper for GLSL shaders and graphics programming Appwrite » Android » Apple Your backend, minus the hassle. nodejs-integration-tests-best-practices » Database » JavaScript ✅ Beyond the basics of Node.js testing. Including a super-comprehensive best practices list and an example app (March 2024) » **",
    "url": "https://nodejs.libhunt.com/newsletter/281"
  },
  {
    "body": " * * » 297 Release Date Jan 27, 2022 Popular News and Articles How to build a REST API using NodeJS dev.to Some Best Practices of Javascript for clean and better code quality... dev.to In-depth of tnpm rapid mode - how we managed to be 10 second faster than pnpm dev.to * Help open source communities find and fix vulnerabilities with The Big Fix hacka-fixathon, and get a t-shirt snyk.io NodeJS Login using Access & Refresh Tokens youtube.com An Introduction to the Set Data Structure in JavaScript medium.com Master Interfaces in TypeScript youtu.be * How automating API Integrations benefits your business wundergraph.com Avoiding rogue Node.js packages with good version dependencies in package.json medium.com web scraping RSS feed with cheerio node js www.youtube.com *rks. nodejs-integration-tests-best-practices » Database » JavaScript ✅ Beyond the basics of Node.js testing. Including a super-comprehensive best practices list and an example app (March 2024) cryptopunks Collectible 8-bit characters on the Ethereum blockchain. flagsmith » CI » Continuous Integration Open Source Feature Flagging and Remote Config Service. Host on-prem or use our hosted version at https://flagsmith.com/ iptv-channels Collection of 6000+ free IPTV channels from all over the world [GET https://api.github.com/repos/iptv-restream/iptv-channels: 403 - Repository access blocked] IdentityServer » OAuth » Security The most flexible and standards-compliant OpenID Connect and OAuth 2.x framework for ASP.NET Core » **",
    "url": "https://nodejs.libhunt.com/newsletter/297"
  },
  {
    "body": " * * » 315 Release Date Jun 02, 2022 Popular News and Articles Jest is being transferred to the OpenJS Foundation engineering.fb.com Understanding CSRF Attacks dev.to npm security update: Attack campaign using stolen OAuth tokens | The GitHub Blog github.blog * New Express 5 Features to Try fusebit.io Learn MERN like a pro dev.to Deploy An Express Node.js Application to Heroku Quickly and Easily dev.to Build a Data Access Layer with PostgreSQL and Node.js blog.appsignal.com * build a login system with mongoose and express - methods and muddleware youtu.be 📖 Deploying a NestJS app to Cloud Run with Github Actions www.tomray.dev JWT in 2 minutes youtu.be *rks. kuwala » Data » Data Science Kuwala is the no-code data platform for BI analysts and engineers enabling you to build powerful analytics workflows. We are set out to bring state-of-the-art data engineering tools you love, such as Airbyte, dbt, or Great Expectations together in one intuitive interface built with React Flow. In addition we provide third-party data into data science models and products with a focus on geospatial data. Currently, the following data connectors are available worldwide: a) High-resolution demographics data b) Point of Interests from Open Street Map c) Google Popular Times react-uploady » Browser » Components Modern file uploading - components & hooks for React nodejs-integration-tests-best-practices » Database » JavaScript ✅ Beyond the basics of Node.js testing. Including a super-comprehensive best practices list and an example app (March 2024) organice » Emacs » Productivity An implementation of Org mode without the dependency of Emacs - built for mobile and desktop browsers open-source-jobs » awesome-list » Awesome A list of Open Source projects offering jobs. » **",
    "url": "https://nodejs.libhunt.com/newsletter/315"
  },
  {
    "body": " * * » 346 Release Date Jan 05, 2023 Popular News and Articles How to Write an Awesome Readme dev.to How to build a secure API gateway in Node.js | The Snyk blog snyk.io 4 Common Mistakes Made by Node.js Developers amplication.com * How to Build a Telegram Bot using Typescript & Node.js dev.to Why JavaScript Developers Should Learn Node.js and Backend Databases dev.to Monorepos vs Multirepos: A Comprehensive Comparison www.devtip.co Web Scraping Google Autocomplete Keywords serpdog.io * Structuring a React Project for Scalability www.devtip.co Two-Phased Commit and eXtended Architecture: The Basics with NodeJS example blog.sofwancoder.com Is this Node.js Crash Course Tutorial good, accurate, reliable, and up to date? youtube.com *rks. postcat » API » NodeJS Postcat 是一个可扩展的 API 工具平台。集合基础的 API 管理和测试功能，并且可以通过插件简化你的 API 开发工作，让你可以更快更好地创建 API。An extensible API tool. marpit » Framework » Markdown The skinny framework for creating slide deck from Markdown svelte-adders » Svelte » Vite Easily add integrations and other functionality to Svelte(kit) apps SvelteKit » JS » HacktoberFest web development, streamlined nodejs-integration-tests-best-practices » Database » JavaScript ✅ Beyond the basics of Node.js testing. Including a super-comprehensive best practices list and an example app (March 2024) » **",
    "url": "https://nodejs.libhunt.com/newsletter/346"
  },
  {
    "body": " * * » 398 Release Date Jan 04, * 2024’s Tech Trend: Frontend for Backend dev.to North Korea malware on npm and Ledger connect-kit crypto heist www.nodejs-security.com North Korean state hackers compromise npm supply chain with malicious packages; crypto thieves exploit Ledger Connect kit library published to npm, stealing $600k before detected; incident highlights risks of uncontrolled open source usage and need for better validation, monitoring of third party code. Enforcing ESLint rules: A guide to taming codebase chaos dev.to * You Don’t Need Microservices: A Real-World Perspective dev.to Parallelism in NodeJs 0-1 www.frameworks.co.in Leapcell: Vercel Alternative for NodeJS leapcell.io Flystorage, a file storage abstraction. A single API for local or cloud-based file storage. flystorage.dev * Why should not use EventEmitter for Asynchronous Operations in NodeJS www.youtube.com DTO Validation in ExpressWebjs i.redd.it How to Use Enums in TypeScript for Cleaner Code geshan.com.np *rks. culori » Color » Interpolation A comprehensive color library for JavaScript. shader-park-core » Processing » Real-time A JavaScript library for creating real-time 2D and 3D shaders. JS -> Shader. https://shaderpark.com/ https://twitter.com/shaderpark images » Containers » devcontainers Repository for pre-built dev container images published under mcr.microsoft.com/devcontainers democratic-csi » Debian » Kubernetes csi storage for container orchestration systems moonbit-docs » programming-language The docs of MoonBit programming language » **",
    "url": "https://nodejs.libhunt.com/newsletter/398"
  },
  {
    "body": " * * » 399 Release Date Jan 11, * How Marketing Changed OOP In JavaScript www.smashingmagazine.com MikroORM 6: Polished mikro-orm.io [JS] The top-level scope is NOT always the global scope dev.to * JSON's Numeric Boundaries: The Lesser-Known Reality of Inaccurate Figures blog.phakorn.com Ditch REST, go intent based dev.to Biggest package on npm? 5.96 GB! Longest npm package name? 214 characters! Package with the most maintainers? 554 maintainers! socket.dev [JS] What happens when “use strict” is defined dev.to * When \"Everything\" Becomes Too Much: The npm Package Chaos of 2024 socket.dev NestJS: Server framework on steroids 🎉 blog.disane.dev Creating a Prisma Client Extension medium.com *rks. stylex StyleX is the styling system for ambitious user interfaces. cuid2 Next generation guids. Secure, collision-resistant ids optimized for horizontal scaling and performance. react-three-next » Tailwind » React React Three Fiber, Threejs, Nextjs starter Installer A Windows 11 modification which makes it more consistent. meshery » Docker » Kubernetes Meshery, the cloud native manager » **",
    "url": "https://nodejs.libhunt.com/newsletter/399"
  },
  {
    "body": " * * » 400 Release Date Jan 18, * Understanding Async Iterators in JavaScript dev.to Optimizing SQL Queries by 23x!!! dev.to Middleware in Express.js dev.to * Introducing fsx: A modern filesystem API for JavaScript humanwhocodes.com NAPI-RS packages now can run on browser node-rs.dev Hexagonal architecture implementation on the example of MongoDB with PostgreSQL support in NestJS Boilerplate whiskey.hashnode.dev Oxlint, a future replacement for ESLint? oxc-project.github.io * Introducing JavaScript Support in MySQL blogs.oracle.com Select API with NestJS #141. Getting distinct records with Prisma and PostgreSQL wanago.io Secure JavaScript Coding to Avoid Insecure Direct Object References (IDOR) www.nodejs-security.com An IDOR vulnerability was discovered in Clerk's Next.js SDK, what is it exactly? Insecure direct object references (IDOR) are an important web application security concept that every developer should understand. IDOR vulnerabilities allow attackers to access unauthorized data and functionality by manipulating object identifiers used in web applications. *rks. YouTransfer » Distributed filesystems » File Sharing and Synchronization The simple but elegant self-hosted file transfer & sharing solution homepage » Docker » Nextjs A highly customizable homepage (or startpage / application dashboard) with Docker and service API integrations. nue » JavaScript » css-framework The Design Engineering Framework for the Web lucide » Editable data grid / spreadsheet » Icons Beautiful & consistent icon toolkit made by the community. Open-source project and a fork of Feather Icons. mantis-free-react-admin-template » ant-design » Free Mantis is React Dashboard Template having combine tone of 2 popular react component library - MUI and Ant Design principles. » **",
    "url": "https://nodejs.libhunt.com/newsletter/400"
  },
  {
    "body": " * * » 401 Release Date Jan 25, * PM2 Cheatsheet dev.to Trigger.dev v3: Durable Serverless functions. No timeouts. dev.to 3 Principles for Component-Driven Development dev.to * A 2024 Wishlist for Node's Test Runner cjihrig.com API Mocking in Node with Mock Service Worker youtu.be Modeling Authorization in Prisma - No Theory, Just Code zenstack.dev Graceful cancellations: How to keep your application and workflow state consistent 💪 restate.dev * How to use Google Cloud Shell Editor to deploy a Node.js app from GitHub to Cloud Run geshan.com.np How to use the dotenv package in Node 7.dev How to Deploy Your Node.js Backend Project to Vercel: A Step-by-Step Guide masteringbackend.com *rks. eth-phishing-detect Utility for detecting phishing domains targeting Web3 users automerge A JSON-like data structure (a CRDT) that can be modified concurrently by different users, and merged again automatically. makemd » obsidian-md » Obsidian Plugin automatisch » Automation » Workflow The open source Zapier alternative. Build workflow automation without spending time and money. EmulatorJS » SNES » Emulator A web-based frontend for RetroArch » **",
    "url": "https://nodejs.libhunt.com/newsletter/401"
  },
  {
    "body": " * * » 402 Release Date Feb 01, * npm flooded with 748 packages that store movies blog.sonatype.com 9 Steps for JWT Authentication in Node.js Application dev.to Job Scheduling in Node.js with BullMQ betterstack.com * Deferred JavaScript promises using Promise.withResolvers pawelgrzybek.com NestJS Dependency Injection - Overview dev.to Announcing AdonisJS v6 dev.to How TypeScript can help in modelling business workflows event-driven.io * How to Scrape a Website Using Node.js and Cheerio plainenglish.io How to Scrape a Website Using Node.js and Puppeteer plainenglish.io How to stream files from Next.js Route Handlers www.ericburel.tech *rks. yomitan Pop-up dictionary browser extension. Successor to Yomichan. anything-llm » desktop-app » Webui The all-in-one Desktop & Docker AI application with built-in RAG, AI agents, and more. langserve » Deployment » Fastapi LangServe 🦜️🏓 unifi-ddns » DNS » Ubiquiti Cloudflare DDNS (Dynamic DNS) support for UniFi OS canvas-engines-comparison Performance comparison of different canvas rendering engines. » **",
    "url": "https://nodejs.libhunt.com/newsletter/402"
  },
  {
    "body": " * * » 403 Release Date Feb 08, * A step-by-step guide: How to create and publish an NPM package. dev.to Node.js Community Debate Intensifies over Potentially Unbundling NPM socket.dev Build and Deploy Buymeacoffee with MongoDB, NodeJS, ExpressJS dev.to * Como RUSHAR um serviço assíncrono de envio de dados dev.to Redis error in Render trying to deploy my backend i.redd.it JSDoc: Improve your JavaScript code documentation blog.danilovilhena.com Profiling Tools and Techniques for Node.js Applications soshace.com * Implementing DDSketch with Redis, a LUA Script, and TypeScript for Scalable Fast Quantiles www.multiple.dev Topic Classifiers in Node.js Using Astra Vector Search thecodebarbarian.com API with NestJS #144. Creating CLI applications with the Nest Commander wanago.io *rks. insomnium Insomnium is a fast local API testing tool that is privacy-focused and 100% local. For testing GraphQL, REST, WebSockets and gRPC. This is a fork of Kong/insomnia react-native-test-app » Android » iOS react-native-test-app provides an app for all supported platforms as a package FreeTube » Video » Privacy An Open Source YouTube app for privacy database » Channels » Database User editable database for TV channels. Nginx Proxy Manager » Proxy » Nginx Docker container for managing Nginx proxy hosts with a simple, powerful interface » **",
    "url": "https://nodejs.libhunt.com/newsletter/403"
  },
  {
    "body": " * * » 404 Release Date Feb 15, * Introducing Tempo • A new date library for JavaScript (and TypeScript). dev.to Implementing a Service Oriented Architecture in 2024 dev.to Implementing a Service Oriented Architecture in 2024 dev.to * Emmett - Build event-driven applications without boilerplate using Node.js and TypeScript event-driven-io.github.io Project showcase: B00k1 b00k1.onrender.com Deceptive Deprecation: The Truth About npm Deprecated Packages blog.aquasec.com console.delight frontendmasters.com * API with NestJS #145. Securing applications with Helmet wanago.io Mastering N-API and Native Modules in Node.js soshace.com *rks. examples » NodeJS » Node A repository of runnable Node.js examples that go beyond \"hello, world!\" govuk-frontend » Portfolio » govuk-frontend GOV.UK Frontend contains the code you need to start building a user interface for government platforms and services. idurar-erp-crm » CRM » E-commerce Free Open Source ERP CRM Accounting Invoicing Software | Node Js React frida-interception-and-unpinning » Android » Interception Frida scripts to directly MitM all HTTPS traffic from a target mobile application refact » AI » Chat WebUI for Fine-Tuning and Self-hosting of Open-Source Large Language Models for Coding » **",
    "url": "https://nodejs.libhunt.com/newsletter/404"
  },
  {
    "body": " * * » 405 Release Date Feb 22, * What do you think of Node's new mascot? It's called Rocket Turtle. i.redd.it How to Use Google Gemini with Node.js dev.to How to set up a Node server with TypeScript in 2024 www.learnwithjason.dev * Next.js 14 Booking App with Live Data Scraping using Scraping Browser dev.to ProgpJS: a fast javascript engine for Go! dev.to The best way to get NVM working in CI/CD systems gagor.pl Node Automatic Audit Trails bemi.io * Express TC Meeting Feb 15 2024 x.com Node.js 2023 Year in An Article blog.rafaelgss.dev Delaying work in Node.js: Promises, Child Processes and Queues www.defer.run *rks. idiomorph A DOM-merging algorithm peggy » Parser » Pegjs Peggy: Parser generator for JavaScript lnreader » Android » React Native Light novel reader for Android. pot-desktop » Linux » OCR 🌈一个跨平台的划词翻译和OCR软件 | A cross-platform software for text translation and recognition. evidence » Analytics » Business Intelligence Business intelligence as code: build fast, interactive data visualizations in pure SQL and markdown » **",
    "url": "https://nodejs.libhunt.com/newsletter/405"
  },
  {
    "body": " * * » 406 Release Date Feb 29, * JWT explained in 4 minutes (With Visuals) dev.to EP94: REST API Cheatsheet app.daily.dev JWT explained in 4 minutes (With Visuals) app.daily.dev * Standard JavaScript Objects That Every Developer Should Know levelup.gitconnected.com Dive into Backend Development by Building a CRUD API with Node and MongoDB app.daily.dev Implementing Passport Local With Yarn, Typescript, Express and PostgreSQL dev.to Side projects (sometimes) pay off dev.to * Top 8 Recent V8 Updates blog.appsignal.com 5 Node.js security code snippets every backend developer should know | Snyk snyk.io Shipping Prisma inside Electron was a mistake youtu.be *rks. ScratchAddons » firefox-extension » Firefox All-in-one browser extension for Scratch. btw » note-taking » Medium Open source Medium alternative- set up your personal blog in minutes. deploy-pages » Deployment » github-actions GitHub Action to publish artifacts to GitHub Pages for deployments phoenix » CSS » Editor Phoenix is a modern open-source Code Editor for the web, built for the browser. pulsar » JavaScript » Electron A Community-led Hyper-Hackable Text Editor » **",
    "url": "https://nodejs.libhunt.com/newsletter/406"
  },
  {
    "body": " * * » 407 Release Date Mar 07, * Learn OAuth 2.0 by Building an OAuth Client with Node annotate.dev ExpressoTS Middleware & Controller dev.to What is REST API dev.to * JWT Authentication in NodeJS dev.to From many to one: Moving our JavaScript code into a monorepo www.aha.io Microservices Authentication and Authorization Using API Gateway app.daily.dev Unit Testing in Node.js and TypeScript: A Comprehensive Guide with Jest Integration app.daily.dev * Introducing JSR - the JavaScript Registry deno.com How to Build a Basic CMS with Google Sheets and React app.daily.dev Fireship: Drizzle ORM in 100 Seconds www.youtube.com *rks. wireflow » JavaScript » HacktoberFest Wireflow - user flow chart real-time collaborative tool readability A standalone version of the readability lib react-strict-dom React Strict DOM (RSD) standardizes the development of styled React components for web and native. Baileys Lightweight full-featured typescript/javascript WhatsApp Web API stdlib » JavaScript » JS ✨ Standard library for JavaScript and Node.js. ✨ » **",
    "url": "https://nodejs.libhunt.com/newsletter/407"
  },
  {
    "body": " * * » 408 Release Date Mar 14, * The 5 Must-Know Backend Frameworks in 2024 dev.to Next.js SaaS Boilerplate and Starter Kit - SaaSBold dev.to Create a Discord bot with NodeJS dev.to * Scaling Node.js instance for CPU-intensive application helabenkhalfallah.medium.com Event Sourcing with Emmett: Reducing the Entry Barrier medium.com Announcing Experimental Inertia adapter for AdonisJS (with SSR Support) adonisjs.com Automatic Audit Trails for Node bemi.io * Node.js Performance APIs: An Introduction blog.appsignal.com How to tackle compatibility issues in ECMA Script modules (and in general) event-driven.io *rks. phaser » Canvas » Game development Phaser is a fun, free and fast 2D game framework for making HTML5 games for desktop and mobile web browsers, supporting Canvas and WebGL rendering. Food Delivery Multivendor » Marketplace » food-ordering Enatega is a fully realized and customizable food delivery application that can be used to set up your own order/delivery management systems. For more information, visit the Enatega product page: 🚀🛒📦🌐 Planka » Docker » JavaScript The realtime kanban board for workgroups built with React and Redux. forge » Linux » window-manager Forge - Tiling and Window Manager for Gnome-Shell htmx » HTML » JavaScript </> htmx - high power tools for HTML » **",
    "url": "https://nodejs.libhunt.com/newsletter/408"
  },
  {
    "body": " * * » 409 Release Date Mar 21, * 22 JavaScript Functions You'll Use 99% of The Time 💯🔥 dev.to Why Facebook doesn’t use Git app.daily.dev npm install everything, and the complete and utter chaos that follows boehs.org * Top 10 Micro Frontend Anti-Patterns dev.to Immutable array updates with Array.prototype.with web.dev 6 Tools To Help Keep Your Dependencies And Code More Secure dev.to Node benchmarks are often deceiving www.conner.dev * require(esm) in Node.js joyeecheung.github.io Node.js vs ASP.NET For Enterprise Application Development www.netguru.com Executable Playground of \"typia\", super-easy/fast TypeScript validator/serializer typia.io *rks. winterjs Winter is coming... ❄️ Speedometer An open source repository for the Speedometer benchmark dashboard » Pipeline » UI A dashboard for Tekton! quarto-cli Open-source scientific and technical publishing system built on Pandoc. cosmic GNOME Shell extension. See cosmic-epoch for COSMIC Epoch » **",
    "url": "https://nodejs.libhunt.com/newsletter/409"
  },
  {
    "body": " * * » 410 Release Date Mar 28, * Node.js TSC Confirms: No Intention to Remove npm from Distribution socket.dev __dirname is back in Node.js with ES modules www.sonarsource.com How npm install scripts can be weaponized: A real-world example of a harmful npm package stacklok.com * Implement User Uploads with Presigned URLs on Cloudflare R2 (With Node, Typescript and Express) annotate.dev Cookies in Depth using Javascript and NodeJs dev.to HTML to PDF renderers: A simple comparison dev.to Made a tactical soccer game for web using React for the frontend and Node with NestJS for the backend. tracesoccer.io * Unleashing the Potential of Node.js: A Comprehensive Guide - MERN STACK Series dev.to Node.js: The Documentary | An origin story www.youtube.com Frontless - make web application without writing frontend code www.frontless.dev *rks. zksync-web-era-docs » team-core » zksync zkSync Era Documentation bruno » Automation » Git Opensource IDE For Exploring and Testing Api's (lightweight alternative to postman/insomnia) vueform » Form » Form Builder Open-Source Form Framework for Vue SillyTavern » AI » Chat LLM Frontend for Power Users. codespaces-project-template-js » JavaScript » Template Codespaces template for creating and deploying your own React portfolio » **",
    "url": "https://nodejs.libhunt.com/newsletter/410"
  },
  {
    "body": " * * » 411 Release Date Apr 04, * Bun 1.1 bun.sh 🧠 50 Articles to Level Up dev.to How to Implement Rate Limiting in Express for Node.js blog.appsignal.com * Bun or Node.js in 2024? dev.to How to scrape Amazon products dev.to Understanding Node.js threads pavel-romanov.com JavaScript String Methods That Make Developer’s Life Easier medium.com * API with NestJS #148. Understanding the injection scopes wanago.io Building a Discord Bot with Node.js, TypeScript, and Eris: Simplified Guide coderoasis.com How to Create a Mailer in Node.js using Gmail account implementing.substack.com *rks. sveltia-cms » Asset Management » CMS Alternative to Netlify/Decap CMS. Fast, lightweight, Git-based headless CMS. Modern UX, first-class i18n support, open source & free. Made with Svelte. generator » Codegen » Documentation Use your AsyncAPI definition to generate literally anything. Markdown documentation, Node.js code, HTML documentation, anything! tailwindcss-typography Beautiful typographic defaults for HTML you don't control. qryn » API » JSON qryn is a polyglot, high-performance observability framework for ClickHouse. Ingest, store and analyze logs, metrics and telemetry traces from any agent supporting Loki, Prometheus, OTLP, Tempo, Elastic, InfluxDB and many more formats and query transparently using Grafana or any other compatible client. images » Containers » devcontainers Repository for pre-built dev container images published under mcr.microsoft.com/devcontainers » **",
    "url": "https://nodejs.libhunt.com/newsletter/411"
  },
  {
    "body": " * * » 412 Release Date Apr 11, * ElephantSQL (free Postgres) is shutting down, so I’m building a spiritual successor, mkdb mkdb.sh Different Ways to Import Files in a Node.js Project dev.to Building Scalable GraphQL Microservices With Node.js and Docker: A Comprehensive Guide dev.to * Node.js cluster module. You probably don't need it. pavel-romanov.com MikroORM 6.2: Say hello to SQL Server (and libSQL) mikro-orm.io AI Character Generator dev.to An Introduction to the Node.js Performance API betterstack.com * How to Implement a Magic Link Authentication using Node.js and JSON Web Token (JWT) implementing.substack.com An Introduction to Clustering in Node.js soshace.com Fedify: an ActivityPub server framework fedify.dev *rks. strudel » JavaScript » Music Web-based environment for live coding algorithmic patterns, incorporating a faithful port of TidalCycles to JavaScript puter » Desktop » desktop-environment 🌐 The Internet OS! Free, Open-Source, and Self-Hostable. langflow » react-flow » large-language-models Langflow is a low-code app builder for RAG and multi-agent AI applications. It’s Python-based and agnostic to any model, API, or database. contoso-real-estate » Architecture » Azure Intelligent enterprise-grade reference architecture for JavaScript, featuring OpenAI integration, Azure Developer CLI template and Playwright tests. nextly-template » Free » Template Nextly Landing Page Template built with Next.js & TailwindCSS » **",
    "url": "https://nodejs.libhunt.com/newsletter/412"
  },
  {
    "body": " * * » 413 Release Date Apr 18, * How to implement HLS Video Streaming in a React App dev.to The difference between '||' and '??' in JavaScript. dev.to Effect 3.0 – Effect Blog effect.website * How to capture Node.js Garbage Collection traces? blog.gceasy.io Nine Docker pro tips for Node.js developers dev.to Reduce Database Load with Bloom Filters implementing.substack.com Introducting rcompat primatejs.com * Mocking the native Node.js Test Runner event-driven.io Implementing Role-Based Access Control (RBAC) in Node.js medium.com Containerize Node.js applications at the edge on RHEL and Fedora developers.redhat.com *rks. moonbit-docs » programming-language The docs of MoonBit programming language homepage » Docker » Nextjs A highly customizable homepage (or startpage / application dashboard) with Docker and service API integrations. nue » JavaScript » css-framework The Design Engineering Framework for the Web stremio-web » HacktoberFest » stremio Stremio - Freedom to Stream cuid2 Next generation guids. Secure, collision-resistant ids optimized for horizontal scaling and performance. » **",
    "url": "https://nodejs.libhunt.com/newsletter/413"
  },
  {
    "body": " * * » 414 Release Date Apr 25, * JavaScript Features That Most Developers Don’t Know levelup.gitconnected.com Different approaches to reduce AWS S3 file upload time using AWS-SDK v3 in NodeJS. dev.to Publish Your Articles on Medium with NodeJS dev.to * How to implement rate limit in your server app? dev.to Increase 10x API Read speed with cache using Redis implementing.substack.com Load Testing Node.js with Artillery: A Beginner's Guide betterstack.com NodeJS 22: Require() Support & WebSockets coderoasis.com * Reliable HTTP: Outsmarting the Two Generals with Webhooks antman-does-software.com Create better UI bringing Excel Controls using Jspreadsheet jspreadsheet.com Build a Completely Dynamic UI with Sanity, a Node Server and React medium.com *rks. jsoncanvas An open file format for infinite canvas data. microrealestate » open-source » Opensource This is an Open Source Real estate management system that helps landlords to manage their rentals and properties rive-wasm Wasm/JS runtime for Rive evershop » E-commerce » Postgresql 🛍️ NodeJS E-commerce Platform appium-inspector » Appium » Inspector A GUI inspector for mobile apps and more, powered by a (separately installed) Appium server » **",
    "url": "https://nodejs.libhunt.com/newsletter/414"
  },
  {
    "body": " * * » 415 Release Date May 02, * Ditch dotenv: Node.js Now Natively Supports .env File Loading javascript.plainenglish.io Native Support for CJS/ESM Interoperability Begins in Node.js 22 open.substack.com NodeJS 22 is Live dev.to * Deploy Your Node.js App in Minutes: Public IP + Nginx on Ubuntu ⚡ dev.to Node.js PM2 Orchestration Explained dev.to Session-Based vs. Token-Based Authentication: Which is better? app.daily.dev Introducing Node.js Security Permissions Model, Threat Model, and Security Releases www.nodejs-security.com Learn how to secure your Node.js applications with the new Permissions Model, stay informed about security releases, and understand the Node.js Security Threat. * Secure your API with Rate Limiting using Redis open.substack.com Deploying to Vercel: The Unhappy Path www.alexchantastic.com Using Vite To Rebuild Local Dependencies in an NPM Workspace prosopo.io *rks. anything-llm » desktop-app » Webui The all-in-one Desktop & Docker AI application with built-in RAG, AI agents, and more. yomitan Pop-up dictionary browser extension. Successor to Yomichan. EmulatorJS » SNES » Emulator A web-based frontend for RetroArch langserve » Deployment » Fastapi LangServe 🦜️🏓 unifi-ddns » DNS » Ubiquiti Cloudflare DDNS (Dynamic DNS) support for UniFi OS » **",
    "url": "https://nodejs.libhunt.com/newsletter/415"
  },
  {
    "body": " * * » 416 Release Date May 09, * Part 5: Building a Simple Web Server with Node.js dev.to 5 Node.js Version Managers Compared - Which One is Right for You? pavel-romanov.com You don't need dotenv. dev.to * StudyPal: Your AI-Powered Personalized Learning Companion dev.to Native Support for CJS/ESM Interoperability Begins in Node.js 22 webdeveloper.beehiiv.com Encore for TypeScript - Open Source Backend SDK & Rust runtime for Node.js encore.dev No Need For Nodemon: Native File Watching in Node.js app.daily.dev * Open-source JavaScript SDK for spawning secure sandboxes for AI code execution e2b.dev Should Node.js be built with ClangCL under Windows? lemire.me Effective Testing in JavaScript blog.appsignal.com *rks. drawdb » Editor » MariaDB Free, simple, and intuitive online database diagram editor and SQL generator. wg-best-practices-os-developers The Best Practices for OSS Developers working group is dedicated to raising awareness and education of secure code best practices for open source developers. GameTracking-CS2 » Protobuf » Reverse Engineering 📥 Game Tracker: Counter-Strike 2 alien.js 👽 MVC design pattern and graphics pipeline Hermione » Testing » testing-tools Testplane (ex-hermione) browser test runner based on mocha and wdio » **",
    "url": "https://nodejs.libhunt.com/newsletter/416"
  },
  {
    "body": " * * » 417 Release Date May 16, * Build your own AI Video editor with Node.js, AssemblyAI & StreamPot dev.to A Fresh Look: Exploring Galaxy 2.0's New UI/UX dev.to Top Programming Blogs to Read in 2024 dev.to * Web Scraping with Node-Fetch (Ultimate Guide) www.scrapingdog.com Simple Implemention to Understand WorkerThreads in NodeKS coderoasis.com The Journey to 100x-ing Control Plane Scale for Cribl Edge cribl.io To IDOR or Not to IDOR: Insecure Direct Object Reference in JavaScript Applications Explained www.nodejs-security.com Can you spot an Insecure Direct Object Reference (IDOR) vulnerability in your JavaScript application? Learn what IDOR is, how it can be exploited, and how to prevent it in your code. * *rks. cobalt » Downloader » Music best way to save what you love examples » NodeJS » Node A repository of runnable Node.js examples that go beyond \"hello, world!\" frida-interception-and-unpinning » Android » Interception Frida scripts to directly MitM all HTTPS traffic from a target mobile application rabbitmq-website » Documentation » Rabbitmq RabbitMQ website wg-easy » Docker » VPN The easiest way to run WireGuard VPN + Web-based Admin UI. » **",
    "url": "https://nodejs.libhunt.com/newsletter/417"
  },
  {
    "body": " * * » 418 Release Date May 23, * Create a CRUD App with Prisma ORM & Node Js dev.to Map vs WeakMap #javascript #nodejs #shorts youtube.com Fastify Developers: Upgrade Your Logging with This Simple Guide dev.to * Las 20 preguntas principales de entrevistas sobre React dev.to Reliable Background Task Execution using BullMQ and Node.js gauravbytes.hashnode.dev API with NestJS #149. Introduction to the Drizzle ORM with PostgreSQL wanago.io How does your chatbot UX size up? The 5 laws of ChatRobotics evilmartians.com * Jest Mock Extended - Writing Typescript Friendly Tests uptownhr.com *rks. jellyfin-web » Media » Jellyfin Web Client for Jellyfin idiomorph A DOM-merging algorithm webos-homebrew-channel » webos » enyo Unofficial webOS TV homebrew store and root-related tooling evidence » Analytics » Business Intelligence Business intelligence as code: build fast, interactive data visualizations in pure SQL and markdown lucide » Editable data grid / spreadsheet » Icons Beautiful & consistent icon toolkit made by the community. Open-source project and a fork of Feather Icons. » **",
    "url": "https://nodejs.libhunt.com/newsletter/418"
  },
  {
    "body": " * * » 419 Release Date May 30, * All About NPM (Node Package Manager) dev.to Interact with AI from your Terminal with Gen-ai-chat dev.to Maintaining Session Data Across Page Redirects: A Comprehensive Guide dev.to * JavaScript Got Good jonbeebe.net Strong vs WeakRef #coding #javascript #nodejs youtube.com Proposal: Promise with Resolvers 2ality.com API with NestJS #150. One-to-one relationships with the Drizzle ORM wanago.io * *rks. extensions Extensions for the Zed editor relative-time-element » Localization » Timezone Web component extensions to the standard <time> element. peggy » Parser » Pegjs Peggy: Parser generator for JavaScript veaury » React » Vue Use React in Vue3 and Vue3 in React, And as perfect as possible! automerge A JSON-like data structure (a CRDT) that can be modified concurrently by different users, and merged again automatically. » **",
    "url": "https://nodejs.libhunt.com/newsletter/419"
  },
  {
    "body": " * * » 420 Release Date Jun 06, * Node.js Best Practices: A Guide for Developers dev.to The best free, open-source SaaS template for React & NodeJS dev.to Advanced Error Handling in Node.js dev.to * Node.js Test Runner: A Beginner's Guide betterstack.com Your Node is Leaking Memory? setTimeout Could be the Reason lucumr.pocoo.org Encore: development platform for TypeScript www.youtube.com Build a Chat app with NodeJS, React and Socket.io youtu.be * Build a Multi-Tenant app with NodeJS and Prisma - Multiple Database Conn... www.youtube.com Secure Coding Practices in Node.js Against Path Traversal Vulnerabilities www.nodejs-security.com Path traversal vulnerabilities were discovered in webpack and backstage npm packages. Learn secure coding practices to prevent path traversal attacks in Node.js applications. Installing Playwright on Heroku for Programmatic Node.js Browser Automation lirantal.com Getting Playwright to work on Heroku wasn't smooth sailing. It looked for browser dependencies that weren't installed by default and not in the location it expected them. Here's how I did it and what I learned along the way. *rks. btw » note-taking » Medium Open source Medium alternative- set up your personal blog in minutes. orange-orm » Database » MySQL Javascript and Typescript ORM with full intellisense, no-code generations. Works over http as well. WebTools-NG » Plex » webtools WebTools Next Generation for Plex model-explorer A modern model graph visualizer and debugger jellyfin-tizen Jellyfin Samsung TV Client » **",
    "url": "https://nodejs.libhunt.com/newsletter/420"
  },
  {
    "body": " * * » 421 Release Date Jun 13, * Commonly Used Databases with Node.js and Express dev.to MongoDB Aggregation, is really powerful dev.to 10 Modern Node.js Runtime Features snyk.io * PDF Form Manipulation API dev.to Weekend Challenge - Implement OpenTelemetry in NodeJS signoz.io IPC made easy with Execa 9.2 medium.com Announcing Restate 1.0, Restate Cloud, and our Seed Funding Round restate.dev * *rks. Baileys Lightweight full-featured typescript/javascript WhatsApp Web API shepherd » Tours And Guides » HacktoberFest Guide your users through a tour of your app vdhcoapp Companion application for Video DownloadHelper browser add-on phoenix » CSS » Editor Phoenix is a modern open-source Code Editor for the web, built for the browser. breeze-next » Authentication » Nextjs An application / authentication starter kit frontend in Next.js for Laravel Breeze. » **",
    "url": "https://nodejs.libhunt.com/newsletter/421"
  },
  {
    "body": " * * » 422 Release Date Jun 20, * How to Implement Authorization in NodeJS dev.to Combining Node.js with Async Rust for remarkable performance dev.to How to build a Web IDE like codesandbox? dev.to * Putting an event loop in your event loop: Combining Node.js with Async Rust for remarkable performance encore.dev The World Wide Scroll (powered by Node.js) scroll.pub What's New in Mongoose 8.4: transactionAsyncLocalStorage and inferRawDocType thecodebarbarian.com What is Database Sharding and How Does It Work? gauravbytes.hashnode.dev * TypeSpec — HTTP POST Operation with Query/Header (Part-4) medium.com API with NestJS #153. SQL transactions with the Drizzle ORM wanago.io IDOR Vulnerability: What is it and how to prevent it? www.nodejs-security.com Interestingly enough, the IDOR vulnerability type is found as a CVE more commonly in some languages rather than others. Why is that and how can you prevent it? *rks. Food Delivery Multivendor » Marketplace » food-ordering Enatega is a fully realized and customizable food delivery application that can be used to set up your own order/delivery management systems. For more information, visit the Enatega product page: 🚀🛒📦🌐 forge » Linux » window-manager Forge - Tiling and Window Manager for Gnome-Shell Mull-Fenix Build scripts for a web browser built upon Mozilla technology mediacms » Audio » CMS MediaCMS is a modern, fully featured open source video and media CMS, written in Python/Django and React, featuring a REST API. Planka » Docker » JavaScript The realtime kanban board for workgroups built with React and Redux. » **",
    "url": "https://nodejs.libhunt.com/newsletter/422"
  },
  {
    "body": " * * » 423 Release Date Jun 27, * Understanding JWT Authentication: A Comprehensive Guide with Examples dev.to Mastering Typescript Runtime Configurations medium.com Letz Understand NPM Versioning: A Beginner's Guide dev.to * How to Create an AI-Powered CLI with Pieces dev.to From dotenv to dotenvx: Next Generation Config Management dotenvx.com Profiling Node.js Applications betterstack.com Optimizing Web Backends medium.com * Create a REST API with Rate Limiting and Authentication using Zuplo in a Node.js Project youtu.be JS library to underline/highlight web page content [Review] opensourcedisc.substack.com Github Releases are no match for CHANGELOG.md bessey.dev *rks. dotenvx » Env » Dotenv a better dotenv–from the creator of `dotenv` supabase-custom-claims How to implement custom claims with Supabase appium-uiautomator2-driver » Android » Driver Appium driver for Android UIAutomator2 database » Channels » Database User editable database for TV channels. remark-gfm » Github » Table remark plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists) » **",
    "url": "https://nodejs.libhunt.com/newsletter/423"
  },
  {
    "body": " * * » 424 Release Date Jul 04, * Legendary Emails in Node js with mjml 📩 dev.to How we tamed Node.js event loop lag: a deepdive dev.to Crafting a Node.js based framework SDK for Logto in minutes dev.to * * Cross-Platform Mobile App Development www.quickwayinfosystems.com Blog post about a POC I did to dynamically derive asynchronous domain models conner.dev Backstage on Kubernetes - Piotr's TechBlog piotrminkowski.com [Electron/Node] Programming Live Video for Twitch, YouTube, Instagram, and TikTok programmers.fyi * *rks. ai.robots.txt A list of AI agents and robots to block. OpenSign » Document Management » JavaScript 🔥 The free & Open Source DocuSign alternative stf » Android » Debugging Control and manage Android devices from your browser. omniclip Open source video editing web application monorepo » Globalization » I18n lix (change control system) && inlang (globalization ecosystem for software built on lix) » **",
    "url": "https://nodejs.libhunt.com/newsletter/424"
  },
  {
    "body": " * * » 425 Release Date Jul 11, * Node.js is Not Single-Threaded dev.to Docker for Node.js Developers: A DevOps Guide to Efficient Deployment dev.to Is JavaScript Really as Insecure as They Say? dev.to * How we invalidate cache for resource-heavy & long-running requests punits.dev Mastering NestJS — Building an Effective REST API Backend medium.com A Guide to Front-End vs. Back-End vs. Full-Stack Development www.quickwayinfosystems.com More from our sponsors SaaSHub - Softw* *rks. name-suggestion-index » JavaScript » HacktoberFest Canonical common brand names, operators, transit and flags for OpenStreetMap. actual-server Actual's server SillyTavern » AI » Chat LLM Frontend for Power Users. fleetbase » Infrastructure » open-source Modular logistics and supply chain operating system (LSOS) sveltia-cms » Asset Management » CMS Alternative to Netlify/Decap CMS. Fast, lightweight, Git-based headless CMS. Modern UX, first-class i18n support, open source & free. Made with Svelte. » **",
    "url": "https://nodejs.libhunt.com/newsletter/425"
  },
  {
    "body": " * * » 426 Release Date Jul 18, * How to build a full stack blog application using NodeJS MongoDB ExpressJS dev.to Create a Spotify Playlist Generator with Arcjet Protection dev.to CORS: The ultimate guide www.devsecurely.com * 🔴 Realtime Responsive Chat App with React, Node.js, Socket.io and MongoDB with Group Chats and File Uploads dev.to Node-based script to share secrets easily www.getgrist.com npm Cache Poisoning www.landh.tech Property Based Testing with Node.js test runner | fast-check fast-check.dev * a note on an interesting utility i found on npm: patch-package www.rishi25m.com Celp - Contextually Aware AI-Driven Unit Test Generation for Typescript Node.js projects www.celp.ai Creating Zip Files with JavaScript www.cjoshmartin.com *rks. Termino.js » Browser » CLI Create a web based terminal on any website - great for games, animations and real world apps! langflow » react-flow » large-language-models Langflow is a low-code app builder for RAG and multi-agent AI applications. It’s Python-based and agnostic to any model, API, or database. puter » Desktop » desktop-environment 🌐 The Internet OS! Free, Open-Source, and Self-Hostable. zed-fonts The Zed Mono and Sans typefaces, custom built from Iosevka VChart » Canvas » Chart VChart, more than just a cross-platform charting library, but also an expressive data storyteller. » **",
    "url": "https://nodejs.libhunt.com/newsletter/426"
  },
  {
    "body": " * * » 427 Release Date Jul 25, * Why is spawning a new process in Node so slow? blog.val.town MikroORM 6.3: Schema first? mikro-orm.io Lessons learned from building a Serverless NodeJS API with Vercel, Neon, and Prisma ORM rafaelcamargo.com * Supabase RLS Alternative dev.to Leading Node.js Frameworks for Backend Development in 2024 dev.to How should a modern Notification Service be built in 2024 www.suprsend.com How to Create a Scalable Folder/File Structure for Your Express Application dev.to * Nested Dynamic Modules in NestJS dev.clintonblackburn.com How LinkedIn Smartly Routes their Unseen Notifications from In-app Inbox to your Email? www.suprsend.com Building an LLM Chat & Task Bot with Restate restate.dev *rks. moonbit-docs » programming-language The docs of MoonBit programming language sharedrop » JavaScript » peer-to-peer Easy P2P file transfer powered by WebRTC - inspired by Apple AirDrop thread » Analytics » Data Science AI-powered Jupyter Notebook — use local AI to generate and edit code cells, automatically fix errors, and chat with your data intro » open-source Empowering Your Open Source Journey: From First Contribution to Project Leadership splink » Data Science » Spark Fast, accurate and scalable probabilistic data linkage with support for multiple SQL backends » **",
    "url": "https://nodejs.libhunt.com/newsletter/427"
  },
  {
    "body": " * * » 428 Release Date Aug 01, * Meteor.js 3 is officially here! dev.to Awesome Open-Source Projects for Developers (Part 1) dev.to What happens when a major npm library goes commercial? adventures.nodeland.dev * Mastering CORS: The Definitive Guide with Practical Examples dev.to Live types in a TypeScript monorepo colinhacks.com Understanding JSON Web Tokens JWT for Secure Information Sharing differ.blog Everything to get started with Web Push Notifications Service Workers www.suprsend.com * Developing Secure Mobile Applications: Tips and Best Practices www.quickwayinfosystems.com Offshore & Maritime Accident Lawyer www.broussardinjurylawyers.com Our offshore &amp; maritime accident lawyers are team players who navigate complex maritime laws, ensuring your rights are protected. Contact us to get the compensation you deserve. *rks. sakai-vue Free Vue Admin Template by PrimeVue ergogen » ergogen Ergonomic keyboard layout generator arcfox » Browser » Tabs Make firefox flow like arc uMap » Geojson » Map uMap lets you create maps with OpenStreetMap layers in a minute and embed them in your site. ShareLaTex » Note-taking and Editors A web-based collaborative LaTeX editor » **",
    "url": "https://nodejs.libhunt.com/newsletter/428"
  },
  {
    "body": " * * » 429 Release Date Aug 08, * * & 3x faster than Bun + Zod dev.to Array Grouping in JavaScript (2024) dev.to 10 modern Node.js runtime features to start using in 2024 | Snyk snyk.io * Advanced CORS: Deep Dive into Cross-Origin Resource Sharing dev.to Break the rules! (but only if you understand them) backendtea.com Vitale: Live notebooks in VS Code for JavaScript/TypeScript, web development, and AI experimentation githubnext.com How to Integrate Apache Kafka with Node.js codenoun.com * Building Robust Webhook Services in Node.js: Best Practices and Techniques gauravbytes.hashnode.dev Prevent Leaking Sensitive Data with Redacted in TypeScript youtu.be *rks. uBOL-home uBO Lite home (MV3) anything-llm » desktop-app » Webui The all-in-one Desktop & Docker AI application with built-in RAG, AI agents, and more. yomitan Pop-up dictionary browser extension. Successor to Yomichan. runet-censorship-bypass » chrome-extension » Chromium Web-extension for bypassing censorship in Russia Chartbrew » Analytics » API Open-source web platform used to create live reporting dashboards from APIs, MongoDB, Firestore, MySQL, PostgreSQL, and more 📈📊 » **",
    "url": "https://nodejs.libhunt.com/newsletter/429"
  },
  {
    "body": " * * » 430 Release Date Aug 15, * Common Causes of Memory Leaks in JavaScript www.trevorlasn.com How to let ChatGPT call functions in your app dev.to Effective API Error Handling www.bitstreamapis.com * 14 JavaScript One-Liners to Boost Your Productivity 🚀 dev.to Building and Dockerizing a MERN Stack Application dev.to How npm create works and building your own create package www.alexchantastic.com 🍊 Tangerine is a drop-in DNS replacement for Node.js to send DNS over HTTPS requests (built by creators of Forward Email) forwardemail.net * Implement Kafka and Node.js in Microservice Architecture codenoun.com Protobuf-ES 2.0 is now generally available buf.build Writing and testing event-driven projections with Emmett, Pongo and PostgreSQL event-driven.io *rks. drawdb » Editor » MariaDB Free, simple, and intuitive online database diagram editor and SQL generator. oTranscribe » Misc/Other A free & open tool for transcribing audio interviews bruno » Automation » Git Opensource IDE For Exploring and Testing Api's (lightweight alternative to postman/insomnia) public-apis » Resources » HacktoberFest A collaborative list of public APIs for developers microrealestate » open-source » Opensource This is an Open Source Real estate management system that helps landlords to manage their rentals and properties » **",
    "url": "https://nodejs.libhunt.com/newsletter/430"
  },
  {
    "body": " * * » 431 Release Date Aug 22, * Modern API Development with Node.js, Express, and TypeScript using Clean Architecture dev.to Enabling OpenAI to call functions in your app (TypeScript / Node.js) dev.to Deploy Your Express Backend in Vercel for Free 🚀⚡ dev.to * 10 Essential Terminal Commands Every Developer Should Know www.trevorlasn.com Understanding AbortController in Node.js: A Complete Guide betterstack.com Implementing SAML SSO in Node.js with Microsoft Entra ID www.sheshbabu.com How to Handle Custom Content-Type Fields in FormData With Fastify purpr.groon.dev * How to Integrate Meilisearch with Node.js for Fast and Relevant Search Results codenoun.com Deno CLI Vulnerability Repeats npm mistakes: CVE-2024-37150 www.nodejs-security.com Deno vulnerability CVE-2024-37150 - a recent security issue in the Deno CLI highlights the importance of secure credential handling. Learn how this vulnerability mirrors past npm CLI mistakes and what you can do to stay secure. *rks. cobalt » Downloader » Music best way to save what you love unifi-ddns » DNS » Ubiquiti Cloudflare DDNS (Dynamic DNS) support for UniFi OS Floorp » Browser » Firefox All of source code of version 10 or later of Floorp Browser, the most Advanced and Fastest Firefox derivative 🦊 frida-interception-and-unpinning » Android » Interception Frida scripts to directly MitM all HTTPS traffic from a target mobile application sprig » Game » Game development 🍃 Learn to code by making games in a JavaScript web-based game editor. » **",
    "url": "https://nodejs.libhunt.com/newsletter/431"
  },
  {
    "body": " * * » 432 Release Date Aug 29, * Mastering Middleware in Node.js: The Secret Sauce of Express.js 🥪 dev.to Top Free APIs You Need to Know in 2024 dev.to JS Dates Are About to Be Fixed docs.timetime.in * Types of Middleware: The Different Flavors 😋 dev.to Speeding Up Your Website Using Cloudflare Cache pillser.com Node.js Prisma ORM Audit Trail Guide medium.com More from our sponsors SaaSHub - Softw* *rks. evidence » Analytics » Business Intelligence Business intelligence as code: build fast, interactive data visualizations in pure SQL and markdown meshery » Docker » Kubernetes Meshery, the cloud native manager wg-easy » Docker » VPN The easiest way to run WireGuard VPN + Web-based Admin UI. vueform » Form » Form Builder Open-Source Form Framework for Vue appium-inspector » Appium » Inspector A GUI inspector for mobile apps and more, powered by a (separately installed) Appium server » **",
    "url": "https://nodejs.libhunt.com/newsletter/432"
  },
  {
    "body": " * * » 433 Release Date Sep 05, * Add an authorization layer to your app with Permit.io🔏 in a few minutes ⏱️ dev.to * dev.to It’s Time to Rethink Event Sourcing blog.bemi.io * Introduction to WebRTC dev.to Improve your backend performance with SSE using Node JS and Express www.youtube.com AggregateError in JavaScript www.trevorlasn.com Using event metadata in event-driven projections event-driven.io * Embrace Intermediate Variables and Early Returns www.trevorlasn.com Secure Node.js Applications from Supply Chain Attacks a0.to Integrate Gemini API into your Node JS application. youtu.be *rks. extensions Extensions for the Zed editor simorgh » Nextjs » React The BBC's Open Source Web Application. Contributions welcome! Used on some of our biggest websites, e.g. lenis » Scroll » smooth How smooth scroll should be dbml » dbx Database Markup Language (DBML), designed to define and document database structures ckeditor5 » Editors » JavaScript Powerful rich text editor framework with a modular architecture, modern integrations, and features like collaborative editing. » **",
    "url": "https://nodejs.libhunt.com/newsletter/433"
  },
  {
    "body": " * * » 434 Release Date Sep 12, * How to make your Express.js APIs 9x faster with Encore.ts dev.to Monorepo – The Magic of One Repo you must know as full stack developer dev.to Create API Gateway with fast-gateway dev.to * API Rate Limiting in Node.js | Enhance API Performance & Security codenoun.com How to Implement API Rate Limiting with Redis and Node.js codenoun.com Open-source streaming API from ingest to player matvp91.github.io Replace std::strings by std::string_views when you can lemire.me * How to Enable CORS in Express.js: A Step-by-Step Guide codenoun.com *rks. Notes » Markdown » Note Taking App Build your personal knowledge base with TriliumNext Notes tonweb JavaScript SDK for TON (The Open Network) qryn » API » JSON qryn is a polyglot, high-performance observability framework for ClickHouse. Ingest, store and analyze logs, metrics and telemetry traces from any agent supporting Loki, Prometheus, OTLP, Tempo, Elastic, InfluxDB and many more formats and query transparently using Grafana or any other compatible client. FirefoxCSS-Store » Themes » Firefox A collection site of Firefox userchrome themes, mostly from FirefoxCSS Reddit community. EmulatorJS » SNES » Emulator A web-based frontend for RetroArch » **",
    "url": "https://nodejs.libhunt.com/newsletter/434"
  },
  {
    "body": " * * » 435 Release Date Sep 19, * DevSecOps Project: \"Secure Full-Stack Node.js Web Application Deployment with Jenkins, Docker, Kubernetes, and HashiCorp Vault\" dev.to Micro-libraries need to die already bvisness.me High performance Node.js static file serving — using Rust dev.to * JavaScript `string.replace()` useful cases dev.to Pongo gets strongly-typed client, migrations, and command line tooling event-driven.io Everything you need to know to conquer JavaScript dates! youtu.be More from our sponsors SaaSHub - Softw* *rks. Baileys Lightweight full-featured typescript/javascript WhatsApp Web API youtube-webos YouTube app for webOS without ads phoenix » CSS » Editor Phoenix is a modern open-source Code Editor for the web, built for the browser. vdhcoapp Companion application for Video DownloadHelper browser add-on cdxgen » Containers » Docker Creates CycloneDX Bill of Materials (BOM) for your projects from source and container images. Supports many languages and package managers. Integrate in your CI/CD pipeline with automatic submission to Dependency Track server. Google chat: https://chat.google.com/room/AAAA6l2dO60?cls=7 » **",
    "url": "https://nodejs.libhunt.com/newsletter/435"
  },
  {
    "body": " * * » 436 Release Date Sep 26, * *) dev.to What's New in Express.js 5.0 www.trevorlasn.com * (feature comparison and migration guide) dev.to * Unit Testing With Vitest - A Great Alternative to Jest jsdevspace.substack.com Fastify v5 breaking changes: should you upgrade? dev.to Using Promise.withResolvers in Node.js Tests lirantal.com Like using Promises?? :) Explore the use of `Promise.withResolvers` in Node.js tests, providing examples and refactoring techniques to handle nested tests and signal their completion effectively. It also discusses the limitations of the `Promise.withResolvers` API in different Node.js versions. More from our sponsors SaaSHub - Softw* *rks. AIGODLIKE-ComfyUI-Translation » Translation » comfyui A plugin for multilingual translation of ComfyUI，This plugin implements translation of resident menu bar/search bar/right-click context menu/node, etc Mull-Fenix Build scripts for a web browser built upon Mozilla technology openscope » Aviation » Canvas openScope Air Traffic Control Simulator simple-icons » Design » Icons SVG icons for popular brands evershop » E-commerce » Postgresql 🛍️ NodeJS E-commerce Platform » **",
    "url": "https://nodejs.libhunt.com/newsletter/436"
  },
  {
    "body": " * * » 437 Release Date Oct 03, * * dev.to Encore.ts — 3x faster than Elysia & Hono dev.to Eicrud: The Most Opinionated Node.js Framework blog.eicrud.com * Building A Memory Game with PhaserJS and ReactJS jsdev.space 50 System Design Terms That Will Make You Sound Like a Pro dev.to Pongo, using PostgreSQL as a strongly-consistent Document Database m.youtube.com Pylon v2 now supports NodeJS pylon.cronit.io * *rks. dotenvx » Env » Dotenv a better dotenv–from the creator of `dotenv` mosaic » Data » Visualization An extensible framework for linking databases and interactive views. stremio-web » HacktoberFest » stremio Stremio - Freedom to Stream curriculum » CSS » HTML The open curriculum for learning web development animator Design tool for creating Lottie animations and interactive web components » **",
    "url": "https://nodejs.libhunt.com/newsletter/437"
  },
  {
    "body": " * * » 438 Release Date Oct 10, * 10 JavaScript concepts every Node developer must master dev.to npm Vs npx dev.to * dev.to * Mastering OpenLayers - A Comprehensive Guide to Advanced Mapping jsdev.space Using Github Repository To Host NPM Packages january.sh Document Translation - OpenAI Real-Time Speech API Beta Version jsdev.space Best practices for Slack app development: my starter kit setup youtu.be * Do not use secrets in environment variables and here's how to do it better www.nodejs-security.com Stop storing secrets in environment variables. It's a bad practice and only fits hobby or side projects with no real business impact. Here are all the reasons why you should never store secrets in environment variables and how to do it better. *rks. CIPs Cardano Improvement Proposals (CIPs) zeus » Android » Bitcoin A mobile Bitcoin wallet fit for the gods. ⚡️ Est. 563345 Butterfly » Android » App 🎨 Powerful, minimalistic, cross-platform, opensource note-taking app OpenSign » Document Management » JavaScript 🔥 The free & Open Source DocuSign alternative idiomorph A DOM-merging algorithm » **",
    "url": "https://nodejs.libhunt.com/newsletter/438"
  },
  {
    "body": " * * » 439 Release Date Oct 17, * Create a Slack Bot with NodeJS and Slack Bolt API dev.to Optimizing JavaScript with Maps, Sets, and Weak References dev.to Your First Backend Application using Node.js dev.to * Swagger UI Generation from Existing Express Code medium.com Friday Links 6 on JavaScript Development Space jsdev.space VoidZero: Threat or Catalyst for Open Source JavaScript Tooling? www.trevorlasn.com More from our sponsors SaaSHub - Softw* *rks. aws-mlu-explain » AI » AWS Visual, Interactive Articles About Machine Learning: https://mlu-explain.github.io/ tsimp module-replacements A manifest of JS modules and their more modern/active replacements self-hosted » Docker » self-hosted Deploy Revolt using Docker. Ultraviolet » ES6 » JavaScript A highly sophisticated proxy used for evading internet censorship or accessing websites in a controlled sandbox using the power of service-workers. Works by intercepting HTTP requests with a service worker script that follows the TompHTTP specifications. » **",
    "url": "https://nodejs.libhunt.com/newsletter/439"
  },
  {
    "body": " * * » 440 Release Date Oct 24, * In the future using top-level await might be a BC break in Node evertpot.com Why Web Workers Depend on JavaScript ?? dev.to SecretLint — A Linter for Preventing Committing Credentials www.trevorlasn.com * Sherlock Holmes: The Case Of Missing Cookies dev.to Audio to Text Input via Google Speech to Text dev.to React on the server is not PHP www.artmann.co Compare BaaS providers stackchoice.dev * JSON Merge Patch with Node JS Examples zuplo.com Using Protocol Buffers in JavaScript: Efficient Binary Format jsdev.space JSON Patch Guide with Node Examples zuplo.com *rks. sveltia-cms » Asset Management » CMS Alternative to Netlify/Decap CMS. Fast, lightweight, Git-based headless CMS. Modern UX, first-class i18n support, open source & free. Made with Svelte. pythagora » NodeJS » Testing Generate automated tests for your Node.js app via LLMs without developers having to write a single line of code. fleetbase » Infrastructure » open-source Modular logistics and supply chain operating system (LSOS) automatisch » Automation » Workflow The open source Zapier alternative. Build workflow automation without spending time and money. SillyTavern » AI » Chat LLM Frontend for Power Users. » **",
    "url": "https://nodejs.libhunt.com/newsletter/440"
  },
  {
    "body": " * * » 441 Release Date Oct 31, * Node.js 22 LTS released nodejs.org 🔥 * 🚀 dev.to Validating API Requests with JSON Schema zuplo.com * Creating a global production ready marketplace with Medusa JS dev.to How to Properly Deprecate a REST API zuplo.com * dev.to Create an Awesome Live Typing Effect like ChatGPT with Node.js! youtu.be * Bootstrapping CRUD with Pongo event-driven.io *rks. homeproxy The modern ImmortalWrt proxy platform for ARM64/AMD64 (powered by sing-box) wud » Docker » NodeJS WUD (aka What's up Docker?) gets you notified when a new version of your Docker Container is available. ToolJet » Docker » JavaScript Low-code platform for building business applications. Connect to databases, cloud storages, GraphQL, API endpoints, Airtable, Google sheets, OpenAI, etc and build apps using drag and drop application builder. Built using JavaScript/TypeScript. 🚀 Calendar.js » Calendar » JavaScript 📅 A javascript drag & drop event calendar, that is fully responsive and compatible with all modern browsers. book Web browser engineering (a book) » **",
    "url": "https://nodejs.libhunt.com/newsletter/441"
  },
  {
    "body": " * * » 442 Release Date Nov 07, * *? dev.to * dev.to Java* dev.to * Node vs Rails performance youtu.be Deprecating Node JS REST APIs in 6 Frameworks zuplo.com More from our sponsors SaaSHub - Softw* *rks. desktop » Firefox » firefox-browser 🌀 Experience tranquillity while browsing the web without people tracking you! Fraction.js » JavaScript » Math Fraction is a rational numbers library written in JavaScript MinerU » OCR » Parser A one-stop, open-source, high-quality data extraction tool, supports PDF/webpage/e-book extraction.一站式开源高质量数据提取工具，支持PDF/网页/多格式电子书提取。 sakai-vue Free Vue Admin Template by PrimeVue transformers.js » Browser » JavaScript State-of-the-art Machine Learning for the web. Run 🤗 Transformers directly in your browser, with no need for a server! » **",
    "url": "https://nodejs.libhunt.com/newsletter/442"
  },
  {
    "body": " * * * * * About Press SIGN IN/*! Featured Post * All Posts Node.js *) by: Lizz Parody in Node.js on Nov 08 2024 Community ESM Node.js Share On October 29, 2024,* Node.js v22 officially transitioned into *Long Term Support (LTS) with the codename 'Jod'. For developers and organizations relying on the stability of Node.js for production environments, this transition marks a key milestone for Node.js 22.x, ensuring it will receive critical updates and security support for years to come. Let’s take a closer look at what this means, along with a refresher on the Node.js release lifecycle 🔄. I believe the transition to LTS makes this release line more stable, especially given the improvements made over 10 releases. This line now offers a wealth of features, providing a mature and reliable option for production use -Rafael Gonzaga, Principal OSS Engineer at NodeSource Understanding the Node.js Release Lifecycle The Node.js release lifecycle is designed to provide a balance between innovation and stability, allowing developers to explore new features while maintaining the confidence that production applications will have the longevity of support they need. Here’s a breakdown of each stage: Current Release: Each new major version of Node.js starts in the \"Current\" phase, a six-month period in which the community can test new features, APIs, and performance improvements. During this phase, library maintainers and developers are encouraged to adopt new features, providing valuable feedback. The \"Current\" release is updated frequently, helping the community prepare for the latest advancements in Node.js. Active LTS: After the Current phase, Node.js releases undergo a divergence based on version number. Odd-numbered releases (e.g., v21) enter unsupported status, while even-numbered releases (e.g., v22) transition to Active LTS status. In this phase, which typically lasts one year, the Node.js version is deemed stable and ready for production use. This period includes patches for bugs, critical fixes, and security updates. It is the most widely used phase for Node.js releases in production environments. Maintenance LTS: After the Active LTS period concludes, a Node.js release enters the Maintenance LTS phase. This phase, lasting approximately 18 months, focuses on essential bug fixes and security patches. No new features are introduced during this time, which helps to ensure stability for production applications. Maintenance LTS is the final phase before a version reaches the end of its lifecycle. End of Life (EOL): After Maintenance LTS, a Node.js version reaches End of Life (EOL), meaning it will no longer receive official support or updates from the Node.js project. Users running EOL versions are encouraged to upgrade to supported versions to maintain security and receive the latest patches. Node.js typically maintains three active release lines simultaneously. This includes one Current version, one Active LTS version, and one Maintenance LTS version. By keeping a mix of releases in each phase, the Node.js team provides a structured progression of stability while supporting a range of user needs across different environments. Node.js v22.11.0 \"Jod\" (LTS): What’s New? Now that we understand the Node.js Life Cycle, let’s see what’s new on the latest LTS. With Node.js v22.11.0, the 22.x release line has officially moved into Active LTS. The release includes an update to metadata, like the process.release object, to reflect this new LTS status. Let’s look at some key highlights of Node.js v22: 1. Built-in WebSocket Client A significant development in Node.js v22 is the built-in WebSocket client, now enabled by default for browser compatibility. Previously, developers had to rely on third-party libraries for WebSocket functionality, but with Node.js v22, the process is streamlined. Developers can now open bidirectional communication channels between client and server without external dependencies, paving the way for efficient real-time application development. 2. Stable Watch Mode Previously marked as experimental, the Watch Mode feature is now stable in Node.js v22. Developers can use --watch to monitor files and automatically restart processes on changes, eliminating the need for third-party tools like nodemon. This addition can significantly boost productivity during development by reducing manual restarts. 3. ESM Graphs in require() Working with ECMAScript Modules (ESM) in Node.js has often required intricate workarounds, especially when integrating with CommonJS modules. Node.js v22 simplifies this by allowing the import of entire ESM graphs using require() through the --experimental-require-module option. This feature provides smoother module interoperability, making it easier to develop modular, maintainable code without complex dependencies. 4. Simplified Script Execution with --run An experimental --run flag has been added to execute scripts directly from package.json, providing a faster alternative to npm run for frequently used commands. This feature allows quicker access to scripts without the overhead of loading npm, making it particularly useful for routine testing and debugging. 5. V8 Engine Upgraded to Version 12.4 With the V8 engine update to version 12.4, Node.js v22 introduces a range of advanced capabilities: WebAssembly Garbage Collection improves memory handling for WebAssembly applications. New JavaScript Functions: Array.fromAsync() for asynchronous array generation, new Set methods, and iterator helpers give developers powerful new tools. High Watermark Increase: The default high watermark for streams has been raised from 16 KB to 65 KB, boosting performance for memory-intensive applications, though developers working with limited memory can adjust it as needed. These upgrades further enhance Node.js’s ability to support modern JavaScript applications with robust performance and efficient memory management. 6. Pattern Matching with glob and globSync In this release, Node.js introduces pattern-matching capabilities to the node:fs module through glob and globSync. These new methods simplify file system operations by allowing developers to search and manipulate files based on specific patterns, streamlining tasks like organizing files or managing directory structures. 7. Optimized AbortSignal Creation Node.js v22 enhances AbortSignal creation performance, which directly benefits high-level APIs that utilize this class, including fetch and the Node.js test runner. This improvement ensures that applications relying on these APIs can now execute more efficiently, especially in performance-sensitive environments. Is particularly exciting how Node.js v22 fills some long standing gaps by incorporating features that truly deserve to be part of the core runtime. The inclusion of a built-in WebSocket client and the stabilization of Watch Mode are game-changers. These additions eliminate the need for external libraries and tools that developers have relied on for years to perform essential tasks. The ‘Jod’ release not only streamlines the development process but also enhances performance and security. It's a significant step forward that reflects the project's commitment to evolving based on the real needs of its user community -Adrian Estrada, VP of Engineering at NodeSource Why Move to Node.js 22.x? As Node.js v22 moves to LTS status, it becomes an attractive option for long-term projects and production environments. The simplified module handling, and built-in tools make it a robust choice for developers looking to build scalable, modern applications. If you’re considering an upgrade, now is an ideal time to explore Node.js v22’s capabilities and prepare for its benefits in a stable, supported environment. For developers and businesses on older Node.js versions, Node.js v22 now presents a compelling choice. Its Active LTS phase means it’s ready for production, with a guaranteed support timeline, critical security updates, and enhanced functionality. Here’s why it might be worth considering an upgrade: Extended Support: Node.js v22 will remain in Active LTS until October 2025, providing a full year of active support before it transitions to Maintenance LTS, which will continue until April 2027. Stability for Production: The LTS phase is carefully managed to minimize risk, with a focus on bug fixes and security patches rather than new features. This makes Node.js v22 a safe and stable choice for production applications. Node.js v20 is now in maintenance mode, which means, no features will land there anymore (except security releases). How to Upgrade to Node.js 22.x For organizations and developers ready to migrate to Node.js v22.x, here are some best practices to keep in mind: Test Your Application: Before rolling out any major upgrade, thoroughly test your application in a staging environment. Node.js v22.x introduces certain performance optimizations and under-the-hood improvements, so it's essential to confirm compatibility with your codebase and any dependencies. Update Dependencies: Make sure all libraries and dependencies are compatible with Node.js v22.x. Check for deprecations or breaking changes, especially if you're coming from an older LTS version. a. You can update your dependencies for Linux using NodeSource N|Solid & Node.js Binary Distributions b. For most developers, especially on Unix-based systems, nvm provides the easiest upgrade path, you can run: nvm install 22 nvm use 22 c. For MacOS you can instal Node.js via Homebrew: brew update brew upgrade node d. Downloading from the Official Node.js Site: https://nodejs.org/en Monitor Performance: After upgrading, monitor application performance to ensure that your application continues to function optimally. Node.js v22.x comes with improved diagnostics and performance, but monitoring will help catch any unforeseen issues early. Use N|Solid to get the deepest, most valuable performance and security telemetry in production to help you resolve issues faster. We are working on the “*4” which will show the performance difference between v20 and v22, keep an eye on the NodeSource blog to not miss it. Follow Best Practices for Security: Node.js v22’s improves security, but it’s still important to implement additional security measures, such as enforcing HTTPS and using secure coding practices. The N|Solid Runtime supports the latest LTS version. Download it now for free here. Final Thoughts The release of Node.js v22.11.0 as an LTS version represents another significant step in the evolution of the Node.js platform, particularly for developers and organizations seeking stability and security. With Active LTS support extending into late 2025, and a Maintenance phase until April 2027, Node.js v22.x is an excellent choice for those aiming for long-term support in production environments. The transition of Node.js 22.x into LTS highlights the Node.js project’s ongoing commitment to providing a secure, reliable platform for the global developer community. For those on earlier Node.js versions, now is an ideal time to consider upgrading to Node.js v22.x and benefiting from its extended support period. Stay tuned for updates on future releases, as Node.js continues to deliver powerful tools and capabilities to meet the needs of an ever-evolving tech landscape. Use N|Solidto monitor Node.js 22.x performance. Looking for advanced or enterprise support for Node.js? NodeSource is the premier provider, trusted by organizations like Delta, Visa, and Kaiser, to ensure robust support for their Node.js platforms. Partner with us to keep your applications secure, performant, and reliable. Featured Articles * In Product on Aug 22 2024 * * In Product on Apr 29 * The NodeSource platform offers a high-definition view of the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/Node.js-v22-Long-Term-Support-LTS"
  },
  {
    "body": " * * * * * * All Posts Community * a Big Announcement for Latin America! In Community on Nov 07 2024 * JSConf Latam Read More Node.js 2023 Year in Review In Community on Feb 22 2024 Explore the major achievements and updates in the Node.js ecosystem in 2023, including new releases, security enhancements, and performance improvements.\" Read More 3 Takeaways from Web Summit 2023 In Community on Nov 30 2023 Dive into Web Summit 2023 with NodeSource-uncover AI's impact, global collaboration, transformative innovations, and anticipate exciting prospects for 2024. Read More * In Community on Nov 30 2023 Explore JSConf Colombia's dynamic 10th anniversary, supported by NodeSource. Discover insights, innovations, and the vibrant Colombian tech community. Read More Welcome to The Future of Software Development: Powered by Telemetry, Security, and AI In Community on Jul 19 2023 the future of software development, is powered by telemetry, security, and AI - which was the topic of our talk. Learn how we are enabling that future. Read More AI & ML - Highlights Google I/O (Connect) - Miami In Community on Jun 12 2023 Dive into cutting-edge AI & ML. Unlock breakthroughs, and delve into advanced concepts, gaining invaluable insights to propel your expertise. Read More Measuring latency from the client side using Chrome DevTools and N|Solid In Community on Jun 01 2023 Learn how to measure latency from the client-side using Chrome DevTools & N|Solid. Gain insights into optimizing performance and enhancing user experiences. Read More NodeForest Status Report - Earth Day Project In Community on Apr 22 2023 NodeSource in 2022 create NodeForest, a forest exceeding the target by 52%. The report provides a follow-up on the trees' growth, ensuring sustainability. Read More Introducing nsuv In Community on Mar 08 2023 nsuv is a C++ wrapper around libuv with the main goal of supporting compile-time type safety when propagating data. Read More Interview With Italo José Core committer at @herbsjs In Community on Jan 17 2023 We are thrilled to be part of developing powerful tools like N|Solid. Our part in this is to give a megaphone and make visible the OSS projects we admire. Read More 2023 N|Solid Awards: The Top 10 Best Node.js Open Source Projects to Watch In Community on Jan 12 2023 The Top 10 Best Node.js Open Source Projects to Watch Read More Instrument your Nodejs Applications with Open Source Tools - Part 2 In Community on Oct 17 2022 Get insights into the current state of your running applications/services through OpenTelemetry. Extract metrics, logs and traces, using the best practices. Read More PREV 1 / 18 NEXT Feature* * Product on Jun 26 * © *",
    "url": "https://nodesource.com/blog/category/community"
  },
  {
    "body": " * * * * * * All Posts How To Low cost IoT device monitoring with Node.js In How To on Sep 01 2022 N|Solid SaaS allows you to monitor and observe the behavior of your IoT device built in Node.js with an overhead of less than 1%. Read More Understanding dependencies inside your Package.json In How To on Feb 24 2022 In this blog post, you can find a list and description of `dependencies` and other host Specs inside `package.json`. Read More What's new in npm 8? In How To on Dec 15 2021 A blog post that summarizes all the changes and new stuff in npm 8 Read More Using Node.js to Create Powerful, Beautiful, User-Friendly CLIs In How To on Mar 14 2019 Learn how to use Node.js and public npm packages to build a user-friendly command line interface (CLI) Read More Tutorial: Getting Started on N|Solid for AWS Lambda with CloudFormation and Serverless In How To on Dec 14 2018 We've prepared the following tutorial to provide step-by-step instructions ideal for folks who may not already have Lambda functions running in production Read More Triaging Known Vulnerabilities in Your Dependency Tree with NCM Desktop In How To on Oct 10 2018 Learn to use NCM Desktop to triage vulnerabilities in your dependency tree, regardless of if they're top-level or deeply nested. Read More Installing Node.js Tutorial: Using snaps on Linux In How To on Apr 24 2018 Node.js is now available on Linux machines via snaps. snaps are containerized software packages designed to work across cloud, desktop, and IoT devices. Read More Understanding Vulnerabilities in Node.js Applications with N|Solid In How To on Mar 16 2018 Take a deep dive into the N|Solid dashboard and the in-production Node.js vulnerability monitoring tooling it provides. Read More Creating and Saving Views in N|Solid 3.0 In How To on Jan 23 2018 Learn to create and save custom views to monitor your Node.js processes vulnerabilities in N|Solid 3.0. Read More Using N|Solid with AppDynamics to Monitor Node.js Applications In How To on Oct 23 2017 Learn how to use the integration between N|Solid and AppDynamics to get insight into enriched Node.js metrics. Read More Scale Node.js with N|Solid and Kubernetes on IBM Bluemix Container Service In How To on Oct 12 2017 Learn how to deploy Node.js applications using N|Solid and scaling them using Kubernetes on IBM Bluemix Container Service. Read More Node.js Performance Monitoring - Part 3: Debugging the Event Loop In How To on Sep 20 2017 Take a deep dive into the Node.js event loop and learn how to diagnose and debug issues that stem from unoptimized JavaScript. Read More PREV 1 / 5 NEXT Feature* * Product on Jun 26 * © *",
    "url": "https://nodesource.com/blog/category/how-to"
  },
  {
    "body": " * * * * * * All Posts Node.js Node.js v22 En* With Active LTS support extending into late 2025, Node.js v22.x is an excellent choice for those aiming for long-term support in production environments. Read More Advancing the NodeSource Node.js Package Repo (Including User-Requested Upgrades!) In Node.js on Aug 28 2023 Explore the enhanced Node.js Package Repo with user-requested upgrades, delivering an intuitive, efficient, and modern distribution experience. Read More NODE.JS Retro 2022 In Node.js on Jan 09 2023 Node.js had been steadily growing in recent years due to its scalability and performance, making it ideal for businesses. Read More Nodesource Node.js Binary Distributions 2021 & 2022 In Node.js on Dec 05 2022 Get the details behind Nodesource Node.js Binary Distributions! Check Node by Numbers 2021 & 2022. Read More 11 Features in Node.js 18 you need to try In Node.js on Oct 27 2022 Details of Node.js 18 new features, including fetch API and test runner, along with V8 JavaScript engine 10.1 features, and more... Read More How To Avoid SSR Load Issues in Node.js In Node.js on Sep 06 2022 How To Avoid SSR Load Issues in Node.js; using N|Solid to help diagnose high latency and low performance in a Next.js SSR application. Read More How to run `shell` and more using Node.js In Node.js on May 11 2022 Running subprocesses with Node.js is relatively simple. Node.js has a built-in module with a mature and stable API dedicated to running child processes. Read More Announcing Node V18 available in distributions In Node.js on Apr 25 2022 Node.js v18 (codename “Hydrogen”) is -according to the release calendar- now “Current” and will become the “Active” LTS version on Oct 25th. Read More Dive into Node.js Streams In Node.js on Mar 03 2022 In Node.js, HTTP was developed with streaming and low latency in mind, which is why Node.js is considered an excellent option for HTTP servers. Read More In-depth analysis of the APMs performance cost in Node.js In Node.js on Jan 25 2022 The main performance problems for a Node.js application in a production environment. In-depth analysis of the APMs performance cost in Node.js Read More Node.js Binary Distributions SSL Certificate Status In Node.js on Oct 08 2021 A cross-signed certificate chain by the DST Root CA X3 certificate has expired on Sept 30th, 2021. Read More NAN to Node-API Migration: A Short Story In Node.js on Aug 17 2021 Learn about migrating addons from using **NAN** to **Node-API** Read More PREV 1 / 13 NEXT Feature* * Product on Jun 26 * © *",
    "url": "https://nodesource.com/blog/category/node-js"
  },
  {
    "body": " * * * * * * All Posts NodeSource Empowering Startups: Building Better, More Secure Apps and Ensuring Exceptional CX with N|Solid In NodeSource on Jul 25 2023 Speed to market is vital for startups, but reliable features are crucial. Integrate N|Solid for secure & better apps. Read More NodeSource, Inc. Announces AI Assistant \"Adrian\" for Comprehensive Analysis and Optimization of Node.js Applications and Open-Sourcing of its Augmented Node.js Runtime. In NodeSource on Jun 23 2023 Nodesource made two big announcements: the private beta of its groundbreaking AI Assistant, \"Adrian,\" and that it’s open-sourcing its Node.js Runtime. Read More NodeSource featured as one of the top Cybersecurity Awareness Training Solutions by Cybernews In NodeSource on Jun 30 2022 N|Solid enables companies to run production-ready Node.js apps with optimized resource visibility and knowledge of application performance and security. Read More Interview With Adrián Estrada – Cybernews In NodeSource on Feb 14 2022 Cybernews interview with Adrian Estrada - VP of Engineering at NodeSource who explained N|Solid to monitor processes and detect critical vulnerabilities. Read More Announcing N|Solid 4.6.0 In NodeSource on Sep 16 2021 The release of N|Solid v4.6.0 contains new features Read More Announcing N|Solid v4.5.9 In NodeSource on Sep 01 2021 The release of N|Solid v4.5.9 contains a Node.js security release Read More Announcing N|Solid v4.5.8 In NodeSource on Aug 11 2021 The release of N|Solid v4.5.8 contains a Node.js security release Read More SaaS Release Experience In NodeSource on Aug 03 2021 Last week we had a successful launch of our new SaaS version of N|Solid Read More Differences between N|Solid SaaS and On-Prem In NodeSource on Jul 28 2021 N|Solid SaaS is focused on small and medium-sized companies that want to start monitoring their Node.js processes. Read More Announcing N|Solid SaaS! In NodeSource on Jul 21 2021 N|Solid SaaS is focused on small and medium-sized companies that want to monitor their Node.js processes with the best tooling available. Read More Interview With Giovanny Gongora – SafetyDetectives In NodeSource on Jul 06 2021 In this interview, you can find all about how NodeSource provides deep analysis into their customers’ processes. Read More Security Release for N|Solid Version 4.5.5 In NodeSource on Jun 15 2021 This is a security release for two vulnerabilities in the path-parse package, few bug fixes in N|Solid Console, Runtime and performance improvements Read More PREV 1 / 4 NEXT Feature* * Product on Jun 26 * © *",
    "url": "https://nodesource.com/blog/category/nodesource"
  },
  {
    "body": " * * * * * * All Posts Product * In Product on Aug 22 2024 N|Solid 6, the ultimate tool for Node.js observability and diagnostics. Elevate your apps with new features, improved UI, and real-time security insights. Read More * Enhance Node.js performance with OpenTelemetry in N|Solid. Learn automatic instrumentation, OTLP export, and seamless integration with observability tools. Read More * In Product on Apr 30 2024 Discover N|Solid's new heap profiling feature for Node.js to easily detect and fix memory leaks with minimal overhead Read More Enhancing Node.js Core: Introducing Support for Synchronous ESM Graphs In Product on Mar 26 2024 Discover how Node.js's new support for synchronous ESM graphs simplifies transitions to ECMAScript Modules, enhancing developer experience. Read More N|Solid: Node.js Compatibility Proven through Fastify CI Integration In Product on Mar 22 2024 Discover how N|Solid integrates with Fastify via GitHub Actions, showcasing true Node.js compatibility and enhancing application performance and security. Read More * In Product on Feb 29 2024 Explore the top Node.js package managers in 2024: npm, Yarn, pnpm. Compare features, performance, and choose the best for your project. Read More Join our Partner Program! In Product on Dec 18 2023 Join the NodeSource Partner Program for Systems Integrators and Agencies. Enjoy benefits like revenue sharing, training, and support. Apply now! Read More Innovating for Performance: How our Infra Team Powers 100+ Million Downloads A Year (While Keeping our SaaS Reliable and Secure) In Product on Dec 07 2023 Explore NodeSource's Infra Team: EKS migration, GitOps adoption, 70% faster deployments, 80% cost savings, reinforcing our Node.js excellence legacy. Read More Introducing N|Solid Copilot: Your AI-Powered Node.js Navigator In Product on Nov 15 2023 Elevate your Node.js development with N|Solid Copilot—an AI assistant delivering real-time insights, security, and optimization tips. Read More N|Solid OSS Release In Product on Oct 31 2023 Explore N|Solid, an innovative Node.js runtime, now open source from NodeSource, enhancing production deployments and observability for enterprise needs. Read More See How Much Your APM is Costing You to Monitor Node.js Apps In Product on Oct 19 2023 Discover the true cost of your Node.js apps with NodeSource's new Cost Calculator. Learn how the right APM provider can save money and boost performance. Read More N|Solid v4.10.1 is now available In Product on Aug 10 2023 N|Solid v4.10.1 contains Leveling up stability & obliterating bugs. Fortified security in @nodejs v16.20.2 (LTS) and Node.js v18.17.1 (LTS). Read More PREV 1 / 10 NEXT Feature* * Product on Jun 26 * © *",
    "url": "https://nodesource.com/blog/category/product"
  },
  {
    "body": " * * * * * * You have re* Support (LTS) All Posts Community * a Big Announcement for Latin America! by: Lizz Parody in Community on Nov 07 2024 Community Share CityJS Medellín 2024 was an amazing conference that drew together both local and international developers in Medellín for an immersive experience focused on JavaScript, innovation, and collaboration. Held on October 25-26, the conference underscored Colombia’s growing influence in the tech world and showcased the talent of Colombian developers alongside renowned global experts. As the first CityJS event in Medellín, it provided a space for learning, networking, and exploring the future of JavaScript and related technologies. NodeSource was thrilled to support CityJS Medellín 2024 as a Gold Sponsor, with five dedicated members from our team actively involved in organizing this incredible event. NodeSource Team at CityJS Medellin Highlights from CityJS Medellín CityJS Medellín was packed with insightful talks and workshops, each offering unique perspectives on current and future developments in JavaScript. Attendees could explore diverse topics, from foundational JavaScript practices to cutting-edge innovations in AI, web development, and performance optimization. Keynote Talks The conference featured prominent speakers whose talks set the tone for a globally aware developer community. Robin Ginn, Executive Director of the OpenJS Foundation, opened with a talk on the pivotal role of JavaScript in today’s tech landscape. She discussed how JavaScript and open-source projects are shaping the future of AI, cloud computing, and the metaverse, encouraging attendees to take part in open-source initiatives that are driving these advancements. Miguel Ángel Durán García (@midudev), a well-known developer and content creator, followed with an inspiring presentation on the latest advancements in JavaScript, HTML, and CSS. He delved into upcoming features that will redefine web applications, including new capabilities for JavaScript, which allow for richer and more interactive user experiences. Wes Todd, a member of the Express.js Technical Committee, gave a much-anticipated talk titled \"Express Forward,\" addressing the misconception that Express is “dead.” He shared updates on the Express.js project, its ongoing evolution, and the efforts to revitalize its role in modern web applications. Todd’s talk underscored the resilience of Express.js as a backbone of many Node.js applications. Hands-On Workshops CityJS Medellín offered several workshops for hands-on learning, where attendees could deepen their skills with practical, instructor-led sessions, Rafael Gonzaga from NodeSource introduced attendees to Node.js performance analysis using N|Solid. His session provided developers with tools and techniques to analyze and i*, a crucial skill in creating scalable and efficient Node.js applications. Other workshops focused on specific technologies, such as Giovanni Laquidara’s session on developing smart TV applications using React Native. Laquidara demonstrated how JavaScript can bridge web development with the world of smart TV applications. Adrian Estrada from NodeSource, followed with an introduction to building LLM-based applications, helping developers understand how to implement Large Language Models in JavaScript. Cutting-Edge Talks on AI and Geospatial Web Development AI was a hot topic at CityJS Medellín. Lizzie Siegle from Cloudflare delivered a beginner-friendly yet powerful talk on prompt engineering, showing attendees how to interact effectively with Large Language Models (LLMs). Marco Ippolito presented a deep dive into JavaScript Abstract Syntax Trees, sharing tools and techniques for conducting advanced code searches in large files, which can streamline code analysis in complex projects. His insights into ASTs underscored the need for efficient code search tools in projects of any scale. Courtney Yatteau from Esri introduced attendees to Geographic Information Systems (GIS) and demonstrated how JavaScript developers can integrate geospatial data into their projects. Her talk covered essential GIS concepts and practical examples, showing how spatial data can transform applications across sectors like urban planning and environmental monitoring. Women’s Participation CityJS had a great presence of women in the conference, promoting the importance of diversity and inclusion in tech events. Congratulations 👏 Innovations in Web and AI Technologies CityJS Medellín was also a showcase of the latest ideas around AI and JavaScript integration in the browser. Miguel Useche presented a compelling look at running Large Language Models directly in the browser using WebAssembly and WebGPU. He explored the potential of web-based LLMs to bring sophisticated AI capabilities into users’ hands without relying on server-based processing. Anuar Harb introduced attendees to creating stunning 3D models with AI, using tools like Three.js and Spline. His talk showed how JavaScript can power immersive web experiences, with 3D models generated by AI adding a new layer of interactivity to websites. Local Talent and Community Impact A unique aspect of CityJS Medellín was its strong focus on amplifying Colombian voices and celebrating local talent. Speakers like Juan David Nicholls, who covered event-driven architectures using Temporal and React, and Cristian Daniel Marquez Barrios, who discussed the possibilities of JavaScript in quantum computing, exemplified the cutting-edge work being done by developers in Colombia. Their insights showcased Medellín’s potential to influence global tech conversations. Another standout local speaker, Andres Villegas, presented on distributed async/await patterns with the Resonate JavaScript SDK, offering a fresh perspective on scaling applications across distributed environments. His talk contributed to the growing knowledge base in distributed computing and serverless technologies. Reflections on CityJS Medellín 2024 CityJS Medellín 2024 was a landmark event for Colombia’s tech community. With a diverse program that spanned hands-on workshops, forward-looking talks, and interactive sessions, the conference created an environment that encouraged collaboration, learning, and inspiration. For attendees, CityJS Medellín provided not only valuable technical insights but also connections with industry leaders and like-minded developers, building relationships that will undoubtedly fuel future projects and ideas. The success of CityJS Medellín reaffirms Colombia’s role as a key player in the JavaScript ecosystem and sets a high bar for future tech events in the region. JSConf Latam 2025! CityJS Medellín 2024 concluded with an exciting announcement that electrified the audience: for the first time, Medellín will host JSConf Latam, marking a historic milestone as the conference makes its debut in Latin America. This highly anticipated event will rotate between Latin American countries each year, starting with Medellín ❤️ JSConf Latam’s arrival cements Colombia’s role as a leading force in the global JavaScript community and signifies a broader commitment to nurturing talent and innovation across the region. This landmark event will not only spotlight local and international experts but also amplify Latin America’s contributions to the global tech landscape, inspiring developers throughout the region to participate and innovate. The conference will be held in November 2025. To assist or submit a CFP, keep an eye at jsconf.lat ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/cityjs-medellin-2024-jsconf-latam-2025"
  },
  {
    "body": " * * * * * * You have * Enhancing Node.js Core: Introducing Support for Synchronous ESM Graphs by: NodeSource in Product on Mar 26 2024 Node.js ESM Support Community JavaScript Share Exciting news this week! One of the latest features in Node.js core is the addition of support for requiring synchronous ECMAScript Modules (ESM) graphs. This enhancement promises to simplify the transition for package authors and users alike, as the ecosystem gradually shifts towards ESM. This long-awaited feature, enabled via the --experimental-require-module flag, marks a pivotal moment in Node.js development, addressing a persistent pain point for developers. In this blog post, we explore deeper into the journey leading to this milestone, exploring the technical and cultural intricacies that shaped its evolution. Understanding the Update The pull request aims to address a long-standing pain point for Node.js users: the inability to require ESM modules synchronously. While Node.js has supported ESM for some time, requiring these modules has been restricted to asynchronous operations using import(). However, with the introduction of this new feature, developers can now use require() for *. How It Works The implementation of this feature relies on the --experimental-require-module flag. When enabled, Node.js will allow * via require(). However, there are certain conditions that must be met for this to work: The ESM module must be explicitly marked as such, either through a \"type\": \"module\" field in the closest package.json or by using a .mjs extension. The module must be fully synchronous, meaning it contains no top-level await expressions. If these conditions are met, require() will load the module as an ESM and return the module namespace object synchronously. This behavior mirrors dynamic import() but operates synchronously. Background and Motivation The decision to introduce this feature stems from ongoing discussions within the Node.js community. Previous attempts to support * faced challenges, particularly in handling top-level await expressions. However, with the current implementation, the focus remains on simplicity and compatibility. The motivation behind this enhancement is clear: to ease the transition for package authors and users as the ecosystem embraces ESM. By allowing *, package authors can migrate their codebases without worrying about breaking changes for users. This not only streamlines the transition process but also reduces concerns about node_modules bloat and identity issues due to duplication. The Agony of ERR_REQUIRE_ESM For years, Node.js developers grappled with the frustration of ERR_REQUIRE_ESM. While importing CommonJS (CJS) modules was straightforward, requiring ESM modules remained elusive. This discrepancy led to confusion and wasted hours, particularly for those unaware of the underlying complexities. Package authors faced dilemmas, forced to choose between maintaining compatibility with both CJS and ESM users or risking breaking changes. Meanwhile, the prevailing belief that \"ESM is async\" perpetuated a myth, obscuring the true nature of ESM syntax. const open = require('open'); open('https://nodesource.com'); We are using the popular open module for opening files, and we have in our project the following dependency: { \"dependencies\": { \"open\": \"^8.4.2\" } } Everything works correctly and the script opens a browser pointing to https://nodesource.com. If we want to update the dependency to the latest stable one, we will have to execute: $npm i open@latest and we see the dependencies as: { \"dependencies\": { \"open\": \"^10.1.0\" } } Now when running the script... boom! We encounter the following error: $ node index.js /tmp/open/index.js:1 const open = require('open'); ^ Error [ERR_REQUIRE_ESM]: require() of ES Module /tmp/open/node_modules/open/index.js from /tmp/open/index.js not supported. Instead change the require of /tmp/open/node_modules/open/index.js in /tmp/open/index.js to a dynamic import() which is available in all CommonJS modules. at Object.<anonymous> (/tmp/open/index.js:1:14) { code: 'ERR_REQUIRE_ESM' } Node.js v20.10.0 Discovering Synchronous ESM Potential A pivotal realization occurred when exploring the inner workings of ESM syntax. Contrary to popular belief, ESM was not inherently asynchronous but rather conditionally so, triggered only by the presence of top-level await expressions. This insight laid the groundwork for reconsidering synchronous require(esm), a concept previously explored in 2019 but overshadowed by technical challenges and heated debates. A New Approach Emerges Despite the complexities, a renewed effort to implement synchronous require(esm) gained momentum. A fresh perspective led to a simplified approach, focusing solely on supporting synchronous ESM graphs. This pragmatic approach garnered support, paving the way for the feature's inclusion in Node.js core. To avoid the error shown before, you can do the following using the open module which only supports ESM: const { default: open } = require('open'); open('https://nodesource.com'); And then run: node --experimental-require-module index.js That’s it! No more errors. Looking Ahead While the current implementation addresses the majority of use cases for synchronous ESM loading, there are still areas for improvement. Certain feature interactions, such as with experimental flags like --experimental-detect-module or --experimental-wasm-modules, may need further consideration. Additionally, edge cases involving cyclic dependencies might require additional handling. However, as with any experimental feature, the goal is to iterate and improve over time. By introducing this capability as an experimental feature, Node.js can gather feedback from users and continue refining the implementation. As the JavaScript ecosystem evolves, Node.js remains committed to providing a robust platform for developers. In conclusion, the addition of support for synchronous ESM graphs represents a significant step forward for Node.js. It not only simplifies the transition to ESM for package authors but also enhances the overall developer experience. With this new capability, Node.js continues to adapt and innovate, ensuring it remains a leading platform for server-side JavaScript development. References: require(esm) in Node.js - Joyee Cheung's Blog ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/enhancing-nodejs-esm-graphs"
  },
  {
    "body": " * * * * * * You have * Innovating for Performance: How our Infra Team Powers 100+ Million Downloads A Year (While Keeping our SaaS Reliable and Secure) by: Jesús Paz in Product on Dec 07 2023 Infrastructure Open Source NodeSource Performance Share We just shared big news about the open-sourcing of our Node.js Runtime and the release of our AI Copilot for Node, both requiring a big role from our infrastructure (Infra) team. They are the team behind the scenes, dedicated to delivering top performance, and have been instrumental in maintaining our reputation for fast, stable, and secure delivery of our SaaS product and Binary Distributions–which generate over 100 million annual downloads a year. The team is always looking for ways to innovate our infra to meet the growing demand and efficiency of our services, and as a part of the product releases, made some key updates to our platform. We wanted to share so others could gain value in their efforts as well as celebrate this critical group for us. Next time you talk to your infra team, give them some love, they do so much! Infrastructure Enhancements: Moving Forward with EKS and GitOps Our Infra team has recently completed significant updates to further improve our services: 1. Migration from ECS to EKS: To streamline our operations, we have transitioned from AWS Elastic Container Service (ECS) to Elastic Kubernetes Service (EKS). This move simplifies our operational framework by unifying it on a single platform (EKS), significantly reducing the need to manage and monitor multiple platforms. This change also enhanced our security. In Kubernetes, we now manage our security with policies and roles and the automated Kubernetes control plane security provides the services that make Kubernetes work. 2. Pipeline Enhancements: Our deployment processes have been upgraded for efficiency and reliability. The integration of GitOps and GitHub Actions play a pivotal role in these improvements: Single Source of Truth: Both infrastructure and application configurations now have a centralized, standardized management system. This approach ensures consistency and reliability in our deployment processes. Enhanced Collaboration and Automation: The adoption of GitOps allows for smoother collaboration and automation, making it easier to deploy changes rapidly and efficiently. Declarative Configuration: Our configuration is designed to be easily readable and understandable, facilitating quick and accurate deployments. 3. Faster Deployment Times: One of our key achievements has been a reduction in deployment times of almost 70%. This efficiency gain translates to quicker availability of new features and updates for our customers, enhancing their overall experience. 4. Reduced Cost: In addition to all of the above, we also reduced the costs for our deployments by 80%!!! Our Commitment to Timely Updates and Ecosystem Support At NodeSource, we are proud to be a leading distributor of the open source binaries for DEB and RHEL and for setting the standard for release speed. Millions of websites, apps and more count on our binaries because we deliver them rapidly. We release security updates within 24 hours and Node.js feature builds inside of 48 hours. This rapid response time supports the evolving needs of the Node.js ecosystem and demonstrates our commitment to providing the latest and most secure features to our customers. Check out our GitHub Distributions for more. Conclusion: A Continued Legacy of Innovation and Excellence At NodeSource, the Infra team's ongoing innovations ensure that we remain at the forefront of performance, stability, security, and availability. We are proud of our efforts to support the Node.js ecosystem, as well as organizations that rely on Node, by providing the best tooling, service, and support. ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/innovating-for-performance"
  },
  {
    "body": " * * * * * * You have * Join our Partner Program! by: Donald Brady in Product on Dec 18 2023 Partner Program NodeSource N|Solid Copilot Share Are you a Systems Integrator, Consulting Company, or Agency building Node.js based solutions to your clients? If you are then our new NodeSource Approved Partner Program may be right for you. This program is specifically designed to help companies like yours win more deals, earn revenue from sales of NodeSource N|Solid Pro, and build better solutions for your clients. The program offers the following benefits for members: Revenue share from sold N|Solid licenses Pre-sales support to help you close deals Sales training on N|Solid and other NodeSource products Access to Technical training programs to enhance your teams skills with Node.js and Javascript Account management and technical support through Slack/Teams Early access to N|Solid product updates and roadmap insights Co-marketing opportunities Listing in the NodeSource Partner finder To learn more and apply please contact our partnerships team at napp@nodesource.com ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/join-partner-program"
  },
  {
    "body": " * * * * * * You have re* Support (LTS) All Posts Community Node.js 2023 Year in Review by: Rafael Gonzaga in Community on Feb 22 2024 Open Source Security Node.js JavaScript Share Two months into 2024, I’ve decided to summarize the achievements in the Node.js space from 2023. As always, this list is curated by me, so I may overlook some pull requests due to the vast amount of work completed by Node.js collaborators and areas where I need more context, such as WASI. Node.js is rapidly evolving, and it can be challenging for regular users to stay updated with the latest changes. Even as someone who works on the project, it’s possible to overlook certain commits. Therefore, this article aims to spotlight major changes and discussions occurring within the Node.js landscape in 2023. For reference, 2641 commits were made to nodejs/node#main in 2023. Although this information might seem more trivial than crucial, I find it interesting to compare historical data. For instance, this is the commit count on main for the past 10 years. Between Jan 1 2023 ~ Jan 1 2024 = 2641 Between Jan 1 2022 ~ Jan 1 2023 = 2629 Between Jan 1 2021 ~ Jan 1 2022 = 2683 Between Jan 1 2020 ~ Jan 1 2021 = 3390 Between Jan 1 2019 ~ Jan 1 2020 = 3953 Between Jan 1 2018 ~ Jan 1 2019 = 4720 Between Jan 1 2017 ~ Jan 1 2018 = 4609 Between Jan 1 2016 ~ Jan 1 2017 = 3081 Between Jan 1 2015 ~ Jan 1 2016 = 2261 Between Jan 1 2014 ~ Jan 1 2015 = 1052 💡 I use a tiny project I created called nodejs-stats to retrieve such information. It’s quite impressive to see that a mature project such as Node.js keeps evolving significantly over the years. Unfortunately, I don’t have historical data, but I strongly suspect Node.js welcomed a significant number of first-time contributors this year. This is possibly due to initiatives like Grace Hopper’s Day and various workshops. For instance, the ‘Your First Node.js Contribution’ workshop was conducted by my team at NodeConfEU 2023. I’m confident other members also consistently assist new contributors to the project — If you are looking forward to giving your first contribution to the Node.js project, feel free to contact me. I’m doing live streams assisting people through the Node.js codebase. Node.js Release In 2023, 102 releases from different release lines were made (including security releases) $ git log --all --grep=', Version' --pretty=format:\"%cs,%aN,%s\" --since='Jan 1 2023' --before='Jan 1 2024' | wc -l 102 The year started with 4 active release lines: Node.js 14 Node.js 16 Node.js 18 Node.js 19 Node.js 14, 16 and Node.js 19 are now End-of-Life(EOL) and Node.js 18 is under Maintenance Mode, meaning there are no more regular releases to this version. The year finalized with the following active release lines: Node.js 18 (Maintenance) Node.js 20 (LTS) Node.js 21 (Current) Hence, if you aren’t using any of these versions, please, upgrade. During the Node.js Collaborator Summit in Dublin (NodeConfEU), we analyzed the download stats of Node.js binaries and it illustrates our opinion that users don’t update their binaries as fast as they must. As the graph shows, even an EOL version still receives a significant number of downloads and this is dangerous to Node.js users as they will use a vulnerable version at some point. Hence, one theory that comes to our mind is that our release schedule is too fast. A new proposal is under discussion and still needs to be evaluated by the releasers team, but it suggests reducing the major release to one per year instead of two per year. When examining the graph above, particularly focusing on the y-axis, one might infer that Node.js downloads reached a peak of approximately 60 million on March 23. However, this interpretation is misleading as it does not account for NodeSource distribution statistics, which primarily consist of production binaries and do not include downloads from inactive release lines, such as Node.js 8, 10, 12, and so on. To gain a deeper understanding of Node.js distribution mechanisms, I encourage you to explore the intricacies outlined in the “Node By Numbers 2021~2022“ article, as delving into this topic exceeds the scope of this article. Active work on the Canary-In-The-Gold-Mine (CITGM) @nodejs/releasers play one of the most crucial roles in the Node.js space. They ensure the reliability of the versions you receive on your machine. To achieve this goal, we utilize a comprehensive suite of tests across all supported architectures, and we run specific tests depending on the changes, such as V8. Additionally, for each release, we execute CITGM (Canary-In-The-Gold-Mine), which essentially fetches all modules listed in lookup.json and runs their test suite with the new binary prospect. If any issues arise, we investigate them, and sometimes, we reach out to the module author for guidance. CITGM, however, requires a powerful set of machines to run all tests properly. Unfortunately, we are a bit limited in that regard, leading to some concurrency errors between tests. This is because certain tests need to run in parallel; otherwise, CITGM would take years to finish. Another challenge is ensuring that the modules listed inside lookup.json are up-to-date. Occasionally, a module becomes archived or may never support newer versions of Node.js, or they may simply be unreliable (which is quite common). Therefore, it’s not uncommon to see initiatives like: Declaring bankruptcy of CITGM modules Drop skipped modules Otherwise, we might find ourselves dealing with an unreliable CITGM, thus leaving us blind to potential breaking changes. The new direction of the Node.js project To clarify, I want to emphasize that I am not speaking on behalf of the project; this article represents solely my perspective. Having been a member of the project for quite some time, and since 2022, a member of the Technical Steering Committee (TSC), I’ve observed that the project is now more susceptible to major changes than ever before. As a result — not so related — new dependencies are being integrated into the core, and new built-in modules are being developed. This broadens the scope of Node.js as a platform. However, in my view, this new approach may lead to concerns regarding maintenance and potential attack vectors. On the flip side, it also empowers developers and diminishes the risk of using malicious libraries, despite the performance implications of executing operations on the native side. For your reference, I’ve been closely monitoring the binary size of Node.js across various versions, and it’s evident that the addition of new dependencies and features directly impacts the binary size. Unless you’re operating within an exceptionally constrained environment, 100MiB shouldn’t raise significant concerns. New Dependencies Node.js vendor dependencies into its binary: { node: '21.6.0', acorn: '8.11.3', ada: '2.7.4', ares: '1.20.1', base64: '0.5.1', brotli: '1.1.0', cjs_module_lexer: '1.2.2', cldr: '44.0', icu: '74.1', llhttp: '9.1.3', modules: '120', napi: '9', nghttp2: '1.58.0', nghttp3: '0.7.0', ngtcp2: '0.8.1', openssl: '3.0.12+quic', simdjson: '3.6.3', simdutf: '4.0.8', tz: '2023c', undici: '5.28.2', unicode: '15.1', uv: '1.47.0', uvwasi: '0.0.19', v8: '11.8.172.17-node.19', zlib: '1.3.0.1-motley-40e35a7' } In 2023, 3 new dependencies were released to Node.js: Ada - A WHATWG-compliant and fast URL parser written in modern C++” simdutf - Unicode routines (UTF8, UTF16, UTF32) parser simdjson - A library that uses commonly available SIMD instructions and micro parallel algorithms to parse JSON efficiently All these libraries are focused on performance, enabling Node.js to reach new peaks of improvements as you will see in the “*4”. The cost of OpenSSL 3.0.x over QUIC Since version 16, Node.js uses a fork of openssl from quictls team. This was required as an initial step to bring QUIC protocol to Node.js. However, OpenSSL version 3.0.x is significantly slower than OpenSSL 3.2.x. There are two points where moving to OpenSSL 3.2.x will be difficult from a Node.js perspective: It doesn’t fully support QUIC — Although Node.js doesn’t ship QUIC support (yet). OpenSSL 3.2.x isn’t a Long-Term-Support (LTS) line — Having a release line that might contain a vulnerability after its End-of-Life is a no-go for LTS lines in Node.js. If want some context, check #51152. In terms of performance, you can use my repository nodejs-bench-operations as a reference for crypto operations: Node.js 16.20.2 - OpenSSL 3.x ops/sec samples crypto.createVerify(‘RSA-SHA256’) 30,337 98 crypto.verify(‘RSA-SHA256’) 29,001 94 Node.js 18.18.2 - OpenSSL 1.x ops/sec samples crypto.createVerify(‘RSA-SHA256’) 3,599 86 crypto.verify(‘RSA-SHA256’) 3,638 87 Constantly Performance Evolution As mentioned in the “*3”, Node.js continues to evolve steadily in terms of performance. This section will not delve into specific numerical data (which will be provided in detail in the *4), but rather highlight initiatives and PRs that have demonstrated clear advancements in the performance realm. One notable improvement is the upgrade of libuv to version 1.45.0. In this release, IO_URING was enabled on Linux, resulting in an 8x throughput increase for file system operations such as read, write, fsync, fdatasync, stat, fstat, and lstat. More details can be found in the corresponding pull request: libuv/libuv#3952. Additionally, in 2023, we introduced Ada as a new URL parser for Node.js, which is now available in all active release lines (18, 20, and 21). Further information can be found in the pull request: nodejs/node#46410. Two important regressions were identified over 2023: AsyncHooks WebStreams These features are crucial for certain use cases in Node.js. For example, if you utilize fetch(), you might rely on WebStreams, or if you employ any Application Performance Monitoring (APM) tool, you should be leveraging AsyncHooks via AsyncLocalStorage. An initiative that started in January, documented in issue #46265, proposes an alternative implementation of AsyncLocalStorage without relying on AsyncHooks, which was identified as a bottleneck at the time. Some related work has been carried out in pull requests #46387 and #48528. WebStreams were identified as a bottleneck in the fetch function in 2022, as highlighted in this issue comment. Since then, we’ve been consistently enhancing its usage in undici through several PRs, such as: nodejs/node#46086 nodejs/node#47956 For those interested in monitoring the performance of Node.js, I highly recommend keeping an eye on the nodejs/performance repository and attending their meetings. Be sure to follow the performance label to stay updated on PRs like nodejs/node#49745 and nodejs/node#49834, which aim to enhance the performance of regular Node.js streams. A native benchmark module to Node.js In 2023, Node.js almost got a built-in benchmark module. I wrote a pull request with a colleague (Vinicius Lourenco) that adds an experimental benchmark module to Node.js: require('node:benchmark') While this pull request got significant traction, we didn’t pursue the work for some reasons: Benchmarks are hard, and micro-benchmarks are even harder. They are hard to evaluate, and hard to prove their accuracy since there are different strategies to measure them — See my Preparing and Evaluating Benchmarks article for more context — At the time I had limited bandwidth to work on different areas of Node.js and I couldn’t extend the research on this topic. Some Node.js collaborators shared some concerns and as I said previously, at the time, I didn’t have much bandwidth to elaborate and jump into a deep conversation. However, it doesn’t mean we gave up! We’ve published the module as bench-node on npmjs — I know, we didn’t find a better name yet. Check it out and give a star ⭐ https://github.com/RafaelGSS/bench-node/. Enhancing Node.js Security Security is the area I have spent most of my time in 2023. I had a contract with OpenSSF to work full-time on the development and improvement of the security of Node.js. In this section, I will show briefly all the topics we’ve discussed, features implemented, workflows and so on. It’s really important to say a big thank you to everyone on the Node.js Security Team for helping out with past and current projects. And a shutout to the Node.js Triage team for helping me go through all the HackerOne reports. A special thank you goes to Tobias Nießen for working so hard to find and fix problems in the core of Node.js. The Node.js Permission Model Let’s start with probably the major security achievement of 2023 in my — completely biased — opinion. The Node.js Permission Model. This initiative started a long time ago with Anna Henningsen and James Snell, but it wasn’t ready yet and I’ve re-implemented it in 2022/2023. If want to understand the intrinsic behind this feature, I gave a talk at NodeConf EU about it: The Journey of the Node.js Permission Model. Technically, this experimental feature allows you to restrict access to environment resources such as: File system (more specifically, fs module) - read/write Inspector protocol Worker threads Child process and Native add-ons The usage is quite simple, start the Node.js process with --experimental-permission and pass the --allow-* flags. For example, I want to give read-only access to the entry point of my application $ node --experimental-permission --allow-fs-read=./index.js index.js Hence, if you attempt to read/write from other paths it should throw an error: // index.js const fs = require('fs') const data = fs.readFileSync('/etc/passwd') console.log(data.toString()) node:fs:581 return binding.open( ^ Error: Access to this API has been restricted at Object.openSync (node:fs:581:18) at Object.readFileSync (node:fs:460:35) at Object. (/home/rafaelgss/index.js:3:17) at Module._compile (*:1378:14) at Module._extensions..js (*:1437:10) at Module.*oader:1212:32) at Module._*oader:1028:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12) at node:internal/main/run_main_module:28:49 { code: 'ERR_ACCESS_DENIED', permission: 'FileSystemRead', resource: '/etc/passwd' } Node.js v21.6.1 Furthermore can be found in the official documentation. Handling more Security Releases In 2023, we’ve released more security releases, mostly due to the fact we are more proactive in terms of third-party CVEs. In 2022, several initiatives were created by the Security Team as described by Alpha-Omega Node.js Report 2022 and the result of these initiatives are shown in 2023. Initiatives such as automation of updates, and automation of Node.js release impacts our team’s time-to-action. With the recent addition of the Permission Model, we have noticed people also discovered another experimental security feature that has existed in Node.js since version 11.8.0. The policy mechanism. This feature fits in what we call: module-based permission and we have fixed several vulnerabilities in this feature over 2023. February 2024 Security Release October 2023 Security Release August 2023 Security Release June 2023 Security Release Still, on the reports side, some clarifications were made in our Threat Model. Experimental features such as the Permission Model and Policy can attach severity at the same level as any stable feature. Therefore, when reviewing a Node.js Security Release, check if the vulnerability affects you. Very often we are patching a ‘High’ vulnerability that affects only users of that feature. Website Update In 2023, there was talk about giving the Node.js website a fresh look, as discussed here. We talked about it a few times in TSC meetings and also shared the idea at Node.js Collab Summits. It’s a big job that involves many steps, and I want to give a big shout-out to the whole @nodejs/website for their hard work on this. See below: Upcoming Download page: Draft PR: nodejs/nodejs.org#6353 Features Several features were released in 2023. It’s quite difficult to iterate and elaborate on each one of them in a single article. Therefore, this article will list some important features that have arrived and feel free to dig into it more! Single Executable Apps (experimental) - This feature has landed on Node.js 19 but got more eyes after Node.js 20.0.0 release. This feature allows the distribution of a Node.js application conveniently to a system that does not have Node.js installed. It’s important to mention, that we are still developing it, so it’s also an experimental feature that I highly suggest you try out! Built-in .env support (experimental) - Released with Node.js 20.6.0, this feature aims to provide an official mechanism to read environment variables from a configuration file. It was a common approach to rely on the dotenv package or similar. After this version, you can use it directly on Node.js without the need to install a new package for that. Furthermore can be found in the —env-file docs. WebSocket Client (experimental) - The Node.js 21.0.0 release included another experimental feature. A built-in WebSocket Client (behind a flag) arises with this release. This is enabled through the flag: --experimental-websocket and follows the WHATWG WebSocket Spec. Test runner (stable) - Although this feature wasn’t released in 2023, in the last year several features were included in this API. Including marking this module as stable. Support to function mocking was added in #45326. Support for time (MockTimers API) mocking was added in #47775. Test runner reports in #45712. Support to shards in #48639. And more! Check the API documentation to discover this feature capability. In the diagnostics field, some important PRs were added to the core: Support to GC Profile (#46255). With this PR you can use the v8.GCProfiler to retrieve metrics of the Garbage Collector (GC). This was available only through perf_hooks, this API provides a direct way to retrieve this information. New Tracing Channel API through dianostics_channel (#44943) - It provides a new API to trace operations (sync/promises) through a collection of channels to express a single traceable action. This is a long-term initiative that aims to provide necessary observability to Node.js applications without sacrificing performance and reliability by monkey-patching internals. Support to V8 Maglev Compiler (Reference: #50690) - V8 released a new compiler called Maglev between 2022 and 2023. This was first supported in Node.js through a build flag (—v8-enable-maglev) in #50692, then we enabled it by default on January 24 (#51350). However, it’s a semver-major PR, which implies you only will receive this PR that enables it by default in Node.js 22 - Scheduled for 2024-04-23. Some important updates were made to HTTP and WHATWG Spec : We have moved fetch stability to: ‘stable’. We have enabled the autoSelectFamily by default and it caused some systems to break (semver-major). Reference: ht*/46790 Duplex.from() now supports WebStreams. See: ht*/46190 finished() was implemented in Readable and Writable Streams. See: ht*/46205 In 2022, after a Performance analysis on why fetch is slow, we have identified WebStreams as one of the major bottlenecks of this HTTP Client. In 2023, several updates were made to make WebStreams more efficient. Including the re-usage of state errors, which improved the performance of fetch by 23% (in a specific benchmark). See ht*/46086 ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/nodejs-2023-year-in-review"
  },
  {
    "body": " * * * * * * You have * N|Solid: Node.js Compatibility Proven through Fastify CI Integration by: Jeff Rios in Product on Mar 22 2024 Node.js N|Solid Infrastructure Fastify Compatibility Share At NodeSource, we understand the hesitance and scrutiny that often accompany claims of \"Node.js compatibility\". The Node.js ecosystem is vast and intricate, and as Matteo Collina rightly points out, passing a \"hello world\" example is just the start. We believe N|Solid should be a component of every Node.js project, especially in production, to provide developers and organizations with the most advanced performance and security observability tooling. To accomplish this, we need to ensure we work well within the ecosystem. With that in mind, we've taken Matteo's challenge head-on. We're not just talking about compatibility; we're proving it. It's not just about N|Solid running well in isolation but about showing how it can be integrated seamlessly into existing Node.js workflows, such as those using GitHub Actions. Matteo's open invitation to demonstrate runtime compatibility within the CI of his projects provided us with the perfect opportunity to showcase N|Solid's robustness. Integration Made Easy with GitHub Actions The integration of N|Solid into GitHub Actions is straightforward, ensuring that your projects can enjoy the advanced features of N|Solid without any hassle. For developers and organizations aiming to maintain continuity while enhancing their Node.js applications with N|Solid's capabilities, the transition is a breeze. https://github.com/marketplace/actions/setup-nsolid-environment Rising to the Challenge: Fastify and N|Solid Go Hand-in-Hand In response to Matteo's tweet, we rolled up our sleeves and sent a pull request to one of the most esteemed Node.js web frameworks around: Fastify. You can see our contribution here: https://github.com/fastify/fastify/pull/5332. Our goal was to demonstrate N|Solid's compatibility without altering the existing test code in the Fastify repository. The result? Success. The pull request showcases a GitHub Actions pipeline executing Fastify's comprehensive suite of library tests using the N|Solid runtime, maintaining green across the board. This is not just a win for N|Solid; it's a statement to the Node.js community that N|Solid is a runtime you can trust to support your applications completely. It's Node.js compatibility that truly holds up under scrutiny. Conclusion Through diligent work and community engagement, NodeSource is excited to affirm that the N|Solid runtime stands as a fully compatible Node.js runtime, ready to be integrated into your projects. Whether you're looking to leverage N|Solid's enhanced security features, performance monitoring, or any other advanced capabilities, doing so will not ask you to sacrifice compatibility. With our successful Fastify tests and the ease of GitHub Actions integration, the path forward with N|Solid is clear, secure, and efficient. Try N|Solid for FREE today! We're proud to contribute to the Node.js ecosystem and look forward to seeing how our efforts help you build better, more reliable, and more performant applications. ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/nodejs-compatibility-fastify-integration"
  },
  {
    "body": " * * * * * * You have * * by: NodeSource in Product on Feb 29 2024 Node.js npm Performance Share The year 2024 marks a crucial juncture in the Node.js ecosystem, where developers face different choices when it comes to selecting the right package manager for their projects. npm, Yarn, and pnpm stand out as the frontrunners, as they are the most widely used in the Node.js ecosystem. Each package offers unique features and capabilities tailored to address the challenges of modern development environments. Let’s examine the differences, advantages and disadvantages between them to help developers make informed decisions about which tool best suits your project needs, and get insights into the evolving trends shaping their usage in 2024. npm - Node Package Manager npm is the default package manager for Node.js, known for its extensive package registry and seamless integration with the Node.js ecosystem. It was created to simplify the process of installing, managing, and sharing code dependencies in Node.js projects. npm provides a vast repository of over two million packages, making it a comprehensive ecosystem for JavaScript developers and the largest software registry in the world. Here's a closer look at npm: Advantages: Vast Package Repository: Developers love npm for its unmatched package registry, boasting over two million packages covering a wide range of functionalities and use cases. Developers have access to a rich ecosystem of open-source libraries and modules, enabling them to leverage existing solutions and accelerate development. Default Choice for Node.js: npm comes bundled with Node.js installations, making it the default package manager for Node.js projects. Its seamless integration with the Node.js ecosystem simplifies dependency management and ensures compatibility with the Node.js runtime. Mature Ecosystem: npm has a mature and well-established ecosystem with robust infrastructure and community support. It has been in use for many years and has undergone continuous improvements, resulting in a stable and reliable tool for managing project dependencies. Comprehensive CLI: npm provides a comprehensive command-line interface (CLI) with a wide range of commands and options for managing packages, scripts, and configurations. Developers can perform tasks such as installing, updating, publishing, and scripting with ease using npm's intuitive CLI. Semantic Versioning: npm follows semantic versioning (SemVer) rules, allowing developers to specify version ranges for dependencies accurately. This ensures compatibility and predictability when updating packages, minimizing the risk of breaking changes in projects. Custom Scripts: npm allows developers to define custom scripts in the \"package.json\" file, which can be executed using the npm run command. This feature enables automation of various development tasks such as building, testing, and deployment, streamlining the development workflow. Integration with npm Registry: npm seamlessly integrates with the npm registry, a centralized repository where developers can publish and discover packages. This centralized infrastructure fosters collaboration and code sharing within the JavaScript community, contributing to the growth and innovation of the ecosystem. Overall, npm offers a robust and feature-rich package management solution that addresses the needs of developers building Node.js applications. Its extensive package repository, mature ecosystem, comprehensive CLI, and community support make it a preferred choice for JavaScript developers worldwide. Disadvantages: Performance Issues: npm can sometimes suffer from performance issues, especially in large-scale projects with many dependencies. Some developers find Yarn and pnpm faster. Slow installation times and high resource consumption may impact developer productivity and build times. Versioning Complexity: Managing package versions and dependency conflicts can be challenging with npm, particularly in projects with complex dependency trees. Resolving version conflicts and ensuring compatibility between packages may require manual intervention and careful oversight. Dependency Bloat: npm's default behavior of installing packages locally can lead to dependency bloat, where projects accumulate unnecessary dependencies over time. This can increase project size and complexity, potentially impacting performance and maintenance efforts. Security Concerns: npm packages are not immune to security vulnerabilities, and relying on third-party code introduces potential risks to projects. While npm provides tools for auditing packages and detecting vulnerabilities, developers must remain vigilant and proactive in addressing security issues. Reliance on Centralized Registry: npm's reliance on a centralized registry for package distribution and discovery introduces a single point of failure and potential network bottlenecks. Disruptions or outages in the npm registry can disrupt development workflows and dependency management processes. Limited Offline Support: While npm provides some support for offline installations through local caches, its offline capabilities are not as robust as some other package managers like Yarn. Developers working in environments with limited or intermittent internet connectivity may encounter difficulties when relying on npm. Overall, while npm is a powerful and widely adopted package manager, developers should be aware of its limitations and consider alternative solutions or best practices to mitigate potential challenges in dependency management and project maintenance. Yarn: Yarn is a package manager for Node.js, developed by Facebook. It was created to address some of the limitations and performance issues encountered with npm and it focuses on performance, reliability, and *. Let's explore its features: Advantages: Improved Performance: Yarn is known for its faster installation times and more efficient dependency resolution compared to npm. It achieves this through parallel package installations and caching mechanisms, reducing the time and resources required for managing dependencies. Deterministic Dependency Resolution: Yarn ensures * by generating a lockfile (yarn.lock) that captures the exact versions of dependencies used in a project. This helps prevent dependency conflicts and ensures consistency across different development environments. Offline Support: Yarn provides robust support for offline installations, making it suitable for environments with limited or intermittent internet connectivity. It caches packages locally, allowing developers to install dependencies without relying on an active internet connection. Intuitive CLI: Yarn offers an intuitive command-line interface (CLI) with clear and concise commands for managing packages and running scripts. Its CLI is designed to be user-friendly and easy to use, streamlining the development workflow. Improved Error Handling: Yarn provides detailed error messages and diagnostics, making it easier for developers to troubleshoot and resolve issues related to package installation or dependency management. Backward Compatibility: Yarn maintains compatibility with the npm registry and existing npm workflows, allowing developers to transition seamlessly from npm to Yarn without disrupting their projects. Overall, Yarn is a powerful and efficient package manager for Node.js, offering performance improvements, *, offline support, and an intuitive CLI. It has gained significant adoption within the Node.js community and is widely used in both small and large-scale projects. Disadvantages: Compatibility Issues: Although Yarn aims for compatibility with npm, there may still be occasional compatibility issues or differences in behavior between the two package managers. This can sometimes lead to unexpected behavior or difficulties when migrating projects between npm and Yarn. Resource Consumption: Yarn's caching mechanisms and parallel installation processes can consume significant system resources, especially in *. This may impact the performance of development environments, particularly on systems with limited resources or older hardware. Community Fragmentation: While Yarn has gained widespread adoption within the Node.js community, its ecosystem and community support may still be smaller and less extensive than npm's. This can result in fewer third-party plugins, integrations, and community-driven initiatives compared to npm. Potential for Lockfile Drift: Yarn generates a lockfile (yarn.lock) to ensure *. However, if developers manually modify dependencies or update packages without updating the lockfile, it can lead to lockfile drift, where the lockfile becomes out of sync with the actual dependencies installed in the project. Limited Configuration Options: Yarn's configuration options are more limited compared to npm, which provides more granular control over package installation, registry settings, and other aspects of dependency management. Developers may find themselves lacking certain customization options available in npm. Maintenance Overhead: While Yarn offers benefits such as improved performance and dependency resolution, it also introduces additional maintenance overhead in terms of managing the Yarn-specific configuration, lockfile, and dependencies. This can add complexity to project maintenance and version control. Overall, while Yarn addresses many of the shortcomings of npm and offers significant improvements in performance and reliability, it's essential for developers to consider the trade-offs and potential drawbacks when deciding whether to adopt Yarn for their projects. pnpm pnpm, short for \"Performant npm,\" is a package manager for Node.js applications. Unlike traditional package managers like npm and Yarn, pnpm takes a unique approach to dependency management, emphasizing efficiency, disk space optimization, and installation speed. Advantages: Key features of pnpm include: Shared Dependencies: pnpm utilizes a shared dependency model, where common dependencies across projects are stored in a single location on disk. This approach minimizes disk space usage by avoiding duplicate copies of dependencies, leading to significant savings in storage resources. Efficient Installation: By leveraging shared dependencies and efficient caching mechanisms, pnpm offers faster installation times compared to traditional package managers. It can dramatically reduce the time required to install dependencies, particularly in *. Deterministic Dependency Resolution: Similar to Yarn, pnpm ensures * by generating a lockfile (pnpm-lock.yaml) that captures the exact versions of dependencies used in a project. This helps prevent dependency conflicts and ensures consistency across different development environments. Reduced Network Bandwidth: pnpm optimizes network bandwidth usage by sharing package downloads across projects. When multiple projects require the same dependency, pnpm fetches the package only once and shares it among all projects, reducing the amount of data transferred over the network. Improved Cache Efficiency: pnpm's caching mechanisms are designed to be highly efficient, reducing the need to re-download packages and improving installation speeds. It maintains a centralized cache of packages and dependencies, enabling faster installations and minimizing redundant downloads. Command-Line Interface (CLI): pnpm provides an intuitive CLI with commands for installing, updating, and managing packages. Its CLI is designed to be user-friendly and easy to use, with clear and concise syntax for executing common tasks. Compatibility with npm: pnpm maintains compatibility with the npm registry and existing npm workflows, making it easy for developers to transition from npm to pnpm without disrupting their projects. It can install packages from the npm registry and works seamlessly with existing npm packages and configurations. Overall, pnpm offers significant advantages in terms of disk space optimization, installation speed, and network bandwidth usage, making it an attractive choice for developers looking to streamline dependency management in Node.js projects. Its shared dependency model and efficient caching mechanisms make it well-suited for * and resource constraints. Disadvantages: Learning Curve: Switching from traditional package managers like npm and Yarn to pnpm may require developers to learn new commands, workflows, and concepts specific to pnpm. While pnpm's CLI is intuitive, there is still a learning curve involved, particularly for developers unfamiliar with its shared dependency model and caching mechanisms. Compatibility Issues: Although pnpm aims for compatibility with npm and Yarn, there may still be occasional compatibility issues or differences in behavior between the package managers. This can sometimes lead to unexpected behavior or difficulties when migrating projects between npm/Yarn and pnpm. Resource Consumption: While pnpm's shared dependency model reduces disk space usage, it may still consume significant system resources, especially in *. Caching dependencies and managing shared packages can require additional memory and processing power, impacting the performance of development environments. Lockfile Handling: pnpm generates a lockfile (pnpm-lock.yaml) to ensure *. However, managing the lockfile and ensuring its consistency across different environments can be challenging. Developers must be careful to avoid lockfile drift, where the lockfile becomes out of sync with the actual dependencies installed in the project. Community Support: While pnpm has gained adoption within the Node.js community, its ecosystem and community support may still be smaller and less extensive than npm and Yarn. This can result in fewer third-party plugins, integrations, fewer documentation resources and tutorials available, and community-driven initiatives, limiting the available resources and support for pnpm users. Overall, while pnpm offers compelling advantages in terms of disk space optimization and installation speed, developers should carefully weigh the trade-offs and consider the potential drawbacks when deciding whether to adopt pnpm for their projects. Structure of the projects: npm: When using npm install, the package-lock.json is created, and generates the node_modules folder. You can manually place a .npmrc configuration file at the root level. Yarn: Similarly, Yarn generates both a yarn.lock file and a node_modules folder. You can also configure your yarn with a .yarnrc file; Yarn also acknowledges .npmrc files. One problem with the npm and yarn approach, is that packages were copied several times to satisfy multiple dependencies. pnpm solved this issue without flattening the dependency tree. Each package’s dependencies are grouped in a node_modules folder and symlinks are used to group dependencies together, so the directory tree is flat. pnpm: In contrast, pnpm diverges and doesn’t create a flattened dependency tree. Upon installing dependencies with pnpm i, a package.json file is generated alongside a node_modules folder. However, the structure of the node_modules directory differs significantly from that of npm and Yarn due to pnpm's content-addressable storage approach. Which one should you choose? Ultimately, the best package manager for your project depends on your specific requirements, preferences, and willingness to adapt to new workflows. Experimentation and careful consideration of the trade-offs involved will help you make an informed decision that aligns with your project's goals and constraints. According to some advantages and disadvantages previously mentioned, some further research and personal opinion, we can see a comparative chart below, number 1 meaning the lowest score and number 3 the highest score: Even though npm and yarn are more popular, pnpm seems to have a promising future. Let’s check some benchmarks of JavaScript Package Managers: Speed: pnpm is three times faster and more efficient than npm, and with both cold and hot cache, pnpm is faster than Yarn. Source: Benchmarks of JavaScript Package Managers Security: Pnpm, like yarn, has a special file with the checksum of all the installed packages. This ensures the integrity of all the installed packages before their code is executed. Regarding npm, there have been some security vulnerabilities that have directly affected many projects due to the way npm handles bad packages. Disk space efficiency: pnpm employs a content-addressable file system to store packages and dependencies on disk. This means that identical packages are not duplicated. Even with varying versions of the same package, pnpm intelligently maximizes code reuse. For instance, if version 1 of a package consists of 500 files and version 2 adds just one more file, pnpm will not duplicate the original 500 files for version 2. Instead, it will establish a hard link to the existing 500 files and only write the new file. In contrast, npm would duplicate the original 500 files for version 2. This distinction becomes significant in large monorepo projects where a package is utilized by numerous others, potentially saving substantial disk space when using pnpm. Lock files: Yarn generates a yarn.lock file to ensure that all team members are using the same package versions. This helps prevent \"works on my machine\" issues. Like Yarn, pnpm uses a pnpm-lock.yaml file to ensure consistent dependency versions. npm can present inconsistencies in package-lock.json which can be annoying and present issues for developers. Migrating from npm/Yarn to pnpm: If your projects use npm or yarn, then migrating to pnpm will not be very difficult. Here is a comparison of commands between npm, yarn, and pnpm. npm command Yarn command pnpm equivalent npm install yarn pnpm install npm install [pkg] yarn add [pkg] pnpm add [pkg] npm uninstall [pkg] yarn remove [pkg] pnpm remove [pkg] npm update yarn upgrade pnpm update npm list yarn list pnpm list npm run [scriptName] yarn [scriptName] pnpm [scriptName] npx [command] yarn dlx [command] pnpm dlx [command] npm exec yarn exec [commandName] pnpm exec [commandName] npm init [initializer] yarn create [initializer] pnpm create [initializer] Source: Why you should prefer using pnpm over npm and yarn? Real Time Monitoring with N|Solid Which package do you use? Let us know on Twitter @NodeSource! Using N|Solid, you can get real time insights and keep your apps secure, providing developers the tools to optimize their Node.js applications and enhance efficiency. You can also check the performance of your projects with different package managers. Connect with us on Twitter @NodeSource, LinkedIn, and to stay updated with the latest from N|Solid. ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/nodejs-package-manager-comparative-guide-2024"
  },
  {
    "body": " * * * * * * You have * * by: Bryce Baril in Product on Aug 22 2024 NodeSource N|Solid Copilot N|Solid Observability Security Dev Tools Share We're thrilled to announce the release of N|Solid 6, the latest version of our powerful tool designed to elevate your production Node.js applications and services. Packed with advanced features and enhancements, N|Solid 6 offers unparalleled insights and operational control, making it the go-to solution for monitoring, diagnosing, and securing your critical Node.js applications. There are many monitoring solutions available, but none provide the depth of insights and tooling that help engineering teams identify and solve performance and security issues for Node.js like N|Solid. This release takes the product to the next level, everyone from small teams to Enterprise organizations should add N|Solid to their tooling, you can start for FREE today. A New User Interface for Enhanced Usability N|Solid 6 introduces a big update to the user interface of the Console, making it easier than ever to navigate and utilize its powerful features. The new UI simplifies how to navigate the platform's robust capabilities, allowing you to concentrate on what truly matters—optimizing and securing your Node.js deployments, resolving issues faster with the best telemetry for Node. Watch a demo of the new experience here. Key Features and Improvements Enhanced Scatter Plot Our next-gen scatter plot has been significantly upgraded, offering a powerful satellite view of your Node.js infrastructure. This improved perspective allows you to instantly detect outliers and performance patterns at a glance. The addition of a new global filter bar seamlessly connects every part of N|Solid, ensuring you maintain full context while navigating your application. Effortlessly identify outliers, transform them into global filters, and diagnose issues with greater ease and accuracy. Global Filter Bar The global filter bar is a standout new feature in N|Solid 6, maintaining its state as you move through the application. This feature saves filter history, allowing you to quickly resume or save helpful searches. The new dashboard view, combined with the global filter bar, lets you check security events, assets, and diagnose erratic behaviors seamlessly. Improved Dashboard View The new dashboard view summarizes what the global filter has selected, with grouping options to roll up by application or hostname. Metrics graphs connected to table rows can be changed to any of N|Solid runtime's deep metrics, showing exact time ranges for easy comparison of patterns or spikes. Historical Data Access All pages showing historical data now share a unified date range tool. This, combined with the global filter bar, lets you browse any collected historical data, even for processes that are no longer live. Saved actions and alerts have also moved to the global filter bar, streamlining your workflow. Advanced Configuration and Alerts Global actions can now be configured via the global configuration menu. Set parameters and actions for high memory usage, vulnerability notifications, asset creation alerts, process crash reports, and more. The blocked event loop notifications provide a stack trace of blocked event loops, aiding in quick diagnosis and resolution. Revamped Documentation We've revamped our documentation from the ground up to match the new workflows of N|Solid 6. This comprehensive guide provides detailed descriptions of all metrics and assets collected, helping you make the most of N|Solid's capabilities. Open Source Runtime and OpenTelemetry Integration The open-source N|Solid runtime continues to be the best and fastest means for using OpenTelemetry with Node.js, embedding the official library into the runtime for maximum performance and configurability. Enable or disable OpenTelemetry tracing during runtime right inside the dashboard for granular control over diagnostics overhead trade-offs. Real-Time Security Insights N|Solid 6 provides the best live and production view of your exposure (only the security issues in your project, not a list of every one) to publicly disclosed third-party security vulnerabilities. Automatically get a list of processes running a vulnerability within minutes of the report being filed, ensuring your systems stay secure. AI Copilot for Smarter Diagnostics Our AI Copilot is smarter than ever, providing quick paths to help you with your investigation. Trained on our documentation and our custom Node.js training content, it offers quick distillations of CPU profiles, helps you dive into your tracing data, and understand the context of the telemetry. Ready to Get Started? We believe N|Solid 6 is the best version yet, designed to enable you to develop and operate the highest quality, smoothest-running production Node.js applications possible. Sign up at nodesource.com and start peeking under the hood of your Node.js application servers today. Current SaaS customers will automatically access the new version and our Enterprise customers will be able to update when they are ready. Stay ahead of the curve with N|Solid 6, and ensure your Node.js applications are running at their best, try it for FREE today! Availability N|Solid 6 is now available for all Node.js developers and enterprises looking to enhance their production deployments. Visit nodesource.com to learn more and sign up today. ** * * In Product on Apr 29 * The NodeSource platform offers a high-definition view of the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/nsolid-6-release"
  },
  {
    "body": " * * * * * * You have * * by: Bryce Baril in Product on Apr 30 2024 Performance N|Solid NodeSource Memory Dev Tools Share We are thrilled to announce the release of a new feature in N|Solid that includes sample heap profiling and heap objects observability for main processes and worker threads. N|Solid is known for its Node.js performance and security observability and diagnostic tools and best-in-class low overhead has completed a new innovation to hunt memory leaks in development and production environments. Memory is a precious resource in computing. Memory leaks can cause persistent application crashes, increased billing costs, and wasted valuable server resources. Tracking down memory leaks is a real challenge, especially in Node. Now, with N|Solid, we have made it easy thanks to “heap sampling”. With N|Solid's heap sampling, you can now trace memory leaks in your production applications on-demand. Using the actionable metrics from N|Solid, including heap usage, your application can trigger profiling automatically. The powerful flame graph visualization shows exactly where the problem lies by displaying the allocation stack trace and heap size. This allows you to quickly pinpoint and fix memory issues without constantly monitoring dashboards for anomalies. This screenshot is the memory profiler view in chrome devtools. Without this new capability in N|Solid, developers relied on heap snapshots or to debug memory issues. However, these snapshots captured every single detail of the heap contents and structure, making them gigantic, risking out-of-memory crashes. Comparing multiple snapshots to identify differences was a complex and slow process that didn't pinpoint the root cause efficiently. With heap sampling, you can avoid the overhead and high memory requirements of snapshots. By providing granular allocation details mapped to function names in your codebase, heap sampling tracks incremental changes over time, allowing you to quickly identify the most memory-intensive areas of your application. Now, let’s talk about those new profilers more deeply. Heap Sampling Heap Sampling differs from Heap Snapshots in meaningful ways that enable use in production environments with minimal performance overhead. The fundamental difference is how it captures the data required to find memory leaks without a ton of unnecessary data. This has two key benefits; first, you will save a ton of cycles reviewing heap samples and you won’t have to leverage massive computational requirements for processing heap snapshots. N|Solid has incorporated V8's sampling heap profiler, which samples object allocations and builds an online 'sampling' log that represents a snapshot of currently live objects in the system at any given time. Each sampled allocation includes the stack trace at the time of allocation, making it extremely useful for detecting and diagnosing memory leaks. This sampling mechanism is lightweight ensuring it does not impact production performance. Under the hood, N|Solid leverages the statistical properties of the Poisson sampling process to approximate the true allocation distribution from the collected samples. This allows it to provide an accurate representation of memory usage while minimizing overhead. By integrating V8's sampling heap profiler, N|Solid delivers production-ready memory leak detection and diagnosis capabilities with low-friction instrumentation and performance impact that will help teams diagnose and solve issues faster. How to trigger a heap sample from the N|Solid console From your N|Solid console process details view, click on “New Heap Profile”, select for how long you want to run the sample, choose the “Heap sample” option and then click on the “START PROFILE” button. Note: You can also monitor the memory allocation in your worker threads by choosing any thread from the profiler modal. This screenshot is the memory profiler modal view in N|Solid console. How to trigger a heap sample from the N|Solid JS API It is as simple as run this for get a Node.js stream-based sampling profile. const fs = require('fs'); const nsolid = require('nsolid'); // The signature is threadId and time in ms to run the profile. const stream = nsolid.heapSamplingStream(0, 1200); .pipe(fs.createWriteStream('profile.heapprofile')); Heap track objects There’s a second mode of sampling available as well that combines the full graph context of the heap snapshot with the sampled allocations over time, combining the insights of both methods. It tracks the heap objects population statistics; heap objects relocations done by the garbage collector are recorded and added as an appendix to a heap snapshot. How to start tracking heap objects from the N|Solid console Heap Profiles are captured in nearly the same way as Heap Samples. From your N|Solid console process details view, click on “New Heap Profile”, select for how long you want to run the sample, choose the “Track Allocations” option and then click on the “START PROFILE” button. Note: You could also monitor your worker threads by choosing any thread from the profiler modal. This screenshot is the memory profiler modal view in N|Solid console. How to start tracking heap objects from the N|Solid JS API With this simple snippet, you can have a Node.js stream-based profile. const fs = require('fs'); const nsolid = require('nsolid'); // The signature is threadId and time in ms to run the profile. const stream = nsolid.heapProfileStream(0, 1200) .pipe(fs.createWriteStream('profile.snapshot')); You can try this new feature today along with all of the other valuable features in N|Solid with a Free account. We would love to hear from you about how you like the new feature, send us your thoughts contact@nodesource.com. To learn more about N|Solid visit nodesource.com. Here at NodeSource we build low overhead monitoring for all your Node.js apps; happy hacking and safe heaps! ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/nsolid-heap-profilers"
  },
  {
    "body": " * * * * * * You have * OpenTelemetry in N|Solid by: Santiago Gimeno in Product on Jun 26 2024 N|Solid Runtime Dev Tools Share Introduction N|Solid Runtime, the OSS runtime that powers N|Solid Pro, is an innovative, lightweight runtime for Node.js applications. It offers real-time insights into performance, memory usage, and CPU consumption, giving developers unparalleled visibility into their code without requiring any modifications. In today’s software landscape, understanding your application's production behavior is crucial. With cloud-native architectures, microservices, and distributed systems, pinpointing issues is challenging. This is where OpenTelemetry, a widely-adopted, open-source standard for collecting telemetry data, comes in. Leveraging OpenTelemetry with N|Solid, developers gain deep insights into application behavior, identify bottlenecks early, and optimize performance and reliability. In this blog post, we will explore how to instrument your Node.js processes with OpenTelemetry within the N|Solid runtime. You'll learn how these powerful tools work together to provide comprehensive observability, ensuring your applications run smoothly and efficiently in production environments. What is OpenTelemetry? As defined in the official OpenTelemetry documentation \"OpenTelemetry is an Observability framework and toolkit designed to create and manage telemetry data such as traces, metrics, and logs. Crucially, OpenTelemetry is vendor- and tool-agnostic, meaning that it can be used with a broad variety of Observability backends, including open source tools like Jaeger and Prometheus, as well as commercial offerings. [...] … OpenTelemetry is focused on the generation, collection, management, and export of telemetry. A major goal of OpenTelemetry is that you can easily instrument your applications or systems, no matter their language, infrastructure, or runtime environment.\" By providing a standardized, open-source approach to collecting telemetry data, OpenTelemetry helps bridge the gap between different monitoring and logging tools. This allows developers and operations teams to use their preferred tools and platforms without worrying about compatibility or integration issues. For example, with OpenTelemetry, you can collect metrics and logs from your application using one tool, such as Prometheus or the ELK Stack, while still using another tool for visualization, like Grafana or Kibana. This flexibility enables a more tailored approach to monitoring and logging, allowing teams to choose the best tools for their specific needs. Moreover, OpenTelemetry's instrumentation allows you to collect telemetry data from multiple sources, including applications, services, and infrastructure components. This provides a comprehensive view of your entire architecture, enabling you to identify correlations between different components and better understand how they impact overall performance. By standardizing the way telemetry data is collected and exported, OpenTelemetry facilitates integration with various monitoring and logging tools, making it easier to: Collect metrics from multiple sources Visualize complex system behavior Detect anomalies and alert on issues Retain and analyze historical data This standardization ensures that regardless of the tools or platforms you use, OpenTelemetry can help you achieve a consistent and comprehensive observability strategy. OpenTelemetry in N|Solid To enhance observability through N|Solid, we've integrated robust OpenTelemetry support, offering several key features: Automatic Instrumentation: N|Solid automatically instruments specific Node.js core modules, capturing critical telemetry data for deeper insights into application behavior. OTLP Exporter: An OpenTelemetry Protocol (OTLP) exporter sends traces and metrics directly to tools like Prometheus or Jaeger. Seamless Ecosystem Integration: Leveraging the OpenTelemetry ecosystem, N|Solid taps into extensive libraries and tools, enhancing your application's observability with community-driven innovation. In the following sections, we'll delve deeper into how you can configure N|Solid to utilize these OpenTelemetry features and start collecting valuable telemetry data about your application's behavior. Automatic Instrumentation N|Solid automatically collects process-wide and thread-specific metrics at intervals, adjustable via the NSOLID_INTERVAL environment variable (default: 3 seconds). Tracing, which is off by default due to performance concerns, can be activated by setting the NSOLID_TRACING_ENABLED environment variable. By default, N|Solid instruments node:http and node:dns modules, generating spans for every HTTP and DNS transaction. To exclude these modules, use the NSOLID_TRACING_MODULES_BLACKLIST variable. This automatic instrumentation ensures accurate and detailed metrics and traces with minimal configuration. Try N|Solid’s powerful observability features by signing up for our free SaaS tier. Run your application with the following command: $ NSOLID_SAAS=your_nsolid_saas_token nsolid app.js Log in to the N|Solid Console to view the collected metrics on the Application Dashboard, and experience enhanced observability and performance optimization for your Node.js applications. Fig 1. N|Solid Application Dashboard OTLP Exporter When using N|Solid SaaS, the runtime exports collected telemetry data using the ZeroMQ protocol. For those who prefer sending the data to a different backend, N|Solid provides the option to export metrics and traces using OTLP over either HTTP or GRPC. OTLP configuration in N|Solid is simple. We need to use the NSOLID_OTLP environment variable to enable the OTLP Exporter. Once it’s done, N|Solid will handle the OTEL_* environment variables defined by the OTLP Exporter specification. Let’s showcase this with an example. The following code implements the most basic Node.js HTTP server: 'use strict'; const port = process.env.PORT || 9999; const http = require('node:http'); const server = http.createServer((req, res) => { res.end('ok'); }); server.listen({port}, () => { console.log('listening on port: ' + port); }); We want to run this server with N|Solid so it collects and exports metrics and traces to a Prometheus and Jaeger server respectively using OTLP over HTTP. We can set up the 3 services (prometheus, jaeger and http_server) very easily with Docker Compose. version: '3.7' services: prometheus: image: prom/prometheus:latest expose: 9090 ports: 9090:9090 volumes: ./prometheus.yml:/etc/prometheus/prometheus.yml command: \"--config.file=/etc/prometheus/prometheus.yml\" \"--storage.tsdb.path=/prometheus\" \"--web.console.libraries=/usr/share/prometheus/console_libraries\" \"--web.console.templates=/usr/share/prometheus/consoles\" \"--enable-feature=otlp-write-receiver\" jaeger: image: jaegertracing/all-in-one:latest environment: COLLECTOR_OTLP_ENABLED=true JAEGER_DISABLED=true expose: 4318 ports: 16686:16686 4318:4318 http_server: image: \"nodesource/nsolid:iron-latest\" user: \"nsolid\" working_dir: /home/nsolid/app environment: NSOLID_APPNAME=http_server NSOLID_TRACING_ENABLED=1 NSOLID_OTLP=otlp OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://prometheus:9090/api/v1/otlp/v1/metrics OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4318/v1/traces ports: 9000:8080 volumes: ./api:/home/nsolid/app command: \"nsolid test.js\" Let’s take a brief look on how every service is configured: The prometheus service will listen on port 9090 with the feature otlp-write-receiver enabled, consuming metrics in OTLP at the following url: http://prometheus:9090/api/v1/otlp/v1/metrics. The jaeger service with COLLECTOR_OTLP_ENABLED will consume traces in OTLP at the following URL: http://jaeger:4318/v1/traces. The http_server service runs with N|Solid and has the OTLP Exporter enabled by setting NSOLID_OTLP to “otlp”. To configure the metrics and traces endpoints the OTEL_EXPORTER_OTLP_METRICS_ENDPOINT and OTEL_EXPORTER_OTLP_TRACES_ENDPOINT environment variables are set pointing to prometheus and jaeger urls. The rest of the config values for the OTLP Exporter are set to its default values as defined in https://opentelemetry.io/docs/specs/otel/protocol/exporter/, so for example, we don’t need to actually define the protocol to be used, as it defaults to OTLP over HTTP. As a final step, we spin up the services by running: $ docker-compose up Next we can send an HTTP request to the server: $ wget http://localhost:9000 We can check in the Prometheus and Jaeger UI’s that telemetry data is being consumed. Fig 2. Process cpu and cpu_user time as shown in Prometheus Fig 3. HTTP server transaction span as shown in Jaeger OpenTelemetry ecosystem integration Integrating N|Solid with the OpenTelemetry JavaScript ecosystem is straightforward, allowing us to take full advantage of the wide range of available modules. We’re going to modify our existing http_server code to incorporate some @opentelemetry modules which will allow us to showcase some new functionality. The new code looks like this: 'use strict'; const port = process.env.PORT || 9999; const http = require('node:http'); const nsolid = require('nsolid'); const api = require('@opentelemetry/api'); const { FsInstrumentation } = require('@opentelemetry/instrumentation-fs'); // Register Opentelemetry API in N|Solid. if (!nsolid.otel.register(api)) { throw new Error('Error registering api'); } // Register Opentelemetry auto-instrumentation modules. nsolid.otel.registerInstrumentations([ new FsInstrumentation({}) ]); // Need to require this after registering the instrumentations const fs = require('node:fs'); const tracer = api.trace.getTracer('test'); const server = http.createServer((req, res) => { const ctxt = api.context.active(); const span = tracer.startSpan('Fibonacci', { kind: api.SpanKind.INTERNAL }, ctxt); fs.writeFileSync('./output_fib.txt', ](https://opentelemetry.io/docs/concepts/signals/metrics/); span.end(); res.end(); }) function fib(n) { if (n === 0 || n === 1) return n; return fib(n - 1) + fib(n - 2); } server.listen(port, () => { console.log('listening on port: ' + port); }); Let’s describe the newly added functionality: We have added the @opentelemetry/api interface and registered in N|Solid using the nsolid.otel.register() API. By doing so, we will be able to perform all the operations defined in the Opentelemetry API specification that relate to tracing and they’re handled by the implementation embedded in N|Solid (metrics and logs integration aren’t implemented yet though it’s coming). We have registered @opentelemetry/instrumentation-fs by using the nsolid.otel.registerInstrumentations() API which will automatically instrument the node:fs core modules. We have added a custom Span using the api.trace API. Custom spans provide granular visibility into specific parts of your application. In this example, we create a custom span named Fibonacci to monitor the Fibonacci calculation. This span started before the Fibonacci calculation and ended immediately after. By creating this custom span, we can precisely monitor the execution time and performance of the Fibonacci calculation, providing deeper insights into that part of the application. Finally, we spin up the services again by running: $ docker-compose up Next we can send an HTTP request to the server: $ wget http://localhost:9000 And now we can check in Jaeger how the trace generated by the HTTP differs from the original one. Fig 4. Full trace with 3 spans as shown in Jaeger Fig 5. Comparison between traces from Fig 2. and Fig 3. Conclusion Integrating OpenTelemetry with N|Solid enhances observability in your Node.js applications by providing comprehensive telemetry data collection and seamless integration with tools like Prometheus and Jaeger. This setup enables deeper insights into application performance, quick issue identification, and efficient optimization. In this post, we demonstrated how to configure N|Solid for automatic instrumentation and OTLP export, showcasing practical examples. These features simplify the monitoring process, helping ensure your applications run smoothly and efficiently. With N|Solid and OpenTelemetry, you have powerful tools to maintain high-performance and reliable applications. We encourage you to explore these features to optimize your observability strategy. Thank you for reading! Feature* 2024 * In Product on Apr 29 * The NodeSource platform offers a high-definition view of the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/opentelemetry-nsolid-release"
  },
  {
    "body": " * * * * * * All Posts * In Community on Nov 30 2023 Explore JSConf Colombia's dynamic 10th anniversary, supported by NodeSource. Discover insights, innovations, and the vibrant Colombian tech community. Read More Introducing N|Solid Copilot: Your AI-Powered Node.js Navigator In Product on Nov 15 2023 Elevate your Node.js development with N|Solid Copilot—an AI assistant delivering real-time insights, security, and optimization tips. Read More N|Solid OSS Release In Product on Oct 31 2023 Explore N|Solid, an innovative Node.js runtime, now open source from NodeSource, enhancing production deployments and observability for enterprise needs. Read More See How Much Your APM is Costing You to Monitor Node.js Apps In Product on Oct 19 2023 Discover the true cost of your Node.js apps with NodeSource's new Cost Calculator. Learn how the right APM provider can save money and boost performance. Read More Advancing the NodeSource Node.js Package Repo (Including User-Requested Upgrades!) In Node.js on Aug 28 2023 Explore the enhanced Node.js Package Repo with user-requested upgrades, delivering an intuitive, efficient, and modern distribution experience. Read More N|Solid v4.10.1 is now available In Product on Aug 10 2023 N|Solid v4.10.1 contains Leveling up stability & obliterating bugs. Fortified security in @nodejs v16.20.2 (LTS) and Node.js v18.17.1 (LTS). Read More Serverless Observability in N|Solid for AWS Lambda In Product on Aug 03 2023 NodeSource: Introducing Serverless Support for AWS Lambda - Gather request info for debugging & monitoring in serverless environments. Read More Empowering Startups: Building Better, More Secure Apps and Ensuring Exceptional CX with N|Solid In NodeSource on Jul 25 2023 Speed to market is vital for startups, but reliable features are crucial. Integrate N|Solid for secure & better apps. Read More Welcome to The Future of Software Development: Powered by Telemetry, Security, and AI In Community on Jul 19 2023 the future of software development, is powered by telemetry, security, and AI - which was the topic of our talk. Learn how we are enabling that future. Read More Announcing N|Solid v4.9.5 In Product on Jul 12 2023 N|Solid, V4.9.5, brings improving stability and addressing bugs. It also incorporates the most recent updates and versions of Node.js. Read More NodeSource, Inc. Announces AI Assistant \"Adrian\" for Comprehensive Analysis and Optimization of Node.js Applications and Open-Sourcing of its Augmented Node.js Runtime. In NodeSource on Jun 23 2023 Nodesource made two big announcements: the private beta of its groundbreaking AI Assistant, \"Adrian,\" and that it’s open-sourcing its Node.js Runtime. Read More N|Solid v4.9.4 is now available In Product on Jun 22 2023 N|Solid V4.9.4 contains general stability improvements and bug fixes and a Node.js security release captured in Node.js v16.20.1 (LTS) & v18.16.1 (LTS). Read More PREV 2 / 50 NEXT Feature* * Product on Jun 26 * © *",
    "url": "https://nodesource.com/blog/page/2"
  },
  {
    "body": "This XML file does not appear to have any style information associated with it. The document tree is shown below. <rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:media=\"http://search.yahoo.com/mrss/\" version=\"2.0\"> <channel> <title> <![CDATA[ The NodeSource Blog ]]> </title> <description> <![CDATA[ Node.js Support, Training and Consulting for the Enterprise, Worldwide ]]> </*</link> <generator>NodeSource v1.0.0</generator> <lastBuildDate>Sun, 10 Nov 2024 10:46:03 GMT</lastBuildDate> <atom:link href=\"https://nodesource.com/blog/rss\" rel=\"self\" type=\"application/rss+xml\"/> <ttl>60</ttl> <item> <title> <![CDATA[ *) ]]> </title> <description> <![CDATA[ With Active LTS support extending into late 2025, Node.js v22.x is an excellent choice for those aiming for long-term support in production environments. ]]> </*/Node.js-v22-Long-Term-Support-LTS</*\">Node.js-v22-Long-Term-Support-LTS</guid> <pubDate>Fri, 08 Nov 2024 16:0*t/hspc7zpa5cvq/6MWFfJgUNSpKFyG1WpFVlh/1350e2e21de9efaa1ff10e3e46fbfe58/v2__1_.*/6MWFfJgUNSpKFyG1WpFVlh/1350e2e21de9efaa1ff10e3e46fbfe58/v2__1_.png\" alt=\"*)\"><p>On October 29, 2024,<em>* Node.js v22 <strong>officially transitioned into *</strong></em>Long Term Support (LTS) with the codename <strong>'Jod'</strong>. For developers and organizations relying on the stability of Node.js for production environments, this transition marks a key milestone for Node.js 22.x, ensuring it will receive critical updates and security support for years to come. Let’s take a closer look at what this means, along with a refresher on the Node.js release lifecycle 🔄.</p> <blockquote> <p>I believe the transition to LTS makes this release line more stable, especially given the improvements made over 10 releases. This line now offers a wealth of features, providing a mature and reliable option for production use -<em>Rafael Gonzaga, Principal OSS Engineer at NodeSource</em></p> </blockquote> <hr> <h1 id=\"understandingthenodejsreleaselifecycle\">Understanding the Node.js Release Lifecycle</h1> <p>The Node.js release lifecycle is designed to provide a balance between <strong>innovation</strong> and <strong>stability</strong>, allowing developers to explore new features while maintaining the confidence that production applications will have the longevity of support they need. Here’s a breakdown of each stage:</p> <p><*pa5cvq/4s44WiHLYXb6geWZ3uAHd3/1e518fa6eb1568e495613f1f03fba6fb/Screenshot_2024-11-08_at_11.18.48_AM.png\" alt=\"*)\"></p> <ol> <li><strong>Current Release</strong>: Each new major version of Node.js starts in the \"Current\" phase, a six-month period in which the community can test new features, APIs, and performance improvements. During this phase, library maintainers and developers are encouraged to adopt new features, providing valuable feedback. The \"Current\" release is updated frequently, helping the community prepare for the latest advancements in Node.js.</li> <li><strong>Active LTS</strong>: After the Current phase, Node.js releases undergo a divergence based on version number. Odd-numbered releases (e.g., v21) enter unsupported status, while even-numbered releases (e.g., v22) transition to <strong>Active LTS</strong> status. In this phase, which typically lasts one year, the Node.js version is deemed stable and ready for production use. This period includes patches for bugs, critical fixes, and security updates. It is the most widely used phase for Node.js releases in production environments.</li> <li><strong>Maintenance LTS</strong>: After the Active LTS period concludes, a Node.js release enters the Maintenance LTS phase. This phase, lasting approximately 18 months, focuses on essential bug fixes and security patches. No new features are introduced during this time, which helps to ensure stability for production applications. Maintenance LTS is the final phase before a version reaches the end of its lifecycle.</li> <li><strong>End of Life (EOL)</strong>: After Maintenance LTS, a Node.js version reaches <strong>End of Life (EOL)</strong>, meaning it will no longer receive official support or updates from the Node.js project. Users running EOL versions are encouraged to upgrade to supported versions to maintain security and receive the latest patches.</li> </ol> <p>Node.js typically maintains <strong>three active release lines</strong> simultaneously. This includes one Current version, one Active LTS version, and one Maintenance LTS version. By keeping a mix of releases in each phase, the Node.js team provides a structured progression of stability while supporting a range of user needs across different environments.</p> <h1 id=\"nodejsv22110jodltswhatsnew\">Node.js v22.11.0 \"Jod\" (LTS): What’s New?</h1> <p>Now that we understand the Node.js Life Cycle, let’s see what’s new on the latest LTS. With Node.js v22.11.0, the 22.x release line has officially moved into <strong>Active LTS</strong>. The release includes an update to metadata, like the <code>process.release</code> object, to reflect this new LTS status. Let’s look at some key highlights of Node.js v22:</p> <h2 id=\"1builtinwebsocketclient\">1. Built-in WebSocket Client</h2> <p>A significant development in Node.js v22 is the built-in WebSocket client, now enabled by default for browser compatibility. Previously, developers had to rely on third-party libraries for WebSocket functionality, but with Node.js v22, the process is streamlined. Developers can now open bidirectional communication channels between client and server without external dependencies, paving the way for efficient real-time application development.</p> <h2 id=\"2stablewatchmode\">2. Stable Watch Mode</h2> <p>Previously marked as experimental, the Watch Mode feature is now stable in Node.js v22. Developers can use <code>--watch</code> to monitor files and automatically restart processes on changes, eliminating the need for third-party tools like nodemon. This addition can significantly boost productivity during development by reducing manual restarts.</p> <h2 id=\"3esmgraphsinrequire\">3. ESM Graphs in <code>require()</code></h2> <p>Working with ECMAScript Modules (ESM) in Node.js has often required intricate workarounds, especially when integrating with CommonJS modules. Node.js v22 simplifies this by allowing the import of entire ESM graphs using <code>require()</code> through the <code>--experimental-require-module</code> option. This feature provides smoother module interoperability, making it easier to develop modular, maintainable code without complex dependencies.</p> <h2 id=\"4simplifiedscriptexecutionwithrun\">4. Simplified Script Execution with <code>--run</code></h2> <p>An experimental <code>--run</code> flag has been added to execute scripts directly from <code>package.json</code>, providing a faster alternative to <code>npm run</code> for frequently used commands. This feature allows quicker access to scripts without the overhead of loading npm, making it particularly useful for routine testing and debugging.</p> <h2 id=\"5v8engineupgradedtoversion124\">5. V8 Engine Upgraded to Version 12.4</h2> <p>With the V8 engine update to version 12.4, Node.js v22 introduces a range of advanced capabilities:</p> <ul> <li><strong>WebAssembly Garbage Collection</strong> improves memory handling for WebAssembly applications.</li> <li><strong>New JavaScript Functions</strong>: Array.fromAsync() for asynchronous array generation, new Set methods, and iterator helpers give developers powerful new tools.</li> <li><strong>High Watermark Increase</strong>: The default high watermark for streams has been raised from 16 KB to 65 KB, boosting performance for memory-intensive applications, though developers working with limited memory can adjust it as needed.</li> </ul> <p>These upgrades further enhance Node.js’s ability to support modern JavaScript applications with robust performance and efficient memory management.</p> <h2 id=\"6patternmatchingwithglobandglobsync\">6. Pattern Matching with <code>glob</code> and <code>globSync</code></h2> <p>In this release, Node.js introduces pattern-matching capabilities to the <code>node:fs</code> module through <code>glob</code> and <code>globSync</code>. These new methods simplify file system operations by allowing developers to search and manipulate files based on specific patterns, streamlining tasks like organizing files or managing directory structures.</p> <h2 id=\"7optimizedabortsignalcreation\">7. Optimized AbortSignal Creation</h2> <p>Node.js v22 enhances AbortSignal creation performance, which directly benefits high-level APIs that utilize this class, including <code>fetch</code> and the Node.js test runner. This improvement ensures that applications relying on these APIs can now execute more efficiently, especially in performance-sensitive environments.</p> <blockquote> <p>Is particularly exciting how Node.js v22 fills some long standing gaps by incorporating features that truly deserve to be part of the core runtime. The inclusion of a built-in WebSocket client and the stabilization of Watch Mode are game-changers. These additions eliminate the need for external libraries and tools that developers have relied on for years to perform essential tasks. The ‘Jod’ release not only streamlines the development process but also enhances performance and security. It's a significant step forward that reflects the project's commitment to evolving based on the real needs of its user community -<em>Adrian Estrada, VP of Engineering at NodeSource</em></p> </blockquote> <h1 id=\"whymovetonodejs22x\">Why Move to Node.js 22.x?</h1> <p>As Node.js v22 moves to LTS status, it becomes an attractive option for long-term projects and production environments. The simplified module handling, and built-in tools make it a robust choice for developers looking to build scalable, modern applications. If you’re considering an upgrade, now is an ideal time to explore Node.js v22’s capabilities and prepare for its benefits in a stable, supported environment.</p> <p>For developers and businesses on older Node.js versions, Node.js v22 now presents a compelling choice. Its <strong>Active LTS</strong> phase means it’s ready for production, with a guaranteed support timeline, critical security updates, and enhanced functionality. Here’s why it might be worth considering an upgrade:</p> <ul> <li><strong>Extended Support</strong>: Node.js v22 will remain in Active LTS until October 2025, providing a full year of active support before it transitions to Maintenance LTS, which will continue until April 2027.</li> <li><strong>Stability for Production</strong>: The LTS phase is carefully managed to minimize risk, with a focus on bug fixes and security patches rather than new features. This makes Node.js v22 a safe and stable choice for production applications.</li> </ul> <p>Node.js v20 is now in maintenance mode, which means, no features will land there anymore (except security releases).</p> <h2 id=\"howtoupgradetonodejs22x\">How to Upgrade to Node.js 22.x</h2> <p>For organizations and developers ready to migrate to Node.js v22.x, here are some best practices to keep in mind:</p> <ol> <li><strong>Test Your Application</strong>: Before rolling out any major upgrade, thoroughly test your application in a staging environment. Node.js v22.x introduces certain performance optimizations and under-the-hood improvements, so it's essential to confirm compatibility with your codebase and any dependencies.</li> <li><strong>Update Dependencies</strong>: Make sure all libraries and dependencies are compatible with Node.js v22.x. Check for deprecations or breaking changes, especially if you're coming from an older LTS version. a. You can update your dependencies for Linux using <*source/distributions\">NodeSource N|Solid &amp; Node.js Binary Distributions</a> b. For most developers, especially on Unix-based systems, nvm provides the easiest upgrade path, you can run: <code> nvm install 22 nvm use 22 </code> c. For MacOS you can instal Node.js via Homebrew: <code> brew update brew upgrade node </code> d. Downloading from the Official Node.js Site: <a href=\"https://nodejs.org/en\">https://nodejs.org/en</a> </li> <li><strong>Monitor Performance</strong>: After upgrading, monitor application performance to ensure that your application continues to function optimally. Node.js v22.x comes with improved diagnostics and performance, but monitoring will help catch any unforeseen issues early. Use <a */nsolid\">N|Solid</a> to get the deepest, most valuable performance and security telemetry in production to help you resolve issues faster. We are working on the “*4” which will show the performance difference between v20 and v22, keep an eye on the <*/blog\">NodeSource blog</a> to not miss it.</li> <li><strong>Follow Best Practices for Security</strong>: Node.js v22’s improves security, but it’s still important to implement additional security measures, such as enforcing HTTPS and using secure coding practices.</li> </ol> <blockquote> <p>The N|Solid Runtime supports the latest LTS version. Download it now for free <a */runtime\">here</a>.</p> </blockquote> <h3 id=\"finalthoughts\"><strong>Final Thoughts</strong></h3> <p>The release of Node.js v22.11.0 as an LTS version represents another significant step in the evolution of the Node.js platform, particularly for developers and organizations seeking stability and security. With Active LTS support extending into late 2025, and a Maintenance phase until April 2027, Node.js v22.x is an excellent choice for those aiming for long-term support in production environments.</p> <p>The transition of Node.js 22.x into LTS highlights the Node.js project’s ongoing commitment to providing a secure, reliable platform for the global developer community. For those on earlier Node.js versions, now is an ideal time to consider upgrading to Node.js v22.x and benefiting from its extended support period.</p> <p>Stay tuned for updates on future releases, as Node.js continues to deliver powerful tools and capabilities to meet the needs of an ever-evolving tech landscape. Use <a */nsolid\">N|Solid</a>to monitor Node.js 22.x performance. </p> <blockquote> <p>Looking for advanced or enterprise support for Node.js? <*/\">NodeSource</a> is the premier provider, trusted by organizations like Delta, Visa, and Kaiser, to ensure robust support for their Node.js platforms. Partner with us to keep your applications secure, performant, and reliable.</p> </blockquote> ]]> </*[ * a Big Announcement for Latin America! ]]> </title> <description> <![CDATA[ * JSConf Latam ]]> </*/cityjs-medellin-2024-jsconf-latam-2025</*\">cityjs-medellin-2024-jsconf-latam-2025</guid> <pubDate>Thu, 07 Nov 2024 17:0*t/hspc7zpa5cvq/1np63qzzzGwxnwPKLldQPV/1aeab881239a13db7d8e7d215b7c0eae/Untitled_design__5_.*/1np63qzzzGwxnwPKLldQPV/1aeab881239a13db7d8e7d215b7c0eae/Untitled_design__5_.png\" alt=\"* a Big Announcement for Latin America!\"><p><*pa5cvq/5l9EtQZ2Z02j8bHPJjOsFn/f02251232559ceeeeaf5189d3e2a4ef0/Screenshot_2024-11-07_at_12.04.10_PM.png\" alt=\"* a Big Announcement for Latin America!\"></p> <p>CityJS Medellín 2024 was an amazing conference that drew together both local and international developers in Medellín for an immersive experience focused on JavaScript, innovation, and collaboration. Held on October 25-26, the conference underscored Colombia’s growing influence in the tech world and showcased the talent of Colombian developers alongside renowned global experts. As the first CityJS event in Medellín, it provided a space for learning, networking, and exploring the future of JavaScript and related technologies. </p> <p>NodeSource was thrilled to support CityJS Medellín 2024 as a Gold Sponsor, with five dedicated members from our team actively involved in organizing this incredible event.</p> <p><center><*pa5cvq/4yy51PuRUh22DT2MavVvNr/fd054b6fac1535cb059a7ebd6667b9be/IMG_5935.jpg\" style=\"width: 60%; height: 60%\" alt=\"* a Big Announcement for Latin America!\"> <figcaption>NodeSource Team at CityJS Medellin</figcaption></center></p> <h2 id=\"highlightsfromcityjsmedelln\">Highlights from CityJS Medellín</h2> <p>CityJS Medellín was packed with insightful talks and workshops, each offering unique perspectives on current and future developments in JavaScript. Attendees could explore diverse topics, from foundational JavaScript practices to cutting-edge innovations in AI, web development, and performance optimization.</p> <h3 id=\"keynotetalks\">Keynote Talks</h3> <p>The conference featured prominent speakers whose talks set the tone for a globally aware developer community. *rginn206\">Robin Ginn</a></strong>, Executive Director of the OpenJS Foundation, opened with a talk on the pivotal role of JavaScript in today’s tech landscape. She discussed how JavaScript and open-source projects are shaping the future of AI, cloud computing, and the metaverse, encouraging attendees to take part in open-source initiatives that are driving these advancements.</p> <p><strong>Miguel Ángel Durán García</strong> (<a href=\"https://x.com/midudev\">@midudev</a>), a well-known developer and content creator, followed with an inspiring presentation on the latest advancements in JavaScript, HTML, and CSS. He delved into upcoming features that will redefine web applications, including new capabilities for JavaScript, which allow for richer and more interactive user experiences. </p> <p>*wesleytodd\">Wes Todd</a></strong>, a member of the Express.js Technical Committee, gave a much-anticipated talk titled \"Express Forward,\" addressing the misconception that Express is “dead.” He shared updates on the Express.js project, its ongoing evolution, and the efforts to revitalize its role in modern web applications. Todd’s talk underscored the resilience of Express.js as a backbone of many Node.js applications.</p> <h3 id=\"handsonworkshops\">Hands-On Workshops</h3> <p>CityJS Medellín offered several workshops for hands-on learning, where attendees could deepen their skills with practical, instructor-led sessions, *_rafaelgss\">Rafael Gonzaga</a></strong> from NodeSource introduced attendees to <strong>Node.js performance analysis using N|Solid</strong>. His session provided developers with tools and techniques to analyze and i*, a crucial skill in creating scalable and efficient Node.js applications.</p> <p>Other workshops focused on specific technologies, such as <strong><a href=\"https://twitter.com/giolaq\">Giovanni Laquidara</a></strong>’s session on developing smart TV applications using React Native. Laquidara demonstrated how JavaScript can bridge web development with the world of smart TV applications. *edsadr\">Adrian Estrada</a></strong> from NodeSource, followed with an introduction to building LLM-based applications, helping developers understand how to implement Large Language Models in JavaScript.</p> <h3 id=\"cuttingedgetalksonaiandgeospatialwebdevelopment\">Cutting-Edge Talks on AI and Geospatial Web Development</h3> <p>AI was a hot topic at CityJS Medellín. *lizziepika\">Lizzie Siegle</a></strong> from Cloudflare delivered a beginner-friendly yet powerful talk on prompt engineering, showing attendees how to interact effectively with Large Language Models (LLMs). *satanacchio\">Marco Ippolito</a></strong> presented a deep dive into JavaScript Abstract Syntax Trees, sharing tools and techniques for conducting advanced code searches in large files, which can streamline code analysis in complex projects. His insights into ASTs underscored the need for efficient code search tools in projects of any scale.</p> <p>*c_yatteau\">Courtney Yatteau</a></strong> from Esri introduced attendees to Geographic Information Systems (GIS) and demonstrated how JavaScript developers can integrate geospatial data into their projects. Her talk covered essential GIS concepts and practical examples, showing how spatial data can transform applications across sectors like urban planning and environmental monitoring.</p> <h3 id=\"womensparticipation\">Women’s Participation</h3> <p><*pa5cvq/6Q21Cuc9eC8Lx7H4dduV9a/36bf42dd9f4373cfed0da895717da463/7f4f0d1e-4eaa-4c06-b14a-b77505fa863b.JPG\" alt=\"* a Big Announcement for Latin America!\"></p> <p>CityJS had a great presence of women in the conference, promoting the importance of diversity and inclusion in tech events. Congratulations 👏</p> <h3 id=\"innovationsinwebandaitechnologies\">Innovations in Web and AI Technologies</h3> <p>CityJS Medellín was also a showcase of the latest ideas around AI and JavaScript integration in the browser. <strong><a href=\"https://twitter.com/skatox\">Miguel Useche</a></strong> presented a compelling look at running Large Language Models directly in the browser using WebAssembly and WebGPU. He explored the potential of web-based LLMs to bring sophisticated AI capabilities into users’ hands without relying on server-based processing.</p> <p><strong><a href=\"https://twitter.com/anuarharb\">Anuar Harb</a></strong> introduced attendees to creating stunning 3D models with AI, using tools like Three.js and Spline. His talk showed how JavaScript can power immersive web experiences, with 3D models generated by AI adding a new layer of interactivity to websites.</p> <h3 id=\"localtalentandcommunityimpact\">Local Talent and Community Impact</h3> <p>A unique aspect of CityJS Medellín was its strong focus on amplifying Colombian voices and celebrating local talent. Speakers like <strong><a href=\"https://twitter.com/jdnichollsc\">Juan David Nicholls</a></strong>, who covered event-driven architectures using Temporal and React, and *thecapnews\">Cristian Daniel Marquez Barrios</a></strong>, who discussed the possibilities of JavaScript in quantum computing, exemplified the cutting-edge work being done by developers in Colombia. Their insights showcased Medellín’s potential to influence global tech conversations.</p> <p>Another standout local speaker, <strong><a href=\"https://twitter.com/andville_\">Andres Villegas</a></strong>, presented on distributed async/await patterns with the Resonate JavaScript SDK, offering a fresh perspective on scaling applications across distributed environments. His talk contributed to the growing knowledge base in distributed computing and serverless technologies.</p> <h2 id=\"reflectionsoncityjsmedelln2024\">Reflections on CityJS Medellín 2024</h2> <p>CityJS Medellín 2024 was a landmark event for Colombia’s tech community. With a diverse program that spanned hands-on workshops, forward-looking talks, and interactive sessions, the conference created an environment that encouraged collaboration, learning, and inspiration.</p> <p>For attendees, CityJS Medellín provided not only valuable technical insights but also connections with industry leaders and like-minded developers, building relationships that will undoubtedly fuel future projects and ideas. The success of CityJS Medellín reaffirms Colombia’s role as a key player in the JavaScript ecosystem and sets a high bar for future tech events in the region.</p> <h1 id=\"jsconflatam2025\">JSConf Latam 2025!</h1> <p>CityJS Medellín 2024 concluded with an exciting announcement that electrified the audience: for the first time, Medellín will host <strong>JSConf Latam</strong>, marking a historic milestone as the conference makes its debut in Latin America. This highly anticipated event will rotate between Latin American countries each year, starting with Medellín ❤️</p> <p>JSConf Latam’s arrival cements Colombia’s role as a leading force in the global JavaScript community and signifies a broader commitment to nurturing talent and innovation across the region. This landmark event will not only spotlight local and international experts but also amplify Latin America’s contributions to the global tech landscape, inspiring developers throughout the region to participate and innovate.</p> <p>The conference will be held in November 2025. To assist or submit a CFP, keep an eye at <a href=\"https://www.jsconf.lat/\">jsconf.lat</a></p> ]]> </*[ * ]]> </title> <description> <![CDATA[ N|Solid 6, the ultimate tool for Node.js observability and diagnostics. Elevate your apps with new features, improved UI, and real-time security insights. ]]> </*/nsolid-6-release</*\">nsolid-6-release</guid> <pubDate>Thu, 22 Aug 2024 14:0*t/hspc7zpa5cvq/mcL90l7fw1p6wPuyfc1GF/74d080abf3e28f84ad00823abaa4d600/Social_Media_Images.*/mcL90l7fw1p6wPuyfc1GF/74d080abf3e28f84ad00823abaa4d600/Social_Media_Images.png\" alt=\"*\"><p>We're thrilled to announce the release of N|Solid 6, the latest version of our powerful tool designed to elevate your production Node.js applications and services. Packed with advanced features and enhancements, N|Solid 6 offers unparalleled insights and operational control, making it the go-to solution for monitoring, diagnosing, and securing your critical Node.js applications.</p> <p>There are many monitoring solutions available, but none provide the depth of insights and tooling that help engineering teams identify and solve performance and security issues for Node.js like N|Solid. This release takes the product to the next level, everyone from small teams to Enterprise organizations should add N|Solid to their tooling, you can start for <a href=\"https://accounts.nodesource.com/sign-in\" title=\"FREE\">FREE</a> today.</p> <h2 id=\"anewuserinterfaceforenhancedusability\">A New User Interface for Enhanced Usability</h2> <p>N|Solid 6 introduces a big update to the user interface of the Console, making it easier than ever to navigate and utilize its powerful features. The new UI simplifies how to navigate the platform's robust capabilities, allowing you to concentrate on what truly matters—optimizing and securing your Node.js deployments, resolving issues faster with the best telemetry for Node.</p> <p>Watch a demo of the new experience <a href=\"https://www.youtube.com/watch?v=WJ43buGW9FY\" title=\"here\">here</a>.</p> <h2 id=\"keyfeaturesandimprovements\">Key Features and Improvements</h2> <h3 id=\"enhancedscatterplot\">Enhanced Scatter Plot</h3> <p>Our next-gen scatter plot has been significantly upgraded, offering a powerful satellite view of your Node.js infrastructure. This improved perspective allows you to instantly detect outliers and performance patterns at a glance. The addition of a new global filter bar seamlessly connects every part of N|Solid, ensuring you maintain full context while navigating your application. Effortlessly identify outliers, transform them into global filters, and diagnose issues with greater ease and accuracy.</p> <p><*pa5cvq/2zH9nkVFFLYNYHvxKNd90I/24ff0fc88ad7312902bb5b4de262f2da*globalfilterbar\">Global Filter Bar</h3> <p>The global filter bar is a standout new feature in N|Solid 6, maintaining its state as you move through the application. This feature saves filter history, allowing you to quickly resume or save helpful searches. The new dashboard view, combined with the global filter bar, lets you check security events, assets, and diagnose erratic behaviors seamlessly.</p> <p><*pa5cvq/qc7oYJYb3DrSd0Zk36eNZ/5bb793bca9a6493e3bae4f3aea4a86cf/image.png\" alt=\"*\"></p> <p><*pa5cvq/31tgoXpxHumALjPSt0zaCg/4e2e42b897cac88c100d39dcfed6138b*improveddashboardview\">Improved Dashboard View</h3> <p>The new dashboard view summarizes what the global filter has selected, with grouping options to roll up by application or hostname. Metrics graphs connected to table rows can be changed to any of N|Solid runtime's deep metrics, showing exact time ranges for easy comparison of patterns or spikes.</p> <p><*pa5cvq/7aY6zrlWylcXirYQxsPYu3/fe34a77b4dc898ae9ebd5ab316896fe1*historicaldataaccess\">Historical Data Access</h3> <p>All pages showing historical data now share a unified date range tool. This, combined with the global filter bar, lets you browse any collected historical data, even for processes that are no longer live. Saved actions and alerts have also moved to the global filter bar, streamlining your workflow.</p> <p><*pa5cvq/217MzgoyfTOEb2CAW0Dyio/bb35075d185f9e243e4a568d66d7c901*advancedconfigurationandalerts\">Advanced Configuration and Alerts</h3> <p>Global actions can now be configured via the global configuration menu. Set parameters and actions for high memory usage, vulnerability notifications, asset creation alerts, process crash reports, and more. The blocked event loop notifications provide a stack trace of blocked event loops, aiding in quick diagnosis and resolution.</p> <p><*pa5cvq/2xfrRTtyYyLGgbJCYjN7ys/46beb455a8d4bfb67d59fb7a53bd06cf/image.png\" alt=\"*\"></p> <p><*pa5cvq/3uEa8Nbqr16yTWZxYb9jJJ/a127e9a2b591350af768c6db1162a13b*revampeddocumentation\">Revamped Documentation</h3> <p>We've revamped our documentation from the ground up to match the new workflows of N|Solid 6. This comprehensive guide provides detailed descriptions of all metrics and assets collected, helping you make the most of N|Solid's capabilities.</p> <p><*pa5cvq/42Hm37atVBCaZTYOEtaxxh/3c54c45ec037516d6c7717f6ecb03023*opensourceruntimeandopentelemetryintegration\">Open Source Runtime and OpenTelemetry Integration</h3> <p>The open-source N|Solid runtime continues to be the best and fastest means for using OpenTelemetry with Node.js, embedding the official library into the runtime for maximum performance and configurability. Enable or disable OpenTelemetry tracing during runtime right inside the dashboard for granular control over diagnostics overhead trade-offs.</p> <p><*pa5cvq/5oZtk3H0j0kYhdctGOrmEU/ad87b547d3447b7d65b3863d5fb56df0*realtimesecurityinsights\">Real-Time Security Insights</h3> <p>N|Solid 6 provides the best live and production view of your exposure (only the security issues in your project, not a list of every one) to publicly disclosed third-party security vulnerabilities. Automatically get a list of processes running a vulnerability within minutes of the report being filed, ensuring your systems stay secure.</p> <p><*pa5cvq/5HFvHZBUgVZUbiCUHWz7zy/d7b435ab45c798d0232f64da5bce3cef*aicopilotforsmarterdiagnostics\">AI Copilot for Smarter Diagnostics</h3> <p>Our AI Copilot is smarter than ever, providing quick paths to help you with your investigation. Trained on our documentation and our custom Node.js training content, it offers quick distillations of CPU profiles, helps you dive into your tracing data, and understand the context of the telemetry.</p> <p><*pa5cvq/162GxiFnjvAAbxuAnj6dem/66b073e77e37455e693efc7c6f699c4c/image.png\" alt=\"*\"></p> <h2 id=\"readytogetstarted\">Ready to Get Started?</h2> <p>We believe N|Solid 6 is the best version yet, designed to enable you to develop and operate the highest quality, smoothest-running production Node.js applications possible. <*/\" title=\"Sign up at nodesource.com\">Sign up at nodesource.com</a> and start peeking under the hood of your Node.js application servers today. <br> Current SaaS customers will automatically access the new version and our Enterprise customers will be able to update when they are ready. <br> Stay ahead of the curve with N|Solid 6, and ensure your Node.js applications are running at their best, try it for FREE today!</p> <h3 id=\"availability\">Availability</h3> <p>N|Solid 6 is now available for all Node.js developers and enterprises looking to enhance their production deployments. Visit <*/\" title=\"nodesource.com\">nodesource.com</a> to learn more and sign up today.</p> ]]> </*[ OpenTelemetry in N|Solid ]]> </title> <description> <![CDATA[ Enhance Node.js performance with OpenTelemetry in N|Solid. Learn automatic instrumentation, OTLP export, and seamless integration with observability tools. ]]> </*/opentelemetry-nsolid-release</*\">opentelemetry-nsolid-release</guid> <pubDate>Wed, 26 Jun 2024 14:0*t/hspc7zpa5cvq/4N4qcgj9vVfZfKutPjRZHG/f4a2f3f1ebe249e27eabb7c7ada56ae8/OTEL2__1_.*[ <h2 id=\"introduction\">Introduction</h2> <*t/hspc7zpa5cvq/4N4qcgj9vVfZfKutPjRZHG/f4a2f3f1ebe249e27eabb7c7ada56ae8/OTEL2__1_.png\" alt=\"OpenTelemetry in N|Solid\"><p>N|Solid Runtime, the <*source/nsolid\" title=\"OSS\">OSS</a> runtime that powers <a href=\"https://no*|Solid Pro\">N|Solid Pro</a>, is an innovative, lightweight runtime for Node.js applications. It offers real-time insights into performance, memory usage, and CPU consumption, giving developers unparalleled visibility into their code without requiring any modifications. In today’s software landscape, understanding your application's production behavior is crucial. With cloud-native architectures, microservices, and distributed systems, pinpointing issues is challenging. This is where OpenTelemetry, a widely-adopted, open-source standard for collecting telemetry data, comes in. Leveraging OpenTelemetry with N|Solid, developers gain deep insights into application behavior, identify bottlenecks early, and optimize performance and reliability.</p> <p>In this blog post, we will explore how to instrument your Node.js processes with OpenTelemetry within the N|Solid runtime. You'll learn how these powerful tools work together to provide comprehensive observability, ensuring your applications run smoothly and efficiently in production environments.</p> <h2 id=\"whatisopentelemetry\">What is OpenTelemetry?</h2> <p>As defined in the <*cs/what-is-opentelemetry/\" title=\"official OpenTelemetry documentation\">official OpenTelemetry documentation</a></p> <p><em>__\"OpenTelemetry__ is an <*cs/concepts/observability-primer/#what-is-observability\" title=\"Observability\">Observability</a> framework and toolkit designed to create and manage telemetry data such as <*cs/concepts/signals/traces/\" title=\"traces\">traces</a>, <*cs/concepts/signals/metrics/\" title=\"metrics\">metrics</a>, and <*cs/concepts/signals/logs/\" title=\"logs\">logs</a>. Crucially, OpenTelemetry is vendor- and tool-agnostic, meaning that it can be used with a broad variety of Observability backends, including open source tools like <a href=\"https://www.jaegertracing.io/\" title=\"Jaeger\">Jaeger</a> and <a href=\"https://prometheus.io/\" title=\"Prometheus\">Prometheus</a>, as well as commercial offerings. [...] … <strong>OpenTelemetry</strong> is focused on the <strong>generation, collection, management,</strong> and <strong>export</strong> of telemetry. A major goal of OpenTelemetry is that you can easily instrument your applications or systems, no matter their language, infrastructure, or runtime environment.\"</em></p> <p>By providing a standardized, open-source approach to collecting telemetry data, OpenTelemetry helps bridge the gap between different monitoring and logging tools. This allows developers and operations teams to use their preferred tools and platforms without worrying about compatibility or integration issues. For example, with OpenTelemetry, you can collect metrics and logs from your application using one tool, such as Prometheus or the ELK Stack, while still using another tool for visualization, like Grafana or Kibana. This flexibility enables a more tailored approach to monitoring and logging, allowing teams to choose the best tools for their specific needs.</p> <p>Moreover, OpenTelemetry's instrumentation allows you to collect telemetry data from multiple sources, including applications, services, and infrastructure components. This provides a comprehensive view of your entire architecture, enabling you to identify correlations between different components and better understand how they impact overall performance.</p> <p>By standardizing the way telemetry data is collected and exported, OpenTelemetry facilitates integration with various monitoring and logging tools, making it easier to:</p> <ul> <li>Collect metrics from multiple sources</li> <li>Visualize complex system behavior</li> <li>Detect anomalies and alert on issues</li> <li>Retain and analyze historical data</li> </ul> <p>This standardization ensures that regardless of the tools or platforms you use, OpenTelemetry can help you achieve a consistent and comprehensive observability strategy.</p> <h2 id=\"opentelemetryinnsolid\">OpenTelemetry in N|Solid</h2> <p>To enhance observability through N|Solid, we've integrated robust OpenTelemetry support, offering several key features:</p> <ol> <li>Automatic Instrumentation: N|Solid automatically instruments specific Node.js core modules, capturing critical telemetry data for deeper insights into application behavior.</li> <li>OTLP Exporter: An OpenTelemetry Protocol (OTLP) exporter sends traces and metrics directly to tools like Prometheus or Jaeger.</li> <li>Seamless Ecosystem Integration: Leveraging the OpenTelemetry ecosystem, N|Solid taps into extensive libraries and tools, enhancing your application's observability with community-driven innovation.</li> </ol> <p>In the following sections, we'll delve deeper into how you can configure N|Solid to utilize these OpenTelemetry features and start collecting valuable telemetry data about your application's behavior.</p> <h3 id=\"automaticinstrumentation\">Automatic Instrumentation</h3> <p>N|Solid automatically collects <a href=\"https://docs.nodesource.com/nsolid/5.0/docs#metrics-in-detail\" title=\"process-wide and thread-specific metrics\">process-wide and thread-specific metrics</a> at intervals, adjustable via the <code>NSOLID_INTERVAL</code> environment variable (default: 3 seconds). Tracing, which is off by default due to <a href=\"https://benchmark.nodesource.com/?runId=1706718534650\" title=\"performance concerns\">performance concerns</a>, can be activated by setting the <code>NSOLID_TRACING_ENABLED</code> environment variable. By default, N|Solid instruments <code>node:http</code> and <code>node:dns</code> modules, generating spans for every HTTP and DNS transaction. To exclude these modules, use the <code>NSOLID_TRACING_MODULES_BLACKLIST</code> variable. This automatic instrumentation ensures accurate and detailed metrics and traces with minimal configuration.</p> <p>Try N|Solid’s powerful observability features by <a href=\"https://accounts.nodesource.com/sign-up\" title=\"signing up\">signing up</a> for our free SaaS tier. Run your application with the following command:</p> <pre><code>$ NSOLID_SAAS=your_nsolid_saas_token nsolid app.js </code></pre> <p>Log in to the N|Solid Console to view the collected metrics on the Application Dashboard, and experience enhanced observability and performance optimization for your Node.js applications.</p> <p><*pa5cvq/6UvHPKi65HVbpkjIBMqaG5/5bfd48abe48133b3f190693e5bf2e720/image.png\" alt=\"OpenTelemetry in N|Solid\"></p> <p><strong>Fig 1. N|Solid Application Dashboard</strong></p> <h3 id=\"otlpexporter\">OTLP Exporter</h3> <p>When using N|Solid SaaS, the runtime exports collected telemetry data using the ZeroMQ protocol. For those who prefer sending the data to a different backend, N|Solid provides the option to export metrics and traces using OTLP over either HTTP or GRPC.</p> <p>OTLP configuration in N|Solid is simple. We need to use the <em>NSOLID_OTLP</em> environment variable to enable the OTLP Exporter. Once it’s done, N|Solid will handle the OTEL_* environment variables defined by the <*cs/specs/otel/protocol/exporter/\" title=\"OTLP Exporter specification\">OTLP Exporter specification</a>.</p> <p>Let’s showcase this with an example. </p> <p>The following code implements the most basic Node.js HTTP server:</p> <pre><code>'use strict'; const port = process.env.PORT || 9999; const http = require('node:http'); const server = http.createServer((req, res) =&gt; { res.end('ok'); }); server.listen({port}, () =&gt; { console.log('listening on port: ' + port); }); </code></pre> <p>We want to run this server with N|Solid so it collects and exports metrics and traces to a Prometheus and Jaeger server respectively using OTLP over HTTP. We can set up the 3 services (__prometheus__, <strong>jaeger</strong> and __http_server__) very easily with Docker Compose.</p> <pre><code>version: '3.7' services: prometheus: image: prom/prometheus:latest expose: 9090 ports: 9090:9090 volumes: ./prometheus.yml:/etc/prometheus/prometheus.yml command: \"--config.file=/etc/prometheus/prometheus.yml\" \"--storage.tsdb.path=/prometheus\" \"--web.console.libraries=/usr/share/prometheus/console_libraries\" \"--web.console.templates=/usr/share/prometheus/consoles\" \"--enable-feature=otlp-write-receiver\" jaeger: image: jaegertracing/all-in-one:latest environment: COLLECTOR_OTLP_ENABLED=true JAEGER_DISABLED=true expose: 4318 ports: 16686:16686 4318:4318 http_server: image: \"nodesource/nsolid:iron-latest\" user: \"nsolid\" working_dir: /home/nsolid/app environment: NSOLID_APPNAME=http_server NSOLID_TRACING_ENABLED=1 NSOLID_OTLP=otlp OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://prometheus:9090/api/v1/otlp/v1/metrics OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4318/v1/traces ports: 9000:8080 volumes: ./api:/home/nsolid/app command: \"nsolid test.js\" </code></pre> <p>Let’s take a brief look on how every service is configured:</p> <ul> <li>The <strong>prometheus</strong> service will listen on port 9090 with the feature <em>otlp-write-receiver</em> enabled, consuming metrics in <strong>OTLP</strong> at the following url: <a href=\"http://prometheus:9090/api/v1/otlp/v1/metrics\" title=\"http://prometheus:9090/api/v1/otlp/v1/metrics\">http://prometheus:9090/api/v1/otlp/v1/metrics</a>.</li> <li>The <strong>jaeger</strong> service with <em>COLLECTOR_OTLP_ENABLED</em> will consume traces in <strong>OTLP</strong> at the following URL: <a href=\"http://jaeger:4318/v1/traces\" title=\"http://jaeger:4318/v1/traces\">http://jaeger:4318/v1/traces</a>.</li> <li>The <strong>http_server</strong> service runs with N|Solid and has the <strong>OTLP</strong> Exporter enabled by setting <em>NSOLID_OTLP</em> to <strong>“otlp”__. To configure the metrics and traces endpoints the <em>OTEL_EXPORTER_OTLP_METRICS_ENDPOINT</em> and <em>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT</em> environment variables are set pointing to __prometheus</strong> and <strong>jaeger</strong> urls. The rest of the config values for the OTLP Exporter are set to its default values as defined in <*cs/specs/otel/protocol/exporter/\" title=\"https://opentelemetry.io/docs/specs/otel/protocol/exporter/\">https://opentelemetry.io/docs/specs/otel/protocol/exporter/</a>, so for example, we don’t need to actually define the protocol to be used, as it defaults to OTLP over HTTP.</li> </ul> <p>As a final step, we spin up the services by running:</p> <pre><code>$ docker-compose up </code></pre> <p>Next we can send an HTTP request to the server:</p> <pre><code>$ wget http://localhost:9000 </code></pre> <p>We can check in the <strong>Prometheus</strong> and <strong>Jaeger</strong> UI’s that telemetry data is being consumed.</p> <p><*pa5cvq/2mvI5xbH5rwUbkEg68XAA1/47545633f359f7a3d645ff2c0ece7835/image.png\" alt=\"OpenTelemetry in N|Solid\"></p> <p><strong>Fig 2.</strong> Process <strong>cpu</strong> and <strong>cpu_user</strong> time as shown in <strong>Prometheus</strong></p> <p><*pa5cvq/1IKK36o8SwpVijVcCVVvxh/44b0c582cb8bba6ee7fd472cde091b03/image.png\" alt=\"OpenTelemetry in N|Solid\"></p> <p><strong>Fig 3.</strong> HTTP server transaction span as shown in <strong>Jaeger</strong></p> <h3 id=\"opentelemetryecosystemintegration\">OpenTelemetry ecosystem integration</h3> <p>Integrating N|Solid with the OpenTelemetry JavaScript ecosystem is straightforward, allowing us to take full advantage of the wide range of available modules.</p> <p>We’re going to modify our existing <strong>http_server</strong> code to incorporate some <strong>@opentelemetry</strong> modules which will allow us to showcase some new functionality. The new code looks like this:</p> <pre><code>'use strict'; const port = process.env.PORT || 9999; const http = require('node:http'); const nsolid = require('nsolid'); const api = require('@opentelemetry/api'); const { FsInstrumentation } = require('@opentelemetry/instrumentation-fs'); // Register Opentelemetry API in N|Solid. if (!nsolid.otel.register(api)) { throw new Error('Error registering api'); } // Register Opentelemetry auto-instrumentation modules. nsolid.otel.registerInstrumentations([ new FsInstrumentation({}) ]); // Need to require this after registering the instrumentations const fs = require('node:fs'); const tracer = api.trace.getTracer('test'); const server = http.createServer((req, res) =&gt; { const ctxt = api.context.active(); const span = tracer.startSpan('Fibonacci', { kind: api.SpanKind.INTERNAL }, ctxt); fs.writeFileSync('./output_fib.txt', ](https://opentelemetry.io/docs/concepts/signals/metrics/); span.end(); res.end(); }) function fib(n) { if (n === 0 || n === 1) return n; return fib(n - 1) + fib(n - 2); } server.listen(port, () =&gt; { console.log('listening on port: ' + port); }); </code></pre> <p>Let’s describe the newly added functionality:</p> <ul> <li>We have added the <strong>@opentelemetry/api</strong> interface and registered in N|Solid using the <code>nsolid.otel.register()</code> API. By doing so, we will be able to perform all the operations defined in the Opentelemetry API specification that relate to tracing and they’re handled by the implementation embedded in N|Solid (metrics and logs integration aren’t implemented yet though it’s coming).</li> <li>We have registered <strong>@opentelemetry/instrumentation-fs</strong> by using the <code>nsolid.otel.registerInstrumentations()</code> API which will automatically instrument the <strong>node:fs</strong> core modules.</li> <li>We have added a custom Span using the <code>api.trace</code> API. Custom spans provide granular visibility into specific parts of your application. In this example, we create a custom span named <code>Fibonacci</code> to monitor the Fibonacci calculation. This span started before the Fibonacci calculation and ended immediately after. By creating this custom span, we can precisely monitor the execution time and performance of the Fibonacci calculation, providing deeper insights into that part of the application.</li> </ul> <p>Finally, we spin up the services again by running:</p> <pre><code>$ docker-compose up </code></pre> <p>Next we can send an HTTP request to the server:</p> <pre><code>$ wget http://localhost:9000 </code></pre> <p>And now we can check in <strong>Jaeger</strong> how the trace generated by the HTTP differs from the original one.</p> <p><*pa5cvq/2WxsgcBQyQ2U8Zxw7jV0Hi/ab2fd046b82580b4d17852a7bd4f35c1/image.png\" alt=\"OpenTelemetry in N|Solid\"></p> <p><strong>Fig 4.</strong> Full trace with 3 spans as shown in <strong>Jaeger</strong></p> <p><*pa5cvq/4Bj41JK2J0lrZbJdXAJ1n3/758cc76a960a23c635a9f046e924830f/image.png\" alt=\"OpenTelemetry in N|Solid\"></p> <p><strong>Fig 5.</strong> Comparison between traces from <strong>Fig 2.</strong> and <strong>Fig 3.</strong></p> <h2 id=\"conclusion\">Conclusion</h2> <p>Integrating OpenTelemetry with N|Solid enhances observability in your Node.js applications by providing comprehensive telemetry data collection and seamless integration with tools like Prometheus and Jaeger. This setup enables deeper insights into application performance, quick issue identification, and efficient optimization.</p> <p>In this post, we demonstrated how to configure N|Solid for automatic instrumentation and OTLP export, showcasing practical examples. These features simplify the monitoring process, helping ensure your applications run smoothly and efficiently.</p> <p>With N|Solid and OpenTelemetry, you have powerful tools to maintain high-performance and reliable applications. We encourage you to explore these features to optimize your observability strategy.</p> <p>Thank you for reading! </p> ]]> </*[ * ]]> </title> <description> <![CDATA[ Discover N|Solid's new heap profiling feature for Node.js to easily detect and fix memory leaks with minimal overhead ]]> </*/nsolid-heap-profilers</*\">nsolid-heap-profilers</guid> <dc:creator> <![CDATA[ Bryce Baril ]]> </dc:creator> <pubDate>Tue, 30 Apr 2024 05:0*t/hspc7zpa5cvq/1BBS54NxInhVVANDfU01G0/53c4af7039282fd935d3e237f7bf9b36/Heap_Profiles__2_.*/1BBS54NxInhVVANDfU01G0/53c4af7039282fd935d3e237f7bf9b36/Heap_Profiles__2_.png\" alt=\"*\"><p>We are thrilled to announce the release of a new feature in N|Solid that includes <strong>sample heap profiling and heap objects observability for main processes and worker threads</strong>.</p> <p>N|Solid is known for its Node.js performance and security observability and diagnostic tools and best-in-class low overhead has completed a new innovation to hunt memory leaks in development and production environments.</p> <p>Memory is a precious resource in computing. Memory leaks can cause persistent application crashes, increased billing costs, and wasted valuable server resources. Tracking down memory leaks is a real challenge, especially in Node. Now, with N|Solid, we have made it easy thanks to “heap sampling”.</p> <p>With N|Solid's heap sampling, you can now trace memory leaks in your production applications on-demand. Using the actionable metrics from N|Solid, including heap usage, your application can trigger profiling automatically. The powerful flame graph visualization shows exactly where the problem lies by displaying the allocation stack trace and heap size. This allows you to quickly pinpoint and fix memory issues without constantly monitoring dashboards for anomalies.</p> <p><*pa5cvq/5qGNugnJagyfJmy9dBpElh/933db791190fe50def60e3db9318eca5/image.png\" alt=\"*\"> <em>This screenshot is the memory profiler view in chrome devtools.</em></p> <p>Without this new capability in N|Solid, developers relied on heap snapshots or to debug memory issues. However, these snapshots captured every single detail of the heap contents and structure, making them gigantic, risking out-of-memory crashes. Comparing multiple snapshots to identify differences was a complex and slow process that didn't pinpoint the root cause efficiently.</p> <p>With heap sampling, you can avoid the overhead and high memory requirements of snapshots. By providing granular allocation details mapped to function names in your codebase, heap sampling tracks incremental changes over time, allowing you to quickly identify the most memory-intensive areas of your application.</p> <p>Now, let’s talk about those new profilers more deeply.</p> <h2 id=\"heapsampling\"><strong>Heap Sampling</strong></h2> <p>Heap Sampling differs from Heap Snapshots in meaningful ways that enable use in production environments with minimal performance overhead. The fundamental difference is how it captures the data required to find memory leaks without a ton of unnecessary data. This has two key benefits; first, you will save a ton of cycles reviewing heap samples and you won’t have to leverage massive computational requirements for processing heap snapshots.</p> <p>N|Solid has incorporated V8's sampling heap profiler, which samples object allocations and builds an online 'sampling' log that represents a snapshot of currently live objects in the system at any given time.</p> <p>Each sampled allocation includes the stack trace at the time of allocation, making it extremely useful for detecting and diagnosing memory leaks. This sampling mechanism is lightweight ensuring it does not impact production performance.</p> <p>Under the hood, N|Solid leverages the statistical properties of the Poisson sampling process to approximate the true allocation distribution from the collected samples. This allows it to provide an accurate representation of memory usage while minimizing overhead.</p> <p>By integrating V8's sampling heap profiler, N|Solid delivers production-ready memory leak detection and diagnosis capabilities with low-friction instrumentation and performance impact that will help teams diagnose and solve issues faster.</p> <h3 id=\"howtotriggeraheapsamplefromthensolidconsole\">How to trigger a heap sample from the N|Solid console</h3> <p>From your N|Solid console process details view, click on “New Heap Profile”, select for how long you want to run the sample, choose the “Heap sample” option and then click on the “START PROFILE” button.</p> <p><em>Note: You can also monitor the memory allocation in your worker threads by choosing any thread from the profiler modal.</em></p> <p><*pa5cvq/1vv9x9FICEndvZZTDefKNN/e3e16ac91b61e88aa9a9b486ee7984d3/Screenshot_2024-04-29_at_3.01.09_PM.png\" alt=\"*\"> <em>This screenshot is the memory profiler modal view in N|Solid console.</em></p> <h3 id=\"howtotriggeraheapsamplefromthensolidjsapi\">How to trigger a heap sample from the N|Solid JS API</h3> <p>It is as simple as run this for get a Node.js stream-based sampling profile.</p> <pre><code class=\"language-jsx\">const fs = require('fs'); const nsolid = require('nsolid'); // The signature is threadId and time in ms to run the profile. const stream = nsolid.heapSamplingStream(0, 1200); .pipe(fs.createWriteStream('profile.heapprofile')); </code></pre> <h2 id=\"heaptrackobjects\">Heap track objects</h2> <p>There’s a second mode of sampling available as well that combines the full graph context of the heap snapshot with the sampled allocations over time, combining the insights of both methods. It tracks the heap objects population statistics; heap objects relocations done by the garbage collector are recorded and added as an appendix to a heap snapshot.</p> <h3 id=\"howtostarttrackingheapobjectsfromthensolidconsole\"><strong>How to start tracking heap objects from the N|Solid console</strong></h3> <p>Heap Profiles are captured in nearly the same way as Heap Samples. From your N|Solid console process details view, click on “New Heap Profile”, select for how long you want to run the sample, choose the “Track Allocations” option and then click on the “START PROFILE” button.</p> <p><em>Note: You could also monitor your worker threads by choosing any thread from the profiler modal.</em></p> <p><*pa5cvq/1uJqYnVzAIwIPmRXZfMn3f/c95c1449f9e43318ec8f7d0eed4941fc/Screenshot_2024-04-29_at_3.01.22_PM.png\" alt=\"*\"> <em>This screenshot is the memory profiler modal view in N|Solid console.</em></p> <h3 id=\"howtostarttrackingheapobjectsfromthensolidjsapi\">How to start tracking heap objects from the N|Solid JS API</h3> <p>With this simple snippet, you can have a Node.js stream-based profile.</p> <pre><code class=\"language-jsx\">const fs = require('fs'); const nsolid = require('nsolid'); // The signature is threadId and time in ms to run the profile. const stream = nsolid.heapProfileStream(0, 1200) .pipe(fs.createWriteStream('profile.snapshot')); </code></pre> <p>You can try this new feature today along with all of the other valuable features in N|Solid with a <a href=\"https://accounts.nodesource.com/sign-up\">Free account</a>. We would love to hear from you about how you like the new feature, send us your thoughts contact@nodesource.com. To learn more about N|Solid visit <*/\">nodesource.com</a>.</p> <p>Here at NodeSource we build low overhead monitoring for all your Node.js apps; happy hacking and safe heaps!</p> ]]> </*[ Enhancing Node.js Core: Introducing Support for Synchronous ESM Graphs ]]> </title> <description> <![CDATA[ Discover how Node.js's new support for synchronous ESM graphs simplifies transitions to ECMAScript Modules, enhancing developer experience. ]]> </*/enhancing-nodejs-esm-graphs</*\">enhancing-nodejs-esm-graphs</guid> <pubDate>Tue, 26 Mar 2024 13:0*t/hspc7zpa5cvq/4dUQ9Q3J6cfOYuQHSCr1FH/f0f162a26402ee1a970e15a0f54a1c18/ESM_Graphs.*/4dUQ9Q3J6cfOYuQHSCr1FH/f0f162a26402ee1a970e15a0f54a1c18/ESM_Graphs.png\" alt=\"Enhancing Node.js Core: Introducing Support for Synchronous ESM Graphs\"><p>Exciting news this week! One of the latest features in Node.js core is the addition of support for requiring synchronous ECMAScript Modules (ESM) graphs. This enhancement promises to simplify the transition for package authors and users alike, as the ecosystem gradually shifts towards ESM. This long-awaited feature, enabled via the <code>--experimental-require-module</code> flag, marks a pivotal moment in Node.js development, addressing a persistent pain point for developers. </p> <p>In this blog post, we explore deeper into the journey leading to this milestone, exploring the technical and cultural intricacies that shaped its evolution.</p> <p><*pa5cvq/2x9Xo7nJa8aQlSCfMpSOO5/256c8f4502f2fd1f0bfe9c77f141627d/image.png\" alt=\"Enhancing Node.js Core: Introducing Support for Synchronous ESM Graphs\"></p> <h3 id=\"understandingtheupdate\">Understanding the Update</h3> <p><a href=\"ht*/51977\" title=\"The pull request\">The pull request</a> aims to address a long-standing pain point for Node.js users: the inability to require ESM modules synchronously. While Node.js has supported ESM for some time, requiring these modules has been restricted to asynchronous operations using <code>import()</code>. However, with the introduction of this new feature, developers can now use require() for *.</p> <h3 id=\"howitworks\">How It Works</h3> <p>The implementation of this feature relies on the <code>--experimental-require-module</code> flag. When enabled, Node.js will allow * via <code>require()</code>. However, there are certain conditions that must be met for this to work:</p> <ol> <li>The ESM module must be explicitly marked as such, either through a \"type\": \"module\" field in the closest package.json or by using a .mjs extension.</li> <li>The module must be fully synchronous, meaning it contains no top-level await expressions.</li> </ol> <p>If these conditions are met, <code>require()</code> will load the module as an ESM and return the module namespace object synchronously. This behavior mirrors dynamic <code>import()</code> but operates synchronously.</p> <p><*pa5cvq/3rBm0cUc6jkZLnPKemvXvf/5fc891b2b349a40bc6561fae856abbe6/image.png\" alt=\"Enhancing Node.js Core: Introducing Support for Synchronous ESM Graphs\"></p> <h3 id=\"backgroundandmotivation\">Background and Motivation</h3> <p>The decision to introduce this feature stems from ongoing discussions within the Node.js community. Previous attempts to support * faced challenges, particularly in handling top-level await expressions. However, with the current implementation, the focus remains on simplicity and compatibility.</p> <p>The motivation behind this enhancement is clear: to ease the transition for package authors and users as the ecosystem embraces ESM. By allowing *, package authors can migrate their codebases without worrying about breaking changes for users. This not only streamlines the transition process but also reduces concerns about <code>node_modules</code> bloat and identity issues due to duplication.</p> <h3 id=\"theagonyoferr_require_esm\">The Agony of ERR_REQUIRE_ESM</h3> <p>For years, Node.js developers grappled with the frustration of <code>ERR_REQUIRE_ESM</code>. While importing CommonJS (CJS) modules was straightforward, requiring ESM modules remained elusive. This discrepancy led to confusion and wasted hours, particularly for those unaware of the underlying complexities. Package authors faced dilemmas, forced to choose between maintaining compatibility with both CJS and ESM users or risking breaking changes. Meanwhile, the prevailing belief that \"ESM is async\" perpetuated a myth, obscuring the true nature of ESM syntax.</p> <pre><code>const open = require('open'); open('https://nodesource.com'); </code></pre> <p>We are using the popular <a href=\"https://www.npmjs.com/package/open\" title=\"open\">open</a> module for opening files, and we have in our project the following dependency:</p> <pre><code>{ \"dependencies\": { \"open\": \"^8.4.2\" } } </code></pre> <p>Everything works correctly and the script opens a browser pointing to <code>https://nodesource.com</code>.</p> <p>If we want to update the dependency to the latest stable one, we will have to execute:</p> <pre><code>$npm i open@latest </code></pre> <p>and we see the dependencies as:</p> <pre><code>{ \"dependencies\": { \"open\": \"^10.1.0\" } } </code></pre> <p>Now when running the script... boom! We encounter the following error:</p> <pre><code>$ node index.js /tmp/open/index.js:1 const open = require('open'); ^ Error [ERR_REQUIRE_ESM]: require() of ES Module /tmp/open/node_modules/open/index.js from /tmp/open/index.js not supported. Instead change the require of /tmp/open/node_modules/open/index.js in /tmp/open/index.js to a dynamic import() which is available in all CommonJS modules. at Object.&lt;anonymous&gt; (/tmp/open/index.js:1:14) { code: 'ERR_REQUIRE_ESM' } Node.js v20.10.0 </code></pre> <h3 id=\"discoveringsynchronousesmpotential\">Discovering Synchronous ESM Potential</h3> <p>A pivotal realization occurred when exploring the inner workings of ESM syntax. Contrary to popular belief, ESM was not inherently asynchronous but rather conditionally so, triggered only by the presence of top-level await expressions. This insight laid the groundwork for reconsidering synchronous require(esm), a concept previously explored in 2019 but overshadowed by technical challenges and heated debates.</p> <h3 id=\"anewapproachemerges\">A New Approach Emerges</h3> <p>Despite the complexities, a renewed effort to implement synchronous require(esm) gained momentum. A fresh perspective led to a simplified approach, focusing solely on supporting synchronous ESM graphs. This pragmatic approach garnered support, paving the way for the feature's inclusion in Node.js core.</p> <p>To avoid the error shown before, you can do the following using the open module which only supports ESM:</p> <pre><code>const { default: open } = require('open'); open('https://nodesource.com'); </code></pre> <p>And then run:</p> <pre><code>node --experimental-require-module index.js </code></pre> <p>That’s it! No more errors. </p> <h3 id=\"lookingahead\">Looking Ahead</h3> <p>While the current implementation addresses the majority of use cases for synchronous ESM loading, there are still areas for improvement. Certain feature interactions, such as with experimental flags like <code>--experimental-detect-module</code> or <code>--experimental-wasm-modules</code>, may need further consideration. Additionally, edge cases involving cyclic dependencies might require additional handling.</p> <p>However, as with any experimental feature, the goal is to iterate and improve over time. By introducing this capability as an experimental feature, Node.js can gather feedback from users and continue refining the implementation. As the JavaScript ecosystem evolves, Node.js remains committed to providing a robust platform for developers.</p> <p>In conclusion, the addition of support for synchronous ESM graphs represents a significant step forward for Node.js. It not only simplifies the transition to ESM for package authors but also enhances the overall developer experience. With this new capability, Node.js continues to adapt and innovate, ensuring it remains a leading platform for server-side JavaScript development.</p> <p>References: <br> <a href=\"https://joyeecheung.github.io/blog/2024/03/18/require-esm-in-node-js/\" title=\"require(esm) in Node.js\">require(esm) in Node.js</a> - Joyee Cheung's Blog </p> ]]> </*[ N|Solid: Node.js Compatibility Proven through Fastify CI Integration ]]> </title> <description> <![CDATA[ Discover how N|Solid integrates with Fastify via GitHub Actions, showcasing true Node.js compatibility and enhancing application performance and security. ]]> </*/nodejs-compatibility-fastify-integration</*\">nodejs-compatibility-fastify-integration</guid> <pubDate>Fri, 22 Mar 2024 14:0*t/hspc7zpa5cvq/3H0jt8Q0LYfZhg3L0Cu4ke/99603ce13448e8dbbcbf6630f13d19df/Fastify_Article.*/3H0jt8Q0LYfZhg3L0Cu4ke/99603ce13448e8dbbcbf6630f13d19df/Fastify_Article.png\" alt=\"N|Solid: Node.js Compatibility Proven through Fastify CI Integration\"><p>At NodeSource, we understand the hesitance and scrutiny that often accompany claims of \"Node.js compatibility\". The Node.js ecosystem is vast and intricate, and as Matteo Collina rightly points out, passing a \"hello world\" example is just the start. </p> <p>We believe <a href=\"https://no*|Solid\">N|Solid</a> should be a component of every Node.js project, especially in production, to provide developers and organizations with the most advanced performance and security observability tooling. To accomplish this, we need to ensure we work well within the ecosystem.</p> <p>With that in mind, we've taken Matteo's challenge head-on. We're not just talking about compatibility; we're proving it. It's not just about N|Solid running well in isolation but about showing how it can be integrated seamlessly into existing Node.js workflows, such as those using GitHub Actions. Matteo's open invitation to demonstrate runtime compatibility within the CI of his projects provided us with the perfect opportunity to showcase N|Solid's robustness.</p> <p><*pa5cvq/3sdo7avFOdISiESbHz1sNI/08c5a00669a106a5945666b570146490/image.png\" alt=\"N|Solid: Node.js Compatibility Proven through Fastify CI Integration\"></p> <h3 id=\"integrationmadeeasywithgithubactions\">Integration Made Easy with GitHub Actions</h3> <p>The integration of N|Solid into GitHub Actions is straightforward, ensuring that your projects can enjoy the advanced features of N|Solid without any hassle. For developers and organizations aiming to maintain continuity while enhancing their Node.js applications with N|Solid's capabilities, the transition is a breeze.</p> <p><a href=\"https://github.com/marketplace/actions/setup-nsolid-environment\">https://github.com/marketplace/actions/setup-nsolid-environment</a></p> <p><*pa5cvq/4AiyT96hiUxSi5AhjdMSrL/ef7038cf103314a76b86b9d508c649cd/image.png\" alt=\"N|Solid: Node.js Compatibility Proven through Fastify CI Integration\"></p> <h3 id=\"risingtothechallengefastifyandnsolidgohandinhand\">Rising to the Challenge: Fastify and N|Solid Go Hand-in-Hand</h3> <p>In response to Matteo's tweet, we rolled up our sleeves and sent a pull request to one of the most esteemed Node.js web frameworks around: Fastify. You can see our contribution here: <br> <a href=\"https://github.com/fastify/fastify/pull/5332\">https://github.com/fastify/fastify/pull/5332</a>.</p> <p>Our goal was to demonstrate N|Solid's compatibility without altering the existing test code in the Fastify repository. The result? Success. The pull request showcases a GitHub Actions pipeline executing Fastify's comprehensive suite of library tests using the N|Solid runtime, maintaining green across the board.</p> <p>This is not just a win for N|Solid; it's a statement to the Node.js community that N|Solid is a runtime you can trust to support your applications completely. It's Node.js compatibility that truly holds up under scrutiny.</p> <h3 id=\"conclusion\">Conclusion</h3> <p>Through diligent work and community engagement, NodeSource is excited to affirm that the N|Solid runtime stands as a fully compatible Node.js runtime, ready to be integrated into your projects. Whether you're looking to leverage N|Solid's enhanced security features, performance monitoring, or any other advanced capabilities, doing so will not ask you to sacrifice compatibility. With our successful Fastify tests and the ease of GitHub Actions integration, the path forward with N|Solid is clear, secure, and efficient. Try <a href=\"https://no*|Solid\">N|Solid</a> for FREE today!</p> <p>We're proud to contribute to the Node.js ecosystem and look forward to seeing how our efforts help you build better, more reliable, and more performant applications.</p> ]]> </*[ * ]]> </title> <description> <![CDATA[ Explore the top Node.js package managers in 2024: npm, Yarn, pnpm. Compare features, performance, and choose the best for your project. ]]> </*/nodejs-package-manager-comparative-guide-2024</*\">nodejs-package-manager-comparative-guide-2024</guid> <pubDate>Thu, 29 Feb 2024 15:0*t/hspc7zpa5cvq/56dmc6RbQoijwVSXGkwtFY/357c41b192357ded515748a1414423bb/thumbnail-package-manager.*/56dmc6RbQoijwVSXGkwtFY/357c41b192357ded515748a1414423bb/thumbnail-package-manager.png\" alt=\"*\"><p>The year 2024 marks a crucial juncture in the Node.js ecosystem, where developers face different choices when it comes to selecting the right package manager for their projects. npm, Yarn, and pnpm stand out as the frontrunners, as they are the most widely used in the Node.js ecosystem. Each package offers unique features and capabilities tailored to address the challenges of modern development environments.</p> <p>Let’s examine the differences, advantages and disadvantages between them to help developers make informed decisions about which tool best suits your project needs, and get insights into the evolving trends shaping their usage in 2024.</p> <h2 id=\"npmnodepackagemanager\">npm - Node Package Manager</h2> <p>npm is the default package manager for Node.js, known for its extensive package registry and seamless integration with the Node.js ecosystem. It was created to simplify the process of installing, managing, and sharing code dependencies in Node.js projects. npm provides a vast repository of over <strong>two million</strong> packages, making it a comprehensive ecosystem for JavaScript developers and the largest software registry in the world.</p> <p>Here's a closer look at npm:</p> <h4 id=\"advantages\">Advantages:</h4> <ol> <li>__Vast Package Repository__: Developers love npm for its unmatched package registry, boasting over two million packages covering a wide range of functionalities and use cases. Developers have access to a rich ecosystem of open-source libraries and modules, enabling them to leverage existing solutions and accelerate development.</li> <li>__Default Choice for Node.js__: npm comes bundled with Node.js installations, making it the default package manager for Node.js projects. Its seamless integration with the Node.js ecosystem simplifies dependency management and ensures compatibility with the Node.js runtime.</li> <li>__Mature Ecosystem__: npm has a mature and well-established ecosystem with robust infrastructure and community support. It has been in use for many years and has undergone continuous improvements, resulting in a stable and reliable tool for managing project dependencies.</li> <li>__Comprehensive CLI__: npm provides a comprehensive command-line interface (CLI) with a wide range of commands and options for managing packages, scripts, and configurations. Developers can perform tasks such as installing, updating, publishing, and scripting with ease using npm's intuitive CLI.</li> <li>__Semantic Versioning__: npm follows semantic versioning (SemVer) rules, allowing developers to specify version ranges for dependencies accurately. This ensures compatibility and predictability when updating packages, minimizing the risk of breaking changes in projects.</li> <li>__Custom Scripts__: npm allows developers to define custom scripts in the \"package.json\" file, which can be executed using the npm run command. This feature enables automation of various development tasks such as building, testing, and deployment, streamlining the development workflow.</li> <li>__Integration with npm Registry__: npm seamlessly integrates with the npm registry, a centralized repository where developers can publish and discover packages. This centralized infrastructure fosters collaboration and code sharing within the JavaScript community, contributing to the growth and innovation of the ecosystem.</li> </ol> <p>Overall, npm offers a robust and feature-rich package management solution that addresses the needs of developers building Node.js applications. Its extensive package repository, mature ecosystem, comprehensive CLI, and community support make it a preferred choice for JavaScript developers worldwide.</p> <h4 id=\"disadvantages\">Disadvantages:</h4> <ol> <li>__Performance Issues__: npm can sometimes suffer from performance issues, especially in large-scale projects with many dependencies. Some developers find Yarn and pnpm faster. Slow installation times and high resource consumption may impact developer productivity and build times.</li> <li>__Versioning Complexity__: Managing package versions and dependency conflicts can be challenging with npm, particularly in projects with complex dependency trees. Resolving version conflicts and ensuring compatibility between packages may require manual intervention and careful oversight.</li> <li>__Dependency Bloat__: npm's default behavior of installing packages locally can lead to dependency bloat, where projects accumulate unnecessary dependencies over time. This can increase project size and complexity, potentially impacting performance and maintenance efforts.</li> <li>__Security Concerns__: npm packages are not immune to security vulnerabilities, and relying on third-party code introduces potential risks to projects. While npm provides tools for auditing packages and detecting vulnerabilities, developers must remain vigilant and proactive in addressing security issues.</li> <li>__Reliance on Centralized Registry__: npm's reliance on a centralized registry for package distribution and discovery introduces a single point of failure and potential network bottlenecks. Disruptions or outages in the npm registry can disrupt development workflows and dependency management processes.</li> <li>__Limited Offline Support__: While npm provides some support for offline installations through local caches, its offline capabilities are not as robust as some other package managers like Yarn. Developers working in environments with limited or intermittent internet connectivity may encounter difficulties when relying on npm.</li> </ol> <p>Overall, while npm is a powerful and widely adopted package manager, developers should be aware of its limitations and consider alternative solutions or best practices to mitigate potential challenges in dependency management and project maintenance.</p> <h2 id=\"yarn\">Yarn:</h2> <p>Yarn is a package manager for Node.js, developed by Facebook. It was created to address some of the limitations and performance issues encountered with npm and it focuses on performance, reliability, and *. Let's explore its features:</p> <h4 id=\"advantages\">Advantages:</h4> <ol> <li>__Improved Performance__: Yarn is known for its faster installation times and more efficient dependency resolution compared to npm. It achieves this through parallel package installations and caching mechanisms, reducing the time and resources required for managing dependencies.</li> <li>__Deterministic Dependency Resolution__: Yarn ensures * by generating a lockfile (yarn.lock) that captures the exact versions of dependencies used in a project. This helps prevent dependency conflicts and ensures consistency across different development environments.</li> <li>__Offline Support__: Yarn provides robust support for offline installations, making it suitable for environments with limited or intermittent internet connectivity. It caches packages locally, allowing developers to install dependencies without relying on an active internet connection.</li> <li>__Intuitive CLI__: Yarn offers an intuitive command-line interface (CLI) with clear and concise commands for managing packages and running scripts. Its CLI is designed to be user-friendly and easy to use, streamlining the development workflow.</li> <li>__Improved Error Handling__: Yarn provides detailed error messages and diagnostics, making it easier for developers to troubleshoot and resolve issues related to package installation or dependency management.</li> <li>__Backward Compatibility__: Yarn maintains compatibility with the npm registry and existing npm workflows, allowing developers to transition seamlessly from npm to Yarn without disrupting their projects.</li> </ol> <p>Overall, Yarn is a powerful and efficient package manager for Node.js, offering performance improvements, *, offline support, and an intuitive CLI. It has gained significant adoption within the Node.js community and is widely used in both small and large-scale projects.</p> <h4 id=\"disadvantages\">Disadvantages:</h4> <ol> <li>__Compatibility Issues__: Although Yarn aims for compatibility with npm, there may still be occasional compatibility issues or differences in behavior between the two package managers. This can sometimes lead to unexpected behavior or difficulties when migrating projects between npm and Yarn.</li> <li>__Resource Consumption__: Yarn's caching mechanisms and parallel installation processes can consume significant system resources, especially in *. This may impact the performance of development environments, particularly on systems with limited resources or older hardware.</li> <li>__Community Fragmentation__: While Yarn has gained widespread adoption within the Node.js community, its ecosystem and community support may still be smaller and less extensive than npm's. This can result in fewer third-party plugins, integrations, and community-driven initiatives compared to npm.</li> <li>__Potential for Lockfile Drift__: Yarn generates a lockfile (yarn.lock) to ensure *. However, if developers manually modify dependencies or update packages without updating the lockfile, it can lead to lockfile drift, where the lockfile becomes out of sync with the actual dependencies installed in the project.</li> <li>__Limited Configuration Options__: Yarn's configuration options are more limited compared to npm, which provides more granular control over package installation, registry settings, and other aspects of dependency management. Developers may find themselves lacking certain customization options available in npm.</li> <li>__Maintenance Overhead__: While Yarn offers benefits such as improved performance and dependency resolution, it also introduces additional maintenance overhead in terms of managing the Yarn-specific configuration, lockfile, and dependencies. This can add complexity to project maintenance and version control.</li> </ol> <p>Overall, while Yarn addresses many of the shortcomings of npm and offers significant improvements in performance and reliability, it's essential for developers to consider the trade-offs and potential drawbacks when deciding whether to adopt Yarn for their projects.</p> <h2 id=\"pnpm\">pnpm</h2> <p>pnpm, short for \"Performant npm,\" is a package manager for Node.js applications. Unlike traditional package managers like npm and Yarn, pnpm takes a unique approach to dependency management, emphasizing <strong>efficiency, disk space optimization, and installation speed.</strong></p> <h4 id=\"advantages\">Advantages:</h4> <p>Key features of pnpm include:</p> <ol> <li>__Shared Dependencies__: pnpm utilizes a shared dependency model, where common dependencies across projects are stored in a single location on disk. This approach minimizes disk space usage by avoiding duplicate copies of dependencies, leading to significant savings in storage resources.</li> <li>__Efficient Installation__: By leveraging shared dependencies and efficient caching mechanisms, pnpm offers faster installation times compared to traditional package managers. It can dramatically reduce the time required to install dependencies, particularly in *.</li> <li>__Deterministic Dependency Resolution__: Similar to Yarn, pnpm ensures * by generating a lockfile (pnpm-lock.yaml) that captures the exact versions of dependencies used in a project. This helps prevent dependency conflicts and ensures consistency across different development environments.</li> <li>__Reduced Network Bandwidth__: pnpm optimizes network bandwidth usage by sharing package downloads across projects. When multiple projects require the same dependency, pnpm fetches the package only once and shares it among all projects, reducing the amount of data transferred over the network.</li> <li>__Improved Cache Efficiency__: pnpm's caching mechanisms are designed to be highly efficient, reducing the need to re-download packages and improving installation speeds. It maintains a centralized cache of packages and dependencies, enabling faster installations and minimizing redundant downloads.</li> <li>__Command-Line Interface (CLI)__: pnpm provides an intuitive CLI with commands for installing, updating, and managing packages. Its CLI is designed to be user-friendly and easy to use, with clear and concise syntax for executing common tasks.</li> <li>__Compatibility with npm__: pnpm maintains compatibility with the npm registry and existing npm workflows, making it easy for developers to transition from npm to pnpm without disrupting their projects. It can install packages from the npm registry and works seamlessly with existing npm packages and configurations.</li> </ol> <p>Overall, pnpm offers significant advantages in terms of disk space optimization, installation speed, and network bandwidth usage, making it an attractive choice for developers looking to streamline dependency management in Node.js projects. Its shared dependency model and efficient caching mechanisms make it well-suited for * and resource constraints. </p> <h4 id=\"disadvantages\">Disadvantages:</h4> <ol> <li>__Learning Curve__: Switching from traditional package managers like npm and Yarn to pnpm may require developers to learn new commands, workflows, and concepts specific to pnpm. While pnpm's CLI is intuitive, there is still a learning curve involved, particularly for developers unfamiliar with its shared dependency model and caching mechanisms.</li> <li>__Compatibility Issues__: Although pnpm aims for compatibility with npm and Yarn, there may still be occasional compatibility issues or differences in behavior between the package managers. This can sometimes lead to unexpected behavior or difficulties when migrating projects between npm/Yarn and pnpm.</li> <li>__Resource Consumption__: While pnpm's shared dependency model reduces disk space usage, it may still consume significant system resources, especially in *. Caching dependencies and managing shared packages can require additional memory and processing power, impacting the performance of development environments.</li> <li>__Lockfile Handling__: pnpm generates a lockfile (pnpm-lock.yaml) to ensure *. However, managing the lockfile and ensuring its consistency across different environments can be challenging. Developers must be careful to avoid lockfile drift, where the lockfile becomes out of sync with the actual dependencies installed in the project.</li> <li>__Community Support__: While pnpm has gained adoption within the Node.js community, its ecosystem and community support may still be smaller and less extensive than npm and Yarn. This can result in fewer third-party plugins, integrations, fewer documentation resources and tutorials available, and community-driven initiatives, limiting the available resources and support for pnpm users.</li> </ol> <p>Overall, while pnpm offers compelling advantages in terms of disk space optimization and installation speed, developers should carefully weigh the trade-offs and consider the potential drawbacks when deciding whether to adopt pnpm for their projects.</p> <h2 id=\"structureoftheprojects\">Structure of the projects:</h2> <p>__npm__: When using <code>npm install</code>, the package-lock.json is created, and generates the node_modules folder. You can manually place a .npmrc configuration file at the root level.</p> <p><*pa5cvq/7HWgGvexN3Golj8YiHcjJU/f202bf446f6db2663e9115274edab56b/thumbnail_npm_pm_2024.png\" alt=\"*\"></p> <p>__Yarn__: Similarly, Yarn generates both a yarn.lock file and a node_modules folder. You can also configure your yarn with a .yarnrc file; Yarn also acknowledges .npmrc files.</p> <p><*pa5cvq/2nofhzx1pBZTc7ShqPRvJV/4d46e7ec385e1a93f97c01935b086510/thumbnail_yarn_pm_2024.png\" alt=\"*\"> One problem with the npm and yarn approach, is that packages were copied several times to satisfy multiple dependencies. pnpm solved this issue without flattening the dependency tree. Each package’s dependencies are grouped in a node_modules folder and symlinks are used to group dependencies together, so the directory tree is flat.</p> <p>__pnpm__: In contrast, pnpm diverges and doesn’t create a flattened dependency tree. <br> Upon installing dependencies with <code>pnpm i</code>, a package.json file is generated alongside a node_modules folder. However, the structure of the node_modules directory differs significantly from that of npm and Yarn due to pnpm's content-addressable storage approach.</p> <p><*pa5cvq/7HlrALWWbmUzmt5ypG2vqg/9ab8926f57851558cb4dccda81cdefe6/thumbnail_pnpm_pm_2024.png\" alt=\"*\"></p> <h2 id=\"whichoneshouldyouchoose\">Which one should you choose?</h2> <p>Ultimately, the best package manager for your project depends on your specific requirements, preferences, and willingness to adapt to new workflows. Experimentation and careful consideration of the trade-offs involved will help you make an informed decision that aligns with your project's goals and constraints.</p> <p>According to some advantages and disadvantages previously mentioned, some further research and personal opinion, we can see a comparative chart below, number 1 meaning the lowest score and number 3 the highest score:</p> <p><*pa5cvq/N3jFFPVwoWcYLQZGriZZ1/7e22a304299957d3305f5a42aa204f1a/thumbnail-table-pm-comparison.png\" alt=\"*\"></p> <p>Even though npm and yarn are more popular, pnpm seems to have a promising future. Let’s check some benchmarks of JavaScript Package Managers: </p> <ul> <li>Speed: pnpm is <strong>three times faster</strong> and more efficient than npm, and with both cold and hot cache, pnpm is faster than Yarn.</li> </ul> <p><*pa5cvq/6Gz5oNFLsfin1XDxCpNp25/cead9c624c24e3468830ff8e67340046/thumbnail-benchmarks-js-pm.png\" alt=\"*\"></p> <p>Source: <a href=\"https://pnpm.io/benchmarks?ref=hackernoon.com\" title=\"Benchmarks of JavaScript Package Managers\">Benchmarks of JavaScript Package Managers</a></p> <ul> <li>Security: Pnpm, like yarn, has a special file with the checksum of all the installed packages. This ensures the integrity of all the installed packages before their code is executed. Regarding npm, there have been some security vulnerabilities that have directly affected many projects due to the way npm handles bad packages.</li> <li>Disk space efficiency: pnpm employs a content-addressable file system to store packages and dependencies on disk. This means that identical packages are not duplicated. Even with varying versions of the same package, pnpm intelligently maximizes code reuse. For instance, if version 1 of a package consists of 500 files and version 2 adds just one more file, pnpm will not duplicate the original 500 files for version 2. Instead, it will establish a hard link to the existing 500 files and only write the new file. In contrast, npm would duplicate the original 500 files for version 2. This distinction becomes significant in large monorepo projects where a package is utilized by numerous others, potentially saving substantial disk space when using pnpm.</li> <li>Lock files: Yarn generates a yarn.lock file to ensure that all team members are using the same package versions. This helps prevent \"works on my machine\" issues. Like Yarn, pnpm uses a pnpm-lock.yaml file to ensure consistent dependency versions. npm can present inconsistencies in package-lock.json which can be annoying and present issues for developers.</li> </ul> <h2 id=\"migratingfromnpmyarntopnpm\">Migrating from npm/Yarn to pnpm:</h2> <p>If your projects use npm or yarn, then migrating to pnpm will not be very difficult. Here is a comparison of commands between npm, yarn, and pnpm.</p> <table> <thead> <tr> <th>npm command</th> <th>Yarn command</th> <th>pnpm equivalent</th> </tr> </thead> <tbody> <tr> <td>npm install</td> <td>yarn</*/install\">pnpm install</a></td> </tr> <tr> <td>npm install [pkg]</td> <td>yarn add [pkg]</*/add\">pnpm add [pkg]</a></td> </tr> <tr> <td>npm uninstall [pkg]</td> <td>yarn remove [pkg]</*/remove\">pnpm remove [pkg]</a></td> </tr> <tr> <td>npm update</td> <td>yarn upgrade</*/update\">pnpm update</a></td> </tr> <tr> <td>npm list</td> <td>yarn list</*/list\">pnpm list</a></td> </tr> <tr> <td>npm run [scriptName]</td> <td>yarn [scriptName]</*/run\">pnpm [scriptName]</a></td> </tr> <tr> <td>npx [command]</td> <td><a href=\"https://yarnpkg.com/cli/dlx\">yarn dlx [command]</a></*/dlx\">pnpm dlx [command]</a></td> </tr> <tr> <td><a href=\"https://docs.npmjs.com/cli/v8/commands/npm-exec\">npm exec</a></td> <td><a href=\"https://yarnpkg.com/cli/exec\">yarn exec [commandName]</a></*/exec\">pnpm exec [commandName]</a></td> </tr> <tr> <td><a href=\"https://docs.npmjs.com/cli/v8/commands/npm-init\">npm init [initializer]</a></td> <td>yarn create [initializer]</*/create\">pnpm create [initializer]</a></td> </tr> </tbody> </table> <p>Source: <a href=\"https://refine.dev/blog/pnpm-vs-npm-and-yarn/?ref=hackernoon.com#introduction\" title=\"Why you should prefer using pnpm over npm and yarn?\">Why you should prefer using pnpm over npm and yarn?</a></p> <h2 id=\"realtimemonitoringwithnsolid\">Real Time Monitoring with N|Solid</h2> <p>Which package do you use? Let us know on Twitter <a href=\"https://twitter.com/NodeSource\" title=\"@NodeSource\">@NodeSource</a>! </p> <p>Using <*/\" title=\"N|Solid\">N|Solid</a>, you can get real time insights and keep your apps secure, providing developers the tools to optimize their Node.js applications and enhance efficiency. You can also check the performance of your projects with different package managers. </p> <p>Connect with us on Twitter <a href=\"https://twitter.com/NodeSource\" title=\"@NodeSource\">@NodeSource</a>, <a href=\"https://www.linkedin.com/company/nodesource\" title=\"LinkedIn\">LinkedIn</a>, and to stay updated with the latest from <*/\" title=\"N|Solid\">N|Solid</a>.</p> ]]> </*[ Node.js 2023 Year in Review ]]> </title> <description> <![CDATA[ Explore the major achievements and updates in the Node.js ecosystem in 2023, including new releases, security enhancements, and performance improvements.\" ]]> </*/nodejs-2023-year-in-review</*\">nodejs-2023-year-in-review</guid> <pubDate>Thu, 22 Feb 2024 15:0*t/hspc7zpa5cvq/woV6adNpqGolxPBZZqJdk/d64fe6f34924f9b8d288c46c5c741b6a/nodejsyearinreview.*/woV6adNpqGolxPBZZqJdk/d64fe6f34924f9b8d288c46c5c741b6a/nodejsyearinreview.png\" alt=\"Node.js 2023 Year in Review\"><p>Two months into 2024, I’ve decided to summarize the achievements in the Node.js space from 2023. As always, this list is curated by me, so I may overlook some pull requests due to the vast amount of work completed by Node.js collaborators and areas where I need more context, such as WASI.</p> <p>Node.js is rapidly evolving, and it can be challenging for regular users to stay updated with the latest changes. Even as someone who works on the project, it’s possible to overlook certain commits. Therefore, this article aims to spotlight major changes and discussions occurring within the Node.js landscape in 2023.</p> <p>For reference, <code>2641</code> commits were made to <code>nodejs/node#main</code> in 2023. Although this information might seem more trivial than crucial, I find it interesting to compare historical data. For instance, this is the commit count on <code>main</code> for the past 10 years.</p> <pre><code>Between Jan 1 2023 ~ Jan 1 2024 = 2641 Between Jan 1 2022 ~ Jan 1 2023 = 2629 Between Jan 1 2021 ~ Jan 1 2022 = 2683 Between Jan 1 2020 ~ Jan 1 2021 = 3390 Between Jan 1 2019 ~ Jan 1 2020 = 3953 Between Jan 1 2018 ~ Jan 1 2019 = 4720 Between Jan 1 2017 ~ Jan 1 2018 = 4609 Between Jan 1 2016 ~ Jan 1 2017 = 3081 Between Jan 1 2015 ~ Jan 1 2016 = 2261 Between Jan 1 2014 ~ Jan 1 2015 = 1052 </code></pre> <p><br> <br> 💡 I use a tiny project I created calle*RafaelGSS/nodejs-stats/\" title=\"nodejs-stats\"><code>nodejs-stats</code></a> to retrieve such information.</p> <p><br></p> <p>It’s quite impressive to see that a mature project such as Node.js keeps evolving significantly over the years. Unfortunately, I don’t have historical data, but I strongly suspect Node.js welcomed a significant number of first-time contributors this year. This is possibly due to initiatives like Grace Hopper’s Day and various workshops. For instance, the ‘Your First Node.js Contribution’ workshop was conducted by my team at NodeConfEU 2023. I’m confident other members also consistently assist new contributors to the project — If you are looking forward to giving your first contribution to the Node.js project, feel free to contact me. I’m doing <a href=\"https://www.twitch.tv/rafaelgss\" title=\"live streams\">live streams</a> assisting people through the Node.js codebase.</p> <h2 id=\"nodejsrelease\">Node.js Release</h2> <p>In 2023, <strong>102</strong> releases from different release lines were made (including security releases)</p> <pre><code>$ git log --all --grep=', Version' --pretty=format:\"%cs,%aN,%s\" --since='Jan 1 2023' --before='Jan 1 2024' | wc -l 102 </code></pre> <p>The year started with 4 active release lines:</p> <ol> <li>Node.js 14</li> <li>Node.js 16</li> <li>Node.js 18</li> <li>Node.js 19</li> </ol> <p>Node.js 14, 16 and Node.js 19 are now End-of-Life(EOL) and Node.js 18 is under Maintenance Mode, meaning there are no more regular releases to this version.</p> <p>The year finalized with the following active release lines:</p> <ol> <li>Node.js 18 (Maintenance)</li> <li>Node.js 20 (LTS)</li> <li>Node.js 21 (Current)</li> </ol> <p>Hence, if you aren’t using any of these versions, please, upgrade.</p> <p>During the Node.js Collaborator Summit in Dublin (NodeConfEU), we analyzed the download stats of Node.js binaries and it illustrates our opinion that users don’t update their binaries as fast as they must.</p> <p><*pa5cvq/6h6ClYdZJop9Lvls4BQWMs/c72b41c2c5978420f0287d9d98c9e5f0/download-stats.png\" alt=\"Node.js 2023 Year in Review\"></p> <p>As the graph shows, even an EOL version still receives a significant number of downloads and this is dangerous to Node.js users as they will use a vulnerable version at some point. Hence, one theory that comes to our mind is that our release schedule is too fast. <*js/Release/issues/953\" title=\"A new proposal\">A new proposal</a> is under discussion and still needs to be evaluated by the releasers team, but it suggests reducing the major release to one per year instead of two per year.</p> <p>When examining the graph above, particularly focusing on the y-axis, one might infer that Node.js downloads reached a peak of approximately 60 million on March 23. However, this interpretation is misleading as it does not account for NodeSource distribution statistics, which primarily consist of production binaries and do not include downloads from inactive release lines, such as Node.js 8, 10, 12, and so on. To gain a deeper understanding of Node.js distribution mechanisms, I encourage you to explore the intricacies outlined in the <*/blog/node-by-numbers-2021-2022\" title=\"&quot;Node By Numbers 2021-2022&quot;\">“Node By Numbers 2021~2022“</a> article, as delving into this topic exceeds the scope of this article.</p> <h3 id=\"activeworkonthecanaryinthegoldminecitgm\">Active work on the Canary-In-The-Gold-Mine (CITGM)</h3> <p><a href=\"https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Forgs%2Fnodejs%2Fteams%2Freleasers\" title=\"{gfm-js-extract-6}\"><code>@nodejs/releasers</code></a> play one of the most crucial roles in the Node.js space. They ensure the reliability of the versions you receive on your machine. To achieve this goal, we utilize a comprehensive suite of tests across all supported architectures, and we run specific tests depending on the changes, such as V8. Additionally, for each release, we execute CITGM (Canary-In-The-Gold-Mine), which essentially fetches all modules listed in <code>lookup.json</code> and runs their test suite with the new binary prospect. If any issues arise, we investigate them, and sometimes, we reach out to the module author for guidance.</p> <p>CITGM, however, requires a powerful set of machines to run all tests properly. Unfortunately, we are a bit limited in that regard, leading to some concurrency errors between tests. This is because certain tests need to run in parallel; otherwise, CITGM would take years to finish. Another challenge is ensuring that the modules listed inside <code>lookup.json</code> are up-to-date. Occasionally, a module becomes archived or may never support newer versions of Node.js, or they may simply be unreliable (which is quite common).</p> <p>Therefore, it’s not uncommon to see initiatives like:</p> <ul> <li><*js/citgm/pull/959\" title=\"Declaring bankruptcy of CITGM modules\">Declaring bankruptcy of CITGM modules</a></li> <li><*js/citgm/pull/1036\" title=\"Drop skipped modules\">Drop skipped modules</a></li> </ul> <p>Otherwise, we might find ourselves dealing with an unreliable CITGM, thus leaving us blind to potential breaking changes.</p> <h3 id=\"thenewdirectionofthenodejsproject\">The new direction of the Node.js project</h3> <pre><code>To clarify, I want to emphasize that I am not speaking on behalf of the project; this article represents solely my perspective. </code></pre> <p>Having been a member of the project for quite some time, and <a href=\"ht*/45691\" title=\"since 2022\">since 2022</a>, a member of the Technical Steering Committee (TSC), I’ve observed that the project is now more susceptible to major changes than ever before. As a result — not so related — new dependencies are being integrated into the core, and new built-in modules are being developed. This broadens the scope of Node.js as a platform. However, in my view, this new approach may lead to concerns regarding maintenance and potential attack vectors. On the flip side, it also empowers developers and diminishes the risk of using malicious libraries, despite the performance implications of executing operations on the native side. For your reference, I’ve been closely monitoring the binary size of Node.js across various versions, and it’s evident that the addition of new dependencies and features directly impacts the binary size.</p> <p><*pa5cvq/4AzjSn2vMiiMIwWWAWpv07/0a2ba8dd52d1c7ad25406d9cdb071689/nodejs-linux-binary-size.png\" alt=\"Node.js 2023 Year in Review\"></p> <p>Unless you’re operating within an exceptionally constrained environment, 100MiB shouldn’t raise significant concerns.</p> <h2 id=\"newdependencies\">New Dependencies</h2> <p>Node.js vendor dependencies into its binary:</p> <pre><code>{ node: '21.6.0', acorn: '8.11.3', ada: '2.7.4', ares: '1.20.1', base64: '0.5.1', brotli: '1.1.0', cjs_module_lexer: '1.2.2', cldr: '44.0', icu: '74.1', llhttp: '9.1.3', modules: '120', napi: '9', nghttp2: '1.58.0', nghttp3: '0.7.0', ngtcp2: '0.8.1', openssl: '3.0.12+quic', simdjson: '3.6.3', simdutf: '4.0.8', tz: '2023c', undici: '5.28.2', unicode: '15.1', uv: '1.47.0', uvwasi: '0.0.19', v8: '11.8.172.17-node.19', zlib: '1.3.0.1-motley-40e35a7' } </code></pre> <p>In 2023, 3 new dependencies were released to Node.js:</p> <ol> <li><p><a href=\"https://github.com/ada-url/ada\" title=\"Ada\">Ada</a> - A WHATWG-compliant and fast URL parser written in modern C++” </p></li> <li><p><a href=\"https://github.com/simdutf/simdutf\" title=\"simdutf\">simdutf</a> - Unicode routines (UTF8, UTF16, UTF32) parser </p></li> <li><p><a href=\"https://github.com/simdjson/simdjson\" title=\"simdjson\">simdjson</a> - A library that uses commonly available SIMD instructions and micro parallel algorithms to parse JSON efficiently</p></li> </ol> <p>All these libraries are focused on performance, enabling Node.js to reach new peaks of improvements as you will see in the <a href=\"https://blog.rafaelgss.dev/state-of-nodejs-performance-2023\" title=\"&quot;*4&quot;\">“*4”</a>.</p> <h3 id=\"thecostofopenssl30xoverquic\">The cost of OpenSSL 3.0.x over QUIC</h3> <p>Since version 16, Node.js uses a fork of <code>openssl</code> from <a href=\"https://github.com/quictls/openssl\" title=\"{gfm-js-extract-13}\"><code>quictls team</code></a>. This was required as an initial step to bring QUIC protocol to Node.js. However, OpenSSL version 3.0.x is significantly slower than OpenSSL 3.2.x. There are two points where moving to OpenSSL 3.2.x will be difficult from a Node.js perspective:</p> <ol> <li><p>It doesn’t fully support QUIC — Although Node.js doesn’t ship QUIC support (yet).</p></li> <li><p>OpenSSL 3.2.x isn’t a Long-Term-Support (LTS) line — Having a release line that might contain a vulnerability after its End-of-Life is a no-go for LTS lines in Node.js.</p></li> </ol> <p>If want some context, check <*js/node/issues/51152\" title=\"#51152\">#51152</a>. In terms of performance, you can use my repository <a href=\"https://github.com/RafaelGSS/nodejs-bench-operations\" title=\"{gfm-js-extract-15}\"><code>nodejs-bench-operations</code></a> as a reference for <code>crypto</code> operations:</p> <p>Node.js 16.20.2 - OpenSSL 3.x ops/sec samples <br> crypto.createVerify(‘RSA-SHA256’) 30,337 98 <br> crypto.verify(‘RSA-SHA256’) 29,001 94</p> <p>Node.js 18.18.2 - OpenSSL 1.x ops/sec samples <br> crypto.createVerify(‘RSA-SHA256’) 3,599 86 <br> crypto.verify(‘RSA-SHA256’) 3,638 87</p> <h2 id=\"constantlyperformanceevolution\">Constantly Performance Evolution</h2> <p>As mentioned in the <a href=\"https://blog.rafaelgss.dev/state-of-nodejs-performance-2023\" title=\"&quot;*3&quot;\">“*3”</a>, Node.js continues to evolve steadily in terms of performance. This section will not delve into specific numerical data (which will be provided in detail in the *4), but rather highlight initiatives and PRs that have demonstrated clear advancements in the performance realm.</p> <p>One notable improvement is the upgrade of <code>libuv</code> to version <code>1.45.0</code>. In this release, <code>IO_URING</code> was enabled on Linux, resulting in an 8x throughput increase for file system operations such as <code>read</code>, <code>write</code>, <code>fsync</code>, <code>fdatasync</code>, <code>stat</code>, <code>fstat</code>, and <code>lstat</code>. More details can be found in the corresponding pull request: <a href=\"https://github.com/libuv/libuv/pull/3952\" title=\"libuv/libuv#3952\">libuv/libuv#3952</a>.</p> <p>Additionally, in 2023, we introduced Ada as a new URL parser for Node.js, which is now available in all active release lines (18, 20, and 21). Further information can be found in the pull request: <a href=\"ht*/46410\" title=\"nodejs/node#46410\">nodejs/node#46410</a>.</p> <p>Two important regressions were identified over 2023:</p> <ol> <li>AsyncHooks</li> <li>WebStreams</li> </ol> <p>These features are crucial for certain use cases in Node.js. For example, if you utilize <code>fetch()</code>, you might rely on WebStreams, or if you employ any Application Performance Monitoring (APM) tool, you should be leveraging AsyncHooks via <code>AsyncLocalStorage</code>.</p> <p>An initiative that started in January, documented in issue <*js/node/issues/46265\" title=\"#46265\">#46265</a>, proposes an alternative implementation of <code>AsyncLocalStorage</code> without relying on AsyncHooks, which was identified as a bottleneck at the time. Some related work has been carried out in pull requests <a href=\"ht*/46387\" title=\"#46387\">#46387</a> and <a href=\"ht*/48528\" title=\"#48528\">#48528</a>.</p> <p>WebStreams were identified as a bottleneck in the <code>fetch</code> function in 2022, as highlighted in <*js/undici/issues/1203#issuecomment-1100969210\" title=\"this issue comment\">this issue comment</a>. Since then, we’ve been consistently enhancing its usage in <code>undici</code> through several PRs, such as:</p> <ul> <li><a href=\"ht*/46086\" title=\"nodejs/node#46086\">nodejs/node#46086</a></li> <li><a href=\"ht*/47956\" title=\"nodejs/node#47956\">nodejs/node#47956</a></li> </ul> <p>For those interested in monitoring the performance of Node.js, I highly recommend keeping an eye on the <*js/performance\" title=\"nodejs/performance \">nodejs/performance</a> repository and attending their meetings. Be sure to follow the <code>performance</code> label to stay updated on PRs like <a href=\"ht*/49745\" title=\"nodejs/node#49745\">nodejs/node#49745</a> and <a href=\"ht*/49834\" title=\"nodejs/node#49834\">nodejs/node#49834</a>, which aim to enhance the performance of regular Node.js streams.</p> <h3 id=\"anativebenchmarkmoduletonodejs\">A native benchmark module to Node.js</h3> <p>In 2023, Node.js almost got a built-in benchmark module. <a href=\"ht*/50768\" title=\"I wrote a pull request with a colleague\">I wrote a pull request with a colleague</a> (Vinicius Lourenco) that adds an experimental benchmark module to Node.js: <code>require('node:benchmark')</code></p> <p>While this pull request got significant traction, we didn’t pursue the work for some reasons:</p> <ul> <li>Benchmarks are hard, and micro-benchmarks are even harder. They are hard to evaluate, and hard to prove their accuracy since there are different strategies to measure them — See my <a href=\"https://blog.rafaelgss.dev/preparing-and-evaluating-benchmarks\" title=\"Preparing and Evaluating Benchmarks article\">Preparing and Evaluating Benchmarks article</a> for more context — At the time I had limited bandwidth to work on different areas of Node.js and I couldn’t extend the research on this topic.</li> <li>Some Node.js collaborators shared some concerns and as I said previously, at the time, I didn’t have much bandwidth to elaborate and jump into a deep conversation.</li> </ul> <p>However, it doesn’t mean we gave up! We’ve published the module as <code>bench-node</code> on npmjs — I know, we didn’t find a better name yet. Check it out and give a star ⭐ <br> <a href=\"https://github.com/RafaelGSS/bench-node/\" title=\"https://github.com/RafaelGSS/bench-node/.\">https://github.com/RafaelGSS/bench-node/.</a></p> <h2 id=\"enhancingnodejssecurity\">Enhancing Node.js Security</h2> <p>Security is the area I have spent most of my time in 2023. I had a contract with OpenSSF to work full-time on the development and improvement of the security of Node.js. In this section, I will show briefly all the topics we’ve discussed, features implemented, workflows and so on. It’s really important to say a big thank you to everyone on the Node.js Security Team for helping out with past and current projects. And a shutout to the Node.js Triage team for helping me go through all the HackerOne reports. A special thank you goes to <a href=\"https://github.com/tniessen\" title=\"Tobias Nießen\">Tobias Nießen</a> for working so hard to find and fix problems in the core of Node.js.</p> <h3 id=\"thenodejspermissionmodel\">The Node.js Permission Model</h3> <p>Let’s start with probably the major security achievement of 2023 in my — completely biased — opinion. <a href=\"https://nodejs.org/api/permissions.html#permission-model\" title=\"The Node.js Permission Model\">The Node.js Permission Model</a>. This initiative started a long time ago with Anna Henningsen and James Snell, but it wasn’t ready yet and <a href=\"ht*/44004\" title=\"I’ve re-implemented it in 2022/2023\">I’ve re-implemented it in 2022/2023</a>. If want to understand the intrinsic behind this feature, I gave a talk at NodeConf EU about it: <a href=\"https://www.youtube.com/watch?v=9ntgUiQocTU\" title=\"The Journey of the Node.js Permission Model\">The Journey of the Node.js Permission Model</a>.</p> <p>Technically, this <em>experimental</em> feature allows you to restrict access to environment resources such as:</p> <ul> <li>File system (more specifically, <code>fs</code> module) - read/write</li> <li>Inspector protocol</li> <li>Worker threads</li> <li>Child process and</li> <li>Native add-ons</li> </ul> <p>The usage is quite simple, start the Node.js process with <code>--experimental-permission</code> and pass the <code>--allow-*</code> flags. For example, I want to give read-only access to the entry point of my application</p> <pre><code>$ node --experimental-permission --allow-fs-read=./index.js index.js </code></pre> <p>Hence, if you attempt to read/write from other paths it should throw an error:</p> <pre><code>// index.js const fs = require('fs') const data = fs.readFileSync('/etc/passwd') console.log(data.toString()) node:fs:581 return binding.open( ^ Error: Access to this API has been restricted </code></pre> <p>at Object.openSync (node:fs:581:18) <br> at Object.readFileSync (node:fs:460:35) <br> at Object.<anonymous> (/home/rafaelgss/index.js:3:17) <br> at Module._compile (*:1378:14) <br> at Module._extensions..js (*:1437:10) <br> at Module.*oader:1212:32) <br> at Module._*oader:1028:12) <br> at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12) <br> at node:internal/main/run_main_module:28:49 { <br> code: 'ERR_ACCESS_DENIED', permission: 'FileSystemRead', resource: '/etc/passwd' }</anonymous></p> <pre><code>Node.js v21.6.1 </code></pre> <p>Furthermore can be found in the <a href=\"https://nodejs.org/api/permissions.html#process-based-permissions\" title=\"official documentation\">official documentation</a>.</p> <h3 id=\"handlingmoresecurityreleases\">Handling more Security Releases</h3> <p>In 2023, we’ve released more security releases, mostly due to the fact we are more proactive in terms of third-party CVEs. In 2022, several initiatives were created by the <*js/security-wg\" title=\"Security Team\">Security Team</a> as described by <a href=\"https://openjsf.org/blog/node-js-security-progress-report-looking-forward-to-2023\" title=\"Alpha-Omega Node.js Report 2022\">Alpha-Omega Node.js Report 2022</a> and the result of these initiatives are shown in 2023. Initiatives such as automation of updates, and automation of Node.js release impacts our team’s time-to-action.</p> <p>With the recent addition of the Permission Model, we have noticed people also discovered another experimental security feature that has existed in Node.js since version <a href=\"ht*/25687\" title=\"11.8.0\">11.8.0</a>. The policy mechanism. This feature fits in what we call: module-based permission and we have fixed several vulnerabilities in this feature over 2023.</p> <ul> <li><a href=\"https://nodejs.org/en/blog/vulnerability/february-2024-security-releases\" title=\"February 2024 Security Release\">February 2024 Security Release</a></li> <li><a href=\"https://nodejs.org/en/blog/vulnerability/october-2023-security-releases\" title=\"October 2023 Security Release\">October 2023 Security Release</a></li> <li><a href=\"https://nodejs.org/en/blog/vulnerability/august-2023-security-releases\" title=\"August 2023 Security Release\">August 2023 Security Release</a></li> <li><a href=\"https://nodejs.org/en/blog/vulnerability/june-2023-security-releases\" title=\"June 2023 Security Release\">June 2023 Security Release</a></li> </ul> <p>Still, on the reports side, some clarifications were made in our <*js/node/blob/main/SECURITY.md#the-nodejs-threat-model\" title=\"Threat Model\">Threat Model</a>. Experimental features such as the <em>Permission Model</em> and <em>Policy</em> can attach severity at the same level as any stable feature. Therefore, when reviewing a Node.js Security Release, check if the vulnerability affects you. Very often we are patching a ‘High’ vulnerability that affects only users of that feature.</p> <h2 id=\"websiteupdate\">Website Update</h2> <p>In 2023, there was talk about giving the Node.js website a fresh look, as discussed <*js/nodejs.org/discussions/5131\" title=\"here\">here</a>. We talked about it a few times in TSC meetings and also shared the idea at Node.js Collab Summits. It’s a big job that involves many steps, and I want to give a big shout-out to the whole <a href=\"https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Forgs%2Fnodejs%2Fteams%2Fnodejs-website\" title=\"@nodejs/website\"><code>@nodejs/website</code></a> for their hard work on this. See below:</p> <p><*pa5cvq/2crQ5L4EdF4WvO4DDJAObf/cf867a90704f07644ee57465e557d953/website-1.png\" alt=\"Node.js 2023 Year in Review\"></p> <p><*pa5cvq/5whCkYeOEljMeKOTiwb20U/9043e403d7c91699f4b6c8b87f08338c/website-2.png\" alt=\"Node.js 2023 Year in Review\"></p> <p>Upcoming Download page:</p> <p><*pa5cvq/3bxljua8mrD60LhPGMTBXF/afbd006c33e53fcaae282d9e20bb4ece/website-3.png\" alt=\"Node.js 2023 Year in Review\"></p> <p>Draft PR: <*js/nodejs.org/pull/6353\" title=\"nodejs/nodejs.org#6353\">nodejs/nodejs.org#6353</a></p> <h3 id=\"features\">Features</h3> <p>Several features were released in 2023. It’s quite difficult to iterate and elaborate on each one of them in a single article. Therefore, this article will list some important features that have arrived and feel free to dig into it more!</p> <ul> <li>Single Executable Apps (<em>experimental</em>) - This feature has landed on Node.js 19 but got more eyes after <a href=\"https://nodejs.org/en/blog/announcements/v20-release-announce#preparing-single-executable-apps-now-requires-injecting-a-blob\" title=\"Node.js 20.0.0 release\">Node.js 20.0.0 release</a>. This feature allows the distribution of a Node.js application conveniently to a system that does not have Node.js installed. It’s important to mention, that we are still developing it, so it’s also an experimental feature that I highly suggest you try out!</li> <li>Built-in .env support (<em>experimental</em>) - <a href=\"https://nodejs.org/en/blog/release/v20.6.0#built-in-env-file-support\" title=\"Released with Node.js 20.6.0\">Released with Node.js 20.6.0</a>, this feature aims to provide an official mechanism to read environment variables from a configuration file. It was a common approach to rely on the <code>dotenv</code> package or similar. After this version, you can use it directly on Node.js without the need to install a new package for that. Furthermore can be found in the <a href=\"https://nodejs.org/api/cli.html#--env-fileconfig\" title=\"—env-file docs\">—env-file docs</a>.</li> <li>WebSocket Client (<em>experimental</em>) - <a href=\"https://nodejs.org/en/blog/announcements/v21-release-announce#built-in-websocket-client\" title=\"The Node.js 21.0.0 release\">The Node.js 21.0.0 release</a> included another experimental feature. A built-in WebSocket Client (behind a flag) arises with this release. This is enabled through the flag: <code>--experimental-websocket</code> and follows the <a href=\"https://websockets.spec.whatwg.org/\" title=\"WHATWG WebSocket Spec\">WHATWG WebSocket Spec</a>.</li> <li>Test runner (<em>stable</em>) - Although this feature wasn’t released in 2023, in the last year several features were included in this API. <a href=\"ht*/46983\" title=\"Including marking this module as stable\">Including marking this module as <em>stable</em></a>. <ul><li>Support to function mocking was added in <a href=\"ht*/45326\" title=\"#45326\">#45326</a>.</li> <li>Support for time (MockTimers API) mocking was added in <a href=\"ht*/47775\" title=\"#47775\">#47775</a>.</li> <li>Test runner reports in <a href=\"ht*/45712\" title=\"#45712\">#45712</a>.</li> <li>Support to shards in <a href=\"ht*/48639\" title=\"#48639\">#48639</a>.</li> <li>And more! Check the API documentation to discover this feature capability.</li></ul></li> <li>In the diagnostics field, some important PRs were added to the core: <ul><li>Support to GC Profile (<a href=\"ht*/46255\" title=\"#46255\">#46255</a>). With this PR you can use the <code>v8.GCProfiler</code> to retrieve metrics of the Garbage Collector (GC). This was available only through <code>perf_hooks</code>, this API provides a direct way to retrieve this information.</li> <li>New Tracing Channel API through <code>dianostics_channel</code> (<a href=\"ht*/44943\" title=\"#44943\">#44943</a>) - It provides a new API to trace operations (sync/promises) through a collection of channels to express a single traceable action. This is a long-term initiative that aims to provide necessary observability to Node.js applications without sacrificing performance and reliability by monkey-patching internals.</li> <li>Support to <a href=\"https://v8.dev/blog/maglev\" title=\"V8 Maglev Compiler\">V8 Maglev Compiler</a> (Reference: <*js/node/issues/50690\" title=\"#50690\">#50690</a>) - V8 released a new compiler called Maglev between 2022 and 2023. This was first supported in Node.js through a build flag (<code>—v8-enable-maglev</code>) in <a href=\"ht*/50692\" title=\"#50692\">#50692</a>, then we enabled it by default on January 24 (<*js/node/issues/51350\" title=\"#51350\">#51350</a>). However, it’s a <em>semver-major</em> PR, which implies you only will receive this PR that enables it by default in Node.js 22 - Scheduled for 2024-04-23.</li></ul></li> <li>Some important updates were made to HTTP and WHATWG Spec : <ul><li>We have moved <code>fetch</code> stability to: ‘stable’.</li> <li>We have enabled the <code>autoSelectFamily</code> by default and it caused some systems to break (<em>semver-major</em>). Reference: <a href=\"ht*/46790\" title=\"ht*/46790\">ht*/46790</a></li> <li><code>Duplex.from()</code> now supports WebStreams. See: <a href=\"ht*/46190\" title=\"ht*/46190\">ht*/46190</a></li> <li><code>finished()</code> was implemented in Readable and Writable Streams. See: <a href=\"ht*/46205\" title=\"ht*/46205\">ht*/46205</a></li> <li>In 2022, <*js/undici/issues/1203#issuecomment-1100969210\" title=\"after a Performance analysis on why fetch is slow\">after a Performance analysis on why <code>fetch</code> is slow</a>, we have identified WebStreams as one of the major bottlenecks of this HTTP Client. In 2023, several updates were made to make WebStreams more efficient. Including the re-usage of state errors, which improved the performance of fetch by 23% (in a specific benchmark). See <a href=\"ht*/46086\" title=\"ht*/46086\">ht*/46086</a></li></ul></li> </ul> ]]> </*[ Join our Partner Program! ]]> </title> <description> <![CDATA[ Join the NodeSource Partner Program for Systems Integrators and Agencies. Enjoy benefits like revenue sharing, training, and support. Apply now! ]]> </*/join-partner-program</*\">join-partner-program</guid> <pubDate>Mon, 18 Dec 2023 22:0*t/hspc7zpa5cvq/5KHP1eyeuJhYkyNgdb2FUV/055157d1f47de0cb2aa307669ee70a35/partnerprogram.*/5KHP1eyeuJhYkyNgdb2FUV/055157d1f47de0cb2aa307669ee70a35/partnerprogram.png\" alt=\"Join our Partner Program!\"><p>Are you a Systems Integrator, Consulting Company, or Agency building Node.js based solutions to your clients? If you are then our new <em>NodeSource Approved Partner Program</em> may be right for you.</p> <p>This program is specifically designed to help companies like yours win more deals, earn revenue from sales of <a href=\"https://no*odeSource N|Solid Pro\">NodeSource N|Solid Pro</a>, and build better solutions for your clients.</p> <p>The program offers the following benefits for members:</p> <ul> <li>Revenue share from sold N|Solid licenses</li> <li>Pre-sales support to help you close deals</li> <li>Sales training on N|Solid and other NodeSource products</li> <li>Access to Technical training programs to enhance your teams skills with Node.js and Javascript</li> <li>Account management and technical support through Slack/Teams</li> <li>Early access to N|Solid product updates and roadmap insights</li> <li>Co-marketing opportunities</li> <li>Listing in the NodeSource Partner finder</li> </ul> <p>To learn more and apply please contact our partnerships team at napp@nodesource.com</p> ]]> </*[ Innovating for Performance: How our Infra Team Powers 100+ Million Downloads A Year (While Keeping our SaaS Reliable and Secure) ]]> </title> <description> <![CDATA[ Explore NodeSource's Infra Team: EKS migration, GitOps adoption, 70% faster deployments, 80% cost savings, reinforcing our Node.js excellence legacy. ]]> </*/innovating-for-performance</*\">innovating-for-performance</guid> <pubDate>Thu, 07 Dec 2023 15:0*t/hspc7zpa5cvq/1qlGTCKnp9MkLotNZAMRzM/7bb65716235f354266a5efc72c0edc5c/HP_Infra__1_.*/1qlGTCKnp9MkLotNZAMRzM/7bb65716235f354266a5efc72c0edc5c/HP_Infra__1_.png\" alt=\"Innovating for Performance: How our Infra Team Powers 100+ Million Downloads A Year (While Keeping our SaaS Reliable and Secure)\"><p>We just shared big news about the open-sourcing of our Node.js Runtime and the release of our AI Copilot for Node, both requiring a big role from our infrastructure (Infra) team. They are the team behind the scenes, dedicated to delivering top performance, and have been instrumental in maintaining our reputation for fast, stable, and secure delivery of our SaaS product and Binary Distributions–which generate over 100 million annual downloads a year. </p> <p>The team is always looking for ways to innovate our infra to meet the growing demand and efficiency of our services, and as a part of the product releases, made some key updates to our platform. We wanted to share so others could gain value in their efforts as well as celebrate this critical group for us. Next time you talk to your infra team, give them some love, they do so much!</p> <h2 id=\"infrastructureenhancementsmovingforwardwitheksandgitops\">Infrastructure Enhancements: Moving Forward with EKS and GitOps</h2> <p>Our Infra team has recently completed significant updates to further improve our services:</p> <p><strong>1. Migration from ECS to EKS:</strong> To streamline our operations, we have transitioned from AWS Elastic Container Service (ECS) to <a href=\"https://aws.amazon.com/eks/\" title=\"Elastic Kubernetes Service (EKS) \">Elastic Kubernetes Service (EKS)</a>. This move simplifies our operational framework by unifying it on a single platform (EKS), significantly reducing the need to manage and monitor multiple platforms. This change also enhanced our security. In Kubernetes, we now manage our security with policies and roles and the automated Kubernetes control plane security provides the services that make Kubernetes work.</p> <p><strong>2. Pipeline Enhancements:</strong> Our deployment processes have been upgraded for efficiency and reliability. The integration of GitOps an*features/actions\" title=\"GitHub Actions\">GitHub Actions</a> play a pivotal role in these improvements: Single Source of Truth: Both infrastructure and application configurations now have a centralized, standardized management system. This approach ensures consistency and reliability in our deployment processes. <br> Enhanced Collaboration and Automation: The adoption of GitOps allows for smoother collaboration and automation, making it easier to deploy changes rapidly and efficiently. <br> Declarative Configuration: Our configuration is designed to be easily readable and understandable, facilitating quick and accurate deployments.</p> <p><*pa5cvq/5sOqbN7J5EanDh1GWQ0cX6/5b07d8e111c10e0f018b6fae0bacc2f9/nsolidruntimeyaml.png\" alt=\"Innovating for Performance: How our Infra Team Powers 100+ Million Downloads A Year (While Keeping our SaaS Reliable and Secure)\" title></p> <p><strong>3. Faster Deployment Times:</strong> One of our key achievements has been a reduction in deployment times of almost <strong>70%</strong>. This efficiency gain translates to quicker availability of new features and updates for our customers, enhancing their overall experience.</p> <p><strong>4. Reduced Cost:</strong> In addition to all of the above, we also reduced the costs for our deployments by <strong>80%!!!</strong></p> <h2 id=\"ourcommitmenttotimelyupdatesandecosystemsupport\">Our Commitment to Timely Updates and Ecosystem Support</h2> <p>At NodeSource, we are proud to be a leading distributor of the open source binaries for DEB and RHEL and for setting the standard for release speed. Millions of websites, apps and more count on our binaries because we deliver them rapidly. We release security updates within 24 hours and Node.js feature builds inside of 48 hours. This rapid response time supports the evolving needs of the Node.js ecosystem and demonstrates our commitment to providing the latest and most secure features to our customers. Check out our <*source/distributions\" title=\"GitHub Distributions\">GitHub Distributions</a> for more.</p> <h2 id=\"conclusionacontinuedlegacyofinnovationandexcellence\">Conclusion: A Continued Legacy of Innovation and Excellence</h2> <p>At NodeSource, the Infra team's ongoing innovations ensure that we remain at the forefront of performance, stability, security, and availability. We are proud of our efforts to support the Node.js ecosystem, as well as organizations that rely on Node, by providing the best tooling, service, and support.</p> ]]> </*[ 3 Takeaways from Web Summit 2023 ]]> </title> <description> <![CDATA[ Dive into Web Summit 2023 with NodeSource-uncover AI's impact, global collaboration, transformative innovations, and anticipate exciting prospects for 2024. ]]> </*/takeaways-web-summit-2023</*\">takeaways-web-summit-2023</guid> <pubDate>Thu, 30 Nov 2023 15:3*t/hspc7zpa5cvq/7sgYHxWw316kZ3MU2u2vTQ/4140b5d0cccb2a5d8859fc51eef46fbe/websummitrecap.*/7sgYHxWw316kZ3MU2u2vTQ/4140b5d0cccb2a5d8859fc51eef46fbe/websummitrecap.png\" alt=\"3 Takeaways from Web Summit 2023\"><p>Along with approximately 70,000 other souls from around the globe, the NodeSource team attended Web Summit 2023 earlier this month. Famous for being the largest European tech event (or even the world), Web Summit was full of riveting AI conversations, more than 2,600 startups, and plenty of tasty food trucks and, of course, amazing local cuisine.</p> <p>On the heels of this successful event, we’d like to share our team’s biggest event takeaways as we close this year on a strong note and get ready for what 2024 has in store. </p> <h2 id=\"1everyonehasauniquetakeonusingai\">#1 Everyone has a unique take on using AI.</h2> <p>From session topics to conversations with our peers, AI was all the buzz at the event and we were definitely not the only ones leaning into the AI movement. Startups across all industries are injecting AI into their products and services, and many are at different points in their adoption of the technology. While there are many who are only an inch deep into AI, some are using it in more advanced and compelling ways. </p> <p>For example, <a href=\"https://www.linkedin.com/in/rsemadeni/overlay/about-this-profile/\" title=\"Riccardo Semadeni\">Riccardo Semadeni</a>, MediRapp AG’s CEO, is transforming ultrasound diagnostics and improving global patient outcomes by automating everything from data collection to diagnosis to reporting. With AI, <a href=\"https://medirapp.ai/\" title=\"MediRapp\">MediRapp</a> is making the entire process faster, more accurate, and more effective while significantly elevating patient care. This is a great showcase of how AI can process nearly unlimited amounts of data and provide analysis that significantly increases the quality of outputs and helps make better decisions.</p> <p>On the other hand, another company, <a href=\"https://hiresmart.ai/\" title=\"Harry\">Harry</a>, is using AI in a completely different way. <a href=\"https://www.linkedin.com/in/simoalamii/overlay/about-this-profile/\" title=\"Simo Alami\">Simo Alami</a> explained how they are creating AI powered resources for companies. Do you need a content writer? SEO specialist? PR manager? Other marketing talent? Harry will create a customized AI resource for your organization. This is a very interesting use of generative AI to create meaningful value for small and even large organizations by augmenting teams with AI powered by data.</p> <p>These two examples showcase how innovative leaders are identifying new ways to use AI advancements to transform their industries.</p> <h2 id=\"2collaborationpavesthewayforcontinuedtransformation\">#2 Collaboration paves the way for continued transformation.</h2> <p>Our team traveled from all over the world to attend Web Summit—Seoul, Madrid, Sao Paulo, Utah, Seattle, Medellin, Bogata, Vancouver, and Berlin. With this in-person time together, we dove deep into ways we could continue to elevate our offering and customer experience. We discussed ways to evolve our recently open-sourced N|Solid Runtime and advance our AI powered <*/blog/nsolid-copilot-release\" title=\"N|Solid CoPilot\">Node.js Copilot</a>, which we released on the first day of Web Summit. This time allowed us to gather essential insights from our community who shared the common consensus that NodeSource’s ability to open-source our runtime would be transformative for development teams. </p> <p>Having dedicated time to come together as a team to bond, share, and test new ideas is critical to our success and we look forward to putting these plans into motion.</p> <h2 id=\"3ourindustryisfullofstartupfoundersdedicatedtomakinganimpact\">#3 Our industry is full of startup founders dedicated to making an impact.</h2> <p>On the event’s opening day, NodeSource was one of 300 startups selected for a special event, “The Gathering.” During the day, we participated in group sessions discussing a range of topics from leadership to raising capital to AI. While these discussions were full of great insights, what was even more notable was the ability to connect with fellow founders looking to make an impact.</p> <p>Web Summit was full of lively conversation about taking our industry to the next level. We chatted with startup entrepreneurs, learned from headliners with unique stories, and shared exciting updates with investors, press, and customers. We thoroughly enjoyed connecting with founders and enterprise leaders whose digital products rely on Node.js and tech builders that leverage and build with Node.</p> <p>Overall, NodeSource had a wonderful time at Web Summit and even had the opportunity to visit some local sites, like visiting CasCais by way of a winding trek along the coast and then up into the hills to the westernmost point of all of Europe at Cabo Da Roca. Heading into the new year, we can’t wait to attend Web Summit 2024!</p> ]]> </*[ * ]]> </title> <description> <![CDATA[ Explore JSConf Colombia's dynamic 10th anniversary, supported by NodeSource. Discover insights, innovations, and the vibrant Colombian tech community. ]]> </*/nodesource-jsconf-colombia-tenth-anniversary</*\">nodesource-jsconf-colombia-tenth-anniversary</guid> <pubDate>Thu, 30 Nov 2023 09:0*t/hspc7zpa5cvq/5GbZYrF5f8ZF61eVEJZcB6/53c0070dcc74fa5d3df6b05bf0486f7c/JSConfJuan.*/5GbZYrF5f8ZF61eVEJZcB6/53c0070dcc74fa5d3df6b05bf0486f7c/JSConfJuan.png\" alt=\"*\"><p>Over a thousand developers gathered together two weeks ago to engage in all things JavaScript at the sold-out JSConf Colombia (<a href=\"https://www.jsconf.co/\">https://www.jsconf.co/</a>) while celebrating its 10th year in Medellin. Our NodeSource team members (current and past) played impactful roles in leading, planning, and speaking to support the community event. We are incredibly proud of our Colombian team members, who are a massive part of creating our best-in-class <a */runtime\" title=\"OSS N|Solid Runtime\">OSS N|Solid Runtime</a> and premium platform <a href=\"https://no*|Solid Pro\">N|Solid Pro</a>.</p> <p><*pa5cvq/1N20ufcIho7WJecqSZp9Cg/259de386123126b8b4fa44284d28ab1a/jsconforganizers.png\" alt=\"*\"></p> <p>Adrian Estrada, our VP of Engineering and OpenJS Foundation Board Member, has been a key leader for years in supporting Colombia's Node.js and JS community. His great passion for technology and enabling people to develop and grow makes him a fantastic leader for our global engineering team and community engagement. Alongside Adrian, Julian Duque, a NodeSource alumni, has also been instrumental in the Colombian JavaScript community. His leadership and contributions have significantly shaped the region's JavaScript development landscape. Julian's efforts, combined with Adrian's dedication, underscore the deep involvement and influence NodeSource has in nurturing and advancing the tech community in Colombia.</p> <p>This event has had an incredible decade-long run, with a commitment to breaking down barriers, promoting accessibility, and creating a space that champions diversity. As the last in the series, the community was committed to making this final event one to remember.</p> <p><*pa5cvq/6MVzepN5BStQDCt7Vh2ZF8/62f232f0166cd083db7db1939fb7c087/jsconfwelcome.jpg\" alt=\"*\"></p> <p>The event opened to local musicians on stage, setting the tone for a joyous and creative experience. Talks at the event showcased the diversity of the community, including topics like \"Making Art with JavaScript and Garbage,\" \"Unlock the Power of JavaScript Generators,\" \"IDX, WebIDE's and the Future of JavaScript Debugging,\" and the AI-themed \"Chatting with the Canvas; How to Assemble Art from AI Image Prompts.\" </p> <p><*pa5cvq/1BTRJcyq0BZ01qt1yhYpB2/b2ad8e6e428815afd0ae10b5a0d11c3f/jsconfnsolid.jpg\" alt=\"*\"></p> <p>Jessica Felix highlighted N|Solid, our product, emphasizing its significance in modern Node.js development and performance analysis. This array of topics underlined JavaScript's dynamic and multifaceted nature, catering to a wide range of interests and expertise within the community.</p> <p><*pa5cvq/4djv6vPWXxh7CQi9LjKMcn/04893e2356b72b40c9c9cfed67bd5390/jsconferickwendel.jpg\" alt=\"*\"></p> <p>NodeSource Alumni and JS Rockstar Erick Wendel shared his knowledge about \"How to consume gigabytes of data in JavaScript without slowing down applications.\" </p> <p><*pa5cvq/5E5BiY4jBTW05fVr4BrZgP/d87a6455ff0397109294de891c0b31fa/jsconfjuanarbol.jpg\" alt=\"*\"></p> <p>And one of our current team members, the talented Juan José Arboleda, challenged the attendees that \"JavaScript can be as fast as C++.\"</p> <p><*pa5cvq/1Knk0JVD1uItuD9Z1ZJNeZ/ed7d97a701c81985068413ea91e716b3/jsconfstaff.png\" alt=\"*\"></p> <p>Colombia has long been a crucial part of NodeSource, and the talent and energy from the region have produced many great team members. Like Maria Fernanda Serna and NodeSource Alumni Liz Parody, who helped organize this year's event, we have enjoyed the spirit and talents of this region. Colombia has also been a place where we give back. From these community events to where we planted trees for every customer in our NodeForest campaign, Colombia is ¡Qué nota de lugar! (a fantastic place!). </p> <p>In keeping with this spirit of community and innovation, a new event is being born to replace JSConf Colombia. It will be announced soon and is set to happen in October 2024. This upcoming event, which includes some of the organizers of JSConf Colombia, will continue to foster the region's vibrant tech community. NodeSource will also continue to support this initiative, highlighting its ongoing commitment to the Colombian tech scene.</p> ]]> </*[ Introducing N|Solid Copilot: Your AI-Powered Node.js Navigator ]]> </title> <description> <![CDATA[ Elevate your Node.js development with N|Solid Copilot—an AI assistant delivering real-time insights, security, and optimization tips. ]]> </*/nsolid-copilot-release</*\">nsolid-copilot-release</guid> <pubDate>Wed, 15 Nov 2023 15:3*t/hspc7zpa5cvq/5BfwMoRIPnaLdWoXTpEkOD/326e27498c44d4af0e7e42bd4af6be7a/NSolid_Copilot_Release.*/5BfwMoRIPnaLdWoXTpEkOD/326e27498c44d4af0e7e42bd4af6be7a/NSolid_Copilot_Releas*d Copilot: Your AI-Powered Node.js Navigator\"><p>We are thrilled to announce the latest addition to N|Solid Pro - the N|Solid Copilot, a groundbreaking AI-powered assistant designed to revolutionize your Node.js development experience. This innovative tool is a leap forward in Node.js application observability and security, it’s like having a Node expert on-call. </p> <p><*pa5cvq/1EWTlImcOWOsUFa0GuGxnQ/8a1cd9dd0689a87a9f7851d25508fcc7/report.png\" alt=\"Introducing N|Solid Copilot: Your AI-Powered Node.js Navigator\" title>View of N|Solid Pro Console with the Copilot drawer open allowing a user to interact with the AI Assistant. </p> <h2 id=\"whynsolidcopilot\">Why N|Solid Copilot?</h2> <p>N|Solid Copilot is developed with one goal in mind: to make your life as a Node.js developer or DevOps engineer easier, more efficient, and more secure. It's like having a Node.js expert by your side, 24/7, offering real-time insights into observability alerts, along with actionable advice tailored to your unique application needs.</p> <p>Key Features of N|Solid Copilot</p> <ul> <li>Real-time analysis and insights: Identify and resolve performance bottlenecks, memory leaks, and other critical issues. Analyze metrics like CPU usage, event loop utilization, and more.</li> <li>Anomaly detection and remediation: Utilizing the platform and NodeSource’s ML algorithms, the Copilot can detect anomalous behavior in both application performance and security, as well as identify solutions.</li> <li>Security vulnerability identification and resolution: N|Solid Pro is continuously scanning for security vulnerabilities within the application code and 3rd party dependencies. Users can ask our Copilot about recommendations and solutions.</li> <li>Code optimization suggestions: Given its training in Node.js, the AI can or will offer suggestions to optimize code for better performance and efficiency. This can include advice on asynchronous programming patterns, memory management, or the use of specific Node.js features.</li> <li>Interactive querying: Users can interact with the platform in a conversational manner to query specific application metrics or request insights on performance and security aspects. These queries can be general or specific to the data generated in production.</li> <li>Knowledge sharing: Users can gain knowledge about how to use N|Solid and implement Node.js best practices, creating a better model for users to get up to speed quickly on the platform.</li> </ul> <p><*pa5cvq/7E9kDwdrkVwJClUX11VuUW/ab12c734a4f0b8a8bef888a72b520638/security.png\" alt=\"Introducing N|Solid Copilot: Your AI-Powered Node.js Navigator\" title>Using N|Solid Copilot to triage security issues through predefined prompts or user questions. </p> <h2 id=\"experiencethefutureofnodejsdevelopmentpoweredbyai\">Experience the Future of Node.js Development Powered by AI</h2> <p>N|Solid Copilot isn't just a tool; it's your partner in developing and maintaining great software. Whether you're debugging a tricky issue, seeking performance improvements, or ensuring your application’s security, N|Solid Copilot is there to guide you every step of the way.</p> <h2 id=\"howtogetstarted\">How to Get Started?</h2> <ol> <li>Sign Up: Simply sign up for a free SaaS account on our <*/\" title=\"NodeSource\">website</a>.</li> <li>Integrate: Seamlessly integrate N|Solid Copilot with your existing Node.js applications.</li> <li>Navigate: Let N|Solid Copilot guide your development journey with unparalleled insights and assistance.</li> </ol> <p>We believe N|Solid Copilot will not just change how you work with Node.js; it will transform it. Sign up today and be part of this exciting journey!</p> <p>Connect with us on Twitter <a href=\"https://twitter.com/NodeSource\" title=\"Twitter NodeSource\">@NodeSource</a>, <a href=\"https://www.linkedin.com/company/nodesource/\" title=\"LinkedIn\">LinkedIn</a>, and to stay updated with the latest from N|Solid.</p> <hr> ]]> </*[ N|Solid OSS Release ]]> </title> <description> <![CDATA[ Explore N|Solid, an innovative Node.js runtime, now open source from NodeSource, enhancing production deployments and observability for enterprise needs. ]]> </*/nsolid-oss-release</*\">nsolid-oss-release</guid> <pubDate>Tue, 31 Oct 2023 15:0*t/hspc7zpa5cvq/2qgUMLkH8JohX6nsuF75P5/fca5366b0daf8f61f2c18c9d98f85c66/nsolidossrelease.*[ <h2 id=\"originofnsolid\">Origin of N|Solid</h2> <*t/hspc7zpa5cvq/2qgUMLkH8JohX6nsuF75P5/fca5366b0daf8f61f2c18c9d98f85c66/nsolidossrelease.png\" alt=\"N|Solid OSS Release\"><p>In November of 2014, when NodeSource was still a small consulting group, my teammates Dan Shaw, Rod Vagg, and I were having dinner after a customer engagement, discussing how to bring Node.js production deployments to the same level of polish and tooling capability of the other runtimes our customers were already employing. The power and flexibility of Node.js helped it take off like a rocket, but the tooling to make sure that it was behaving properly had (and has) been a lot slower keeping up, or has used jury-rigged tooling designed for completely different runtime paradigms–effectively trying to shove a hexagonal peg into a square hole. There was a general lack of quality information, guidance, or practices around putting Node.js into production at all. </p> <p>Achieving this sort of parity and filling these holes in the community required solving simultaneous problems: fitting Node.js into modern production infrastructures, having reliable deployments and meaningful success metrics for expanding and internally evangelizing Node.js adoption, and even sometimes simply to just have any idea of what is going on in these Node.js production systems at all.</p> <p>Between our existing expertise with distributing Node.js builds and internal Node.js expertise itself we realized that if anyone was going to provide something like this for the Node.js Enterprise community, it would have to be us. </p> <p>We have always believed and seen firsthand that there is a giant number of teams and organizations that could benefit from an augmented set of tooling. Over the years, many of the people working on N|Solid were also core team members to the Node.js project, keeping an eye on industry needs often being deferred by the project. Foremost of these people is Trevor Norris, who has been our expert with his hands deepest in the V8 and Node C++ internals and continues to drive the vision and details of the N|Solid runtime. The broader community shares many of the same values when it comes to performance and the flexibility of Javascript and the power of the community and its resources such as npm–but we wanted to focus our attention and efforts to support the needs of those of us running important, secure, high-throughput, production environments.</p> <p>So we took it upon ourselves to tailor Node.js a business suit and help it work well with others. Part of what we came up with is what became <a href=\"https://no*|Solid\">N|Solid</a> –an instrumented Node.js runtime and a purpose-built inspection console–a tool to both guide teams into a well-structured production environment as well as provide a devtools-like introspection and analysis interface to work with it. We wanted it to provide out-of-the-box compatibility for industry standard monitoring and other infrastructure tooling and harden its security profile, for example by disabling potentially unsafe features. Essentially, we wanted the ability to make decisions about the runtime that might make it less effective for small projects or experimental work in favor of a hardened runtime with guard rails, specifically designed to slot into best-practice production infrastructures.</p> <p>An example of this was the ability to override core <a href=\"https://nodejs.org/api/buffer.html#static-method-bufferallocsize-fill-encoding\" title=\"buffer allocation\">Buffer allocation</a> to zero-fill allocated memory. It took two more Node.js LTS releases after the initial N|Solid release with this feature for Node.js core to come up with an upstream permanent solution to the problem. We were able to provide protection for our clients immediately and seamlessly transition them to the upstream solution when it became available.</p> <p>The concept of N|Solid originated from our collective experience running Node.js applications in production and helping our customers with theirs. In addition, a good chunk of our business is helping people productionize and stabilize their Node.js environments, so we needed these tools in order to adequately research and analyze these customer issues. Much like any good product, its origin is building tools to solve our own problems first.</p> <h2 id=\"thechallengeofnodejsobservability\">The Challenge of Node.js Observability</h2> <p>The fundamental nature of application performance is that everything going on in your code breaks down to CPU instructions and work that must be done. Instrumentation is also work, and the way it's implemented can be extremely contentious with your own business logic, especially on platforms such as Node.js that have single-threaded bottlenecks such as the V8 event loop. Without a separate agent thread like the N|Solid agent, at some point the event loop must stop doing application work to collect metrics, crunch numbers, and send them over the line to the monitoring endpoint. This is your only option if your instrumentation is written in JavaScript and runs on the same event loop as the application.</p> <p>N|Solid intentionally sequesters as much of this as possible to its own execution thread that works in parallel to Node.js. The work is still being done, but no longer in a way that is in contention with your own application for its single-threaded resources. This also enables us to <a href=\"https://docs.nodesource.com/nsolid/4.10/docs#ncm2-nsolid-integration\" title=\"detect and interact with a stuck Event loop\">detect and interact with a stuck Event Loop</a> in a way that no other tool can.</p> <p>Every tool you add to your platform to improve observability and capture information adds additional overhead. N|Solid aims to provide a single, low-overhead agent for sharing this across all of your tooling needs in a way that is extremely tightly bound to the specifics of Node.js.</p> <p>Check out our <a href=\"https://benchmark.nodesource.com/?runId=1682468927429\" title=\"benchmark tool\">benchmark tool</a> to see how N|Solid compares when it comes to the cost of observability.</p> <h2 id=\"thetechnicaldetails\">The Technical Details</h2> <p>Node.js is a small engine of amazingness; combining the V8 javascript engine with a core suite of libraries to provide an extremely fast and flexible runtime environment for javascript on the server. Developers generally approach runtime engines like little black boxes–as long as it runs their code the way they expect, what is actually going on doesn’t matter all that much. The reality is that the complexity around the asynchronous model Node.js uses being radically different from most other established platforms often results in confusion about what’s going on.</p> <p>Considering all of our goals around what data we needed access to for both introspection and hardening and the additional goal of near-zero contention with application performance, we decided the only solution would be to build our own version of the runtime with our additional changes patched in. This also allows users to use N|Solid by simply using the <code>nsolid</code> binary as if it was the <code>node</code> binary–because it is! To your application, N|Solid is an environment change only, and can be tried without changing a single line of your application code.</p> <p>There’s one small added complexity of doing it this way, though: we need to to make builds of N|Solid for every supported version of Node.js on every platform of node that our customers might require. This meant our changeset needed to be consistently applied across multiple changing upstream branches built on a build farm with every possible supported architecture. Fortunately, NodeSource was and remains the top community resource for making and <*source/distributions\" title=\"distributing builds of Node.js\">distributing builds of Node.js</a> – the odds are extremely good that if you’re using Node.js, we built it for you on the same servers we’re building N|Solid.</p> <p>The rough architecture of N|Solid is a native C++ thread and a matching Javascript module built into Node.js directly that can access internal hooks and has the ability to send the results upstream in a variety of ways, such as <a href=\"https://docs.nodesource.com/nsolid/4.10/docs#opentelemetry\" title=\"OpenTelemetry\">OpenTelemetry</a> or <a href=\"https://docs.nodesource.com/nsolid/4.10/docs#statsd\" title=\"StatsD\">StatsD</a>. Foremost among these is the <a href=\"https://no*|Solid Console\">N|Solid Console</a> which provides fully wired access to all of the runtime features by making use of the bi-directional N|Solid Agent API. This bi-directional communication layer with the agent thread is what enables something akin to devtools, allowing limited interaction with a live Node.js process–even one potentially running in production environments.</p> <p>It is vital that N|Solid retains 100% compatibility with Node.js, including the entire npm ecosystem. The community was and still is still seeing a significant amount of framework churn, we wanted to sit outside of the framework discussions because we understand just how many different frameworks are being used in production right now. We wanted to make sure we can support these frameworks in what they do, but also provide a tool for comparing and selecting between frameworks.</p> <p>We want N|Solid to play well with others, so we made it aware of community practices and standards, such as package.json and common Node.js environments. As the project adopts new features and standards, N|Solid also adapts.</p> <p>Our tooling is built around the runtime engine itself, treating each process (and potentially worker thread) as an individual unit, collecting a wide set of metrics and interactive introspection such as CPU profiling or Heap Snapshot collection from live processes without having stop them or start a canary process and hope that it reproduces the observable behavior. We found it essential to provide the ability to identify and inspect a suspect process while it is still alive, enabling you to interrogate the rogue process itself instead of the frustrating process of trying to reproduce the same behavior in a lab environment.</p> <p>Node applications are often large microservice installations, sharing state across potentially thousands of processes. We wanted the N|Solid Console to be a tool to expose the information to a central repository that could manage and inspect the results and let you do some limited interactive introspection remotely. This central location for your entire production installation lets you see everything at a glance, but still dig into the details of individual processes. This coordination aspect of the N|Solid Console also allows it to compare different processes–read more about <a href=\"https://docs.nodesource.com/nsolid/4.10/docs#cpu-anomaly-detection\" title=\"anomaly detection \">anomaly detection</a> and <a href=\"https://docs.nodesource.com/nsolid/4.10/docs#saved-views\" title=\"snapshot diffing\">snapshot diffing</a> in our documentation.</p> <p>N|Solid Features</p> <ul> <li>Robust APIs: Benefit from JavaScript and C++ APIs’ flexibility and power.</li> <li>Monitoring Data: N|Solid allows for the transmission of a wide array of monitoring data, encompassing system metrics, Event Loop Utilization, worker threads, and numerous specialized Node.js metrics to third-party providers such as Datadog, New Relic, and Dynatrace.</li> <li>Open Telemetry and Tracing: Send Open Telemetry compatible traces to supported third-party providers, ensuring comprehensive observability.</li> <li>StatsD Compatibility: Transmit monitoring information using StatsD to any compatible backend.</li> <li>Environment Variable Utilization: Use all available environment variables at runtime.</li> <li>Manual Control over CPU Profiles and Heap Snapshots: Gain the ability to manually capture CPU profiles and heap snapshots using the JS or C++ API.</li> </ul> <p>The N|Solid release schedule is tied directly to the Node.js LTS release schedule. Due to how flexible development on what’s called the Current Node.js line, we wait until the release as been solidified into its LTS form prior to creating a N|Solid version. This means that all active LTS lines of Node.js have a corresponding N|Solid Release, and we aim to release new versions of N|Solid within 24 hours of the upstream Node.js LTS release. If you are stuck on a legacy version of Node.js, let our support team help you update to a current LTS version to ensure you are still getting vital security patches.</p> <p>In summary, the N|Solid Runtime <strong>is</strong> the Node.js runtime, augmented with additional capabilities to enable what we saw as operational best practices. The <a href=\"https://no*|Solid Console\">N|Solid Console</a> is the coordinated monitoring and introspection tool designed to fully leverage the N|Solid runtime and the combined experience of encountering and solving our own and our customer’s actual problems in production environments.</p> <h2 id=\"whyopensourcethensolidruntime\">Why Open Source the N|Solid Runtime?</h2> <p>This is something we’ve considered for many years. We have always been a strong supporter of the community and believe in the immense value and impact of open-source. We have remained committed to the Node.js ecosystem as active contributors and being a leading distributor of the OSS <*/blog/advancing-nodejs-package-repo-23\" title=\"binary packages\">binary packages</a>. </p> <p>Earlier this year we came to the conclusion that the timing was right, our development roadmap had reached a point where we had something meaningful to provide to the community and we could continue to deliver the value and support our Enterprise and SaaS customers expect from our commercial offering. Further, we envision that the collaboration with the global developer community will create a brighter and more innovative future for N|Solid and set a new standard for enterprise needs.</p> <p>We think everyone should be running N|Solid on their business platforms where they are using Node.js. Throughout its existence, we’ve focused on compatibility with other production tooling–even those we compete with–because most of these are not tightly coupled to Node.js. Usually they are polyglot and must cater to the lowest commonality between platforms. We want to encourage the proliferation of N|Solid and the advancement of Node-paradigm specific tooling by putting the runtime directly into the hands of the Open Source community. We see an opportunity for developers to build new connectors and integrations with other tools and support the collective creativity of the community. We get the chance to foster even greater collaboration and partnerships with other providers that want to add the value of N|Solid to their own platforms and tools.</p> <p>We’re open source engineers at heart, we believe in the power of community code and that having the source available creates an environment of trust and empowerment. We feel like we’ve only been able to scratch the surface of what’s possible here and want to bring the community into the project and we hope that we can get you all excited about it too.</p> <p>Read more about how to get involved in our <*source/nsolid/blob/node-v20.x-nsolid-v5.x/CONTRIBUTING.md\" title=\"contribution guidelines\">contribution guidelines</a>!</p> <h2 id=\"thefutureofnsolid\">The Future of N|Solid</h2> <p>We have a lot of plans already for N|Solid and welcome you to participate in their development. These are some of our upcoming initiatives:</p> <ul> <li>Custom Metrics: Capture and transport your own application-specific metrics via the N|Solid API</li> <li>Heap Profiling: Locate memory leaks by profiling memory allocation over time</li> <li>Async Stack Traces: Connect stack traces across the libuv boundary</li> <li>Improved APM Integrations: Allow APM vendors to use the N|Solid agent thread for metrics calculation and transport to move overhead off of the main process</li> <li>Implement <*cs/specs/otel/metrics/\" title=\"OpenTelemetry standard for metrics\">OpenTelemetry standard for metrics</a></li> <li>Implement <*cs/specs/otel/metrics/\" title=\"OpenTelemetry standard for logging\">OpenTelemetry standard for logging</a></li> </ul> <p>These aren’t our only ideas, and we’re interested to see what the community comes up with as well. Expect to hear more about our plans as we continue work through the open source release and documentation process. There are so many potential valuable integrations throughout the development process from IDEs through CI/CD through production tooling–we can’t wait to see where we can take this together!</p> <h2 id=\"backedbythenodesourceteam\">Backed by the NodeSource Team</h2> <p>N|Solid is <*/services/support\" title=\"backed by the entire NodeSource team\">backed by the entire NodeSource team</a>, and for those who want a hand in adopting N|Solid or Node.js, we are here to help. From installation and configuration to upgrades, troubleshooting, and performance tuning, our engineers can support your team at every stage in the application development lifecycle.</*em> </channel> </rss>",
    "url": "https://nodesource.com/blog/rss"
  },
  {
    "body": " * * * * * * You have re* Support (LTS) All Posts Community 3 Takeaways from Web Summit 2023 by: Russ Whitman in Community on Nov 30 2023 NodeSource Conference Artificial Intelligence Recap Share Along with approximately 70,000 other souls from around the globe, the NodeSource team attended Web Summit 2023 earlier this month. Famous for being the largest European tech event (or even the world), Web Summit was full of riveting AI conversations, more than 2,600 startups, and plenty of tasty food trucks and, of course, amazing local cuisine. On the heels of this successful event, we’d like to share our team’s biggest event takeaways as we close this year on a strong note and get ready for what 2024 has in store. #1 Everyone has a unique take on using AI. From session topics to conversations with our peers, AI was all the buzz at the event and we were definitely not the only ones leaning into the AI movement. Startups across all industries are injecting AI into their products and services, and many are at different points in their adoption of the technology. While there are many who are only an inch deep into AI, some are using it in more advanced and compelling ways. For example, Riccardo Semadeni, MediRapp AG’s CEO, is transforming ultrasound diagnostics and improving global patient outcomes by automating everything from data collection to diagnosis to reporting. With AI, MediRapp is making the entire process faster, more accurate, and more effective while significantly elevating patient care. This is a great showcase of how AI can process nearly unlimited amounts of data and provide analysis that significantly increases the quality of outputs and helps make better decisions. On the other hand, another company, Harry, is using AI in a completely different way. Simo Alami explained how they are creating AI powered resources for companies. Do you need a content writer? SEO specialist? PR manager? Other marketing talent? Harry will create a customized AI resource for your organization. This is a very interesting use of generative AI to create meaningful value for small and even large organizations by augmenting teams with AI powered by data. These two examples showcase how innovative leaders are identifying new ways to use AI advancements to transform their industries. #2 Collaboration paves the way for continued transformation. Our team traveled from all over the world to attend Web Summit—Seoul, Madrid, Sao Paulo, Utah, Seattle, Medellin, Bogata, Vancouver, and Berlin. With this in-person time together, we dove deep into ways we could continue to elevate our offering and customer experience. We discussed ways to evolve our recently open-sourced N|Solid Runtime and advance our AI powered Node.js Copilot, which we released on the first day of Web Summit. This time allowed us to gather essential insights from our community who shared the common consensus that NodeSource’s ability to open-source our runtime would be transformative for development teams. Having dedicated time to come together as a team to bond, share, and test new ideas is critical to our success and we look forward to putting these plans into motion. #3 Our industry is full of startup founders dedicated to making an impact. On the event’s opening day, NodeSource was one of 300 startups selected for a special event, “The Gathering.” During the day, we participated in group sessions discussing a range of topics from leadership to raising capital to AI. While these discussions were full of great insights, what was even more notable was the ability to connect with fellow founders looking to make an impact. Web Summit was full of lively conversation about taking our industry to the next level. We chatted with startup entrepreneurs, learned from headliners with unique stories, and shared exciting updates with investors, press, and customers. We thoroughly enjoyed connecting with founders and enterprise leaders whose digital products rely on Node.js and tech builders that leverage and build with Node. Overall, NodeSource had a wonderful time at Web Summit and even had the opportunity to visit some local sites, like visiting CasCais by way of a winding trek along the coast and then up into the hills to the westernmost point of all of Europe at Cabo Da Roca. Heading into the new year, we can’t wait to attend Web Summit 2024! ** * *f the performance, security and behavior of Node.js applications and functions. Start for Free © *",
    "url": "https://nodesource.com/blog/takeaways-web-summit-2023"
  },
  {
    "body": " * * * * * About Press SIGN IN/SIGN UP Infrastructure Cost Calculator Big Savings with N|Solid Observability Provider Select from the list below Appdynamics Datadog Dynatrace Instana New Relic Infrastructure Provider Select from the list below AWS Azure Google Cloud Infrastructure Service Select from the list below Select an option General Purpose Compute Optimized Memory Optimized Number of Processes Select the number of processes below Results To obtain metrics and traces: Observability Provider Total Infrastructure Cost Number of Processes with N|Solid Total Infrastructure Cost Total Infrastructure Savings (0% less!) Number of Processes (0% less!) One of the main performance problems for a Node.js application in a production environment is the overhead coming from your APM. N|Solid was designed to be the most performant APM available. To see the benchmark this calculation was derived from, as well as other details around APM performance, visit this article. This calculation is based on the assumption that you are using individual instances for each process, the Node.js application is using Fastify as the web framework and the price estimation is calculated according to the results for each APM published in our open-source project: https://benchmark.nodesource.com/ START USING N|SOLID © *",
    "url": "https://nodesource.com/infrastructure-cost"
  },
  {
    "body": " * * * * * About Press SIGN IN/SIGN UP Microservices GET Better with Node.js NodeSource for API Integration and Microservices Common Industries: Financial services, gaming, media content distribution or syndication. Get Started Today A microservices architecture (including APIs and SOA) structures applications as a collection of loosely-coupled services which enable numerous granular business capabilities. In addition to making continuous delivery and deployment of large, complex applications possible, microservices also enable efficient evolution of an organization’s technology stack. For organizations in many industries — from financial services to interactive gaming and media — Node.js is especially useful in allowing applications to talk to each other via APIs for increased operational and business success. Download the Data Sheet Financial services Many forward-thinking financial services companies strive to add value over traditional banks, adopting new technologies and delivering services through user-friendly digital channels. Node.js offers a lightweight, event-driven model ideal for building APIs that allow applications to talk to each other. Though eager for competitive advantage, financial services businesses remain risk averse, with all the compliance, security, and privacy concerns that go along with managing customers’ money. If just one application is unavailable for a single minute, millions could be lost. These “million-dollar-a-minute” apps require serious security and failure predictability, as well as the ability to quickly triage and correct any outages or issues as they arise. Gaming and media If gamers lose the ability to make in-game purchases or a game goes down, primary revenue streams are interrupted, and the user experience is diminished. Interactive online games are common targets for hackers, so security is paramount. Media companies distribute content to partners and customers online, and often their entire businesses are on the web. If they can’t provide the content, they lose revenue. Node.js with NodeSource For modern organizations, Node.js is a tremendously popular technology choice it’s easy to use and rarely breaks. But when a problem does arise, it can be a difficult to understand immediately what went wrong, where, and how to fix it. When moving from development to production, DevOps teams often struggle to understand how to monitor and predict problems with Node.js.. NodeSource provides visibility into application behavior and overall system health, so you can understand what’s going on in your code more than you can with Node.js alone. NodeSource can help you find the root cause of performance issues, identify what broke, and where to go within the code to fix it — saving days or months of work, and potentially millions of dollars in revenue. N|Solid for API & microservices Microservice processes are ephemeral; because they are, short-lived and frequently changing, capturing forensic data can be a challenge, especially in regards to CPU profiling or memory snapshots — the very things that provide insight into application performance. It’s possible to get those artifacts with Node.js and other open source products, but the unique challenges of transferring information about memory or crashing problems in order to examine them poses security challenges. Further, OS instrumentation and augmentation of scripts can present security risks, have adverse effects, and provide imprecise results. N|Solid removes all these friction points and makes profiling, capturing snapshots, or troubleshooting event-loop lag simple and painless. Its architecture allows ephemeral artifacts to be moved to a stable, user-determined location. Even if the process goes down, the artifacts remain, long after a crash or machine termination. If a process in production is completely blocked and insight into a non-responsive application is required, there is no solution in the open source world. Because the NodeSource agent lives inside the event loop, it can retrieve that critical information. Further, the system uses encryption, cryptographic keys and curves, and is a complement to any protocol. Rigorous development processes help, as does testing in a staging environment, but production is where the heavy loads, unique use cases and long tail anomalies occur. Some patterns will only occur in a production environment. Visibility, insight and post-mortem debuggability are essential in triaging and resolving problems quickly and effectively. NodeSource saves time, money, and resources in finding and fixing a bug that, if left unresolved, could take out internal business processes, applications, or APIs, negatively impacting customers or partners. Key Considerations How NodeSource Provides Value Protecting critical data and services N|Solid ships with configurable security policies to help harden your applications. Always-on vulnerability scanning makes you aware of emerging risks in real time, not just at runtime. Fast and reliable performance for end users N|Solid provides tools for profiling application performance and supports workflows that give the entire team insight into behavior. Compliance with regulatory and self-imposed standards NodeSource Certified Modules provides license enforcement and quantitative trust in third-party Node.js modules, empowering developers to use open source code with minimal overhead while ensuring compliance and mitigating risk. Ability to rapidly detect and remediate issues and reduce or eliminate outages Customizable alerts give your team instant notice when a problem is detected, enabling remediation of issues before they escalate to a full-scale outage and reducing mean time-to-resolution (MTTR). Increasing innovation velocity to maintain competitive advantage The NodeSource platform provides a turnkey way to standardize and operationalize Node.js development across multiple teams within your organization. Ready to learn more? Get in touch! Contact Us © *",
    "url": "https://nodesource.com/solutions/api-integration-microservices"
  },
  {
    "body": " * * * * * About Press SIGN IN/SIGN UP High-Octane Apps are Driven by Node.js NodeSource for High-Performance Applications Common Industries: Medical sciences, aerospace, video editing, online transaction processing. Get Started Today Applications with sustained high-volume workloads, various transaction sizes, and other I/O-intensive environments are prevalent across a broad swath of industries and businesses. Medical sciences and imaging, aerospace, online transaction processing, weather forecast and simulation, data migration, and video — both on-demand and post-production processing — are just a few examples of the diversity of data and transaction-heavy use cases. These high-performance environments can involve massive or minimal requirements for data storage, but they always have active workloads with either a large number of transactions of various sizes, or a smaller number of transactions that require high bandwidth of many megabytes per second. Optimizing for these varied environments is not straightforward, and often a challenge. Download the Data Sheet Node.js with NodeSource For many organizations with high-traffic environments, Node.js is tremendously useful — it’s ideal for I/O-bound applications due to its single-thread event loop and asynchronous processing. For typical Node.js applications, a majority of processing time is spent waiting for network, file system, and database transactions to complete. Node.js is an elegant solution for handling high request volumes thanks to its asynchronous I/O methods, which allow simultaneous requests to be served during the time it takes for a read/write to complete. Although Node.js is an excellent technology choice for this use case, there is only so much an application can do under continuous tremendous load, so visibility into the performance and health of these applications is critical. Most high I/O use cases develop scalability issues, so ensuring this visibility is critical to detecting and resolving issues before they cause a major system failure or outage. The solution to scaling gracefully may be to create more instances of an application, distributing across multiple Node.js processes, or other changes to architecture, without insight into the behavior of an application, it’s nearly impossible for teams to identify and implement the best case-specific solution. NodeSource provides visibility into application behavior and overall system health with performance metrics not captured by the open source Node.js runtime, offering your team an unparalleled view of how code behaves in a production environment. By capturing detailed Node.js-specific metrics, the N|Solid platform can help you find the root cause of performance issues, identify what broke, and where to go within the code to fix it — saving days or months of work and drastically improving time to resolution. N|Solid for High-Performance N|Solid provides critical insight in cases where performance is critical by providing metrics on event loop lag, and task-per- second performance monitoring. It also provides critical metrics on open and active handlers — connections to transaction-related tasks — that provide valuable data to inform when and how to scale out infrastructure or services, pinpoint memory leakages, and when to free up resources. N|Solid removes common friction points and makes it safe and simple to monitor and protect production applications. Make rapid incremental changes, debug issues faster, and make better architectural decisions with the ability to see performance degradation or problems as code continues to change. Customers have saved weeks of troubleshooting performance regressions, high latency, and other issues. By using the N|Solid in high volume environments, teams can stay ahead of potential scalability problems, memory, and resource management issues, ultimately driving savings on infrastructure costs as well as potential outages in production. Maximizing the value of Node.js Applications performance monitoring tools can provide insight into services, applications and infrastructure, but at a very high level, and without visibility into the inner workings of Node.js. However, watching from the outside actually impacts the performance of the event loops, providing inaccurate data. Because the N|Solid runtime agent lives natively at the core of your application, it can capture highly detailed, Node.js-specific data with a negligible impact on performance. Watching from the inside out also delivers more metrics because it operates alongside — not above — your applications. Rigorous development processes help, as does testing in a staging environment, but production is where the heavy loads, unique use cases, and long tail anomalies occur. Some patterns will only occur in a production environment. Visibility, insight, and post-mortem debuggability are essential in triaging and resolving problems quickly and effectively. NodeSource saves time, money, and resources in finding and fixing bugs that, if left unresolved, could threaten the success of legacy migration projects. Key Considerations How NodeSource Provides Value Protecting critical data and services N|Solid ships with configurable security policies to help harden your applications. Always-on vulnerability scanning makes you aware of emerging risks in real-time, not just at runtime. Fast and reliable performance for end users N|Solid provides tools for profiling application performance and supports workflows that give the entire team insight into behavior Relevant, Node.js-specific metrics The N|Solid runtime agent lives natively at the application core, where it captures highly detailed, Node.js-specific metrics with greater accuracy than popular APM tools and negligible impact on performance. Ability to rapidly detect and remediate issues and reduce or eliminate outages Customizable alerts give your team instant notice when a problem is detected, enabling remediation of issues before they escalate to a full-scale outage and reducing mean time-to-resolution (MTTR). Increasing innovation velocity to maintain competitive advantage The NodeSource platform provides a turnkey way to standardize and operationalize Node.js development across multiple teams within your organization. Ready to learn more? Get in touch! Contact Us © *",
    "url": "https://nodesource.com/solutions/high-performance-applications"
  },
  {
    "body": " * * * * * About Press SIGN IN/SIGN UP High-Octane Apps are Driven by Node.js NodeSource for High-Performance Applications Common Industries: Medical sciences, aerospace, video editing, online transaction processing. Get Started Today Applications with sustained high-volume workloads, various transaction sizes, and other I/O-intensive environments are prevalent across a broad swath of industries and businesses. Medical sciences and imaging, aerospace, online transaction processing, weather forecast and simulation, data migration, and video — both on-demand and post-production processing — are just a few examples of the diversity of data and transaction-heavy use cases. These high-performance environments can involve massive or minimal requirements for data storage, but they always have active workloads with either a large number of transactions of various sizes, or a smaller number of transactions that require high bandwidth of many megabytes per second. Optimizing for these varied environments is not straightforward, and often a challenge. Download the Data Sheet Node.js with NodeSource For many organizations with high-traffic environments, Node.js is tremendously useful — it’s ideal for I/O-bound applications due to its single-thread event loop and asynchronous processing. For typical Node.js applications, a majority of processing time is spent waiting for network, file system, and database transactions to complete. Node.js is an elegant solution for handling high request volumes thanks to its asynchronous I/O methods, which allow simultaneous requests to be served during the time it takes for a read/write to complete. Although Node.js is an excellent technology choice for this use case, there is only so much an application can do under continuous tremendous load, so visibility into the performance and health of these applications is critical. Most high I/O use cases develop scalability issues, so ensuring this visibility is critical to detecting and resolving issues before they cause a major system failure or outage. The solution to scaling gracefully may be to create more instances of an application, distributing across multiple Node.js processes, or other changes to architecture, without insight into the behavior of an application, it’s nearly impossible for teams to identify and implement the best case-specific solution. NodeSource provides visibility into application behavior and overall system health with performance metrics not captured by the open source Node.js runtime, offering your team an unparalleled view of how code behaves in a production environment. By capturing detailed Node.js-specific metrics, the N|Solid platform can help you find the root cause of performance issues, identify what broke, and where to go within the code to fix it — saving days or months of work and drastically improving time to resolution. N|Solid for High-Performance N|Solid provides critical insight in cases where performance is critical by providing metrics on event loop lag, and task-per- second performance monitoring. It also provides critical metrics on open and active handlers — connections to transaction-related tasks — that provide valuable data to inform when and how to scale out infrastructure or services, pinpoint memory leakages, and when to free up resources. N|Solid removes common friction points and makes it safe and simple to monitor and protect production applications. Make rapid incremental changes, debug issues faster, and make better architectural decisions with the ability to see performance degradation or problems as code continues to change. Customers have saved weeks of troubleshooting performance regressions, high latency, and other issues. By using the N|Solid in high volume environments, teams can stay ahead of potential scalability problems, memory, and resource management issues, ultimately driving savings on infrastructure costs as well as potential outages in production. Maximizing the value of Node.js Applications performance monitoring tools can provide insight into services, applications and infrastructure, but at a very high level, and without visibility into the inner workings of Node.js. However, watching from the outside actually impacts the performance of the event loops, providing inaccurate data. Because the N|Solid runtime agent lives natively at the core of your application, it can capture highly detailed, Node.js-specific data with a negligible impact on performance. Watching from the inside out also delivers more metrics because it operates alongside — not above — your applications. Rigorous development processes help, as does testing in a staging environment, but production is where the heavy loads, unique use cases, and long tail anomalies occur. Some patterns will only occur in a production environment. Visibility, insight, and post-mortem debuggability are essential in triaging and resolving problems quickly and effectively. NodeSource saves time, money, and resources in finding and fixing bugs that, if left unresolved, could threaten the success of legacy migration projects. Key Considerations How NodeSource Provides Value Protecting critical data and services N|Solid ships with configurable security policies to help harden your applications. Always-on vulnerability scanning makes you aware of emerging risks in real-time, not just at runtime. Fast and reliable performance for end users N|Solid provides tools for profiling application performance and supports workflows that give the entire team insight into behavior Relevant, Node.js-specific metrics The N|Solid runtime agent lives natively at the application core, where it captures highly detailed, Node.js-specific metrics with greater accuracy than popular APM tools and negligible impact on performance. Ability to rapidly detect and remediate issues and reduce or eliminate outages Customizable alerts give your team instant notice when a problem is detected, enabling remediation of issues before they escalate to a full-scale outage and reducing mean time-to-resolution (MTTR). Increasing innovation velocity to maintain competitive advantage The NodeSource platform provides a turnkey way to standardize and operationalize Node.js development across multiple teams within your organization. Ready to learn more? Get in touch! Contact Us © *",
    "url": "https://nodesource.com/solutions/high-traffic-applications"
  },
  {
    "body": " * * * * * About Press SIGN IN/SIGN UP Node.js Lives in Smart Homes NodeSource for IoT Common Industries: Home security, smart appliances, health care, air travel. Get Started Today From home and business security, industrial equipment and healthcare, to air travel, insurance and entertainment, the Internet of Things has spread rapidly across business sectors. Node.js is especially useful in IoT as this field continues to grow in popularity. Anytime a user has endpoints running Node.js in the field — whether it be in chipset or a kiosk/device — they need to ensure their apps are running, and doing so effectively. Collecting all that endpoint data effectively, and being able to repurpose it as well - is critical for the success of IoT implementations. Traditionally, it’s been hard to debug hardware. Writing software that enables hardware to \"phone home\" to web-based services can be especially tricky. Node.js is being adopted in IoT use cases for rapidly prototyping before products get hardened and mass produced. However, troubleshooting open source Node.js by itself in a debugging environment or as part of quality assurance can be difficult, if not impossible. Download the Data Sheet Node.js with NodeSource For many IoT companies and situations, Node.js is tremendously popular - it’s easy to use and rarely breaks. But when a problem does arise, understanding what went wrong, where, and how to fix it is very hard to do; whenever possible, eliminating these bugs before devices are mass produced is critical. When moving from prototype to production, when developers need to monitor and predict problems with Node.js, there is no simple solution. However, with NodeSource, you can understand what’s going on in your code more than you can with Node.js alone. NodeSource can help you find the root cause of performance issues, identify what broke, and where to go within the code to fix it - saving days, or even months of work. N|Solid for IoT The N|Solid platform is especially helpful in IoT use cases because of how the protocol works. It moves code data away from the individual device (which might have limited storage or availability, or may not be secure) out to cloud-based, user-determined and controlled storage. In the case of quality assurance uses, developers can debug and get greater visibility into processes during product bake-in, a huge value add and tremendous resource saver. For example, capturing forensic data can be a challenge, especially in regards to CPU profiling or memory snapshots; the very things that provide insight into application performance. It’s possible to get those artifacts with Node.js and other open source products, but the unique challenges of transferring information about memory or crashing problems in order to examine them poses security challenges. Further, open source instrumentation and augmentation of scripts can present security risks, have adverse effects, or provide imprecise results. NodeSource N|Solid removes all these friction points and makes things like profiling, snapshots or troubleshooting event-loop lag safe and simple. It’s architecture allows ephemeral artifacts to be moved to a stable, user determined location. Even if the the process goes down, the artifacts remain long after a crash or device termination. If a process in production is completely blocked and insight into a non-responsive application is required, there is no solution in the open source world. Because the NodeSource agent lives inside the event-loop it can retrieve that critical information. Further, the system uses encryption, crypto keys and curves, and is a complement to any protocol. Rigorous development processes help, as does testing in a staging environment, but production is where the heavy loads, unique use cases and long tail anomalies occur--some patterns will only occur in a production environment. Visibility, insight and post-mortem debuggability are essential in triaging and resolving problems quickly and effectively. NodeSource saves time, money and resources in finding and fixing a bug that could take out internal business processes, applications, or APIs that are affecting customers or partners. Key Considerations How NodeSource Provides Value Protecting critical data and services N|Solid ships with configurable security policies to help harden your applications. Always-on vulnerability scanning makes you aware of emerging risks in real-time, not just at runtime. Fast and reliable performance for end users N|Solid provides tools for profiling application performance and supports workflows that give the entire team insight into behavior. Compliance with regulatory and self-imposed standards NodeSource Certified Modules provides license enforcement and quantitative trust in third-party Node.js modules, empowering developers to use open source code with minimal overhead while ensuring compliance and mitigating risk. Ability to rapidly detect and remediate issues and reduce or eliminate outages Customizable alerts give your team instant notice when a problem is detected, enabling remediation of issues before they escalate to a full-scale outage and reducing mean time-to-resolution (MTTR) . Increasing innovation velocity to maintain competitive advantage The NodeSource platform provides a turnkey way to standardize and operationalize Node.js development across multiple teams within your organization. Ready to learn more? Get in touch! Contact Us © *",
    "url": "https://nodesource.com/solutions/iot"
  },
  {
    "body": " * * * * * About Press SIGN IN/SIGN UP Modernization with Node.js NodeSource for Legacy Application Migration Common Industries: Government, financial services, insurance, transportation and any other organization with legacy applications. Get Started Today The need to modernize legacy applications is becoming increasingly common. Twenty- to thirty- year-old legacy systems are relied upon by banks, government agencies, and other businesses to perform essential customer and business transactions. These systems are often custom-built, include millions of lines of code, and support data-intensive processes. They are central to business, containing critical data and vital intellectual property. Most of these aging systems aren't able to keep up with ever-increasing demands, especially those that manage large amounts of data and high transaction rates. As a result, leaders across industries and departments, from IT to the C-suite, are worried about threats to mission-critical capabilities, security breaches, performance issues, and service disruptions. Over the years, efforts to keep up with technology changes meant old, slow-performing and resource-intensive systems were incrementally updated over time. But the resulting accumulated technical debt — or the cost of additional work caused by years of selecting a simple solution in the short term rather than a more complex, long term approach — is massive. The answer for many organizations is legacy application migration and modernization on new platforms for improved resource optimization, higher scalability, faster data speed and quicker workload balancing — in-house or in the cloud. Download the Data Sheet Node.js with NodeSource For many organizations faced with legacy migration, Node.js is a tremendously useful development framework — it’s easy to use and rarely breaks. It also promotes a decoupling of the architecture paradigm, enabling rapid iteration and reduced risk. The patterns that Node.js introduces into the development environment are broken into smaller pieces which allows for code with disposability, and the option of more aggressive and flexible development. If something breaks, developers don’t need to address the whole code base. But problems can arise with many smaller pieces of code, and it can be a difficult to immediately understand what went wrong, where, and how to fix it. Third-party packages from the open source community can help speed the development cycle, but using them can introduce a new set of quality control issues. NodeSource provides visibility into application behavior and overall system health, so you can understand what’s going on in your code more than you can with Node.js alone. The N|Solid platform can help you find the root cause of performance issues, identify what broke, and where to go within the code to fix it, saving days or months of work. Additionally NodeSource Certified Modules is a secure, private registry of trusted Node modules. NCM calculates a trust score for each public third-party module, monitoring for security vulnerabilities and dynamically adjusting scores in real time to identify emerging risks. Armed with an understanding of a module’s risk profile, users can confidently install third-party modules in mission-critical environments. N|Solid for Legacy Migration N|Solid removes common friction points and makes it safe and simple to monitor and protect production applications. Make rapid incremental changes, debug issues faster, and make better architectural decisions with the ability to see performance degradation or problems as code continues to change. Customers have saved weeks of troubleshooting performance regressions, high latency, and other issues. By using the N|Solid in the development and testing phases of the migration process, teams could identify architectural anti-patterns and potential problems in development, ultimately driving savings on infrastructure costs as well as potential outages in production. Maximizing the value of Node.js Applications performance monitoring tools can provide insight into services, applications and infrastructure, but at a very high level, and without visibility into the inner workings of Node.js. However, watching from the outside actually impacts the performance of the event loops, providing inaccurate data. Because the N|Solid runtime agent lives natively at the core of your application, it can capture highly detailed, Node.js-specific data with a negligible impact on performance. Watching from the inside out also delivers more metrics because it operates alongside — not above — your applications. Rigorous development processes help, as does testing in a staging environment, but production is where the heavy loads, unique use cases, and long tail anomalies occur. Some patterns will only occur in a production environment. Visibility, insight, and post-mortem debuggability are essential in triaging and resolving problems quickly and effectively. NodeSource saves time, money, and resources in finding and fixing bugs that, if left unresolved, could threaten the success of legacy migration projects. Key Considerations How NodeSource Provides Value Protecting critical data and services N|Solid ships with configurable security policies to help harden your applications. Always-on vulnerability scanning makes you aware of emerging risks in real-time, not just at runtime. Fast and reliable performance for end users N|Solid provides tools for profiling application performance and supports workflows that give the entire team insight into behavior. Compliance with regulatory and self-imposed standards NodeSource Certified Modules provides license enforcement and quantitative trust in third-party Node.js modules, empowering developers to use open source code with minimal overhead while ensuring compliance and mitigating risk. Ability to rapidly detect and remediate issues and reduce or eliminate outages Customizable alerts give your team instant notice when a problem is detected, enabling remediation of issues before they escalate to a full-scale outage and reducing mean time-to-resolution (MTTR). Increasing innovation velocity to maintain competitive advantage The NodeSource platform provides a turnkey way to standardize and operationalize Node.js development across multiple teams within your organization. Ready to learn more? Get in touch! Contact Us © *",
    "url": "https://nodesource.com/solutions/legacy-application-migration"
  },
  {
    "body": "Node Weekly Archives| Latest| RSS Subscribe now » Easy to unsubscribe at any time. Your e-mail address is safe — here's our privacy policy. « Prev Next » #​410 — OCTOBER 21, 2021 READ ON THE WEB Node Weekly Node v17 (Current) Released — Being sixteen flew by in a flash for me at least, but so too has it for Node 16 remaining the cutting edge ‘release’ line. v17 now takes over that role with Node 16 becoming an Active LTS version (as of next week, technically) to be maintained through to 2024. But what’s new in Node 17? Includes OpenSSL 3.0 which reintroduces FIPS support. Uses the V8 9.5 engine which introduces the Intl.DisplayNames v2 API. The readline module now has a way to read data from Readable streams. npm upgraded to v8.1.0. Node v17.0.1 already dropped to fix a bug relating to building native addons. BETHANY NICOLLE GRIGGS AND THE NODE.JS TEAM 📢 Just as we were about to hit send, Gatsby 4.0 was released (in final, rather than beta, form) :-) We'll feature it more in tomorrow's JavaScript Weekly. Secure Redis Hosting for Your Team — RedisGreen includes all the latest features to help you build, along with the security, scaling and performance that teams need as they grow. REDISGREEN SPONSOR How to 'Cancel' an HTTP Request — The so-called Abort API allows you to cancel asynchronous tasks such as in-flight HTTP requests and here’s how to use it in the latest Node.js version. Simon has also given a 30 minute talk about AbortController generally if you want to learn more. SIMON PLENDERLEITH Understanding and Implementing OAuth2 in Node — OAuth2 is everywhere. From “Login With Facebook” buttons to back-end API authentication. But how does it work? DIOGO SOUZA ▶ How to Build and Sell Your Own Node-Based Web API — Popular JavaScript screencaster Ania Kubów tackles the idea of making a Web-based API using Node and then offering access to it, for a fee, via the RapidAPI marketplace. ANIA KUBÓW ▶ Finding a Lost Song with Node and Async Iterators — Luciano got a song in his head and wanted to remember what it was. Being a programmer, of course, he didn’t just wait to figure it out but set out to code a solution by way of the Last.fm API. LUCIANO MAMMINO How to Dockerize an Existing Node App — Sticks very much to a basic, demo example. AYOOLUWA ISAIAH An Engineering Leader’s Guide to OpenTelemetry LIGHTSTEP SPONSOR Don't Mix Refactorings with Behavior Changes JASON SWETT 🛠 Code & Tools Tensei: A Node.js Headless CMS with GraphQL and REST APIs — Data is managed via the Mikro ORM and can reside in a MySQL, MongoDB, Postgres or SQLite database. The getting started docs show how quick it is to spin up a blog system with it. KATI FRANTZ-VALLIE AND CONTRIBUTORS. Blitz.js: Rails-Like Framework for Monolithic, Full-Stack React Apps — A ‘batteries included’ framework built on Next.js that boasts a ‘zero API’ approach eliminating the need for a REST/GraphQL API for the data layer. BRANDON BAYER AND BLITZ.JS CONTRIBUTORS Gramma: A Command-Line Grammar Checker — A CLI tool (though there is a JS API) written in Node that uses LanguageTool to provide natural language grammar checking. CADEREK Take Domain Management with Node.js to the Next Level 👀 Special Offer DNSIMPLE SPONSOR JavaScript Obfuscator: A Way to Scramble Your JS Code — Transforms your code into a functionally equivalent representation that’s harder to understand or modify. A lot of folks find this sort of fiddling to be of little value given it can be reversed to some extent anyway, but there’s a Web interface if you want to give it a try. TIMOFEY KACHALOV, TIAGO SERAFIM, ET AL. vdx: An Intuitive CLI for Processing Video, Powered by FFmpeg — Lets you perform a number of operations including crop, trim, change frame rate, convert format, run concurrent operations, and more. YUAN QING LIM AutoCannon 7.5: A Fast HTTP/1.1 Benchmarking Tool — Inspired by wrk and with support for HTTP pipelining and HTTPS. MATTEO COLLINA 💻 Jobs Find Tech Jobs with Hired — Create a profile on Hired to connect with hiring managers at growing startups and Fortune 500 companies. It's free for job-seekers. HIRED 🕰 ICYMI (Some older stuff that's worth checking out...) Chris Armstrong demonstrates how to add retries, timeouts and cancellation to your fetch() calls without including another HTTP library. Managing config files across environments can sometimes be challenging, but here's a look at how using node-config to create Node.js configuration files can help. Simon Plenderleith explains how to take advantage of promise-based APIs in Node.js. This tutorial covers using the Node.js library Sharp to process images. « Prev Next » Subscribe now » Easy to unsubscribe at any time. Your e-mail address is safe — here's our privacy policy.",
    "url": "https://nodeweekly.com/issues/410"
  }
]
